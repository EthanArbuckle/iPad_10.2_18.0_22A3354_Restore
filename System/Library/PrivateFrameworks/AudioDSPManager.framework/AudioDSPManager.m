void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v3;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_236C8541C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_25083BA48, MEMORY[0x24BEDAAF0]);
}

void sub_236C85490(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

id get_adm_log_object(void)
{
  if (get_adm_log_object(void)::onceToken != -1)
    dispatch_once(&get_adm_log_object(void)::onceToken, &__block_literal_global);
  return (id)get_adm_log_object(void)::g_adm_log_object;
}

void ___Z18get_adm_log_objectv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "audio_dsp_manager");
  v1 = (void *)get_adm_log_object(void)::g_adm_log_object;
  get_adm_log_object(void)::g_adm_log_object = (uint64_t)v0;

}

double adm::exclaves::utility::convert_to<audiodsptypes_audiostreambasicdescription_s,CA::StreamDescription>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  double result;

  v2 = (uint64_t)*(double *)a2;
  if (v2 <= 44099)
  {
    if (v2 > 23999)
    {
      v3 = v2 == 24000;
      v4 = 32000;
    }
    else
    {
      v3 = v2 == 8000;
      v4 = 16000;
    }
  }
  else if (v2 <= 88199)
  {
    v3 = v2 == 44100;
    v4 = 48000;
  }
  else
  {
    v3 = v2 == 88200 || v2 == 96000;
    v4 = 192000;
  }
  if (!v3 && v2 != v4)
    v2 = 0;
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

uint64_t adm::exclaves::utility::convert_to<std::optional<float>,audiodsputility_parametervalue_s>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  unint64_t v4;

  v1 = 0;
  v2 = *(_QWORD *)a1;
  v3 = 0.0;
  if (*(uint64_t *)a1 <= 0x23580A01CC35D89DLL)
  {
    if (v2 != 0xBA94426FF040F022 && v2 != 0xE9CAC24E271E1010)
      return v1 | LODWORD(v3);
    goto LABEL_9;
  }
  switch(v2)
  {
    case 0x23580A01CC35D89ELL:
LABEL_9:
      if (*(_BYTE *)(a1 + 8))
        v3 = 1.0;
      goto LABEL_13;
    case 0x5DD696EC90A5CD44:
      v3 = *(float *)(a1 + 8);
LABEL_13:
      v1 = 0x100000000;
      return v1 | LODWORD(v3);
    case 0x7F1E21C17219CAE8:
      v4 = *(unsigned __int8 *)(a1 + 8);
      if (v4 >= 7)
      {
        v1 = 0;
        return v1 | LODWORD(v3);
      }
      v3 = flt_236CDD288[v4];
      goto LABEL_13;
  }
  return v1 | LODWORD(v3);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t adm::utility::getPortSubType(uint64_t result, unsigned int a2, int a3, char *a4)
{
  uint64_t v4;
  BOOL v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;

  if ((_DWORD)result == 1970496032)
  {
    v4 = a4[23];
    v5 = (v4 & 0x80u) != 0;
    if ((v4 & 0x80u) != 0)
      v4 = *((_QWORD *)a4 + 1);
    if (v5)
      v6 = *(char **)a4;
    else
      v6 = a4;
    if (v4 >= 9)
    {
      v7 = &v6[v4];
      v8 = v6;
      do
      {
        v9 = (char *)memchr(v8, 48, v4 - 8);
        if (!v9)
          break;
        if (*(_QWORD *)v9 == 0x3131313A43413530 && v9[8] == 52)
        {
          if (v9 != v7 && v9 - v6 != -1)
            return 909127729;
          return 1970496032;
        }
        v8 = v9 + 1;
        v4 = v7 - (_BYTE *)v8;
      }
      while (v7 - (_BYTE *)v8 >= 9);
    }
    return 1970496032;
  }
  else if ((_DWORD)result == 1651275109)
  {
    if ((a3 - 1) >= 3)
      return 1651275109;
    else
      return dword_236CDD2D4[a3 - 1];
  }
  else if (a2)
  {
    return a2;
  }
  else
  {
    return result;
  }
}

_QWORD *adm::graph::Semantic::operator std::string(_QWORD *a1, int a2)
{
  uint64_t v4;
  NSObject *adm_log_object;
  _DWORD v7[2];
  uint64_t v8;

  v4 = 0;
  v8 = *MEMORY[0x24BDAC8D0];
  do
  {
    if (adm::graph::detail::gSemanticInfoTable[v4] == a2)
      return std::string::basic_string[abi:ne180100]<0>(a1, *(char **)&adm::graph::detail::gSemanticInfoTable[v4 + 2]);
    v4 += 4;
  }
  while (v4 != 12);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    v7[0] = 67109120;
    v7[1] = a2;
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, "Unknown");
}

void sub_236C858E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  *(_OWORD *)v4 = *(_OWORD *)a2;
  v4[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(uint64_t result)
{
  const char *v1;
  int v2;

  switch(*(_BYTE *)result)
  {
    case 1:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::object or m_value.object != nullptr";
      v2 = 1220;
      break;
    case 2:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::array or m_value.array != nullptr";
      v2 = 1221;
      break;
    case 3:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::string or m_value.string != nullptr";
      v2 = 1222;
      break;
    case 8:
      if (*(_QWORD *)(result + 8))
        return result;
      v1 = "m_type != value_t::binary or m_value.binary != nullptr";
      v2 = 1223;
      break;
    default:
      return result;
  }
  __assert_rtn("assert_invariant", "json.hpp", v2, v1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(uint64_t **a1, int a2)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t i;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  void *v26;
  void *v27;
  void **v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  v3 = a2 - 1;
  if (a2 == 1)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, (*a1)[2]);
    v4 = (uint64_t)(*a1 + 1);
    v5 = (_QWORD *)**a1;
    if (v5 != (_QWORD *)v4)
    {
      v6 = v31;
      do
      {
        if (v6 >= v32)
        {
          v6 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, (uint64_t)(v5 + 7));
        }
        else
        {
          *(_BYTE *)v6 = *((_BYTE *)v5 + 56);
          *(_QWORD *)(v6 + 8) = v5[8];
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v5 + 7));
          *((_BYTE *)v5 + 56) = 0;
          v5[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
          v6 += 16;
        }
        v31 = v6;
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != (_QWORD *)v4);
    }
  }
  else if (a2 == 2)
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(&v30, ((*a1)[1] - **a1) >> 4);
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(**a1, (*a1)[1], &v30);
  }
  for (i = v31; v30 != v31; i = v31)
  {
    v13 = *(unsigned __int8 *)(i - 16);
    v11 = i - 16;
    v12 = v13;
    LOBYTE(v28) = v13;
    v14 = *(uint64_t **)(v11 + 8);
    v29 = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v11);
    *(_BYTE *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    v15 = v31;
    v16 = v31 - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v31 - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v15 - 8, *(unsigned __int8 *)(v15 - 16));
    v31 = v16;
    if (v13 == 1)
    {
      v22 = *v14;
      if ((uint64_t *)*v14 == v14 + 1)
      {
        v12 = 1;
      }
      else
      {
        do
        {
          if (v16 >= v32)
          {
            v16 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(&v30, v22 + 56);
          }
          else
          {
            *(_BYTE *)v16 = *(_BYTE *)(v22 + 56);
            *(_QWORD *)(v16 + 8) = *(_QWORD *)(v22 + 64);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v22 + 56);
            *(_BYTE *)(v22 + 56) = 0;
            *(_QWORD *)(v22 + 64) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v16);
            v16 += 16;
          }
          v31 = v16;
          v23 = *(uint64_t **)(v22 + 8);
          if (v23)
          {
            do
            {
              v24 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v24 = *(uint64_t **)(v22 + 16);
              v9 = *v24 == v22;
              v22 = (uint64_t)v24;
            }
            while (!v9);
          }
          v22 = (uint64_t)v24;
        }
        while (v24 != v14 + 1);
        v14 = v29;
        v12 = v28;
      }
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(v14[1]);
      *v14 = (uint64_t)(v14 + 1);
      v14[2] = 0;
      v14[1] = 0;
    }
    else if ((_DWORD)v12 == 2)
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(*v14, v14[1], &v30);
      v18 = *v14;
      v17 = v14[1];
      if (v17 != *v14)
      {
        v19 = v17 - 16;
        v20 = (unsigned __int8 *)(v17 - 16);
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v19);
          v21 = *v20;
          v20 -= 16;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v19 + 8, v21);
          v9 = v19 == v18;
          v19 = (uint64_t)v20;
        }
        while (!v9);
      }
      v14[1] = v18;
      v12 = 2;
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v12);
  }
  switch(v3)
  {
    case 0:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy((*a1)[1]);
      goto LABEL_45;
    case 1:
      v28 = (void **)*a1;
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
      goto LABEL_45;
    case 2:
      v25 = *a1;
      if ((*((char *)*a1 + 23) & 0x80000000) == 0)
        goto LABEL_46;
      v26 = (void *)*v25;
      break;
    case 7:
      v25 = *a1;
      v27 = (void *)**a1;
      if (!v27)
        goto LABEL_46;
      v25[1] = (uint64_t)v27;
      v26 = v27;
      break;
    default:
      goto LABEL_47;
  }
  operator delete(v26);
LABEL_45:
  v25 = *a1;
LABEL_46:
  operator delete(v25);
LABEL_47:
  v28 = (void **)&v30;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v28);
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (a2 > (result[2] - *result) >> 4)
  {
    if (a2 >> 60)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> *,std::back_insert_iterator<std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;

  if (result != a2)
  {
    v5 = result;
    v6 = a3[1];
    do
    {
      if (v6 >= a3[2])
      {
        result = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(a3, v5);
        v6 = result;
      }
      else
      {
        *(_BYTE *)v6 = *(_BYTE *)v5;
        *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v5);
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v6 += 16;
      }
      a3[1] = v6;
      v5 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v2 = (a1[1] - *a1) >> 4;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  v7 = a1[2] - *a1;
  if (v7 >> 3 > v3)
    v3 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v8 = 0xFFFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v14[4] = v6;
  v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v8);
  v10 = (uint64_t)&v9[16 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v14[3] = &v9[16 * v11];
  *(_BYTE *)v10 = *(_BYTE *)a2;
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v10);
  v14[2] = v10 + 16;
  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(unsigned __int8 *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::destroy(*((_QWORD *)a1 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(a1 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)a1 + 8, a1[56]);
    if ((char)a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)(v4 - 16);
      v7 = v4 - 16;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6);
        v8 = *v7;
        v7 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v6 + 8, v8);
        v9 = v6 == (_QWORD)v2;
        v6 = (uint64_t)v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

uint64_t *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      *(_BYTE *)(v6 + v7 - 16) = *(_BYTE *)(v4 + v7 - 16);
      *(_QWORD *)(v6 + v7 - 8) = *(_QWORD *)(v4 + v7 - 8);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4 + v7 - 16);
      *(_BYTE *)(v4 + v7 - 16) = 0;
      *(_QWORD *)(v4 + v7 - 8) = 0;
      result = (uint64_t *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v6 + v7 - 16);
      v7 -= 16;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(i - 16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(i - 8, *(unsigned __int8 *)(i - 16));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, char *__s, std::string *a3)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::insert(a3, 0, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void nlohmann::detail::type_error::create(uint64_t a1, int a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  void *__p;
  char v21;
  std::string v22;
  void *v23[2];
  int64_t v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;

  std::string::basic_string[abi:ne180100]<0>(&__p, "type_error");
  std::operator+<char>();
  v6 = std::string::append(&v26, ".", 1uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v25, a2);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v25;
  else
    v8 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    size = v25.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v27, (const std::string::value_type *)v8, size);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v28, "] ", 2uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v14 = *(char *)(a3 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)a3;
  else
    v15 = *(const std::string::value_type **)a3;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a3 + 23);
  else
    v16 = *(_QWORD *)(a3 + 8);
  v17 = std::string::append(&v22, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v24 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)v23 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(__p);
  if (v24 >= 0)
    v19 = v23;
  else
    v19 = (void **)v23[0];
  *(_QWORD *)a1 = &off_25083F3A0;
  *(_DWORD *)(a1 + 8) = a2;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const char *)v19);
  *(_QWORD *)a1 = &off_25083F378;
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
}

void sub_236C864BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::exception *v41;

  std::exception::~exception(v41);
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void nlohmann::detail::type_error::~type_error(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_25083F3A0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_25083F3A0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x23B801508);
}

void nlohmann::detail::exception::~exception(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&off_25083F3A0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&off_25083F3A0;
  std::runtime_error::~runtime_error(this + 1);
  std::exception::~exception(this);
  JUMPOUT(0x23B801508);
}

const char *nlohmann::detail::exception::what(const std::runtime_error *this)
{
  return std::runtime_error::what(this + 1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_25083BA50, MEMORY[0x24BEDAB00]);
}

void sub_236C86714(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t adm::graph::SemanticSetIterator::operator*(unint64_t a1)
{
  if (a1 >= 3)
    std::__throw_out_of_range[abi:ne180100]("array::at");
  return adm::graph::detail::gSemanticInfoTable[4 * a1];
}

uint64_t adm::graph::detail::getSemanticIndex(int a1)
{
  uint64_t v2;
  uint64_t result;
  NSObject *adm_log_object;
  _DWORD v5[2];
  uint64_t v6;

  v2 = 0;
  result = 0;
  v6 = *MEMORY[0x24BDAC8D0];
  while (adm::graph::detail::gSemanticInfoTable[v2] != a1)
  {
    ++result;
    v2 += 4;
    if (v2 == 12)
    {
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        v5[0] = 67109120;
        v5[1] = a1;
        _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "Failed to match semantic type %d to get index. Use index 0 instead", (uint8_t *)v5, 8u);
      }
      return 0;
    }
  }
  return result;
}

_QWORD *adm::graph::SemanticSet::SemanticSet(_QWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t SemanticIndex;

  *a1 = 0;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      SemanticIndex = adm::graph::detail::getSemanticIndex(*a2);
      if (SemanticIndex >= 0x20)
        std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
      *a1 |= 1 << SemanticIndex;
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

uint64_t adm::graph::SemanticSet::contains(_QWORD *a1, int a2)
{
  unint64_t SemanticIndex;

  SemanticIndex = adm::graph::detail::getSemanticIndex(a2);
  if (SemanticIndex >= 0x20)
    std::__throw_out_of_range[abi:ne180100]("bitset test argument out of range");
  return (*a1 >> SemanticIndex) & 1;
}

uint64_t **nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(uint64_t **a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a1 + 1, *(unsigned __int8 *)a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  char *v27;
  _QWORD *v29;
  char v30;
  uint64_t *v31[3];
  char v32;
  uint64_t v33;
  uint64_t v34;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  switch(*(_BYTE *)a1)
  {
    case 1:
      v5 = *(_QWORD **)(a2 + 8);
      v4 = (uint64_t)operator new(0x18uLL);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = v4 + 8;
      v8 = (_QWORD *)*v5;
      v6 = v5 + 1;
      v7 = v8;
      if (v8 == v6)
        goto LABEL_33;
      break;
    case 2:
      v17 = *(uint64_t **)(a2 + 8);
      v18 = operator new(0x18uLL);
      v4 = (uint64_t)v18;
      v18[1] = 0;
      v18[2] = 0;
      *v18 = 0;
      v19 = *v17;
      v20 = v17[1];
      v29 = v18;
      v30 = 0;
      if (v20 != v19)
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v18, (v20 - v19) >> 4);
        v33 = *(_QWORD *)(v4 + 8);
        v34 = v33;
        v31[0] = (uint64_t *)(v4 + 16);
        v31[1] = &v33;
        v31[2] = &v34;
        v32 = 0;
        v21 = v33;
        do
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v21, v19);
          v19 += 16;
          v21 = v34 + 16;
          v34 += 16;
        }
        while (v19 != v20);
        v32 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v31);
        *(_QWORD *)(v4 + 8) = v21;
      }
      goto LABEL_33;
    case 3:
      v4 = (uint64_t)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(*(_QWORD *)(a2 + 8));
      goto LABEL_33;
    case 4:
      v4 = *(unsigned __int8 *)(a2 + 8);
      goto LABEL_33;
    case 5:
    case 6:
    case 7:
      v4 = *(_QWORD *)(a2 + 8);
      goto LABEL_33;
    case 8:
      v22 = *(_QWORD *)(a2 + 8);
      v23 = operator new(0x20uLL);
      v4 = (uint64_t)v23;
      v23[1] = 0;
      v23[2] = 0;
      *v23 = 0;
      v25 = *(const void **)v22;
      v24 = *(_QWORD *)(v22 + 8);
      v26 = v24 - *(_QWORD *)v22;
      if (v24 != *(_QWORD *)v22)
      {
        std::vector<unsigned char>::__vallocate[abi:ne180100](v23, v24 - *(_QWORD *)v22);
        v27 = *(char **)(v4 + 8);
        memmove(v27, v25, v26);
        *(_QWORD *)(v4 + 8) = &v27[v26];
      }
      *(_WORD *)(v4 + 24) = *(_WORD *)(v22 + 24);
LABEL_33:
      *(_QWORD *)(a1 + 8) = v4;
      goto LABEL_34;
    default:
LABEL_34:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
      return a1;
  }
  while (1)
  {
    v9 = *(_QWORD *)(v4 + 8);
    v10 = (_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 == v4 + 8)
      goto LABEL_11;
    v11 = *(_QWORD **)(v4 + 8);
    v12 = (_QWORD *)(v4 + 8);
    if (v9)
    {
      do
      {
        v10 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v12[2];
        v13 = *v10 == (_QWORD)v12;
        v12 = v10;
      }
      while (v13);
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 4, v7 + 4) & 0x80) != 0)
    {
LABEL_11:
      if (!v9)
      {
        v29 = (_QWORD *)(v4 + 8);
        v14 = (uint64_t **)(v4 + 8);
LABEL_16:
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)v31, v4, (uint64_t)(v7 + 4));
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at((uint64_t **)v4, (uint64_t)v29, v14, v31[0]);
        v31[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)v31);
        goto LABEL_17;
      }
      v29 = v10;
      v14 = (uint64_t **)(v10 + 1);
    }
    else
    {
      v14 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(v4, &v29, v7 + 4);
    }
    if (!*v14)
      goto LABEL_16;
LABEL_17:
    v15 = (_QWORD *)v7[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = (_QWORD *)v7[2];
        v13 = *v16 == (_QWORD)v7;
        v7 = v16;
      }
      while (!v13);
    }
    v7 = v16;
    if (v16 == v6)
      goto LABEL_33;
  }
}

void sub_236C86C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;

  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

std::string *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(uint64_t a1)
{
  std::string *v2;
  std::string *v3;

  v2 = (std::string *)operator new(0x18uLL);
  v3 = v2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  return v3;
}

void sub_236C86CB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

char *std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 16;
      v5 = (unsigned __int8 *)(v2 - 16);
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v4);
        v6 = *v5;
        v5 -= 16;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v4 + 8), v6);
        v7 = v4 == v3;
        v4 = (uint64_t)v5;
      }
      while (!v7);
    }
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x48uLL);
  v7 = v6;
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v6 + 32), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  result = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(v7 + 56, a3 + 24);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_236C86E2C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v1 + 56);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v1 + 64), *(unsigned __int8 *)(v1 + 56));
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    operator delete((void *)v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (_QWORD *)*a1;
    v3 = v2;
  }
  v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v5 = v4;
  }
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (v3 == v5)
      return 0;
    if (v3 >= v5)
      return 1;
  }
  return 255;
}

_QWORD *std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236C87210(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t **v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t **v16;
  uint64_t **v17;
  _QWORD *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  uint64_t *v27[2];
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    v5 = a2 + 32 * a3;
    v6 = a2 + 16;
    v7 = 32 * a3;
    v8 = 32 * a3;
    while (**(_BYTE **)v6 == 2)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v6 + 8);
      v9 = *(_BYTE **)v10;
      if (*(_QWORD *)(v10 + 8) - *(_QWORD *)v10 != 32 || *v9 != 3)
        break;
      v6 += 32;
      v8 -= 32;
      if (!v8)
      {
        *(_BYTE *)a1 = 1;
        v11 = operator new(0x18uLL);
        v11[2] = 0;
        v11[1] = 0;
        *v11 = v11 + 1;
        *(_QWORD *)(a1 + 8) = v11;
        v12 = (char *)(a2 + 24);
        do
        {
          nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v26, *((_QWORD *)v12 - 1), *v12);
          v13 = *(uint64_t ***)(a1 + 8);
          v14 = *v27[0];
          v15 = *(_QWORD **)(*v27[0] + 8);
          v16 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v13, &v31, v15);
          if (!*v16)
          {
            v17 = v16;
            v18 = operator new(0x48uLL);
            v19 = *(_OWORD *)v15;
            v18[6] = v15[2];
            *((_OWORD *)v18 + 2) = v19;
            v15[1] = 0;
            v15[2] = 0;
            *v15 = 0;
            *((_BYTE *)v18 + 56) = *(_BYTE *)(v14 + 16);
            v18[8] = *(_QWORD *)(v14 + 24);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v14 + 16);
            *(_BYTE *)(v14 + 16) = 0;
            *(_QWORD *)(v14 + 24) = 0;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v18 + 7));
            std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v13, v31, v17, v18);
          }
          v12 += 32;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v26);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v27, v26);
          v7 -= 32;
        }
        while (v7);
        goto LABEL_18;
      }
    }
    *(_BYTE *)a1 = 2;
    v20 = operator new(0x18uLL);
    v21 = v20;
    v20[1] = 0;
    v20[2] = 0;
    *v20 = 0;
    if (a2 != v5)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v20, (v5 - a2) >> 5);
      v29 = v21[1];
      v30 = v29;
      v26 = v21 + 2;
      v27[0] = &v29;
      v27[1] = &v30;
      v28 = 0;
      v22 = (char *)(a2 + 24);
      v23 = v29;
      do
      {
        nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)&v31, *((_QWORD *)v22 - 1), *v22);
        v22 += 32;
        *(_BYTE *)v23 = v31;
        *(_QWORD *)(v23 + 8) = v32;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v31);
        LOBYTE(v31) = 0;
        v32 = 0;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v23);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v31);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v31);
        v23 = v30 + 16;
        v30 += 16;
        v7 -= 32;
      }
      while (v7);
      v28 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v26);
      v21[1] = v23;
    }
    *(_QWORD *)(a1 + 8) = v21;
  }
  else
  {
    *(_BYTE *)a1 = 1;
    v24 = operator new(0x18uLL);
    v24[2] = 0;
    v24[1] = 0;
    *v24 = v24 + 1;
    *(_QWORD *)(a1 + 8) = v24;
  }
LABEL_18:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236C874DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;

  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  lconv *v9;
  char *thousands_sep;
  char *decimal_point;
  _OWORD *v12;
  __int128 v13;
  unint64_t v14;
  __int128 v16;
  _OWORD v17[5];
  lconv *v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  _OWORD *v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = (std::__shared_weak_count *)operator new(0x28uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_25083F3C8;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)off_25083F418;
  v6[1].__shared_owners_ = (uint64_t)a1;
  *(_QWORD *)&v16 = v6 + 1;
  *((_QWORD *)&v16 + 1) = v6;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  v17[0] = v16;
  memset(&v17[1], 0, 64);
  v9 = localeconv();
  v18 = v9;
  thousands_sep = v9->thousands_sep;
  if (thousands_sep)
    LOBYTE(thousands_sep) = *thousands_sep;
  v19 = (char)thousands_sep;
  decimal_point = v9->decimal_point;
  if (v9->decimal_point)
    LOBYTE(decimal_point) = *decimal_point;
  v20 = (char)decimal_point;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v53 = 32;
  v12 = operator new(0x208uLL);
  v54 = v12;
  v56 = 0x8000000000000208;
  v55 = 512;
  *(_QWORD *)&v13 = 0x2020202020202020;
  *((_QWORD *)&v13 + 1) = 0x2020202020202020;
  *v12 = v13;
  v12[1] = v13;
  v12[2] = v13;
  v12[3] = v13;
  v12[4] = v13;
  v12[5] = v13;
  v12[6] = v13;
  v12[7] = v13;
  v12[8] = v13;
  v12[9] = v13;
  v12[10] = v13;
  v12[11] = v13;
  v12[12] = v13;
  v12[13] = v13;
  v12[14] = v13;
  v12[15] = v13;
  v12[16] = v13;
  v12[17] = v13;
  v12[18] = v13;
  v12[19] = v13;
  v12[20] = v13;
  v12[21] = v13;
  v12[22] = v13;
  v12[23] = v13;
  v12[24] = v13;
  v12[25] = v13;
  v12[26] = v13;
  v12[27] = v13;
  v12[28] = v13;
  v12[29] = v13;
  v12[30] = v13;
  v12[31] = v13;
  *((_BYTE *)v12 + 512) = 0;
  v57 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump((char *)v17, a2, a3 >= 0, a3 & ~(a3 >> 31), 0);
  return nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)v17);
}

void sub_236C8775C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer((uint64_t)va);
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v10;
  char **v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t (*v16)(void);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  char *v29;
  uint64_t (*v30)(void);
  double v31;
  _BYTE *v32;
  unint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  void (*v39)(void);
  uint64_t v40;
  char **v41;
  unint64_t v42;
  uint64_t (***v43)(void);
  char *v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned __int8 **v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned int v76;
  char *v77;
  uint64_t v78;
  void (*v79)(void);
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  unsigned int v103;
  uint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t (***v131)(void);
  unsigned int v132;
  unsigned int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  char *v144;
  unsigned int v145;
  char *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  _BYTE *v154;
  int v155;
  char v156;
  char v157;
  unsigned __int8 v158;
  const char *v159;
  int v160;
  unint64_t v161;

  switch(*(_BYTE *)a2)
  {
    case 0:
      goto LABEL_29;
    case 1:
      v9 = **(_QWORD **)a1;
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 8) + 16))
      {
        v16 = *(uint64_t (**)(void))(v9 + 8);
        return v16();
      }
      if (a3)
      {
        (*(void (**)(void))(v9 + 8))();
        v10 = a5 + a4;
        v11 = (char **)(a1 + 608);
        if (a1[631] < 0)
        {
          v12 = *((_QWORD *)a1 + 77);
          if (v12 >= v10)
            goto LABEL_6;
        }
        else
        {
          v12 = a1[631];
          if (v10 <= v12)
          {
LABEL_6:
            v13 = *(_QWORD **)(a2 + 8);
            v14 = (_QWORD *)*v13;
            if (v13[2] == 1)
            {
              v15 = (_QWORD *)*v13;
            }
            else
            {
              v80 = 0;
              do
              {
                v81 = a1 + 608;
                if (a1[631] < 0)
                  v81 = *v11;
                (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v81, (a5 + a4));
                (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v14 + 4);
                (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\": ", 3);
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v14 + 7, 1, a4, (a5 + a4));
                (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, ",\n", 2);
                v82 = (_QWORD *)v14[1];
                if (v82)
                {
                  do
                  {
                    v15 = v82;
                    v82 = (_QWORD *)*v82;
                  }
                  while (v82);
                }
                else
                {
                  do
                  {
                    v15 = (_QWORD *)v14[2];
                    v59 = *v15 == (_QWORD)v14;
                    v14 = v15;
                  }
                  while (!v59);
                }
                ++v80;
                v13 = *(_QWORD **)(a2 + 8);
                v14 = v15;
              }
              while (v80 < v13[2] - 1);
            }
            v83 = v13 + 1;
            if (v15 == v83)
              __assert_rtn("dump", "serializer.hpp", 138, "i != val.m_value.object->cend()");
            v84 = (_QWORD *)v15[1];
            if (v84)
            {
              do
              {
                v85 = v84;
                v84 = (_QWORD *)*v84;
              }
              while (v84);
            }
            else
            {
              v87 = v15;
              do
              {
                v85 = (_QWORD *)v87[2];
                v59 = *v85 == (_QWORD)v87;
                v87 = v85;
              }
              while (!v59);
            }
            if (v85 != v83)
              __assert_rtn("dump", "serializer.hpp", 139, "std::next(i) == val.m_value.object->cend()");
            v88 = a1 + 608;
            if (a1[631] < 0)
              v88 = *v11;
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v88, (a5 + a4));
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v15 + 4);
            (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\": ", 3);
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v15 + 7, 1, a4, (a5 + a4));
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 10);
            v79 = *(void (**)(void))(**(_QWORD **)a1 + 8);
            goto LABEL_139;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v12, 32);
        goto LABEL_6;
      }
      (*(void (**)(void))v9)();
      v54 = *(_QWORD *)(a2 + 8);
      v55 = *(_QWORD **)v54;
      if (*(_QWORD *)(v54 + 16) != 1)
      {
        v56 = 0;
        do
        {
          (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v55 + 4);
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\":", 2);
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v55 + 7, 0, a4, a5);
          (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 44);
          v57 = (_QWORD *)v55[1];
          v58 = v55;
          if (v57)
          {
            do
            {
              v55 = v57;
              v57 = (_QWORD *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              v55 = (_QWORD *)v58[2];
              v59 = *v55 == (_QWORD)v58;
              v58 = v55;
            }
            while (!v59);
          }
          ++v56;
          v54 = *(_QWORD *)(a2 + 8);
        }
        while (v56 < *(_QWORD *)(v54 + 16) - 1);
      }
      v60 = (_QWORD *)(v54 + 8);
      if (v55 == v60)
        __assert_rtn("dump", "serializer.hpp", 166, "i != val.m_value.object->cend()");
      v61 = (_QWORD *)v55[1];
      if (v61)
      {
        do
        {
          v62 = v61;
          v61 = (_QWORD *)*v61;
        }
        while (v61);
      }
      else
      {
        v86 = v55;
        do
        {
          v62 = (_QWORD *)v86[2];
          v59 = *v62 == (_QWORD)v86;
          v86 = v62;
        }
        while (!v59);
      }
      if (v62 != v60)
        __assert_rtn("dump", "serializer.hpp", 167, "std::next(i) == val.m_value.object->cend()");
      (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 34);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, v55 + 4);
      (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\":", 2);
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v55 + 7, 0, a4, a5);
LABEL_140:
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 2:
      v17 = *(uint64_t **)(a2 + 8);
      v18 = *v17;
      v19 = v17[1];
      v20 = **(_QWORD **)a1;
      if (v18 == v19)
      {
        v16 = *(uint64_t (**)(void))(v20 + 8);
        return v16();
      }
      if (a3)
      {
        (*(void (**)(void))(v20 + 8))();
        v21 = a5 + a4;
        v22 = a1 + 608;
        if (a1[631] < 0)
        {
          v23 = *((_QWORD *)a1 + 77);
          if (v23 >= v21)
            goto LABEL_14;
        }
        else
        {
          v23 = a1[631];
          if (v21 <= v23)
          {
LABEL_14:
            v24 = *(uint64_t **)(a2 + 8);
            v26 = *v24;
            v25 = v24[1];
            if (v26 != v25 - 16)
            {
              do
              {
                v27 = a1 + 608;
                if (a1[631] < 0)
                  v27 = *(char **)v22;
                (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v27, (a5 + a4));
                nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v26, 1, a4, (a5 + a4));
                (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, ",\n", 2);
                v26 += 16;
                v28 = *(uint64_t **)(a2 + 8);
                v25 = v28[1];
              }
              while (v26 != v25 - 16);
              v26 = *v28;
            }
            if (v26 == v25)
              __assert_rtn("dump", "serializer.hpp", 208, "not val.m_value.array->empty()");
            v29 = a1 + 608;
            if (a1[631] < 0)
              v29 = *(char **)v22;
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v29, (a5 + a4));
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 16, 1, a4, (a5 + a4));
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 10);
            if (a1[631] < 0)
              v22 = *(char **)v22;
            (*(void (**)(_QWORD, char *, _QWORD))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v22, a5);
            goto LABEL_124;
          }
        }
        std::string::resize((std::string *)(a1 + 608), 2 * v23, 32);
        goto LABEL_14;
      }
      (*(void (**)(void))v20)();
      v49 = *(uint64_t **)(a2 + 8);
      v51 = *v49;
      v50 = v49[1];
      if (v51 == v50 - 16)
      {
        v52 = v51;
      }
      else
      {
        v52 = v51;
        do
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v52, 0, a4, a5);
          (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 44);
          v52 += 16;
          v53 = *(uint64_t **)(a2 + 8);
          v50 = v53[1];
        }
        while (v52 != v50 - 16);
        v51 = *v53;
      }
      if (v51 == v50)
        __assert_rtn("dump", "serializer.hpp", 229, "not val.m_value.array->empty()");
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump(a1, v52, 0, a4, a5);
LABEL_124:
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 3:
      (***(void (****)(void))a1)();
      nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped((uint64_t)a1, *(uint64_t **)(a2 + 8));
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 4:
      v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
      return v16();
    case 5:
      v33 = *(_QWORD *)(a2 + 8);
      if (!v33)
        goto LABEL_46;
      v34 = a1 + 16;
      if ((v33 & 0x8000000000000000) != 0)
      {
        *v34 = 45;
        v33 = -(uint64_t)v33;
        v35 = 1;
        if (v33 >= 0xA)
        {
          v66 = v33;
          while (1)
          {
            if (v66 <= 0x63)
            {
              ++v35;
              goto LABEL_185;
            }
            if (v66 <= 0x3E7)
            {
              v35 += 2;
              goto LABEL_185;
            }
            if (v66 >> 4 <= 0x270)
              break;
            v35 += 4;
            v37 = v66 >= 0x186A0;
            v66 /= 0x2710uLL;
            if (!v37)
              goto LABEL_185;
          }
          v35 += 3;
        }
LABEL_185:
        ++v35;
LABEL_186:
        if (v35 < 0x3F)
        {
          v38 = (uint64_t)&v34[v35];
          if (v33 >= 0x64)
          {
            do
            {
              v128 = v33 / 0x64;
              *(_WORD *)(v38 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v33 % 0x64)];
              v38 -= 2;
              v130 = v33 >> 4;
              v33 /= 0x64uLL;
            }
            while (v130 > 0x270);
            goto LABEL_191;
          }
LABEL_190:
          v128 = v33;
LABEL_191:
          if (v128 >= 0xA)
          {
            *(_WORD *)(v38 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * v128];
LABEL_195:
            v131 = *(uint64_t (****)(void))a1;
LABEL_267:
            v16 = (*v131)[1];
            return v16();
          }
          LOBYTE(v33) = v128;
LABEL_194:
          *(_BYTE *)(v38 - 1) = v33 + 48;
          goto LABEL_195;
        }
        goto LABEL_272;
      }
      if (v33 >= 0xA)
      {
        v35 = 1;
        v36 = *(_QWORD *)(a2 + 8);
        while (v36 > 0x63)
        {
          if (v36 <= 0x3E7)
          {
            v35 += 2;
            goto LABEL_186;
          }
          if (v36 >> 4 <= 0x270)
          {
            v35 += 3;
            goto LABEL_186;
          }
          v35 += 4;
          v37 = v36 >= 0x186A0;
          v36 /= 0x2710uLL;
          if (!v37)
            goto LABEL_186;
        }
        goto LABEL_185;
      }
      goto LABEL_41;
    case 6:
      v33 = *(_QWORD *)(a2 + 8);
      if (v33)
      {
        if (v33 >= 0xA)
        {
          v63 = 1;
          v64 = *(_QWORD *)(a2 + 8);
          while (1)
          {
            if (v64 <= 0x63)
            {
              ++v63;
              goto LABEL_174;
            }
            if (v64 <= 0x3E7)
            {
              v63 += 2;
              goto LABEL_174;
            }
            if (v64 >> 4 <= 0x270)
              break;
            v63 += 4;
            v37 = v64 >= 0x186A0;
            v64 /= 0x2710uLL;
            if (!v37)
              goto LABEL_174;
          }
          v63 += 3;
LABEL_174:
          if (v63 < 0x3F)
          {
            v38 = (uint64_t)&a1[v63 + 16];
            if (v33 >= 0x64)
            {
              do
              {
                v128 = v33 / 0x64;
                *(_WORD *)(v38 - 2) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (v33 % 0x64)];
                v38 -= 2;
                v129 = v33 >> 4;
                v33 /= 0x64uLL;
              }
              while (v129 > 0x270);
              goto LABEL_191;
            }
            goto LABEL_190;
          }
LABEL_272:
          __assert_rtn("dump_integer", "serializer.hpp", 726, "n_chars < number_buffer.size() - 1");
        }
LABEL_41:
        v38 = (uint64_t)(a1 + 17);
        goto LABEL_194;
      }
LABEL_46:
      v30 = ***(uint64_t (****)(void))a1;
      return v30();
    case 7:
      v31 = *(double *)(a2 + 8);
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_29:
        v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
        return v16();
      }
      if ((*(_QWORD *)&v31 & 0x8000000000000000) != 0)
      {
        v31 = -v31;
        v32 = a1 + 17;
        a1[16] = 45;
      }
      else
      {
        v32 = a1 + 16;
      }
      if (v31 == 0.0)
      {
        *(_WORD *)v32 = 11824;
        v32[2] = 48;
        goto LABEL_266;
      }
      if (a1 + 80 - v32 <= 16)
        __assert_rtn("to_chars", "to_chars.hpp", 1082, "last - first >= std::numeric_limits<FloatType>::max_digits10");
      if ((*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        __assert_rtn("grisu2", "to_chars.hpp", 889, "std::isfinite(value)");
      if (v31 <= 0.0)
        __assert_rtn("grisu2", "to_chars.hpp", 890, "value > 0");
      v67 = *(_QWORD *)&v31 & 0xFFFFFFFFFFFFFLL;
      v161 = a1 + 80 - v32;
      if (*(_QWORD *)&v31 >> 52)
      {
        v70 = (*(_QWORD *)&v31 >> 52) - 1075;
        v72 = 2 * (v67 | 0x10000000000000);
        v71 = (*(_QWORD *)&v31 >> 52) - 1076;
        v90 = *(_QWORD *)&v31 >> 53;
        v91 = 4 * (v67 | 0x10000000000000);
        v92 = (*(_QWORD *)&v31 >> 52) - 1077;
        v93 = 0x10000000000000;
        if (v67)
        {
          v91 = 2 * (v67 | 0x10000000000000);
          v92 = (*(_QWORD *)&v31 >> 52) - 1076;
          v93 = v67 | 0x10000000000000;
        }
        if (v90)
          v68 = v91;
        else
          v68 = 2 * (v67 | 0x10000000000000);
        if (v90)
          v69 = v92;
        else
          v69 = (*(_QWORD *)&v31 >> 52) - 1076;
        if (v90)
          v67 = v93;
        else
          v67 |= 0x10000000000000uLL;
      }
      else
      {
        v68 = 2 * v67;
        v69 = -1075;
        v70 = 4294966222;
        v71 = -1075;
        v72 = 2 * v67;
      }
      v94 = nlohmann::detail::dtoa_impl::diyfp::normalize(v72 | 1, v71);
      v96 = v95;
      v97 = v69 - v95;
      if (v69 - (int)v95 < 0)
      {
        v159 = "delta >= 0";
        v160 = 162;
      }
      else
      {
        v98 = (v68 - 1) << v97;
        if (v98 >> v97 == v68 - 1)
        {
          v99 = v94;
          v100 = nlohmann::detail::dtoa_impl::diyfp::normalize(v67, v70);
          if ((_DWORD)v96 != v101)
            __assert_rtn("grisu2", "to_chars.hpp", 828, "m_plus.e == v.e");
          if ((int)v96 <= -1501)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 466, "e >= -1500");
          if ((int)v96 >= 1501)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 467, "e <= 1500");
          v102 = 78913 * (-61 - (int)v96) / 0x40000;
          if ((int)v96 < -61)
            ++v102;
          if (v102 <= -315)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 472, "index >= 0");
          v103 = (int)((v102 + 307 + (((__int16)(v102 + 307) >> 28) & 7)) << 16) >> 19;
          if (v103 >= 0x4F)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 473, "static_cast<std::size_t>(index) < kCachedPowers.size()");
          v104 = (uint64_t *)((char *)&nlohmann::detail::dtoa_impl::get_cached_power_for_binary_exponent(int)::kCachedPowers
                           + 16 * (unsigned __int16)v103);
          v105 = v104[1];
          if ((int)v105 + (int)v96 <= -125)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 476, "kAlpha <= cached.e + e + 64");
          if ((int)v105 + (int)v96 >= -95)
            __assert_rtn("get_cached_power_for_binary_exponent", "to_chars.hpp", 477, "kGamma >= cached.e + e + 64");
          v106 = *v104;
          v107 = nlohmann::detail::dtoa_impl::diyfp::mul(v100, v96, *v104);
          v109 = v108;
          v110 = nlohmann::detail::dtoa_impl::diyfp::mul(v98, v96, v106);
          v112 = v111;
          v113 = nlohmann::detail::dtoa_impl::diyfp::mul(v99, v96, v106);
          v115 = v114;
          if (v114 <= -61)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 601, "M_plus.e >= kAlpha");
          if (v114 >= -31)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 602, "M_plus.e <= kGamma");
          v116 = v110 + 1;
          v117 = v113 - 1;
          v118 = nlohmann::detail::dtoa_impl::diyfp::sub(v113 - 1, v114, v116, v112);
          v119 = nlohmann::detail::dtoa_impl::diyfp::sub(v117, v115, v107, v109);
          v120 = -v115;
          v121 = v117 >> -(char)v115;
          if (!(_DWORD)v121)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 623, "p1 > 0");
          v122 = v119;
          v123 = HIDWORD(v105);
          v124 = (1 << v120) - 1;
          v125 = v124 & v117;
          if (v121 <= 0x3B9AC9FF)
          {
            if (v121 <= 0x5F5E0FF)
            {
              if (v121 <= 0x98967F)
              {
                if (v121 <= 0xF423F)
                {
                  v132 = v121 >> 5;
                  v133 = v121 >> 4;
                  if (v121 <= 9)
                    v134 = 1;
                  else
                    v134 = 10;
                  if (v121 <= 9)
                    v135 = 1;
                  else
                    v135 = 2;
                  if (v121 <= 0x63)
                    v136 = v135;
                  else
                    v136 = 3;
                  if (v121 <= 0x63)
                    v137 = v134;
                  else
                    v137 = 100;
                  if (v121 <= 0x3E7)
                    v138 = v136;
                  else
                    v138 = 4;
                  if (v121 <= 0x3E7)
                    v139 = v137;
                  else
                    v139 = 1000;
                  if (v133 <= 0x270)
                    v140 = v138;
                  else
                    v140 = 5;
                  if (v133 <= 0x270)
                    v141 = v139;
                  else
                    v141 = 10000;
                  if (v132 <= 0xC34)
                    v127 = v140;
                  else
                    v127 = 6;
                  if (v132 > 0xC34)
                    v126 = 100000;
                  else
                    v126 = v141;
                }
                else
                {
                  v126 = 1000000;
                  v127 = 7;
                }
              }
              else
              {
                v126 = 10000000;
                v127 = 8;
              }
            }
            else
            {
              v126 = 100000000;
              v127 = 9;
            }
          }
          else
          {
            v126 = 1000000000;
            v127 = 10;
          }
          v142 = 0;
          v143 = -1;
          v144 = (char *)v127;
          do
          {
            v145 = v121 / v126;
            if (v121 / v126 >= 0xA)
              __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 659, "d <= 9");
            v121 = v121 % v126;
            v146 = (char *)(v142 + 1);
            v32[v142] = v145 + 48;
            if ((v121 << v120) + v125 <= v118)
            {
              v150 = (_DWORD)v144 + v143;
              nlohmann::detail::dtoa_impl::grisu2_round((uint64_t)v32, (char *)(v142 + 1), v122, v118, (v121 << v120) + v125, (unint64_t)v126 << v120);
              goto LABEL_239;
            }
            v126 /= 0xAu;
            --v143;
            ++v142;
          }
          while (v144 != v146);
          if (v125 <= v118)
            __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 746, "p2 > delta");
          v147 = 0;
          do
          {
            if (v125 >= 0x199999999999999ALL)
              __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 757, "p2 <= (std::numeric_limits<std::uint64_t>::max)() / 10");
            v148 = (10 * v125) >> v120;
            if (v148 >= 0xA)
              __assert_rtn("grisu2_digit_gen", "to_chars.hpp", 766, "d <= 9");
            v32[v147 + (_QWORD)v146] = v148 + 48;
            v149 = 5 * v118;
            v125 = (10 * v125) & v124;
            v118 *= 10;
            v122 *= 10;
            ++v147;
          }
          while (v125 > 2 * v149);
          v146 += v147;
          v150 = ~(v147 - 1);
          nlohmann::detail::dtoa_impl::grisu2_round((uint64_t)v32, v146, v122, v118, v125, 1 << v120);
LABEL_239:
          if ((int)v146 >= 18)
            __assert_rtn("to_chars", "to_chars.hpp", 1092, "len <= std::numeric_limits<FloatType>::max_digits10");
          if (v161 <= 0x15)
            __assert_rtn("to_chars", "to_chars.hpp", 1100, "last - first >= 2 + (-kMinExp - 1) + std::numeric_limits<FloatType>::max_digits10");
          if (v161 == 22)
            __assert_rtn("to_chars", "to_chars.hpp", 1101, "last - first >= std::numeric_limits<FloatType>::max_digits10 + 6");
          v151 = v150 - (int)v123 + (uint64_t)(int)v146;
          if (v150 - (_DWORD)v123 < 0 || (int)v151 > 15)
          {
            if ((v151 - 16) >= 0xFFFFFFF1)
            {
              if (((v150 - (_DWORD)v123) & 0x80000000) == 0)
                __assert_rtn("format_buffer", "to_chars.hpp", 1006, "k > n");
              v152 = &v32[v151];
              memmove(v152 + 1, v152, (int)v146 - (unint64_t)v151);
              *v152 = 46;
              goto LABEL_266;
            }
            if ((_DWORD)v151 != 0 && v151 < 0xFFFFFFFD)
            {
              if ((_DWORD)v146 == 1)
              {
                v153 = 1;
              }
              else
              {
                memmove(v32 + 2, v32 + 1, (int)v146 - 1);
                v32[1] = 46;
                v153 = (int)v146 + 1;
              }
              v154 = &v32[v153];
              *v154 = 101;
              if ((int)v151 <= -999)
                __assert_rtn("append_exponent", "to_chars.hpp", 926, "e > -1000");
              if ((int)v151 >= 1001)
                __assert_rtn("append_exponent", "to_chars.hpp", 927, "e < 1000");
              v155 = v151 - 1;
              if ((int)v151 >= 1)
                v156 = 43;
              else
                v156 = 45;
              if (v155 < 0)
                v155 = 1 - v151;
              v154[1] = v156;
              if (v155 > 9)
              {
                if (v155 > 0x63)
                {
                  v154[2] = (unsigned __int16)v155 / 0x64u + 48;
                  v158 = (unsigned __int16)v155 % 0x64u;
                  v154[3] = (v158 / 0xAu) | 0x30;
                  v154[4] = (v158 % 0xAu) | 0x30;
                  goto LABEL_266;
                }
                v154[2] = v155 / 0xAu + 48;
                v157 = (v155 % 0xAu) | 0x30;
              }
              else
              {
                v154[2] = 48;
                v157 = v155 + 48;
              }
              v154[3] = v157;
            }
            else
            {
              memmove(&v32[-(int)v151 + 2], v32, (int)v146);
              *(_WORD *)v32 = 11824;
              memset(v32 + 2, 48, -(int)v151);
            }
          }
          else
          {
            memset(&v32[(int)v146], 48, v150 - (int)v123);
            v32[v151] = 46;
            v32[(int)v151 + 1] = 48;
          }
LABEL_266:
          v131 = *(uint64_t (****)(void))a1;
          goto LABEL_267;
        }
        v159 = "((x.f << delta) >> delta) == x.f";
        v160 = 163;
      }
      __assert_rtn("normalize_to", "to_chars.hpp", v160, v159);
    case 8:
      v39 = *(void (**)(void))(**(_QWORD **)a1 + 8);
      if (!a3)
      {
        v39();
        v45 = *(unsigned __int8 ***)(a2 + 8);
        v47 = *v45;
        v46 = v45[1];
        if (v47 != v46)
        {
          while (v47 != v46 - 1)
          {
            v48 = *v47++;
            nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v48);
            (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 44);
            v46 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 8) + 8);
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v47);
        }
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "],\"subtype\":", 12);
        v65 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(v65 + 25))
        {
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v65 + 24));
          goto LABEL_140;
        }
        v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
        return v16();
      }
      v39();
      v40 = (a5 + a4);
      v41 = (char **)(a1 + 608);
      if (a1[631] < 0)
      {
        v42 = *((_QWORD *)a1 + 77);
        if (v42 >= v40)
        {
          v43 = *(uint64_t (****)(void))a1;
          goto LABEL_94;
        }
      }
      else
      {
        v42 = a1[631];
        if (v40 <= v42)
        {
          v43 = *(uint64_t (****)(void))a1;
          v44 = a1 + 608;
          goto LABEL_95;
        }
      }
      std::string::resize((std::string *)(a1 + 608), 2 * v42, 32);
      v43 = *(uint64_t (****)(void))a1;
      v44 = a1 + 608;
      if ((a1[631] & 0x80000000) == 0)
      {
LABEL_95:
        ((void (*)(uint64_t (***)(void), char *, uint64_t))(*v43)[1])(v43, v44, v40);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\"bytes\": [", 10);
        v73 = *(unsigned __int8 ***)(a2 + 8);
        v75 = *v73;
        v74 = v73[1];
        if (v75 != v74)
        {
          if (v75 != v74 - 1)
          {
            do
            {
              v76 = *v75++;
              nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, v76);
              (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, ", ", 2);
            }
            while (v75 != (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 8) - 1));
          }
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *v75);
        }
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "],\n", 3);
        v77 = a1 + 608;
        if (a1[631] < 0)
          v77 = *v41;
        (*(void (**)(_QWORD, char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, v77, v40);
        (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "\"subtype\": ", 11);
        v78 = *(_QWORD *)(a2 + 8);
        if (*(_BYTE *)(v78 + 25))
          nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(a1, *(unsigned __int8 *)(v78 + 24));
        else
          (*(void (**)(_QWORD, const char *, uint64_t))(**(_QWORD **)a1 + 8))(*(_QWORD *)a1, "null", 4);
        (***(void (****)(_QWORD, uint64_t))a1)(*(_QWORD *)a1, 10);
        v79 = *(void (**)(void))(**(_QWORD **)a1 + 8);
LABEL_139:
        v79();
        goto LABEL_140;
      }
LABEL_94:
      v44 = *v41;
      goto LABEL_95;
    case 9:
      v16 = *(uint64_t (**)(void))(**(_QWORD **)a1 + 8);
      return v16();
    default:
      __assert_rtn("dump", "serializer.hpp", 363, "false");
  }
}

uint64_t std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~serializer(uint64_t a1)
{
  if (*(char *)(a1 + 631) < 0)
    operator delete(*(void **)(a1 + 608));
  return std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1);
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_escaped(uint64_t result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t (*v24)(void);
  int v25;
  void *exception;
  char *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t *v31;
  void *v32;
  std::string v33;
  std::string v34;
  std::string v35;
  __int128 v36;
  std::string::size_type v37;
  char __str[8];
  std::string::size_type v39;
  char v40;

  v2 = *((char *)a2 + 23);
  v3 = a2[1];
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  if (!v3)
    return result;
  v5 = (_QWORD *)result;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = v2 >> 31;
  v13 = result + 90;
  do
  {
    if ((v12 & 1) != 0)
      v14 = (uint64_t *)*a2;
    else
      v14 = a2;
    v15 = *((unsigned __int8 *)v14 + v8);
    if (v7)
      v6 = v15 & 0x3F | (v6 << 6);
    else
      v6 = (0xFFu >> nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]) & v15;
    v16 = 16 * v7
        + nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v15]
        + 256;
    if (v16 >= 0x190)
      __assert_rtn("decode", "serializer.hpp", 892, "index < 400");
    v7 = nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::decode(unsigned char &,unsigned int &,unsigned char)::utf8d[v16];
    if (v7 == 1)
    {
      v18 = *((_DWORD *)v5 + 158);
      if ((v18 - 1) >= 2)
      {
        if (!v18)
        {
          v40 = 3;
          *(_DWORD *)__str = 0;
          snprintf(__str, 3uLL, "%.2X", v15);
          exception = __cxa_allocate_exception(0x20uLL);
          std::to_string(&v33, v8);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "invalid UTF-8 byte at index ", &v33);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v35, &v34, ": 0x");
          if (v40 >= 0)
            v27 = __str;
          else
            v27 = *(char **)__str;
          if (v40 >= 0)
            v28 = v40;
          else
            v28 = v39;
          v29 = std::string::append(&v35, v27, v28);
          v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
          v37 = v29->__r_.__value_.__r.__words[2];
          v36 = v30;
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          nlohmann::detail::type_error::create((uint64_t)exception, 316, (uint64_t)&v36);
        }
        __assert_rtn("dump_escaped", "serializer.hpp", 562, "false");
      }
      v8 -= v9 != 0;
      if (v18 != 1)
      {
        v7 = 0;
        v9 = 0;
        v11 = v10;
        goto LABEL_39;
      }
      v19 = v13 + v10;
      v11 = v10 + 3;
      *(_WORD *)v19 = -16401;
      *(_BYTE *)(v19 + 2) = -67;
      v20 = v10 - 497;
      goto LABEL_36;
    }
    if (!v7)
    {
      switch(v6)
      {
        case 8u:
          v17 = 25180;
          goto LABEL_34;
        case 9u:
          v17 = 29788;
          goto LABEL_34;
        case 0xAu:
          v17 = 28252;
          goto LABEL_34;
        case 0xBu:
          goto LABEL_27;
        case 0xCu:
          v17 = 26204;
          goto LABEL_34;
        case 0xDu:
          v17 = 29276;
          goto LABEL_34;
        default:
          if (v6 == 34)
          {
            v17 = 8796;
            goto LABEL_34;
          }
          if (v6 == 92)
          {
            v17 = 23644;
LABEL_34:
            *(_WORD *)(v13 + v11) = v17;
            v11 += 2;
            goto LABEL_35;
          }
LABEL_27:
          if (v6 > 0x1F)
          {
            if ((v2 & 0x80u) == 0)
              v23 = a2;
            else
              v23 = (uint64_t *)*a2;
            *(_BYTE *)(v13 + v11++) = *((_BYTE *)v23 + v8);
          }
          else
          {
            result = snprintf((char *)(v13 + v11), 7uLL, "\\u%04x", v6);
            v11 += 6;
          }
LABEL_35:
          v20 = v11 - 500;
          break;
      }
LABEL_36:
      if (v20 <= 0xC)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v13, v11);
        v7 = 0;
        v11 = 0;
        v10 = 0;
        v9 = 0;
      }
      else
      {
        v7 = 0;
        v9 = 0;
        v10 = v11;
      }
      goto LABEL_39;
    }
    if ((v2 & 0x80u) == 0)
      v21 = a2;
    else
      v21 = (uint64_t *)*a2;
    *(_BYTE *)(v13 + v11++) = *((_BYTE *)v21 + v8);
    ++v9;
LABEL_39:
    ++v8;
    v2 = *((char *)a2 + 23);
    v12 = v2 >> 31;
    v22 = a2[1];
    if (v2 >= 0)
      v22 = *((unsigned __int8 *)a2 + 23);
  }
  while (v8 < v22);
  if (v7)
  {
    v25 = *((_DWORD *)v5 + 158);
    switch(v25)
    {
      case 1:
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v5 + 8))(*v5, v13, v10);
        v24 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 2:
        v24 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
        break;
      case 0:
        v40 = 3;
        *(_DWORD *)__str = 0;
        v31 = (uint64_t *)*a2;
        if (v2 >= 0)
          v31 = a2;
        snprintf(__str, 3uLL, "%.2X", *((unsigned __int8 *)v31 + v22 - 1));
        v32 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        nlohmann::detail::type_error::create((uint64_t)v32, 316, (uint64_t)&v36);
      default:
        __assert_rtn("dump_escaped", "serializer.hpp", 625, "false");
    }
    return v24();
  }
  else if (v11)
  {
    v24 = *(uint64_t (**)(void))(*(_QWORD *)*v5 + 8);
    return v24();
  }
  return result;
}

void sub_236C89404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;

  if (a33 < 0)
  {
    operator delete(__p);
    if ((v40 & 1) == 0)
    {
LABEL_6:
      if (a39 < 0)
        operator delete(a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v39);
  goto LABEL_6;
}

uint64_t nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned char,0>(_QWORD *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5;
  char v6;

  if (!a2)
    return (**(uint64_t (***)(_QWORD, uint64_t))*a1)(*a1, 48);
  LOBYTE(v2) = a2;
  if (a2 < 0xA)
  {
    v3 = 1;
LABEL_8:
    v6 = v2 | 0x30;
    goto LABEL_9;
  }
  if (a2 >= 0x64)
  {
    *(_WORD *)((char *)a1 + 17) = *(_WORD *)&nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * (a2 - 100 * ((41 * a2) >> 12))];
    v3 = 3;
    v2 = (41 * a2) >> 12;
    goto LABEL_8;
  }
  v5 = &nlohmann::detail::serializer<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::dump_integer<unsigned long long,0>(unsigned long long)::digits_to_99[2 * a2];
  *((_BYTE *)a1 + 17) = v5[1];
  v6 = *v5;
  v3 = 2;
LABEL_9:
  *((_BYTE *)a1 + 16) = v6;
  return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*a1 + 8))(*a1, a1 + 2, v3);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::mul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 * (unint64_t)HIDWORD(a1)) >> 32)
       + HIDWORD(a3) * (unint64_t)HIDWORD(a1)
       + ((HIDWORD(a3) * (unint64_t)a1) >> 32)
       + ((((a3 * (unint64_t)a1) >> 32)
         + (HIDWORD(a3) * a1)
         + (a3 * HIDWORD(a1))
         + 0x80000000) >> 32);
}

unint64_t nlohmann::detail::dtoa_impl::diyfp::sub(unint64_t a1, int a2, unint64_t a3, int a4)
{
  BOOL v4;
  unint64_t result;
  const char *v6;
  int v7;

  if (a2 != a4)
  {
    v6 = "x.e == y.e";
    v7 = 66;
LABEL_6:
    __assert_rtn("sub", "to_chars.hpp", v7, v6);
  }
  v4 = a1 >= a3;
  result = a1 - a3;
  if (!v4)
  {
    v6 = "x.f >= y.f";
    v7 = 67;
    goto LABEL_6;
  }
  return result;
}

uint64_t nlohmann::detail::dtoa_impl::grisu2_round(uint64_t this, char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;

  if ((int)a2 <= 0)
    __assert_rtn("grisu2_round", "to_chars.hpp", 545, "len >= 1");
  if (a3 > a4)
    __assert_rtn("grisu2_round", "to_chars.hpp", 546, "dist <= delta");
  if (a4 < a5)
    __assert_rtn("grisu2_round", "to_chars.hpp", 547, "rest <= delta");
  if (!a6)
    __assert_rtn("grisu2_round", "to_chars.hpp", 548, "ten_k > 0");
  if (a5 < a3 && a4 - a5 >= a6)
  {
    v6 = ((_DWORD)a2 - 1);
    v7 = -(uint64_t)a5;
    v8 = a6 + a5;
    do
    {
      if (v8 >= a3 && a3 + v7 <= v8 - a3)
        break;
      v9 = *(unsigned __int8 *)(this + v6);
      if (v9 == 48)
        __assert_rtn("grisu2_round", "to_chars.hpp", 573, "buf[len - 1] != '0'");
      *(_BYTE *)(this + v6) = v9 - 1;
      if (v8 >= a3)
        break;
      v10 = a4 - a6 + v7;
      v7 -= a6;
      v8 += a6;
    }
    while (v10 >= a6);
  }
  return this;
}

uint64_t nlohmann::detail::dtoa_impl::diyfp::normalize(uint64_t result, unint64_t a2)
{
  if (!result)
    __assert_rtn("normalize", "to_chars.hpp", 143, "x.f != 0");
  for (; (result & 0x8000000000000000) == 0; a2 = (a2 - 1) | a2 & 0xFFFFFFFF00000000)
    result *= 2;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(std::string *a1, std::string *a2, char *__s)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void nlohmann::detail::output_string_adapter<char,std::string>::write_character(uint64_t a1, std::string::value_type a2)
{
  std::string::push_back(*(std::string **)(a1 + 8), a2);
}

std::string *nlohmann::detail::output_string_adapter<char,std::string>::write_characters(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  return std::string::append(*(std::string **)(a1 + 8), a2, a3);
}

void nlohmann::detail::output_string_adapter<char,std::string>::~output_string_adapter()
{
  JUMPOUT(0x23B801508);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083F3C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_25083F3C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

uint64_t std::__shared_ptr_emplace<nlohmann::detail::output_string_adapter<char,std::string>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

uint64_t nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
    return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json(a1, a2);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a2);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  return nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_236C899C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

adm::SystemConfiguration *adm::SystemConfiguration::SystemConfiguration(adm::SystemConfiguration *this, const SystemConfiguration *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t *v9;
  char *data;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *i;
  unint64_t v18;
  char *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v30;
  _QWORD v31[2];
  char v32;

  *(_DWORD *)this = a2->mContext.mOS;
  if (*((char *)&a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_, a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    v4 = *(_OWORD *)a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_;
    *((_QWORD *)this + 3) = *((_QWORD *)&a2->mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 2);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)&a2[1].mContext.mOS + 7) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *(const std::string::value_type **)&a2->mContext.mResourcePath.__pn_.__r_.var0, a2->mContext.mResourcePath.__pn_.var0);
  }
  else
  {
    v5 = *(_OWORD *)&a2->mContext.mResourcePath.__pn_.__r_.var0;
    *((_QWORD *)this + 6) = *(_QWORD *)&a2[1].mContext.mOS;
    *((_OWORD *)this + 2) = v5;
  }
  *((_QWORD *)this + 7) = a2[1].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 64), (__int128 *)&a2[1].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 4, (__int128 *)&a2[2].mContext.mOS);
  *((_QWORD *)this + 16) = *(_QWORD *)&a2[2].mContext.mResourcePath.__pn_.__r_.var0;
  if (a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), (const std::string::value_type *)a2[2].mContext.mResourcePath.__pn_.var0, *(_QWORD *)&a2[3].mContext.mOS);
  }
  else
  {
    v6 = *(_OWORD *)&a2[2].mContext.mResourcePath.__pn_.var0;
    *((_QWORD *)this + 19) = a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_;
    *(_OWORD *)((char *)this + 136) = v6;
  }
  v7 = (unint64_t)this + 160;
  if (*((char *)&a2[3].mContext.mResourcePath.__pn_.__r_.var1 + 3) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), (const std::string::value_type *)a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_, *((_QWORD *)&a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 2));
  }
  else
  {
    v8 = *(_OWORD *)&a2[3].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_;
    *((_QWORD *)this + 22) = *(_QWORD *)&a2[3].mContext.mResourcePath.__pn_.__r_.var0;
    *(_OWORD *)v7 = v8;
  }
  *(_OWORD *)((char *)this + 184) = 0u;
  v9 = (uint64_t *)((char *)this + 184);
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = *((_DWORD *)&a2[4].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1 + 4);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)this + 184, *(_QWORD *)&a2[4].mContext.mOS);
  data = a2[4].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_;
  if (data)
  {
    v30 = (_QWORD *)((char *)this + 200);
    do
    {
      v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(data + 16));
      v12 = v11;
      v13 = *((_QWORD *)this + 24);
      if (v13)
      {
        v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
        v14.i16[0] = vaddlv_u8(v14);
        v15 = v14.u32[0];
        if (v14.u32[0] > 1uLL)
        {
          v7 = v11;
          if (v11 >= v13)
            v7 = v11 % v13;
        }
        else
        {
          v7 = (v13 - 1) & v11;
        }
        v16 = *(unsigned __int8 ***)(*v9 + 8 * v7);
        if (v16)
        {
          for (i = *v16; i; i = *(unsigned __int8 **)i)
          {
            v18 = *((_QWORD *)i + 1);
            if (v18 == v12)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)data + 16))
                goto LABEL_53;
            }
            else
            {
              if (v15 > 1)
              {
                if (v18 >= v13)
                  v18 %= v13;
              }
              else
              {
                v18 &= v13 - 1;
              }
              if (v18 != v7)
                break;
            }
          }
        }
      }
      v19 = (char *)operator new(0x50uLL);
      v31[0] = v19;
      v31[1] = (char *)this + 200;
      v32 = 0;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = v12;
      std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>::pair[abi:ne180100]((std::string *)(v19 + 16), (__int128 *)data + 1);
      v32 = 1;
      v20 = (float)(unint64_t)(*((_QWORD *)this + 26) + 1);
      v21 = *((float *)this + 54);
      if (!v13 || (float)(v21 * (float)v13) < v20)
      {
        v22 = (v13 & (v13 - 1)) != 0;
        if (v13 < 3)
          v22 = 1;
        v23 = v22 | (2 * v13);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)this + 184, v25);
        v13 = *((_QWORD *)this + 24);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v12 >= v13)
            v7 = v12 % v13;
          else
            v7 = v12;
        }
        else
        {
          v7 = (v13 - 1) & v12;
        }
      }
      v26 = *v9;
      v27 = *(_QWORD **)(*v9 + 8 * v7);
      if (v27)
      {
        *(_QWORD *)v19 = *v27;
      }
      else
      {
        *(_QWORD *)v19 = *v30;
        *v30 = v19;
        *(_QWORD *)(v26 + 8 * v7) = v30;
        if (!*(_QWORD *)v19)
          goto LABEL_52;
        v28 = *(_QWORD *)(*(_QWORD *)v19 + 8);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v28 >= v13)
            v28 %= v13;
        }
        else
        {
          v28 &= v13 - 1;
        }
        v27 = (_QWORD *)(*v9 + 8 * v28);
      }
      *v27 = v19;
LABEL_52:
      v31[0] = 0;
      ++*((_QWORD *)this + 26);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31);
LABEL_53:
      data = *(char **)data;
    }
    while (data);
  }
  return this;
}

void sub_236C89D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 159) < 0)
    operator delete(*a10);
  adm::ConfigurationContext::~ConfigurationContext((void **)v10);
  _Unwind_Resume(a1);
}

void adm::SystemConfiguration::~SystemConfiguration(void **this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::~__hash_table((uint64_t)(this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((_BYTE *)this + 120) && *((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t *std::unique_ptr<adm::vp::ProxyFactory>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    JUMPOUT(0x23B801508);
  }
  return result;
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,adm::DSPGraphBasicConfiguration>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,adm::DSPGraphBasicConfiguration>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v3 = (void **)(a1 + 72);
  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 48);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::~__func(uint64_t a1)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)a1 = &off_25083C220;
  v2 = *(const void **)(a1 + 240);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 232);
  if (v3)
    CFRelease(v3);
  adm::SystemConfiguration::~SystemConfiguration((void **)(a1 + 8));
  return a1;
}

void std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::~__func(uint64_t a1)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)a1 = &off_25083C220;
  v2 = *(const void **)(a1 + 240);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(a1 + 232);
  if (v3)
    CFRelease(v3);
  adm::SystemConfiguration::~SystemConfiguration((void **)(a1 + 8));
  JUMPOUT(0x23B801508);
}

_QWORD *std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xF8uLL);
  *v2 = &off_25083C220;
  std::__compressed_pair_elem<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0 const&,0ul>((adm::SystemConfiguration *)(v2 + 1), v1);
  return v2;
}

void sub_236C8A360(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

adm::SystemConfiguration *std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25083C220;
  return std::__compressed_pair_elem<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0 const&,0ul>((adm::SystemConfiguration *)(a2 + 1), a1 + 8);
}

void std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy[abi:ne180100]((adm::SystemConfiguration *)(a1 + 8));
}

void std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy_deallocate(uint64_t a1)
{
  std::__function::__alloc_func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy[abi:ne180100]((adm::SystemConfiguration *)(a1 + 8));
  operator delete((void *)a1);
}

uint64_t std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned __int8 v6;
  NSObject *adm_log_object;
  uint64_t result;
  unsigned int v9;
  NSObject *v10;
  void **v11;
  uint64_t i;
  std::runtime_error *exception;
  void (*v14)(void *);
  struct type_info *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t *v23;
  void *__p[2];
  char v25;
  uint8_t buf[16];
  uint8_t *v27;
  char v28;
  _BYTE v29[8];
  _QWORD v30[2];
  char v31;
  _BYTE v32[8];
  uint64_t *v33[2];
  char v34;
  uint8_t v35[4];
  void **v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 240);
  v16 = *(_QWORD *)(a1 + 232);
  if (*(_BYTE *)(a1 + 68))
    v4 = *(_DWORD *)(a1 + 64);
  else
    v4 = 0;
  v17 = 0;
  v18 = v4;
  v20 = 0;
  v21 = 0;
  v19 = v3;
  v5 = (_QWORD *)operator new();
  if ((v6 & 1) == 0
  {
    if (GetVoiceProcessorSPI(void)::sVoiceProcessorSPIOnce != -1)
      dispatch_once(&GetVoiceProcessorSPI(void)::sVoiceProcessorSPIOnce, &__block_literal_global_471);
    adm::vp::detail::getDefaultVoiceProcessorSPI(void)::gVoiceProcessorSPI = GetVoiceProcessorSPI(void)::sVoiceProcessorSPI;
  }
  if (!adm::vp::detail::getDefaultVoiceProcessorSPI(void)::gVoiceProcessorSPI)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "gVoiceProcessorSPI is nullptr!");
    v14 = (void (*)(void *))MEMORY[0x24BEDAB60];
    v15 = (struct type_info *)MEMORY[0x24BEDB730];
    goto LABEL_19;
  }
  *v5 = adm::vp::detail::getDefaultVoiceProcessorSPI(void)::gVoiceProcessorSPI;
  v5[1] = 0;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "creating voice processor", buf, 2u);
  }
  result = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v5 + 8))(v5 + 1, &v16);
  v9 = result;
  if ((_DWORD)result)
  {
    v10 = get_adm_log_object();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)buf, "error");
      v27 = buf;
      v28 = 1;
      v29[0] = 5;
      v30[0] = (int)v9;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
      v30[1] = v29;
      v31 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v32, (uint64_t)buf, 2);
      v33[1] = (uint64_t *)v32;
      v34 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v22, (uint64_t)v32, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v22, -1);
      if (v25 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      *(_DWORD *)v35 = 136315138;
      v36 = v11;
      _os_log_error_impl(&dword_236C84000, v10, OS_LOG_TYPE_ERROR, "failed to create voice processor with error: %s", v35, 0xCu);
      if (v25 < 0)
        operator delete(__p[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v23, v22[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v33, v32[0]);
      for (i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29[i * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v30[i], v29[i * 8]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, v9, &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory);
    v14 = (void (*)(void *))MEMORY[0x24BEDADC8];
    v15 = (struct type_info *)MEMORY[0x24BEDB6E8];
LABEL_19:
    __cxa_throw(exception, v15, v14);
  }
  *a2 = v5;
  return result;
}

void sub_236C8A6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t i;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v19 + 8), a14);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v20 - 112);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v20 - 104), *(unsigned __int8 *)(v20 - 112));
  for (i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(&a19 + i + 32));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a19 + i + 40), *(&a19 + i + 32));
  }
  JUMPOUT(0x236C8A828);
}

void sub_236C8A768(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 buf)
{
  NSObject *adm_log_object;
  std::runtime_error *exception;

  if (a2)
  {
    __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
    {
      buf = 0;
      _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown exception from voice processor proxy SPI");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  JUMPOUT(0x236C8A840);
}

void sub_236C8A7E8()
{
  __cxa_end_catch();
  JUMPOUT(0x236C8A828);
}

void sub_236C8A804(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x236C8A840);
}

void sub_236C8A814(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x23B801508](v1, 0xE0C402B90B96ALL);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN3adm5graph11NodeManagerC1ERKNS_19SystemConfigurationEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::target_type()
{
}

void std::__function::__alloc_func<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,std::allocator<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0>,std::unique_ptr<adm::vp::SPI> ()(void)>::destroy[abi:ne180100](adm::SystemConfiguration *this)
{
  const void *v2;
  const void *v3;

  v2 = (const void *)*((_QWORD *)this + 29);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 28);
  if (v3)
    CFRelease(v3);
  adm::SystemConfiguration::~SystemConfiguration((void **)this);
}

adm::SystemConfiguration *std::__compressed_pair_elem<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<adm::graph::NodeManager::NodeManager(adm::SystemConfiguration const&)::$_0 const&,0ul>(adm::SystemConfiguration *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;

  adm::SystemConfiguration::SystemConfiguration(a1, (const SystemConfiguration *)a2);
  v4 = *(_QWORD *)(a2 + 224);
  if (v4)
    CFRetain(*(CFTypeRef *)(a2 + 224));
  *((_QWORD *)a1 + 28) = v4;
  v5 = *(const void **)(a2 + 232);
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 29) = v5;
  return a1;
}

void adm::ConfigurationContext::~ConfigurationContext(void **this)
{
  if (*((_BYTE *)this + 120) && *((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((_BYTE *)this + 88) && *((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v2;
  BOOL v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;

  v1 = *(char *)(a1 + 23);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = v1 < 0;
  if (v1 >= 0)
    v4 = (uint64_t *)a1;
  else
    v4 = *(uint64_t **)a1;
  if (!v3)
    v2 = *(unsigned __int8 *)(a1 + 23);
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      v34 = 0x9DDFEA08EB382D69;
      v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      v50 = v46 + v48;
      v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      v53 = v47 + v2 + v46 + v44;
      v54 = v53 + v43;
      v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      v57 = v56 + v45 + v48;
      v58 = __ROR8__(v57, 44);
      v59 = v57 + v49;
      v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      v62 = *v4;
      v61 = v4 + 4;
      v63 = v62 - 0x4B6D499041670D8DLL * v43;
      v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v65 = *(v61 - 3);
        v66 = v63 + v54 + v50 + v65;
        v67 = v61[2];
        v68 = v61[3];
        v69 = v61[1];
        v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        v70 = v52 + v59;
        v71 = *(v61 - 2);
        v72 = *(v61 - 1);
        v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        v74 = v73 + v59 + v72;
        v75 = v73 + v65 + v71;
        v54 = v75 + v72;
        v76 = __ROR8__(v75, 44) + v73;
        v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        v55 = v76 + __ROR8__(v74 + v77, 21);
        v78 = v63 + v60 + *v61;
        v59 = v78 + v69 + v67 + v68;
        v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        v52 = v77;
        v64 += 64;
      }
      while (v64);
      v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      v9 = (char *)v4 + v2;
      v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      v12 = v4[1];
      v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      v16 = v4 + 2;
      v14 = v4[2];
      v15 = v16[1];
      v17 = __ROR8__(v13 + v15, 52);
      v18 = __ROR8__(v13, 37);
      v19 = v13 + v12;
      v20 = __ROR8__(v19, 7);
      v21 = v19 + v14;
      v22 = v20 + v18;
      v23 = *((_QWORD *)v9 - 4) + v14;
      v24 = v11 + v15;
      v25 = __ROR8__(v24 + v23, 52);
      v26 = v22 + v17;
      v27 = __ROR8__(v23, 37);
      v28 = *((_QWORD *)v9 - 3) + v23;
      v29 = __ROR8__(v28, 7);
      v30 = v26 + __ROR8__(v21, 31);
      v31 = v28 + v10;
      v32 = v31 + v24;
      v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      v34 = 0x9AE16A3B2F90404FLL;
      v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      v36 = v4[1];
      v37 = 0xB492B66FBE98F273 * *v4;
      v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      v5 = *v4;
      v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      v82 = *(_DWORD *)v4;
      v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  unint64_t v2;
  __int128 v5;
  std::string *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  std::string::size_type v9;
  std::string::size_type size;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  std::string::size_type v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  std::string::size_type v23;
  _QWORD *v24;
  std::string::size_type v25;
  std::string::size_type *v27;
  _QWORD v28[2];
  char v29;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  v6 = this + 1;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 14);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)&this[1], *((_QWORD *)a2 + 4));
  v7 = (unsigned __int8 *)*((_QWORD *)a2 + 5);
  if (v7)
  {
    v27 = &this[1].__r_.__value_.__r.__words[2];
    do
    {
      v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v7 + 16));
      v9 = v8;
      size = this[1].__r_.__value_.__l.__size_;
      if (size)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)size);
        v11.i16[0] = vaddlv_u8(v11);
        v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          v2 = v8;
          if (v8 >= size)
            v2 = v8 % size;
        }
        else
        {
          v2 = (size - 1) & v8;
        }
        v13 = *(unsigned __int8 ***)(v6->__r_.__value_.__r.__words[0] + 8 * v2);
        if (v13)
        {
          for (i = *v13; i; i = *(unsigned __int8 **)i)
          {
            v15 = *((_QWORD *)i + 1);
            if (v15 == v9)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v7 + 16))
                goto LABEL_44;
            }
            else
            {
              if (v12 > 1)
              {
                if (v15 >= size)
                  v15 %= size;
              }
              else
              {
                v15 &= size - 1;
              }
              if (v15 != v2)
                break;
            }
          }
        }
      }
      v16 = (char *)operator new(0x88uLL);
      v28[0] = v16;
      v28[1] = (char *)this + 40;
      v29 = 0;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = v9;
      std::pair<std::string const,adm::DSPGraphBasicConfiguration>::pair[abi:ne180100]((std::string *)(v16 + 16), (__int128 *)v7 + 1);
      v29 = 1;
      v17 = (float)(this[2].__r_.__value_.__r.__words[0] + 1);
      v18 = *(float *)&this[2].__r_.__value_.__r.__words[1];
      if (!size || (float)(v18 * (float)size) < v17)
      {
        v19 = (size & (size - 1)) != 0;
        if (size < 3)
          v19 = 1;
        v20 = v19 | (2 * size);
        v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>((uint64_t)&this[1], v22);
        size = this[1].__r_.__value_.__l.__size_;
        if ((size & (size - 1)) != 0)
        {
          if (v9 >= size)
            v2 = v9 % size;
          else
            v2 = v9;
        }
        else
        {
          v2 = (size - 1) & v9;
        }
      }
      v23 = v6->__r_.__value_.__r.__words[0];
      v24 = *(_QWORD **)(v6->__r_.__value_.__r.__words[0] + 8 * v2);
      if (v24)
      {
        *(_QWORD *)v16 = *v24;
      }
      else
      {
        *(_QWORD *)v16 = *v27;
        *v27 = (std::string::size_type)v16;
        *(_QWORD *)(v23 + 8 * v2) = v27;
        if (!*(_QWORD *)v16)
          goto LABEL_43;
        v25 = *(_QWORD *)(*(_QWORD *)v16 + 8);
        if ((size & (size - 1)) != 0)
        {
          if (v25 >= size)
            v25 %= size;
        }
        else
        {
          v25 &= size - 1;
        }
        v24 = (_QWORD *)(v6->__r_.__value_.__r.__words[0] + 8 * v25);
      }
      *v24 = v16;
LABEL_43:
      v28[0] = 0;
      ++this[2].__r_.__value_.__r.__words[0];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
LABEL_44:
      v7 = *(unsigned __int8 **)v7;
    }
    while (v7);
  }
  return this;
}

void sub_236C8B36C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::~__hash_table(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,adm::DSPGraphBasicConfiguration>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,adm::DSPGraphBasicConfiguration>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  adm::DSPGraphBasicConfiguration::DSPGraphBasicConfiguration(this + 1, (uint64_t)a2 + 24);
  return this;
}

void sub_236C8B444(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *adm::DSPGraphBasicConfiguration::DSPGraphBasicConfiguration(std::string *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::__fs::filesystem::path>::__init_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::__fs::filesystem::path>::__init_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(a1 + 1, *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3));
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  if (v5 != v4)
  {
    std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__vallocate[abi:ne180100](a1[2].__r_.__value_.__r.__words, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 4));
    a1[2].__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>(v4, v5, a1[2].__r_.__value_.__l.__size_);
  }
  v6 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_236C8B56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::__fs::filesystem::path>::__init_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_236C8B61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  std::string *v10;
  const std::string::value_type **v11;
  __int128 v12;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = (__int128 *)(a1 + v6);
      v8 = a3 + v6;
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a3 + v6), *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
      }
      else
      {
        v9 = *v7;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v8 = v9;
      }
      v10 = (std::string *)(a3 + v6 + 24);
      v11 = (const std::string::value_type **)(a1 + v6 + 24);
      if (*(char *)(a1 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(_QWORD *)(a1 + v6 + 32));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)(a3 + v6 + 40) = *(_QWORD *)(a1 + v6 + 40);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      v6 += 48;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_236C8B748(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  while (v2 != v1)
  {
    v2 -= 48;
    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

char *std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_236C8B8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

adm::graph::NodeManager *adm::graph::NodeManager::NodeManager(adm::graph::NodeManager *this, const SystemConfiguration *a2)
{
  SystemConfiguration *v4;
  CFIndex data;
  CFStringRef v6;
  CFTypeRef v7;
  _QWORD *v8;
  CFTypeRef v9;
  CFTypeRef v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  NSObject *adm_log_object;
  uint8_t *v15;
  uint64_t v16;
  std::__shared_weak_count *shared_owners;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  uint64_t v27;
  std::runtime_error *exception;
  SystemConfiguration __p[4];
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef cf;
  SystemConfiguration v34[4];
  __int128 v35;
  uint8_t buf[16];
  _BYTE v37[24];
  _BYTE *v38;
  uint8_t v39[24];
  uint8_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  adm::utility::getTemporaryPath((std::string *)__p);
  if (__p[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[15] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v34, *(const std::string::value_type **)&__p[0].mContext.mOS, (std::string::size_type)__p[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_);
  }
  else
  {
    *(_OWORD *)&v34[0].mContext.mOS = *(_OWORD *)&__p[0].mContext.mOS;
    v34[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_ = __p[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__size_;
  }
  if (v34[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[15] >= 0)
    v4 = v34;
  else
    v4 = *(SystemConfiguration **)&v34[0].mContext.mOS;
  if (v34[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[15] >= 0)
    data = v34[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[15];
  else
    data = (CFIndex)v34[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var1.__data_;
  v6 = CFStringCreateWithBytes(0, (const UInt8 *)v4, data, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v34[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[15] < 0)
    operator delete(*(void **)&v34[0].mContext.mOS);
  if (__p[0].mContext.mResourcePath.__pn_.__r_.__value_.var0.var0.__data_[15] < 0)
    operator delete(*(void **)&__p[0].mContext.mOS);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, "empty hardware model");
  adm::SystemConfiguration::SystemConfiguration((adm::SystemConfiguration *)__p, a2);
  v7 = cf;
  if (cf)
    CFRetain(cf);
  v31 = v7;
  CFRetain(v6);
  v32 = v6;
  v8 = (_QWORD *)operator new();
  adm::SystemConfiguration::SystemConfiguration((adm::SystemConfiguration *)v34, __p);
  v9 = v31;
  if (v31)
    CFRetain(v31);
  *(_QWORD *)&v35 = v9;
  v10 = v32;
  if (v32)
    CFRetain(v32);
  *((_QWORD *)&v35 + 1) = v10;
  v11 = (char *)operator new(0xF8uLL);
  *(_QWORD *)v11 = &off_25083C220;
  adm::SystemConfiguration::SystemConfiguration((adm::SystemConfiguration *)(v11 + 8), v34);
  *(_OWORD *)(v11 + 232) = v35;
  v35 = 0uLL;
  v38 = v11;
  v12 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v12->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_25083C5F8;
  std::__function::__value_func<std::unique_ptr<adm::vp::SPI> ()(void)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)v37);
  v12[1].__vftable = 0;
  v12[1].__shared_owners_ = 0;
  MEMORY[0x23B801364](&v12[1].__shared_weak_owners_);
  std::__function::__value_func<std::unique_ptr<adm::vp::SPI> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v12[4].__shared_owners_, (uint64_t)v39);
  v12[5].__shared_weak_owners_ = 0;
  v12[6].__vftable = 0;
  v12[6].__shared_owners_ = (uint64_t)&v12[6].__shared_owners_;
  v12[6].__shared_weak_owners_ = (uint64_t)&v12[6].__shared_owners_;
  v12[7].__vftable = 0;
  v12[7].__shared_owners_ = (uint64_t)&v12[7].__shared_owners_;
  v12[7].__shared_weak_owners_ = (uint64_t)&v12[7].__shared_owners_;
  v12[8].std::__shared_count = (std::__shared_count)xmmword_236CE1870;
  if (!v12[5].__shared_owners_)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "Invalid ProxyFactoryImplementation SPIFactory provided", buf, 2u);
    }
  }
  v15 = v40;
  if (v40 == v39)
  {
    v16 = 4;
    v15 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_29;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_29:
  *v8 = v12 + 1;
  v8[1] = v12;
  shared_owners = (std::__shared_weak_count *)v12[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_42;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)&v12[1];
    v12[1].__shared_owners_ = (uint64_t)v12;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    v22 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)&v12[1];
    v12[1].__shared_owners_ = (uint64_t)v12;
  }
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_42:
  if (!*v8)
  {
    v25 = get_adm_log_object();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v39 = 0;
      _os_log_fault_impl(&dword_236C84000, v25, OS_LOG_TYPE_FAULT, "Invalid VoiceProcessorProxyFactory implementation provided", v39, 2u);
    }
  }
  v26 = v38;
  if (v38 == v37)
  {
    v27 = 4;
    v26 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_50;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_50:
  if (*((_QWORD *)&v35 + 1))
    CFRelease(*((CFTypeRef *)&v35 + 1));
  if ((_QWORD)v35)
    CFRelease((CFTypeRef)v35);
  adm::SystemConfiguration::~SystemConfiguration((void **)v34);
  std::unique_ptr<adm::vp::ProxyFactory>::reset[abi:ne180100]((uint64_t *)this, (uint64_t)v8);
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
  adm::SystemConfiguration::~SystemConfiguration((void **)__p);
  if (cf)
    CFRelease(cf);
  CFRelease(v6);
  return this;
}

void sub_236C8BDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t *v15;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v15 + 1));
  std::unique_ptr<adm::vp::ProxyFactory>::reset[abi:ne180100](v15, 0);
  _Unwind_Resume(a1);
}

void adm::graph::NodeManager::configureNode<adm::vp::UplinkConfiguration>(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  const void *v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  std::string *p_shared_owners;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _OWORD *v25;
  _DWORD *v26;
  char *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  char *v30;
  char *v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t *v38;
  NSObject *adm_log_object;
  uint64_t *v40;
  char v41;
  char *v42;
  int v43;
  uint64_t *v44;
  char *shared_owners;
  char *shared_weak_owners;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint8_t v50;
  uint64_t *v51;
  int v52;
  uint64_t **v53;
  char *v54;
  int v55;
  uint64_t *v56;
  _DWORD *v57;
  _DWORD *v58;
  unsigned __int8 *v59;
  char v60;
  const char *v61;
  int v62;
  uint64_t **p_imp;
  unsigned __int8 v64;
  const char *v65;
  unsigned __int8 v66;
  const char *v67;
  unsigned __int8 v68;
  const char *v69;
  unsigned __int8 v70;
  const char *v71;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _DWORD *v75;
  _DWORD *v76;
  unsigned __int8 *v77;
  char v78;
  const char *v79;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t *v83;
  char *v84;
  char v85;
  uint64_t *v86;
  uint64_t v87;
  char *v88;
  int v89;
  uint64_t *v90;
  uint64_t shared_owners_low;
  char *v92;
  int v93;
  uint64_t v94;
  uint8_t *v95;
  int v96;
  char *v97;
  char *v98;
  unint64_t v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  BOOL v103;
  int *v104;
  int *v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  int *v116;
  int *v117;
  unint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  __int128 v127;
  _QWORD *v128;
  int64x2_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  __int128 v137;
  int64x2_t v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD *v141;
  __int128 v142;
  unint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  void *v146;
  _QWORD *v147;
  int64_t v148;
  unint64_t v149;
  int64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  __int128 v154;
  _QWORD *v155;
  std::__shared_weak_count *v156;
  void **v157;
  __int128 v158;
  __int128 v159;
  _QWORD *v160;
  uint64_t v161;
  void *v162;
  uint8_t *v163;
  uint64_t *v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  NSObject *v170;
  _OWORD *v171;
  __int128 v172;
  uint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  std::__shared_weak_count *v182;
  std::recursive_mutex *v183;
  unint64_t *v184;
  unint64_t v185;
  _BYTE *v186;
  void *v187;
  const std::exception *v188;
  void *exception;
  NSObject *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _DWORD *Configuration;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  char *v209;
  __int128 v210;
  std::runtime_error *v211;
  uint64_t *v212;
  std::recursive_mutex *v213;
  uint64_t v214;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  std::__shared_weak_count *v218;
  char *v219;
  int v220;
  uint64_t *v221;
  char *v222;
  std::__shared_weak_count *v223;
  std::__shared_weak_count *v224[2];
  std::__shared_weak_count *v225[2];
  std::__shared_weak_count *v226[2];
  char *v227;
  unsigned __int8 *v228;
  int64x2_t v229;
  void *v230;
  int v231[4];
  __int128 v232;
  char v233;
  uint64_t (**v234)();
  void *v235[2];
  _DWORD *v236;
  void *v237;
  _BYTE *v238;
  uint64_t v239;
  int v240;
  __int128 v241;
  char v242;
  unsigned __int8 v243[8];
  uint64_t *v244;
  char v245[8];
  uint64_t *v246;
  char v247[8];
  uint64_t *v248[2];
  char v249;
  uint64_t v250;
  uint64_t v251;
  char v252[8];
  uint64_t *v253;
  uint8_t v254[8];
  uint64_t *v255;
  char v256[8];
  const char *v257;
  char v258[8];
  const char *v259;
  char v260[8];
  const char *v261;
  char v262[8];
  const char *v263;
  uint8_t v264[24];
  char v265;
  std::runtime_error v266;
  __int128 v267;
  unsigned __int8 v268[8];
  uint64_t v269;
  unsigned __int8 *v270;
  char v271;
  _BYTE buf[40];
  const char *imp;
  void *v274[2];
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  void *v278;
  void *v279;
  uint64_t v280;
  _QWORD v281[3];
  uint8_t v282[16];
  void *v283[3];
  char *v284;
  void *v285[2];
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  void *v289;
  void *v290;
  uint64_t v291;
  _QWORD v292[3];
  __int128 v293;
  uint64_t v294;

  v294 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = (char *)operator new(0xF8uLL);
  v7 = (std::__shared_weak_count *)v6;
  *(_OWORD *)(v6 + 8) = 0u;
  v8 = (unint64_t *)(v6 + 8);
  *(_QWORD *)v6 = &off_25083D670;
  *((_DWORD *)v6 + 6) = *(_DWORD *)a3;
  v227 = v6 + 24;
  *((_QWORD *)v6 + 4) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  v10 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)v282 = v6 + 32;
  v282[8] = 0;
  v11 = v9 - v10;
  if (v9 != v10)
  {
    v223 = (std::__shared_weak_count *)v6;
    if (v11 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v221 = v5;
    v12 = (char *)operator new(v9 - v10);
    v13 = 0;
    v7[1].__shared_owners_ = (uint64_t)v12;
    v7[1].__shared_weak_owners_ = (uint64_t)v12;
    v7[2].__vftable = (std::__shared_weak_count_vtbl *)&v12[64 * (v11 >> 6)];
    do
    {
      v14 = v10 + v13;
      v15 = &v12[v13];
      *(_DWORD *)v15 = *(_DWORD *)(v10 + v13);
      *(_QWORD *)&v12[v13 + 8] = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = 0;
      std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(&v12[v13 + 8], *(__int128 **)(v10 + v13 + 8), *(__int128 **)(v10 + v13 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + v13 + 16) - *(_QWORD *)(v10 + v13 + 8)) >> 4));
      *((_QWORD *)v15 + 4) = 0;
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>(&v12[v13 + 32], *(__int128 **)(v14 + 32), *(__int128 **)(v14 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14 + 40) - *(_QWORD *)(v14 + 32)) >> 4));
      *(_QWORD *)&v12[v13 + 56] = *(_QWORD *)(v10 + v13 + 56);
      v13 += 64;
    }
    while (v14 + 64 != v9);
    v7 = v223;
    v223[1].__shared_weak_owners_ = (uint64_t)&v12[v13];
    v5 = v221;
  }
  *(_OWORD *)&v7[2].__shared_owners_ = *(_OWORD *)(a3 + 32);
  v16 = *(const void **)(a3 + 56);
  v7[3].__vftable = *(std::__shared_weak_count_vtbl **)(a3 + 48);
  if (v16)
    CFRetain(v16);
  v7[4].__vftable = 0;
  v7[3].__shared_owners_ = (uint64_t)v16;
  LOBYTE(v7[3].__shared_weak_owners_) = *(_BYTE *)(a3 + 64);
  v7[4].__shared_owners_ = 0;
  v7[4].__shared_weak_owners_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v7[4].__vftable, *(const void **)(a3 + 72), *(_QWORD *)(a3 + 80), (uint64_t)(*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  v17 = *(_OWORD *)(a3 + 112);
  v7[5].std::__shared_count = *(std::__shared_count *)(a3 + 96);
  *(_OWORD *)&v7[5].__shared_weak_owners_ = v17;
  v18 = *(_QWORD *)(a3 + 128);
  if (v18)
    CFRetain(*(CFTypeRef *)(a3 + 128));
  v7[6].__shared_weak_owners_ = 0;
  v7[6].__shared_owners_ = v18;
  v7[7].__vftable = 0;
  v7[7].__shared_owners_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v7[6].__shared_weak_owners_, *(const void **)(a3 + 136), *(_QWORD *)(a3 + 144), (uint64_t)(*(_QWORD *)(a3 + 144) - *(_QWORD *)(a3 + 136)) >> 2);
  v19 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)&v7[7].__shared_weak_owners_ = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v7[8].__shared_owners_ = v19;
  LODWORD(v7[9].__vftable) = *(_DWORD *)(a3 + 192);
  p_shared_owners = (std::string *)&v7[9].__shared_owners_;
  if (*(char *)(a3 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(p_shared_owners, *(const std::string::value_type **)(a3 + 200), *(_QWORD *)(a3 + 208));
  }
  else
  {
    *(_OWORD *)&p_shared_owners->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 200);
    v7[10].__vftable = *(std::__shared_weak_count_vtbl **)(a3 + 216);
  }
  *(_QWORD *)buf = v227;
  *(_QWORD *)&buf[8] = v7;
  if (v7[1].__shared_weak_owners_ - v7[1].__shared_owners_ == 64)
  {
    adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>((uint64_t)v282, *v5, (uint64_t)buf);
    if (LOBYTE(v283[1]))
    {
      v21 = *(_QWORD *)&v282[8];
      v241 = *(_OWORD *)(*(_QWORD *)&v282[8] + 16);
      *(_QWORD *)(*(_QWORD *)&v282[8] + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      v242 = 1;
      if (LOBYTE(v283[1]))
        std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)v282);
    }
    else
    {
      v241 = *(_OWORD *)v282;
      v242 = 0;
    }
  }
  else
  {
    *(_QWORD *)&v241 = 1;
    *((_QWORD *)&v241 + 1) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    v242 = 0;
  }
  do
    v22 = __ldaxr(v8);
  while (__stlxr(v22 - 1, v8));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (!v242)
  {
    MEMORY[0x23B8012C8](&v266, v241, *((_QWORD *)&v241 + 1), "failed to create uplink voice processor proxy");
    adm::log_exception((adm *)&v266, v188);
    exception = __cxa_allocate_exception(0x50uLL);
    std::runtime_error::runtime_error((std::runtime_error *)buf, &v266);
    *(_OWORD *)&buf[16] = v267;
    v274[1] = 0;
    v274[0] = 0;
    LODWORD(v275) = -1;
    *(_QWORD *)buf = &off_25083C1D8;
    imp = 0;
    *(_QWORD *)&buf[32] = &unk_25083C200;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)v282, (uint64_t)buf);
    v285[0] = "void adm::graph::NodeManager::configureNode(std::shared_ptr<DSPNode>, const adm::vp::UplinkConfiguration &)";
    v285[1] = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/NodeManager.cpp";
    LODWORD(v286) = 78;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v264);
    v234 = off_25083F080;
    *(_OWORD *)v235 = *(_OWORD *)v264;
    v236 = *(_DWORD **)&v264[16];
    memset(v264, 0, sizeof(v264));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>((uint64_t)v282, (uint64_t)&v234);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, (uint64_t)v282);
  }
  v23 = *(_QWORD *)(a3 + 104);
  LODWORD(v234) = 1;
  *(_DWORD *)v282 = 1;
  v24 = operator new(0x30uLL);
  v283[1] = v24 + 6;
  *(_DWORD *)v24 = 0;
  v24[1] = v23;
  *((_OWORD *)v24 + 1) = xmmword_236CE1880;
  *((_OWORD *)v24 + 2) = xmmword_236CE1890;
  *(_QWORD *)&v282[8] = v24;
  v283[0] = v24 + 6;
  v25 = operator new(0x30uLL);
  v285[0] = v25 + 3;
  *(_DWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v23;
  v25[1] = xmmword_236CE1880;
  v25[2] = xmmword_236CE1890;
  v283[2] = v25;
  v284 = (char *)(v25 + 3);
  LODWORD(v285[1]) = *(_DWORD *)(a3 + 192);
  BYTE4(v285[1]) = 1;
  v235[1] = 0;
  v236 = 0;
  v235[0] = 0;
  *(_QWORD *)buf = v235;
  buf[8] = 0;
  v26 = operator new(0x40uLL);
  v235[0] = v26;
  v235[1] = v26;
  v236 = v26 + 16;
  *v26 = *(_DWORD *)v282;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 3) = 0;
  std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*>(v26 + 2, *(_OWORD **)&v282[8], (_OWORD *)v283[0], 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v283[0] - *(_QWORD *)&v282[8]) >> 4));
  *((_QWORD *)v26 + 4) = 0;
  *((_QWORD *)v26 + 5) = 0;
  *((_QWORD *)v26 + 6) = 0;
  std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*>((_OWORD *)v26 + 2, (_OWORD *)v283[2], v284, 0xAAAAAAAAAAAAAAABLL * ((v284 - (char *)v283[2]) >> 4));
  v27 = (char *)v283[2];
  *((void **)v26 + 7) = v285[1];
  v235[1] = v26 + 16;
  v237 = 0;
  v238 = 0;
  v239 = 0;
  v240 = *(_DWORD *)(a3 + 192);
  if (v27)
  {
    v284 = v27;
    operator delete(v27);
  }
  if (*(_QWORD *)&v282[8])
  {
    v283[0] = *(void **)&v282[8];
    operator delete(*(void **)&v282[8]);
  }
  v28 = *a1;
  v29 = (std::__shared_weak_count *)operator new(0x58uLL);
  *(_OWORD *)&v29->__shared_owners_ = 0u;
  v217 = (unint64_t *)&v29->__shared_owners_;
  v218 = v29;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_25083D6C0;
  LODWORD(v29[1].__vftable) = (_DWORD)v234;
  v216 = v29 + 1;
  v29[1].__shared_owners_ = 0;
  *(_OWORD *)&v29[1].__shared_weak_owners_ = 0u;
  v30 = (char *)v235[0];
  v31 = (char *)v235[1];
  *(_QWORD *)v282 = (char *)v29 + 32;
  v282[8] = 0;
  v32 = (char *)v235[1] - (char *)v235[0];
  if (v235[1] != v235[0])
  {
    if (v32 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v33 = (char *)operator new((char *)v235[1] - (char *)v235[0]);
    v34 = 0;
    v218[1].__shared_owners_ = (uint64_t)v33;
    v218[1].__shared_weak_owners_ = (uint64_t)v33;
    v218[2].__vftable = (std::__shared_weak_count_vtbl *)&v33[64 * (v32 >> 6)];
    do
    {
      v35 = &v30[v34];
      v36 = &v33[v34];
      *(_DWORD *)v36 = *(_DWORD *)&v30[v34];
      *(_QWORD *)&v33[v34 + 8] = 0;
      *((_QWORD *)v36 + 2) = 0;
      *((_QWORD *)v36 + 3) = 0;
      std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*>(&v33[v34 + 8], *(_OWORD **)&v30[v34 + 8], *(_OWORD **)&v30[v34 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v30[v34 + 16] - *(_QWORD *)&v30[v34 + 8]) >> 4));
      *((_QWORD *)v36 + 4) = 0;
      *((_QWORD *)v36 + 5) = 0;
      *((_QWORD *)v36 + 6) = 0;
      std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*>(&v33[v34 + 32], *((_OWORD **)v35 + 4), *((_OWORD **)v35 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v35 + 5) - *((_QWORD *)v35 + 4)) >> 4));
      *(_QWORD *)&v33[v34 + 56] = *(_QWORD *)&v30[v34 + 56];
      v34 += 64;
    }
    while (v35 + 64 != v31);
    v37 = &v33[v34];
    v29 = v218;
    v218[1].__shared_weak_owners_ = (uint64_t)v37;
  }
  v29[2].__shared_owners_ = 0;
  v29[2].__shared_weak_owners_ = 0;
  v29[3].__vftable = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v29[2].__shared_owners_, v237, (uint64_t)v238, (v238 - (_BYTE *)v237) >> 2);
  LODWORD(v29[3].__shared_owners_) = v240;
  v38 = v217;
  if (v29[1].__shared_weak_owners_ - v29[1].__shared_owners_ != 64)
  {
    *((_QWORD *)&v232 + 1) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    v233 = 0;
    goto LABEL_234;
  }
  v213 = (std::recursive_mutex *)(*v28 + 16);
  v214 = *v28;
  std::recursive_mutex::lock(v213);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    v243[0] = 0;
    v244 = 0;
    v247[0] = 0;
    v248[0] = 0;
    if (LODWORD(v216->__vftable) == 1)
    {
      *(_QWORD *)&v282[8] = 0;
      v282[0] = 3;
      v40 = (uint64_t *)operator new(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v40, "AllOfDownlinkDSPInOneNodeWithFarEndVoiceOnly");
    }
    else
    {
      if (LODWORD(v216->__vftable))
      {
        v40 = 0;
        v41 = 0;
        goto LABEL_41;
      }
      *(_QWORD *)&v282[8] = 0;
      v282[0] = 3;
      v40 = (uint64_t *)operator new(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v40, "AllOfDownlinkDSPInOneNode");
    }
    *(_QWORD *)&v282[8] = v40;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    v247[0] = 3;
    v282[0] = 0;
    v248[0] = v40;
    *(_QWORD *)&v282[8] = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v247);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v282[8], 0);
    v41 = 3;
LABEL_41:
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v247);
    v42 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v243, "type");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v247);
    v43 = *v42;
    *v42 = v41;
    v247[0] = v43;
    v44 = (uint64_t *)*((_QWORD *)v42 + 1);
    *((_QWORD *)v42 + 1) = v40;
    v248[0] = v44;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v42);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v247);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v248, v43);
    v246 = 0;
    v245[0] = 2;
    shared_owners = (char *)v29[1].__shared_owners_;
    shared_weak_owners = (char *)v29[1].__shared_weak_owners_;
    v47 = (uint64_t *)operator new(0x18uLL);
    v48 = v47;
    *v47 = 0;
    v47[1] = 0;
    v47[2] = 0;
    v248[1] = v47;
    v249 = 0;
    if (shared_weak_owners != shared_owners)
    {
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v47, (shared_weak_owners - shared_owners) >> 6);
      v212 = v48;
      v250 = v48[1];
      v251 = v250;
      *(_QWORD *)v264 = v48 + 2;
      *(_QWORD *)&v264[8] = &v250;
      *(_QWORD *)&v264[16] = &v251;
      v265 = 0;
      v219 = shared_weak_owners;
      v49 = v250;
      while (1)
      {
        *(_BYTE *)v49 = 0;
        *(_QWORD *)(v49 + 8) = 0;
        v254[0] = 0;
        v255 = 0;
        v228 = (unsigned __int8 *)v49;
        if (*(_DWORD *)shared_owners == 1)
        {
          *(_QWORD *)&buf[8] = 0;
          buf[0] = 3;
          v51 = (uint64_t *)operator new(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v51, "AllOfDownlinkDSPWithFarEndVoiceOnly");
          *(_QWORD *)&buf[8] = v51;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
          v50 = 3;
          v254[0] = 3;
          buf[0] = 0;
          v255 = v51;
          *(_QWORD *)&buf[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
          v53 = (uint64_t **)&buf[8];
          v52 = 0;
        }
        else
        {
          if (*(_DWORD *)shared_owners)
          {
            v51 = 0;
            v50 = 0;
            goto LABEL_49;
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v282, "AllOfDownlinkDSP");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
          v50 = v282[0];
          v254[0] = v282[0];
          v282[0] = 0;
          v51 = *(uint64_t **)&v282[8];
          v255 = *(uint64_t **)&v282[8];
          *(_QWORD *)&v282[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
          v52 = v282[0];
          v53 = (uint64_t **)&v282[8];
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v53, v52);
LABEL_49:
        v222 = shared_owners;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
        v54 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "type");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
        v55 = *v54;
        *v54 = v50;
        v254[0] = v55;
        v56 = (uint64_t *)*((_QWORD *)v54 + 1);
        *((_QWORD *)v54 + 1) = v51;
        v255 = v56;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v54);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v254);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v255, v55);
        v57 = (_DWORD *)*((_QWORD *)v222 + 1);
        v58 = (_DWORD *)*((_QWORD *)v222 + 2);
        while (v57 != v58)
        {
          v59 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "input_format_map");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
          *(_QWORD *)&buf[16] = buf;
          buf[24] = 1;
          buf[32] = 0;
          imp = 0;
          switch(*v57)
          {
            case 0:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)&v266, "FarEndVoice");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v266);
              v60 = buf[32];
              buf[32] = v266.__vftable;
              LOBYTE(v266.__vftable) = v60;
              v61 = imp;
              imp = v266.__imp_.__imp_;
              v266.__imp_.__imp_ = v61;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v266);
              v62 = LOBYTE(v266.__vftable);
              p_imp = (uint64_t **)&v266.__imp_;
              goto LABEL_57;
            case 1:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v262, "DefaultAudio");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v262);
              v70 = buf[32];
              buf[32] = v262[0];
              v262[0] = v70;
              v71 = imp;
              imp = v263;
              v263 = v71;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v262);
              v62 = v262[0];
              p_imp = (uint64_t **)&v263;
              goto LABEL_57;
            case 2:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v260, "SystemAudio");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v260);
              v66 = buf[32];
              buf[32] = v260[0];
              v260[0] = v66;
              v67 = imp;
              imp = v261;
              v261 = v67;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v260);
              v62 = v260[0];
              p_imp = (uint64_t **)&v261;
              goto LABEL_57;
            case 3:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)v258, "OtherAudio");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v258);
              v68 = buf[32];
              buf[32] = v258[0];
              v258[0] = v68;
              v69 = imp;
              imp = v259;
              v259 = v69;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v258);
              v62 = v258[0];
              p_imp = (uint64_t **)&v259;
              goto LABEL_57;
            case 4:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>((uint64_t)v256, "SpeakerTelemetry");
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v256);
              v64 = buf[32];
              buf[32] = v256[0];
              v256[0] = v64;
              v65 = imp;
              imp = v257;
              v257 = v65;
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v256);
              v62 = v256[0];
              p_imp = (uint64_t **)&v257;
LABEL_57:
              nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(p_imp, v62);
              break;
            default:
              break;
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
          v274[0] = &buf[32];
          LOBYTE(v274[1]) = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v282, (uint64_t)buf, 2);
          v283[0] = v282;
          LOBYTE(v283[1]) = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v266);
          *(_QWORD *)&v267 = &v266;
          BYTE8(v267) = 1;
          v268[0] = 0;
          v269 = 0;
          nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v268, (uint64_t)(v57 + 2));
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v268);
          v270 = v268;
          v271 = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v283[2], (uint64_t)&v266, 2);
          v285[0] = &v283[2];
          LOBYTE(v285[1]) = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v59, (uint64_t)v282, 2);
          for (i = 0; i != -8; i -= 4)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v283[i + 2]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v285[i - 1], LOBYTE(v283[i + 2]));
          }
          for (j = 0; j != -64; j -= 32)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v268[j]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v269 + j), v268[j]);
          }
          for (k = 0; k != -64; k -= 32)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[k + 32]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[k + 40], buf[k + 32]);
          }
          v57 += 12;
        }
        v75 = (_DWORD *)*((_QWORD *)v222 + 4);
        v76 = (_DWORD *)*((_QWORD *)v222 + 5);
        while (v75 != v76)
        {
          v77 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "output_format_map");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
          *(_QWORD *)&buf[16] = buf;
          buf[24] = 1;
          buf[32] = 0;
          imp = 0;
          if (!*v75)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)&v266, "Default");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v266);
            v78 = buf[32];
            buf[32] = v266.__vftable;
            LOBYTE(v266.__vftable) = v78;
            v79 = imp;
            imp = v266.__imp_.__imp_;
            v266.__imp_.__imp_ = v79;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v266);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v266.__imp_, LOBYTE(v266.__vftable));
          }
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[32]);
          v274[0] = &buf[32];
          LOBYTE(v274[1]) = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v282, (uint64_t)buf, 2);
          v283[0] = v282;
          LOBYTE(v283[1]) = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v266);
          *(_QWORD *)&v267 = &v266;
          BYTE8(v267) = 1;
          v268[0] = 0;
          v269 = 0;
          nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v268, (uint64_t)(v75 + 2));
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v268);
          v270 = v268;
          v271 = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v283[2], (uint64_t)&v266, 2);
          v285[0] = &v283[2];
          LOBYTE(v285[1]) = 1;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v77, (uint64_t)v282, 2);
          for (m = 0; m != -8; m -= 4)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v283[m + 2]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v285[m - 1], LOBYTE(v283[m + 2]));
          }
          for (n = 0; n != -64; n -= 32)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v268[n]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v269 + n), v268[n]);
          }
          for (ii = 0; ii != -64; ii -= 32)
          {
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&buf[ii + 32]);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[ii + 40], buf[ii + 32]);
          }
          v75 += 12;
        }
        if (v222[60])
          v83 = (uint64_t *)*((unsigned int *)v222 + 14);
        else
          v83 = 0;
        v252[0] = 6;
        v253 = v83;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v252);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v252);
        v84 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "block_size");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v252);
        v85 = *v84;
        v220 = *v84;
        *v84 = 6;
        v252[0] = v85;
        v86 = (uint64_t *)*((_QWORD *)v84 + 1);
        *((_QWORD *)v84 + 1) = v83;
        v253 = v86;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v84);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v252);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v253, v220);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v228);
        v49 = v251 + 16;
        v251 += 16;
        shared_owners = v222 + 64;
        if (v222 + 64 == v219)
        {
          v265 = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v264);
          v87 = v49;
          v48 = v212;
          v212[1] = v87;
          v29 = v218;
          break;
        }
      }
    }
    v246 = v48;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
    v88 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v243, "node_configurations");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
    v89 = *v88;
    *v88 = 2;
    v245[0] = v89;
    v90 = (uint64_t *)*((_QWORD *)v88 + 1);
    *((_QWORD *)v88 + 1) = v48;
    v246 = v90;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v88);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v246, v89);
    shared_owners_low = LODWORD(v29[3].__shared_owners_);
    v282[0] = 6;
    *(_QWORD *)&v282[8] = shared_owners_low;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    v92 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v243, "client_io_block_size");
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    v93 = *v92;
    *v92 = 6;
    v282[0] = v93;
    v94 = *((_QWORD *)v92 + 1);
    *((_QWORD *)v92 + 1) = shared_owners_low;
    *(_QWORD *)&v282[8] = v94;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v92);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v282);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v282[8], v93);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v243);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v282, (uint64_t)v243, 4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v243);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v244, v243[0]);
    if (SHIBYTE(v283[0]) >= 0)
      v95 = v282;
    else
      v95 = *(uint8_t **)v282;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "downlink";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v95;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "creating %s voice processor proxy list with configuration: %s", buf, 0x16u);
    v38 = v217;
    if (SHIBYTE(v283[0]) < 0)
      operator delete(*(void **)v282);
  }
  v96 = *(_DWORD *)(v214 + 180);
  if (v96 != LODWORD(v216->__vftable))
    goto LABEL_227;
  if (v96 != 1)
    goto LABEL_227;
  if (!LODWORD(v29[3].__shared_owners_))
    goto LABEL_227;
  v97 = (char *)v29[1].__shared_owners_;
  v98 = (char *)v29[1].__shared_weak_owners_;
  if (v98 - v97 != 64)
    goto LABEL_227;
  do
    v99 = __ldxr(v38);
  while (__stxr(v99 + 1, v38));
  *(_QWORD *)&v100 = v216;
  *((_QWORD *)&v100 + 1) = v29;
  do
    v101 = __ldxr(v38);
  while (__stxr(v101 + 1, v38));
  while (1)
  {
    if (v97 == v98)
    {
      v187 = __cxa_allocate_exception(0x20uLL);
      MEMORY[0x23B8012BC](v187, 1, &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory);
      __cxa_throw(v187, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
    }
    if (*(_DWORD *)v97 == 1)
      break;
    v97 += 64;
  }
  *(_OWORD *)v282 = v100;
  v283[0] = v97;
  LODWORD(v283[1]) = 1;
  LOBYTE(v283[2]) = 1;
  do
    v102 = __ldaxr(v38);
  while (__stlxr(v102 - 1, v38));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (!LOBYTE(v283[2]))
    goto LABEL_227;
  v103 = 0;
  if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v282, 0))
  {
    if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v282, 1)|| adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v282, 2)|| adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v282, 3))
    {
      goto LABEL_120;
    }
    v104 = (int *)v283[0];
    if (!v283[0])
    {
      v104 = *(int **)(*(_QWORD *)v282 + 8);
      if (*v104 != LODWORD(v283[1]))
      {
        v105 = v104 + 16;
        do
        {
          v106 = *v105;
          v105 += 16;
        }
        while (v106 != LODWORD(v283[1]));
        v104 = v105 - 16;
      }
      v283[0] = v104;
    }
    v108 = *((_QWORD *)v104 + 4);
    v107 = *((_QWORD *)v104 + 5);
    if (v108 == v107)
    {
LABEL_120:
      v103 = 0;
    }
    else
    {
      v109 = v108 + 48;
      do
      {
        v110 = *(_DWORD *)(v109 - 48);
        v103 = v110 == 0;
        if (v110)
          v111 = v109 == v107;
        else
          v111 = 1;
        v109 += 48;
      }
      while (!v111);
    }
  }
  if (LOBYTE(v283[2]))
  {
    v112 = *(std::__shared_weak_count **)&v282[8];
    if (*(_QWORD *)&v282[8])
    {
      v113 = (unint64_t *)(*(_QWORD *)&v282[8] + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
  }
  if (!v103)
  {
LABEL_227:
    v190 = get_adm_log_object();
    v183 = v213;
    if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v282 = 136315138;
      *(_QWORD *)&v282[4] = "downlink";
      _os_log_error_impl(&dword_236C84000, v190, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy list due to invalid configuration", v282, 0xCu);
    }
    *(_QWORD *)buf = 1;
    *(_QWORD *)&buf[8] = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    buf[24] = 0;
    goto LABEL_230;
  }
  *(_QWORD *)v282 = v216;
  *(_QWORD *)&v282[8] = v29;
  do
    v115 = __ldxr(v38);
  while (__stxr(v115 + 1, v38));
  LOBYTE(v284) = 0;
  v229 = 0u;
  memset(v283, 0, sizeof(v283));
  v116 = (int *)v29[1].__shared_owners_;
  v117 = (int *)v29[1].__shared_weak_owners_;
  if (v116 != v117)
  {
    v118 = 0;
    v229 = 0uLL;
    do
    {
      v119 = operator new();
      v120 = *v116;
      *(_QWORD *)v119 = off_25083E6F8;
      std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v119 + 8));
      *(_QWORD *)(v119 + 176) = 0;
      *(_QWORD *)(v119 + 184) = 0;
      *(_QWORD *)v119 = off_25083E500;
      v38 = v217;
      *(_QWORD *)(v119 + 200) = v216;
      *(_QWORD *)(v119 + 208) = v218;
      do
        v121 = __ldxr(v217);
      while (__stxr(v121 + 1, v217));
      *(_DWORD *)(v119 + 216) = v120;
      do
      {
        v122 = __ldaxr(&adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::ProxyImplementation(adm::vp::ImmutableConfiguration<adm::vp::DownlinkConfiguration> const&,adm::vp::DownlinkNodeConfiguration::Type)::gProxyID);
        v123 = v122 + 1;
      }
      while (__stlxr(v123, &adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::ProxyImplementation(adm::vp::ImmutableConfiguration<adm::vp::DownlinkConfiguration> const&,adm::vp::DownlinkNodeConfiguration::Type)::gProxyID));
      *(_DWORD *)(v119 + 192) = v123;
      *(_QWORD *)v119 = &off_25083E5C0;
      *(_DWORD *)(v119 + 220) = v120 != 0;
      *(_OWORD *)v224 = *(_OWORD *)v214;
      if (*(_QWORD *)(v214 + 8))
      {
        v124 = (unint64_t *)(*(_QWORD *)(v214 + 8) + 16);
        do
          v125 = __ldxr(v124);
        while (__stxr(v125 + 1, v124));
      }
      v126 = operator new();
      *(_QWORD *)v126 = &off_25083C698;
      *(_QWORD *)(v126 + 8) = 0;
      *(_QWORD *)(v126 + 16) = 0;
      *(_QWORD *)(v126 + 24) = v119;
      *(_OWORD *)(v126 + 32) = *(_OWORD *)v224;
      *(_QWORD *)&v127 = v119;
      *((_QWORD *)&v127 + 1) = v126;
      v128 = (_QWORD *)v229.i64[1];
      v129.i64[0] = v229.i64[0];
      if (v229.i64[1] >= v118)
      {
        v130 = (v229.i64[1] - v229.i64[0]) >> 4;
        v131 = v130 + 1;
        if ((unint64_t)(v130 + 1) >> 60)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        *(_OWORD *)v225 = v127;
        if ((uint64_t)(v118 - v229.i64[0]) >> 3 > v131)
          v131 = (uint64_t)(v118 - v229.i64[0]) >> 3;
        if (v118 - v229.i64[0] >= 0x7FFFFFFFFFFFFFF0)
          v132 = 0xFFFFFFFFFFFFFFFLL;
        else
          v132 = v131;
        if (v132 >> 60)
LABEL_224:
          std::__throw_bad_array_new_length[abi:ne180100]();
        v133 = (char *)operator new(16 * v132);
        v134 = v133;
        v135 = &v133[16 * v130];
        *(_OWORD *)v135 = *(_OWORD *)v225;
        if (v229.i64[1] == v229.i64[0])
        {
          v138 = vdupq_laneq_s64(v229, 1);
          v136 = &v133[16 * v130];
        }
        else
        {
          v136 = &v133[16 * v130];
          do
          {
            v137 = *((_OWORD *)v128 - 1);
            v128 -= 2;
            *((_OWORD *)v136 - 1) = v137;
            v136 -= 16;
            *v128 = 0;
            v128[1] = 0;
          }
          while (v128 != (_QWORD *)v229.i64[0]);
          v138 = v229;
        }
        v139 = v138.i64[1];
        v140 = v138.i64[0];
        v230 = (void *)v138.i64[0];
        while (v139 != v140)
          v139 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v139 - 16);
        if (v230)
          operator delete(v230);
        v141 = v135 + 16;
        v118 = (unint64_t)&v134[16 * v132];
        v129.i64[0] = (uint64_t)v136;
        v129.i64[1] = (uint64_t)v141;
        v38 = v217;
        v29 = v218;
      }
      else
      {
        *(_OWORD *)v229.i64[1] = v127;
        v129.i64[1] = v229.i64[1] + 16;
        v29 = v218;
      }
      v229 = v129;
      v142 = *(_OWORD *)(v129.i64[1] - 16);
      if (*((_QWORD *)&v142 + 1))
      {
        v143 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 16);
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      v145 = v283[1];
      if (v283[1] >= v283[2])
      {
        v147 = v283[0];
        v148 = ((char *)v283[1] - (char *)v283[0]) >> 4;
        v149 = v148 + 1;
        if ((unint64_t)(v148 + 1) >> 60)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        *(_OWORD *)v226 = v142;
        v150 = (char *)v283[2] - (char *)v283[0];
        if (((char *)v283[2] - (char *)v283[0]) >> 3 > v149)
          v149 = v150 >> 3;
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0)
          v151 = 0xFFFFFFFFFFFFFFFLL;
        else
          v151 = v149;
        if (v151 >> 60)
          goto LABEL_224;
        v152 = (char *)operator new(16 * v151);
        v153 = &v152[16 * v148];
        *(_OWORD *)v153 = *(_OWORD *)v226;
        v146 = v153 + 16;
        if (v145 == v147)
        {
          v283[0] = v153;
          v283[1] = v153 + 16;
          v283[2] = &v152[16 * v151];
          v29 = v218;
        }
        else
        {
          do
          {
            v154 = *((_OWORD *)v145 - 1);
            v145 -= 2;
            *((_OWORD *)v153 - 1) = v154;
            v153 -= 16;
            *v145 = 0;
            v145[1] = 0;
          }
          while (v145 != v147);
          v155 = v283[0];
          v145 = v283[1];
          v283[0] = v153;
          v283[1] = v146;
          v283[2] = &v152[16 * v151];
          v29 = v218;
          if (v145 != v155)
          {
            do
            {
              v156 = (std::__shared_weak_count *)*(v145 - 1);
              if (v156)
                std::__shared_weak_count::__release_weak(v156);
              v145 -= 2;
            }
            while (v145 != v155);
            v145 = v155;
          }
        }
        v38 = v217;
        if (v145)
          operator delete(v145);
      }
      else
      {
        *(_OWORD *)v283[1] = v142;
        v146 = v145 + 2;
      }
      v283[1] = v146;
      v116 += 16;
    }
    while (v116 != v117);
  }
  v157 = (void **)operator new(0x40uLL);
  v158 = *(_OWORD *)v282;
  v159 = *(_OWORD *)v283;
  memset(v282, 0, sizeof(v282));
  *((_OWORD *)v157 + 1) = v158;
  *((_OWORD *)v157 + 2) = v159;
  v157[6] = v283[2];
  memset(v283, 0, sizeof(v283));
  *((_BYTE *)v157 + 56) = (_BYTE)v284;
  v160 = *(_QWORD **)(v214 + 152);
  *v157 = v160;
  v157[1] = (void *)(v214 + 152);
  v160[1] = v157;
  *(_QWORD *)(v214 + 152) = v157;
  ++*(_QWORD *)(v214 + 168);
  adm::vp::detail::ProxyFactoryImplementation::createAndConfigureVoiceProcessor((adm::vp::detail::ProxyFactoryImplementation *)&v266, v214);
  v161 = v229.i64[1];
  if (!(_BYTE)v267)
  {
    v181 = get_adm_log_object();
    if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
    {
      v264[0] = 0;
      *(_QWORD *)&v264[8] = 0;
      std::to_json(v264, (const std::error_code *)&v266);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v264);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(buf, (uint64_t)v264, 4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v264);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v264[8], v264[0]);
      v186 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v264 = 136315394;
      *(_QWORD *)&v264[4] = "downlink";
      *(_WORD *)&v264[12] = 2080;
      *(_QWORD *)&v264[14] = v186;
      _os_log_error_impl(&dword_236C84000, v181, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy due to error: %s", v264, 0x16u);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    *(std::runtime_error *)buf = v266;
    buf[24] = 0;
    v162 = (void *)v229.i64[0];
    goto LABEL_206;
  }
  *(_QWORD *)v264 = v264;
  *(_QWORD *)&v264[8] = v264;
  *(_QWORD *)&v264[16] = 0;
  v162 = (void *)v229.i64[0];
  if (v229.i64[0] == v229.i64[1])
  {
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    v163 = &buf[16];
  }
  else
  {
    v163 = &v264[16];
    v164 = (uint64_t *)v229.i64[0];
    do
    {
      v165 = *v164;
      v166 = (std::__shared_weak_count *)v164[1];
      *(_OWORD *)v231 = 0u;
      if (v166)
      {
        v167 = (unint64_t *)&v166->__shared_owners_;
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
        *(_QWORD *)&v231[2] = v166;
        do
          v169 = __ldxr(v167);
        while (__stxr(v169 + 1, v167));
      }
      if (!v165)
      {
        v170 = get_adm_log_object();
        if (os_log_type_enabled(v170, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_236C84000, v170, OS_LOG_TYPE_FAULT, "Invalid VoiceProcessorProxy implementation provided", buf, 2u);
        }
      }
      v171 = operator new(0x20uLL);
      *((_QWORD *)&v172 + 1) = *(_QWORD *)&v231[2];
      *(_QWORD *)&v172 = v165;
      v171[1] = v172;
      v173 = *(_QWORD *)v264;
      *(_QWORD *)v171 = *(_QWORD *)v264;
      *((_QWORD *)v171 + 1) = v264;
      *(_QWORD *)(v173 + 8) = v171;
      *(_QWORD *)v264 = v171;
      ++*(_QWORD *)&v264[16];
      v38 = v217;
      if (v166)
      {
        v174 = (unint64_t *)&v166->__shared_owners_;
        do
          v175 = __ldaxr(v174);
        while (__stlxr(v175 - 1, v174));
        if (!v175)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      v164 += 2;
    }
    while (v164 != (uint64_t *)v161);
    v176 = *(_QWORD *)&v264[16];
    *(_QWORD *)buf = buf;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0;
    if (!*(_QWORD *)&v264[16])
      goto LABEL_205;
    v177 = *(_QWORD **)&v264[8];
    v178 = *(_QWORD *)v264;
    v179 = **(_QWORD **)&v264[8];
    *(_QWORD *)(v179 + 8) = *(_QWORD *)(*(_QWORD *)v264 + 8);
    **(_QWORD **)(v178 + 8) = v179;
    v180 = *(_QWORD *)buf;
    *(_QWORD *)(*(_QWORD *)buf + 8) = v177;
    *v177 = v180;
    *(_QWORD *)(v178 + 8) = buf;
    *(_QWORD *)buf = v178;
    *(_QWORD *)&buf[16] = v176;
  }
  *(_QWORD *)v163 = 0;
LABEL_205:
  buf[24] = 1;
  std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)v264);
  v29 = v218;
LABEL_206:
  if (v162)
  {
    while ((void *)v161 != v162)
    {
      v161 -= 16;
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v161);
    }
    operator delete(v162);
  }
  v266.__vftable = (std::runtime_error_vtbl *)v283;
  std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v266);
  v182 = *(std::__shared_weak_count **)&v282[8];
  v183 = v213;
  if (*(_QWORD *)&v282[8])
  {
    v184 = (unint64_t *)(*(_QWORD *)&v282[8] + 8);
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
      std::__shared_weak_count::__release_weak(v182);
    }
  }
LABEL_230:
  std::recursive_mutex::unlock(v183);
  if (buf[24])
  {
    v191 = *(_QWORD *)&buf[8];
    v232 = *(_OWORD *)(*(_QWORD *)&buf[8] + 16);
    *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = 0;
    *(_QWORD *)(v191 + 24) = 0;
    v233 = 1;
    if (buf[24])
      std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)buf);
  }
  else
  {
    *((_QWORD *)&v232 + 1) = *(_QWORD *)&buf[8];
    v233 = 0;
  }
  do
LABEL_234:
    v192 = __ldaxr(v38);
  while (__stlxr(v192 - 1, v38));
  if (!v192)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (!v242)
  {
    v209 = (char *)__cxa_allocate_exception(0x18uLL);
    v210 = v241;
    *(_QWORD *)v209 = &off_25083E2C0;
    *(_OWORD *)(v209 + 8) = v210;
  }
  v193 = (uint64_t *)*a2;
  adm::graph::Node::getIOFormats_((void **)buf, *a2, 0);
  adm::graph::Node::getIOFormats_((void **)&buf[24], (uint64_t)v193, 1u);
  adm::graph::Node::getInputSemantics((adm::graph::Node *)v274, v193[8], v193[9]);
  adm::graph::Node::getOutputSemantics((adm::graph::Node *)&v276, v193[11], v193[12]);
  *(_OWORD *)v282 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  *(_OWORD *)&v283[1] = *(_OWORD *)&buf[24];
  v283[0] = *(void **)&buf[16];
  v284 = (char *)imp;
  imp = 0;
  *(_OWORD *)v285 = *(_OWORD *)v274;
  v194 = v275;
  v274[1] = 0;
  v275 = 0;
  v274[0] = 0;
  v287 = v276;
  v286 = v194;
  v288 = v277;
  v276 = 0uLL;
  v277 = 0;
  v290 = 0;
  v289 = 0;
  v278 = 0;
  v279 = 0;
  v280 = 0;
  v291 = 0;
  memset(v292, 0, sizeof(v292));
  memset(v281, 0, sizeof(v281));
  v293 = v241;
  v241 = 0uLL;
  if (!adm::graph::isValid(v282))
  {
    v211 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v211, "failed to create kernel due to invalid configuration");
    __cxa_throw(v211, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v195 = operator new();
  adm::graph::DSPKernel::DSPKernel((adm::graph::DSPKernel *)v195);
  *(_QWORD *)v195 = &off_25083E018;
  v196 = v293;
  *(_OWORD *)(v195 + 160) = v293;
  *(_QWORD *)(v195 + 24) = &unk_25083E190;
  v293 = 0uLL;
  *(_BYTE *)(v195 + 176) = 0;
  *(_BYTE *)(v195 + 184) = 0;
  *(_BYTE *)(v195 + 192) = 0;
  *(_BYTE *)(v195 + 200) = 0;
  Configuration = adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>::getConfiguration(v196);
  if (*((_BYTE *)Configuration + 60))
    v198 = Configuration[14];
  else
    v198 = 4096;
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v195 + 192))(v195, v282, v198);
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(_QWORD *)v195 + 200))(v195, v282, v198);
  *(_QWORD *)v264 = v195;
  v199 = v193 + 17;
  std::shared_ptr<adm::graph::Kernel>::operator=[abi:ne180100]<adm::graph::Kernel,std::default_delete<adm::graph::Kernel>,void>(v193 + 17, (uint64_t *)v264);
  v200 = *(_QWORD *)v264;
  *(_QWORD *)v264 = 0;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  v201 = (std::__shared_weak_count *)*((_QWORD *)&v293 + 1);
  if (*((_QWORD *)&v293 + 1))
  {
    v202 = (unint64_t *)(*((_QWORD *)&v293 + 1) + 8);
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v266.__vftable = (std::runtime_error_vtbl *)v292;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v266);
  if (v289)
  {
    v290 = v289;
    operator delete(v289);
  }
  if ((_QWORD)v287)
  {
    *((_QWORD *)&v287 + 1) = v287;
    operator delete((void *)v287);
  }
  if (v285[0])
  {
    v285[1] = v285[0];
    operator delete(v285[0]);
  }
  if (v283[1])
  {
    v283[2] = v283[1];
    operator delete(v283[1]);
  }
  if (*(_QWORD *)v282)
  {
    *(_QWORD *)&v282[8] = *(_QWORD *)v282;
    operator delete(*(void **)v282);
  }
  v266.__vftable = (std::runtime_error_vtbl *)v281;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v266);
  if (v278)
  {
    v279 = v278;
    operator delete(v278);
  }
  if ((_QWORD)v276)
  {
    *((_QWORD *)&v276 + 1) = v276;
    operator delete((void *)v276);
  }
  if (v274[0])
  {
    v274[1] = v274[0];
    operator delete(v274[0]);
  }
  if (*(_QWORD *)&buf[24])
  {
    *(_QWORD *)&buf[32] = *(_QWORD *)&buf[24];
    operator delete(*(void **)&buf[24]);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (*v199)
    adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::operator=((unint64_t *)(*v199 + 8), (unint64_t)(v193 + 16));
  if (v233)
  {
    if (*((_QWORD *)&v232 + 1))
    {
      v204 = (unint64_t *)(*((_QWORD *)&v232 + 1) + 8);
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v232 + 1) + 16))(*((_QWORD *)&v232 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v232 + 1));
      }
    }
  }
  if (v237)
  {
    v238 = v237;
    operator delete(v237);
  }
  *(_QWORD *)v282 = v235;
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)v282);
  if (v242)
  {
    v206 = (std::__shared_weak_count *)*((_QWORD *)&v241 + 1);
    if (*((_QWORD *)&v241 + 1))
    {
      v207 = (unint64_t *)(*((_QWORD *)&v241 + 1) + 8);
      do
        v208 = __ldaxr(v207);
      while (__stlxr(v208 - 1, v207));
      if (!v208)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
  }
}

void sub_236C8E12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  void *v47;
  int v48;

  __cxa_free_exception(v47);
  adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration((uint64_t)&STACK[0x2F0]);
  adm::graph::KernelConfiguration::~KernelConfiguration((adm::graph::KernelConfiguration *)&STACK[0x260]);
  if (a37)
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  adm::vp::DownlinkConfiguration::~DownlinkConfiguration((adm::vp::DownlinkConfiguration *)&a39);
  if (v48)
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_236C8E13C()
{
  if (STACK[0x200])
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x200] + 8))(STACK[0x200]);
  adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration(&STACK[0x2F0]);
  adm::graph::KernelConfiguration::~KernelConfiguration((adm::graph::KernelConfiguration *)&STACK[0x260]);
  JUMPOUT(0x236C8E310);
}

void sub_236C8E158()
{
  uint64_t v0;

  MEMORY[0x23B801508](v0, 0x10A3C4097AC226DLL);
  JUMPOUT(0x236C8E2F8);
}

void sub_236C8E160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  int v47;
  void *v48;
  void *v49;
  void *v50;

  v48 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v48;
    operator delete(v48);
  }
  v49 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v49;
    operator delete(v49);
  }
  v50 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v50;
    operator delete(v50);
  }
  if (a37)
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  adm::vp::DownlinkConfiguration::~DownlinkConfiguration((adm::vp::DownlinkConfiguration *)&a39);
  if (v47)
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a47);
  JUMPOUT(0x236C8E620);
}

void sub_236C8E1A8(_Unwind_Exception *a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    STACK[0x2F0] = v2;
    std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
    JUMPOUT(0x236C8E418);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E1BC()
{
  uint64_t v0;
  void **v1;
  void *v2;

  v2 = *v1;
  if (*v1)
  {
    *(_QWORD *)(v0 + 16) = v2;
    operator delete(v2);
  }
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x260]);
  adm::vp::DownlinkNodeConfiguration::~DownlinkNodeConfiguration((adm::vp::DownlinkNodeConfiguration *)&STACK[0x2F0]);
  JUMPOUT(0x236C8E328);
}

void sub_236C8E1FC()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x236C8E328);
}

void sub_236C8E20C()
{
  JUMPOUT(0x236C8E328);
}

void sub_236C8E214(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x236C8E220);
  _Unwind_Resume(a1);
}

void sub_236C8E24C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x236C8E258);
  _Unwind_Resume(a1);
}

void sub_236C8E27C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&STACK[0x2F0]);
    JUMPOUT(0x236C8E418);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E288(_Unwind_Exception *a1, int a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;

  if (a2)
  {
    std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__shared_weak_count::~__shared_weak_count(v2);
    JUMPOUT(0x236C8E6D4);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E294(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_236C8E2A0()
{
  adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration(&STACK[0x2F0]);
  adm::graph::KernelConfiguration::~KernelConfiguration((adm::graph::KernelConfiguration *)&STACK[0x260]);
  JUMPOUT(0x236C8E310);
}

void sub_236C8E2A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  if (a2)
  {
    operator delete(v11);
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&STACK[0x200]);
    *(_QWORD *)(a11 + 8) = a9;
    JUMPOUT(0x236C8E6C8);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E2BC()
{
  adm::graph::DSPKernel *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](v3);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v1);
  adm::graph::DSPKernel::~DSPKernel(v0);
  JUMPOUT(0x236C8E2E0);
}

void sub_236C8E33C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a61);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a22, 6);
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&STACK[0x200]);
    *(_QWORD *)(a11 + 8) = a9;
    JUMPOUT(0x236C8E6C8);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E358(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  int v63;

  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a63);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a23, v63);
    JUMPOUT(0x236C8E6B4);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E374(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  _QWORD *v21;

  if (!a2)
    _Unwind_Resume(a1);
  while (v21 != v20)
  {
    v21 -= 8;
    std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(v21);
  }
  *(_QWORD *)(a20 + 40) = v20;
  JUMPOUT(0x236C8E3B8);
}

void sub_236C8E3C8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  _QWORD *v32;

  if (!a2)
    _Unwind_Resume(a1);
  while (v32 != v31)
  {
    v32 -= 8;
    std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(v32);
  }
  *(_QWORD *)(a31 + 40) = v31;
  JUMPOUT(0x236C8E40CLL);
}

void sub_236C8E420(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x260]);
    JUMPOUT(0x236C8E440);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E448(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x2F0] + i + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x2F0] + i + 40), *((unsigned __int8 *)&STACK[0x2F0] + i + 32));
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x220] + j + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x220] + j + 40), *((unsigned __int8 *)&STACK[0x220] + j + 32));
    }
    for (k = 0; k != -64; k -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x260] + k + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x260] + k + 40), *((unsigned __int8 *)&STACK[0x260] + k + 32));
    }
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&STACK[0x200]);
    *(_QWORD *)(a11 + 8) = a9;
    JUMPOUT(0x236C8E6C8);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E57C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unint64_t *a31)
{
  uint64_t i;
  uint64_t j;
  unint64_t *v33;
  unint64_t *v34;
  int v35;
  BOOL v36;

  if (a2)
  {
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x220] + i + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x220] + i + 40), *((unsigned __int8 *)&STACK[0x220] + i + 32));
    }
    for (j = 0; j != -64; j -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x260] + j + 32);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&STACK[0x260] + j + 40), *((unsigned __int8 *)&STACK[0x260] + j + 32));
    }
    if (&STACK[0x2F0] != a31)
    {
      v33 = a31 - 4;
      v34 = a31 - 4;
      do
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
        v35 = *(unsigned __int8 *)v34;
        v34 -= 4;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)v33 + 1, v35);
        v36 = v33 == &STACK[0x2F0];
        v33 = v34;
      }
      while (!v36);
    }
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&STACK[0x200]);
    *(_QWORD *)(a11 + 8) = a9;
    JUMPOUT(0x236C8E6C8);
  }
  _Unwind_Resume(a1);
}

void sub_236C8E5F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x236C8E64CLL);
}

void sub_236C8E60C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x236C8E64CLL);
}

void sub_236C8E618(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2)
    JUMPOUT(0x236C8E620);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100](&STACK[0x200]);
  *(_QWORD *)(a11 + 8) = a9;
  JUMPOUT(0x236C8E6C8);
}

void sub_236C8E628(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&STACK[0x220]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&STACK[0x228], LOBYTE(STACK[0x220]));
    JUMPOUT(0x236C8E648);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 72) = &unk_25083ED90;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 32) = &unk_25083EE08;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &off_25083C138;
  *(_QWORD *)(a1 + 32) = &unk_25083C170;
  *(_QWORD *)(a1 + 72) = &unk_25083C1A8;
  boost::exception_detail::copy_boost_exception(a1 + 32, a2 + 32);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 72) = &unk_25083ED90;
  v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = &unk_25083EE08;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &off_25083C138;
  *(_QWORD *)(a1 + 32) = &unk_25083C170;
  *(_QWORD *)(a1 + 72) = &unk_25083C1A8;
  return a1;
}

void sub_236C8E7A0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

char **applesauce::backtrace::snapshot_N<64>::snapshot_N(char **a1)
{
  void **v2;
  int v3;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = (void **)operator new(0x200uLL);
  a1[2] = (char *)(v2 + 64);
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 28) = 0u;
  *((_OWORD *)v2 + 29) = 0u;
  *((_OWORD *)v2 + 30) = 0u;
  *((_OWORD *)v2 + 31) = 0u;
  *a1 = (char *)v2;
  a1[1] = (char *)(v2 + 64);
  v3 = backtrace(v2, 64);
  v4 = v3;
  v5 = *a1;
  v6 = a1[1];
  v7 = (v6 - *a1) >> 3;
  if (v3 <= v7)
  {
    if (v3 >= v7)
      return a1;
    v20 = &v5[8 * v3];
LABEL_17:
    a1[1] = v20;
    return a1;
  }
  v8 = v3 - v7;
  v9 = a1[2];
  if (v8 <= (v9 - v6) >> 3)
  {
    bzero(a1[1], 8 * v8);
    v20 = &v6[8 * v8];
    goto LABEL_17;
  }
  if (v3 < 0)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v10 = v9 - v5;
  if (v10 >> 2 > (unint64_t)v3)
    v4 = v10 >> 2;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
    v11 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v11 = v4;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
  v13 = &v12[8 * v7];
  v15 = &v12[8 * v14];
  bzero(v13, 8 * v8);
  v16 = &v13[8 * v8];
  v18 = *a1;
  v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    v17 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
    operator delete(v17);
  return a1;
}

uint64_t boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;

  v4 = operator new();
  *(_QWORD *)v4 = off_25083F080;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(&v14, v4);
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    v5 = operator new();
    v6 = &off_25083F148;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &off_25083F148;
    *(_QWORD *)(v5 + 8) = v5 + 16;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v6 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v5;
    }
    *(_QWORD *)(a1 + 40) = v5;
    ((void (*)(uint64_t))v6[3])(v5);
  }
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    v8 = v15 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v5 + 16))(v5, &v12, &v11);
  boost::detail::shared_count::~shared_count(&v13);
  boost::detail::shared_count::~shared_count(&v15);
  return a1;
}

void sub_236C8EA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
  unsigned int **v14;

  boost::detail::shared_count::~shared_count(v14);
  boost::detail::shared_count::~shared_count(&a14);
  _Unwind_Resume(a1);
}

void sub_236C8EB3C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x23B801508);
}

void std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void adm::vp::DownlinkNodeConfiguration::~DownlinkNodeConfiguration(adm::vp::DownlinkNodeConfiguration *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void adm::vp::DownlinkConfiguration::~DownlinkConfiguration(adm::vp::DownlinkConfiguration *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void caulk::bad_expected_access<std::error_code>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B801508);
}

void std::__destroy_at[abi:ne180100]<adm::vp::DownlinkNodeConfiguration,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

_OWORD *std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::InputType,CA::StreamDescription>*>(_OWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _QWORD *v5;
  __int128 v8;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x555555555555556)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = operator new(48 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    while (a2 != a3)
    {
      v8 = a2[1];
      *result = *a2;
      result[1] = v8;
      result[2] = a2[2];
      a2 += 3;
      result += 3;
    }
    v5[1] = result;
  }
  return result;
}

void sub_236C8ED80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::vector<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::DownlinkNodeConfiguration::OutputType,CA::StreamDescription>*>(_OWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _QWORD *v5;
  __int128 v8;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x555555555555556)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = operator new(48 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[3 * a4];
    while (a2 != a3)
    {
      v8 = a2[1];
      *result = *a2;
      result[1] = v8;
      result[2] = a2[2];
      a2 += 3;
      result += 3;
    }
    v5[1] = result;
  }
  return result;
}

void sub_236C8EE30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone(uint64_t a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &unk_25083ED90;
  v3 = std::runtime_error::runtime_error((std::runtime_error *)v2, (const std::runtime_error *)a1);
  v3->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB818] + 16);
  v3[1] = *(std::runtime_error *)(a1 + 16);
  v3[2].__vftable = (std::runtime_error_vtbl *)&unk_25083EE08;
  v4 = (uint64_t)&v3[2];
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &off_25083C138;
  *(_QWORD *)(v2 + 32) = &unk_25083C170;
  *(_QWORD *)(v2 + 72) = &unk_25083C1A8;
  boost::exception_detail::copy_boost_exception(v4, a1 + 32);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_236C8EFB8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  MEMORY[0x23B801508]();
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_236C8F030(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(a1 - 32);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 4) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_236C8F1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

_QWORD *boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v7;

  *a1 = a2;
  a1[1] = 0;
  v4 = (_QWORD *)operator new();
  v4[1] = 0x100000001;
  *v4 = &off_25083F0D8;
  v4[2] = a2;
  v5 = (unsigned int *)a1[1];
  a1[1] = v4;
  v7 = v5;
  boost::detail::shared_count::~shared_count(&v7);
  return a1;
}

void sub_236C8F29C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  __cxa_rethrow();
}

void sub_236C8F2BC(_Unwind_Exception *a1)
{
  unsigned int **v1;

  __cxa_end_catch();
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::~shared_count(unsigned int **this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v1 = *this;
  if (*this)
  {
    v2 = v1 + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
      v5 = v1 + 3;
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
    }
  }
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information(boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  size_t v4;
  boost::exception_detail::error_info_container_impl *v5;
  void (***v6)(void **__return_ptr);
  void **v7;
  uint64_t v8;
  boost::exception_detail::error_info_container_impl *v9;
  boost::exception_detail::error_info_container_impl *v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;
  uint64_t result;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  if (a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
    v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)a2, v4);
    v5 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)this + 1);
    if (v5 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        v6 = (void (***)(void **__return_ptr))*((_QWORD *)v5 + 5);
        if (!v6)
          __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
        (**v6)(__p);
        if (v16 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        if (v16 >= 0)
          v8 = HIBYTE(v16);
        else
          v8 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v8);
        if (SHIBYTE(v16) < 0)
          operator delete(__p[0]);
        v9 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v5 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(boost::exception_detail::error_info_container_impl **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v5 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v5;
            v5 = v10;
          }
          while (!v11);
        }
        v5 = v10;
      }
      while (v10 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v18);
    v12 = v16;
    v13 = *(_OWORD *)__p;
    *(_OWORD *)__p = *((_OWORD *)this + 2);
    v16 = *((_QWORD *)this + 6);
    *((_OWORD *)this + 2) = v13;
    *((_QWORD *)this + 6) = v12;
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
    v17 = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v18[0] = MEMORY[0x24BEDB848] + 16;
    if (v19 < 0)
      operator delete((void *)v18[8]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x23B801478](&v20);
  }
  result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_236C8F518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::error_info_container_impl::get@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v4 = (_QWORD *)(result + 16);
  v5 = *(_QWORD **)(result + 16);
  if (!v5)
    goto LABEL_12;
  v6 = *a2;
  v7 = (_QWORD *)(result + 16);
  do
  {
    v8 = v5[4];
    if (v8 == v6)
    {
      v7 = v5;
    }
    else
    {
      result = strcmp((const char *)(*(_QWORD *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL));
      if ((int)result < 0)
        ++v5;
      else
        v7 = v5;
    }
    v5 = (_QWORD *)*v5;
  }
  while (v5);
  if (v4 != v7
    && ((v9 = v7[4], v6 == v9)
     || (result = strcmp((const char *)(*(_QWORD *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL)), (result & 0x80000000) == 0)))
  {
    v10 = v7[6];
    *a3 = v7[5];
    a3[1] = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void boost::exception_detail::error_info_container_impl::set(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t v18;

  if (!*a2)
    __assert_rtn("set", "info.hpp", 77, "x");
  v6 = (uint64_t **)(a1 + 8);
  v7 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(a1 + 8, &v18, *a3);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v8 = (uint64_t *)operator new(0x38uLL);
    *((_QWORD *)&v16 + 1) = a1 + 16;
    v10 = *a3;
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = v10;
    v17 = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v6, v18, v9, v8);
    *(_QWORD *)&v16 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v16);
  }
  v12 = *a2;
  v11 = a2[1];
  if (v11)
  {
    v13 = (unsigned int *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_OWORD *)(v8 + 5);
  v8[5] = v12;
  v8[6] = v11;
  v16 = v15;
  boost::detail::shared_count::~shared_count((unsigned int **)&v16 + 1);
  if (*(char *)(a1 + 55) < 0)
  {
    **(_BYTE **)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 55) = 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  ++*(_DWORD *)(this + 56);
  return this;
}

BOOL boost::exception_detail::error_info_container_impl::release(boost::exception_detail::error_info_container_impl *this)
{
  int v1;

  v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    if (*((char *)this + 55) < 0)
      operator delete(*((void **)this + 4));
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*((unsigned int ***)this + 2));
    MEMORY[0x23B801508](this, 0x10B3C409A6CECE4);
  }
  return v1 == 0;
}

void boost::exception_detail::error_info_container_impl::clone(boost::exception_detail::error_info_container_impl *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t **v6;
  boost::exception_detail::error_info_container_impl *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t **v15;
  uint64_t **v16;
  char *v17;
  boost::exception_detail::error_info_container_impl *v18;
  boost::exception_detail::error_info_container_impl *v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;
  unsigned int *v23[2];
  char v24;
  uint64_t v25;

  *a2 = 0;
  v4 = operator new();
  *(_QWORD *)v4 = &off_25083F148;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = (unsigned int *)(v4 + 16);
  *(_QWORD *)(v4 + 8) = v4 + 16;
  v6 = (uint64_t **)(v4 + 8);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *a2 = v4;
  *(_DWORD *)(v4 + 56) = 1;
  v7 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)this + 1);
  if (v7 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
  {
    do
    {
      v8 = *((_QWORD *)v7 + 5);
      if (!v8)
        __assert_rtn("operator->", "shared_ptr.hpp", 786, "px != 0");
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v22 = (unint64_t)v9;
      v23[0] = 0;
      v10 = (_QWORD *)operator new();
      v10[1] = 0x100000001;
      *v10 = &off_25083F1B0;
      v10[2] = v9;
      v11 = (unsigned int *)*((_QWORD *)&v22 + 1);
      *((_QWORD *)&v22 + 1) = v10;
      v23[0] = v11;
      boost::detail::shared_count::~shared_count(v23);
      v12 = *((_QWORD *)v7 + 4);
      v21 = v22;
      if (*((_QWORD *)&v22 + 1))
      {
        v13 = (unsigned int *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>((uint64_t)v6, &v25, v12);
      if (!*v15)
      {
        v16 = v15;
        v17 = (char *)operator new(0x38uLL);
        v23[1] = v5;
        *((_QWORD *)v17 + 4) = v12;
        *(_OWORD *)(v17 + 40) = v21;
        v21 = 0uLL;
        v24 = 1;
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v6, v25, v16, (uint64_t *)v17);
        v23[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
      }
      boost::detail::shared_count::~shared_count((unsigned int **)&v21 + 1);
      boost::detail::shared_count::~shared_count((unsigned int **)&v22 + 1);
      v18 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v7 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(boost::exception_detail::error_info_container_impl **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (boost::exception_detail::error_info_container_impl *)*((_QWORD *)v7 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v7;
          v7 = v19;
        }
        while (!v20);
      }
      v7 = v19;
    }
    while (v19 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
  }
}

void sub_236C8F9D0()
{
  __break(1u);
}

void sub_236C8FA10()
{
  __cxa_end_catch();
  JUMPOUT(0x236C8FA18);
}

_QWORD *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v7 = v5[4];
    if (v7 != a3)
    {
      v8 = (const char *)(*(_QWORD *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        v9 = (const char *)(*(_QWORD *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          v10 = (_QWORD *)*v5;
          v4 = v5;
          if (!*v5)
            break;
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0)
            break;
          v4 = v5 + 1;
          v10 = (_QWORD *)v5[1];
          if (!v10)
            break;
        }
        v7 = v10[4];
        v5 = v10;
      }
      while (v7 != a3);
    }
  }
  else
  {
    v5 = (_QWORD *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unsigned int **v1;

  v1 = *(unsigned int ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      boost::detail::shared_count::~shared_count(v1 + 6);
    operator delete(v1);
  }
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::~sp_counted_impl_p()
{
  JUMPOUT(0x23B801508);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_untyped_deleter()
{
  return 0;
}

void std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(unsigned int **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*a1);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(a1[1]);
    boost::detail::shared_count::~shared_count(a1 + 6);
    operator delete(a1);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_236C8FC90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x23B801478](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int64_t v16;
  std::locale *v17;
  uint64_t v18;
  _BYTE v20[16];
  std::locale __b;
  char v22;

  MEMORY[0x23B8012EC](v20, a1);
  if (v20[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_23;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(_QWORD *)v7 + 96))(v7, v17, v16);
      if (v22 < 0)
        operator delete(__b.__locale_);
      if (v18 != v16)
        goto LABEL_23;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x23B8012F8](v20);
  return a1;
}

void sub_236C8FE7C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x23B8012F8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x236C8FE58);
}

void sub_236C8FEDC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(_QWORD *__dst, uint64_t a2)
{
  _QWORD *v2;
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = __dst;
  v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a2 + 88);
    v6 = *(_QWORD *)(a2 + 48);
    if (v5 < v6)
    {
      *(_QWORD *)(a2 + 88) = v6;
      v5 = v6;
    }
    v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      *((_BYTE *)__dst + 23) = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 32);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *v2 = v11;
    v2 = v11;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    if (!v4)
      goto LABEL_16;
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((_BYTE *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B801478](a1 + 112);
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::~sp_counted_impl_p()
{
  JUMPOUT(0x23B801508);
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_untyped_deleter()
{
  return 0;
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::name_value_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string::const_iterator v5;
  std::string *v6;
  __int128 v7;
  void *const *v8;
  unint64_t v9;
  unint64_t v10;
  char **v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  BOOL v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  void *v22;
  std::string *p_p;
  char *v24;
  char *v25;
  int data;
  char *dli_sname;
  _BYTE *dli_saddr;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type size;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  void **v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  void *__dst[2];
  unsigned __int8 v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  void *v51;
  _QWORD v52[10];
  char v53;
  uint64_t v54;
  std::string v55;
  std::string v56;
  std::string status;
  std::string outlen;
  std::string __p;
  __int128 v60;
  int64_t v61;
  char v62;
  Dl_info v63;
  __int128 v64;
  int64_t v65;
  char __str[64];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v51, (const char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL));
  if (v51)
    v4 = (char *)v51;
  else
    v4 = (char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL);
  std::string::basic_string[abi:ne180100]<0>(&v47, v4);
  free(v51);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v47;
  else
    v5.__i_ = (std::__wrap_iter<const char *>::iterator_type)v47.__r_.__value_.__r.__words[0];
  std::string::insert(&v47, v5, 91);
  v48 = v47;
  memset(&v47, 0, sizeof(v47));
  v6 = std::string::append(&v48, "] = ", 4uLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v51);
  memset(&v55, 0, sizeof(v55));
  v8 = *(void *const **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16) - (_QWORD)v8;
  v10 = v9 >> 3;
  v11 = backtrace_symbols(v8, v9 >> 3);
  if ((int)(v9 >> 3) < 1)
    goto LABEL_69;
  v12 = 0;
  v13 = (v9 >> 3);
  do
  {
    v14 = *(const void **)(*(_QWORD *)(a1 + 8) + 8 * v12);
    snprintf(__str, 0x40uLL, "%-3d\t%*p\t", v12, 18, v14);
    v15 = strlen(__str);
    std::string::append(&v55, __str, v15);
    memset(&v63, 0, sizeof(v63));
    if (dladdr(v14, &v63))
      v16 = v63.dli_sname == 0;
    else
      v16 = 1;
    if (!v16)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v63.dli_sname);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      outlen.__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v24 = __cxa_demangle((const char *)p_p, 0, (size_t *)&outlen, (int *)&status);
      v25 = v24;
      data = (int)status.__r_.__value_.__l.__data_;
      if (LODWORD(status.__r_.__value_.__l.__data_))
      {
        LOBYTE(v60) = 0;
        v62 = 0;
        if (!v24)
          goto LABEL_30;
      }
      else
      {
        std::string::basic_string[abi:ne180100](&v64, v24, outlen.__r_.__value_.__r.__words[0] - 1);
        v60 = v64;
        v61 = v65;
        v62 = 1;
        if (!v25)
        {
LABEL_30:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (data)
            {
LABEL_32:
              dli_sname = (char *)v63.dli_sname;
              if (!v63.dli_sname)
                dli_sname = v11[v12];
LABEL_40:
              dli_saddr = v63.dli_saddr;
              std::string::basic_string[abi:ne180100]<0>(&status, dli_sname);
              v29 = std::string::append(&status, " + ", 3uLL);
              v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
              outlen.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
              *(_OWORD *)&outlen.__r_.__value_.__l.__data_ = v30;
              v29->__r_.__value_.__l.__size_ = 0;
              v29->__r_.__value_.__r.__words[2] = 0;
              v29->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v56, (_BYTE *)v14 - dli_saddr);
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v31 = &v56;
              else
                v31 = (std::string *)v56.__r_.__value_.__r.__words[0];
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
              else
                size = v56.__r_.__value_.__l.__size_;
              v33 = std::string::append(&outlen, (const std::string::value_type *)v31, size);
              v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v34;
              v33->__r_.__value_.__l.__size_ = 0;
              v33->__r_.__value_.__r.__words[2] = 0;
              v33->__r_.__value_.__r.__words[0] = 0;
              v35 = std::string::append(&__p, "\n", 1uLL);
              v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
              v65 = v35->__r_.__value_.__r.__words[2];
              v64 = v36;
              v35->__r_.__value_.__l.__size_ = 0;
              v35->__r_.__value_.__r.__words[2] = 0;
              v35->__r_.__value_.__r.__words[0] = 0;
              if (v65 >= 0)
                v37 = (const std::string::value_type *)&v64;
              else
                v37 = (const std::string::value_type *)v64;
              if (v65 >= 0)
                v38 = HIBYTE(v65);
              else
                v38 = *((_QWORD *)&v64 + 1);
              std::string::append(&v55, v37, v38);
              if (SHIBYTE(v65) < 0)
                operator delete((void *)v64);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v56.__r_.__value_.__l.__data_);
              if (SHIBYTE(outlen.__r_.__value_.__r.__words[2]) < 0)
                operator delete(outlen.__r_.__value_.__l.__data_);
              if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0)
                operator delete(status.__r_.__value_.__l.__data_);
              if (!data && SHIBYTE(v61) < 0)
              {
                v22 = (void *)v60;
                goto LABEL_65;
              }
              goto LABEL_66;
            }
          }
          else if (data)
          {
            goto LABEL_32;
          }
          if (v61 >= 0)
            dli_sname = (char *)&v60;
          else
            dli_sname = (char *)v60;
          goto LABEL_40;
        }
      }
      free(v25);
      goto LABEL_30;
    }
    v17 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v64, v11[v12]);
    v18 = std::string::append(v17, "\n", 1uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v61 = v18->__r_.__value_.__r.__words[2];
    v60 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0)
      v20 = (const std::string::value_type *)&v60;
    else
      v20 = (const std::string::value_type *)v60;
    if (v61 >= 0)
      v21 = HIBYTE(v61);
    else
      v21 = *((_QWORD *)&v60 + 1);
    std::string::append(&v55, v20, v21);
    if (SHIBYTE(v61) < 0)
      operator delete((void *)v60);
    if (SHIBYTE(v65) < 0)
    {
      v22 = (void *)v64;
LABEL_65:
      operator delete(v22);
    }
LABEL_66:
    ++v12;
  }
  while (v13 != v12);
  if ((_DWORD)v10 == 64)
    std::string::append(&v55, "[truncated?]\n", 0xDuLL);
LABEL_69:
  if (v11)
    free(v11);
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v55;
  else
    v39 = (std::string *)v55.__r_.__value_.__r.__words[0];
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  else
    v40 = v55.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)v39, v40);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v52);
  v51 = (void *)*MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v52[-1] + *((_QWORD *)v51 - 3)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v52[0] = MEMORY[0x24BEDB848] + 16;
  if (v53 < 0)
    operator delete((void *)v52[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B801478](&v54);
  if ((v46 & 0x80u) == 0)
    v41 = __dst;
  else
    v41 = (void **)__dst[0];
  if ((v46 & 0x80u) == 0)
    v42 = v46;
  else
    v42 = (std::string::size_type)__dst[1];
  v43 = std::string::append(&v49, (const std::string::value_type *)v41, v42);
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v50, 10);
  *a2 = v50;
  memset(&v50, 0, sizeof(v50));
  if ((char)v46 < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
}

void sub_236C906D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a39 < 0)
    operator delete(a34);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

_QWORD *boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::clone(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  uint64_t v7;

  v2 = (_QWORD *)operator new();
  *v2 = off_25083F080;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    v2[1] = v6;
    v2[2] = v6;
    v2[3] = &v6[8 * v7];
    memmove(v6, v4, v5);
    v2[2] = &v6[8 * (v5 >> 3)];
  }
  return v2;
}

void sub_236C908B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B801508](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

_QWORD *boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(_QWORD *a1)
{
  void *v2;

  *a1 = off_25083F080;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(_QWORD *a1)
{
  void *v2;

  *a1 = off_25083F080;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B801508);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

boost::core::scoped_demangled_name *boost::core::scoped_demangled_name::scoped_demangled_name(boost::core::scoped_demangled_name *this, const char *lpmangled)
{
  size_t v4;
  int status;

  status = 0;
  v4 = 0;
  *(_QWORD *)this = __cxa_demangle(lpmangled, 0, &v4, &status);
  return this;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 32) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 32) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x23B801508);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(a1 - 32);
}

void adm::graph::NodeManager::createNode(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const adm::graph::TerminalDescription *v19;
  const adm::graph::TerminalDescription *v20;
  adm::graph::Node *v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void **v27[3];
  int64x2_t v28;
  char *v29;
  std::string v30;
  uint64_t v31;
  void *__p;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
    goto LABEL_19;
  adm::graph::Node::getDescription(&v30, v10);
  v28.i64[0] = (uint64_t)&v30;
  v28.i64[1] = (uint64_t)&v31;
  v29 = (char *)&v31 + 4;
  v27[0] = a3;
  v27[1] = a3 + 3;
  v27[2] = (void **)((char *)a3 + 28);
  if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>((const void ***)&v28, (unsigned __int8 ***)v27))goto LABEL_9;
  adm::graph::Node::getTerminalDescriptions(&v28, *v11);
  v13 = v28.i64[1];
  v12 = (unsigned __int8 *)v28.i64[0];
  v14 = *(unsigned __int8 **)a4;
  if (v28.i64[1] - v28.i64[0] != *(_QWORD *)(a4 + 8) - *(_QWORD *)a4)
  {
    v27[0] = (void **)&v28;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](v27);
LABEL_9:
    v15 = 0;
    goto LABEL_10;
  }
  if (v28.i64[0] == v28.i64[1])
  {
    v27[0] = (void **)&v28;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](v27);
    v15 = 1;
  }
  else
  {
    do
    {
      v15 = std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(v12, v14);
      if (!v15)
        break;
      v12 += 136;
      v14 += 136;
    }
    while (v12 != (unsigned __int8 *)v13);
    v27[0] = (void **)&v28;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](v27);
  }
LABEL_10:
  if (v33 < 0)
    operator delete(__p);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    if (v15)
    {
LABEL_14:
      v16 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      goto LABEL_31;
    }
  }
  else if (v15)
  {
    goto LABEL_14;
  }
LABEL_19:
  std::shared_ptr<adm::graph::DSPNode>::reset[abi:ne180100](v11);
  adm::graph::DSPNode::create((uint64_t *)&v30, (uint64_t)a3);
  v20 = *(const adm::graph::TerminalDescription **)a4;
  v19 = *(const adm::graph::TerminalDescription **)(a4 + 8);
  v21 = (adm::graph::Node *)v30.__r_.__value_.__r.__words[0];
  while (v20 != v19)
  {
    adm::graph::Node::vendTerminal(v21, v20);
    v20 = (const adm::graph::TerminalDescription *)((char *)v20 + 136);
  }
  size = (std::__shared_weak_count *)v30.__r_.__value_.__l.__size_;
  v28.i64[0] = (uint64_t)v21;
  v28.i64[1] = v30.__r_.__value_.__l.__size_;
  if (v30.__r_.__value_.__l.__size_)
  {
    v23 = (unint64_t *)(v30.__r_.__value_.__l.__size_ + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  adm::graph::NodeManager::configureNode<adm::vp::UplinkConfiguration>((uint64_t **)a2, v28.i64, a5);
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::shared_ptr<adm::graph::DSPNode>::operator=[abi:ne180100](v11, (uint64_t)v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  *(_OWORD *)a1 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
LABEL_31:
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_236C90D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  void *v29;
  NSObject *adm_log_object;
  void *v31;
  NSObject *v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;

  if (a2)
  {
    if (a26 < 0)
      operator delete(__p);
    if (a19 < 0)
      operator delete((void *)buf);
    if (a2 == 3)
    {
      v29 = __cxa_begin_catch(exception_object);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v34;
        _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)&buf, 0xCu);
      }
      *(_QWORD *)v26 = 1685287015;
      *(_BYTE *)(v26 + 16) = 0;
      __cxa_end_catch();
    }
    else
    {
      v31 = __cxa_begin_catch(exception_object);
      v32 = get_adm_log_object();
      v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v33)
        {
          v35 = (*(uint64_t (**)(void *))(*(_QWORD *)v31 + 16))(v31);
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v35;
          _os_log_error_impl(&dword_236C84000, v32, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v33)
      {
        LOWORD(buf) = 0;
        _os_log_error_impl(&dword_236C84000, v32, OS_LOG_TYPE_ERROR, "caught unknown exception", (uint8_t *)&buf, 2u);
      }
      *(_QWORD *)v26 = 1970170734;
      *(_BYTE *)(v26 + 16) = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x236C90D40);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>(const void ***a1, unsigned __int8 ***a2)
{
  const void **v2;
  unsigned __int8 **v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 **v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)*a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (unsigned __int8 *)*((unsigned __int8 *)*a1 + 23);
  else
    v5 = (unsigned __int8 *)(*a1)[1];
  v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  v7 = (char)v6;
  if ((char)v6 < 0)
    v6 = v3[1];
  if (v5 != v6)
    return 0;
  if (v7 >= 0)
    v10 = *a2;
  else
    v10 = (unsigned __int8 **)*v3;
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, (size_t)(*a1)[1]))
      return 0;
  }
  else if (*((_BYTE *)*a1 + 23))
  {
    v11 = v4 - 1;
    do
    {
      v13 = *(unsigned __int8 *)v2;
      v2 = (const void **)((char *)v2 + 1);
      v12 = v13;
      v15 = *(unsigned __int8 *)v10;
      v10 = (unsigned __int8 **)((char *)v10 + 1);
      v14 = v15;
      v17 = v11-- != 0;
    }
    while (v12 == v14 && v17);
    if (v12 != v14)
      return 0;
  }
  if (*(_DWORD *)a1[1] == *(_DWORD *)a2[1])
    return *(_DWORD *)a1[2] == *(_DWORD *)a2[2];
  return 0;
}

void std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:ne180100]<adm::graph::TerminalDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = v2 - 1;
    v9 = a1;
    do
    {
      v11 = *v9++;
      v10 = v11;
      v13 = *a2++;
      v12 = v13;
      v15 = v8-- != 0;
    }
    while (v10 == v12 && v15);
    if (v10 != v12)
      return 0;
  }
  if (*((_DWORD *)a1 + 6) != *((_DWORD *)v6 + 6)
    || *((double *)a1 + 4) != *((double *)v6 + 4)
    || *((_DWORD *)a1 + 10) != *((_DWORD *)v6 + 10)
    || *((_DWORD *)a1 + 11) != *((_DWORD *)v6 + 11)
    || *((_DWORD *)a1 + 12) != *((_DWORD *)v6 + 12)
    || *((_DWORD *)a1 + 13) != *((_DWORD *)v6 + 13)
    || *((_DWORD *)a1 + 14) != *((_DWORD *)v6 + 14)
    || *((_DWORD *)a1 + 15) != *((_DWORD *)v6 + 15)
    || *((_DWORD *)a1 + 16) != *((_DWORD *)v6 + 16)
    || *((_DWORD *)a1 + 18) != *((_DWORD *)v6 + 18))
  {
    return 0;
  }
  return *((_DWORD *)a1 + 20) == *((_DWORD *)v6 + 20);
}

void std::shared_ptr<adm::graph::DSPNode>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *adm::graph::DSPNode::create(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  _QWORD *result;

  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = &off_25083EA10;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 8), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
    *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 24);
  v6 = (std::string *)(v5 + 40);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 48);
  }
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 296) = 0u;
  *(_OWORD *)(v5 + 312) = 0u;
  *(_OWORD *)(v5 + 328) = 0u;
  *(_QWORD *)v5 = &off_25083C2B0;
  *(_QWORD *)(v5 + 128) = &unk_25083C360;
  *a1 = v5;
  result = (_QWORD *)operator new();
  *result = &off_25083C3D8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a1[1] = (uint64_t)result;
  return result;
}

void sub_236C91410(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  MEMORY[0x23B801508](v1, 0x10B3C40B371BB5DLL);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<adm::graph::DSPNode>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void adm::graph::`anonymous namespace'::ErrorCategory::~ErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x23B801508);
}

const char *adm::graph::`anonymous namespace'::ErrorCategory::name(adm::graph::_anonymous_namespace_::ErrorCategory *this)
{
  return "NodeManagerError";
}

void adm::graph::`anonymous namespace'::ErrorCategory::message(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string __p;
  std::string v13;
  std::string v14;

  if (a1 == 1685287015)
  {
    v5 = "dspgraph error";
    goto LABEL_5;
  }
  if (a1 == 1970170734)
  {
    v5 = "unknown error";
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(a2, v5);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "!! Invalid error code: ");
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, " !!", 3uLL);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_236C9163C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<adm::graph::DSPNode *,std::shared_ptr<adm::graph::DSPNode>::__shared_ptr_default_delete<adm::graph::DSPNode,adm::graph::DSPNode>,std::allocator<adm::graph::DSPNode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

uint64_t std::__shared_ptr_pointer<adm::graph::DSPNode *,std::shared_ptr<adm::graph::DSPNode>::__shared_ptr_default_delete<adm::graph::DSPNode,adm::graph::DSPNode>,std::allocator<adm::graph::DSPNode>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<adm::graph::DSPNode *,std::shared_ptr<adm::graph::DSPNode>::__shared_ptr_default_delete<adm::graph::DSPNode,adm::graph::DSPNode>,std::allocator<adm::graph::DSPNode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN3adm5graph7DSPNodeEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void adm::graph::DSPNode::~DSPNode(adm::graph::DSPNode *this)
{
  void **v2;

  *(_QWORD *)this = &off_25083EB68;
  *((_QWORD *)this + 16) = &unk_25083EC18;
  v2 = (void **)((char *)this + 320);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 296);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 272);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 248);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 224);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 200);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 176);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 152);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  adm::graph::Node::~Node((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25083EB68;
  *((_QWORD *)this + 16) = &unk_25083EC18;
  v2 = (void **)((char *)this + 320);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 296);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 272);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 248);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 224);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 200);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 176);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 152);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  adm::graph::Node::~Node((void **)this);
  JUMPOUT(0x23B801508);
}

void `non-virtual thunk to'adm::graph::DSPNode::~DSPNode(adm::graph::DSPNode *this)
{
  void **v2;
  char *v3;
  void **v4;

  *((_QWORD *)this - 16) = &off_25083EB68;
  v2 = (void **)((char *)this - 128);
  *(_QWORD *)this = &unk_25083EC18;
  v3 = (char *)this + 8;
  v4 = (void **)((char *)this + 192);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 168);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 144);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 120);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 96);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 24);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  adm::graph::Node::~Node(v2);
}

{
  void **v2;
  char *v3;
  void **v4;

  *((_QWORD *)this - 16) = &off_25083EB68;
  v2 = (void **)((char *)this - 128);
  *(_QWORD *)this = &unk_25083EC18;
  v3 = (char *)this + 8;
  v4 = (void **)((char *)this + 192);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 168);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 144);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 120);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 96);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 24);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  adm::graph::Node::~Node(v2);
  JUMPOUT(0x23B801508);
}

void std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v6)
    {
      v6 = v4 - 32;
      v7 = 4;
    }
    else
    {
      if (!v6)
        goto LABEL_8;
      v7 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_8:
    v4 -= 40;
  }
  while (v4 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void adm::graph::Node::~Node(void **this)
{
  void **v2;
  void **v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  *this = &off_25083EA10;
  v2 = this + 14;
  v3 = this + 8;
  v4 = this + 14;
  do
  {
    v6 = *(v4 - 3);
    v4 -= 3;
    v5 = v6;
    if (v6)
    {
      v7 = *(v2 - 2);
      v8 = v5;
      if (v7 != v5)
      {
        do
        {
          v10 = *--v7;
          v9 = v10;
          *v7 = 0;
          if (v10)
            std::default_delete<adm::graph::Terminal>::operator()[abi:ne180100](v9);
        }
        while (v7 != v5);
        v8 = *v4;
      }
      *(v2 - 2) = v5;
      operator delete(v8);
    }
    v2 = v4;
  }
  while (v4 != v3);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  adm::graph::Node::~Node(this);
  JUMPOUT(0x23B801508);
}

void std::default_delete<adm::graph::Terminal>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) && *(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x23B801508);
}

void std::__destroy_at[abi:ne180100]<adm::graph::TerminalDescription,0>(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) && *(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

double adm::graph::NodeManager::createNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  double result;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  _BOOL4 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  const adm::graph::TerminalDescription *v20;
  const adm::graph::TerminalDescription *v21;
  adm::graph::Node *v22;
  adm::graph::Node *v23;
  unint64_t *v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::string::size_type v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  AudioStreamBasicDescription *v49;
  AudioStreamBasicDescription *v50;
  AudioStreamBasicDescription *v51;
  AudioStreamBasicDescription *v52;
  std::runtime_error *exception;
  NSObject *adm_log_object;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  adm::graph::Node *v58[2];
  void *v59[2];
  char *v60;
  void *v61[2];
  uint64_t v62;
  void *v63[2];
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  void *v67[2];
  char *v68;
  __int128 v69;
  _QWORD *v70;
  std::string v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  __int128 v80;
  uint64_t v81;
  std::string v82[4];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t buf[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
    goto LABEL_19;
  adm::graph::Node::getDescription(&v71, v10);
  v59[0] = &v71;
  v59[1] = &v72;
  v60 = (char *)&v72 + 4;
  *(_QWORD *)buf = a3;
  v87 = a3 + 24;
  v88 = a3 + 28;
  if (!std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>((const void ***)v59, (unsigned __int8 ***)buf))goto LABEL_9;
  adm::graph::Node::getTerminalDescriptions((int64x2_t *)v59, *v11);
  v14 = (unsigned __int8 *)v59[0];
  v13 = (unsigned __int8 *)v59[1];
  v15 = *(unsigned __int8 **)a4;
  if ((char *)v59[1] - (char *)v59[0] != *(_QWORD *)(a4 + 8) - *(_QWORD *)a4)
  {
    *(_QWORD *)buf = v59;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_9:
    v16 = 0;
    goto LABEL_10;
  }
  if (v59[0] == v59[1])
  {
    *(_QWORD *)buf = v59;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v16 = 1;
  }
  else
  {
    do
    {
      v16 = std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(v14, v15);
      if (!v16)
        break;
      v14 += 136;
      v15 += 136;
    }
    while (v14 != v13);
    *(_QWORD *)buf = v59;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
LABEL_10:
  if (SBYTE7(v74) < 0)
    operator delete(*((void **)&v72 + 1));
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v71.__r_.__value_.__l.__data_);
    if (v16)
      goto LABEL_14;
  }
  else if (v16)
  {
LABEL_14:
    v17 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 8) = v17;
    if (v17)
    {
      v18 = (unint64_t *)(v17 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
LABEL_19:
  std::shared_ptr<adm::graph::DSPNode>::reset[abi:ne180100](v11);
  v57 = a1;
  adm::graph::DSPNode::create((uint64_t *)v58, a3);
  v21 = *(const adm::graph::TerminalDescription **)a4;
  v20 = *(const adm::graph::TerminalDescription **)(a4 + 8);
  v22 = v58[0];
  while (v21 != v20)
  {
    adm::graph::Node::vendTerminal(v22, v21);
    v21 = (const adm::graph::TerminalDescription *)((char *)v21 + 136);
  }
  v23 = v58[1];
  if (v58[1])
  {
    v24 = (unint64_t *)((char *)v58[1] + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v56 = (std::__shared_weak_count *)v23;
  adm::graph::Node::getIOFormats_(v59, (uint64_t)v22, 0);
  adm::graph::Node::getIOFormats_(v61, (uint64_t)v22, 1u);
  adm::graph::Node::getInputSemantics((adm::graph::Node *)v63, *((_QWORD *)v22 + 8), *((_QWORD *)v22 + 9));
  v55 = v11;
  adm::graph::Node::getOutputSemantics((adm::graph::Node *)v65, *((_QWORD *)v22 + 11), *((_QWORD *)v22 + 12));
  v67[0] = 0;
  v67[1] = 0;
  v68 = 0;
  v27 = *(_BYTE **)(a5 + 96);
  v26 = *(_BYTE **)(a5 + 104);
  v28 = v26 - v27;
  if (v26 == v27)
  {
    v29 = 0;
  }
  else
  {
    if (v28 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v67[0] = operator new(v26 - v27);
    v67[1] = v67[0];
    v29 = (char *)v67[0] + 8 * (v28 >> 3);
    v68 = v29;
    memmove(v67[0], v27, v28);
    v67[1] = v29;
  }
  v70 = 0;
  v30 = 0uLL;
  v69 = 0u;
  v32 = *(char **)(a5 + 120);
  v31 = *(char **)(a5 + 128);
  *(_QWORD *)buf = &v69;
  LOBYTE(v87) = 0;
  v33 = v31 - v32;
  if (v31 != v32)
  {
    if (v33 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v34 = std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v33 >> 4);
    *(_QWORD *)&v69 = v34;
    *((_QWORD *)&v69 + 1) = v34;
    v70 = &v34[2 * v35];
    do
    {
      *v34 = *(_QWORD *)v32;
      v36 = *((_QWORD *)v32 + 1);
      v34[1] = v36;
      if (v36)
      {
        v37 = (unint64_t *)(v36 + 8);
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v32 += 16;
      v34 += 2;
    }
    while (v32 != v31);
    *((_QWORD *)&v69 + 1) = v34;
    v33 = (uint64_t)v70;
    v29 = v68;
    v30 = v69;
  }
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *(_OWORD *)v59;
  v39 = (std::string::size_type)v60;
  v59[0] = 0;
  v59[1] = 0;
  v60 = 0;
  v72 = *(_OWORD *)v61;
  v71.__r_.__value_.__r.__words[2] = v39;
  v73 = v62;
  v61[1] = 0;
  v62 = 0;
  v61[0] = 0;
  v74 = *(_OWORD *)v63;
  v40 = v64;
  v63[0] = 0;
  v63[1] = 0;
  v64 = 0;
  v76 = *(_OWORD *)v65;
  v75 = v40;
  v77 = v66;
  v65[0] = 0;
  v65[1] = 0;
  v66 = 0;
  v78 = *(_OWORD *)v67;
  v79 = v29;
  v67[1] = 0;
  v68 = 0;
  v67[0] = 0;
  v80 = v30;
  v81 = v33;
  v69 = 0uLL;
  v70 = 0;
  adm::DSPGraphBasicConfiguration::DSPGraphBasicConfiguration(v82, a5);
  if (*(_BYTE *)(a5 + 148))
  {
    v41 = *(_DWORD *)(a5 + 144) != 1;
    v42 = 0x100000000;
  }
  else
  {
    v42 = 0;
    v41 = *((_DWORD *)v22 + 9);
  }
  v83 = v41;
  v84 = v42;
  if ((adm::graph::isValid((uint64_t)&v71) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "failed to create kernel due to invalid configuration");
    goto LABEL_79;
  }
  if (HIDWORD(v84) == 1)
  {
    v43 = operator new();
    adm::graph::DSPGraphKernel::DSPGraphKernel((adm::graph::DSPKernel *)v43, (uint64_t)&v71);
    *(_QWORD *)v43 = &off_25083CB78;
    *(_QWORD *)(v43 + 24) = &unk_25083CCE8;
    *(_OWORD *)(v43 + 480) = 0u;
    *(_OWORD *)(v43 + 496) = 0u;
    *(_OWORD *)(v43 + 512) = 0u;
    adm::graph::DSPGraphKernel::configure((adm::graph::DSPGraphKernel *)v43);
    v50 = *(AudioStreamBasicDescription **)(v43 + 224);
    v49 = *(AudioStreamBasicDescription **)(v43 + 232);
    while (v50 != v49)
    {
      *(_DWORD *)buf = 0;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,int>((_QWORD *)(v43 + 480), v50++);
    }
    v52 = *(AudioStreamBasicDescription **)(v43 + 248);
    v51 = *(AudioStreamBasicDescription **)(v43 + 256);
    while (v52 != v51)
    {
      *(_DWORD *)buf = 0;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,int>((_QWORD *)(v43 + 504), v52++);
    }
    goto LABEL_44;
  }
  if (HIDWORD(v84))
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "Unknown DSPGraph Kernel type", buf, 2u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown DSPGraph Kernel type");
LABEL_79:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v43 = operator new();
  adm::graph::DSPGraphKernel::DSPGraphKernel((adm::graph::DSPKernel *)v43, (uint64_t)&v71);
  *(_QWORD *)v43 = &off_25083C940;
  *(_QWORD *)(v43 + 24) = &unk_25083CAB0;
  adm::graph::DSPGraphKernel::configure((adm::graph::DSPGraphKernel *)v43);
LABEL_44:
  v85 = v43;
  v44 = (char *)v22 + 136;
  std::shared_ptr<adm::graph::Kernel>::operator=[abi:ne180100]<adm::graph::Kernel,std::default_delete<adm::graph::Kernel>,void>((_QWORD *)v22 + 17, &v85);
  v45 = v85;
  v85 = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration((void **)&v71.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = &v69;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  if (v63[0])
  {
    v63[1] = v63[0];
    operator delete(v63[0]);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  if (*(_QWORD *)v44)
  {
    adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::operator=((unint64_t *)(*(_QWORD *)v44 + 8), (unint64_t)v22 + 128);
    v46 = *((_QWORD *)v22 + 17);
    if (v46)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 24))(v46, (uint64_t)v22 + 8);
  }
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  std::shared_ptr<adm::graph::DSPNode>::operator=[abi:ne180100](v55, (uint64_t)v58[0], (uint64_t)v58[1]);
  result = *(double *)v58;
  *(_OWORD *)v57 = *(_OWORD *)v58;
  *(_BYTE *)(v57 + 16) = 1;
  return result;
}

void sub_236C922F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52)
{
  void *v52;
  uint64_t v53;
  unint64_t *p_shared_owners;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  void *v60;
  NSObject *adm_log_object;
  void *v62;
  NSObject *v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;

  if (a2)
  {
    __cxa_free_exception(v52);
    adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration(&a33);
    *(_QWORD *)(v53 - 128) = a10;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v53 - 128));
    if (__p)
      operator delete(__p);
    if (a24)
      operator delete(a24);
    if (a21)
      operator delete(a21);
    if (a18)
      operator delete(a18);
    if (a15)
      operator delete(a15);
    if (a11)
    {
      p_shared_owners = (unint64_t *)&a11->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
        std::__shared_weak_count::__release_weak(a11);
      }
    }
    if (a14)
    {
      v58 = (unint64_t *)&a14->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
        std::__shared_weak_count::__release_weak(a14);
      }
    }
    if (a2 == 3)
    {
      v60 = __cxa_begin_catch(exception_object);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        v65 = (*(uint64_t (**)(void *))(*(_QWORD *)v60 + 16))(v60);
        *(_DWORD *)(v53 - 128) = 136315138;
        *(_QWORD *)(v53 - 124) = v65;
        _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v53 - 128), 0xCu);
      }
      *(_QWORD *)a12 = 1685287015;
      *(_BYTE *)(a12 + 16) = 0;
      __cxa_end_catch();
    }
    else
    {
      v62 = __cxa_begin_catch(exception_object);
      v63 = get_adm_log_object();
      v64 = os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v64)
        {
          v66 = (*(uint64_t (**)(void *))(*(_QWORD *)v62 + 16))(v62);
          *(_DWORD *)(v53 - 128) = 136315138;
          *(_QWORD *)(v53 - 124) = v66;
          _os_log_error_impl(&dword_236C84000, v63, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v53 - 128), 0xCu);
        }
      }
      else if (v64)
      {
        *(_WORD *)(v53 - 128) = 0;
        _os_log_error_impl(&dword_236C84000, v63, OS_LOG_TYPE_ERROR, "caught unknown exception", (uint8_t *)(v53 - 128), 2u);
      }
      *(_QWORD *)a12 = 1970170734;
      *(_BYTE *)(a12 + 16) = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x236C92164);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::NodeManager::createNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  uint64_t v10;
  uint64_t *v11;
  unsigned __int8 *v12;
  std::string::size_type size;
  unsigned __int8 *v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const adm::graph::TerminalDescription *v19;
  const adm::graph::TerminalDescription *v20;
  adm::graph::Node *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  __int128 v28;
  void (**v29)(adm::graph::ExclaveDSPControllerClientSiri *__hidden);
  __int128 v30;
  __int128 v31;
  NSObject *adm_log_object;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  NSObject *v48;
  const char *v49;
  NSObject *v50;
  std::logic_error *exception;
  int v52;
  NSObject *v53;
  std::runtime_error *v54;
  adm::graph::Node *v55[2];
  std::string v56;
  void *v57[2];
  uint64_t v58;
  void *v59[2];
  uint64_t v60;
  void *v61[2];
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD v66[3];
  std::string v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  void *v74[2];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  __int128 v82;
  uint8_t buf[16];
  uint64_t v84;
  _QWORD v85[4];

  v85[1] = *MEMORY[0x24BDAC8D0];
  v11 = (uint64_t *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    adm::graph::Node::getDescription(&v67, v10);
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    v56.__r_.__value_.__l.__size_ = (std::string::size_type)&v68;
    v56.__r_.__value_.__r.__words[2] = (std::string::size_type)&v68 + 4;
    *(_QWORD *)buf = a3;
    *(_QWORD *)&buf[8] = a3 + 24;
    v84 = a3 + 28;
    if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>,std::tuple<std::string const&,adm::graph::NodeType const&,unsigned int const&>>((const void ***)&v56, (unsigned __int8 ***)buf))
    {
      adm::graph::Node::getTerminalDescriptions((int64x2_t *)&v56, *v11);
      size = v56.__r_.__value_.__l.__size_;
      v12 = (unsigned __int8 *)v56.__r_.__value_.__r.__words[0];
      v14 = *(unsigned __int8 **)a4;
      if (v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0] == *(_QWORD *)(a4 + 8) - *(_QWORD *)a4)
      {
        if (v56.__r_.__value_.__r.__words[0] == v56.__r_.__value_.__l.__size_)
        {
          *(_QWORD *)buf = &v56;
          std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          v15 = 1;
        }
        else
        {
          do
          {
            v15 = std::__equal_to::operator()[abi:ne180100]<adm::graph::TerminalDescription,adm::graph::TerminalDescription>(v12, v14);
            if (!v15)
              break;
            v12 += 136;
            v14 += 136;
          }
          while (v12 != (unsigned __int8 *)size);
          *(_QWORD *)buf = &v56;
          std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
      }
      else
      {
        *(_QWORD *)buf = &v56;
        std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v15 = 0;
      }
    }
    else
    {
      v15 = 0;
    }
    if (SBYTE7(v70) < 0)
      operator delete(*((void **)&v68 + 1));
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v67.__r_.__value_.__l.__data_);
      if (v15)
      {
LABEL_15:
        v16 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)a1 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 8) = v16;
        if (v16)
        {
          v17 = (unint64_t *)(v16 + 8);
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }
        goto LABEL_87;
      }
    }
    else if (v15)
    {
      goto LABEL_15;
    }
  }
  std::shared_ptr<adm::graph::DSPNode>::reset[abi:ne180100](v11);
  adm::graph::DSPNode::create((uint64_t *)v55, a3);
  v20 = *(const adm::graph::TerminalDescription **)a4;
  v19 = *(const adm::graph::TerminalDescription **)(a4 + 8);
  v21 = v55[0];
  while (v20 != v19)
  {
    adm::graph::Node::vendTerminal(v21, v20);
    v20 = (const adm::graph::TerminalDescription *)((char *)v20 + 136);
  }
  v22 = (std::__shared_weak_count *)v55[1];
  if (v55[1])
  {
    v23 = (unint64_t *)((char *)v55[1] + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  adm::graph::Node::getIOFormats_((void **)&v56.__r_.__value_.__l.__data_, (uint64_t)v21, 0);
  adm::graph::Node::getIOFormats_(v57, (uint64_t)v21, 1u);
  adm::graph::Node::getInputSemantics((adm::graph::Node *)v59, *((_QWORD *)v21 + 8), *((_QWORD *)v21 + 9));
  adm::graph::Node::getOutputSemantics((adm::graph::Node *)v61, *((_QWORD *)v21 + 11), *((_QWORD *)v21 + 12));
  v67 = v56;
  memset(&v56, 0, sizeof(v56));
  v68 = *(_OWORD *)v57;
  v69 = v58;
  v57[1] = 0;
  v58 = 0;
  v57[0] = 0;
  v70 = *(_OWORD *)v59;
  v25 = v60;
  v59[1] = 0;
  v60 = 0;
  v59[0] = 0;
  v72 = *(_OWORD *)v61;
  v71 = v25;
  v73 = v62;
  v74[0] = 0;
  v61[0] = 0;
  v61[1] = 0;
  v62 = 0;
  v74[1] = 0;
  v75 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  memset(v66, 0, sizeof(v66));
  v76 = 0uLL;
  v77 = 0;
  *(_QWORD *)&v78 = *(_QWORD *)(a5 + 1);
  DWORD2(v78) = a5[3];
  HIDWORD(v78) = *((_DWORD *)v21 + 9);
  v26 = *a5;
  if (*a5 == 2)
  {
    if ((_BYTE)v84)
    {
      v27 = (_QWORD *)operator new();
      v31 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v82 = v31;
      adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl((uint64_t)v27, (uint64_t)&v82, 0, 0, 0, 0);
      if (*((_QWORD *)&v82 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
      v29 = &off_25083DF90;
      goto LABEL_41;
    }
  }
  else if (v26 == 1)
  {
    if ((_BYTE)v84)
    {
      v27 = (_QWORD *)operator new();
      v30 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v82 = v30;
      v85[0] = 0x7674666662746E70;
      adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl((uint64_t)v27, (uint64_t)&v82, v85, 2, 0, 0);
      if (*((_QWORD *)&v82 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
      v29 = &off_25083DF08;
      goto LABEL_41;
    }
  }
  else if (v26)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v26;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "unsupported use case: %d", buf, 8u);
    }
  }
  else
  {
    if ((_BYTE)v84)
    {
      v27 = (_QWORD *)operator new();
      v28 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      v82 = v28;
      LODWORD(v85[0]) = 1969844082;
      v81 = 1936748642;
      adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl((uint64_t)v27, (uint64_t)&v82, v85, 1, &v81, 1);
      if (*((_QWORD *)&v82 + 1))
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v82 + 1));
      v29 = &off_25083D868;
LABEL_41:
      *v27 = v29;
      v79 = v27;
      goto LABEL_45;
    }
  }
  v79 = 0;
LABEL_45:
  v33 = operator new();
  adm::graph::DSPKernel::DSPKernel((adm::graph::DSPKernel *)v33);
  *(_QWORD *)v33 = &off_25083CF38;
  *(_QWORD *)(v33 + 24) = &unk_25083D0A0;
  v34 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
  v35 = v69;
  *(_QWORD *)(v33 + 176) = *((_QWORD *)&v67.__r_.__value_.__l + 2);
  *(_OWORD *)(v33 + 160) = v34;
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v33 + 184) = v68;
  *(_QWORD *)(v33 + 200) = v35;
  v69 = 0;
  v68 = 0uLL;
  *(_OWORD *)(v33 + 208) = v70;
  v36 = v73;
  *(_QWORD *)(v33 + 224) = v71;
  v70 = 0uLL;
  v71 = 0;
  *(_OWORD *)(v33 + 232) = v72;
  *(_QWORD *)(v33 + 248) = v36;
  v72 = 0uLL;
  v73 = 0;
  *(_OWORD *)(v33 + 256) = *(_OWORD *)v74;
  v37 = v77;
  *(_QWORD *)(v33 + 272) = v75;
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  *(_OWORD *)(v33 + 280) = v76;
  *(_QWORD *)(v33 + 296) = v37;
  v76 = 0uLL;
  v77 = 0;
  *(_OWORD *)(v33 + 304) = v78;
  v38 = v79;
  v67.__r_.__value_.__r.__words[2] = 0;
  v79 = 0;
  *(_QWORD *)(v33 + 320) = v38;
  *(_QWORD *)(v33 + 328) = 0;
  if (!adm::graph::isValid((_QWORD *)(v33 + 160)))
    goto LABEL_93;
  if (!*(_DWORD *)(v33 + 304))
  {
    v48 = get_adm_log_object();
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      goto LABEL_93;
    *(_WORD *)buf = 0;
    v49 = "Exclave kernel configuration is not valid - input port";
    goto LABEL_92;
  }
  if (!*(_QWORD *)(v33 + 320))
  {
    v48 = get_adm_log_object();
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      goto LABEL_93;
    *(_WORD *)buf = 0;
    v49 = "Exclave kernel configuration is not valid - no controller client provided";
LABEL_92:
    _os_log_error_impl(&dword_236C84000, v48, OS_LOG_TYPE_ERROR, v49, buf, 2u);
LABEL_93:
    v50 = get_adm_log_object();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_236C84000, v50, OS_LOG_TYPE_FAULT, "Invalid ExclaveKernel configuration provided", buf, 2u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid ExclaveKernel configuration provided");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_25083BA68, MEMORY[0x24BEDAB88]);
  }
  v39 = *(_QWORD *)(v33 + 208);
  if (*(_QWORD *)(v33 + 216) != v39)
  {
    v40 = 0;
    v41 = 0;
    while (!adm::graph::SemanticSet::contains((_QWORD *)(v39 + v40), 1))
    {
      ++v41;
      v39 = *(_QWORD *)(v33 + 208);
      v40 += 8;
      if (v41 >= (*(_QWORD *)(v33 + 216) - v39) >> 3)
        goto LABEL_54;
    }
    *(_QWORD *)(v33 + 328) = v41;
  }
LABEL_54:
  v42 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v33 + 320) + 16))(*(_QWORD *)(v33 + 320), *(_QWORD *)(v33 + 160), *(_QWORD *)(v33 + 168) - 40, *(_QWORD *)(v33 + 184), *(unsigned int *)(v33 + 316), *(unsigned int *)(v33 + 312), *(unsigned int *)(v33 + 304), *(unsigned int *)(v33 + 308));
  if (v42)
  {
    v52 = v42;
    v53 = get_adm_log_object();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v52;
      _os_log_error_impl(&dword_236C84000, v53, OS_LOG_TYPE_ERROR, "failed to configure ExclaveKernel err=%d", buf, 8u);
    }
    v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "failed to configure ExclaveKernel");
    __cxa_throw(v54, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v80 = v33;
  v43 = (char *)v21 + 136;
  std::shared_ptr<adm::graph::Kernel>::operator=[abi:ne180100]<adm::graph::Kernel,std::default_delete<adm::graph::Kernel>,void>((_QWORD *)v21 + 17, &v80);
  v44 = v80;
  v80 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v79;
  v79 = 0;
  if (v45)
    (*(void (**)(_QWORD *))(*v45 + 8))(v45);
  *(_QWORD *)buf = &v76;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v74[0])
  {
    v74[1] = v74[0];
    operator delete(v74[0]);
  }
  if ((_QWORD)v72)
  {
    *((_QWORD *)&v72 + 1) = v72;
    operator delete((void *)v72);
  }
  if ((_QWORD)v70)
  {
    *((_QWORD *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  if ((_QWORD)v68)
  {
    *((_QWORD *)&v68 + 1) = v68;
    operator delete((void *)v68);
  }
  if (v67.__r_.__value_.__r.__words[0])
  {
    v67.__r_.__value_.__l.__size_ = v67.__r_.__value_.__r.__words[0];
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)buf = v66;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v61[0])
  {
    v61[1] = v61[0];
    operator delete(v61[0]);
  }
  if (v59[0])
  {
    v59[1] = v59[0];
    operator delete(v59[0]);
  }
  if (v57[0])
  {
    v57[1] = v57[0];
    operator delete(v57[0]);
  }
  if (v56.__r_.__value_.__r.__words[0])
  {
    v56.__r_.__value_.__l.__size_ = v56.__r_.__value_.__r.__words[0];
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (*(_QWORD *)v43)
    adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::operator=((unint64_t *)(*(_QWORD *)v43 + 8), (unint64_t)v21 + 128);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::shared_ptr<adm::graph::DSPNode>::operator=[abi:ne180100](v11, (uint64_t)v55[0], (uint64_t)v55[1]);
  *(_OWORD *)a1 = *(_OWORD *)v55;
LABEL_87:
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_236C930B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,void *a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v55;

  if (a2)
  {
    v55 = *(std::__shared_weak_count **)(v53 - 152);
    if (v55)
      std::__shared_weak_count::__release_weak(v55);
    MEMORY[0x23B801508](v52, 0x10B1C409E7842B0);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_236C9323C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x236C933A0);
  JUMPOUT(0x236C9322CLL);
}

void sub_236C93250(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  uint64_t v49;
  std::__shared_weak_count *v50;
  adm::graph::DSPKernel *v51;
  adm::graph::ExclaveKernelConfiguration *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *p_shared_owners;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  NSObject *adm_log_object;
  void *v66;
  NSObject *v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;

  if (a2)
  {
    __cxa_free_exception(v53);
    adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration(v52);
    adm::graph::DSPKernel::~DSPKernel(v51);
    MEMORY[0x23B801508](v51, 0x10A1C40C9FBF0C7);
    if (a49)
      (*(void (**)(uint64_t))(*(_QWORD *)a49 + 8))(a49);
    *(_QWORD *)(v57 - 144) = v55;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 144));
    if (a41)
      operator delete(a41);
    if (a38)
      operator delete(a38);
    if (a35)
      operator delete(a35);
    if (a32)
      operator delete(a32);
    if (a29)
      operator delete(a29);
    *(_QWORD *)(v57 - 144) = v54;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 144));
    if (a23)
      operator delete(a23);
    if (a20)
      operator delete(a20);
    if (a17)
      operator delete(a17);
    if (a14)
      operator delete(a14);
    if (a11)
      operator delete(a11);
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v61 = __ldaxr(p_shared_owners);
      while (__stlxr(v61 - 1, p_shared_owners));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (a10)
    {
      v62 = (unint64_t *)&a10->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
        std::__shared_weak_count::__release_weak(a10);
      }
    }
    if (a2 == 3)
    {
      v64 = __cxa_begin_catch(a1);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        v69 = (*(uint64_t (**)(void *))(*(_QWORD *)v64 + 16))(v64);
        *(_DWORD *)(v57 - 144) = 136315138;
        *(_QWORD *)(v56 + 212) = v69;
        _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v57 - 144), 0xCu);
      }
      *(_QWORD *)v49 = 1685287015;
      *(_BYTE *)(v49 + 16) = 0;
      __cxa_end_catch();
    }
    else
    {
      v66 = __cxa_begin_catch(a1);
      v67 = get_adm_log_object();
      v68 = os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
      if (a2 == 2)
      {
        if (v68)
        {
          v70 = (*(uint64_t (**)(void *))(*(_QWORD *)v66 + 16))(v66);
          *(_DWORD *)(v57 - 144) = 136315138;
          *(_QWORD *)(v56 + 212) = v70;
          _os_log_error_impl(&dword_236C84000, v67, OS_LOG_TYPE_ERROR, "caught exception: %s", (uint8_t *)(v57 - 144), 0xCu);
        }
      }
      else if (v68)
      {
        *(_WORD *)(v57 - 144) = 0;
        _os_log_error_impl(&dword_236C84000, v67, OS_LOG_TYPE_ERROR, "caught unknown exception", (uint8_t *)(v57 - 144), 2u);
      }
      *(_QWORD *)v49 = 1970170734;
      *(_BYTE *)(v49 + 16) = 0;
      __cxa_end_catch();
    }
    JUMPOUT(0x236C92ED8);
  }
  JUMPOUT(0x236C9322CLL);
}

void sub_236C93268(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x236C93274);
  JUMPOUT(0x236C9322CLL);
}

void sub_236C93544()
{
  JUMPOUT(0x236C9322CLL);
}

void sub_236C9373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  void *v38;
  uint64_t v39;

  _Block_object_dispose((const void *)(v39 - 64), 8);
  if (a38)
    adm::SystemConfiguration::~SystemConfiguration(&a10);

  _Unwind_Resume(a1);
}

void sub_236C93844(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  const std::exception *v11;
  const std::exception *v12;
  const std::exception *v13;
  void *v14;
  adm *v15;
  const NSException *v16;

  adm::SystemConfiguration::~SystemConfiguration(&a9);
  if (a2 == 4)
  {
    v11 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v11);
  }
  if (a2 == 3)
  {
    v12 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v12, v13);
  }
  v14 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v15 = v14;
    adm::consume_exception_and_terminate(v15, v16);
  }
  adm::consume_unknown_exception_and_terminate((adm *)v14);
}

void sub_236C938B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_236C93AA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_236C93BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_236C93C94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [24],void>(std::string *this, std::string *a2)
{
  std::string *v3;
  int v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = (std::string *)((char *)a2 - 1);
  do
  {
    v4 = v3->__r_.__value_.__s.__data_[1];
    v3 = (std::string *)((char *)v3 + 1);
  }
  while (v4);
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_236C93CEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, std::string *a2, std::string *a3)
{
  std::string *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  std::string::value_type *p_p;
  std::string *v13;
  std::string::value_type *v14;
  std::string::value_type v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string::value_type v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  void *__p;
  std::string::size_type v24;
  int64_t v25;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > v4 || (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + size + 1) <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v13 = this;
    if ((v6 & 0x80) != 0)
      v13 = (std::string *)this->__r_.__value_.__r.__words[0];
    v14 = (char *)v13 + size;
    do
    {
      v15 = v4->__r_.__value_.__s.__data_[0];
      v4 = (std::string *)((char *)v4 + 1);
      *v14++ = v15;
    }
    while (v4 != a3);
    *v14 = 0;
    v16 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v16;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v16 & 0x7F;
  }
  else
  {
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v7 > 0x16)
    {
      v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v17 = v7 | 7;
      v18 = v17 + 1;
      p_p = (std::string::value_type *)operator new(v17 + 1);
      v24 = v7;
      v25 = v18 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v25) = v7;
      p_p = (std::string::value_type *)&__p;
    }
    do
    {
      v19 = v4->__r_.__value_.__s.__data_[0];
      v4 = (std::string *)((char *)v4 + 1);
      *p_p++ = v19;
    }
    while (v4 != a3);
    *p_p = 0;
    if (v25 >= 0)
      v20 = (const std::string::value_type *)&__p;
    else
      v20 = (const std::string::value_type *)__p;
    if (v25 >= 0)
      v21 = HIBYTE(v25);
    else
      v21 = v24;
    std::string::append(this, v20, v21);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
  }
  return this;
}

void sub_236C93EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  __int128 v3;

  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
      std::string::operator=(this, a2);
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t j;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string *v29;
  uint64_t k;
  char *v31;
  std::string *v32;
  char *v33;
  std::string *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;

  v2 = a2;
  v3 = (uint64_t)a1;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      while (1)
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        if ((uint64_t *)v6 != v2)
        {
          v9 = (_QWORD *)(v6 + 40);
          *(_DWORD *)(v6 + 72) = *((_DWORD *)v2 + 18);
          v10 = (uint64_t *)v2[7];
          v11 = *(_QWORD *)(v6 + 48);
          if (v11)
          {
            for (j = 0; j != v11; ++j)
              *(_QWORD *)(*v9 + 8 * j) = 0;
            v13 = *(_QWORD *)(v6 + 56);
            *(_QWORD *)(v6 + 56) = 0;
            *(_QWORD *)(v6 + 64) = 0;
            if (v13)
              v14 = v10 == 0;
            else
              v14 = 1;
            if (!v14)
            {
              v36 = v6;
              while (1)
              {
                std::string::operator=((std::string *)(v13 + 16), (const std::string *)(v10 + 2));
                if ((uint64_t *)v13 != v10)
                {
                  std::vector<std::__fs::filesystem::path>::__assign_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v13 + 40, (std::string *)v10[5], (__int128 *)v10[6], 0xAAAAAAAAAAAAAAABLL * ((v10[6] - v10[5]) >> 3));
                  std::vector<std::__fs::filesystem::path>::__assign_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v13 + 64, (std::string *)v10[8], (__int128 *)v10[9], 0xAAAAAAAAAAAAAAABLL * ((v10[9] - v10[8]) >> 3));
                  v16 = (void **)(v13 + 88);
                  v17 = *(_QWORD *)(v13 + 88);
                  v19 = v10[11];
                  v18 = v10[12];
                  v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 4);
                  v21 = *(_QWORD *)(v13 + 104);
                  if (0xAAAAAAAAAAAAAAABLL * ((v21 - v17) >> 4) >= v20)
                  {
                    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v13 + 96) - v17) >> 4) >= v20)
                    {
                      v29 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *>((std::string *)v10[11], (std::string *)v10[12], *(std::string **)(v13 + 88));
                      for (k = *(_QWORD *)(v13 + 96);
                            (std::string *)k != v29;
                            std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(k))
                      {
                        k -= 48;
                      }
                      *(_QWORD *)(v13 + 96) = v29;
                      goto LABEL_41;
                    }
                    v28 = (std::string *)(v19 + 16 * ((*(_QWORD *)(v13 + 96) - v17) >> 4));
                    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *>((std::string *)v10[11], v28, *(std::string **)(v13 + 88));
                    v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>((uint64_t)v28, v18, *(_QWORD *)(v13 + 96));
                  }
                  else
                  {
                    if (v17)
                    {
                      v22 = *(_QWORD *)(v13 + 96);
                      v23 = *(void **)(v13 + 88);
                      if (v22 != v17)
                      {
                        do
                        {
                          v22 -= 48;
                          std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v22);
                        }
                        while (v22 != v17);
                        v23 = *v16;
                      }
                      *(_QWORD *)(v13 + 96) = v17;
                      operator delete(v23);
                      v21 = 0;
                      *v16 = 0;
                      *(_QWORD *)(v13 + 96) = 0;
                      *(_QWORD *)(v13 + 104) = 0;
                      v6 = v36;
                    }
                    if (v20 > 0x555555555555555)
                      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                    v24 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 4);
                    v25 = 2 * v24;
                    if (2 * v24 <= v20)
                      v25 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 4);
                    if (v24 >= 0x2AAAAAAAAAAAAAALL)
                      v26 = 0x555555555555555;
                    else
                      v26 = v25;
                    std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__vallocate[abi:ne180100]((_QWORD *)(v13 + 88), v26);
                    v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig*>(v19, v18, *(_QWORD *)(v13 + 96));
                  }
                  *(_QWORD *)(v13 + 96) = v27;
                }
LABEL_41:
                std::string::operator=((std::string *)(v13 + 112), (const std::string *)(v10 + 14));
                v15 = *(_QWORD **)v13;
                std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi((uint64_t)v9, v13);
                v10 = (uint64_t *)*v10;
                if (v15)
                {
                  v13 = (uint64_t)v15;
                  if (v10)
                    continue;
                }
                goto LABEL_43;
              }
            }
            v15 = (_QWORD *)v13;
LABEL_43:
            std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__deallocate_node(v15);
            v3 = (uint64_t)a1;
          }
          for (; v10; v10 = (uint64_t *)*v10)
          {
            v31 = (char *)operator new(0x88uLL);
            v37 = v31;
            v38 = v6 + 56;
            v39 = 0;
            *(_QWORD *)v31 = 0;
            *((_QWORD *)v31 + 1) = 0;
            v32 = std::pair<std::string const,adm::DSPGraphBasicConfiguration>::pair[abi:ne180100]((std::string *)(v31 + 16), (__int128 *)v10 + 1);
            v39 = 1;
            *((_QWORD *)v31 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v32);
            std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi((uint64_t)v9, (uint64_t)v31);
            v37 = 0;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37);
          }
        }
        v8 = *(_QWORD **)v6;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi(v3, v6);
        v2 = (uint64_t *)*v2;
        if (v8)
        {
          v6 = (uint64_t)v8;
          if (v2)
            continue;
        }
        goto LABEL_48;
      }
    }
    v8 = (_QWORD *)v6;
LABEL_48:
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v33 = (char *)operator new(0x50uLL);
    v37 = v33;
    v38 = v3 + 16;
    v39 = 0;
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0;
    v34 = std::pair<std::string const,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>::pair[abi:ne180100]((std::string *)(v33 + 16), (__int128 *)v2 + 1);
    v39 = 1;
    *((_QWORD *)v33 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v34);
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi(v3, (uint64_t)v33);
    v37 = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37);
  }
}

void sub_236C94314()
{
  __break(1u);
}

void sub_236C943A4()
{
  __cxa_end_catch();
  JUMPOUT(0x236C943ACLL);
}

void sub_236C944CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  float v6;
  float v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  int8x8_t prime;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint8x8_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;

  v2 = (_QWORD *)a2;
  v4 = (unsigned __int8 *)(a2 + 16);
  v43 = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  v2[1] = v43;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    v8 = 1;
    if (v5 >= 3)
      v8 = (v5 & (v5 - 1)) != 0;
    v9 = v8 | (2 * v5);
    v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10)
      prime = (int8x8_t)v10;
    else
      prime = (int8x8_t)v9;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v5)
      goto LABEL_99;
    if (*(_QWORD *)&prime >= v5)
      goto LABEL_60;
    v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      v19 = std::__next_prime(v19);
    }
    else
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
    }
    if (*(_QWORD *)&prime <= v19)
      prime = (int8x8_t)v19;
    if (*(_QWORD *)&prime >= v5)
    {
      v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(_QWORD *)&prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = operator new(8 * *(_QWORD *)&prime);
      v13 = *(void **)a1;
      *(_QWORD *)a1 = v12;
      if (v13)
        operator delete(v13);
      v41 = v4;
      v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v14++) = 0;
      while (*(_QWORD *)&prime != v14);
      v15 = *(uint64_t **)(a1 + 16);
      if (v15)
      {
        v16 = v15[1];
        v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        v18 = v17.u32[0];
        v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(_QWORD *)&prime)
            v16 %= *(_QWORD *)&prime;
        }
        else
        {
          v16 &= *(_QWORD *)&prime - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v16) = a1 + 16;
        v22 = *v15;
        if (*v15)
        {
          v42 = v17.u32[0];
          do
          {
            v23 = *(_QWORD *)(v22 + 8);
            if (v18 > 1)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            if (v23 == v16)
            {
              v15 = (uint64_t *)v22;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v23))
            {
              v24 = *(_QWORD **)v22;
              if (*(_QWORD *)v22)
              {
                v25 = (_QWORD *)v22;
                while (1)
                {
                  v26 = v24;
                  if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)(v22 + 16), (unsigned __int8 *)v24 + 16))break;
                  v24 = (_QWORD *)*v26;
                  v25 = v26;
                  if (!*v26)
                    goto LABEL_47;
                }
                v24 = v26;
                v26 = v25;
LABEL_47:
                v18 = v42;
              }
              else
              {
                v26 = (_QWORD *)v22;
              }
              *v15 = (uint64_t)v24;
              *v26 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v23);
              **(_QWORD **)(*(_QWORD *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v15;
              v15 = (uint64_t *)v22;
              v16 = v23;
            }
            v22 = *v15;
          }
          while (*v15);
        }
        v5 = (unint64_t)prime;
        v2 = v40;
        v4 = v41;
      }
      else
      {
        v5 = (unint64_t)prime;
        v4 = v41;
      }
    }
    else
    {
      v27 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v27)
        operator delete(v27);
      v5 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    v30 = v43;
    if (v5 <= v43)
      v30 = v43 % v5;
  }
  else
  {
    v30 = (v5 - 1) & v43;
  }
  v31 = *(unsigned __int8 **)(*(_QWORD *)a1 + 8 * v30);
  if (v31)
  {
    v32 = *(unsigned __int8 **)v31;
    if (*(_QWORD *)v31)
    {
      v33 = 0;
      do
      {
        v34 = v32;
        v35 = *((_QWORD *)v32 + 1);
        if (v29 > 1)
        {
          v36 = v35;
          if (v35 >= v5)
            v36 = v35 % v5;
        }
        else
        {
          v36 = v35 & (v5 - 1);
        }
        if (v36 != v30)
          break;
        v37 = v35 == v43 && std::equal_to<std::string>::operator()[abi:ne180100](v34 + 16, v4);
        if ((v33 & !v37 & 1) != 0)
          break;
        v33 |= v37;
        v32 = *(unsigned __int8 **)v34;
        v31 = v34;
      }
      while (*(_QWORD *)v34);
    }
  }
  v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5)
      v38 %= v5;
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    *v2 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = a1 + 16;
    if (!*v2)
      goto LABEL_95;
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  *v2 = *(_QWORD *)v31;
  *(_QWORD *)v31 = v2;
  if (*v2)
  {
    v39 = *(_QWORD *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5)
        v39 %= v5;
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38)
      goto LABEL_94;
  }
LABEL_95:
  ++*(_QWORD *)(a1 + 24);
}

void std::vector<std::__fs::filesystem::path>::__assign_with_size[abi:ne180100]<std::__fs::filesystem::path*,std::__fs::filesystem::path*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 *v16;
  uint64_t v17;

  v6 = (__int128 *)__str;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= a4)
      v12 = a4;
    if (v11 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v12;
    std::vector<std::__fs::filesystem::path>::__vallocate[abi:ne180100]((_QWORD *)a1, v13);
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v9, v6, a3, *(std::string **)(a1 + 8));
LABEL_17:
    *(_QWORD *)(a1 + 8) = v14;
    return;
  }
  v15 = *(std::string **)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v10) >> 3) < a4)
  {
    v16 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)v15 - (char *)v10) >> 3));
    if (v15 != v10)
    {
      v17 = 8 * (((char *)v15 - (char *)v10) >> 3);
      do
      {
        std::string::operator=(v10, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++v10;
        v17 -= 24;
      }
      while (v17);
      v10 = *(std::string **)(a1 + 8);
    }
    v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::__fs::filesystem::path>,std::__fs::filesystem::path*,std::__fs::filesystem::path*,std::__fs::filesystem::path*>(v9, v16, a3, v10);
    goto LABEL_17;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(v10, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++v10;
    }
    while (v6 != a3);
    v15 = *(std::string **)(a1 + 8);
  }
  while (v15 != v10)
  {
    if (SHIBYTE(v15[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15[-1].__r_.__value_.__l.__data_);
    --v15;
  }
  *(_QWORD *)(a1 + 8) = v10;
}

void sub_236C94B24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *,adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

id CreateAudioDSPManager()
{
  NSObject *v0;
  uint8_t v2[16];

  get_adm_log_object();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_236C84000, v0, OS_LOG_TYPE_DEFAULT, "creating AudioDSPManager...", v2, 2u);
  }

  return (id)objc_opt_new();
}

BOOL adm::graph::isValid(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  NSObject *adm_log_object;
  const char *v6;
  uint8_t *v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;

  v1 = a1[1];
  if (*a1 == v1)
  {
    adm_log_object = get_adm_log_object();
    result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v11 = 0;
    v6 = "Kernel configuration is not valid - no input terminal formats";
    v7 = (uint8_t *)&v11;
    goto LABEL_14;
  }
  v2 = a1[3];
  v3 = a1[4];
  if (v2 == v3)
  {
    adm_log_object = get_adm_log_object();
    result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v10 = 0;
    v6 = "Kernel configuration is not valid - no output terminal formats";
    v7 = (uint8_t *)&v10;
    goto LABEL_14;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v1 - *a1) >> 3) != (uint64_t)(a1[7] - a1[6]) >> 3)
  {
    adm_log_object = get_adm_log_object();
    result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v9 = 0;
    v6 = "Kernel configuration is not valid - number of input terminal formats and semantics don't match";
    v7 = (uint8_t *)&v9;
    goto LABEL_14;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((v3 - v2) >> 3) == (uint64_t)(a1[10] - a1[9]) >> 3)
    return 1;
  adm_log_object = get_adm_log_object();
  result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v8 = 0;
    v6 = "Kernel configuration is not valid - number of output terminal formats and semantics don't match";
    v7 = (uint8_t *)&v8;
LABEL_14:
    _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  return result;
}

uint64_t adm::graph::isValid(uint64_t a1)
{
  _BOOL4 isValid;
  uint64_t result;
  NSObject *adm_log_object;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  char v11;
  std::error_code __ec;
  uint8_t buf[16];

  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  isValid = adm::graph::isValid((_QWORD *)a1);
  result = 0;
  if (!isValid)
    return result;
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)(a1 + 216), &__ec);
  if (!buf[0] || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), buf[0] == 255) || !buf[0])
  {
    adm_log_object = get_adm_log_object();
    result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_WORD *)buf = 0;
      v9 = "Kernel configuration is not valid - '.dspg' file doesn't exist";
      goto LABEL_34;
    }
    return result;
  }
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  while (v5 != v6)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      if (!*(_QWORD *)(v5 + 8))
        goto LABEL_16;
    }
    else if (!*(_BYTE *)(v5 + 23))
    {
      goto LABEL_16;
    }
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v5, &__ec);
    if (!buf[0] || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), buf[0] == 255) || !buf[0])
    {
      adm_log_object = get_adm_log_object();
      result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
      if ((_DWORD)result)
      {
        *(_WORD *)buf = 0;
        v9 = "Kernel configuration is not valid - '.austrip' file doesn't exist";
        goto LABEL_34;
      }
      return result;
    }
LABEL_16:
    v5 += 24;
  }
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  while (1)
  {
    if (v7 == v8)
    {
      v10 = *(unsigned int *)(a1 + 252);
      if ((_DWORD)v10 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      *(_QWORD *)buf = &v11;
      return ((uint64_t (*)(uint8_t *, uint64_t))off_25083C4B8[v10])(buf, a1 + 240);
    }
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
        goto LABEL_26;
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_26;
    }
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)v7, &__ec);
    if (!buf[0])
      break;
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (buf[0] == 255 || !buf[0])
      break;
LABEL_26:
    v7 += 24;
  }
  adm_log_object = get_adm_log_object();
  result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (!(_DWORD)result)
    return result;
  *(_WORD *)buf = 0;
  v9 = "Kernel configuration is not valid - '.propstrip' file doesn't exist";
LABEL_34:
  _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, v9, buf, 2u);
  return 0;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::isValid(adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>(uint64_t a1, int *a2)
{
  int v2;
  NSObject *adm_log_object;
  uint8_t v5[16];

  v2 = *a2;
  if (!*a2)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "Kernel configuration is not valid - block size can't be 0", v5, 2u);
    }
  }
  return v2 != 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::isValid(adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  NSObject *adm_log_object;
  uint8_t v6[16];

  if (*(_BYTE *)(a2 + 8))
    v2 = *(_DWORD *)(a2 + 4) == 0;
  else
    v2 = 0;
  v3 = !v2;
  if (v2)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v6 = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "Kernel configuration is not valid - expected maximum block size can't be 0", v6, 2u);
    }
  }
  return v3;
}

BOOL adm::graph::operator==(std::__fs::filesystem::path *a1, uint64_t a2)
{
  std::__fs::filesystem::path::__string_view v4;
  const std::__fs::filesystem::path *data;
  const std::__fs::filesystem::path *size;
  const std::string_view::value_type *v7;
  _BOOL4 v8;
  const std::__fs::filesystem::path *v9;
  const std::__fs::filesystem::path *v10;
  const std::string_view::value_type *v11;
  _BOOL4 v12;

  if (!adm::graph::KernelConfiguration::operator==((uint64_t *)a1, (uint64_t *)a2))
    return 0;
  data = (const std::__fs::filesystem::path *)a1[6].__pn_.__r_.__value_.__l.__data_;
  size = (const std::__fs::filesystem::path *)a1[6].__pn_.__r_.__value_.__l.__size_;
  v7 = *(const std::string_view::value_type **)(a2 + 144);
  if ((char *)size - (char *)data != *(_QWORD *)(a2 + 152) - (_QWORD)v7)
    return 0;
  if (data != size)
  {
    do
    {
      v4.__data_ = v7;
      v8 = std::__fs::filesystem::operator==[abi:ne180100](data, v4);
      if (!v8)
        break;
      ++data;
      v7 += 24;
    }
    while (data != size);
    if (!v8)
      return 0;
  }
  v9 = (const std::__fs::filesystem::path *)a1[7].__pn_.__r_.__value_.__l.__data_;
  v10 = (const std::__fs::filesystem::path *)a1[7].__pn_.__r_.__value_.__l.__size_;
  v11 = *(const std::string_view::value_type **)(a2 + 168);
  if ((char *)v10 - (char *)v9 != *(_QWORD *)(a2 + 176) - (_QWORD)v11)
    return 0;
  if (v9 != v10)
  {
    do
    {
      v4.__data_ = v11;
      v12 = std::__fs::filesystem::operator==[abi:ne180100](v9, v4);
      if (!v12)
        break;
      ++v9;
      v11 += 24;
    }
    while (v9 != v10);
    if (!v12)
      return 0;
  }
  v4.__data_ = (const std::string_view::value_type *)(a2 + 216);
  return std::__fs::filesystem::operator==[abi:ne180100](a1 + 9, v4);
}

BOOL std::__fs::filesystem::operator==[abi:ne180100](const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  std::basic_string_view<_CharT, _Traits>::size_type v2;

  v2 = *((_QWORD *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v2;
  }
  return std::__fs::filesystem::path::__compare(a1, a2) == 0;
}

BOOL adm::graph::KernelConfiguration::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  char *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2)
    return 0;
  while (v2 != v3)
  {
    result = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v2, v4);
    if (!result)
      return result;
    v2 += 40;
    v4 += 40;
  }
  v8 = a1[3];
  v9 = a1[4];
  v10 = a2[3];
  if (v9 - v8 != a2[4] - v10)
    return 0;
  while (v8 != v9)
  {
    result = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v8, v10);
    if (!result)
      return result;
    v8 += 40;
    v10 += 40;
  }
  v12 = (char *)a1[6];
  v11 = (char *)a1[7];
  v13 = (_DWORD *)a2[6];
  if (v11 - v12 != a2[7] - (_QWORD)v13)
    return 0;
  while (v12 != v11)
  {
    if (*(_DWORD *)v12 != *v13)
      return 0;
    v12 += 8;
    v13 += 2;
  }
  v15 = (char *)a1[9];
  v14 = (char *)a1[10];
  v16 = (_DWORD *)a2[9];
  if (v14 - v15 != a2[10] - (_QWORD)v16)
    return 0;
  while (v15 != v14)
  {
    if (*(_DWORD *)v15 != *v16)
      return 0;
    v15 += 8;
    v16 += 2;
  }
  v18 = a1[12];
  v17 = a1[13];
  v19 = a2[12];
  if (v17 - v18 != a2[13] - v19)
    return 0;
  while (v18 != v17)
  {
    if (*(_DWORD *)v18 != *(_DWORD *)v19 || *(float *)(v18 + 4) != *(float *)(v19 + 4))
      return 0;
    v18 += 8;
    v19 += 8;
  }
  v22 = a1[15];
  v21 = a1[16];
  v23 = (uint64_t *)a2[15];
  if (v21 - v22 != a2[16] - (_QWORD)v23)
    return 0;
  if (v22 == v21)
    return 1;
  v24 = v22 + 16;
  do
  {
    v25 = *v23;
    v23 += 2;
    result = *(_QWORD *)(v24 - 16) == v25;
    v26 = *(_QWORD *)(v24 - 16) != v25 || v24 == v21;
    v24 += 16;
  }
  while (!v26);
  return result;
}

BOOL std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

adm::graph::GraphBuilder *adm::graph::GraphBuilder::GraphBuilder(adm::graph::GraphBuilder *this, const SystemConfiguration *a2, const HostDescription *a3)
{
  adm::SystemConfiguration *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  v5 = adm::SystemConfiguration::SystemConfiguration(this, a2);
  if (*((char *)&a3->mBundleID.__r_.__value_.var0.var1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v5 + 224), a3->mBundleID.__r_.__value_.var0.var1.__data_, a3->mBundleID.__r_.__value_.var0.var1.__size_);
  }
  else
  {
    v6 = *(_OWORD *)a3->mBundleID.__r_.__value_.var0.var0.__data_;
    *((_QWORD *)v5 + 30) = *((_QWORD *)&a3->mBundleID.__r_.__value_.var0.var1 + 2);
    *((_OWORD *)v5 + 14) = v6;
  }
  v7 = (std::string *)((char *)this + 248);
  if (a3[1].mBundleID.__r_.__value_.var0.var0.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)&a3->mBundleID.__r_.var0, a3->mBundleID.var0);
  }
  else
  {
    v8 = *(_OWORD *)&a3->mBundleID.__r_.var0;
    *((_QWORD *)this + 33) = a3[1].mBundleID.__r_.__value_.var0.var1.__data_;
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_236C95484(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 247) < 0)
    operator delete(*v2);
  adm::SystemConfiguration::~SystemConfiguration((void **)v1);
  _Unwind_Resume(a1);
}

void adm::graph::GraphBuilder::buildGraph(adm::graph::GraphBuilder *this, const adm::ConfigurationChangeRequest *a2, uint64_t a3)
{
  _QWORD *v5;
  size_t v6;
  std::string *v7;
  char *v8;
  const std::string::value_type *v9;
  char *v10;
  const std::string::value_type *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *p_p;
  std::string::size_type size;
  std::string *v21;
  const std::string::value_type *v22;
  int v23;
  _QWORD *v24;
  std::string::value_type *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  std::string *v31;
  char *v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  int v43;
  int v44;
  _anonymous_namespace_ **v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  std::string::size_type v49;
  std::string *v50;
  int data;
  int v52;
  BOOL v53;
  int v54;
  _anonymous_namespace_ *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  int v60;
  _anonymous_namespace_ *v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _anonymous_namespace_ *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  int v75;
  __int128 v76;
  std::string::size_type v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  std::string::size_type v87;
  uint64_t v88;
  std::string::size_type v89;
  std::string::size_type v90;
  std::string::size_type v91;
  std::string::size_type v92;
  uint64_t v93;
  std::string::size_type v94;
  std::string::size_type v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  int v101;
  std::string::size_type v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  unint64_t v108;
  uint64_t v109;
  std::string::size_type v110;
  uint64_t v111;
  std::string::size_type v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  std::string::size_type v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  std::string::size_type v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  int64x2_t v133;
  std::string::size_type v134;
  std::string::pointer v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  std::string::size_type v141;
  uint64_t v142;
  std::string::size_type v143;
  std::string::size_type v144;
  std::string::size_type v145;
  std::string::size_type v146;
  uint64_t v147;
  std::string::size_type v148;
  std::string::size_type v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  int v155;
  std::string::pointer v156;
  const DeviceDescription *v157;
  const DeviceDescription *v158;
  _QWORD *v159;
  _QWORD *v160;
  _BOOL4 v161;
  int v162;
  _QWORD *v163;
  uint64_t v164;
  double v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  unsigned int v171;
  uint64_t v172;
  int v173;
  std::string::size_type v174;
  int v175;
  int v176;
  std::string::size_type v177;
  std::string *v178;
  int v179;
  int v180;
  _BOOL4 v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  char *v192;
  std::string::size_type v193;
  uint64_t v194;
  std::string::size_type v195;
  std::string::size_type v196;
  std::string::size_type v197;
  std::string::size_type v198;
  uint64_t v199;
  std::string::size_type v200;
  std::string::size_type v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  int v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  int v215;
  __int128 v216;
  std::string::size_type v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  std::string::pointer v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  char *v227;
  std::string::size_type v228;
  uint64_t v229;
  std::string::size_type v230;
  std::string::size_type v231;
  std::string::size_type v232;
  std::string::size_type v233;
  uint64_t v234;
  std::string::size_type v235;
  std::string::size_type v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  int v242;
  std::string::pointer v243;
  std::string::size_type v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  std::string::size_type v251;
  uint64_t v252;
  std::string::size_type v253;
  uint64_t v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  int64x2_t v260;
  std::string::size_type v261;
  _QWORD *v262;
  uint64_t v263;
  int v264;
  _BOOL4 v265;
  _QWORD *v266;
  unsigned int v267;
  int v268;
  _BOOL4 isHighLatencyRoute;
  NSObject *adm_log_object;
  int v271;
  int v272;
  NSObject *v273;
  unsigned __int8 *v274;
  std::string *v275;
  uint64_t v276;
  _BYTE *v277;
  _BYTE *v278;
  size_t v279;
  char *v280;
  char *v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  int v290;
  __int128 v291;
  std::string::size_type v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  NSObject *v297;
  std::string::size_type v298;
  _QWORD *v299;
  unsigned int v300;
  int v301;
  std::string *v302;
  int v303;
  unsigned int v304;
  std::string *v305;
  uint64_t v306;
  NSObject *v307;
  std::string::size_type v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  _BYTE *v316;
  __int128 v317;
  __int128 v318;
  std::string::size_type v319;
  uint64_t v320;
  std::string::size_type v321;
  uint64_t v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  int64x2_t v328;
  std::string::size_type v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  __int128 v335;
  __int128 v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  int v341;
  __int128 v342;
  std::string::size_type v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  std::string::size_type v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  _BYTE *v356;
  __int128 v357;
  __int128 v358;
  std::string::size_type v359;
  uint64_t v360;
  std::string::size_type v361;
  uint64_t v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  int64x2_t v368;
  std::string::size_type v369;
  double *v370;
  double *v371;
  NSObject *v372;
  uint64_t v373;
  uint64_t v374;
  unsigned int v375;
  int v376;
  unsigned int v377;
  int v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  NSObject *v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  char *v394;
  uint64_t v395;
  uint64_t *v396;
  _QWORD *v397;
  _QWORD *v398;
  char *v399;
  __int128 v400;
  int64x2_t v401;
  int v402;
  NSObject *v403;
  unsigned int v404;
  unsigned int v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  __int128 v409;
  int v410;
  __int128 v411;
  std::string::size_type v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  std::string::size_type v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  std::string::size_type v424;
  uint64_t v425;
  std::string::size_type v426;
  uint64_t v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  int64x2_t v433;
  std::string::size_type v434;
  void *v435;
  __int128 v436;
  __int128 v437;
  int v438;
  _QWORD *v439;
  int v440;
  float *v441;
  float32x2x2_t v442;
  unint64_t v443;
  int v444;
  size_t v445;
  std::string *v446;
  const void *v447;
  int v448;
  const std::string::value_type *v449;
  std::string::size_type v450;
  std::string *v451;
  __int128 v452;
  uint64_t v453;
  __int128 v454;
  uint64_t v455;
  void *v456;
  unsigned __int8 *v457;
  int8x8_t *v458;
  int v459;
  std::string::value_type *v460;
  std::string *v461;
  _QWORD *v462;
  std::string *v463;
  _QWORD *v464;
  std::string *v465;
  std::string *v466;
  _anonymous_namespace_ *DeviceDescription;
  const DeviceDescription *v468;
  _anonymous_namespace_ *v469;
  int v470;
  const std::string::value_type *v471;
  std::string::size_type v472;
  _anonymous_namespace_ *v473;
  _anonymous_namespace_ *v474;
  const DeviceDescription *v475;
  std::string *v476;
  unint64_t v477;
  int8x8_t v478;
  unint64_t v479;
  uint8x8_t v480;
  unint64_t v481;
  unint64_t v482;
  unsigned __int8 **v483;
  unsigned __int8 *v484;
  unint64_t v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unsigned int v493;
  std::string::size_type v494;
  std::string *v495;
  unsigned int v496;
  unsigned int v497;
  NSObject *v498;
  std::string *v499;
  _QWORD *v500;
  uint64_t v501;
  _QWORD *v502;
  _anonymous_namespace_ *v504;
  _QWORD *v505;
  _anonymous_namespace_ *v506;
  const adm::ConfigurationChangeRequest *v507;
  uint64_t v508;
  const std::string::value_type *v509;
  uint64_t v510;
  int v511;
  std::string::size_type v513;
  std::string::size_type v514;
  std::string::size_type v515;
  std::string::size_type v516;
  int v517;
  uint64_t v518;
  __int128 *v519;
  std::string::size_type __sz;
  uint64_t __sza;
  int __szb;
  const std::string::value_type *__s;
  int __sa;
  _QWORD *__sb;
  std::string v526;
  std::string v527;
  __int128 v528;
  std::string::pointer v529;
  std::string v530;
  uint64_t v531;
  __int128 v532;
  uint64_t v533;
  _DWORD v534[2];
  std::string __p;
  char *v536;
  std::string::pointer *v537;
  std::string v538[3];
  __int128 v539;
  uint64_t v540;
  void *v541[2];
  _OWORD v542[2];
  __int128 v543;
  __int128 v544;
  __int128 v545;
  int v546;
  __int128 v547;
  std::string::size_type v548;
  std::string v549;
  _BYTE v550[48];
  _BYTE v551[56];
  std::string v552;
  __int128 v553;
  uint64_t v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  __int128 v560;
  int v561;
  __int128 v562;
  std::string::size_type v563;
  int v564;
  _BYTE v565[24];
  uint64_t v566;

  v566 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)(a3 + 8);
  if (adm::config_policy::isExclaveUseCase(a3 + 8))
  {
    if (*((char *)a2 + 247) >= 0)
      v6 = *((unsigned __int8 *)a2 + 247);
    else
      v6 = *((_QWORD *)a2 + 29);
    std::string::basic_string[abi:ne180100]((uint64_t)&v530, v6 + 1);
    if ((v530.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v530;
    else
      v7 = (std::string *)v530.__r_.__value_.__r.__words[0];
    if (v6)
    {
      if (*((char *)a2 + 247) >= 0)
        v8 = (char *)a2 + 224;
      else
        v8 = (char *)*((_QWORD *)a2 + 28);
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 95;
    v11 = (const std::string::value_type *)*((_QWORD *)a2 + 31);
    v10 = (char *)a2 + 248;
    v9 = v11;
    v12 = v10[23];
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = v10[23];
    else
      v14 = *((_QWORD *)v10 + 1);
    v15 = std::string::append(&v530, v13, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v538[0].__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v538[0].__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(v538, "_", 1uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v549.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v549.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v549, (const std::string::value_type *)p_p, size);
    v22 = (const std::string::value_type *)v21->__r_.__value_.__r.__words[0];
    __sz = v21->__r_.__value_.__l.__size_;
    *(_DWORD *)v565 = v21->__r_.__value_.__r.__words[2];
    *(_DWORD *)&v565[3] = *(_DWORD *)((char *)&v21->__r_.__value_.__r.__words[2] + 3);
    v23 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v549.__r_.__value_.__l.__data_);
    if (SHIBYTE(v538[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v538[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v530.__r_.__value_.__l.__data_);
    v509 = v22;
    if (v23 < 0)
    {
      std::string::__init_copy_ctor_external(&v530, v22, __sz);
    }
    else
    {
      v530.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      v530.__r_.__value_.__l.__size_ = __sz;
      LODWORD(v530.__r_.__value_.__r.__words[2]) = *(_DWORD *)v565;
      *(_DWORD *)((char *)&v530.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v565[3];
      *((_BYTE *)&v530.__r_.__value_.__s + 23) = v23;
    }
    if (*(_BYTE *)(a3 + 164))
      v44 = *(_DWORD *)(a3 + 160);
    else
      v44 = 1024;
    LODWORD(v531) = 1;
    HIDWORD(v531) = v44;
    v517 = v23;
    std::string::basic_string[abi:ne180100]<0>(&v532, (char *)&unk_236CE4E1D);
    v528 = 0uLL;
    v529 = 0;
    adm::config_policy::getActiveStreamInfo((adm::config_policy *)&v527, (const ConfigurationChangeRequest *)a3);
    v501 = (uint64_t)v5;
    v513 = v527.__r_.__value_.__l.__size_;
    v45 = (_anonymous_namespace_ **)v527.__r_.__value_.__r.__words[0];
    if (v527.__r_.__value_.__r.__words[0] != v527.__r_.__value_.__l.__size_)
    {
      v46 = 0;
      v47 = 0;
      v504 = 0;
      v506 = 0;
      __sa = 0;
      while (1)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v549, (uint64_t)v45[1] + 32, "general");
        v48 = v47;
        v49 = HIBYTE(v549.__r_.__value_.__r.__words[2]);
        if ((v549.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v49 = v549.__r_.__value_.__l.__size_;
        if (v49 == 7)
        {
          v50 = (std::string *)v549.__r_.__value_.__r.__words[0];
          if ((v549.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v50 = &v549;
          data = (int)v50->__r_.__value_.__l.__data_;
          v52 = *(_DWORD *)((char *)v50->__r_.__value_.__r.__words + 3);
          v53 = data == 1701733735 && v52 == 1818325605;
          v54 = v53;
          if ((SHIBYTE(v549.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_91:
            if (!v54)
              goto LABEL_99;
            goto LABEL_92;
          }
        }
        else
        {
          v54 = 0;
          if ((SHIBYTE(v549.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_91;
        }
        operator delete(v549.__r_.__value_.__l.__data_);
        if (!v54)
        {
LABEL_99:
          if (std::operator==[abi:ne180100]<std::string,char [10]>((const void **)v45[1] + 4, "reference"))
          {
            v506 = *v45;
            if (v23 < 0)
            {
              std::string::__init_copy_ctor_external(&v549, v22, __sz);
            }
            else
            {
              v549.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              v549.__r_.__value_.__l.__size_ = __sz;
              LODWORD(v549.__r_.__value_.__r.__words[2]) = *(_DWORD *)v565;
              *(_DWORD *)((char *)&v549.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v565[3];
              *((_BYTE *)&v549.__r_.__value_.__s + 23) = v23;
            }
            *(_DWORD *)v550 = 0;
            v61 = v45[1];
            v63 = *((_OWORD *)v61 + 4);
            v62 = *((_OWORD *)v61 + 5);
            *(_QWORD *)&v550[40] = *((_QWORD *)v61 + 12);
            *(_OWORD *)&v550[8] = v63;
            *(_OWORD *)&v550[24] = v62;
            LODWORD(__p.__r_.__value_.__l.__data_) = 1;
            adm::graph::SemanticSet::SemanticSet(v551, (int *)&__p, 1);
            *(_DWORD *)&v551[8] = v46;
            *(_QWORD *)&v551[12] = 1;
            v551[24] = 0;
            v551[48] = 0;
            v552.__r_.__value_.__s.__data_[0] = 0;
            v64 = *((_QWORD *)&v528 + 1);
            if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
            {
              v65 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
              v66 = v65 + 1;
              if (v65 + 1 > 0x1E1E1E1E1E1E1E1)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v66)
                v66 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
                v67 = 0x1E1E1E1E1E1E1E1;
              else
                v67 = v66;
              v538[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v529;
              if (v67)
                v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v67);
              else
                v68 = 0;
              v102 = v67 + 136 * v65;
              v538[0].__r_.__value_.__r.__words[0] = v67;
              v538[0].__r_.__value_.__l.__size_ = v102;
              v538[1].__r_.__value_.__r.__words[0] = v67 + 136 * v68;
              v103 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
              *(_QWORD *)(v102 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
              *(_OWORD *)v102 = v103;
              memset(&v549, 0, sizeof(v549));
              *(_OWORD *)(v102 + 24) = *(_OWORD *)v550;
              v104 = *(_OWORD *)&v550[16];
              v105 = *(_OWORD *)&v550[32];
              v106 = *(_OWORD *)v551;
              *(_DWORD *)(v102 + 88) = *(_DWORD *)&v551[16];
              *(_OWORD *)(v102 + 72) = v106;
              *(_OWORD *)(v102 + 56) = v105;
              *(_OWORD *)(v102 + 40) = v104;
              *(_BYTE *)(v102 + 96) = 0;
              *(_BYTE *)(v102 + 120) = 0;
              if (v551[48])
              {
                v107 = *(_OWORD *)&v551[24];
                *(_QWORD *)(v102 + 112) = *(_QWORD *)&v551[40];
                *(_OWORD *)(v102 + 96) = v107;
                memset(&v551[24], 0, 24);
                *(_BYTE *)(v102 + 120) = 1;
              }
              *(_BYTE *)(v67 + 136 * v65 + 128) = v552.__r_.__value_.__s.__data_[0];
              v77 = v102 + 136;
              v538[0].__r_.__value_.__r.__words[2] = v102 + 136;
              v108 = *((_QWORD *)&v528 + 1);
              v109 = v528;
              v110 = v538[0].__r_.__value_.__l.__size_;
              if (*((_QWORD *)&v528 + 1) != (_QWORD)v528)
              {
                v111 = 0;
                do
                {
                  v112 = v110 + v111;
                  v113 = v108 + v111;
                  v114 = *(_OWORD *)(v108 + v111 - 136);
                  *(_QWORD *)(v112 - 120) = *(_QWORD *)(v108 + v111 - 120);
                  *(_OWORD *)(v112 - 136) = v114;
                  *(_QWORD *)(v113 - 128) = 0;
                  *(_QWORD *)(v113 - 120) = 0;
                  *(_QWORD *)(v113 - 136) = 0;
                  *(_OWORD *)(v112 - 112) = *(_OWORD *)(v108 + v111 - 112);
                  v115 = *(_OWORD *)(v108 + v111 - 96);
                  v116 = *(_OWORD *)(v108 + v111 - 80);
                  v117 = *(_OWORD *)(v108 + v111 - 64);
                  *(_DWORD *)(v112 - 48) = *(_DWORD *)(v108 + v111 - 48);
                  *(_OWORD *)(v112 - 80) = v116;
                  *(_OWORD *)(v112 - 64) = v117;
                  *(_OWORD *)(v112 - 96) = v115;
                  *(_BYTE *)(v110 + v111 - 40) = 0;
                  *(_BYTE *)(v112 - 16) = 0;
                  if (*(_BYTE *)(v108 + v111 - 16))
                  {
                    v118 = *(_OWORD *)(v113 - 40);
                    *(_QWORD *)(v110 + v111 - 24) = *(_QWORD *)(v113 - 24);
                    *(_OWORD *)(v110 + v111 - 40) = v118;
                    *(_QWORD *)(v113 - 32) = 0;
                    *(_QWORD *)(v113 - 24) = 0;
                    *(_QWORD *)(v113 - 40) = 0;
                    *(_BYTE *)(v112 - 16) = 1;
                  }
                  *(_BYTE *)(v112 - 8) = *(_BYTE *)(v113 - 8);
                  v111 -= 136;
                }
                while (v108 + v111 != v109);
                goto LABEL_161;
              }
LABEL_162:
              v133 = vdupq_n_s64(v108);
              goto LABEL_163;
            }
LABEL_118:
            v72 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
            *(_QWORD *)(v64 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
            *(_OWORD *)v64 = v72;
            memset(&v549, 0, sizeof(v549));
            *(_OWORD *)(v64 + 24) = *(_OWORD *)v550;
            v74 = *(_OWORD *)&v550[32];
            v73 = *(_OWORD *)v551;
            v75 = *(_DWORD *)&v551[16];
            *(_OWORD *)(v64 + 40) = *(_OWORD *)&v550[16];
            *(_DWORD *)(v64 + 88) = v75;
            *(_OWORD *)(v64 + 72) = v73;
            *(_OWORD *)(v64 + 56) = v74;
            *(_BYTE *)(v64 + 96) = 0;
            *(_BYTE *)(v64 + 120) = 0;
            if (v551[48])
            {
              v76 = *(_OWORD *)&v551[24];
              *(_QWORD *)(v64 + 112) = *(_QWORD *)&v551[40];
              *(_OWORD *)(v64 + 96) = v76;
              memset(&v551[24], 0, 24);
              *(_BYTE *)(v64 + 120) = 1;
            }
            *(_BYTE *)(v64 + 128) = v552.__r_.__value_.__s.__data_[0];
            v77 = v64 + 136;
          }
          else
          {
            if (v23 < 0)
            {
              std::string::__init_copy_ctor_external(&v549, v22, __sz);
            }
            else
            {
              v549.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              v549.__r_.__value_.__l.__size_ = __sz;
              LODWORD(v549.__r_.__value_.__r.__words[2]) = *(_DWORD *)v565;
              *(_DWORD *)((char *)&v549.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v565[3];
              *((_BYTE *)&v549.__r_.__value_.__s + 23) = v23;
            }
            *(_DWORD *)v550 = 0;
            v69 = v45[1];
            v71 = *((_OWORD *)v69 + 4);
            v70 = *((_OWORD *)v69 + 5);
            *(_QWORD *)&v550[40] = *((_QWORD *)v69 + 12);
            *(_OWORD *)&v550[8] = v71;
            *(_OWORD *)&v550[24] = v70;
            LODWORD(__p.__r_.__value_.__l.__data_) = 2;
            adm::graph::SemanticSet::SemanticSet(v551, (int *)&__p, 1);
            *(_DWORD *)&v551[8] = v46;
            *(_QWORD *)&v551[12] = 1;
            v551[24] = 0;
            v551[48] = 0;
            v552.__r_.__value_.__s.__data_[0] = 0;
            v64 = *((_QWORD *)&v528 + 1);
            if (*((_QWORD *)&v528 + 1) < (unint64_t)v529)
              goto LABEL_118;
            v78 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
            v79 = v78 + 1;
            if (v78 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v79)
              v79 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
              v80 = 0x1E1E1E1E1E1E1E1;
            else
              v80 = v79;
            v538[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v529;
            if (v80)
              v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v80);
            else
              v81 = 0;
            v119 = v80 + 136 * v78;
            v538[0].__r_.__value_.__r.__words[0] = v80;
            v538[0].__r_.__value_.__l.__size_ = v119;
            v538[1].__r_.__value_.__r.__words[0] = v80 + 136 * v81;
            v120 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
            *(_QWORD *)(v119 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
            *(_OWORD *)v119 = v120;
            memset(&v549, 0, sizeof(v549));
            *(_OWORD *)(v119 + 24) = *(_OWORD *)v550;
            v121 = *(_OWORD *)&v550[16];
            v122 = *(_OWORD *)&v550[32];
            v123 = *(_OWORD *)v551;
            *(_DWORD *)(v119 + 88) = *(_DWORD *)&v551[16];
            *(_OWORD *)(v119 + 72) = v123;
            *(_OWORD *)(v119 + 56) = v122;
            *(_OWORD *)(v119 + 40) = v121;
            *(_BYTE *)(v119 + 96) = 0;
            *(_BYTE *)(v119 + 120) = 0;
            if (v551[48])
            {
              v124 = *(_OWORD *)&v551[24];
              *(_QWORD *)(v119 + 112) = *(_QWORD *)&v551[40];
              *(_OWORD *)(v119 + 96) = v124;
              memset(&v551[24], 0, 24);
              *(_BYTE *)(v119 + 120) = 1;
            }
            *(_BYTE *)(v80 + 136 * v78 + 128) = v552.__r_.__value_.__s.__data_[0];
            v77 = v119 + 136;
            v538[0].__r_.__value_.__r.__words[2] = v119 + 136;
            v108 = *((_QWORD *)&v528 + 1);
            v125 = v528;
            v110 = v538[0].__r_.__value_.__l.__size_;
            if (*((_QWORD *)&v528 + 1) == (_QWORD)v528)
              goto LABEL_162;
            v111 = 0;
            do
            {
              v126 = v110 + v111;
              v127 = v108 + v111;
              v128 = *(_OWORD *)(v108 + v111 - 136);
              *(_QWORD *)(v126 - 120) = *(_QWORD *)(v108 + v111 - 120);
              *(_OWORD *)(v126 - 136) = v128;
              *(_QWORD *)(v127 - 128) = 0;
              *(_QWORD *)(v127 - 120) = 0;
              *(_QWORD *)(v127 - 136) = 0;
              *(_OWORD *)(v126 - 112) = *(_OWORD *)(v108 + v111 - 112);
              v129 = *(_OWORD *)(v108 + v111 - 96);
              v130 = *(_OWORD *)(v108 + v111 - 80);
              v131 = *(_OWORD *)(v108 + v111 - 64);
              *(_DWORD *)(v126 - 48) = *(_DWORD *)(v108 + v111 - 48);
              *(_OWORD *)(v126 - 80) = v130;
              *(_OWORD *)(v126 - 64) = v131;
              *(_OWORD *)(v126 - 96) = v129;
              *(_BYTE *)(v110 + v111 - 40) = 0;
              *(_BYTE *)(v126 - 16) = 0;
              if (*(_BYTE *)(v108 + v111 - 16))
              {
                v132 = *(_OWORD *)(v127 - 40);
                *(_QWORD *)(v110 + v111 - 24) = *(_QWORD *)(v127 - 24);
                *(_OWORD *)(v110 + v111 - 40) = v132;
                *(_QWORD *)(v127 - 32) = 0;
                *(_QWORD *)(v127 - 24) = 0;
                *(_QWORD *)(v127 - 40) = 0;
                *(_BYTE *)(v126 - 16) = 1;
              }
              *(_BYTE *)(v126 - 8) = *(_BYTE *)(v127 - 8);
              v111 -= 136;
            }
            while (v108 + v111 != v125);
LABEL_161:
            v110 += v111;
            v133 = (int64x2_t)v528;
            v77 = v538[0].__r_.__value_.__r.__words[2];
LABEL_163:
            *(_QWORD *)&v528 = v110;
            *((_QWORD *)&v528 + 1) = v77;
            *(int64x2_t *)&v538[0].__r_.__value_.__r.__words[1] = v133;
            v134 = (std::string::size_type)v529;
            v529 = v538[1].__r_.__value_.__l.__data_;
            v538[1].__r_.__value_.__r.__words[0] = v134;
            v538[0].__r_.__value_.__r.__words[0] = v133.i64[0];
            std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v538);
          }
          *((_QWORD *)&v528 + 1) = v77;
          if (v551[48] && (v551[47] & 0x80000000) != 0)
            operator delete(*(void **)&v551[24]);
          v47 = v48;
          if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v549.__r_.__value_.__l.__data_);
          goto LABEL_199;
        }
LABEL_92:
        v55 = v45[1];
        v56 = (uint64_t)v55 + 64;
        v57 = *((_OWORD *)v55 + 5);
        *(_OWORD *)&v538[0].__r_.__value_.__l.__data_ = *((_OWORD *)v55 + 4);
        *(_OWORD *)&v538[0].__r_.__value_.__r.__words[2] = v57;
        v538[1].__r_.__value_.__l.__size_ = *((_QWORD *)v55 + 12);
        v58 = a3 + 32;
        if (!*(_BYTE *)(a3 + 72))
          v58 = v56;
        v59 = *(_OWORD *)(v58 + 16);
        *(_OWORD *)&v538[1].__r_.__value_.__r.__words[2] = *(_OWORD *)v58;
        *(_OWORD *)&v538[2].__r_.__value_.__r.__words[1] = v59;
        *(_QWORD *)&v539 = *(_QWORD *)(v58 + 32);
        if (__sa)
        {
          LOBYTE(v60) = v23;
          if ((v23 & 0x80000000) == 0)
            goto LABEL_177;
        }
        else
        {
          v504 = *v45;
          v60 = v23;
          if (v23 < 0)
          {
            std::string::__init_copy_ctor_external(&v549, v22, __sz);
          }
          else
          {
            v549.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
            v549.__r_.__value_.__l.__size_ = __sz;
            LODWORD(v549.__r_.__value_.__r.__words[2]) = *(_DWORD *)v565;
            *(_DWORD *)((char *)&v549.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v565[3];
            *((_BYTE *)&v549.__r_.__value_.__s + 23) = v23;
          }
          *(_DWORD *)v550 = 1;
          *(_OWORD *)&v550[8] = *(_OWORD *)&v538[1].__r_.__value_.__r.__words[2];
          *(_OWORD *)&v550[24] = *(_OWORD *)&v538[2].__r_.__value_.__r.__words[1];
          *(_QWORD *)&v550[40] = v539;
          *(_QWORD *)v551 = 0;
          *(_DWORD *)&v551[8] = v48;
          *(_QWORD *)&v551[12] = 1;
          v551[24] = 0;
          v551[48] = 0;
          v552.__r_.__value_.__s.__data_[0] = 0;
          v82 = *((_QWORD *)&v528 + 1);
          if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
          {
            v83 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
            v84 = v83 + 1;
            if (v83 + 1 > 0x1E1E1E1E1E1E1E1)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v84)
              v84 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
            if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
              v85 = 0x1E1E1E1E1E1E1E1;
            else
              v85 = v84;
            v537 = &v529;
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v85);
            v87 = (std::string::size_type)&v86[136 * v83];
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
            __p.__r_.__value_.__l.__size_ = v87;
            v536 = &v86[136 * v88];
            *(std::string *)v87 = v549;
            memset(&v549, 0, sizeof(v549));
            *(_OWORD *)(v87 + 56) = *(_OWORD *)&v550[32];
            *(_OWORD *)(v87 + 72) = *(_OWORD *)v551;
            *(_DWORD *)(v87 + 88) = *(_DWORD *)&v551[16];
            *(_OWORD *)(v87 + 40) = *(_OWORD *)&v550[16];
            *(_OWORD *)(v87 + 24) = *(_OWORD *)v550;
            *(_BYTE *)(v87 + 96) = 0;
            *(_BYTE *)(v87 + 120) = 0;
            v90 = *((_QWORD *)&v528 + 1);
            v89 = v528;
            v91 = __p.__r_.__value_.__l.__size_;
            *(_BYTE *)(v87 + 128) = 0;
            v92 = v87 + 136;
            __p.__r_.__value_.__r.__words[2] = v87 + 136;
            if (v90 == v89)
            {
              v101 = 0;
            }
            else
            {
              v93 = 0;
              do
              {
                v94 = v91 + v93;
                v95 = v90 + v93;
                v96 = *(_OWORD *)(v90 + v93 - 136);
                *(_QWORD *)(v94 - 120) = *(_QWORD *)(v90 + v93 - 120);
                *(_OWORD *)(v94 - 136) = v96;
                *(_QWORD *)(v95 - 128) = 0;
                *(_QWORD *)(v95 - 120) = 0;
                *(_QWORD *)(v95 - 136) = 0;
                *(_OWORD *)(v94 - 112) = *(_OWORD *)(v90 + v93 - 112);
                v97 = *(_OWORD *)(v90 + v93 - 96);
                v98 = *(_OWORD *)(v90 + v93 - 80);
                v99 = *(_OWORD *)(v90 + v93 - 64);
                *(_DWORD *)(v94 - 48) = *(_DWORD *)(v90 + v93 - 48);
                *(_OWORD *)(v94 - 80) = v98;
                *(_OWORD *)(v94 - 64) = v99;
                *(_OWORD *)(v94 - 96) = v97;
                *(_BYTE *)(v91 + v93 - 40) = 0;
                *(_BYTE *)(v94 - 16) = 0;
                if (*(_BYTE *)(v90 + v93 - 16))
                {
                  v100 = *(_OWORD *)(v95 - 40);
                  *(_QWORD *)(v91 + v93 - 24) = *(_QWORD *)(v95 - 24);
                  *(_OWORD *)(v91 + v93 - 40) = v100;
                  *(_QWORD *)(v95 - 32) = 0;
                  *(_QWORD *)(v95 - 24) = 0;
                  *(_QWORD *)(v95 - 40) = 0;
                  *(_BYTE *)(v94 - 16) = 1;
                }
                *(_BYTE *)(v94 - 8) = *(_BYTE *)(v95 - 8);
                v93 -= 136;
              }
              while (v90 + v93 != v89);
              v91 += v93;
              v90 = *((_QWORD *)&v528 + 1);
              v89 = v528;
              v92 = __p.__r_.__value_.__r.__words[2];
              v101 = v551[48];
            }
            *(_QWORD *)&v528 = v91;
            *((_QWORD *)&v528 + 1) = v92;
            v135 = v529;
            v529 = v536;
            __p.__r_.__value_.__r.__words[2] = v90;
            v536 = v135;
            __p.__r_.__value_.__r.__words[0] = v89;
            __p.__r_.__value_.__l.__size_ = v89;
            std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
            *((_QWORD *)&v528 + 1) = v92;
            v48 = (v48 + 1);
            if (v101)
            {
              v60 = v23;
              if ((v551[47] & 0x80000000) != 0)
                operator delete(*(void **)&v551[24]);
              v22 = v509;
            }
            else
            {
              v22 = v509;
              v60 = v23;
            }
          }
          else
          {
            **((_OWORD **)&v528 + 1) = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
            *(_QWORD *)(v82 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
            memset(&v549, 0, sizeof(v549));
            *(_OWORD *)(v82 + 40) = *(_OWORD *)&v550[16];
            *(_OWORD *)(v82 + 56) = *(_OWORD *)&v550[32];
            *(_OWORD *)(v82 + 72) = *(_OWORD *)v551;
            *(_DWORD *)(v82 + 88) = *(_DWORD *)&v551[16];
            *(_OWORD *)(v82 + 24) = *(_OWORD *)v550;
            *(_BYTE *)(v82 + 96) = 0;
            *(_BYTE *)(v82 + 120) = 0;
            *(_BYTE *)(v82 + 128) = 0;
            *((_QWORD *)&v528 + 1) = v82 + 136;
            v48 = (v48 + 1);
          }
          if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v549.__r_.__value_.__l.__data_);
            if ((v60 & 0x80000000) == 0)
            {
LABEL_177:
              v549.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
              v549.__r_.__value_.__l.__size_ = __sz;
              LODWORD(v549.__r_.__value_.__r.__words[2]) = *(_DWORD *)v565;
              *(_DWORD *)((char *)&v549.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v565[3];
              *((_BYTE *)&v549.__r_.__value_.__s + 23) = v60;
              v47 = v48;
              goto LABEL_178;
            }
          }
          else if ((v60 & 0x80000000) == 0)
          {
            goto LABEL_177;
          }
        }
        std::string::__init_copy_ctor_external(&v549, v22, __sz);
        v47 = v48;
LABEL_178:
        *(_DWORD *)v550 = 0;
        *(_OWORD *)&v550[8] = *(_OWORD *)&v538[0].__r_.__value_.__l.__data_;
        *(_OWORD *)&v550[24] = *(_OWORD *)&v538[0].__r_.__value_.__r.__words[2];
        *(_QWORD *)&v550[40] = v538[1].__r_.__value_.__l.__size_;
        *(_QWORD *)v551 = 0;
        *(_DWORD *)&v551[8] = v46;
        *(_QWORD *)&v551[12] = 1;
        v551[24] = 0;
        v551[48] = 0;
        v552.__r_.__value_.__s.__data_[0] = 0;
        v136 = *((_QWORD *)&v528 + 1);
        if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
        {
          v137 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
          v138 = v137 + 1;
          if (v137 + 1 > 0x1E1E1E1E1E1E1E1)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v138)
            v138 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
            v139 = 0x1E1E1E1E1E1E1E1;
          else
            v139 = v138;
          v537 = &v529;
          v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v139);
          v141 = (std::string::size_type)&v140[136 * v137];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
          __p.__r_.__value_.__l.__size_ = v141;
          v536 = &v140[136 * v142];
          *(std::string *)v141 = v549;
          memset(&v549, 0, sizeof(v549));
          *(_OWORD *)(v141 + 56) = *(_OWORD *)&v550[32];
          *(_OWORD *)(v141 + 72) = *(_OWORD *)v551;
          *(_DWORD *)(v141 + 88) = *(_DWORD *)&v551[16];
          *(_OWORD *)(v141 + 40) = *(_OWORD *)&v550[16];
          *(_OWORD *)(v141 + 24) = *(_OWORD *)v550;
          *(_BYTE *)(v141 + 96) = 0;
          *(_BYTE *)(v141 + 120) = 0;
          v144 = *((_QWORD *)&v528 + 1);
          v143 = v528;
          v145 = __p.__r_.__value_.__l.__size_;
          *(_BYTE *)(v141 + 128) = 0;
          v146 = v141 + 136;
          __p.__r_.__value_.__r.__words[2] = v141 + 136;
          if (v144 == v143)
          {
            v155 = 0;
          }
          else
          {
            v147 = 0;
            do
            {
              v148 = v145 + v147;
              v149 = v144 + v147;
              v150 = *(_OWORD *)(v144 + v147 - 136);
              *(_QWORD *)(v148 - 120) = *(_QWORD *)(v144 + v147 - 120);
              *(_OWORD *)(v148 - 136) = v150;
              *(_QWORD *)(v149 - 128) = 0;
              *(_QWORD *)(v149 - 120) = 0;
              *(_QWORD *)(v149 - 136) = 0;
              *(_OWORD *)(v148 - 112) = *(_OWORD *)(v144 + v147 - 112);
              v151 = *(_OWORD *)(v144 + v147 - 96);
              v152 = *(_OWORD *)(v144 + v147 - 80);
              v153 = *(_OWORD *)(v144 + v147 - 64);
              *(_DWORD *)(v148 - 48) = *(_DWORD *)(v144 + v147 - 48);
              *(_OWORD *)(v148 - 80) = v152;
              *(_OWORD *)(v148 - 64) = v153;
              *(_OWORD *)(v148 - 96) = v151;
              *(_BYTE *)(v145 + v147 - 40) = 0;
              *(_BYTE *)(v148 - 16) = 0;
              if (*(_BYTE *)(v144 + v147 - 16))
              {
                v154 = *(_OWORD *)(v149 - 40);
                *(_QWORD *)(v145 + v147 - 24) = *(_QWORD *)(v149 - 24);
                *(_OWORD *)(v145 + v147 - 40) = v154;
                *(_QWORD *)(v149 - 32) = 0;
                *(_QWORD *)(v149 - 24) = 0;
                *(_QWORD *)(v149 - 40) = 0;
                *(_BYTE *)(v148 - 16) = 1;
              }
              *(_BYTE *)(v148 - 8) = *(_BYTE *)(v149 - 8);
              v147 -= 136;
            }
            while (v144 + v147 != v143);
            v145 += v147;
            v144 = *((_QWORD *)&v528 + 1);
            v143 = v528;
            v146 = __p.__r_.__value_.__r.__words[2];
            v155 = v551[48];
          }
          *(_QWORD *)&v528 = v145;
          *((_QWORD *)&v528 + 1) = v146;
          v156 = v529;
          v529 = v536;
          __p.__r_.__value_.__r.__words[2] = v144;
          v536 = v156;
          __p.__r_.__value_.__r.__words[0] = v143;
          __p.__r_.__value_.__l.__size_ = v143;
          std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
          *((_QWORD *)&v528 + 1) = v146;
          v47 = v48;
          if (v155 && (v551[47] & 0x80000000) != 0)
            operator delete(*(void **)&v551[24]);
        }
        else
        {
          **((_OWORD **)&v528 + 1) = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
          *(_QWORD *)(v136 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
          memset(&v549, 0, sizeof(v549));
          *(_OWORD *)(v136 + 40) = *(_OWORD *)&v550[16];
          *(_OWORD *)(v136 + 56) = *(_OWORD *)&v550[32];
          *(_OWORD *)(v136 + 72) = *(_OWORD *)v551;
          *(_DWORD *)(v136 + 88) = *(_DWORD *)&v551[16];
          *(_OWORD *)(v136 + 24) = *(_OWORD *)v550;
          *(_BYTE *)(v136 + 96) = 0;
          *(_BYTE *)(v136 + 120) = 0;
          *(_BYTE *)(v136 + 128) = 0;
          *((_QWORD *)&v528 + 1) = v136 + 136;
        }
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
        ++__sa;
        v22 = v509;
LABEL_199:
        ++v46;
        v45 += 3;
        if (v45 == (_anonymous_namespace_ **)v513)
          goto LABEL_204;
      }
    }
    v504 = 0;
    v506 = 0;
LABEL_204:
    std::string::basic_string[abi:ne180100]<0>(&v549, "isolated audio siri");
    v159 = std::__tree<std::string>::find<std::string>(v501, &v549);
    v160 = (_QWORD *)(a3 + 16);
    if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v549.__r_.__value_.__l.__data_);
    if (v160 == v159)
    {
      std::string::basic_string[abi:ne180100]<0>(&v549, "isolated audio muted talker detection");
      v163 = std::__tree<std::string>::find<std::string>(v501, &v549);
      if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v549.__r_.__value_.__l.__data_);
      if (v160 == v163)
      {
        std::string::basic_string[abi:ne180100]<0>(&v549, "isolated audio sound analysis");
        v266 = std::__tree<std::string>::find<std::string>(v501, &v549);
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
        v161 = v160 != v266;
        v162 = 2 * v161;
      }
      else
      {
        v162 = 0;
        v161 = 1;
      }
    }
    else
    {
      v161 = 1;
      v162 = 1;
    }
    v267 = 1970170734;
    if (v504 && adm::config_policy::isBuiltInMicrophoneDevice(v504, v157))
    {
      v268 = 1886216809;
      if (!v506)
        goto LABEL_339;
    }
    else
    {
      v268 = 1970170734;
      if (!v506)
      {
LABEL_339:
        if (!v161)
        {
LABEL_340:
          adm_log_object = get_adm_log_object();
          if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
          {
            v549.__r_.__value_.__r.__words[0] = 67109120;
            _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "unsupported configuration: useCase:%d", (uint8_t *)&v549, 8u);
          }
          *(_QWORD *)this = 1969448551;
          *((_BYTE *)this + 312) = 0;
          v271 = v517;
LABEL_423:
          if (v527.__r_.__value_.__r.__words[0])
            operator delete(v527.__r_.__value_.__l.__data_);
          v549.__r_.__value_.__r.__words[0] = (std::string::size_type)&v528;
          std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
          if (SHIBYTE(v533) < 0)
            operator delete((void *)v532);
          if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v530.__r_.__value_.__l.__data_);
            if ((v271 & 0x80000000) == 0)
              return;
          }
          else if ((v271 & 0x80000000) == 0)
          {
            return;
          }
          v25 = (std::string::value_type *)v22;
          goto LABEL_704;
        }
LABEL_419:
        *(_OWORD *)&v549.__r_.__value_.__l.__data_ = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
        memset(&v530, 0, sizeof(v530));
        v549.__r_.__value_.__r.__words[2] = v530.__r_.__value_.__r.__words[2];
        *(_QWORD *)v550 = v531;
        *(_OWORD *)&v550[8] = v532;
        v306 = v533;
        v532 = 0uLL;
        v533 = 0;
        *(_OWORD *)&v550[32] = v528;
        *(_QWORD *)&v550[24] = v306;
        *(_QWORD *)v551 = v529;
        v528 = 0uLL;
        v529 = 0;
        *(_DWORD *)&v551[8] = v162;
        *(_DWORD *)&v551[12] = v268;
        *(_DWORD *)&v551[16] = v267;
        *(_DWORD *)&v551[20] = isHighLatencyRoute;
        v564 = 2;
        caulk::expected<adm::graph::GraphDescription,std::error_code>::expected((uint64_t)this, (__int128 *)&v549);
        std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v551[8]);
        v538[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v550[32];
        std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)v538);
        if ((v550[31] & 0x80000000) != 0)
          operator delete(*(void **)&v550[8]);
        v271 = v517;
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
        goto LABEL_423;
      }
    }
    v272 = *((_DWORD *)v506 + 16);
    if (v272 <= 1651275108)
    {
      switch(v272)
      {
        case 1634300528:
          v267 = 1885433971;
          break;
        case 1651271009:
          v267 = 1886152047;
          break;
        case 1651274862:
          if (adm::config_policy::isBuiltInSpeakerDevice(v506, v157))
          {
            v267 = 1886613611;
          }
          else if (*((_DWORD *)v506 + 18) == 1751412846)
          {
            v267 = 1885892727;
          }
          break;
      }
    }
    else if (v272 > 1751412072)
    {
      if (v272 == 1751412073)
      {
        v267 = 1885889645;
      }
      else if (v272 == 1970496032)
      {
        v267 = 1886745455;
      }
    }
    else if (v272 == 1651275109)
    {
      v267 = 1885892674;
    }
    else if (v272 == 1685090932)
    {
      v267 = 1885631344;
    }
    v297 = get_adm_log_object();
    if (!os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
      goto LABEL_418;
    v298 = (std::string::size_type)v506;
    if (*((char *)v506 + 23) < 0)
      v298 = *(_QWORD *)v506;
    v299 = (_QWORD *)((char *)v506 + 24);
    if (*((char *)v506 + 47) < 0)
      v299 = (_QWORD *)*v299;
    v300 = *((_DWORD *)v506 + 16);
    v301 = bswap32(v300);
    *(_DWORD *)((char *)&v549.__r_.__value_.__l.__data_ + 1) = v301;
    if (((char)v301 - 32) > 0x5E
      || (((__int16)v301 >> 8) - 32) > 0x5E
      || ((v301 << 8 >> 24) - 32) > 0x5E
      || ((v301 >> 24) - 32) > 0x5E)
    {
      std::to_string(v538, v300);
    }
    else
    {
      *(_WORD *)((char *)v549.__r_.__value_.__r.__words + 5) = 39;
      v549.__r_.__value_.__s.__data_[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(v538, (char *)&v549);
    }
    if ((v538[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v302 = v538;
    else
      v302 = (std::string *)v538[0].__r_.__value_.__r.__words[0];
    v303 = *((_DWORD *)v506 + 18);
    v304 = bswap32(v267);
    *(_DWORD *)((char *)&v549.__r_.__value_.__l.__data_ + 1) = v304;
    if ((~v304 & 0x7F00) == 0 || (v304 & 0x7F0000) == 0x7F0000 || HIBYTE(v304) - 32 > 0x5Eu)
    {
      std::to_string(&__p, v267);
    }
    else
    {
      *(_WORD *)((char *)v549.__r_.__value_.__r.__words + 5) = 39;
      v549.__r_.__value_.__s.__data_[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&v549);
    }
    v305 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v305 = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v549.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)v549.__r_.__value_.__r.__words + 4) = v298;
    WORD2(v549.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v549.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v299;
    HIWORD(v549.__r_.__value_.__r.__words[2]) = 2080;
    *(_QWORD *)v550 = v302;
    *(_WORD *)&v550[8] = 1024;
    *(_DWORD *)&v550[10] = v303;
    *(_WORD *)&v550[14] = 2080;
    *(_QWORD *)&v550[16] = v305;
    _os_log_impl(&dword_236C84000, v297, OS_LOG_TYPE_DEFAULT, "mapped { deviceUID '%s', modelUID '%s', transportType %s, outputDataSource %d } -> output port type %s", (uint8_t *)&v549, 0x30u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v22 = v509;
    if (SHIBYTE(v538[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v538[0].__r_.__value_.__l.__data_);
      if (!v161)
        goto LABEL_340;
    }
    else
    {
LABEL_418:
      if (!v161)
        goto LABEL_340;
    }
    goto LABEL_419;
  }
  std::string::basic_string[abi:ne180100]<0>(&v549, "voice isolation conferencing");
  v24 = std::__tree<std::string>::find<std::string>((uint64_t)v5, &v549);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v549.__r_.__value_.__l.__data_);
  if ((_QWORD *)(a3 + 16) == v24)
  {
    if (*((char *)a2 + 247) >= 0)
      v30 = *((unsigned __int8 *)a2 + 247);
    else
      v30 = *((_QWORD *)a2 + 29);
    std::string::basic_string[abi:ne180100]((uint64_t)&v530, v30 + 1);
    if ((v530.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v530;
    else
      v31 = (std::string *)v530.__r_.__value_.__r.__words[0];
    if (v30)
    {
      if (*((char *)a2 + 247) >= 0)
        v32 = (char *)a2 + 224;
      else
        v32 = (char *)*((_QWORD *)a2 + 28);
      memmove(v31, v32, v30);
    }
    *(_WORD *)((char *)&v31->__r_.__value_.__l.__data_ + v30) = 95;
    v33 = *((char *)a2 + 271);
    if (v33 >= 0)
      v34 = (char *)a2 + 248;
    else
      v34 = (const std::string::value_type *)*((_QWORD *)a2 + 31);
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a2 + 271);
    else
      v35 = *((_QWORD *)a2 + 32);
    v36 = std::string::append(&v530, v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v538[0].__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v538[0].__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(v538, "_", 1uLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v549.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v549.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &__p;
    else
      v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v41 = __p.__r_.__value_.__l.__size_;
    v42 = std::string::append(&v549, (const std::string::value_type *)v40, v41);
    __s = (const std::string::value_type *)v42->__r_.__value_.__r.__words[0];
    v516 = v42->__r_.__value_.__l.__size_;
    v534[0] = v42->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v534 + 3) = *(_DWORD *)((char *)&v42->__r_.__value_.__r.__words[2] + 3);
    v43 = SHIBYTE(v42->__r_.__value_.__r.__words[2]);
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v549.__r_.__value_.__l.__data_);
    if (SHIBYTE(v538[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v538[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v530.__r_.__value_.__l.__data_);
      if ((v43 & 0x80000000) == 0)
        goto LABEL_72;
    }
    else if ((v43 & 0x80000000) == 0)
    {
LABEL_72:
      v530.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v530.__r_.__value_.__l.__size_ = v516;
      LODWORD(v530.__r_.__value_.__r.__words[2]) = v534[0];
      *(_DWORD *)((char *)&v530.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v534 + 3);
      *((_BYTE *)&v530.__r_.__value_.__s + 23) = v43;
      goto LABEL_222;
    }
    std::string::__init_copy_ctor_external(&v530, __s, v516);
LABEL_222:
    v505 = v24;
    v502 = v5;
    if (*(_BYTE *)(a3 + 164))
      v173 = *(_DWORD *)(a3 + 160);
    else
      v173 = 1024;
    LODWORD(v531) = 1;
    HIDWORD(v531) = v173;
    __szb = v43;
    v500 = std::string::basic_string[abi:ne180100]<0>(&v532, (char *)&unk_236CE4E1D);
    v528 = 0uLL;
    v529 = 0;
    adm::config_policy::getActiveStreamInfo((adm::config_policy *)&v527, (const ConfigurationChangeRequest *)a3);
    v515 = v527.__r_.__value_.__l.__size_;
    v174 = v527.__r_.__value_.__r.__words[0];
    if (v527.__r_.__value_.__r.__words[0] != v527.__r_.__value_.__l.__size_)
    {
      v175 = 0;
      v176 = 0;
      do
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v549, *(_QWORD *)(v174 + 8) + 32, "general");
        v177 = HIBYTE(v549.__r_.__value_.__r.__words[2]);
        if ((v549.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v177 = v549.__r_.__value_.__l.__size_;
        if (v177 == 7)
        {
          v178 = (std::string *)v549.__r_.__value_.__r.__words[0];
          if ((v549.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v178 = &v549;
          v179 = (int)v178->__r_.__value_.__l.__data_;
          v180 = *(_DWORD *)((char *)v178->__r_.__value_.__r.__words + 3);
          v182 = v179 == 1701733735 && v180 == 1818325605;
          if ((SHIBYTE(v549.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_239:
            if (!v182)
              goto LABEL_246;
            goto LABEL_240;
          }
        }
        else
        {
          v182 = 0;
          if ((SHIBYTE(v549.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_239;
        }
        operator delete(v549.__r_.__value_.__l.__data_);
        if (!v182)
        {
LABEL_246:
          if (std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(*(_QWORD *)(v174 + 8) + 32), "reference"))
          {
            if (__szb < 0)
            {
              std::string::__init_copy_ctor_external(&v549, __s, v516);
            }
            else
            {
              v549.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
              v549.__r_.__value_.__l.__size_ = v516;
              LODWORD(v549.__r_.__value_.__r.__words[2]) = v534[0];
              *(_DWORD *)((char *)&v549.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v534 + 3);
              *((_BYTE *)&v549.__r_.__value_.__s + 23) = __szb;
            }
            *(_DWORD *)v550 = 0;
            v208 = *(_QWORD *)(v174 + 8);
            v210 = *(_OWORD *)(v208 + 64);
            v209 = *(_OWORD *)(v208 + 80);
            *(_QWORD *)&v550[40] = *(_QWORD *)(v208 + 96);
            *(_OWORD *)&v550[8] = v210;
            *(_OWORD *)&v550[24] = v209;
            LODWORD(__p.__r_.__value_.__l.__data_) = 1;
            adm::graph::SemanticSet::SemanticSet(v551, (int *)&__p, 1);
            *(_DWORD *)&v551[8] = v175;
            *(_QWORD *)&v551[12] = 1;
            v551[24] = 0;
            v551[48] = 0;
            v552.__r_.__value_.__s.__data_[0] = 0;
            v211 = *((_QWORD *)&v528 + 1);
            if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
            {
              v218 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
              v219 = v218 + 1;
              if (v218 + 1 > 0x1E1E1E1E1E1E1E1)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v219)
                v219 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
              if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
                v220 = 0x1E1E1E1E1E1E1E1;
              else
                v220 = v219;
              v538[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v529;
              if (v220)
                v220 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v220);
              else
                v221 = 0;
              v244 = v220 + 136 * v218;
              v538[0].__r_.__value_.__r.__words[0] = v220;
              v538[0].__r_.__value_.__l.__size_ = v244;
              v538[1].__r_.__value_.__r.__words[0] = v220 + 136 * v221;
              v245 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
              *(_QWORD *)(v244 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
              *(_OWORD *)v244 = v245;
              memset(&v549, 0, sizeof(v549));
              *(_OWORD *)(v244 + 24) = *(_OWORD *)v550;
              v246 = *(_OWORD *)&v550[16];
              v247 = *(_OWORD *)&v550[32];
              v248 = *(_OWORD *)v551;
              *(_DWORD *)(v244 + 88) = *(_DWORD *)&v551[16];
              *(_OWORD *)(v244 + 72) = v248;
              *(_OWORD *)(v244 + 56) = v247;
              *(_OWORD *)(v244 + 40) = v246;
              *(_BYTE *)(v244 + 96) = 0;
              *(_BYTE *)(v244 + 120) = 0;
              if (v551[48])
              {
                v249 = *(_OWORD *)&v551[24];
                *(_QWORD *)(v244 + 112) = *(_QWORD *)&v551[40];
                *(_OWORD *)(v244 + 96) = v249;
                memset(&v551[24], 0, 24);
                *(_BYTE *)(v244 + 120) = 1;
              }
              *(_BYTE *)(v220 + 136 * v218 + 128) = v552.__r_.__value_.__s.__data_[0];
              v217 = v244 + 136;
              v538[0].__r_.__value_.__r.__words[2] = v244 + 136;
              v250 = v528;
              v251 = v538[0].__r_.__value_.__l.__size_;
              if (*((_QWORD *)&v528 + 1) == (_QWORD)v528)
              {
                v260 = vdupq_n_s64(*((unint64_t *)&v528 + 1));
              }
              else
              {
                v252 = 0;
                do
                {
                  v253 = v251 + v252;
                  v254 = *((_QWORD *)&v250 + 1) + v252;
                  v255 = *(_OWORD *)(*((_QWORD *)&v250 + 1) + v252 - 136);
                  *(_QWORD *)(v253 - 120) = *(_QWORD *)(*((_QWORD *)&v250 + 1) + v252 - 120);
                  *(_OWORD *)(v253 - 136) = v255;
                  *(_QWORD *)(v254 - 128) = 0;
                  *(_QWORD *)(v254 - 120) = 0;
                  *(_QWORD *)(v254 - 136) = 0;
                  *(_OWORD *)(v253 - 112) = *(_OWORD *)(*((_QWORD *)&v250 + 1) + v252 - 112);
                  v256 = *(_OWORD *)(*((_QWORD *)&v250 + 1) + v252 - 96);
                  v257 = *(_OWORD *)(*((_QWORD *)&v250 + 1) + v252 - 80);
                  v258 = *(_OWORD *)(*((_QWORD *)&v250 + 1) + v252 - 64);
                  *(_DWORD *)(v253 - 48) = *(_DWORD *)(*((_QWORD *)&v250 + 1) + v252 - 48);
                  *(_OWORD *)(v253 - 80) = v257;
                  *(_OWORD *)(v253 - 64) = v258;
                  *(_OWORD *)(v253 - 96) = v256;
                  *(_BYTE *)(v251 + v252 - 40) = 0;
                  *(_BYTE *)(v253 - 16) = 0;
                  if (*(_BYTE *)(*((_QWORD *)&v250 + 1) + v252 - 16))
                  {
                    v259 = *(_OWORD *)(v254 - 40);
                    *(_QWORD *)(v251 + v252 - 24) = *(_QWORD *)(v254 - 24);
                    *(_OWORD *)(v251 + v252 - 40) = v259;
                    *(_QWORD *)(v254 - 32) = 0;
                    *(_QWORD *)(v254 - 24) = 0;
                    *(_QWORD *)(v254 - 40) = 0;
                    *(_BYTE *)(v253 - 16) = 1;
                  }
                  *(_BYTE *)(v253 - 8) = *(_BYTE *)(v254 - 8);
                  v252 -= 136;
                }
                while (*((_QWORD *)&v250 + 1) + v252 != (_QWORD)v250);
                v251 += v252;
                v260 = (int64x2_t)v528;
                v217 = v538[0].__r_.__value_.__r.__words[2];
              }
              *(_QWORD *)&v528 = v251;
              *((_QWORD *)&v528 + 1) = v217;
              *(int64x2_t *)&v538[0].__r_.__value_.__r.__words[1] = v260;
              v261 = (std::string::size_type)v529;
              v529 = v538[1].__r_.__value_.__l.__data_;
              v538[1].__r_.__value_.__r.__words[0] = v261;
              v538[0].__r_.__value_.__r.__words[0] = v260.i64[0];
              std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v538);
            }
            else
            {
              v212 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
              *(_QWORD *)(*((_QWORD *)&v528 + 1) + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
              *(_OWORD *)v211 = v212;
              memset(&v549, 0, sizeof(v549));
              *(_OWORD *)(v211 + 24) = *(_OWORD *)v550;
              v214 = *(_OWORD *)&v550[32];
              v213 = *(_OWORD *)v551;
              v215 = *(_DWORD *)&v551[16];
              *(_OWORD *)(v211 + 40) = *(_OWORD *)&v550[16];
              *(_DWORD *)(v211 + 88) = v215;
              *(_OWORD *)(v211 + 72) = v213;
              *(_OWORD *)(v211 + 56) = v214;
              *(_BYTE *)(v211 + 96) = 0;
              *(_BYTE *)(v211 + 120) = 0;
              if (v551[48])
              {
                v216 = *(_OWORD *)&v551[24];
                *(_QWORD *)(v211 + 112) = *(_QWORD *)&v551[40];
                *(_OWORD *)(v211 + 96) = v216;
                memset(&v551[24], 0, 24);
                *(_BYTE *)(v211 + 120) = 1;
              }
              *(_BYTE *)(v211 + 128) = v552.__r_.__value_.__s.__data_[0];
              v217 = v211 + 136;
            }
            *((_QWORD *)&v528 + 1) = v217;
            if (v551[48] && (v551[47] & 0x80000000) != 0)
              operator delete(*(void **)&v551[24]);
            if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v549.__r_.__value_.__l.__data_);
            ++v175;
          }
          goto LABEL_329;
        }
LABEL_240:
        memset(v538, 0, 40);
        v183 = *(_QWORD *)(v174 + 8) + 64;
        if (*(_BYTE *)(v174 + 16))
        {
          v184 = *(_OWORD *)(*(_QWORD *)(v174 + 8) + 80);
          *(_OWORD *)&v538[0].__r_.__value_.__l.__data_ = *(_OWORD *)v183;
          *(_OWORD *)&v538[0].__r_.__value_.__r.__words[2] = v184;
          v538[1].__r_.__value_.__l.__size_ = *(_QWORD *)(v183 + 32);
          if (*(_BYTE *)(a3 + 72))
            v183 = a3 + 32;
        }
        else
        {
          v185 = a3 + 80;
          if (!*(_BYTE *)(a3 + 120))
            v185 = *(_QWORD *)(v174 + 8) + 64;
          v186 = *(_OWORD *)(v185 + 16);
          *(_OWORD *)&v538[0].__r_.__value_.__l.__data_ = *(_OWORD *)v185;
          *(_OWORD *)&v538[0].__r_.__value_.__r.__words[2] = v186;
          v538[1].__r_.__value_.__l.__size_ = *(_QWORD *)(v185 + 32);
        }
        v187 = *(_OWORD *)(v183 + 16);
        *(_OWORD *)&v538[1].__r_.__value_.__r.__words[2] = *(_OWORD *)v183;
        *(_OWORD *)&v538[2].__r_.__value_.__r.__words[1] = v187;
        *(_QWORD *)&v539 = *(_QWORD *)(v183 + 32);
        if (__szb < 0)
        {
          std::string::__init_copy_ctor_external(&v549, __s, v516);
        }
        else
        {
          v549.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
          v549.__r_.__value_.__l.__size_ = v516;
          LODWORD(v549.__r_.__value_.__r.__words[2]) = v534[0];
          *(_DWORD *)((char *)&v549.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v534 + 3);
          *((_BYTE *)&v549.__r_.__value_.__s + 23) = __szb;
        }
        *(_DWORD *)v550 = 1;
        *(_OWORD *)&v550[8] = *(_OWORD *)&v538[1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v550[24] = *(_OWORD *)&v538[2].__r_.__value_.__r.__words[1];
        *(_QWORD *)&v550[40] = v539;
        *(_QWORD *)v551 = 0;
        *(_DWORD *)&v551[8] = v176;
        *(_QWORD *)&v551[12] = 1;
        v551[24] = 0;
        v551[48] = 0;
        v552.__r_.__value_.__s.__data_[0] = 0;
        v188 = *((_QWORD *)&v528 + 1);
        if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
        {
          v189 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
          v190 = v189 + 1;
          if (v189 + 1 > 0x1E1E1E1E1E1E1E1)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v190)
            v190 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
            v191 = 0x1E1E1E1E1E1E1E1;
          else
            v191 = v190;
          v537 = &v529;
          v192 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v191);
          v193 = (std::string::size_type)&v192[136 * v189];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v192;
          __p.__r_.__value_.__l.__size_ = v193;
          v536 = &v192[136 * v194];
          *(std::string *)v193 = v549;
          memset(&v549, 0, sizeof(v549));
          *(_OWORD *)(v193 + 56) = *(_OWORD *)&v550[32];
          *(_OWORD *)(v193 + 72) = *(_OWORD *)v551;
          *(_DWORD *)(v193 + 88) = *(_DWORD *)&v551[16];
          *(_OWORD *)(v193 + 40) = *(_OWORD *)&v550[16];
          *(_OWORD *)(v193 + 24) = *(_OWORD *)v550;
          *(_BYTE *)(v193 + 96) = 0;
          *(_BYTE *)(v193 + 120) = 0;
          v196 = *((_QWORD *)&v528 + 1);
          v195 = v528;
          v197 = __p.__r_.__value_.__l.__size_;
          *(_BYTE *)(v193 + 128) = 0;
          v198 = v193 + 136;
          __p.__r_.__value_.__r.__words[2] = v193 + 136;
          if (v196 == v195)
          {
            v207 = 0;
          }
          else
          {
            v199 = 0;
            do
            {
              v200 = v197 + v199;
              v201 = v196 + v199;
              v202 = *(_OWORD *)(v196 + v199 - 136);
              *(_QWORD *)(v200 - 120) = *(_QWORD *)(v196 + v199 - 120);
              *(_OWORD *)(v200 - 136) = v202;
              *(_QWORD *)(v201 - 128) = 0;
              *(_QWORD *)(v201 - 120) = 0;
              *(_QWORD *)(v201 - 136) = 0;
              *(_OWORD *)(v200 - 112) = *(_OWORD *)(v196 + v199 - 112);
              v203 = *(_OWORD *)(v196 + v199 - 96);
              v204 = *(_OWORD *)(v196 + v199 - 80);
              v205 = *(_OWORD *)(v196 + v199 - 64);
              *(_DWORD *)(v200 - 48) = *(_DWORD *)(v196 + v199 - 48);
              *(_OWORD *)(v200 - 80) = v204;
              *(_OWORD *)(v200 - 64) = v205;
              *(_OWORD *)(v200 - 96) = v203;
              *(_BYTE *)(v197 + v199 - 40) = 0;
              *(_BYTE *)(v200 - 16) = 0;
              if (*(_BYTE *)(v196 + v199 - 16))
              {
                v206 = *(_OWORD *)(v201 - 40);
                *(_QWORD *)(v197 + v199 - 24) = *(_QWORD *)(v201 - 24);
                *(_OWORD *)(v197 + v199 - 40) = v206;
                *(_QWORD *)(v201 - 32) = 0;
                *(_QWORD *)(v201 - 24) = 0;
                *(_QWORD *)(v201 - 40) = 0;
                *(_BYTE *)(v200 - 16) = 1;
              }
              *(_BYTE *)(v200 - 8) = *(_BYTE *)(v201 - 8);
              v199 -= 136;
            }
            while (v196 + v199 != v195);
            v197 += v199;
            v196 = *((_QWORD *)&v528 + 1);
            v195 = v528;
            v198 = __p.__r_.__value_.__r.__words[2];
            v207 = v551[48];
          }
          *(_QWORD *)&v528 = v197;
          *((_QWORD *)&v528 + 1) = v198;
          v222 = v529;
          v529 = v536;
          __p.__r_.__value_.__r.__words[2] = v196;
          v536 = v222;
          __p.__r_.__value_.__r.__words[0] = v195;
          __p.__r_.__value_.__l.__size_ = v195;
          std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
          *((_QWORD *)&v528 + 1) = v198;
          if (v207 && (v551[47] & 0x80000000) != 0)
            operator delete(*(void **)&v551[24]);
        }
        else
        {
          **((_OWORD **)&v528 + 1) = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
          *(_QWORD *)(v188 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
          memset(&v549, 0, sizeof(v549));
          *(_OWORD *)(v188 + 40) = *(_OWORD *)&v550[16];
          *(_OWORD *)(v188 + 56) = *(_OWORD *)&v550[32];
          *(_OWORD *)(v188 + 72) = *(_OWORD *)v551;
          *(_DWORD *)(v188 + 88) = *(_DWORD *)&v551[16];
          *(_OWORD *)(v188 + 24) = *(_OWORD *)v550;
          *(_BYTE *)(v188 + 96) = 0;
          *(_BYTE *)(v188 + 120) = 0;
          *(_BYTE *)(v188 + 128) = 0;
          *((_QWORD *)&v528 + 1) = v188 + 136;
        }
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
        if (__szb < 0)
        {
          std::string::__init_copy_ctor_external(&v549, __s, v516);
        }
        else
        {
          v549.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
          v549.__r_.__value_.__l.__size_ = v516;
          LODWORD(v549.__r_.__value_.__r.__words[2]) = v534[0];
          *(_DWORD *)((char *)&v549.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v534 + 3);
          *((_BYTE *)&v549.__r_.__value_.__s + 23) = __szb;
        }
        *(_DWORD *)v550 = 0;
        *(_OWORD *)&v550[8] = *(_OWORD *)&v538[0].__r_.__value_.__l.__data_;
        *(_OWORD *)&v550[24] = *(_OWORD *)&v538[0].__r_.__value_.__r.__words[2];
        *(_QWORD *)&v550[40] = v538[1].__r_.__value_.__l.__size_;
        *(_QWORD *)v551 = 0;
        *(_DWORD *)&v551[8] = v175;
        *(_QWORD *)&v551[12] = 1;
        v551[24] = 0;
        v551[48] = 0;
        v552.__r_.__value_.__s.__data_[0] = 0;
        v223 = *((_QWORD *)&v528 + 1);
        if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
        {
          v224 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
          v225 = v224 + 1;
          if (v224 + 1 > 0x1E1E1E1E1E1E1E1)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v225)
            v225 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
          if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
            v226 = 0x1E1E1E1E1E1E1E1;
          else
            v226 = v225;
          v537 = &v529;
          v227 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v226);
          v228 = (std::string::size_type)&v227[136 * v224];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v227;
          __p.__r_.__value_.__l.__size_ = v228;
          v536 = &v227[136 * v229];
          *(std::string *)v228 = v549;
          memset(&v549, 0, sizeof(v549));
          *(_OWORD *)(v228 + 56) = *(_OWORD *)&v550[32];
          *(_OWORD *)(v228 + 72) = *(_OWORD *)v551;
          *(_DWORD *)(v228 + 88) = *(_DWORD *)&v551[16];
          *(_OWORD *)(v228 + 40) = *(_OWORD *)&v550[16];
          *(_OWORD *)(v228 + 24) = *(_OWORD *)v550;
          *(_BYTE *)(v228 + 96) = 0;
          *(_BYTE *)(v228 + 120) = 0;
          v231 = *((_QWORD *)&v528 + 1);
          v230 = v528;
          v232 = __p.__r_.__value_.__l.__size_;
          *(_BYTE *)(v228 + 128) = 0;
          v233 = v228 + 136;
          __p.__r_.__value_.__r.__words[2] = v228 + 136;
          if (v231 == v230)
          {
            v242 = 0;
          }
          else
          {
            v234 = 0;
            do
            {
              v235 = v232 + v234;
              v236 = v231 + v234;
              v237 = *(_OWORD *)(v231 + v234 - 136);
              *(_QWORD *)(v235 - 120) = *(_QWORD *)(v231 + v234 - 120);
              *(_OWORD *)(v235 - 136) = v237;
              *(_QWORD *)(v236 - 128) = 0;
              *(_QWORD *)(v236 - 120) = 0;
              *(_QWORD *)(v236 - 136) = 0;
              *(_OWORD *)(v235 - 112) = *(_OWORD *)(v231 + v234 - 112);
              v238 = *(_OWORD *)(v231 + v234 - 96);
              v239 = *(_OWORD *)(v231 + v234 - 80);
              v240 = *(_OWORD *)(v231 + v234 - 64);
              *(_DWORD *)(v235 - 48) = *(_DWORD *)(v231 + v234 - 48);
              *(_OWORD *)(v235 - 80) = v239;
              *(_OWORD *)(v235 - 64) = v240;
              *(_OWORD *)(v235 - 96) = v238;
              *(_BYTE *)(v232 + v234 - 40) = 0;
              *(_BYTE *)(v235 - 16) = 0;
              if (*(_BYTE *)(v231 + v234 - 16))
              {
                v241 = *(_OWORD *)(v236 - 40);
                *(_QWORD *)(v232 + v234 - 24) = *(_QWORD *)(v236 - 24);
                *(_OWORD *)(v232 + v234 - 40) = v241;
                *(_QWORD *)(v236 - 32) = 0;
                *(_QWORD *)(v236 - 24) = 0;
                *(_QWORD *)(v236 - 40) = 0;
                *(_BYTE *)(v235 - 16) = 1;
              }
              *(_BYTE *)(v235 - 8) = *(_BYTE *)(v236 - 8);
              v234 -= 136;
            }
            while (v231 + v234 != v230);
            v232 += v234;
            v231 = *((_QWORD *)&v528 + 1);
            v230 = v528;
            v233 = __p.__r_.__value_.__r.__words[2];
            v242 = v551[48];
          }
          *(_QWORD *)&v528 = v232;
          *((_QWORD *)&v528 + 1) = v233;
          v243 = v529;
          v529 = v536;
          __p.__r_.__value_.__r.__words[2] = v231;
          v536 = v243;
          __p.__r_.__value_.__r.__words[0] = v230;
          __p.__r_.__value_.__l.__size_ = v230;
          std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&__p);
          *((_QWORD *)&v528 + 1) = v233;
          ++v175;
          if (v242 && (v551[47] & 0x80000000) != 0)
            operator delete(*(void **)&v551[24]);
        }
        else
        {
          **((_OWORD **)&v528 + 1) = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
          *(_QWORD *)(v223 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
          memset(&v549, 0, sizeof(v549));
          *(_OWORD *)(v223 + 40) = *(_OWORD *)&v550[16];
          *(_OWORD *)(v223 + 56) = *(_OWORD *)&v550[32];
          *(_OWORD *)(v223 + 72) = *(_OWORD *)v551;
          *(_DWORD *)(v223 + 88) = *(_DWORD *)&v551[16];
          *(_OWORD *)(v223 + 24) = *(_OWORD *)v550;
          *(_BYTE *)(v223 + 96) = 0;
          *(_BYTE *)(v223 + 120) = 0;
          *(_BYTE *)(v223 + 128) = 0;
          *((_QWORD *)&v528 + 1) = v223 + 136;
          ++v175;
        }
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
        ++v176;
LABEL_329:
        v174 += 24;
      }
      while (v174 != v515);
    }
    v262 = (_QWORD *)((char *)a2 + 184);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>((_QWORD *)a2 + 23, (unsigned __int8 *)&__p))
    {
      v273 = get_adm_log_object();
      if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
      {
        v495 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v495 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v549.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v549.__r_.__value_.__r.__words + 4) = (std::string::size_type)v495;
        _os_log_error_impl(&dword_236C84000, v273, OS_LOG_TYPE_ERROR, "The IOContextSemantic %s is not found from the DSPG config of system config", (uint8_t *)&v549, 0xCu);
      }
      v264 = __szb;
      std::string::basic_string[abi:ne180100]<0>(&v549, "general");
      v274 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>(v262, (unsigned __int8 *)&v549);
      if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v549.__r_.__value_.__l.__data_);
      if (!v274)
      {
        v389 = get_adm_log_object();
        if (os_log_type_enabled(v389, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v549.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v549.__r_.__value_.__r.__words + 4) = (std::string::size_type)"general";
          _os_log_error_impl(&dword_236C84000, v389, OS_LOG_TYPE_ERROR, "The fallback IOContextSemantic %s is not found from the DSPG config of system config", (uint8_t *)&v549, 0xCu);
        }
        *(_QWORD *)this = 1969448551;
        *((_BYTE *)this + 312) = 0;
        goto LABEL_693;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        __p.__r_.__value_.__l.__size_ = 7;
        v275 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
        v275 = &__p;
      }
      strcpy((char *)v275, "general");
      v403 = get_adm_log_object();
      if (os_log_type_enabled(v403, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v549.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v549.__r_.__value_.__r.__words + 4) = (std::string::size_type)"general";
        _os_log_impl(&dword_236C84000, v403, OS_LOG_TYPE_DEFAULT, "Fall back to DSP for IOContext Semantic %s", (uint8_t *)&v549, 0xCu);
      }
    }
    memset(v565, 0, sizeof(v565));
    std::string::basic_string[abi:ne180100]<0>(&v549, "spatial playback");
    v263 = a3;
    v264 = __szb;
    if (v505 == std::__tree<std::string>::find<std::string>((uint64_t)v502, &v549))
    {
      std::string::basic_string[abi:ne180100]<0>(v538, "spatial channel virtualization only");
      v265 = v505 != std::__tree<std::string>::find<std::string>((uint64_t)v502, v538);
      if (SHIBYTE(v538[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v538[0].__r_.__value_.__l.__data_);
    }
    else
    {
      v265 = 1;
    }
    if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v549.__r_.__value_.__l.__data_);
      if (!v265)
        goto LABEL_622;
    }
    else if (!v265)
    {
      goto LABEL_622;
    }
    if (*(_BYTE *)(a3 + 152))
    {
      v276 = operator new();
      *(_QWORD *)v276 = &off_25083C508;
      *(_QWORD *)(v276 + 16) = 0;
      *(_DWORD *)(v276 + 8) = 1668047225;
      *(_QWORD *)(v276 + 24) = 0;
      *(_QWORD *)(v276 + 32) = 0;
      v278 = *(_BYTE **)(a3 + 128);
      v277 = *(_BYTE **)(a3 + 136);
      v279 = v277 - v278;
      if (v277 != v278)
      {
        if ((v279 & 0x8000000000000000) != 0)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v280 = (char *)operator new(v277 - v278);
        *(_QWORD *)(v276 + 16) = v280;
        *(_QWORD *)(v276 + 24) = v280;
        v281 = &v280[v279];
        *(_QWORD *)(v276 + 32) = &v280[v279];
        memmove(v280, v278, v279);
        *(_QWORD *)(v276 + 24) = v281;
      }
      v282 = (_QWORD *)operator new();
      v283 = v282;
      v282[1] = 0;
      *v282 = &off_25083C5A8;
      v282[2] = 0;
      v282[3] = v276;
      v284 = *(_QWORD *)&v565[8];
      if (*(_QWORD *)&v565[8] >= *(_QWORD *)&v565[16])
      {
        v390 = (uint64_t)(*(_QWORD *)&v565[8] - *(_QWORD *)v565) >> 4;
        v391 = v390 + 1;
        if ((unint64_t)(v390 + 1) >> 60)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v392 = *(_QWORD *)&v565[16] - *(_QWORD *)v565;
        if ((uint64_t)(*(_QWORD *)&v565[16] - *(_QWORD *)v565) >> 3 > v391)
          v391 = v392 >> 3;
        if ((unint64_t)v392 >= 0x7FFFFFFFFFFFFFF0)
          v393 = 0xFFFFFFFFFFFFFFFLL;
        else
          v393 = v391;
        v394 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v393);
        v396 = (uint64_t *)&v394[16 * v390];
        *v396 = v276;
        v396[1] = (uint64_t)v283;
        v397 = *(_QWORD **)&v565[8];
        v398 = *(_QWORD **)v565;
        if (*(_QWORD *)&v565[8] == *(_QWORD *)v565)
        {
          v401 = vdupq_n_s64(*(unint64_t *)&v565[8]);
          v399 = &v394[16 * v390];
          v263 = a3;
        }
        else
        {
          v399 = &v394[16 * v390];
          v263 = a3;
          do
          {
            v400 = *((_OWORD *)v397 - 1);
            v397 -= 2;
            *((_OWORD *)v399 - 1) = v400;
            v399 -= 16;
            *v397 = 0;
            v397[1] = 0;
          }
          while (v397 != v398);
          v401 = *(int64x2_t *)v565;
        }
        v285 = v396 + 2;
        *(_QWORD *)v565 = v399;
        *(_QWORD *)&v565[8] = v396 + 2;
        *(_QWORD *)&v565[16] = &v394[16 * v395];
        v455 = v401.i64[1];
        v456 = (void *)v401.i64[0];
        while ((void *)v455 != v456)
          v455 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v455 - 16);
        if (v456)
          operator delete(v456);
      }
      else
      {
        **(_QWORD **)&v565[8] = v276;
        *(_QWORD *)(v284 + 8) = v282;
        v285 = (_QWORD *)(v284 + 16);
        v263 = a3;
      }
      *(_QWORD *)&v565[8] = v285;
LABEL_622:
      v457 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>(v262, (unsigned __int8 *)&__p);
      if (!v457)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v458 = (int8x8_t *)v457;
      std::string::basic_string[abi:ne180100]<0>(&v526, "Default");
      std::string::basic_string[abi:ne180100]<0>(&v549, "spatial playback");
      if (v505 == std::__tree<std::string>::find<std::string>((uint64_t)v502, &v549))
      {
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
      }
      else
      {
        v459 = *(unsigned __int8 *)(v263 + 152);
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
        if (v459)
        {
          if (**(_DWORD **)(v263 + 128) == 6619138)
          {
            if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
            {
              v526.__r_.__value_.__l.__size_ = 9;
              v461 = (std::string *)v526.__r_.__value_.__r.__words[0];
              v460 = (std::string::value_type *)(v526.__r_.__value_.__r.__words[0] + 9);
            }
            else
            {
              v460 = &v526.__r_.__value_.__s.__data_[9];
              *((_BYTE *)&v526.__r_.__value_.__s + 23) = 9;
              v461 = &v526;
            }
            v461->__r_.__value_.__s.__data_[8] = 32;
            v461->__r_.__value_.__r.__words[0] = *(_QWORD *)"Stereo - ";
          }
          else
          {
            if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
            {
              v526.__r_.__value_.__l.__size_ = 16;
              v466 = (std::string *)v526.__r_.__value_.__r.__words[0];
              v460 = (std::string::value_type *)(v526.__r_.__value_.__r.__words[0] + 16);
            }
            else
            {
              v460 = &v526.__r_.__value_.__s.__data_[16];
              *((_BYTE *)&v526.__r_.__value_.__s + 23) = 16;
              v466 = &v526;
            }
            *(_OWORD *)&v466->__r_.__value_.__l.__data_ = *(_OWORD *)"Multi Channel - ";
          }
          *v460 = 0;
          DeviceDescription = adm::config_policy::getDeviceDescription((adm::ConfigurationChangeRequest *)v263, 0);
          v469 = DeviceDescription;
          v470 = *((_DWORD *)DeviceDescription + 16);
          if (v470 == 1651275109)
          {
            if (*((_DWORD *)DeviceDescription + 19) == 1)
              goto LABEL_661;
          }
          else if (v470 == 1651274862)
          {
            if (adm::config_policy::isBuiltInSpeakerDevice(DeviceDescription, v468))
            {
              v471 = "Built-in Speaker";
              v472 = 16;
LABEL_662:
              std::string::append(&v526, v471, v472);
              goto LABEL_663;
            }
            if (*((_DWORD *)v469 + 18) == 1751412846)
            {
LABEL_661:
              v471 = "Headphone";
              v472 = 9;
              goto LABEL_662;
            }
LABEL_663:
            v477 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v526);
            v478 = v458[6];
            if (!*(_QWORD *)&v478)
              goto LABEL_679;
            v479 = v477;
            v480 = (uint8x8_t)vcnt_s8(v478);
            v480.i16[0] = vaddlv_u8(v480);
            v481 = v480.u32[0];
            if (v480.u32[0] > 1uLL)
            {
              v482 = v477;
              if (v477 >= *(_QWORD *)&v478)
                v482 = v477 % *(_QWORD *)&v478;
            }
            else
            {
              v482 = (*(_QWORD *)&v478 - 1) & v477;
            }
            v483 = *(unsigned __int8 ***)(*(_QWORD *)&v458[5] + 8 * v482);
            if (!v483 || (v484 = *v483) == 0)
LABEL_679:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            while (1)
            {
              v485 = *((_QWORD *)v484 + 1);
              if (v479 == v485)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100](v484 + 16, (unsigned __int8 *)&v526))
                {
                  adm::DSPGraphBasicConfiguration::DSPGraphBasicConfiguration(v538, (uint64_t)(v484 + 40));
                  v486 = 0uLL;
                  *(_OWORD *)v541 = 0u;
                  v488 = *(_QWORD *)&v565[8];
                  v487 = *(_QWORD *)v565;
                  *(_QWORD *)&v542[0] = 0;
                  *(_OWORD *)((char *)v542 + 8) = *(_OWORD *)v565;
                  v489 = *(_QWORD *)&v565[16];
                  *((_QWORD *)&v542[1] + 1) = *(_QWORD *)&v565[16];
                  memset(v565, 0, sizeof(v565));
                  LOBYTE(v543) = 0;
                  BYTE4(v543) = 0;
                  BYTE8(v543) = 0;
                  BYTE12(v543) = 0;
                  if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v526.__r_.__value_.__l.__data_);
                    v486 = *(_OWORD *)v541;
                    v487 = *((_QWORD *)&v542[0] + 1);
                    v490 = *(_QWORD *)&v542[0];
                    v489 = *((_QWORD *)&v542[1] + 1);
                    v488 = *(_QWORD *)&v542[1];
                  }
                  else
                  {
                    v490 = 0;
                  }
                  *(_OWORD *)&v549.__r_.__value_.__l.__data_ = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
                  memset(&v530, 0, sizeof(v530));
                  v549.__r_.__value_.__r.__words[2] = v530.__r_.__value_.__r.__words[2];
                  *(_QWORD *)v550 = v531;
                  *(_OWORD *)&v550[8] = *(_OWORD *)v500;
                  v491 = v500[2];
                  *v500 = 0;
                  v500[1] = 0;
                  v500[2] = 0;
                  *(_OWORD *)&v550[32] = v528;
                  *(_QWORD *)&v550[24] = v491;
                  *(_QWORD *)v551 = v529;
                  v528 = 0uLL;
                  v529 = 0;
                  *(_OWORD *)&v551[8] = *(_OWORD *)&v538[0].__r_.__value_.__l.__data_;
                  memset(v538, 0, sizeof(v538));
                  *(std::string *)&v551[32] = v538[1];
                  *(_QWORD *)&v551[24] = *((_QWORD *)&v538[0].__r_.__value_.__l + 2);
                  v552 = v538[2];
                  v554 = v540;
                  v553 = v539;
                  v539 = 0uLL;
                  v540 = 0;
                  v555 = v486;
                  v541[0] = 0;
                  v541[1] = 0;
                  memset(v542, 0, sizeof(v542));
                  *(_QWORD *)&v556 = v490;
                  *((_QWORD *)&v556 + 1) = v487;
                  *(_QWORD *)&v557 = v488;
                  *((_QWORD *)&v557 + 1) = v489;
                  *(_QWORD *)((char *)&v558 + 5) = *(_QWORD *)((char *)&v543 + 5);
                  *(_QWORD *)&v558 = v543;
                  v564 = 0;
                  caulk::expected<adm::graph::GraphDescription,std::error_code>::expected((uint64_t)this, (__int128 *)&v549);
                  std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v551[8]);
                  v526.__r_.__value_.__r.__words[0] = (std::string::size_type)&v550[32];
                  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v526);
                  if ((v550[31] & 0x80000000) != 0)
                    operator delete(*(void **)&v550[8]);
                  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v549.__r_.__value_.__l.__data_);
                  v549.__r_.__value_.__r.__words[0] = (std::string::size_type)v542 + 8;
                  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
                  if (v541[0])
                  {
                    v541[1] = v541[0];
                    operator delete(v541[0]);
                  }
                  if (SHIBYTE(v540) < 0)
                    operator delete((void *)v539);
                  v549.__r_.__value_.__r.__words[0] = (std::string::size_type)&v538[2];
                  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
                  v549.__r_.__value_.__r.__words[0] = (std::string::size_type)&v538[1];
                  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
                  v549.__r_.__value_.__r.__words[0] = (std::string::size_type)v538;
                  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
                  goto LABEL_692;
                }
              }
              else
              {
                if (v481 > 1)
                {
                  if (v485 >= *(_QWORD *)&v478)
                    v485 %= *(_QWORD *)&v478;
                }
                else
                {
                  v485 &= *(_QWORD *)&v478 - 1;
                }
                if (v485 != v482)
                  goto LABEL_679;
              }
              v484 = *(unsigned __int8 **)v484;
              if (!v484)
                goto LABEL_679;
            }
          }
          v471 = "Default";
          v472 = 7;
          goto LABEL_662;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v549, "spatial channel virtualization only");
      v462 = std::__tree<std::string>::find<std::string>((uint64_t)v502, &v549);
      if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v549.__r_.__value_.__l.__data_);
      if (v505 == v462)
      {
        std::string::basic_string[abi:ne180100]<0>(&v549, "voice activity detection");
        v464 = std::__tree<std::string>::find<std::string>((uint64_t)v502, &v549);
        if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v549.__r_.__value_.__l.__data_);
        if (v505 != v464)
        {
          if (*(_QWORD *)(v263 + 176) - *(_QWORD *)(v263 + 168) == 24)
          {
            if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
            {
              v526.__r_.__value_.__l.__size_ = 5;
              v465 = (std::string *)v526.__r_.__value_.__r.__words[0];
            }
            else
            {
              *((_BYTE *)&v526.__r_.__value_.__s + 23) = 5;
              v465 = &v526;
            }
            strcpy((char *)v465, "No EC");
          }
          else
          {
            v473 = adm::config_policy::getDeviceDescription((adm::ConfigurationChangeRequest *)v263, 1);
            v474 = adm::config_policy::getDeviceDescription((adm::ConfigurationChangeRequest *)v263, 0);
            {
              if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
              {
                v526.__r_.__value_.__l.__size_ = 15;
                v476 = (std::string *)v526.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((_BYTE *)&v526.__r_.__value_.__s + 23) = 15;
                v476 = &v526;
              }
              strcpy((char *)v476, "High HW Latency");
            }
            v498 = get_adm_log_object();
            if (os_log_type_enabled(v498, OS_LOG_TYPE_DEFAULT))
            {
              v499 = &v526;
              if ((v526.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v499 = (std::string *)v526.__r_.__value_.__r.__words[0];
              LODWORD(v549.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v549.__r_.__value_.__r.__words + 4) = (std::string::size_type)v499;
              _os_log_impl(&dword_236C84000, v498, OS_LOG_TYPE_DEFAULT, "DSP selection is: %s", (uint8_t *)&v549, 0xCu);
            }
          }
        }
      }
      else
      {
        if (SHIBYTE(v526.__r_.__value_.__r.__words[2]) < 0)
        {
          v526.__r_.__value_.__l.__size_ = 22;
          v463 = (std::string *)v526.__r_.__value_.__r.__words[0];
        }
        else
        {
          *((_BYTE *)&v526.__r_.__value_.__s + 23) = 22;
          v463 = &v526;
        }
        strcpy((char *)v463, "Channel Virtualization");
      }
      goto LABEL_663;
    }
    v307 = get_adm_log_object();
    if (os_log_type_enabled(v307, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v549.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_236C84000, v307, OS_LOG_TYPE_ERROR, "Failed to create DSP node due to missing channel layout", (uint8_t *)&v549, 2u);
    }
    *(_QWORD *)this = 1969448551;
    *((_BYTE *)this + 312) = 0;
LABEL_692:
    v549.__r_.__value_.__r.__words[0] = (std::string::size_type)v565;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
LABEL_693:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v527.__r_.__value_.__r.__words[0])
      operator delete(v527.__r_.__value_.__l.__data_);
    v549.__r_.__value_.__r.__words[0] = (std::string::size_type)&v528;
    std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
    if (SHIBYTE(v533) < 0)
      operator delete((void *)v532);
    if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v530.__r_.__value_.__l.__data_);
      if ((v264 & 0x80000000) == 0)
        return;
    }
    else if ((v264 & 0x80000000) == 0)
    {
      return;
    }
    v25 = (std::string::value_type *)__s;
    goto LABEL_704;
  }
  adm::config_policy::getActiveStreamInfo((adm::config_policy *)&__p, (const ConfigurationChangeRequest *)a3);
  v26 = __p.__r_.__value_.__l.__size_;
  v25 = (std::string::value_type *)__p.__r_.__value_.__r.__words[0];
  v27 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
  v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
  v29 = v28 - 1;
  if (v28 <= 1)
  {
    *(_QWORD *)this = 1969448551;
    *((_BYTE *)this + 312) = 0;
    if (!v25)
      return;
    goto LABEL_704;
  }
  v164 = *(_QWORD *)__p.__r_.__value_.__l.__data_;
  __sb = (_QWORD *)__p.__r_.__value_.__r.__words[0];
  v165 = *(double *)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) + 64);
  v166 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 24);
  std::string::basic_string[abi:ne180100]<0>(&v530, "VoiceProcessingUL");
  v514 = v26;
  v511 = v28;
  if (*(_BYTE *)(a3 + 164))
    v167 = *(_DWORD *)(a3 + 160);
  else
    v167 = 480;
  LODWORD(v531) = 6;
  HIDWORD(v531) = v167;
  std::string::basic_string[abi:ne180100]<0>(&v532, (char *)&unk_236CE4E1D);
  v528 = 0uLL;
  v529 = 0;
  v168 = __sb[1];
  *(_QWORD *)v565 = *(_QWORD *)(v168 + 64);
  v169 = *(_DWORD *)(v168 + 76);
  *(_DWORD *)&v565[8] = *(_DWORD *)(v168 + 72);
  v170 = *(_DWORD *)(v168 + 88);
  v171 = *(_DWORD *)(v168 + 92);
  v172 = *(_QWORD *)(v168 + 96);
  __sza = v172;
  if (*(_DWORD *)(*__sb + 64) != 1651274862)
  {
    v518 = *(_QWORD *)(v168 + 80);
    goto LABEL_378;
  }
  if ((v169 & 0x20) != 0)
  {
    v171 = 1;
    goto LABEL_376;
  }
  if (v171)
  {
LABEL_376:
    v170 /= v171;
    goto LABEL_377;
  }
  v170 = (v172 + 7) >> 3;
LABEL_377:
  v169 |= 0x20u;
  v518 = v170 | 0x100000000;
  v171 = 1;
LABEL_378:
  v510 = v166;
  std::string::basic_string[abi:ne180100]<0>(&v549, "VoiceProcessingUL");
  *(_DWORD *)v550 = 1;
  *(_QWORD *)&v550[8] = *(_QWORD *)v565;
  *(_DWORD *)&v550[16] = *(_DWORD *)&v565[8];
  *(_DWORD *)&v550[20] = v169;
  *(_QWORD *)&v550[24] = v518;
  *(_DWORD *)&v550[32] = v170;
  *(_DWORD *)&v550[36] = v171;
  *(_QWORD *)&v550[40] = __sza;
  *(_QWORD *)v551 = 0;
  *(_QWORD *)&v551[8] = 0x100000000;
  *(_DWORD *)&v551[16] = 0;
  v551[24] = 0;
  v551[48] = 0;
  v552.__r_.__value_.__s.__data_[0] = 0;
  v286 = *((_QWORD *)&v528 + 1);
  if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
  {
    v293 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
    v294 = v293 + 1;
    if (v293 + 1 > 0x1E1E1E1E1E1E1E1)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v294)
      v294 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
      v295 = 0x1E1E1E1E1E1E1E1;
    else
      v295 = v294;
    v538[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v529;
    if (v295)
      v295 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v295);
    else
      v296 = 0;
    v308 = v295 + 8 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
    v538[0].__r_.__value_.__r.__words[0] = v295;
    v538[0].__r_.__value_.__l.__size_ = v308;
    v538[1].__r_.__value_.__r.__words[0] = v295 + 136 * v296;
    v309 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
    *(_QWORD *)(v308 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
    *(_OWORD *)v308 = v309;
    memset(&v549, 0, sizeof(v549));
    *(_OWORD *)(v308 + 24) = *(_OWORD *)v550;
    v310 = *(_OWORD *)&v550[16];
    v311 = *(_OWORD *)&v550[32];
    v312 = *(_OWORD *)v551;
    *(_DWORD *)(v308 + 88) = *(_DWORD *)&v551[16];
    *(_OWORD *)(v308 + 72) = v312;
    *(_OWORD *)(v308 + 56) = v311;
    *(_OWORD *)(v308 + 40) = v310;
    v313 = v295 + 136 * v293;
    *(_BYTE *)(v313 + 96) = 0;
    v314 = v313 + 96;
    v315 = v295 + 136 * v293;
    *(_BYTE *)(v315 + 120) = 0;
    v316 = (_BYTE *)(v315 + 120);
    if (v551[48])
    {
      v317 = *(_OWORD *)&v551[24];
      *(_QWORD *)(v314 + 16) = *(_QWORD *)&v551[40];
      *(_OWORD *)v314 = v317;
      memset(&v551[24], 0, 24);
      *v316 = 1;
    }
    *(_BYTE *)(v295 + 136 * v293 + 128) = v552.__r_.__value_.__s.__data_[0];
    v292 = v308 + 136;
    v538[0].__r_.__value_.__r.__words[2] = v308 + 136;
    v318 = v528;
    v319 = v538[0].__r_.__value_.__l.__size_;
    if (*((_QWORD *)&v528 + 1) == (_QWORD)v528)
    {
      v328 = vdupq_n_s64(*((unint64_t *)&v528 + 1));
    }
    else
    {
      v320 = 0;
      do
      {
        v321 = v319 + v320;
        v322 = *((_QWORD *)&v318 + 1) + v320;
        v323 = *(_OWORD *)(*((_QWORD *)&v318 + 1) + v320 - 136);
        *(_QWORD *)(v321 - 120) = *(_QWORD *)(*((_QWORD *)&v318 + 1) + v320 - 120);
        *(_OWORD *)(v321 - 136) = v323;
        *(_QWORD *)(v322 - 128) = 0;
        *(_QWORD *)(v322 - 120) = 0;
        *(_QWORD *)(v322 - 136) = 0;
        *(_OWORD *)(v321 - 112) = *(_OWORD *)(*((_QWORD *)&v318 + 1) + v320 - 112);
        v324 = *(_OWORD *)(*((_QWORD *)&v318 + 1) + v320 - 96);
        v325 = *(_OWORD *)(*((_QWORD *)&v318 + 1) + v320 - 80);
        v326 = *(_OWORD *)(*((_QWORD *)&v318 + 1) + v320 - 64);
        *(_DWORD *)(v321 - 48) = *(_DWORD *)(*((_QWORD *)&v318 + 1) + v320 - 48);
        *(_OWORD *)(v321 - 80) = v325;
        *(_OWORD *)(v321 - 64) = v326;
        *(_OWORD *)(v321 - 96) = v324;
        *(_BYTE *)(v319 + v320 - 40) = 0;
        *(_BYTE *)(v321 - 16) = 0;
        if (*(_BYTE *)(*((_QWORD *)&v318 + 1) + v320 - 16))
        {
          v327 = *(_OWORD *)(v322 - 40);
          *(_QWORD *)(v319 + v320 - 24) = *(_QWORD *)(v322 - 24);
          *(_OWORD *)(v319 + v320 - 40) = v327;
          *(_QWORD *)(v322 - 32) = 0;
          *(_QWORD *)(v322 - 24) = 0;
          *(_QWORD *)(v322 - 40) = 0;
          *(_BYTE *)(v321 - 16) = 1;
        }
        *(_BYTE *)(v321 - 8) = *(_BYTE *)(v322 - 8);
        v320 -= 136;
      }
      while (*((_QWORD *)&v318 + 1) + v320 != (_QWORD)v318);
      v319 += v320;
      v328 = (int64x2_t)v528;
      v292 = v538[0].__r_.__value_.__r.__words[2];
    }
    *(_QWORD *)&v528 = v319;
    *((_QWORD *)&v528 + 1) = v292;
    *(int64x2_t *)&v538[0].__r_.__value_.__r.__words[1] = v328;
    v329 = (std::string::size_type)v529;
    v529 = v538[1].__r_.__value_.__l.__data_;
    v538[1].__r_.__value_.__r.__words[0] = v329;
    v538[0].__r_.__value_.__r.__words[0] = v328.i64[0];
    std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v538);
  }
  else
  {
    v287 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
    *(_QWORD *)(*((_QWORD *)&v528 + 1) + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
    *(_OWORD *)v286 = v287;
    memset(&v549, 0, sizeof(v549));
    *(_OWORD *)(v286 + 24) = *(_OWORD *)v550;
    v289 = *(_OWORD *)&v550[32];
    v288 = *(_OWORD *)v551;
    v290 = *(_DWORD *)&v551[16];
    *(_OWORD *)(v286 + 40) = *(_OWORD *)&v550[16];
    *(_DWORD *)(v286 + 88) = v290;
    *(_OWORD *)(v286 + 72) = v288;
    *(_OWORD *)(v286 + 56) = v289;
    *(_BYTE *)(v286 + 96) = 0;
    *(_BYTE *)(v286 + 120) = 0;
    if (v551[48])
    {
      v291 = *(_OWORD *)&v551[24];
      *(_QWORD *)(v286 + 112) = *(_QWORD *)&v551[40];
      *(_OWORD *)(v286 + 96) = v291;
      memset(&v551[24], 0, 24);
      *(_BYTE *)(v286 + 120) = 1;
    }
    *(_BYTE *)(v286 + 128) = v552.__r_.__value_.__s.__data_[0];
    v292 = v286 + 136;
  }
  *((_QWORD *)&v528 + 1) = v292;
  if (v551[48] && (v551[47] & 0x80000000) != 0)
    operator delete(*(void **)&v551[24]);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v549.__r_.__value_.__l.__data_);
  v508 = v164;
  v507 = a2;
  if (v27 == 24)
  {
    v330 = 0;
  }
  else
  {
    v330 = 0;
    v331 = 0;
    if (v29 <= 1)
      v332 = 1;
    else
      v332 = v29;
    do
    {
      v333 = __sb[3 * v331 + 1];
      v334 = *(_DWORD *)(v333 + 92);
      std::string::basic_string[abi:ne180100]<0>(&v549, "VoiceProcessingUL");
      *(_DWORD *)v550 = 0;
      v335 = *(_OWORD *)(v333 + 64);
      v336 = *(_OWORD *)(v333 + 80);
      *(_QWORD *)&v550[40] = *(_QWORD *)(v333 + 96);
      *(_OWORD *)&v550[8] = v335;
      *(_OWORD *)&v550[24] = v336;
      *(_QWORD *)v551 = 0;
      *(_DWORD *)&v551[8] = v331;
      *(_QWORD *)&v551[12] = 1;
      v551[24] = 0;
      v551[48] = 0;
      v552.__r_.__value_.__s.__data_[0] = 0;
      v337 = *((_QWORD *)&v528 + 1);
      if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
      {
        v344 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
        v345 = v344 + 1;
        if (v344 + 1 > 0x1E1E1E1E1E1E1E1)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v345)
          v345 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
          v346 = 0x1E1E1E1E1E1E1E1;
        else
          v346 = v345;
        v538[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v529;
        if (v346)
          v346 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v346);
        else
          v347 = 0;
        v348 = v346 + 8 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
        v538[0].__r_.__value_.__r.__words[0] = v346;
        v538[0].__r_.__value_.__l.__size_ = v348;
        v538[1].__r_.__value_.__r.__words[0] = v346 + 136 * v347;
        v349 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
        *(_QWORD *)(v348 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
        *(_OWORD *)v348 = v349;
        memset(&v549, 0, sizeof(v549));
        *(_OWORD *)(v348 + 24) = *(_OWORD *)v550;
        v350 = *(_OWORD *)&v550[16];
        v351 = *(_OWORD *)&v550[32];
        v352 = *(_OWORD *)v551;
        *(_DWORD *)(v348 + 88) = *(_DWORD *)&v551[16];
        *(_OWORD *)(v348 + 72) = v352;
        *(_OWORD *)(v348 + 56) = v351;
        *(_OWORD *)(v348 + 40) = v350;
        v353 = v346 + 136 * v344;
        *(_BYTE *)(v353 + 96) = 0;
        v354 = v353 + 96;
        v355 = v346 + 136 * v344;
        *(_BYTE *)(v355 + 120) = 0;
        v356 = (_BYTE *)(v355 + 120);
        if (v551[48])
        {
          v357 = *(_OWORD *)&v551[24];
          *(_QWORD *)(v354 + 16) = *(_QWORD *)&v551[40];
          *(_OWORD *)v354 = v357;
          memset(&v551[24], 0, 24);
          *v356 = 1;
        }
        *(_BYTE *)(v346 + 136 * v344 + 128) = v552.__r_.__value_.__s.__data_[0];
        v343 = v348 + 136;
        v538[0].__r_.__value_.__r.__words[2] = v348 + 136;
        v358 = v528;
        v359 = v538[0].__r_.__value_.__l.__size_;
        if (*((_QWORD *)&v528 + 1) == (_QWORD)v528)
        {
          v368 = vdupq_n_s64(*((unint64_t *)&v528 + 1));
        }
        else
        {
          v360 = 0;
          do
          {
            v361 = v359 + v360;
            v362 = *((_QWORD *)&v358 + 1) + v360;
            v363 = *(_OWORD *)(*((_QWORD *)&v358 + 1) + v360 - 136);
            *(_QWORD *)(v361 - 120) = *(_QWORD *)(*((_QWORD *)&v358 + 1) + v360 - 120);
            *(_OWORD *)(v361 - 136) = v363;
            *(_QWORD *)(v362 - 128) = 0;
            *(_QWORD *)(v362 - 120) = 0;
            *(_QWORD *)(v362 - 136) = 0;
            *(_OWORD *)(v361 - 112) = *(_OWORD *)(*((_QWORD *)&v358 + 1) + v360 - 112);
            v364 = *(_OWORD *)(*((_QWORD *)&v358 + 1) + v360 - 96);
            v365 = *(_OWORD *)(*((_QWORD *)&v358 + 1) + v360 - 80);
            v366 = *(_OWORD *)(*((_QWORD *)&v358 + 1) + v360 - 64);
            *(_DWORD *)(v361 - 48) = *(_DWORD *)(*((_QWORD *)&v358 + 1) + v360 - 48);
            *(_OWORD *)(v361 - 80) = v365;
            *(_OWORD *)(v361 - 64) = v366;
            *(_OWORD *)(v361 - 96) = v364;
            *(_BYTE *)(v359 + v360 - 40) = 0;
            *(_BYTE *)(v361 - 16) = 0;
            if (*(_BYTE *)(*((_QWORD *)&v358 + 1) + v360 - 16))
            {
              v367 = *(_OWORD *)(v362 - 40);
              *(_QWORD *)(v359 + v360 - 24) = *(_QWORD *)(v362 - 24);
              *(_OWORD *)(v359 + v360 - 40) = v367;
              *(_QWORD *)(v362 - 32) = 0;
              *(_QWORD *)(v362 - 24) = 0;
              *(_QWORD *)(v362 - 40) = 0;
              *(_BYTE *)(v361 - 16) = 1;
            }
            *(_BYTE *)(v361 - 8) = *(_BYTE *)(v362 - 8);
            v360 -= 136;
          }
          while (*((_QWORD *)&v358 + 1) + v360 != (_QWORD)v358);
          v359 += v360;
          v368 = (int64x2_t)v528;
          v343 = v538[0].__r_.__value_.__r.__words[2];
        }
        *(_QWORD *)&v528 = v359;
        *((_QWORD *)&v528 + 1) = v343;
        *(int64x2_t *)&v538[0].__r_.__value_.__r.__words[1] = v368;
        v369 = (std::string::size_type)v529;
        v529 = v538[1].__r_.__value_.__l.__data_;
        v538[1].__r_.__value_.__r.__words[0] = v369;
        v538[0].__r_.__value_.__r.__words[0] = v368.i64[0];
        std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v538);
      }
      else
      {
        v338 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
        *(_QWORD *)(*((_QWORD *)&v528 + 1) + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
        *(_OWORD *)v337 = v338;
        memset(&v549, 0, sizeof(v549));
        *(_OWORD *)(v337 + 24) = *(_OWORD *)v550;
        v340 = *(_OWORD *)&v550[32];
        v339 = *(_OWORD *)v551;
        v341 = *(_DWORD *)&v551[16];
        *(_OWORD *)(v337 + 40) = *(_OWORD *)&v550[16];
        *(_DWORD *)(v337 + 88) = v341;
        *(_OWORD *)(v337 + 72) = v339;
        *(_OWORD *)(v337 + 56) = v340;
        *(_BYTE *)(v337 + 96) = 0;
        *(_BYTE *)(v337 + 120) = 0;
        if (v551[48])
        {
          v342 = *(_OWORD *)&v551[24];
          *(_QWORD *)(v337 + 112) = *(_QWORD *)&v551[40];
          *(_OWORD *)(v337 + 96) = v342;
          memset(&v551[24], 0, 24);
          *(_BYTE *)(v337 + 120) = 1;
        }
        *(_BYTE *)(v337 + 128) = v552.__r_.__value_.__s.__data_[0];
        v343 = v337 + 136;
      }
      *((_QWORD *)&v528 + 1) = v343;
      if (v551[48] && (v551[47] & 0x80000000) != 0)
        operator delete(*(void **)&v551[24]);
      if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v549.__r_.__value_.__l.__data_);
      v330 += v334;
      ++v331;
    }
    while (v331 != v332);
  }
  v370 = (double *)operator new(0x30uLL);
  *(_DWORD *)v370 = 0;
  v370[1] = v165;
  *((_OWORD *)v370 + 1) = xmmword_236CE1880;
  *((_DWORD *)v370 + 8) = 4;
  *((_DWORD *)v370 + 9) = v330;
  *((_QWORD *)v370 + 5) = 32;
  v371 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(1uLL);
  *(_DWORD *)v371 = 3;
  v371[1] = v165;
  *((_OWORD *)v371 + 1) = xmmword_236CE1880;
  *((_OWORD *)v371 + 2) = xmmword_236CE1890;
  v519 = (__int128 *)v371;
  if (*(_BYTE *)(a3 + 72))
  {
    if (*(double *)(a3 + 32) != v165)
    {
      v372 = get_adm_log_object();
      if (os_log_type_enabled(v372, OS_LOG_TYPE_ERROR))
      {
        v494 = *(_QWORD *)(a3 + 32);
        LODWORD(v549.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v549.__r_.__value_.__r.__words + 4) = v494;
        WORD2(v549.__r_.__value_.__r.__words[1]) = 2048;
        *(double *)((char *)&v549.__r_.__value_.__r.__words[1] + 6) = v165;
        _os_log_error_impl(&dword_236C84000, v372, OS_LOG_TYPE_ERROR, "The IOContext rate %f doesn't match the mic stream rate %f", (uint8_t *)&v549, 0x16u);
      }
    }
  }
  v373 = *(_QWORD *)(v514 - 16);
  v374 = *(_QWORD *)(v373 + 64);
  v376 = *(_DWORD *)(v373 + 72);
  v375 = *(_DWORD *)(v373 + 76);
  v377 = *(_DWORD *)(v373 + 80);
  v378 = *(_DWORD *)(v373 + 84);
  v380 = *(_DWORD *)(v373 + 88);
  v379 = *(_DWORD *)(v373 + 92);
  v381 = *(_DWORD *)(v373 + 96);
  std::string::basic_string[abi:ne180100]<0>(&v549, "VoiceProcessingUL");
  *(_DWORD *)v550 = 0;
  v382 = v375 & 0x20;
  if (v376 != 1819304813 || v378 != 1 || v380 != v377 || v381 >> 3 > v380 || !v379)
    goto LABEL_531;
  if ((v375 & 0x20) == 0)
  {
    v53 = v377 == v377 / v379 * v379;
    v377 /= v379;
    if (!v53)
    {
      v402 = 9;
      goto LABEL_532;
    }
  }
  v383 = 0;
  v384 = 0;
  v385 = 0;
  v386 = a3;
  if ((v375 & 2) != 0 || 8 * v377 != v381)
  {
    v402 = 0;
    v388 = 0;
LABEL_506:
    v387 = (_QWORD *)&unk_236CDD000;
    goto LABEL_537;
  }
  if ((v375 & 1) != 0)
  {
    if ((v375 & 0x1F84) == 0 && v377 != 4)
    {
      if (v377 == 8)
      {
        v404 = 8 * v379;
        if ((v375 & 0x20) != 0)
          v404 = 8;
        v384 = v404 | 0x100000000;
        v402 = v382 | 9;
        v388 = v379 | 0x4000000000;
        v385 = v374;
        v383 = 1819304813;
      }
      else
      {
        v383 = 0;
        v402 = 0;
        v388 = 0;
      }
      v386 = a3;
      goto LABEL_506;
    }
LABEL_531:
    v402 = v382 | 9;
    if ((v375 & 0x20) != 0)
    {
      v405 = 4;
      v386 = a3;
      v387 = &unk_236CDD000;
      goto LABEL_534;
    }
LABEL_532:
    v386 = a3;
    v387 = (_QWORD *)&unk_236CDD000;
    v405 = 4 * v379;
LABEL_534:
    v384 = v405 | 0x100000000;
LABEL_535:
    HIDWORD(v388) = 32;
LABEL_536:
    LODWORD(v388) = v379;
    v385 = v374;
    v383 = 1819304813;
    goto LABEL_537;
  }
  v387 = (_QWORD *)&unk_236CDD000;
  if ((v375 & 4) == 0)
  {
    v383 = 0;
    v402 = 0;
LABEL_504:
    v388 = 0;
    goto LABEL_537;
  }
  v492 = (v375 >> 7) & 0x3F;
  if (v492 == 24 && v377 == 4)
  {
    v493 = 4 * v379;
    if ((v375 & 0x20) != 0)
      v493 = 4;
    v384 = v493 | 0x100000000;
    v402 = v382 | 0xC0C;
    goto LABEL_535;
  }
  if (!v492 && v377 == 4)
  {
    v496 = 4 * v379;
    if ((v375 & 0x20) != 0)
      v496 = 4;
    v384 = v496 | 0x100000000;
    v402 = v382 | 0xC;
    goto LABEL_535;
  }
  v383 = 0;
  if (v492)
  {
    v402 = 0;
    goto LABEL_504;
  }
  v402 = 0;
  v388 = 0;
  if (v377 == 2)
  {
    v497 = 2 * v379;
    if ((v375 & 0x20) != 0)
      v497 = 2;
    v384 = v497 | 0x100000000;
    v402 = v382 | 0xC;
    HIDWORD(v388) = 16;
    goto LABEL_536;
  }
LABEL_537:
  *(_QWORD *)&v550[8] = v385;
  *(_DWORD *)&v550[16] = v383;
  *(_DWORD *)&v550[20] = v402;
  *(_QWORD *)&v550[24] = v384;
  *(_DWORD *)&v550[32] = v384;
  *(_QWORD *)&v550[36] = v388;
  *(_DWORD *)&v550[44] = 0;
  LODWORD(v527.__r_.__value_.__l.__data_) = 1;
  adm::graph::SemanticSet::SemanticSet(v551, (int *)&v527, 1);
  *(_DWORD *)&v551[8] = v511;
  *(_QWORD *)&v551[12] = v387[33];
  v551[24] = 0;
  v551[48] = 0;
  v552.__r_.__value_.__s.__data_[0] = 0;
  v406 = *((_QWORD *)&v528 + 1);
  if (*((_QWORD *)&v528 + 1) >= (unint64_t)v529)
  {
    v413 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)&v528 + 1) - v528) >> 3);
    v414 = v413 + 1;
    if (v413 + 1 > 0x1E1E1E1E1E1E1E1)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3) > v414)
      v414 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)&v529[-v528] >> 3);
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)&v529[-v528] >> 3) >= 0xF0F0F0F0F0F0F0)
      v415 = 0x1E1E1E1E1E1E1E1;
    else
      v415 = v414;
    v538[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v529;
    if (v415)
      v415 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v415);
    else
      v416 = 0;
    v417 = v415 + 136 * v413;
    v538[0].__r_.__value_.__r.__words[0] = v415;
    v538[0].__r_.__value_.__l.__size_ = v417;
    v538[1].__r_.__value_.__r.__words[0] = v415 + 136 * v416;
    v418 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
    *(_QWORD *)(v417 + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
    *(_OWORD *)v417 = v418;
    memset(&v549, 0, sizeof(v549));
    *(_OWORD *)(v417 + 24) = *(_OWORD *)v550;
    v419 = *(_OWORD *)&v550[16];
    v420 = *(_OWORD *)&v550[32];
    v421 = *(_OWORD *)v551;
    *(_DWORD *)(v417 + 88) = *(_DWORD *)&v551[16];
    *(_OWORD *)(v417 + 72) = v421;
    *(_OWORD *)(v417 + 56) = v420;
    *(_OWORD *)(v417 + 40) = v419;
    *(_BYTE *)(v417 + 96) = 0;
    *(_BYTE *)(v417 + 120) = 0;
    if (v551[48])
    {
      v422 = *(_OWORD *)&v551[24];
      *(_QWORD *)(v417 + 112) = *(_QWORD *)&v551[40];
      *(_OWORD *)(v417 + 96) = v422;
      memset(&v551[24], 0, 24);
      *(_BYTE *)(v417 + 120) = 1;
    }
    *(_BYTE *)(v415 + 136 * v413 + 128) = v552.__r_.__value_.__s.__data_[0];
    v412 = v417 + 136;
    v538[0].__r_.__value_.__r.__words[2] = v417 + 136;
    v423 = v528;
    v424 = v538[0].__r_.__value_.__l.__size_;
    if (*((_QWORD *)&v528 + 1) == (_QWORD)v528)
    {
      v433 = vdupq_n_s64(*((unint64_t *)&v528 + 1));
    }
    else
    {
      v425 = 0;
      do
      {
        v426 = v424 + v425;
        v427 = *((_QWORD *)&v423 + 1) + v425;
        v428 = *(_OWORD *)(*((_QWORD *)&v423 + 1) + v425 - 136);
        *(_QWORD *)(v426 - 120) = *(_QWORD *)(*((_QWORD *)&v423 + 1) + v425 - 120);
        *(_OWORD *)(v426 - 136) = v428;
        *(_QWORD *)(v427 - 128) = 0;
        *(_QWORD *)(v427 - 120) = 0;
        *(_QWORD *)(v427 - 136) = 0;
        *(_OWORD *)(v426 - 112) = *(_OWORD *)(*((_QWORD *)&v423 + 1) + v425 - 112);
        v429 = *(_OWORD *)(*((_QWORD *)&v423 + 1) + v425 - 96);
        v430 = *(_OWORD *)(*((_QWORD *)&v423 + 1) + v425 - 80);
        v431 = *(_OWORD *)(*((_QWORD *)&v423 + 1) + v425 - 64);
        *(_DWORD *)(v426 - 48) = *(_DWORD *)(*((_QWORD *)&v423 + 1) + v425 - 48);
        *(_OWORD *)(v426 - 80) = v430;
        *(_OWORD *)(v426 - 64) = v431;
        *(_OWORD *)(v426 - 96) = v429;
        *(_BYTE *)(v424 + v425 - 40) = 0;
        *(_BYTE *)(v426 - 16) = 0;
        if (*(_BYTE *)(*((_QWORD *)&v423 + 1) + v425 - 16))
        {
          v432 = *(_OWORD *)(v427 - 40);
          *(_QWORD *)(v424 + v425 - 24) = *(_QWORD *)(v427 - 24);
          *(_OWORD *)(v424 + v425 - 40) = v432;
          *(_QWORD *)(v427 - 32) = 0;
          *(_QWORD *)(v427 - 24) = 0;
          *(_QWORD *)(v427 - 40) = 0;
          *(_BYTE *)(v426 - 16) = 1;
        }
        *(_BYTE *)(v426 - 8) = *(_BYTE *)(v427 - 8);
        v425 -= 136;
      }
      while (*((_QWORD *)&v423 + 1) + v425 != (_QWORD)v423);
      v424 += v425;
      v433 = (int64x2_t)v528;
      v412 = v538[0].__r_.__value_.__r.__words[2];
    }
    *(_QWORD *)&v528 = v424;
    *((_QWORD *)&v528 + 1) = v412;
    *(int64x2_t *)&v538[0].__r_.__value_.__r.__words[1] = v433;
    v434 = (std::string::size_type)v529;
    v529 = v538[1].__r_.__value_.__l.__data_;
    v538[1].__r_.__value_.__r.__words[0] = v434;
    v538[0].__r_.__value_.__r.__words[0] = v433.i64[0];
    std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)v538);
  }
  else
  {
    v407 = *(_OWORD *)&v549.__r_.__value_.__l.__data_;
    *(_QWORD *)(*((_QWORD *)&v528 + 1) + 16) = *((_QWORD *)&v549.__r_.__value_.__l + 2);
    *(_OWORD *)v406 = v407;
    memset(&v549, 0, sizeof(v549));
    *(_OWORD *)(v406 + 24) = *(_OWORD *)v550;
    v409 = *(_OWORD *)&v550[32];
    v408 = *(_OWORD *)v551;
    v410 = *(_DWORD *)&v551[16];
    *(_OWORD *)(v406 + 40) = *(_OWORD *)&v550[16];
    *(_DWORD *)(v406 + 88) = v410;
    *(_OWORD *)(v406 + 72) = v408;
    *(_OWORD *)(v406 + 56) = v409;
    *(_BYTE *)(v406 + 96) = 0;
    *(_BYTE *)(v406 + 120) = 0;
    if (v551[48])
    {
      v411 = *(_OWORD *)&v551[24];
      *(_QWORD *)(v406 + 112) = *(_QWORD *)&v551[40];
      *(_OWORD *)(v406 + 96) = v411;
      memset(&v551[24], 0, 24);
      *(_BYTE *)(v406 + 120) = 1;
    }
    *(_BYTE *)(v406 + 128) = v552.__r_.__value_.__s.__data_[0];
    v412 = v406 + 136;
  }
  *((_QWORD *)&v528 + 1) = v412;
  if (v551[48] && (v551[47] & 0x80000000) != 0)
    operator delete(*(void **)&v551[24]);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v549.__r_.__value_.__l.__data_);
  v435 = std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(2uLL);
  *((_DWORD *)v435 + 12) = 2;
  *((_QWORD *)v435 + 7) = v374;
  *((_OWORD *)v435 + 4) = xmmword_236CE1880;
  *((_DWORD *)v435 + 20) = 4;
  *((_DWORD *)v435 + 21) = v379;
  *((_QWORD *)v435 + 11) = 32;
  v436 = *(_OWORD *)v370;
  v437 = *((_OWORD *)v370 + 2);
  *((_OWORD *)v435 + 1) = *((_OWORD *)v370 + 1);
  *((_OWORD *)v435 + 2) = v437;
  *(_OWORD *)v435 = v436;
  operator delete(v370);
  LODWORD(v538[0].__r_.__value_.__l.__data_) = 0;
  LODWORD(v549.__r_.__value_.__l.__data_) = 0;
  *(_QWORD *)v550 = 0;
  *(_OWORD *)&v549.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(&v549.__r_.__value_.__r.__words[1], (__int128 *)v435, (__int128 *)v435 + 6, 2uLL);
  memset(&v550[8], 0, 24);
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>(&v550[8], v519, v519 + 3, 1uLL);
  if (*(_BYTE *)(v386 + 164))
    v438 = *(_DWORD *)(v386 + 160);
  else
    v438 = 480;
  *(_DWORD *)&v550[32] = v438;
  v550[36] = 1;
  memset(&v538[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
  v527.__r_.__value_.__r.__words[0] = (std::string::size_type)&v538[0].__r_.__value_.__l.__size_;
  v527.__r_.__value_.__s.__data_[8] = 0;
  v439 = operator new(0x40uLL);
  v538[0].__r_.__value_.__l.__size_ = (std::string::size_type)v439;
  v538[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v439;
  v538[1].__r_.__value_.__r.__words[0] = (std::string::size_type)(v439 + 8);
  *(_DWORD *)v439 = v549.__r_.__value_.__l.__data_;
  v439[1] = 0;
  v439[2] = 0;
  v439[3] = 0;
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(v439 + 1, (__int128 *)v549.__r_.__value_.__l.__size_, (__int128 *)v549.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v549.__r_.__value_.__r.__words[2] - v549.__r_.__value_.__l.__size_) >> 4));
  v439[4] = 0;
  v439[5] = 0;
  v439[6] = 0;
  std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>((_OWORD *)v439 + 2, *(__int128 **)&v550[8], *(__int128 **)&v550[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v550[16] - *(_QWORD *)&v550[8]) >> 4));
  v439[7] = *(_QWORD *)&v550[32];
  v538[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v439 + 8);
  LODWORD(v538[1].__r_.__value_.__r.__words[1]) = adm::utility::getPortSubType(*(unsigned int *)(v508 + 64), *(_DWORD *)(v508 + 68), *(_DWORD *)(v508 + 76), (char *)(v508 + 24));
  v538[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v508 + 56);
  v440 = *(_DWORD *)(v508 + 88);
  LODWORD(v538[2].__r_.__value_.__l.__data_) = *(_DWORD *)(v508 + 80);
  HIDWORD(v538[2].__r_.__value_.__r.__words[0]) = v440;
  v538[2].__r_.__value_.__l.__size_ = 0;
  v538[2].__r_.__value_.__s.__data_[16] = *(_BYTE *)(v508 + 160);
  v540 = 0;
  v539 = 0uLL;
  LODWORD(v541[0]) = adm::utility::getPortSubType(*(unsigned int *)(v510 + 64), *(_DWORD *)(v510 + 72), *(_DWORD *)(v510 + 76), (char *)(v510 + 24));
  v541[1] = *(void **)(v508 + 56);
  v441 = (float *)v542;
  v442 = *(float32x2x2_t *)(v510 + 80);
  v443 = vextq_s8((int8x16_t)v442, (int8x16_t)v442, 8uLL).u64[0];
  vst2_f32(v441, v442);
  v542[1] = 0u;
  v543 = 0u;
  LOBYTE(v544) = 1;
  *(_QWORD *)((char *)&v544 + 4) = 0;
  *(_QWORD *)&v545 = 0;
  BYTE8(v545) = 0;
  if (*(_BYTE *)(a3 + 164))
    v444 = *(_DWORD *)(a3 + 160);
  else
    v444 = 480;
  HIDWORD(v545) = 2;
  v546 = v444;
  if (*((char *)v507 + 247) >= 0)
    v445 = *((unsigned __int8 *)v507 + 247);
  else
    v445 = *((_QWORD *)v507 + 29);
  v446 = &v527;
  std::string::basic_string[abi:ne180100]((uint64_t)&v527, v445 + 1);
  if ((v527.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v446 = (std::string *)v527.__r_.__value_.__r.__words[0];
  if (v445)
  {
    if (*((char *)v507 + 247) >= 0)
      v447 = (char *)v507 + 224;
    else
      v447 = (const void *)*((_QWORD *)v507 + 28);
    memmove(v446, v447, v445);
  }
  *(_WORD *)((char *)&v446->__r_.__value_.__l.__data_ + v445) = 95;
  v448 = *((char *)v507 + 271);
  if (v448 >= 0)
    v449 = (char *)v507 + 248;
  else
    v449 = (const std::string::value_type *)*((_QWORD *)v507 + 31);
  if (v448 >= 0)
    v450 = *((unsigned __int8 *)v507 + 271);
  else
    v450 = *((_QWORD *)v507 + 32);
  v451 = std::string::append(&v527, v449, v450);
  v452 = *(_OWORD *)&v451->__r_.__value_.__l.__data_;
  v548 = v451->__r_.__value_.__r.__words[2];
  v547 = v452;
  v451->__r_.__value_.__l.__size_ = 0;
  v451->__r_.__value_.__r.__words[2] = 0;
  v451->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v527.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v527.__r_.__value_.__l.__data_);
  if (*(_QWORD *)&v550[8])
  {
    *(_QWORD *)&v550[16] = *(_QWORD *)&v550[8];
    operator delete(*(void **)&v550[8]);
  }
  if (v549.__r_.__value_.__l.__size_)
  {
    v549.__r_.__value_.__r.__words[2] = v549.__r_.__value_.__l.__size_;
    operator delete((void *)v549.__r_.__value_.__l.__size_);
  }
  *(_OWORD *)&v549.__r_.__value_.__l.__data_ = *(_OWORD *)&v530.__r_.__value_.__l.__data_;
  memset(&v530, 0, sizeof(v530));
  v549.__r_.__value_.__r.__words[2] = v530.__r_.__value_.__r.__words[2];
  *(_QWORD *)v550 = v531;
  *(_OWORD *)&v550[8] = v532;
  v453 = v533;
  v532 = 0uLL;
  v533 = 0;
  *(_QWORD *)&v550[24] = v453;
  *(_QWORD *)v551 = v529;
  *(_DWORD *)&v551[8] = v538[0].__r_.__value_.__l.__data_;
  *(std::string *)&v551[32] = v538[1];
  *(_OWORD *)&v550[32] = v528;
  v528 = 0uLL;
  v529 = 0;
  *(_OWORD *)&v551[16] = *(_OWORD *)&v538[0].__r_.__value_.__r.__words[1];
  memset(&v538[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
  *(_OWORD *)&v552.__r_.__value_.__l.__data_ = *(_OWORD *)&v538[2].__r_.__value_.__l.__data_;
  v552.__r_.__value_.__s.__data_[16] = v538[2].__r_.__value_.__s.__data_[16];
  v553 = v539;
  v554 = v540;
  v539 = 0uLL;
  v540 = 0;
  v555 = *(_OWORD *)v541;
  v556 = v542[0];
  v454 = v542[1];
  v538[2].__r_.__value_.__l.__size_ = 0;
  v542[1] = 0uLL;
  v557 = v454;
  v558 = v543;
  v543 = 0uLL;
  v561 = v546;
  v559 = v544;
  v560 = v545;
  v562 = v547;
  v563 = v548;
  v547 = 0uLL;
  v548 = 0;
  v564 = 1;
  caulk::expected<adm::graph::GraphDescription,std::error_code>::expected((uint64_t)this, (__int128 *)&v549);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v551[8]);
  v527.__r_.__value_.__r.__words[0] = (std::string::size_type)&v550[32];
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v527);
  if ((v550[31] & 0x80000000) != 0)
    operator delete(*(void **)&v550[8]);
  if (SHIBYTE(v549.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v549.__r_.__value_.__l.__data_);
  if (SHIBYTE(v548) < 0)
    operator delete((void *)v547);
  if (*((_QWORD *)&v542[1] + 1))
  {
    *(_QWORD *)&v543 = *((_QWORD *)&v542[1] + 1);
    operator delete(*((void **)&v542[1] + 1));
  }
  if (*(_QWORD *)&v542[1])
    CFRelease(*(CFTypeRef *)&v542[1]);
  if ((_QWORD)v539)
  {
    *((_QWORD *)&v539 + 1) = v539;
    operator delete((void *)v539);
  }
  if (v538[2].__r_.__value_.__l.__size_)
    CFRelease((CFTypeRef)v538[2].__r_.__value_.__l.__size_);
  v549.__r_.__value_.__r.__words[0] = (std::string::size_type)&v538[0].__r_.__value_.__l.__size_;
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
  operator delete(v519);
  if (v435)
    operator delete(v435);
  v549.__r_.__value_.__r.__words[0] = (std::string::size_type)&v528;
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v549);
  if (SHIBYTE(v533) < 0)
    operator delete((void *)v532);
  if (SHIBYTE(v530.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v530.__r_.__value_.__l.__data_);
  v25 = (std::string::value_type *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
LABEL_704:
    operator delete(v25);
}

void sub_236C99384(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
  {
    if (a32 < 0)
      operator delete(__p);
    __cxa_begin_catch(a1);
    *(_QWORD *)a11 = 1969448551;
    *(_BYTE *)(a11 + 312) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236C98FF4);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::string>::find<std::string>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

std::string *`anonymous namespace'::flattenSemantics(std::string *this, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  std::string *v4;
  int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = this;
    v5 = 0;
    do
    {
      if (v5)
        std::string::append(v4, "_", 1uLL);
      v6 = *((char *)v3 + 55);
      if (v6 >= 0)
        v7 = (const std::string::value_type *)(v3 + 4);
      else
        v7 = (const std::string::value_type *)v3[4];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v3 + 55);
      else
        v8 = v3[5];
      this = std::string::append(v4, v7, v8);
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      ++v5;
      v3 = v10;
    }
    while (v10 != v2);
  }
  return this;
}

void sub_236C999DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(std::string *a1, uint64_t a2, char *__s)
{
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, __s);
  }
}

void adm::graph::TerminalDescription::~TerminalDescription(void **this)
{
  if (*((_BYTE *)this + 120) && *((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

BOOL std::operator==[abi:ne180100]<std::string,char [10]>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  if (!*((_BYTE *)a1 + 24))
    return 0;
  v4 = *((char *)a1 + 23);
  v5 = v4 >= 0 ? *((unsigned __int8 *)a1 + 23) : (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = *(unsigned __int8 **)i)
  {
    v12 = *((_QWORD *)i + 1);
    if (v6 == v12)
    {
      if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

BOOL `anonymous namespace'::isHighLatencyRoute(_anonymous_namespace_ *this, const DeviceDescription *a2, const DeviceDescription *a3)
{
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;

  v4 = 0.0;
  if (this)
  {
    v5 = *((double *)this + 7);
    v6 = (float)*((unsigned int *)this + 20) / v5;
    v7 = *((_QWORD *)this + 21);
    if (v7 != *((_QWORD *)this + 22))
    {
      if (*(_BYTE *)(v7 + 132))
        v8 = (float)*(unsigned int *)(v7 + 128);
      else
        v8 = 0.0;
      v14 = *(double *)(v7 + 64);
      v4 = v8 / v14;
      if (!a2)
        return (float)((float)(v4 + v6) + 0.0) >= 0.1;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = 0.0;
  }
  if (!a2)
    return (float)((float)(v4 + v6) + 0.0) >= 0.1;
LABEL_7:
  v9 = *((double *)a2 + 7);
  v10 = *((_QWORD *)a2 + 24);
  v11 = 0.0;
  v12 = 0.0;
  if (v10 != *((_QWORD *)a2 + 25))
  {
    if (*(_BYTE *)(v10 + 132))
      v13 = (float)*(unsigned int *)(v10 + 128);
    else
      v13 = 0.0;
    v16 = *(double *)(v10 + 64);
    v12 = v13 / v16;
  }
  v17 = (float)*((unsigned int *)a2 + 21) / v9;
  v18 = *((_QWORD *)a2 + 21);
  v19 = *((_QWORD *)a2 + 22);
  v20 = (float)*((unsigned int *)a2 + 20) / v9;
  if (v18 != v19)
  {
    while (!std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(v18 + 32), "reference"))
    {
      v18 += 136;
      if (v18 == v19)
        return (float)((float)(v12 + (float)((float)(v4 + v6) + v17)) - (float)(v20 + v11)) >= 0.1
            || *((_DWORD *)a2 + 16) == 1634300528;
    }
    if (*(_BYTE *)(v18 + 132))
      v21 = (float)*(unsigned int *)(v18 + 128);
    else
      v21 = 0.0;
    v22 = *(double *)(v18 + 64);
    v11 = v21 / v22;
  }
  return (float)((float)(v12 + (float)((float)(v4 + v6) + v17)) - (float)(v20 + v11)) >= 0.1
      || *((_DWORD *)a2 + 16) == 1634300528;
}

uint64_t caulk::expected<adm::graph::GraphDescription,std::error_code>::expected(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  char v7;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  v4 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(a1 + 32) = v4;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 304) = -1;
  v5 = *((unsigned int *)a2 + 76);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(char *, uint64_t, __int128 *))off_25083C4E0[v5])(&v7, a1 + 80, a2 + 5);
    *(_DWORD *)(a1 + 304) = v5;
  }
  *(_BYTE *)(a1 + 312) = 1;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 224);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_25083C4C8 + v2))(&v4, a1);
  *(_DWORD *)(a1 + 224) = -1;
  return a1;
}

void std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a2 + 96);
  if (v3)
  {
    *(_QWORD *)(a2 + 104) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  v4 = (void **)(a2 + 48);
  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a2 + 24);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)a2;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSA_SC_SD_EEEEEEDcSH_DpT0_(int a1, void **this)
{
  adm::vp::UplinkConfiguration::~UplinkConfiguration(this);
}

void adm::vp::UplinkConfiguration::~UplinkConfiguration(void **this)
{
  void *v2;
  const void *v3;
  void *v4;
  const void *v5;
  void **v6;

  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  v2 = this[17];
  if (v2)
  {
    this[18] = v2;
    operator delete(v2);
  }
  v3 = this[16];
  if (v3)
    CFRelease(v3);
  v4 = this[9];
  if (v4)
  {
    this[10] = v4;
    operator delete(v4);
  }
  v5 = this[7];
  if (v5)
    CFRelease(v5);
  v6 = this + 1;
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v6);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;
  uint64_t v5;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  v3 = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_OWORD *)(a2 + 72) = v3;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  result = *(__n128 *)(a3 + 120);
  *(__n128 *)(a2 + 120) = result;
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a3 + 136);
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  v5 = *(_QWORD *)(a3 + 144);
  *(_QWORD *)(a2 + 149) = *(_QWORD *)(a3 + 149);
  *(_QWORD *)(a2 + 144) = v5;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v3 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v4 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  v5 = *(_OWORD *)(a3 + 160);
  v6 = *(_OWORD *)(a3 + 176);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a3 + 192);
  *(_OWORD *)(a2 + 160) = v5;
  *(_OWORD *)(a2 + 176) = v6;
  result = *(__n128 *)(a3 + 200);
  *(_QWORD *)(a2 + 216) = *(_QWORD *)(a3 + 216);
  *(__n128 *)(a2 + 200) = result;
  *(_QWORD *)(a3 + 208) = 0;
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN3adm5graph21DSPGraphConfigurationENS8_2vp19UplinkConfigurationENS9_24ExclaveNodeConfigurationEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSA_SC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

void std::__shared_ptr_pointer<adm::graph::KernelProperty  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

uint64_t std::__shared_ptr_pointer<adm::graph::KernelProperty  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<adm::graph::KernelProperty  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm5graph14KernelPropertyEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::~KernelPropertyType(_QWORD *a1)
{
  void *v2;

  *a1 = &off_25083C508;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::~KernelPropertyType(_QWORD *a1)
{
  void *v2;

  *a1 = &off_25083C508;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B801508);
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getID(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16);
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getData(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getEntry@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 32))(a1);
  *(_DWORD *)a2 = a1[2];
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

void *adm::graph::detail::KernelPropertyType<CA::ChannelLayout>::getTypeInfo()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(136 * a1);
}

uint64_t std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 136;
    std::__destroy_at[abi:ne180100]<adm::graph::TerminalDescription,0>(i - 136);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_OWORD *std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::InputType,CA::StreamDescription>*>(_OWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x555555555555556)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      v8 = *a2;
      v9 = a2[2];
      result[1] = a2[1];
      result[2] = v9;
      *result = v8;
      result += 3;
      a2 += 3;
    }
    v4[1] = result;
  }
  return result;
}

void sub_236C9A46C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::vector<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*,std::tuple<adm::vp::UplinkNodeConfiguration::OutputType,CA::StreamDescription>*>(_OWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x555555555555556)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(a4);
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v7];
    while (a2 != a3)
    {
      v8 = *a2;
      v9 = a2[2];
      result[1] = a2[1];
      result[2] = v9;
      *result = v8;
      result += 3;
      a2 += 3;
    }
    v4[1] = result;
  }
  return result;
}

void sub_236C9A510(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__function::__value_func<std::unique_ptr<adm::vp::SPI> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void std::__shared_ptr_emplace<adm::vp::detail::ProxyFactoryImplementation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083C5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<adm::vp::detail::ProxyFactoryImplementation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_25083C5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

void std::__shared_ptr_emplace<adm::vp::detail::ProxyFactoryImplementation>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (*(_QWORD *)(a1 + 192))
  {
    v2 = a1 + 176;
    v4 = *(_QWORD *)(a1 + 176);
    v3 = *(_QWORD *)(a1 + 184);
    v5 = *(_QWORD **)v3;
    v5[1] = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 192) = 0;
    while (v3 != v2)
    {
      v6 = *(_QWORD *)(v3 + 8);
      std::__list_imp<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>>::__delete_node[abi:ne180100]<>((void **)v3);
      v3 = v6;
    }
  }
  if (*(_QWORD *)(a1 + 168))
  {
    v8 = *(_QWORD *)(a1 + 152);
    v7 = *(_QWORD *)(a1 + 160);
    v9 = *(_QWORD **)v7;
    v9[1] = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v8 + 8) = v9;
    *(_QWORD *)(a1 + 168) = 0;
    while (v7 != a1 + 152)
    {
      v10 = *(_QWORD *)(v7 + 8);
      std::__list_imp<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>>::__delete_node[abi:ne180100]<>((void **)v7);
      v7 = v10;
    }
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 136);
  v11 = *(_QWORD **)(a1 + 128);
  if (v11 == (_QWORD *)(a1 + 104))
  {
    v12 = 4;
    v11 = (_QWORD *)(a1 + 104);
  }
  else
  {
    if (!v11)
      goto LABEL_14;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_14:
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 40));
  v13 = *(std::__shared_weak_count **)(a1 + 32);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

void std::__list_imp<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>>::__delete_node[abi:ne180100]<>(void **a1)
{
  uint64_t v2;
  void **v3;

  v2 = (uint64_t)(a1 + 2);
  v3 = a1 + 4;
  std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v2);
  operator delete(a1);
}

void std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        v4 -= 16;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::recursive_mutex *v5;
  NSObject *adm_log_object;
  unint64_t v7;
  uint64_t *v8;
  char v9;
  char *v10;
  int v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint8_t v19;
  uint64_t **v20;
  int v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t *v25;
  _DWORD *v26;
  _DWORD *v27;
  unsigned __int8 *v28;
  __int8 v29;
  uint64_t *v30;
  int v31;
  uint64_t **v32;
  unsigned __int8 v33;
  uint64_t *v34;
  unsigned __int8 v35;
  uint64_t *v36;
  uint8_t v37;
  uint64_t *v38;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  _DWORD *v42;
  _DWORD *m;
  unsigned __int8 *v44;
  __int8 v45;
  uint64_t *v46;
  int v47;
  uint64_t **v48;
  unsigned __int8 v49;
  uint64_t *v50;
  unsigned __int8 v51;
  uint64_t *v52;
  uint8_t v53;
  uint64_t *v54;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t *v58;
  char *v59;
  char v60;
  uint64_t *v61;
  char *v62;
  int v63;
  uint64_t *v64;
  uint64_t v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  int v75;
  uint64_t v76;
  void **v77;
  char *v78;
  int v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  int v87;
  uint64_t *v88;
  uint64_t *v89;
  char *v90;
  int v91;
  uint64_t *v92;
  uint64_t *v93;
  char *v94;
  int v95;
  uint64_t *v96;
  uint64_t *v97;
  char *v98;
  int v99;
  uint64_t *v100;
  uint64_t *v101;
  char *v102;
  int v103;
  uint64_t *v104;
  uint64_t *v105;
  char *v106;
  int v107;
  uint64_t *v108;
  uint64_t *v109;
  char *v110;
  int v111;
  uint64_t *v112;
  uint64_t *v113;
  char *v114;
  int v115;
  uint64_t *v116;
  std::string *v117;
  char *v118;
  uint64_t *v119;
  uint8_t *v120;
  int v121;
  unint64_t v122;
  double *v123;
  _BOOL4 v124;
  BOOL v125;
  int *v126;
  int *v127;
  int v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  int *v136;
  int *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  __int128 v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  char *v160;
  __int128 v161;
  int64x2_t v162;
  int64x2_t *v163;
  __int128 v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  __int128 v178;
  std::__shared_weak_count *v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  _BOOL4 v183;
  int *v184;
  int *v185;
  int v186;
  _OWORD *v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t **v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  unint64_t *p_shared_owners;
  unint64_t v197;
  unint64_t v198;
  NSObject *v199;
  _OWORD *v200;
  __int128 v201;
  _QWORD *v202;
  unint64_t *v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t *v207;
  _QWORD **v208;
  _QWORD *v209;
  uint64_t v210;
  NSObject *v211;
  int *v212;
  int *v213;
  int v214;
  BOOL v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  NSObject *v219;
  void **v220;
  unint64_t v221;
  uint64_t *v222;
  NSObject *log;
  uint64_t v225;
  int v226;
  char *v227;
  unsigned __int8 *v228;
  int v229[4];
  int v230[4];
  int v231[4];
  __int128 v232;
  unsigned __int8 v233[8];
  uint64_t *v234;
  char v235[8];
  std::string *v236;
  char v237[8];
  uint64_t *v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t *v242;
  char v243[8];
  uint64_t *v244;
  char v245[8];
  uint64_t *v246;
  uint64_t *v247;
  uint64_t *v248;
  void *__p;
  void **p_p;
  uint64_t *v251;
  char v252;
  char v253[8];
  uint64_t *v254;
  uint8_t v255[8];
  uint64_t *v256;
  unsigned __int8 v257[8];
  uint64_t *v258;
  unsigned __int8 v259[8];
  uint64_t *v260;
  uint8_t v261[4];
  _BYTE v262[18];
  int64x2_t v263;
  int64x2_t *v264;
  char v265;
  unsigned __int8 v266[8];
  uint64_t v267;
  unsigned __int8 *v268;
  char v269;
  _BYTE buf[24];
  int64x2_t *v271;
  int64x2_t **v272;
  uint64_t *v273;
  int64x2_t ***v274;
  char v275;
  uint8_t v276[16];
  __int128 v277;
  char *v278;
  _BYTE v279[8];
  char **v280;
  char v281;
  uint64_t v282;

  v282 = *MEMORY[0x24BDAC8D0];
  v5 = (std::recursive_mutex *)(a2 + 16);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 16));
  adm_log_object = get_adm_log_object();
  v225 = a1;
  if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
    goto LABEL_56;
  v7 = *(_QWORD *)a3;
  v233[0] = 0;
  v234 = 0;
  v245[0] = 0;
  v246 = 0;
  log = adm_log_object;
  if (*(_DWORD *)v7 == 1)
  {
    *(_QWORD *)&v276[8] = 0;
    v276[0] = 3;
    v8 = (uint64_t *)operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "HardwareEchoAndDynamicsDSPInSeparateNodes");
  }
  else
  {
    if (*(_DWORD *)v7)
    {
      v8 = 0;
      v9 = 0;
      goto LABEL_8;
    }
    *(_QWORD *)&v276[8] = 0;
    v276[0] = 3;
    v8 = (uint64_t *)operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "AllOfUplinkDSPInOneNode");
  }
  *(_QWORD *)&v276[8] = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  v245[0] = 3;
  v276[0] = 0;
  v246 = v8;
  *(_QWORD *)&v276[8] = 0;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v276[8], 0);
  v9 = 3;
LABEL_8:
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
  v10 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
  v11 = *v10;
  *v10 = v9;
  v245[0] = v11;
  v12 = (uint64_t *)*((_QWORD *)v10 + 1);
  *((_QWORD *)v10 + 1) = v8;
  v246 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v10);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v245);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v246, v11);
  v244 = 0;
  v243[0] = 2;
  v14 = *(char **)(v7 + 8);
  v13 = *(char **)(v7 + 16);
  v15 = (uint64_t *)operator new(0x18uLL);
  v16 = v15;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  v247 = v15;
  LOBYTE(v248) = 0;
  if (v13 != v14)
  {
    v221 = v7;
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__vallocate[abi:ne180100](v15, (v13 - v14) >> 6);
    v222 = v16;
    v241 = v16[1];
    v239 = v241;
    __p = v16 + 2;
    p_p = (void **)&v239;
    v251 = &v241;
    v252 = 0;
    v17 = v241;
    do
    {
      v227 = v14;
      *(_BYTE *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      v255[0] = 0;
      v256 = 0;
      v228 = (unsigned __int8 *)v17;
      switch(*(_DWORD *)v14)
      {
        case 0:
          *(_QWORD *)&v276[8] = 0;
          v276[0] = 3;
          v18 = (uint64_t *)operator new(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(v18, "AllOfUplinkDSP");
          *(_QWORD *)&v276[8] = v18;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
          v19 = 3;
          v255[0] = 3;
          v276[0] = 0;
          v256 = v18;
          *(_QWORD *)&v276[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
          v20 = (uint64_t **)&v276[8];
          v21 = 0;
          goto LABEL_15;
        case 1:
          v22 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)buf, "HardwareDSP");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v22);
          v19 = buf[0];
          v255[0] = buf[0];
          buf[0] = 0;
          v18 = *(uint64_t **)&buf[8];
          v256 = *(uint64_t **)&buf[8];
          *(_QWORD *)&buf[8] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
          v21 = buf[0];
          v20 = (uint64_t **)&buf[8];
          goto LABEL_15;
        case 2:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>((uint64_t)&v263, "EchoDSP");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
          v19 = v263.i8[0];
          v255[0] = v263.i8[0];
          v263.i8[0] = 0;
          v18 = (uint64_t *)v263.i64[1];
          v256 = (uint64_t *)v263.i64[1];
          v263.i64[1] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
          v21 = v263.u8[0];
          v20 = (uint64_t **)&v263.i64[1];
          goto LABEL_15;
        case 3:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[12],char [12],0>((uint64_t)v261, "DynamicsDSP");
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
          v19 = v261[0];
          v255[0] = v261[0];
          v261[0] = 0;
          v18 = *(uint64_t **)&v262[4];
          v256 = *(uint64_t **)&v262[4];
          *(_QWORD *)&v262[4] = 0;
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
          v21 = v261[0];
          v20 = (uint64_t **)&v262[4];
LABEL_15:
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v20, v21);
          break;
        default:
          v18 = 0;
          v19 = 0;
          break;
      }
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
      v23 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "type");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
      v24 = *v23;
      *v23 = v19;
      v255[0] = v24;
      v25 = (uint64_t *)*((_QWORD *)v23 + 1);
      *((_QWORD *)v23 + 1) = v18;
      v256 = v25;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v256, v24);
      v26 = (_DWORD *)*((_QWORD *)v227 + 1);
      v27 = (_DWORD *)*((_QWORD *)v227 + 2);
      while (v26 != v27)
      {
        v28 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "input_format_map");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
        *(_QWORD *)&buf[16] = buf;
        LOBYTE(v271) = 1;
        LOBYTE(v272) = 0;
        v273 = 0;
        switch(*v26)
        {
          case 0:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)&v263, "Microphone");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
            v29 = (char)v272;
            LOBYTE(v272) = v263.i8[0];
            v263.i8[0] = v29;
            v30 = v273;
            v273 = (uint64_t *)v263.i64[1];
            v263.i64[1] = (uint64_t)v30;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
            v31 = v263.u8[0];
            v32 = (uint64_t **)&v263.i64[1];
            goto LABEL_24;
          case 1:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v261, "MicrophoneClipData");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
            v37 = v272;
            LOBYTE(v272) = v261[0];
            v261[0] = v37;
            v38 = v273;
            v273 = *(uint64_t **)&v262[4];
            *(_QWORD *)&v262[4] = v38;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
            v31 = v261[0];
            v32 = (uint64_t **)&v262[4];
            goto LABEL_24;
          case 2:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v259);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
            v33 = v272;
            LOBYTE(v272) = v259[0];
            v259[0] = v33;
            v34 = v273;
            v273 = v260;
            v260 = v34;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
            v31 = v259[0];
            v32 = &v260;
            goto LABEL_24;
          case 3:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v257, "Voice");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
            v35 = v272;
            LOBYTE(v272) = v257[0];
            v257[0] = v35;
            v36 = v273;
            v273 = v258;
            v258 = v36;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
            v31 = v257[0];
            v32 = &v258;
LABEL_24:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v32, v31);
            break;
          default:
            break;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
        v274 = &v272;
        v275 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v276, (uint64_t)buf, 2);
        *(_QWORD *)&v277 = v276;
        BYTE8(v277) = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v263);
        v264 = &v263;
        v265 = 1;
        v266[0] = 0;
        v267 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v266, (uint64_t)(v26 + 2));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v266);
        v268 = v266;
        v269 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v278, (uint64_t)&v263, 2);
        v280 = &v278;
        v281 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v28, (uint64_t)v276, 2);
        for (i = 0; i != -64; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v279[i - 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v279[i], v279[i - 8]);
        }
        for (j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v266[j]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v267 + j), v266[j]);
        }
        for (k = 0; k != -8; k -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&(&v272)[k]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v273)[k], LOBYTE((&v272)[k]));
        }
        v26 += 12;
      }
      v42 = (_DWORD *)*((_QWORD *)v227 + 4);
      for (m = (_DWORD *)*((_QWORD *)v227 + 5); v42 != m; v42 += 12)
      {
        v44 = (unsigned __int8 *)nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "output_format_map");
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)buf, "type");
        *(_QWORD *)&buf[16] = buf;
        LOBYTE(v271) = 1;
        LOBYTE(v272) = 0;
        v273 = 0;
        switch(*v42)
        {
          case 0:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>((uint64_t)&v263, "Microphone");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
            v45 = (char)v272;
            LOBYTE(v272) = v263.i8[0];
            v263.i8[0] = v45;
            v46 = v273;
            v273 = (uint64_t *)v263.i64[1];
            v263.i64[1] = (uint64_t)v46;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
            v47 = v263.u8[0];
            v48 = (uint64_t **)&v263.i64[1];
            goto LABEL_38;
          case 1:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)v261, "MicrophoneClipData");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
            v53 = v272;
            LOBYTE(v272) = v261[0];
            v261[0] = v53;
            v54 = v273;
            v273 = *(uint64_t **)&v262[4];
            *(_QWORD *)&v262[4] = v54;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
            v47 = v261[0];
            v48 = (uint64_t **)&v262[4];
            goto LABEL_38;
          case 2:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>((uint64_t)v259);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
            v49 = v272;
            LOBYTE(v272) = v259[0];
            v259[0] = v49;
            v50 = v273;
            v273 = v260;
            v260 = v50;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
            v47 = v259[0];
            v48 = &v260;
            goto LABEL_38;
          case 3:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)v257, "Voice");
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
            v51 = v272;
            LOBYTE(v272) = v257[0];
            v257[0] = v51;
            v52 = v273;
            v273 = v258;
            v258 = v52;
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
            v47 = v257[0];
            v48 = &v258;
LABEL_38:
            nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v48, v47);
            break;
          default:
            break;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v272);
        v274 = &v272;
        v275 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v276, (uint64_t)buf, 2);
        *(_QWORD *)&v277 = v276;
        BYTE8(v277) = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>((uint64_t)&v263);
        v264 = &v263;
        v265 = 1;
        v266[0] = 0;
        v267 = 0;
        nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(v266, (uint64_t)(v42 + 2));
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v266);
        v268 = v266;
        v269 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v278, (uint64_t)&v263, 2);
        v280 = &v278;
        v281 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(v44, (uint64_t)v276, 2);
        for (n = 0; n != -64; n -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v279[n - 8]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v279[n], v279[n - 8]);
        }
        for (ii = 0; ii != -64; ii -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v266[ii]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&v267 + ii), v266[ii]);
        }
        for (jj = 0; jj != -8; jj -= 4)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&(&v272)[jj]);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&(&v273)[jj], LOBYTE((&v272)[jj]));
        }
      }
      if (v227[60])
        v58 = (uint64_t *)*((unsigned int *)v227 + 14);
      else
        v58 = 0;
      v253[0] = 6;
      v254 = v58;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
      v59 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v228, "block_size");
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
      v60 = *v59;
      v226 = *v59;
      *v59 = 6;
      v253[0] = v60;
      v61 = (uint64_t *)*((_QWORD *)v59 + 1);
      *((_QWORD *)v59 + 1) = v58;
      v254 = v61;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v59);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v254, v226);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v228);
      v14 = v227 + 64;
      v17 = v241 + 16;
      v241 += 16;
      a1 = v225;
    }
    while (v227 + 64 != v13);
    v252 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&__p);
    v16 = v222;
    v222[1] = v17;
    v7 = v221;
  }
  v244 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v243);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v243);
  v62 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "node_configurations");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v243);
  v63 = *v62;
  *v62 = 2;
  v243[0] = v63;
  v64 = (uint64_t *)*((_QWORD *)v62 + 1);
  *((_QWORD *)v62 + 1) = v16;
  v244 = v64;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v62);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v243);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v244, v63);
  v65 = *(unsigned int *)(v7 + 32);
  v276[0] = 6;
  *(_QWORD *)&v276[8] = v65;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  v66 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "microphone_port_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  v67 = *v66;
  *v66 = 6;
  v276[0] = v67;
  v68 = *((_QWORD *)v66 + 1);
  *((_QWORD *)v66 + 1) = v65;
  *(_QWORD *)&v276[8] = v68;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v276);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v276[8], v67);
  v69 = *(_QWORD *)(v7 + 40);
  buf[0] = 7;
  *(_QWORD *)&buf[8] = v69;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  v70 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "microphone_device_sample_rate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  v71 = *v70;
  *v70 = 7;
  buf[0] = v71;
  v72 = *((_QWORD *)v70 + 1);
  *((_QWORD *)v70 + 1) = v69;
  *(_QWORD *)&buf[8] = v72;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v70);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&buf[8], v71);
  v73 = *(unsigned int *)(v7 + 48);
  v263.i8[0] = 6;
  v263.i64[1] = v73;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
  v74 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "microphone_device_input_latency");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
  v75 = *v74;
  *v74 = 6;
  v263.i8[0] = v75;
  v76 = *((_QWORD *)v74 + 1);
  *((_QWORD *)v74 + 1) = v73;
  v263.i64[1] = v76;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v74);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v263);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v263.i64[1], v75);
  v77 = (void **)*(unsigned int *)(v7 + 52);
  LOBYTE(__p) = 6;
  p_p = v77;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  v78 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "microphone_device_input_safety_offset");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  v79 = *v78;
  *v78 = 6;
  LOBYTE(__p) = v79;
  v80 = (uint64_t *)*((_QWORD *)v78 + 1);
  *((_QWORD *)v78 + 1) = v77;
  p_p = (void **)v80;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v78);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&__p);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&p_p, v79);
  v81 = *(unsigned int *)(v7 + 96);
  v261[0] = 6;
  *(_QWORD *)&v262[4] = v81;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
  v82 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "reference_port_type");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
  v83 = *v82;
  *v82 = 6;
  v261[0] = v83;
  v84 = *((_QWORD *)v82 + 1);
  *((_QWORD *)v82 + 1) = v81;
  *(_QWORD *)&v262[4] = v84;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v82);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v261);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v262[4], v83);
  v85 = *(uint64_t **)(v7 + 104);
  v259[0] = 7;
  v260 = v85;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
  v86 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "reference_device_sample_rate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
  v87 = *v86;
  *v86 = 7;
  v259[0] = v87;
  v88 = (uint64_t *)*((_QWORD *)v86 + 1);
  *((_QWORD *)v86 + 1) = v85;
  v260 = v88;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v86);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v259);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v260, v87);
  v89 = (uint64_t *)*(unsigned int *)(v7 + 112);
  v257[0] = 6;
  v258 = v89;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
  v90 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "reference_device_input_latency");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
  v91 = *v90;
  *v90 = 6;
  v257[0] = v91;
  v92 = (uint64_t *)*((_QWORD *)v90 + 1);
  *((_QWORD *)v90 + 1) = v89;
  v258 = v92;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v90);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v257);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v258, v91);
  v93 = (uint64_t *)*(unsigned int *)(v7 + 116);
  v255[0] = 6;
  v256 = v93;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
  v94 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "reference_device_input_safety_offset");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
  v95 = *v94;
  *v94 = 6;
  v255[0] = v95;
  v96 = (uint64_t *)*((_QWORD *)v94 + 1);
  *((_QWORD *)v94 + 1) = v93;
  v256 = v96;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v94);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v255);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v256, v95);
  v97 = (uint64_t *)*(unsigned int *)(v7 + 120);
  v253[0] = 6;
  v254 = v97;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
  v98 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "reference_device_output_latency");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
  v99 = *v98;
  *v98 = 6;
  v253[0] = v99;
  v100 = (uint64_t *)*((_QWORD *)v98 + 1);
  *((_QWORD *)v98 + 1) = v97;
  v254 = v100;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v98);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v253);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v254, v99);
  v101 = (uint64_t *)*(unsigned int *)(v7 + 124);
  LOBYTE(v247) = 6;
  v248 = v101;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v247);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v247);
  v102 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "reference_device_output_safety_offset");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v247);
  v103 = *v102;
  *v102 = 6;
  LOBYTE(v247) = v103;
  v104 = (uint64_t *)*((_QWORD *)v102 + 1);
  *((_QWORD *)v102 + 1) = v101;
  v248 = v104;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v102);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v247);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v248, v103);
  v105 = (uint64_t *)*(unsigned __int8 *)(v7 + 160);
  LOBYTE(v241) = 4;
  v242 = v105;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v241);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v241);
  v106 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "reference_is_hardware_tap_stream");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v241);
  v107 = *v106;
  *v106 = 4;
  LOBYTE(v241) = v107;
  v108 = (uint64_t *)*((_QWORD *)v106 + 1);
  *((_QWORD *)v106 + 1) = v105;
  v242 = v108;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v106);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v241);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v242, v107);
  v109 = (uint64_t *)*(unsigned int *)(v7 + 188);
  LOBYTE(v239) = 5;
  v240 = v109;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v239);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v239);
  v110 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "chat_flavor");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v239);
  v111 = *v110;
  *v110 = 5;
  LOBYTE(v239) = v111;
  v112 = (uint64_t *)*((_QWORD *)v110 + 1);
  *((_QWORD *)v110 + 1) = v109;
  v240 = v112;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v110);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v239);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v240, v111);
  v113 = (uint64_t *)*(unsigned int *)(v7 + 192);
  v237[0] = 6;
  v238 = v113;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v237);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v237);
  v114 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "client_io_block_size");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v237);
  v115 = *v114;
  *v114 = 6;
  v237[0] = v115;
  v116 = (uint64_t *)*((_QWORD *)v114 + 1);
  *((_QWORD *)v114 + 1) = v113;
  v238 = v116;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v114);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v237);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v238, v115);
  v236 = 0;
  v235[0] = 3;
  v117 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,std::string const&>(v7 + 200);
  v236 = v117;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
  v118 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(v233, "client_uid");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
  LODWORD(v113) = *v118;
  *v118 = 3;
  v235[0] = (char)v113;
  v119 = (uint64_t *)*((_QWORD *)v118 + 1);
  *((_QWORD *)v118 + 1) = v117;
  v236 = (std::string *)v119;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v118);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v235);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v236, (int)v113);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v233);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(v276, (uint64_t)v233, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v233);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v234, v233[0]);
  if ((SBYTE7(v277) & 0x80u) == 0)
    v120 = v276;
  else
    v120 = *(uint8_t **)v276;
  *(_DWORD *)buf = 136315394;
  *(_QWORD *)&buf[4] = "uplink";
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = v120;
  _os_log_impl(&dword_236C84000, log, OS_LOG_TYPE_DEFAULT, "creating %s voice processor proxy list with configuration: %s", buf, 0x16u);
  if (SBYTE7(v277) < 0)
    operator delete(*(void **)v276);
LABEL_56:
  v121 = *(_DWORD *)(a2 + 176);
  v122 = *(_QWORD *)a3;
  if (v121 == **(_DWORD **)a3 && *(_DWORD *)(v122 + 192))
  {
    if (v121 == 1)
    {
      if (*(_QWORD *)(v122 + 16) - *(_QWORD *)(v122 + 8) == 192)
      {
        adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v276, v122, *(std::__shared_weak_count **)(a3 + 8), 1);
        if ((_BYTE)v278)
        {
          if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 0)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 2)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v276, 0))
          {
            v125 = 1;
            if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v276, 1)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v276, 2))
            {
              v126 = (int *)v277;
              if (!(_QWORD)v277)
              {
                v126 = *(int **)(*(_QWORD *)v276 + 8);
                if (*v126 != DWORD2(v277))
                {
                  v127 = v126 + 16;
                  do
                  {
                    v128 = *v127;
                    v127 += 16;
                  }
                  while (v128 != DWORD2(v277));
                  v126 = v127 - 16;
                }
                *(_QWORD *)&v277 = v126;
              }
              v125 = *((_BYTE *)v126 + 60) == 0;
            }
          }
          else
          {
            v125 = 1;
          }
          if ((_BYTE)v278)
          {
            v180 = *(std::__shared_weak_count **)&v276[8];
            if (*(_QWORD *)&v276[8])
            {
              v181 = (unint64_t *)(*(_QWORD *)&v276[8] + 8);
              do
                v182 = __ldaxr(v181);
              while (__stlxr(v182 - 1, v181));
              if (!v182)
              {
                ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                std::__shared_weak_count::__release_weak(v180);
              }
            }
          }
          if (!v125)
          {
            adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v276, *(_QWORD *)a3, *(std::__shared_weak_count **)(a3 + 8), 2);
            if ((_BYTE)v278)
            {
              v183 = 0;
              if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 0))
              {
                if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 1)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 2)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v276, 3))
                {
                  v184 = (int *)v277;
                  if (!(_QWORD)v277)
                  {
                    v184 = *(int **)(*(_QWORD *)v276 + 8);
                    if (*v184 != DWORD2(v277))
                    {
                      v185 = v184 + 16;
                      do
                      {
                        v186 = *v185;
                        v185 += 16;
                      }
                      while (v186 != DWORD2(v277));
                      v184 = v185 - 16;
                    }
                    *(_QWORD *)&v277 = v184;
                  }
                  v183 = *((unsigned __int8 *)v184 + 60) != 0;
                }
                else
                {
                  v183 = 0;
                }
              }
              if ((_BYTE)v278)
                std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v276);
              if (v183)
              {
                adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v276, *(_QWORD *)a3, *(std::__shared_weak_count **)(a3 + 8), 3);
                if ((_BYTE)v278)
                {
                  if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 3)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v276, 3))
                  {
                    v212 = (int *)v277;
                    if (!(_QWORD)v277)
                    {
                      v212 = *(int **)(*(_QWORD *)v276 + 8);
                      if (*v212 != DWORD2(v277))
                      {
                        v213 = v212 + 16;
                        do
                        {
                          v214 = *v213;
                          v213 += 16;
                        }
                        while (v214 != DWORD2(v277));
                        v212 = v213 - 16;
                      }
                      *(_QWORD *)&v277 = v212;
                    }
                    v215 = *((_BYTE *)v212 + 60) != 0;
                  }
                  else
                  {
                    v215 = 0;
                  }
                  if ((_BYTE)v278)
                    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v276);
                  if (v215)
                  {
LABEL_88:
                    v132 = *(_QWORD *)a3;
                    v133 = *(_QWORD *)(a3 + 8);
                    *(_QWORD *)v276 = *(_QWORD *)a3;
                    *(_QWORD *)&v276[8] = v133;
                    if (v133)
                    {
                      v134 = (unint64_t *)(v133 + 8);
                      do
                        v135 = __ldxr(v134);
                      while (__stxr(v135 + 1, v134));
                      v132 = *(_QWORD *)a3;
                    }
                    v277 = 0uLL;
                    v279[0] = 0;
                    v278 = 0;
                    v264 = 0;
                    v263 = 0uLL;
                    v136 = *(int **)(v132 + 8);
                    v137 = *(int **)(v132 + 16);
                    if (v136 == v137)
                    {
                      v168 = 0;
                    }
                    else
                    {
                      do
                      {
                        v138 = operator new();
                        v139 = *v136;
                        *(_QWORD *)v138 = off_25083E6F8;
                        std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v138 + 8));
                        *(_QWORD *)(v138 + 176) = 0;
                        *(_QWORD *)(v138 + 184) = 0;
                        *(_QWORD *)v138 = off_25083E4A0;
                        v140 = *(_QWORD *)(a3 + 8);
                        *(_QWORD *)(v138 + 200) = *(_QWORD *)a3;
                        *(_QWORD *)(v138 + 208) = v140;
                        if (v140)
                        {
                          v141 = (unint64_t *)(v140 + 8);
                          do
                            v142 = __ldxr(v141);
                          while (__stxr(v142 + 1, v141));
                        }
                        *(_DWORD *)(v138 + 216) = v139;
                        do
                        {
                          v143 = __ldaxr(&adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::ProxyImplementation(adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration> const&,adm::vp::UplinkNodeConfiguration::Type)::gProxyID);
                          v144 = v143 + 1;
                        }
                        while (__stlxr(v144, &adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::ProxyImplementation(adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration> const&,adm::vp::UplinkNodeConfiguration::Type)::gProxyID));
                        *(_DWORD *)(v138 + 192) = v144;
                        *(_QWORD *)v138 = &off_25083E560;
                        if ((v139 - 1) >= 3)
                          v145 = 0;
                        else
                          v145 = v139;
                        *(_DWORD *)(v138 + 220) = v145;
                        v146 = *(_QWORD *)(a2 + 8);
                        *(_QWORD *)&v232 = *(_QWORD *)a2;
                        *((_QWORD *)&v232 + 1) = v146;
                        if (v146)
                        {
                          v147 = (unint64_t *)(v146 + 16);
                          do
                            v148 = __ldxr(v147);
                          while (__stxr(v148 + 1, v147));
                        }
                        v149 = operator new();
                        *(_QWORD *)v149 = &off_25083C648;
                        *(_QWORD *)(v149 + 8) = 0;
                        *(_QWORD *)(v149 + 16) = 0;
                        *(_QWORD *)(v149 + 24) = v138;
                        *(_OWORD *)(v149 + 32) = v232;
                        *(_QWORD *)&v150 = v138;
                        *((_QWORD *)&v150 + 1) = v149;
                        v151 = (char *)v263.i64[1];
                        if (v263.i64[1] >= (unint64_t)v264)
                        {
                          *(_OWORD *)v229 = v150;
                          v153 = (v263.i64[1] - v263.i64[0]) >> 4;
                          if ((unint64_t)(v153 + 1) >> 60)
                            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                          v154 = ((uint64_t)v264->i64 - v263.i64[0]) >> 3;
                          if (v154 <= v153 + 1)
                            v154 = v153 + 1;
                          if ((unint64_t)v264 - v263.i64[0] >= 0x7FFFFFFFFFFFFFF0)
                            v155 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v155 = v154;
                          v272 = &v264;
                          v156 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v155);
                          v151 = &v156[16 * v153];
                          *(_OWORD *)v151 = *(_OWORD *)v229;
                          v158 = (_QWORD *)v263.i64[1];
                          v159 = (_QWORD *)v263.i64[0];
                          if (v263.i64[1] == v263.i64[0])
                          {
                            v162 = vdupq_n_s64(v263.u64[1]);
                            v160 = v151;
                          }
                          else
                          {
                            v160 = v151;
                            do
                            {
                              v161 = *((_OWORD *)v158 - 1);
                              v158 -= 2;
                              *((_OWORD *)v160 - 1) = v161;
                              v160 -= 16;
                              *v158 = 0;
                              v158[1] = 0;
                            }
                            while (v158 != v159);
                            v162 = v263;
                          }
                          v152 = v151 + 16;
                          v263.i64[0] = (uint64_t)v160;
                          v263.i64[1] = (uint64_t)(v151 + 16);
                          *(int64x2_t *)&buf[8] = v162;
                          v163 = v264;
                          v264 = (int64x2_t *)&v156[16 * v157];
                          v271 = v163;
                          *(_QWORD *)buf = v162.i64[0];
                          std::__split_buffer<std::shared_ptr<adm::vp::detail::UplinkProxyImplementation>>::~__split_buffer((uint64_t)buf);
                        }
                        else
                        {
                          *(_OWORD *)v263.i64[1] = v150;
                          v152 = v151 + 16;
                        }
                        v263.i64[1] = (uint64_t)v152;
                        v164 = *(_OWORD *)v151;
                        v165 = *((_QWORD *)v151 + 1);
                        if (v165)
                        {
                          v166 = (unint64_t *)(v165 + 16);
                          do
                            v167 = __ldxr(v166);
                          while (__stxr(v167 + 1, v166));
                        }
                        v169 = (char *)*((_QWORD *)&v277 + 1);
                        v168 = v278;
                        if (*((_QWORD *)&v277 + 1) >= (unint64_t)v278)
                        {
                          v170 = (char *)v277;
                          v171 = (uint64_t)(*((_QWORD *)&v277 + 1) - v277) >> 4;
                          v172 = v171 + 1;
                          if ((unint64_t)(v171 + 1) >> 60)
                            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                          *(_OWORD *)v230 = v164;
                          if ((uint64_t)&v278[-v277] >> 3 > v172)
                            v172 = (uint64_t)&v278[-v277] >> 3;
                          if ((unint64_t)&v278[-v277] >= 0x7FFFFFFFFFFFFFF0)
                            v173 = 0xFFFFFFFFFFFFFFFLL;
                          else
                            v173 = v172;
                          if (v173 >> 60)
                            std::__throw_bad_array_new_length[abi:ne180100]();
                          v174 = (char *)operator new(16 * v173);
                          v175 = &v174[16 * v171];
                          v168 = &v174[16 * v173];
                          *(_OWORD *)v175 = *(_OWORD *)v230;
                          if (v169 == v170)
                          {
                            *(_QWORD *)&v277 = v175;
                            v278 = v168;
                          }
                          else
                          {
                            v176 = v175;
                            v177 = v169;
                            do
                            {
                              v178 = *((_OWORD *)v177 - 1);
                              v177 -= 16;
                              *((_OWORD *)v176 - 1) = v178;
                              v176 -= 16;
                              *(_QWORD *)v177 = 0;
                              *((_QWORD *)v177 + 1) = 0;
                            }
                            while (v177 != v170);
                            *(_QWORD *)&v277 = v176;
                            v278 = v168;
                            while (v169 != v170)
                            {
                              v179 = (std::__shared_weak_count *)*((_QWORD *)v169 - 1);
                              if (v179)
                                std::__shared_weak_count::__release_weak(v179);
                              v169 -= 16;
                            }
                          }
                          if (v170)
                            operator delete(v170);
                          v169 = v175;
                        }
                        else
                        {
                          **((_OWORD **)&v277 + 1) = v164;
                        }
                        *((_QWORD *)&v277 + 1) = v169 + 16;
                        v136 += 16;
                      }
                      while (v136 != v137);
                    }
                    v187 = operator new(0x40uLL);
                    v188 = *(_OWORD *)v276;
                    v189 = v277;
                    memset(v276, 0, sizeof(v276));
                    v187[1] = v188;
                    v187[2] = v189;
                    *((_QWORD *)v187 + 6) = v168;
                    v278 = 0;
                    v277 = 0uLL;
                    *((_BYTE *)v187 + 56) = v279[0];
                    v190 = *(_QWORD *)(a2 + 128);
                    *(_QWORD *)v187 = v190;
                    *((_QWORD *)v187 + 1) = a2 + 128;
                    *(_QWORD *)(v190 + 8) = v187;
                    *(_QWORD *)(a2 + 128) = v187;
                    ++*(_QWORD *)(a2 + 144);
                    adm::vp::detail::ProxyFactoryImplementation::createAndConfigureVoiceProcessor((adm::vp::detail::ProxyFactoryImplementation *)buf, a2);
                    if (!buf[16])
                    {
                      v211 = get_adm_log_object();
                      if (os_log_type_enabled(v211, OS_LOG_TYPE_ERROR))
                      {
                        adm::vp::to_json_str<std::error_code>(&__p, (const std::error_code *)buf);
                        v220 = SHIBYTE(v251) >= 0 ? &__p : (void **)__p;
                        *(_DWORD *)v261 = 136315394;
                        *(_QWORD *)v262 = "uplink";
                        *(_WORD *)&v262[8] = 2080;
                        *(_QWORD *)&v262[10] = v220;
                        _os_log_error_impl(&dword_236C84000, v211, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy due to error: %s", v261, 0x16u);
                        if (SHIBYTE(v251) < 0)
                          operator delete(__p);
                      }
                      *(_OWORD *)v225 = *(_OWORD *)buf;
                      *(_BYTE *)(v225 + 24) = 0;
                      goto LABEL_203;
                    }
                    __p = &__p;
                    p_p = &__p;
                    v251 = 0;
                    v192 = (uint64_t *)v263.i64[1];
                    v191 = (uint64_t *)v263.i64[0];
                    if (v263.i64[0] == v263.i64[1])
                    {
                      v206 = v225;
                      *(_QWORD *)v225 = v225;
                      *(_QWORD *)(v225 + 8) = v225;
                      v193 = (uint64_t **)(v225 + 16);
                    }
                    else
                    {
                      v193 = &v251;
                      do
                      {
                        v195 = *v191;
                        v194 = (std::__shared_weak_count *)v191[1];
                        *(_OWORD *)v231 = 0u;
                        if (v194)
                        {
                          p_shared_owners = (unint64_t *)&v194->__shared_owners_;
                          do
                            v197 = __ldxr(p_shared_owners);
                          while (__stxr(v197 + 1, p_shared_owners));
                          *(_QWORD *)&v231[2] = v194;
                          do
                            v198 = __ldxr(p_shared_owners);
                          while (__stxr(v198 + 1, p_shared_owners));
                        }
                        if (!v195)
                        {
                          v199 = get_adm_log_object();
                          if (os_log_type_enabled(v199, OS_LOG_TYPE_FAULT))
                          {
                            *(_WORD *)v261 = 0;
                            _os_log_fault_impl(&dword_236C84000, v199, OS_LOG_TYPE_FAULT, "Invalid VoiceProcessorProxy implementation provided", v261, 2u);
                          }
                        }
                        v200 = operator new(0x20uLL);
                        *((_QWORD *)&v201 + 1) = *(_QWORD *)&v231[2];
                        *(_QWORD *)&v201 = v195;
                        v200[1] = v201;
                        v202 = __p;
                        *(_QWORD *)v200 = __p;
                        *((_QWORD *)v200 + 1) = &__p;
                        v202[1] = v200;
                        __p = v200;
                        v251 = (uint64_t *)((char *)v251 + 1);
                        if (v194)
                        {
                          v203 = (unint64_t *)&v194->__shared_owners_;
                          do
                            v204 = __ldaxr(v203);
                          while (__stlxr(v204 - 1, v203));
                          if (!v204)
                          {
                            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                            std::__shared_weak_count::__release_weak(v194);
                          }
                        }
                        v191 += 2;
                      }
                      while (v191 != v192);
                      v205 = v251;
                      v206 = v225;
                      *(_QWORD *)v225 = v225;
                      *(_QWORD *)(v225 + 8) = v225;
                      *(_QWORD *)(v225 + 16) = 0;
                      if (!v205)
                        goto LABEL_202;
                      v208 = (_QWORD **)__p;
                      v207 = (uint64_t *)p_p;
                      v209 = *p_p;
                      v209[1] = *((_QWORD *)__p + 1);
                      *v208[1] = v209;
                      v210 = *(_QWORD *)v225;
                      *(_QWORD *)(v210 + 8) = v207;
                      *v207 = v210;
                      *(_QWORD *)v225 = v208;
                      v208[1] = (_QWORD *)v225;
                      *(_QWORD *)(v225 + 16) = v205;
                    }
                    *v193 = 0;
LABEL_202:
                    *(_BYTE *)(v206 + 24) = 1;
                    std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear((uint64_t *)&__p);
LABEL_203:
                    *(_QWORD *)buf = &v263;
                    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    *(_QWORD *)buf = &v277;
                    std::vector<std::weak_ptr<adm::vp::detail::UplinkProxyImplementation>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    v216 = *(std::__shared_weak_count **)&v276[8];
                    if (*(_QWORD *)&v276[8])
                    {
                      v217 = (unint64_t *)(*(_QWORD *)&v276[8] + 8);
                      do
                        v218 = __ldaxr(v217);
                      while (__stlxr(v218 - 1, v217));
                      if (!v218)
                      {
                        ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
                        std::__shared_weak_count::__release_weak(v216);
                      }
                    }
                    goto LABEL_215;
                  }
                }
              }
            }
          }
        }
      }
    }
    else if (!v121 && *(_QWORD *)(v122 + 16) - *(_QWORD *)(v122 + 8) == 64)
    {
      adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)v276, v122, *(std::__shared_weak_count **)(a3 + 8), 0);
      if ((_BYTE)v278)
      {
        if (adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 0)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276, 2)&& adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>((uint64_t)v276, 3))
        {
          v123 = (double *)adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::getFormat<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276);
          v124 = *v123 != *(double *)adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::getFormat<adm::vp::UplinkNodeConfiguration::InputType>((uint64_t)v276);
        }
        else
        {
          v124 = 1;
        }
        if ((_BYTE)v278)
        {
          v129 = *(std::__shared_weak_count **)&v276[8];
          if (*(_QWORD *)&v276[8])
          {
            v130 = (unint64_t *)(*(_QWORD *)&v276[8] + 8);
            do
              v131 = __ldaxr(v130);
            while (__stlxr(v131 - 1, v130));
            if (!v131)
            {
              ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
              std::__shared_weak_count::__release_weak(v129);
            }
          }
        }
        if (!v124)
          goto LABEL_88;
      }
    }
  }
  v219 = get_adm_log_object();
  if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v276 = 136315138;
    *(_QWORD *)&v276[4] = "uplink";
    _os_log_error_impl(&dword_236C84000, v219, OS_LOG_TYPE_ERROR, "failed to create %s voice processor proxy list due to invalid configuration", v276, 0xCu);
  }
  *(_QWORD *)a1 = 1;
  *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(a1 + 24) = 0;
LABEL_215:
  std::recursive_mutex::unlock(v5);
}

void sub_236C9C464(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x236C9C90CLL);
  JUMPOUT(0x236C9C844);
}

void sub_236C9C480(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (a2)
  {
    __cxa_begin_catch(a1);
    adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1}::operator()((uint64_t)&a31, v31);
    __cxa_rethrow();
  }
  JUMPOUT(0x236C9C844);
}

void sub_236C9C4A4(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x236C9C910);
  }
  JUMPOUT(0x236C9C844);
}

void sub_236C9C4B8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x236C9C900);
  JUMPOUT(0x236C9C844);
}

void sub_236C9C4C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t *a33)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a33);
    JUMPOUT(0x236C9C910);
  }
  JUMPOUT(0x236C9C844);
}

void sub_236C9C5E0(uint64_t a1, int a2)
{
  void *v2;

  if (a2)
  {
    operator delete(v2);
    JUMPOUT(0x236C9C84CLL);
  }
  JUMPOUT(0x236C9C844);
}

void sub_236C9C5F4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__list_imp<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void adm::vp::detail::ProxyFactoryImplementation::createAndConfigureVoiceProcessor(adm::vp::detail::ProxyFactoryImplementation *this, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  adm::vp::SPI *v6;
  _QWORD *v7;
  adm::vp::SPI *v8;
  NSObject *adm_log_object;
  void **v10;
  const char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  adm::vp::SPI *v15;
  void **v16;
  void *__p[2];
  char v18;
  adm::vp::SPI *v19[2];
  char v20;
  uint8_t buf[4];
  _BYTE v22[12];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (std::recursive_mutex *)(a2 + 16);
  std::recursive_mutex::lock((std::recursive_mutex *)(a2 + 16));
  if (!*(_QWORD *)(a2 + 112) && *(_QWORD *)(a2 + 144) && *(_QWORD *)(a2 + 168))
  {
    v5 = *(_QWORD *)(a2 + 104);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(adm::vp::SPI **__return_ptr))(*(_QWORD *)v5 + 48))(v19);
    v6 = v19[0];
    if (v19[0])
    {
      v7 = (_QWORD *)operator new();
      v8 = v19[0];
      *v7 = &off_25083C6E8;
      v7[1] = 0;
      v7[2] = 0;
      v7[3] = v8;
    }
    else
    {
      v7 = 0;
    }
    v19[0] = 0;
    v12 = *(std::__shared_weak_count **)(a2 + 120);
    *(_QWORD *)(a2 + 112) = v6;
    *(_QWORD *)(a2 + 120) = v7;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v19[0];
    v19[0] = 0;
    if (v15)
    {
      adm::vp::SPI::~SPI(v15);
      MEMORY[0x23B801508]();
    }
  }
  adm::vp::detail::ProxyFactoryImplementation::configureUplink((adm::vp::detail::ProxyFactoryImplementation *)v19, (_QWORD *)a2);
  if (!v20)
  {
    adm_log_object = get_adm_log_object();
    if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *(_OWORD *)this = *(_OWORD *)v19;
      *((_BYTE *)this + 16) = 0;
      goto LABEL_17;
    }
    buf[0] = 0;
    *(_QWORD *)&v22[4] = 0;
    std::to_json(buf, (const std::error_code *)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[4], buf[0]);
    if (v18 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v22 = v10;
    v11 = "failed to configure voice processor uplink due to error: %s";
LABEL_30:
    _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
    if (v18 < 0)
      operator delete(__p[0]);
    goto LABEL_16;
  }
  adm::vp::detail::ProxyFactoryImplementation::configureDownlink((adm::vp::detail::ProxyFactoryImplementation *)v19, a2);
  if (!v20)
  {
    adm_log_object = get_adm_log_object();
    if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      goto LABEL_16;
    buf[0] = 0;
    *(_QWORD *)&v22[4] = 0;
    std::to_json(buf, (const std::error_code *)v19);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[4], buf[0]);
    if (v18 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v22 = v16;
    v11 = "failed to configure voice processor downlink due to error: %s";
    goto LABEL_30;
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 16) = 1;
LABEL_17:
  std::recursive_mutex::unlock(v4);
}

void sub_236C9CC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;
  _OWORD *v18;

  if (a2)
  {
    std::unique_ptr<adm::vp::SPI>::reset[abi:ne180100]((adm::vp::SPI **)&a12);
    if (a2 == 2)
    {
      v18 = __cxa_begin_catch(exception_object);
      a12 = 0uLL;
      std::shared_ptr<adm::vp::SPI>::operator=[abi:ne180100](v15, &a12);
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
      *(_OWORD *)v14 = v18[1];
      *(_BYTE *)(v14 + 16) = 0;
      __cxa_end_catch();
      JUMPOUT(0x236C9CB1CLL);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::shared_ptr<adm::vp::detail::UplinkProxyImplementation>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void adm::vp::to_json_str<std::error_code>(_QWORD *a1, const std::error_code *a2)
{
  unsigned __int8 v3[8];
  uint64_t *v4;

  v3[0] = 0;
  v4 = 0;
  std::to_json(v3, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(a1, (uint64_t)v3, 4);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v3);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v4, v3[0]);
}

void sub_236C9CDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a9);
  _Unwind_Resume(a1);
}

void std::to_json(unsigned __int8 *a1, const std::error_code *a2)
{
  uint64_t *val;
  char *v5;
  int v6;
  uint64_t *v7;
  char *v8;
  char v9;
  uint64_t *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  int v14;
  uint64_t *v15;
  char v16[8];
  uint64_t *v17;
  std::string v18;
  unsigned __int8 v19[8];
  uint64_t *v20;
  char v21[8];
  uint64_t *v22;

  val = (uint64_t *)a2->__val_;
  v21[0] = 5;
  v22 = val;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "value");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  v6 = *v5;
  *v5 = 5;
  v21[0] = v6;
  v7 = (uint64_t *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = val;
  v22 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v22, v6);
  std::error_code::message(&v18, a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)v19, (uint64_t)&v18);
  v8 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "message");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  v9 = *v8;
  *v8 = v19[0];
  v19[0] = v9;
  v10 = (uint64_t *)*((_QWORD *)v8 + 1);
  *((_QWORD *)v8 + 1) = v20;
  v20 = v10;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v19);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v20, v19[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v11 = (char *)((uint64_t (*)(const std::error_category *))a2->__cat_->name)(a2->__cat_);
  v16[0] = 3;
  v12 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(v11);
  v17 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "category");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  v14 = *v13;
  *v13 = 3;
  v16[0] = v14;
  v15 = (uint64_t *)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v12;
  v17 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v14);
}

void sub_236C9CF98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  _Unwind_Resume(a1);
}

char *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(unsigned __int8 *a1, char *__s)
{
  int v4;
  _QWORD *v5;
  uint64_t **v6;
  void **v7;
  char *v8;
  uint64_t **v9;
  void *exception;
  unint64_t v12;
  char *v13;
  std::string __p;
  std::string v15;
  uint64_t v16;

  v4 = *a1;
  if (!*a1)
  {
    *a1 = 1;
    v5 = operator new(0x18uLL);
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    *((_QWORD *)a1 + 1) = v5;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    v4 = *a1;
  }
  if (v4 != 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v12 = *a1;
    if (v12 > 9)
      v13 = "number";
    else
      v13 = off_25083C060[v12];
    std::string::basic_string[abi:ne180100]<0>(&__p, v13);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v15, "cannot use operator[] with a string argument with ", &__p);
    nlohmann::detail::type_error::create((uint64_t)exception, 305, (uint64_t)&v15);
  }
  v6 = (uint64_t **)*((_QWORD *)a1 + 1);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v7 = (void **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v6, &v16, &__p);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0x48uLL);
    v15.__r_.__value_.__l.__size_ = (std::string::size_type)(v6 + 1);
    *(std::string *)(v8 + 32) = __p;
    memset(&__p, 0, sizeof(__p));
    v8[56] = 0;
    *((_QWORD *)v8 + 8) = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(v8 + 56));
    v15.__r_.__value_.__s.__data_[16] = 1;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v6, v16, v9, (uint64_t *)v8);
    v15.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v15);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v8 + 56;
}

void sub_236C9D180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(char *a1)
{
  _QWORD *v2;

  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, a1);
  return v2;
}

void sub_236C9D22C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *(_QWORD *)a1)
      adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(*(adm::vp::detail::ProxyFactoryImplementation **)a1);
  }
  else
  {
    v5 = 0;
  }
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(adm::vp::detail::ProxyFactoryImplementation *this)
{
  NSObject *adm_log_object;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void **v7;
  void **v8;
  void *__p[2];
  char v10;
  std::error_code v11;
  char v12;
  uint8_t buf[4];
  _BYTE v14[12];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  adm::vp::detail::ProxyFactoryImplementation::configureUplink((adm::vp::detail::ProxyFactoryImplementation *)&v11, this);
  if (!v12)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 0;
      *(_QWORD *)&v14[4] = 0;
      std::to_json(buf, &v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v14[4], buf[0]);
      v7 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v14 = v7;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to re-configure voice processor uplink due to error: %s", buf, 0xCu);
      if (v10 < 0)
        operator delete(__p[0]);
    }
  }
  adm::vp::detail::ProxyFactoryImplementation::configureDownlink((adm::vp::detail::ProxyFactoryImplementation *)&v11, (uint64_t)this);
  if (!v12)
  {
    v3 = get_adm_log_object();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 0;
      *(_QWORD *)&v14[4] = 0;
      std::to_json(buf, &v11);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)buf, 4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)buf);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v14[4], buf[0]);
      v8 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v14 = v8;
      _os_log_error_impl(&dword_236C84000, v3, OS_LOG_TYPE_ERROR, "failed to re-configure voice processor downlink due to error: %s", buf, 0xCu);
      if (v10 < 0)
        operator delete(__p[0]);
    }
  }
  if (*((_QWORD *)this + 14))
  {
    if (!*((_QWORD *)this + 18) && !*((_QWORD *)this + 21))
    {
      v4 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
    }
  }
}

void sub_236C9D52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a15);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void adm::vp::detail::ProxyFactoryImplementation::configureUplink(adm::vp::detail::ProxyFactoryImplementation *this, _QWORD *a2)
{
  adm::vp::detail::ProxyFactoryImplementation *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  int64x2_t v12;
  int64x2_t v13;
  std::__shared_weak_count *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int8x16_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  int8x16_t *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  char *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *adm_log_object;
  uint64_t v45;
  int *v46;
  int *v47;
  const void *v48;
  BOOL v49;
  unint64_t v50;
  const void *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  _OWORD *v57;
  int v58;
  int v59;
  int *v60;
  int *v61;
  int *v62;
  int *v63;
  _QWORD *v64;
  _DWORD *v65;
  _OWORD *v66;
  int v67;
  __int128 v68;
  __int128 v69;
  _DWORD *v70;
  char *v71;
  int v72;
  __int128 v73;
  __int128 v74;
  _QWORD *v75;
  uint64_t (*v76)(_QWORD, _QWORD *);
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t *i;
  uint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  char v93;
  NSObject *v94;
  void **v95;
  int8x16_t v97;
  uint64_t v98;
  uint64_t v99[2];
  void *__p[2];
  char v101;
  uint8_t v102[16];
  char v103;
  _QWORD buf[4];
  _OWORD v105[51];
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _BYTE v111[32];
  int v112;
  int v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  _BYTE v117[32];
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int64x2_t v125;
  char *v126;
  uint8_t v127[4];
  _BYTE v128[12];
  uint64_t v129;

  v3 = this;
  v129 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    if (!a2[14] || !a2[18])
    {
      *(_BYTE *)v3 = 0;
      *((_BYTE *)v3 + 16) = 1;
      return;
    }
    v4 = a2[17];
    v125 = 0uLL;
    v126 = 0;
    v6 = *(uint64_t **)(v4 + 32);
    v5 = *(uint64_t **)(v4 + 40);
    if (v6 == v5)
    {
      v40 = 0;
      v39 = 0;
      v41 = *(_QWORD *)(v4 + 32);
    }
    else
    {
      do
      {
        v7 = (std::__shared_weak_count *)v6[1];
        if (v7)
        {
          v8 = *v6;
          p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
          do
            v10 = __ldxr(p_shared_weak_owners);
          while (__stxr(v10 + 1, p_shared_weak_owners));
          v11 = std::__shared_weak_count::lock(v7);
          v14 = v11;
          if (v11 && v8)
          {
            v12.i64[0] = 0;
            v13.i64[0] = (uint64_t)v11;
            v15 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v13, v12)).i64[0], 0);
            v16.i64[0] = v8;
            v16.i64[1] = (uint64_t)v11;
            v17 = vandq_s8(v16, v15);
            v18 = v125.i64[1];
            if (v125.i64[1] >= (unint64_t)v126)
            {
              v97 = v17;
              v22 = (v125.i64[1] - v125.i64[0]) >> 4;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 60)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              v24 = (uint64_t)&v126[-v125.i64[0]];
              if ((uint64_t)&v126[-v125.i64[0]] >> 3 > v23)
                v23 = v24 >> 3;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
                v25 = 0xFFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              *(_QWORD *)&v105[0] = &v126;
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>(v25);
              v28 = (int8x16_t *)&v26[16 * v22];
              *v28 = v97;
              v14 = (std::__shared_weak_count *)v97.i64[1];
              if (v97.i64[1])
              {
                v29 = (unint64_t *)(v97.i64[1] + 8);
                do
                  v30 = __ldxr(v29);
                while (__stxr(v30 + 1, v29));
              }
              v31 = (_QWORD *)v125.i64[1];
              v32 = (_QWORD *)v125.i64[0];
              if (v125.i64[1] == v125.i64[0])
              {
                v35 = vdupq_n_s64(v125.u64[1]);
                v33 = &v26[16 * v22];
              }
              else
              {
                v33 = &v26[16 * v22];
                do
                {
                  v34 = *((_OWORD *)v31 - 1);
                  v31 -= 2;
                  *((_OWORD *)v33 - 1) = v34;
                  v33 -= 16;
                  *v31 = 0;
                  v31[1] = 0;
                }
                while (v31 != v32);
                v35 = v125;
              }
              v21 = v28 + 1;
              v125.i64[0] = (uint64_t)v33;
              v125.i64[1] = (uint64_t)v28[1].i64;
              *(int64x2_t *)&buf[1] = v35;
              v36 = v126;
              v126 = &v26[16 * v27];
              buf[3] = v36;
              buf[0] = v35.i64[0];
              std::__split_buffer<std::shared_ptr<adm::vp::detail::UplinkProxyImplementation>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              *(int8x16_t *)v125.i64[1] = v17;
              v14 = (std::__shared_weak_count *)v17.i64[1];
              if (v17.i64[1])
              {
                v19 = (unint64_t *)(v17.i64[1] + 8);
                do
                  v20 = __ldxr(v19);
                while (__stxr(v20 + 1, v19));
              }
              v21 = (int8x16_t *)(v18 + 16);
            }
            v125.i64[1] = (uint64_t)v21;
          }
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v38 = __ldaxr(p_shared_owners);
            while (__stlxr(v38 - 1, p_shared_owners));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          std::__shared_weak_count::__release_weak(v7);
        }
        v6 += 2;
      }
      while (v6 != v5);
      v39 = v125.i64[1];
      v40 = v125.i64[0];
      v6 = *(uint64_t **)(v4 + 32);
      v41 = *(_QWORD *)(v4 + 40);
    }
    v42 = v39 - v40;
    v43 = v41 - (_QWORD)v6;
    if (v39 - v40 != v43)
    {
      v78 = a2[17];
      v79 = *(_QWORD **)v78;
      v79[1] = *(_QWORD *)(v78 + 8);
      **(_QWORD **)(v78 + 8) = v79;
      --a2[18];
      std::__list_imp<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>>::__delete_node[abi:ne180100]<>((void **)v78);
      v3 = this;
      goto LABEL_100;
    }
    if (*(_BYTE *)(v4 + 56))
      break;
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "configuring voice processor uplink", (uint8_t *)buf, 2u);
    }
    memset(v105, 0, 480);
    memset(buf, 0, sizeof(buf));
    v45 = *(_QWORD *)(v4 + 16);
    v47 = *(int **)(v45 + 8);
    v46 = *(int **)(v45 + 16);
    LODWORD(buf[0]) = *(_DWORD *)v45 != 0;
    HIDWORD(buf[0]) = (unint64_t)((char *)v46 - (char *)v47) >> 6;
    bzero(&buf[1], 0x348uLL);
    v106 = *(_DWORD *)(v45 + 32);
    v107 = *(_QWORD *)(v45 + 40);
    v108 = *(_QWORD *)(v45 + 48);
    v109 = *(_QWORD *)(v45 + 56);
    v110 = *(unsigned __int8 *)(v45 + 64);
    memset(v111, 0, sizeof(v111));
    v113 = *(_DWORD *)(v45 + 96);
    v114 = *(_QWORD *)(v45 + 104);
    v115 = *(_OWORD *)(v45 + 112);
    v116 = *(_QWORD *)(v45 + 128);
    memset(v117, 0, sizeof(v117));
    v119 = *(_QWORD *)(v45 + 164);
    v120 = *(_QWORD *)(v45 + 176);
    v121 = *(unsigned __int8 *)(v45 + 184);
    v122 = *(_DWORD *)(v45 + 192);
    v123 = *(unsigned __int8 *)(v45 + 160);
    v124 = *(_DWORD *)(v45 + 188);
    v48 = *(const void **)(v45 + 72);
    v49 = *(_QWORD *)(v45 + 80) == (_QWORD)v48;
    v50 = (uint64_t)(*(_QWORD *)(v45 + 80) - (_QWORD)v48) >> 2;
    v112 = v50;
    if (!v49)
    {
      if (v50 <= 1)
        v50 = 1;
      memcpy(v111, v48, 4 * v50);
    }
    v51 = *(const void **)(v45 + 136);
    v49 = *(_QWORD *)(v45 + 144) == (_QWORD)v51;
    v52 = (uint64_t)(*(_QWORD *)(v45 + 144) - (_QWORD)v51) >> 2;
    v118 = v52;
    if (!v49)
    {
      if (v52 <= 1)
        v52 = 1;
      memcpy(v117, v51, 4 * v52);
    }
    if (v47 != v46)
    {
      v53 = 0;
      v54 = (char *)&v105[7] + 12;
      v55 = (char *)&v105[8] + 8;
      v56 = (char *)&buf[2] + 4;
      v57 = v105;
      do
      {
        if ((*v47 - 1) >= 3)
          v58 = 0;
        else
          v58 = *v47;
        if (*((_BYTE *)v47 + 60))
          v59 = v47[14];
        else
          v59 = 0;
        v61 = (int *)*((_QWORD *)v47 + 1);
        v60 = (int *)*((_QWORD *)v47 + 2);
        v63 = (int *)*((_QWORD *)v47 + 4);
        v62 = (int *)*((_QWORD *)v47 + 5);
        v64 = &buf[35 * v53];
        *((_DWORD *)v64 + 2) = v58;
        *((_DWORD *)v64 + 3) = v59;
        v65 = v56;
        v66 = v57;
        *((_DWORD *)v64 + 4) = -1431655765 * ((unint64_t)((char *)v60 - (char *)v61) >> 4);
        *(_OWORD *)((char *)v64 + 20) = 0u;
        *(_OWORD *)((char *)v64 + 36) = 0u;
        *(_OWORD *)((char *)v64 + 52) = 0u;
        *(_OWORD *)((char *)v64 + 68) = 0u;
        *(_OWORD *)((char *)v64 + 84) = 0u;
        *(_OWORD *)((char *)v64 + 100) = 0u;
        *(_OWORD *)((char *)v64 + 116) = 0u;
        *(_OWORD *)((char *)v64 + 132) = 0u;
        *((_DWORD *)v64 + 37) = 0;
        *((_DWORD *)v64 + 38) = -1431655765 * ((unint64_t)((char *)v62 - (char *)v63) >> 4);
        *(_OWORD *)((char *)v64 + 156) = 0u;
        v64 = (_QWORD *)((char *)v64 + 156);
        *((_DWORD *)v64 + 32) = 0;
        *((_OWORD *)v64 + 6) = 0u;
        *((_OWORD *)v64 + 7) = 0u;
        *((_OWORD *)v64 + 4) = 0u;
        *((_OWORD *)v64 + 5) = 0u;
        *((_OWORD *)v64 + 2) = 0u;
        *((_OWORD *)v64 + 3) = 0u;
        for (*((_OWORD *)v64 + 1) = 0u; v61 != v60; v61 += 12)
        {
          v67 = *v61;
          if ((*v61 - 1) >= 3)
            v67 = 0;
          *v65++ = v67;
          v68 = *(_OWORD *)(v61 + 2);
          v69 = *(_OWORD *)(v61 + 6);
          *((_QWORD *)v66 + 4) = *((_QWORD *)v61 + 5);
          *v66 = v68;
          v66[1] = v69;
          v66 = (_OWORD *)((char *)v66 + 40);
        }
        v70 = v54;
        v71 = v55;
        while (v63 != v62)
        {
          v72 = *v63;
          if ((*v63 - 1) >= 3)
            v72 = 0;
          *v70++ = v72;
          v73 = *(_OWORD *)(v63 + 2);
          v74 = *(_OWORD *)(v63 + 6);
          *((_QWORD *)v71 + 4) = *((_QWORD *)v63 + 5);
          *(_OWORD *)v71 = v73;
          *((_OWORD *)v71 + 1) = v74;
          v71 += 40;
          v63 += 12;
        }
        ++v53;
        v47 += 16;
        v57 = (_OWORD *)((char *)v57 + 280);
        v56 += 280;
        v55 += 280;
        v54 += 280;
      }
      while (v47 != v46);
    }
    v75 = (_QWORD *)a2[14];
    v76 = *(uint64_t (**)(_QWORD, _QWORD *))(*v75 + 32);
    if (v76)
    {
      v77 = v76(v75[1], buf);
      if (v77)
      {
        LODWORD(v76) = 0;
        *(_QWORD *)v102 = v77;
        *(_QWORD *)&v102[8] = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
      }
      else
      {
        v102[0] = 0;
        LODWORD(v76) = 1;
      }
    }
    else
    {
      *(_QWORD *)v102 = 2;
      *(_QWORD *)&v102[8] = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    }
    v103 = (char)v76;
    if ((_DWORD)v76)
    {
      v98 = v42;
      v80 = (uint64_t *)v125.i64[1];
      for (i = (uint64_t *)v125.i64[0]; ; i += 2)
      {
        if (i == v80)
        {
          v93 = 1;
          *(_BYTE *)(v4 + 56) = 1;
          v3 = this;
          *(_BYTE *)this = 1;
          v42 = v98;
          goto LABEL_99;
        }
        v82 = *i;
        v83 = (std::__shared_weak_count *)i[1];
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
        v86 = (std::__shared_weak_count *)a2[15];
        v99[0] = a2[14];
        v99[1] = (uint64_t)v86;
        if (v86)
        {
          v87 = (unint64_t *)&v86->__shared_owners_;
          do
            v88 = __ldxr(v87);
          while (__stxr(v88 + 1, v87));
        }
        adm::vp::SPIClient::configure(v82 + 8, v99);
        if (!v86)
          goto LABEL_89;
        v89 = (unint64_t *)&v86->__shared_owners_;
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
          if (!v83)
            continue;
        }
        else
        {
LABEL_89:
          if (!v83)
            continue;
        }
        v91 = (unint64_t *)&v83->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
    }
    v94 = get_adm_log_object();
    v3 = this;
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      v127[0] = 0;
      *(_QWORD *)&v128[4] = 0;
      std::to_json(v127, (const std::error_code *)v102);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v127, 4);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v127);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v128[4], v127[0]);
      v95 = __p;
      if (v101 < 0)
        v95 = (void **)__p[0];
      *(_DWORD *)v127 = 136315138;
      *(_QWORD *)v128 = v95;
      _os_log_error_impl(&dword_236C84000, v94, OS_LOG_TYPE_ERROR, "failed to configure voice processor uplink with error: %s", v127, 0xCu);
      if (v101 < 0)
        operator delete(__p[0]);
    }
    v93 = 0;
    *(_OWORD *)this = *(_OWORD *)v102;
LABEL_99:
    *((_BYTE *)v3 + 16) = v93;
LABEL_100:
    buf[0] = &v125;
    std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (v42 == v43)
      return;
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 16) = 1;
  buf[0] = &v125;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_236C9DE0C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void adm::vp::detail::ProxyFactoryImplementation::configureDownlink(adm::vp::detail::ProxyFactoryImplementation *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  char v9;
  NSObject *adm_log_object;
  char v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  void **v24;
  uint64_t v25[2];
  void *__p[2];
  char v27;
  std::error_code v28;
  char v29;
  uint8_t v30[4];
  void **v31;
  uint8_t buf[16];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 180) != 1)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "mDownlinkConfigurationType is not implemented", buf, 2u);
    }
    v11 = 0;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    goto LABEL_29;
  }
  if (!*(_QWORD *)(a2 + 168))
    goto LABEL_28;
  v4 = *(_QWORD *)(a2 + 160);
  v5 = *(uint64_t **)(v4 + 32);
  if (*(_QWORD *)(v4 + 40) - (_QWORD)v5 != 16)
  {
    v12 = get_adm_log_object();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v18 = (uint64_t)(*(_QWORD *)(v4 + 40) - *(_QWORD *)(v4 + 32)) >> 4;
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v18;
      _os_log_error_impl(&dword_236C84000, v12, OS_LOG_TYPE_ERROR, "context.mProxyImplementationSet.size() is %lu", buf, 0xCu);
    }
    v11 = 0;
    *(_QWORD *)this = 1;
    *((_QWORD *)this + 1) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    goto LABEL_29;
  }
  v6 = (std::__shared_weak_count *)v5[1];
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = *v5;
      if (*v5)
      {
        if (*(_QWORD *)(a2 + 112) && *(_QWORD *)(a2 + 144) && *(_BYTE *)(*(_QWORD *)(a2 + 136) + 56))
        {
          if (*(_BYTE *)(v4 + 56))
          {
            v9 = 1;
            goto LABEL_23;
          }
          v19 = get_adm_log_object();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_236C84000, v19, OS_LOG_TYPE_DEFAULT, "configuring voice processor downlink", buf, 2u);
          }
          v62 = 0u;
          v63 = 0u;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          *(_OWORD *)buf = 0u;
          v33 = 0u;
          adm::vp::convert(buf, *(_QWORD *)(v4 + 16));
          adm::vp::SPI::call<VoiceProcessorError ()(void *,VoiceProcessorDownlinkConfiguration const*),VoiceProcessorDownlinkConfiguration*>((uint64_t)&v28, *(_QWORD **)(a2 + 112), (uint64_t)buf);
          if (v29)
          {
            v20 = *(_QWORD *)(a2 + 120);
            v25[0] = *(_QWORD *)(a2 + 112);
            v25[1] = v20;
            if (v20)
            {
              v21 = (unint64_t *)(v20 + 8);
              do
                v22 = __ldxr(v21);
              while (__stxr(v22 + 1, v21));
            }
            adm::vp::SPIClient::configure(v8 + 8, v25);
            std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v25);
            v15 = 1;
            *(_BYTE *)(v4 + 56) = 1;
            *(_BYTE *)this = 1;
          }
          else
          {
            v23 = get_adm_log_object();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              adm::vp::to_json_str<std::error_code>(__p, &v28);
              v24 = v27 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)v30 = 136315138;
              v31 = v24;
              _os_log_error_impl(&dword_236C84000, v23, OS_LOG_TYPE_ERROR, "failed to configure voice processor downlink with error: %s", v30, 0xCu);
              if (v27 < 0)
                operator delete(__p[0]);
            }
            v15 = 0;
            *(std::error_code *)this = v28;
          }
          v9 = 0;
        }
        else
        {
          v9 = 0;
          *(_BYTE *)this = 0;
          v15 = 1;
        }
        *((_BYTE *)this + 16) = v15;
        goto LABEL_23;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v13 = *(_QWORD *)(a2 + 160);
  v14 = *(_QWORD **)v13;
  v14[1] = *(_QWORD *)(v13 + 8);
  **(_QWORD **)(v13 + 8) = v14;
  --*(_QWORD *)(a2 + 168);
  std::__list_imp<adm::vp::detail::ProxyFactoryImplementation::Context<adm::vp::UplinkConfiguration>>::__delete_node[abi:ne180100]<>((void **)v13);
  adm::vp::detail::ProxyFactoryImplementation::configureDownlink(this);
  if (!v7)
    return;
  v9 = 0;
LABEL_23:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if ((v9 & 1) != 0)
  {
LABEL_28:
    *(_BYTE *)this = 0;
    v11 = 1;
LABEL_29:
    *((_BYTE *)this + 16) = v11;
  }
}

void sub_236C9E1F0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t adm::vp::SPI::call<VoiceProcessorError ()(void *,VoiceProcessorDownlinkConfiguration const*),VoiceProcessorDownlinkConfiguration*>(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v4)(_QWORD, uint64_t);
  uint64_t v5;
  void (***v6)(adm::vp::SPIErrorCategory *__hidden);

  v3 = result;
  v4 = *(uint64_t (**)(_QWORD, uint64_t))(*a2 + 40);
  if (v4)
  {
    result = v4(a2[1], a3);
    if (!(_DWORD)result)
    {
      *(_BYTE *)v3 = 0;
      LOBYTE(v4) = 1;
      goto LABEL_7;
    }
    LOBYTE(v4) = 0;
    v5 = result;
    v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    v5 = 2;
    v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(_QWORD *)v3 = v5;
  *(_QWORD *)(v3 + 8) = v6;
LABEL_7:
  *(_BYTE *)(v3 + 16) = (_BYTE)v4;
  return result;
}

void sub_236C9E270(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  uint64_t v9;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(_QWORD *)v9 = 6;
  *(_QWORD *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x236C9E260);
}

void adm::vp::SPIClient::configure(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *adm_log_object;
  std::runtime_error *exception;
  uint8_t v13[16];

  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  v4 = *a2;
  if (!*a2)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "inSPI is nullptr", v13, 2u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "inSPI is nullptr");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v4;
  *(_QWORD *)(a1 + 176) = v5;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
}

void sub_236C9E3D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<adm::vp::detail::UplinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::UplinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1},std::allocator<adm::vp::detail::UplinkProxyImplementation>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083C648;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083C648;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x23B801508);
}

void std::__shared_ptr_pointer<adm::vp::detail::UplinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::UplinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1},std::allocator<adm::vp::detail::UplinkProxyImplementation>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  adm::vp::detail::ProxyFactoryImplementation *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1[3];
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = (adm::vp::detail::ProxyFactoryImplementation *)a1[4];
      if (v5)
        adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(v5);
    }
  }
  else
  {
    v4 = 0;
  }
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

uint64_t std::__shared_ptr_pointer<adm::vp::detail::UplinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::UplinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::UplinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::UplinkConfiguration>::Type const&)::{lambda(adm::vp::detail::UplinkProxyImplementation *)#1},std::allocator<adm::vp::detail::UplinkProxyImplementation>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN3adm2vp6detail26ProxyFactoryImplementation17doCreateProxyListINS0_19UplinkConfigurationEEEN5caulk8expectedINS2_8DispatchIT_E9ProxyListENSt3__110error_codeEEERKNS0_17ImmutableDispatchIS8_E4TypeEEUlPNS1_25UplinkProxyImplementationEE_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

adm::vp::SPI *std::unique_ptr<adm::vp::SPI>::reset[abi:ne180100](adm::vp::SPI **a1)
{
  adm::vp::SPI *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    adm::vp::SPI::~SPI(result);
    JUMPOUT(0x23B801508);
  }
  return result;
}

uint64_t std::shared_ptr<adm::vp::SPI>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<adm::vp::SPI  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

adm::vp::SPI *std::__shared_ptr_pointer<adm::vp::SPI  *>::__on_zero_shared(uint64_t a1)
{
  adm::vp::SPI *result;

  result = *(adm::vp::SPI **)(a1 + 24);
  if (result)
  {
    adm::vp::SPI::~SPI(result);
    JUMPOUT(0x23B801508);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<adm::vp::SPI  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm2vp3SPIEEE"))
    return a1 + 24;
  else
    return 0;
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x23B801508);
}

void adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration(uint64_t a1, unint64_t a2, std::__shared_weak_count *a3, int a4)
{
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  void *exception;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    *(_QWORD *)&v13 = a2;
    *((_QWORD *)&v13 + 1) = a3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v13 = a2;
  }
  v8 = *(_DWORD **)(a2 + 8);
  v9 = *(_DWORD **)(a2 + 16);
  if (v8 == v9)
  {
LABEL_11:
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, 1, &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  while (*v8 != a4)
  {
    v8 += 16;
    if (v8 == v9)
      goto LABEL_11;
  }
  *(_OWORD *)a1 = v13;
  *(_QWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 32) = 1;
  if (a3)
  {
    v11 = (unint64_t *)&a3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }
}

void sub_236C9E80C(void *a1, uint64_t a2, _BYTE *a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __cxa_begin_catch(a1);
  *a3 = 0;
  a3[32] = 0;
  __cxa_end_catch();
  JUMPOUT(0x236C9E7FCLL);
}

BOOL adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::InputType>(uint64_t a1, int a2)
{
  int *v2;
  int v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;
  BOOL v11;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v2 = *(int **)(*(_QWORD *)a1 + 8);
    v3 = *(_DWORD *)(a1 + 24);
    if (*v2 != v3)
    {
      v4 = v2 + 16;
      do
      {
        v5 = *v4;
        v4 += 16;
      }
      while (v5 != v3);
      v2 = v4 - 16;
    }
    *(_QWORD *)(a1 + 16) = v2;
  }
  v7 = *((_QWORD *)v2 + 1);
  v6 = *((_QWORD *)v2 + 2);
  if (v7 == v6)
    return 0;
  v8 = v7 + 48;
  do
  {
    v9 = *(_DWORD *)(v8 - 48);
    result = v9 == a2;
    v11 = v9 == a2 || v8 == v6;
    v8 += 48;
  }
  while (!v11);
  return result;
}

BOOL adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::has<adm::vp::UplinkNodeConfiguration::OutputType>(uint64_t a1, int a2)
{
  int *v2;
  int v3;
  int *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;
  BOOL v11;

  v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    v2 = *(int **)(*(_QWORD *)a1 + 8);
    v3 = *(_DWORD *)(a1 + 24);
    if (*v2 != v3)
    {
      v4 = v2 + 16;
      do
      {
        v5 = *v4;
        v4 += 16;
      }
      while (v5 != v3);
      v2 = v4 - 16;
    }
    *(_QWORD *)(a1 + 16) = v2;
  }
  v7 = *((_QWORD *)v2 + 4);
  v6 = *((_QWORD *)v2 + 5);
  if (v7 == v6)
    return 0;
  v8 = v7 + 48;
  do
  {
    v9 = *(_DWORD *)(v8 - 48);
    result = v9 == a2;
    v11 = v9 == a2 || v8 == v6;
    v8 += 48;
  }
  while (!v11);
  return result;
}

_DWORD *adm::vp::ImmutableNodeConfiguration<adm::vp::UplinkConfiguration>::getFormat<adm::vp::UplinkNodeConfiguration::InputType>(uint64_t a1)
{
  int *v1;
  int v2;
  int *v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;

  v1 = *(int **)(a1 + 16);
  if (!v1)
  {
    v1 = *(int **)(*(_QWORD *)a1 + 8);
    v2 = *(_DWORD *)(a1 + 24);
    if (*v1 != v2)
    {
      v3 = v1 + 16;
      do
      {
        v4 = *v3;
        v3 += 16;
      }
      while (v4 != v2);
      v1 = v3 - 16;
    }
    *(_QWORD *)(a1 + 16) = v1;
  }
  v6 = (_DWORD *)*((_QWORD *)v1 + 1);
  v5 = (_DWORD *)*((_QWORD *)v1 + 2);
  while (1)
  {
    if (v6 == v5)
      return 0;
    if (!*v6)
      break;
    v6 += 12;
  }
  return v6 + 2;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >> 62)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 4 * v8;
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_236C9EA04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::__shared_ptr_emplace<adm::vp::UplinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083D670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<adm::vp::UplinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_25083D670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

void std::__shared_ptr_emplace<adm::vp::UplinkConfiguration>::__on_zero_shared(uint64_t a1)
{
  adm::vp::UplinkConfiguration::~UplinkConfiguration((void **)(a1 + 24));
}

void std::__shared_ptr_pointer<adm::vp::detail::DownlinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::DownlinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::DownlinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::DownlinkConfiguration>::Type const&)::{lambda(adm::vp::detail::DownlinkProxyImplementation *)#1},std::allocator<adm::vp::detail::DownlinkProxyImplementation>>::~__shared_ptr_pointer(std::__shared_weak_count *this)
{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083C698;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
}

{
  std::__shared_weak_count *shared_weak_owners;

  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083C698;
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  std::__shared_weak_count::~__shared_weak_count(this);
  JUMPOUT(0x23B801508);
}

void std::__shared_ptr_pointer<adm::vp::detail::DownlinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::DownlinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::DownlinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::DownlinkConfiguration>::Type const&)::{lambda(adm::vp::detail::DownlinkProxyImplementation *)#1},std::allocator<adm::vp::detail::DownlinkProxyImplementation>>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  adm::vp::detail::ProxyFactoryImplementation *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  v2 = a1[3];
  v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = (adm::vp::detail::ProxyFactoryImplementation *)a1[4];
      if (v5)
        adm::vp::detail::ProxyFactoryImplementation::reConfigureOrDestroyVoiceProcessor(v5);
    }
  }
  else
  {
    v4 = 0;
  }
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = (std::__shared_weak_count *)a1[5];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

uint64_t std::__shared_ptr_pointer<adm::vp::detail::DownlinkProxyImplementation *,caulk::expected<adm::vp::detail::ProxyFactoryImplementation::Dispatch<adm::vp::DownlinkConfiguration>::ProxyList,std::error_code> adm::vp::detail::ProxyFactoryImplementation::doCreateProxyList<adm::vp::DownlinkConfiguration>(adm::vp::ImmutableDispatch<adm::vp::DownlinkConfiguration>::Type const&)::{lambda(adm::vp::detail::DownlinkProxyImplementation *)#1},std::allocator<adm::vp::detail::DownlinkProxyImplementation>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN3adm2vp6detail26ProxyFactoryImplementation17doCreateProxyListINS0_21DownlinkConfigurationEEEN5caulk8expectedINS2_8DispatchIT_E9ProxyListENSt3__110error_codeEEERKNS0_17ImmutableDispatchIS8_E4TypeEEUlPNS1_27DownlinkProxyImplementationEE_"))
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_236C9EC6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__shared_ptr_emplace<adm::vp::DownlinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_25083D6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<adm::vp::DownlinkConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_25083D6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

void std::__shared_ptr_emplace<adm::vp::DownlinkConfiguration>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void **v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = (void **)(a1 + 32);
  std::vector<adm::vp::DownlinkNodeConfiguration>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void adm::graph::DSPGraphKernel::registerWithProcessingBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;
  char v4;

  v2 = *(_QWORD *)(a1 + 160);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v4 = 1;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v2 + 168))(v2, &__p);
  if (v4)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t adm::graph::DSPGraphKernel::supportsClientIOHandler(adm::graph::DSPGraphKernel *this)
{
  return 1;
}

uint64_t adm::graph::DSPGraphKernel::supportsGetLatencyHandler(adm::graph::DSPGraphKernel *this)
{
  return 1;
}

uint64_t adm::graph::DSPGraphKernel::doGetLatency(adm::graph::DSPGraphKernel *this)
{
  char *exception;
  __int128 v3;
  __int128 v4;
  char v5;

  (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 20) + 160))(&v4);
  if (!v5)
  {
    exception = (char *)__cxa_allocate_exception(0x18uLL);
    v3 = v4;
    *(_QWORD *)exception = &off_25083E2C0;
    *(_OWORD *)(exception + 8) = v3;
  }
  return v4;
}

uint64_t adm::graph::DSPGraphKernel::hasParameter(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 20) + 96))(*((_QWORD *)this + 20), a2, 0);
}

uint64_t adm::graph::DSPGraphKernel::isParameterWritable(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 20) + 96))(*((_QWORD *)this + 20), a2, 0x100000000);
}

float adm::graph::DSPGraphKernel::getParameter(adm::graph::DSPGraphKernel *this)
{
  float result;
  float v2[4];
  char v3;

  (*(void (**)(float *__return_ptr))(**((_QWORD **)this + 20) + 104))(v2);
  result = v2[0];
  if (!v3)
    return 0.0;
  return result;
}

_QWORD *adm::graph::DSPGraphKernel::setParameter(adm::graph::DSPGraphKernel *this, float a2)
{
  _QWORD v3[3];

  return (*(_QWORD *(**)(_QWORD *__return_ptr, float))(**((_QWORD **)this + 20) + 112))(v3, a2);
}

uint64_t adm::graph::DSPGraphKernel::getInputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 20) + 88))(*((_QWORD *)this + 20), 0);
}

uint64_t adm::graph::DSPGraphKernel::getOutputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 88))(*((_QWORD *)this + 20), 1);
}

uint64_t adm::graph::DSPGraphKernel::hasProperty(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 20) + 128))(*((_QWORD *)this + 20), a2, 0);
}

BOOL adm::graph::DSPGraphKernel::isPropertyWritable(adm::graph::DSPGraphKernel *this)
{
  BOOL v1;
  uint64_t v3;
  char v4;
  char v5;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 20) + 136))(&v3);
  if (v5)
    v1 = v4 == 0;
  else
    v1 = 1;
  return !v1;
}

_QWORD *adm::graph::DSPGraphKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *a5 = 0;
  v9 = a4;
  v10 = a3;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 160) + 144))(&v7);
  if (v8)
    *a5 = v10;
  return result;
}

_QWORD *adm::graph::DSPGraphKernel::setProperty(uint64_t a1)
{
  _QWORD v2[3];

  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 160) + 152))(v2);
}

uint64_t adm::graph::DSPGraphKernel::getPropertyInfo(adm::graph::DSPGraphKernel *this)
{
  uint64_t v2;
  char v3;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 20) + 136))(&v2);
  if (v3)
    return v2;
  else
    return 0;
}

uint64_t adm::graph::DSPGraphKernel::getPropertySize(adm::graph::DSPGraphKernel *this)
{
  uint64_t v2;
  char v3;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 20) + 136))(&v2);
  if (v3)
    return v2;
  else
    return 0;
}

uint64_t adm::graph::DSPGraphKernel::getInputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 20) + 120))(*((_QWORD *)this + 20), 0);
}

uint64_t adm::graph::DSPGraphKernel::getOutputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 20) + 120))(*((_QWORD *)this + 20), 1);
}

uint64_t adm::graph::DSPGraphKernel::visit(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 176))(*(_QWORD *)(a1 + 160));
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::hasParameter(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 17) + 96))(*((_QWORD *)this + 17), a2, 0);
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::isParameterWritable(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 17) + 96))(*((_QWORD *)this + 17), a2, 0x100000000);
}

float `non-virtual thunk to'adm::graph::DSPGraphKernel::getParameter(adm::graph::DSPGraphKernel *this)
{
  float result;
  float v2[4];
  char v3;

  (*(void (**)(float *__return_ptr))(**((_QWORD **)this + 17) + 104))(v2);
  result = v2[0];
  if (!v3)
    return 0.0;
  return result;
}

_QWORD *`non-virtual thunk to'adm::graph::DSPGraphKernel::setParameter(adm::graph::DSPGraphKernel *this, float a2)
{
  _QWORD v3[3];

  return (*(_QWORD *(**)(_QWORD *__return_ptr, float))(**((_QWORD **)this + 17) + 112))(v3, a2);
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::getInputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 17) + 88))(*((_QWORD *)this + 17), 0);
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::getOutputParameterIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 17) + 88))(*((_QWORD *)this + 17), 1);
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::hasProperty(adm::graph::DSPGraphKernel *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 17) + 128))(*((_QWORD *)this + 17), a2, 0);
}

BOOL `non-virtual thunk to'adm::graph::DSPGraphKernel::isPropertyWritable(adm::graph::DSPGraphKernel *this)
{
  BOOL v1;
  uint64_t v3;
  char v4;
  char v5;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 17) + 136))(&v3);
  if (v5)
    v1 = v4 == 0;
  else
    v1 = 1;
  return !v1;
}

_QWORD *`non-virtual thunk to'adm::graph::DSPGraphKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  *a5 = 0;
  v9 = a4;
  v10 = a3;
  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 136) + 144))(&v7);
  if (v8)
    *a5 = v10;
  return result;
}

_QWORD *`non-virtual thunk to'adm::graph::DSPGraphKernel::setProperty(uint64_t a1)
{
  _QWORD v2[3];

  return (*(_QWORD *(**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 136) + 152))(v2);
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::getPropertyInfo(adm::graph::DSPGraphKernel *this)
{
  uint64_t v2;
  char v3;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 17) + 136))(&v2);
  if (v3)
    return v2;
  else
    return 0;
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::getPropertySize(adm::graph::DSPGraphKernel *this)
{
  uint64_t v2;
  char v3;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 17) + 136))(&v2);
  if (v3)
    return v2;
  else
    return 0;
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::getInputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 17) + 120))(*((_QWORD *)this + 17), 0);
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::getOutputPropertyIDs(adm::graph::DSPGraphKernel *this)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 17) + 120))(*((_QWORD *)this + 17), 1);
}

uint64_t `non-virtual thunk to'adm::graph::DSPGraphKernel::visit(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 176))(*(_QWORD *)(a1 + 136));
}

void adm::graph::FixedBlockSizeDSPGraphKernel::~FixedBlockSizeDSPGraphKernel(adm::graph::FixedBlockSizeDSPGraphKernel *this)
{
  adm::graph::DSPGraphKernel::~DSPGraphKernel(this);
  JUMPOUT(0x23B801508);
}

void *adm::graph::FixedBlockSizeDSPGraphKernel::operator==(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)adm::graph::operator==((std::__fs::filesystem::path *)(a1 + 224), (uint64_t)result + 224);
  return result;
}

uint64_t adm::graph::FixedBlockSizeDSPGraphKernel::doClientIO(std::chrono::system_clock::time_point *this, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double SliceDuration;
  uint64_t result;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  int v21;
  int *v22;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  uint64_t v24;
  char *v25;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v26;
  int v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  int *v31;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v32;
  uint64_t v33;
  char *v34;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35;
  std::chrono::system_clock::time_point *v36;
  const char *v37;
  uint64_t v39[3];
  _OWORD v40[4];
  int v41;
  int v42[4];
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return (uint64_t)adm::util::RTLogger::log<>(this + 16, (uint64_t)"inNumInputStreams is 0");
  if (!a5)
    return (uint64_t)adm::util::RTLogger::log<>(this + 16, (uint64_t)"inInputStreams is nullptr");
  if (!a6)
    return (uint64_t)adm::util::RTLogger::log<>(this + 16, (uint64_t)"inNumOutputStreams is 0");
  if (!a7)
    return adm::util::RTLogger::log<>(this + 16, (uint64_t)"inOutputStreams is nullptr").__d_.__rep_;
  SliceDuration = adm::graph::FixedBlockSizeDSPGraphKernel::getSliceDuration((adm::graph::FixedBlockSizeDSPGraphKernel *)this, (uint64_t)v42);
  if (v43)
  {
    return (uint64_t)adm::util::RTLogger::log<>(this + 16, (uint64_t)"Slice duration is variable for a fixed block size DSPGraph kernel");
  }
  else
  {
    v41 = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t, double))(this->__d_.__rep_ + 208))(this, a5, a4, SliceDuration);
    if (v41)
    {
      return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPreProcessing error %u", &v41).__d_.__rep_;
    }
    else
    {
      v15 = a3[1];
      v40[0] = *a3;
      v40[1] = v15;
      v16 = a3[3];
      v40[2] = a3[2];
      v40[3] = v16;
      v17 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
      v19 = (char *)&v39[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
      v20 = 0;
      v21 = v42[0];
      v22 = (int *)(a5 + 64);
      do
      {
        if (*v22 != v21)
        {
          v39[0] = v20;
          v36 = this + 16;
          v37 = "stream index = %u, inInputStreams frame count = %u , sliceBlockSize = %u";
          return adm::util::RTLogger::log<unsigned long &,unsigned int &,unsigned int const&>(v36, (uint64_t)v37, v39, v22, v42).__d_.__rep_;
        }
        rep = this[22].__d_.__rep_;
        if (v20 >= (this[23].__d_.__rep_ - rep) >> 3)
LABEL_30:
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        v24 = *(_QWORD *)(rep + 8 * v20);
        v25 = &v19[24 * v24];
        *((_QWORD *)v25 + 1) = v40;
        *((_DWORD *)v25 + 4) = v21;
        v26 = this[10].__d_.__rep_;
        if (v20 >= (this[11].__d_.__rep_ - v26) >> 3)
LABEL_31:
          std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
        *(_QWORD *)&v19[24 * v24] = *(_QWORD *)(v26 + 8 * v20++) + 48;
        v22 += 20;
      }
      while (a4 != v20);
      MEMORY[0x24BDAC7A8](v17);
      v29 = (char *)&v39[-1] - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
      v30 = 0;
      v31 = (int *)(a7 + 64);
      do
      {
        if (*v31 != v27)
        {
          v39[0] = v30;
          v36 = this + 16;
          v37 = "stream index %u, inOutputStreams frame count %u, sliceBlockSize %u";
          v22 = v31;
          return adm::util::RTLogger::log<unsigned long &,unsigned int &,unsigned int const&>(v36, (uint64_t)v37, v39, v22, v42).__d_.__rep_;
        }
        v32 = this[25].__d_.__rep_;
        if (v30 >= (this[26].__d_.__rep_ - v32) >> 3)
          goto LABEL_30;
        v33 = *(_QWORD *)(v32 + 8 * v30);
        v34 = &v29[24 * v33];
        *((_QWORD *)v34 + 1) = v40;
        *((_DWORD *)v34 + 4) = v27;
        v35 = this[13].__d_.__rep_;
        if (v30 >= (this[14].__d_.__rep_ - v35) >> 3)
          goto LABEL_31;
        *(_QWORD *)&v29[24 * v33] = *(_QWORD *)(v35 + 8 * v30++) + 48;
        v31 += 20;
      }
      while (a6 != v30);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this[20].__d_.__rep_ + 80))(v39);
      result = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t))(this->__d_.__rep_ + 216))(this, a7, a6);
      v41 = result;
      if ((_DWORD)result)
        return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPostProcessing error %u", &v41).__d_.__rep_;
    }
  }
  return result;
}

double adm::graph::FixedBlockSizeDSPGraphKernel::getSliceDuration@<D0>(adm::graph::FixedBlockSizeDSPGraphKernel *this@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double result;

  if (*((_DWORD *)this + 119))
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = (double *)*((_QWORD *)this + 28);
  *(_DWORD *)a2 = *((_DWORD *)this + 116);
  result = *v2;
  *(double *)(a2 + 8) = *v2;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

void `non-virtual thunk to'adm::graph::FixedBlockSizeDSPGraphKernel::~FixedBlockSizeDSPGraphKernel(adm::graph::FixedBlockSizeDSPGraphKernel *this)
{
  adm::graph::DSPGraphKernel::~DSPGraphKernel((adm::graph::FixedBlockSizeDSPGraphKernel *)((char *)this - 24));
}

{
  adm::graph::DSPGraphKernel::~DSPGraphKernel((adm::graph::FixedBlockSizeDSPGraphKernel *)((char *)this - 24));
  JUMPOUT(0x23B801508);
}

void adm::graph::DSPGraphKernel::~DSPGraphKernel(adm::graph::DSPGraphKernel *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = off_25083C738;
  *((_QWORD *)this + 3) = &unk_25083C8A8;
  adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration((void **)this + 28);
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  adm::graph::DSPKernel::~DSPKernel(this);
}

void adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration(void **this)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  v2 = this + 18;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  v8 = this + 24;
  std::vector<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = this + 21;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = v2;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = this + 15;
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v3 = this[12];
  if (v3)
  {
    this[13] = v3;
    operator delete(v3);
  }
  v4 = this[9];
  if (v4)
  {
    this[10] = v4;
    operator delete(v4);
  }
  v5 = this[6];
  if (v5)
  {
    this[7] = v5;
    operator delete(v5);
  }
  v6 = this[3];
  if (v6)
  {
    this[4] = v6;
    operator delete(v6);
  }
  v7 = *this;
  if (*this)
  {
    this[1] = v7;
    operator delete(v7);
  }
}

void adm::graph::DSPKernel::~DSPKernel(adm::graph::DSPKernel *this)
{
  void **v2;

  *(_QWORD *)this = off_25083EE28;
  *((_QWORD *)this + 3) = &unk_25083EF18;
  MEMORY[0x23B801004]((char *)this + 144);
  v2 = (void **)((char *)this + 104);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 80);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 56);
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 32);
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = off_25083EFB0;
  adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::~synchronized_pointer((unint64_t *)this + 1);
}

void std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 8)
      ExtendedAudioBufferList_Destroy();
    v1[1] = v2;
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  OpaqueAudioConverter **v2;
  OpaqueAudioConverter **v4;
  void *v5;

  v1 = *a1;
  v2 = (OpaqueAudioConverter **)**a1;
  if (v2)
  {
    v4 = (OpaqueAudioConverter **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::~synchronized_pointer(unint64_t *result)
{
  if (atomic_load(result))
  {
    _os_assert_log();
    result = (unint64_t *)_os_crash();
    __break(1u);
  }
  return result;
}

OpaqueAudioConverter *std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100](OpaqueAudioConverter **a1)
{
  OpaqueAudioConverter *result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<>(std::chrono::system_clock::time_point *a1, uint64_t a2)
{
  std::chrono::system_clock::time_point result;

  if (LODWORD(a1->__d_.__rep_) < 0x65
    || (result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_,
        result.__d_.__rep_ - a1[1].__d_.__rep_ >= 501000))
  {
    result.__d_.__rep_ = adm::util::RTLogger::doLog<char const*&>(a1, a2).__d_.__rep_;
  }
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<int &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3)
{
  int rep;
  std::chrono::system_clock::time_point result;
  int v8;
  uint64_t v9;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v8 = *a3;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 56, 8);
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 3;
  *(_QWORD *)(v9 + 32) = a2;
  *(_DWORD *)(v9 + 40) = rep;
  *(_DWORD *)(v9 + 44) = v8;
  *(_QWORD *)v9 = &off_25083E2E8;
  *(_QWORD *)(v9 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v9);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned long &,unsigned int &,unsigned int const&>(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t *a3, int *a4, int *a5)
{
  int rep;
  std::chrono::system_clock::time_point result;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 72, 8);
  *(_DWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 3;
  *(_QWORD *)(v15 + 32) = a2;
  *(_DWORD *)(v15 + 40) = rep;
  *(_QWORD *)(v15 + 48) = v12;
  *(_DWORD *)(v15 + 56) = v13;
  *(_DWORD *)(v15 + 60) = v14;
  *(_QWORD *)v15 = &off_25083CE88;
  *(_QWORD *)(v15 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v15);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

void std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  void **v5;
  void **v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  void **v12;
  int v13;
  caulk::concurrent::message *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v16 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v3;
        v19 = 1024;
        v20 = v4;
        _os_log_debug_impl(&dword_236C84000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v6 = __p;
        if (v16 < 0)
          v6 = (void **)__p[0];
        v7 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v6;
        v19 = 1024;
        v20 = v7;
        v8 = v2;
        v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v12 = __p;
        if (v16 < 0)
          v12 = (void **)__p[0];
        v13 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v12;
        v19 = 1024;
        v20 = v13;
        _os_log_error_impl(&dword_236C84000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
LABEL_17:
        v10 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v5;
        v19 = 1024;
        v20 = v10;
        v8 = v2;
        v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v16 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v14);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 72, 8);
  return a1;
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  size_t v8;
  int v9;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  void **v5;
  void **v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  void **v12;
  int v13;
  caulk::concurrent::message *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v16 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v3;
        v19 = 1024;
        v20 = v4;
        _os_log_debug_impl(&dword_236C84000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v6 = __p;
        if (v16 < 0)
          v6 = (void **)__p[0];
        v7 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v6;
        v19 = 1024;
        v20 = v7;
        v8 = v2;
        v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v12 = __p;
        if (v16 < 0)
          v12 = (void **)__p[0];
        v13 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v12;
        v19 = 1024;
        v20 = v13;
        _os_log_error_impl(&dword_236C84000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
LABEL_17:
        v10 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v5;
        v19 = 1024;
        v20 = v10;
        v8 = v2;
        v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v16 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v14);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int &>(adm::util::RTLogLevel,char const*,int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 56, 8);
  return a1;
}

std::chrono::system_clock::time_point adm::util::RTLogger::doLog<char const*&>(std::chrono::system_clock::time_point *a1, uint64_t a2)
{
  caulk::concurrent::messenger *v4;
  int rep;
  uint64_t v6;
  std::chrono::system_clock::time_point result;

  v4 = (caulk::concurrent::messenger *)&a1[2];
  rep = a1->__d_.__rep_;
  v6 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 24) = 3;
  *(_QWORD *)(v6 + 32) = "%s";
  *(_DWORD *)(v6 + 40) = rep;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)v6 = &off_25083DA98;
  *(_QWORD *)(v6 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v4, (caulk::concurrent::message *)v6);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
  return result;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  void **v5;
  void **v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  void **v12;
  int v13;
  caulk::concurrent::message *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(_QWORD *)(a1 + 48));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v16 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v3;
        v19 = 1024;
        v20 = v4;
        _os_log_debug_impl(&dword_236C84000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v6 = __p;
        if (v16 < 0)
          v6 = (void **)__p[0];
        v7 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v6;
        v19 = 1024;
        v20 = v7;
        v8 = v2;
        v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v12 = __p;
        if (v16 < 0)
          v12 = (void **)__p[0];
        v13 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v12;
        v19 = 1024;
        v20 = v13;
        _os_log_error_impl(&dword_236C84000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
LABEL_17:
        v10 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v5;
        v19 = 1024;
        v20 = v10;
        v8 = v2;
        v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v16 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v14);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<char const*&>(adm::util::RTLogLevel,char const*,char const*&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void adm::graph::VariableBlockSizeDSPGraphKernel::~VariableBlockSizeDSPGraphKernel(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_25083CB78;
  *((_QWORD *)this + 3) = &unk_25083CCE8;
  v2 = (void **)((char *)this + 504);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25083CB78;
  *((_QWORD *)this + 3) = &unk_25083CCE8;
  v2 = (void **)((char *)this + 504);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v2);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(this);
  JUMPOUT(0x23B801508);
}

void *adm::graph::VariableBlockSizeDSPGraphKernel::operator==(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)adm::graph::operator==((std::__fs::filesystem::path *)(a1 + 224), (uint64_t)result + 224);
  return result;
}

uint64_t adm::graph::VariableBlockSizeDSPGraphKernel::doClientIO(std::chrono::system_clock::time_point *this, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double SliceDuration;
  int rep;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v24;
  char *v25;
  unsigned int v26;
  AudioBufferList *v27;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v28;
  std::chrono::system_clock::time_point *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36;
  char *v37;
  unsigned int v38;
  AudioBufferList *v39;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v40;
  std::chrono::system_clock::time_point *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int *v59;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unsigned int *v65;
  int v66;
  int v67;
  unsigned int v68;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v69;
  int v70;
  unsigned int v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v77;
  uint64_t v78;
  char *v79;
  int v80;
  unsigned int *v81;
  int v82;
  int v83;
  unsigned int v84;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v85;
  unsigned int v87;
  std::chrono::system_clock::time_point *v88;
  const char *v89;
  int *v90;
  _QWORD v91[2];
  int *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int v100;
  int v101;
  _QWORD v102[3];
  _OWORD v103[4];
  int v104;
  unsigned int v105[6];
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return (uint64_t)adm::util::RTLogger::log<>(this + 16, (uint64_t)"inNumInputStreams is 0");
  if (!a5)
    return (uint64_t)adm::util::RTLogger::log<>(this + 16, (uint64_t)"inInputStreams is nullptr");
  if (!a6)
    return (uint64_t)adm::util::RTLogger::log<>(this + 16, (uint64_t)"inNumOutputStreams is 0");
  if (!a7)
    return adm::util::RTLogger::log<>(this + 16, (uint64_t)"inOutputStreams is nullptr").__d_.__rep_;
  SliceDuration = adm::graph::VariableBlockSizeDSPGraphKernel::getSliceDuration((adm::graph::VariableBlockSizeDSPGraphKernel *)this, (uint64_t)v105);
  if (HIDWORD(this[59].__d_.__rep_) != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  rep = this[58].__d_.__rep_;
  v15 = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t, double))(this->__d_.__rep_ + 208))(this, a5, a4, SliceDuration);
  v104 = v15;
  if ((_DWORD)v15)
    return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPreProcessing error %u", &v104).__d_.__rep_;
  v100 = rep;
  v96 = a7;
  v17 = a3[1];
  v103[0] = *a3;
  v103[1] = v17;
  v18 = a3[3];
  v103[2] = a3[2];
  v103[3] = v18;
  MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = 0;
  v22 = v105[0];
  v94 = a5;
  v23 = (unsigned int *)(a5 + 64);
  v99 = v20;
  do
  {
    v24 = this[22].__d_.__rep_;
    if (v21 >= (this[23].__d_.__rep_ - v24) >> 3)
LABEL_75:
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v26 = *v23;
    v25 = &v20[24 * *(_QWORD *)(v24 + 8 * v21)];
    *((_DWORD *)v25 + 4) = *v23;
    *((_QWORD *)v25 + 1) = v103;
    v27 = (AudioBufferList *)(*(_QWORD *)(this[60].__d_.__rep_ + 8 * v21) + 48);
    *(_QWORD *)v25 = v27;
    if (!v100 && v26 > v22)
      *((_DWORD *)v25 + 4) = v22;
    v28 = this[10].__d_.__rep_;
    if (v21 >= (this[11].__d_.__rep_ - v28) >> 3)
LABEL_76:
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v29 = adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(_QWORD *)(v28 + 8 * v21++) + 48), v27, 0);
    v23 += 20;
    v20 = v99;
  }
  while (a4 != v21);
  v97 = a4;
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)v91 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = 0;
  v33 = 64;
  v34 = v96;
  v35 = v100;
  v98 = v31;
  do
  {
    v36 = this[25].__d_.__rep_;
    if (v32 >= (this[26].__d_.__rep_ - v36) >> 3)
      goto LABEL_75;
    v37 = &v31[24 * *(_QWORD *)(v36 + 8 * v32)];
    *((_QWORD *)v37 + 1) = v103;
    v38 = *(_DWORD *)(v34 + v33);
    *((_DWORD *)v37 + 4) = v38;
    v39 = (AudioBufferList *)(*(_QWORD *)(this[63].__d_.__rep_ + 8 * v32) + 48);
    *(_QWORD *)v37 = v39;
    if (v35 == 1 && v38 > v22)
      *((_DWORD *)v37 + 4) = v22;
    v40 = this[13].__d_.__rep_;
    if (v32 >= (this[14].__d_.__rep_ - v40) >> 3)
      goto LABEL_76;
    v41 = adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(_QWORD *)(v40 + 8 * v32++) + 48), v39, 0);
    v33 += 80;
    v31 = v98;
  }
  while (a6 != v32);
  v91[1] = v91;
  v42 = MEMORY[0x24BDAC7A8](v41);
  v45 = (char *)v91 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = 0;
  v47 = (int *)(v94 + 64);
  do
  {
    v48 = *v47;
    v47 += 20;
    *(_DWORD *)&v45[4 * v46++] = v48;
  }
  while (v43 != v46);
  MEMORY[0x24BDAC7A8](v42);
  v53 = (char *)v91 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = 0;
  v55 = 64;
  do
  {
    *(_DWORD *)&v53[4 * v54++] = *(_DWORD *)(v34 + v55);
    v55 += 80;
  }
  while (a6 != v54);
  if (v35)
    v56 = v49;
  else
    v56 = v50;
  v93 = v56;
  v92 = (int *)(v51 + 64);
  v95 = a6;
  do
  {
    (*(void (**)(_QWORD *__return_ptr, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep, char *, uint64_t))(*(_QWORD *)this[20].__d_.__rep_ + 80))(v102, this[20].__d_.__rep_, v99, v97);
    LODWORD(v57) = 0;
    v58 = 0;
    v59 = v92;
    do
    {
      v60 = this[22].__d_.__rep_;
      if (v58 >= (this[23].__d_.__rep_ - v60) >> 3)
        goto LABEL_75;
      v61 = *(_QWORD *)(v60 + 8 * v58);
      v62 = v99;
      v63 = &v99[24 * v61];
      v66 = *((_DWORD *)v63 + 4);
      v65 = (unsigned int *)(v63 + 16);
      v64 = v66;
      v67 = *(_DWORD *)&v45[4 * v58];
      v68 = v67 - v66;
      *(_DWORD *)&v45[4 * v58] = v67 - v66;
      v69 = this[10].__d_.__rep_;
      if (v58 >= (this[11].__d_.__rep_ - v69) >> 3)
        goto LABEL_76;
      if (v67 == v64)
        v57 = (v57 + 1);
      else
        v57 = v57;
      v70 = *v59;
      v59 += 20;
      adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(_QWORD *)(v69 + 8 * v58) + 48), *(AudioBufferList **)&v62[24 * v61], v70 - v68);
      if (v68 > v22 && v100 == 0)
        v72 = v22;
      else
        v72 = v68;
      *v65 = v72;
      ++v58;
    }
    while (v97 != v58);
    LODWORD(v102[0]) = v57;
    v73 = v98;
    if (!v100)
    {
      if (v57 == v97)
      {
        LODWORD(v94) = 1;
        goto LABEL_52;
      }
      if ((_DWORD)v57)
      {
        v88 = this + 16;
        v89 = "consumedCount = %u";
        v90 = (int *)v102;
        return adm::util::RTLogger::log<unsigned int &>(v88, (uint64_t)v89, v90).__d_.__rep_;
      }
    }
    LODWORD(v94) = 0;
LABEL_52:
    LODWORD(v74) = 0;
    v75 = 0;
    v76 = 64;
    do
    {
      v77 = this[25].__d_.__rep_;
      if (v75 >= (this[26].__d_.__rep_ - v77) >> 3)
        goto LABEL_75;
      v78 = *(_QWORD *)(v77 + 8 * v75);
      v79 = &v73[24 * v78];
      v82 = *((_DWORD *)v79 + 4);
      v81 = (unsigned int *)(v79 + 16);
      v80 = v82;
      v83 = *(_DWORD *)&v53[4 * v75];
      v84 = v83 - v82;
      *(_DWORD *)&v53[4 * v75] = v83 - v82;
      v85 = this[13].__d_.__rep_;
      if (v75 >= (this[14].__d_.__rep_ - v85) >> 3)
        goto LABEL_76;
      if (v83 == v80)
        v74 = (v74 + 1);
      else
        v74 = v74;
      adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(this, (AudioBufferList *)(*(_QWORD *)(v85 + 8 * v75) + 48), *(AudioBufferList **)&v73[24 * v78], *(_DWORD *)(v96 + v76) - v84);
      v73 = v98;
      if (v84 > v22 && v100 == 1)
        v87 = v22;
      else
        v87 = v84;
      *v81 = v87;
      ++v75;
      v76 += 80;
    }
    while (v95 != v75);
    v101 = v74;
    if (v100 == 1)
    {
      if (v74 == v95)
        break;
      if ((_DWORD)v74)
      {
        v88 = this + 16;
        v89 = "producedCount = %u";
        v90 = &v101;
        return adm::util::RTLogger::log<unsigned int &>(v88, (uint64_t)v89, v90).__d_.__rep_;
      }
    }
  }
  while (!(_DWORD)v94);
  result = (*(uint64_t (**)(std::chrono::system_clock::time_point *, uint64_t, uint64_t, char *))(this->__d_.__rep_ + 216))(this, v96, v95, v73);
  v104 = result;
  if ((_DWORD)result)
    return adm::util::RTLogger::log<int &>(this + 16, (uint64_t)"doClientIOPostProcessing error %u", &v104).__d_.__rep_;
  return result;
}

BOOL adm::graph::VariableBlockSizeDSPGraphKernel::supportsGetRequiredInputSamplesForOutputSamplesHandler(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  if (*((_DWORD *)this + 119) != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  return *((_DWORD *)this + 116) == 1;
}

uint64_t adm::graph::VariableBlockSizeDSPGraphKernel::doGetRequiredInputSamplesForOutputSamples(adm::graph::VariableBlockSizeDSPGraphKernel *this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  char v6;

  v3 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(a2);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(**((_QWORD **)this + 20) + 56))(&v5, *((_QWORD *)this + 20), v3);
  if (v6)
    return v5;
  else
    return 0;
}

BOOL adm::graph::VariableBlockSizeDSPGraphKernel::supportsGetExpectedOutputSamplesForInputSamplesHandler(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  if (*((_DWORD *)this + 119) != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  return *((_DWORD *)this + 116) == 0;
}

uint64_t adm::graph::VariableBlockSizeDSPGraphKernel::doGetExpectedOutputSamplesForInputSamples(adm::graph::VariableBlockSizeDSPGraphKernel *this, unint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;

  v6 = caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(a2);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(**((_QWORD **)this + 20) + 64))(&v9, *((_QWORD *)this + 20), v6);
  if (v10)
    v7 = a2;
  else
    v7 = 0;
  if (v10)
    result = v9;
  else
    result = 0;
  *a3 = v7;
  return result;
}

double adm::graph::VariableBlockSizeDSPGraphKernel::getSliceDuration@<D0>(adm::graph::VariableBlockSizeDSPGraphKernel *this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  _DWORD *v3;
  double **v4;
  double *v5;
  double result;

  if (*((_DWORD *)this + 119) != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v2 = *((_DWORD *)this + 116);
  if (v2)
  {
    if (v2 != 1)
      return result;
    if (*((_BYTE *)this + 472))
      v3 = (_DWORD *)((char *)this + 468);
    else
      v3 = &adm::graph::DSPKernel::kMaxBufferFrameSize;
    v4 = (double **)((char *)this + 248);
  }
  else
  {
    v4 = (double **)((char *)this + 224);
    v3 = (_DWORD *)((char *)this + 468);
    if (!*((_BYTE *)this + 472))
      v3 = &adm::graph::DSPKernel::kMaxBufferFrameSize;
  }
  v5 = *v4;
  *(_DWORD *)a2 = *v3;
  result = *v5;
  *(double *)(a2 + 8) = *v5;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void `non-virtual thunk to'adm::graph::VariableBlockSizeDSPGraphKernel::~VariableBlockSizeDSPGraphKernel(adm::graph::VariableBlockSizeDSPGraphKernel *this)
{
  adm::graph::DSPGraphKernel *v2;
  void **v3;

  *((_QWORD *)this - 3) = &off_25083CB78;
  v2 = (adm::graph::VariableBlockSizeDSPGraphKernel *)((char *)this - 24);
  *(_QWORD *)this = &unk_25083CCE8;
  v3 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 456);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(v2);
}

{
  adm::graph::DSPGraphKernel *v2;
  void **v3;

  *((_QWORD *)this - 3) = &off_25083CB78;
  v2 = (adm::graph::VariableBlockSizeDSPGraphKernel *)((char *)this - 24);
  *(_QWORD *)this = &unk_25083CCE8;
  v3 = (void **)((char *)this + 480);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 456);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&v3);
  adm::graph::DSPGraphKernel::~DSPGraphKernel(v2);
  JUMPOUT(0x23B801508);
}

unint64_t caulk::numeric::exceptional_cast<unsigned int,unsigned long long>(unint64_t result)
{
  std::runtime_error *exception;

  if (HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception);
    __cxa_throw(exception, (struct type_info *)off_25083BA60, MEMORY[0x24BEDAB78]);
  }
  return result;
}

void sub_236CA1254(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::overflow_error::overflow_error[abi:ne180100](std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "numerical cast overflow: could not retain value in conversion type");
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
  return result;
}

std::chrono::system_clock::time_point *adm::graph::VariableBlockSizeDSPGraphKernel::setUpScratchAudioBufferList(std::chrono::system_clock::time_point *this, AudioBufferList *a2, AudioBufferList *a3, int a4)
{
  std::chrono::system_clock::time_point *v4;
  uint64_t mNumberBuffers;
  uint64_t v6;
  void **p_mData;
  void **i;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  unsigned int rep;
  uint64_t v15;
  int v16;

  v4 = this;
  if (!a2)
  {
    v13 = "inMainABL is nullptr ";
    return (std::chrono::system_clock::time_point *)adm::util::RTLogger::log<>(this + 16, (uint64_t)v13).__d_.__rep_;
  }
  if (!a3)
  {
    v13 = "inScratchABL is nullptr ";
    return (std::chrono::system_clock::time_point *)adm::util::RTLogger::log<>(this + 16, (uint64_t)v13).__d_.__rep_;
  }
  mNumberBuffers = a2->mNumberBuffers;
  if ((_DWORD)mNumberBuffers != a3->mNumberBuffers)
    return (std::chrono::system_clock::time_point *)adm::util::RTLogger::log<unsigned int const&,unsigned int &>(this + 16, (uint64_t)"inMainABL->mNumberBuffers = %u, inScratchABL->mNumberBuffers = %u", (int *)a2, (int *)a3).__d_.__rep_;
  if (!(_DWORD)mNumberBuffers)
    return this;
  v6 = 0;
  p_mData = &a2->mBuffers[0].mData;
  for (i = &a3->mBuffers[0].mData; ; i += 2)
  {
    v9 = *((_DWORD *)p_mData - 2);
    v10 = v9 * a4;
    v11 = 4 * (v9 * a4);
    *i = (char *)*p_mData + v11;
    *((_DWORD *)i - 2) = v9;
    v12 = *((unsigned int *)p_mData - 1);
    if (v11 > v12)
      break;
    p_mData += 2;
    *((_DWORD *)i - 1) = v12 - v11;
    if (mNumberBuffers == ++v6)
      return this;
  }
  rep = this[16].__d_.__rep_;
  if (rep >= 0x65)
  {
    this = (std::chrono::system_clock::time_point *)std::chrono::system_clock::now().__d_.__rep_;
    if ((uint64_t)this - v4[17].__d_.__rep_ < 501000)
      goto LABEL_18;
    rep = v4[16].__d_.__rep_;
    LODWORD(v12) = *((_DWORD *)p_mData - 1);
  }
  v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
  *(_DWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 3;
  *(_QWORD *)(v15 + 32) = "AudioBufferList buffer overwrite or overread has occurred at buffer index %u, numFloatValuesTo"
                          "AdvanceBy = %u, mDataByteSize = %u";
  *(_DWORD *)(v15 + 40) = rep;
  *(_DWORD *)(v15 + 44) = v6;
  *(_DWORD *)(v15 + 48) = v10;
  *(_DWORD *)(v15 + 52) = v12;
  *(_QWORD *)v15 = &off_25083CEE0;
  *(_QWORD *)(v15 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&v4[18], (caulk::concurrent::message *)v15);
  this = (std::chrono::system_clock::time_point *)std::chrono::system_clock::now().__d_.__rep_;
  v4[17].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)this;
LABEL_18:
  v16 = v4[16].__d_.__rep_;
  if (v16 != -1)
    LODWORD(v4[16].__d_.__rep_) = v16 + 1;
  return this;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3)
{
  int rep;
  std::chrono::system_clock::time_point result;
  int v8;
  uint64_t v9;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v8 = *a3;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 56, 8);
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 3;
  *(_QWORD *)(v9 + 32) = a2;
  *(_DWORD *)(v9 + 40) = rep;
  *(_DWORD *)(v9 + 44) = v8;
  *(_QWORD *)v9 = &off_25083DD28;
  *(_QWORD *)(v9 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v9);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  void **v5;
  void **v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  void **v12;
  int v13;
  caulk::concurrent::message *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v16 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v3;
        v19 = 1024;
        v20 = v4;
        _os_log_debug_impl(&dword_236C84000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v6 = __p;
        if (v16 < 0)
          v6 = (void **)__p[0];
        v7 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v6;
        v19 = 1024;
        v20 = v7;
        v8 = v2;
        v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v12 = __p;
        if (v16 < 0)
          v12 = (void **)__p[0];
        v13 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v12;
        v19 = 1024;
        v20 = v13;
        _os_log_error_impl(&dword_236C84000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
LABEL_17:
        v10 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v5;
        v19 = 1024;
        v20 = v10;
        v8 = v2;
        v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v16 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v14);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 56, 8);
  return a1;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int const&,unsigned int &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3, int *a4)
{
  int rep;
  std::chrono::system_clock::time_point result;
  int v10;
  int v11;
  uint64_t v12;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v10 = *a3;
  v11 = *a4;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
  *(_DWORD *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = 3;
  *(_QWORD *)(v12 + 32) = a2;
  *(_DWORD *)(v12 + 40) = rep;
  *(_DWORD *)(v12 + 44) = v10;
  *(_DWORD *)(v12 + 48) = v11;
  *(_QWORD *)v12 = &off_25083DAF0;
  *(_QWORD *)(v12 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v12);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  void **v5;
  void **v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  void **v12;
  int v13;
  caulk::concurrent::message *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v16 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v3;
        v19 = 1024;
        v20 = v4;
        _os_log_debug_impl(&dword_236C84000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v6 = __p;
        if (v16 < 0)
          v6 = (void **)__p[0];
        v7 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v6;
        v19 = 1024;
        v20 = v7;
        v8 = v2;
        v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v12 = __p;
        if (v16 < 0)
          v12 = (void **)__p[0];
        v13 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v12;
        v19 = 1024;
        v20 = v13;
        _os_log_error_impl(&dword_236C84000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
LABEL_17:
        v10 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v5;
        v19 = 1024;
        v20 = v10;
        v8 = v2;
        v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v16 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v14);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,unsigned int &,unsigned int const&>(adm::util::RTLogLevel,char const*,unsigned int &,unsigned int &,unsigned int const&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  void **v5;
  void **v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  int v10;
  void **v12;
  int v13;
  caulk::concurrent::message *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), a1);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v16 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v3;
        v19 = 1024;
        v20 = v4;
        _os_log_debug_impl(&dword_236C84000, v2, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        v6 = __p;
        if (v16 < 0)
          v6 = (void **)__p[0];
        v7 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v6;
        v19 = 1024;
        v20 = v7;
        v8 = v2;
        v9 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        v12 = __p;
        if (v16 < 0)
          v12 = (void **)__p[0];
        v13 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v12;
        v19 = 1024;
        v20 = v13;
        _os_log_error_impl(&dword_236C84000, v2, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      get_adm_log_object();
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v5 = __p;
        if (v16 < 0)
          v5 = (void **)__p[0];
LABEL_17:
        v10 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v18 = v5;
        v19 = 1024;
        v20 = v10;
        v8 = v2;
        v9 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v8, v9, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }

  if (v16 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v14);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int const&,unsigned int &>(adm::util::RTLogLevel,char const*,unsigned int const&,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

adm::graph::DSPKernel *adm::graph::DSPGraphKernel::DSPGraphKernel(adm::graph::DSPKernel *a1, uint64_t a2)
{
  char *v4;
  adm::graph::DSPKernel *v5;
  __int128 v6;
  NSObject *v8;
  std::logic_error *exception;
  uint8_t v10[16];

  v4 = (char *)a1 + 296;
  v5 = adm::graph::DSPKernel::DSPKernel(a1);
  *(_QWORD *)v5 = off_25083C738;
  *((_QWORD *)v5 + 3) = &unk_25083C8A8;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_QWORD *)v5 + 30) = 0;
  *((_OWORD *)v5 + 14) = *(_OWORD *)a2;
  *((_QWORD *)v5 + 30) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)v5 + 31) = 0;
  *((_QWORD *)v5 + 32) = 0;
  *((_QWORD *)v5 + 33) = 0;
  *(_OWORD *)((char *)v5 + 248) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v5 + 33) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_QWORD *)v5 + 34) = 0;
  *((_QWORD *)v5 + 35) = 0;
  *((_QWORD *)v5 + 36) = 0;
  *((_OWORD *)v5 + 17) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v5 + 36) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *((_QWORD *)v5 + 37) = 0;
  *((_QWORD *)v5 + 38) = 0;
  *((_QWORD *)v5 + 39) = 0;
  *(_OWORD *)v4 = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v5 + 39) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *((_QWORD *)v5 + 40) = 0;
  *((_QWORD *)v5 + 41) = 0;
  *((_QWORD *)v5 + 42) = 0;
  *((_OWORD *)v5 + 20) = *(_OWORD *)(a2 + 96);
  *((_QWORD *)v5 + 42) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v5 + 44) = 0;
  *((_QWORD *)v5 + 45) = 0;
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 120);
  *((_QWORD *)v5 + 45) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *((_QWORD *)v5 + 46) = 0;
  *((_QWORD *)v5 + 47) = 0;
  *((_QWORD *)v5 + 48) = 0;
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 144);
  *((_QWORD *)v5 + 48) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v5 + 50) = 0;
  *((_QWORD *)v5 + 51) = 0;
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 168);
  *((_QWORD *)v5 + 51) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *((_QWORD *)v5 + 52) = 0;
  *((_QWORD *)v5 + 53) = 0;
  *((_QWORD *)v5 + 54) = 0;
  *((_OWORD *)v5 + 26) = *(_OWORD *)(a2 + 192);
  *((_QWORD *)v5 + 54) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  v6 = *(_OWORD *)(a2 + 216);
  *((_QWORD *)v5 + 57) = *(_QWORD *)(a2 + 232);
  *(_OWORD *)((char *)v5 + 440) = v6;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 240);
  if ((adm::graph::isValid((uint64_t)v5 + 224) & 1) == 0)
  {
    get_adm_log_object();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_236C84000, v8, OS_LOG_TYPE_FAULT, "Invalid DSPGraphKernel configuration provided", v10, 2u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid DSPGraphKernel configuration provided");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_25083BA68, MEMORY[0x24BEDAB88]);
  }
  return a1;
}

void sub_236CA225C(_Unwind_Exception *a1)
{
  adm::graph::DSPKernel *v1;
  uint64_t v2;
  void **v3;
  void *v5;
  void *v6;

  adm::graph::DSPGraphKernelConfiguration::~DSPGraphKernelConfiguration(v3);
  v5 = (void *)*((_QWORD *)v1 + 25);
  if (v5)
  {
    *((_QWORD *)v1 + 26) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)v1 + 22);
  if (v6)
  {
    *((_QWORD *)v1 + 23) = v6;
    operator delete(v6);
  }
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v2);
  adm::graph::DSPKernel::~DSPKernel(v1);
  _Unwind_Resume(a1);
}

adm::graph::DSPKernel *adm::graph::DSPKernel::DSPKernel(adm::graph::DSPKernel *this)
{
  uint64_t v2;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_25083EE28;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_25083EF18;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 0;
  v2 = caulk::concurrent::messenger::shared_logging_priority(this);
  MEMORY[0x23B800FEC]((char *)this + 144, 0, v2);
  return this;
}

void sub_236CA2338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  unint64_t *v11;
  void **v12;
  void **v13;

  v13 = v12;
  a10 = (void **)(v10 + 104);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 80);
  std::vector<CA::AudioBuffers>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 56);
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v13;
  std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  *(_QWORD *)v10 = off_25083EFB0;
  adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::~synchronized_pointer(v11);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::DSPGraphKernel::configure(adm::graph::DSPGraphKernel *this)
{
  uint64_t v2;
  std::string *v3;
  int v4;
  int v5;
  char v6;
  __int128 *v7;
  __int128 *v8;
  std::vector<std::string>::pointer v9;
  __int128 *v10;
  __int128 *v11;
  std::vector<std::string>::pointer v12;
  __int128 *v13;
  __int128 *v14;
  _QWORD *v15;
  std::string *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  std::string *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int64x2_t v29;
  uint64_t (**v30)();
  int *v31;
  int *v32;
  uint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  int v36;
  int v37;
  unint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  size_t v52;
  uint64_t v53;
  const void *v54;
  char *v55;
  char *v56;
  __int128 v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint8_t *v79;
  uint8_t *v80;
  _QWORD *v81;
  unint64_t v82;
  uint8_t *v83;
  void ****v84;
  uint64_t v85;
  std::string::size_type v86;
  unint64_t v87;
  std::string *v88;
  int v89;
  void **v90;
  void **v91;
  int v92;
  const std::string::value_type *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  std::string::size_type v101;
  uint64_t i;
  uint64_t v103;
  adm::graph::DSPGraphKernel *v104;
  _QWORD *v105;
  std::__shared_weak_count *v106;
  unint64_t *p_shared_owners;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  std::string::size_type *v118;
  _QWORD *v119;
  std::string::size_type v120;
  char *v121;
  std::string::size_type *v122;
  uint64_t v123;
  std::string::size_type v124;
  std::string::size_type v125;
  _QWORD *j;
  char *v127;
  char *v128;
  uint64_t *v129;
  const char *v130;
  unint64_t v131;
  unint64_t v132;
  unsigned __int8 *v133;
  std::string *v134;
  size_t v135;
  char *v136;
  size_t v137;
  unint64_t v138;
  std::string *v139;
  unint64_t v140;
  uint8_t *v141;
  uint8_t *v142;
  uint64_t v143;
  uint8_t *v144;
  char *v145;
  uint8_t *v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  int v155;
  std::string::size_type v156;
  std::string::size_type v157;
  std::string *v158;
  std::string::size_type v159;
  std::string *v160;
  std::string::size_type v161;
  std::string::size_type v162;
  uint64_t v163;
  std::string::size_type v164;
  std::string *v165;
  std::string::value_type v166;
  const std::locale::facet *v167;
  int v168;
  char v169;
  const std::locale::facet *v170;
  _BOOL4 v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint8_t *v179;
  uint8_t *v180;
  BOOL v181;
  uint64_t (***v182)();
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int data;
  std::string::size_type *v189;
  std::string *v190;
  __int128 v191;
  std::string::size_type v192;
  unsigned int *v193;
  unsigned int *v194;
  char *v195;
  uint64_t v196;
  void *v197;
  char *v198;
  uint64_t v199;
  unint64_t v200;
  int64_t v201;
  unint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  unsigned int *v206;
  unsigned int *v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t k;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t m;
  void *v224;
  void *v226;
  __n128 v227;
  void *v228;
  std::string *v229;
  std::string::size_type v230;
  std::string *v231;
  __int128 v232;
  __n128 v233;
  void *v234;
  std::string *v235;
  std::string::size_type size;
  std::string *v237;
  __int128 v238;
  std::string *v239;
  std::string::size_type v240;
  std::string *v241;
  __int128 v242;
  std::string *v243;
  std::string::size_type v244;
  std::string *v245;
  __int128 v246;
  NSObject *v247;
  std::logic_error *exception;
  char *v249;
  adm::graph::DSPGraphKernel *v250;
  char v251;
  uint64_t v252;
  _QWORD *v253;
  char *__s;
  char v255;
  uint64_t *v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t v259;
  uint8_t *v260;
  _QWORD *v261;
  int v262;
  uint64_t v263;
  _QWORD *v264;
  __int128 v265;
  uint64_t **v266;
  unint64_t v267;
  void *__p[2];
  _QWORD v269[5];
  _QWORD v270[4];
  int v271;
  _QWORD v272[4];
  int v273;
  uint64_t v274;
  char v275;
  std::string v276;
  std::string v277;
  std::string v278;
  std::string v279;
  std::string v280;
  std::string v281;
  _QWORD v282[2];
  __int128 v283;
  __int128 v284;
  __int128 v285;
  std::string v286;
  std::string v287;
  std::string v288;
  uint64_t v289;
  std::string v290;
  uint8_t buf[24];
  uint64_t (**v292)();
  char *v293;
  char *v294;
  _QWORD v295[10];

  v295[7] = *MEMORY[0x24BDAC8D0];
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  v3 = (std::string *)(v2 + 72);
  *(_OWORD *)(v2 + 104) = 0u;
  *(_BYTE *)(v2 + 200) = 0;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_BYTE *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_BYTE *)(v2 + 384) = 0;
  *(_QWORD *)v2 = &off_25083E790;
  if (*((char *)this + 463) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)this + 55), *((_QWORD *)this + 56));
    v4 = *(unsigned __int8 *)(v2 + 256);
    *(_BYTE *)(v2 + 96) = 1;
    if (v4)
    {
      if (*(char *)(v2 + 255) < 0)
        operator delete(*(void **)(v2 + 232));
      *(_BYTE *)(v2 + 256) = 0;
    }
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 440);
    *(_QWORD *)(v2 + 88) = *((_QWORD *)this + 57);
    *(_BYTE *)(v2 + 96) = 1;
  }
  (*(void (**)(uint64_t *__return_ptr, adm::graph::DSPGraphKernel *))(*(_QWORD *)this + 344))(&v274, this);
  v5 = v274;
  if (v275)
  {
    if (*(_BYTE *)(v2 + 316))
      *(_BYTE *)(v2 + 316) = 0;
    if (*(_BYTE *)(v2 + 324))
      *(_BYTE *)(v2 + 324) = 0;
    *(_DWORD *)(v2 + 328) = v5;
    v6 = 1;
  }
  else
  {
    *(_DWORD *)(v2 + 312) = v274;
    *(_BYTE *)(v2 + 316) = 1;
    if (*(_BYTE *)(v2 + 324))
      *(_BYTE *)(v2 + 324) = 0;
    if (!*(_BYTE *)(v2 + 332))
      goto LABEL_18;
    v6 = 0;
  }
  *(_BYTE *)(v2 + 332) = v6;
LABEL_18:
  v8 = (__int128 *)*((_QWORD *)this + 46);
  v7 = (__int128 *)*((_QWORD *)this + 47);
  if (v8 != v7)
  {
    v9 = *(std::vector<std::string>::pointer *)(v2 + 112);
    do
    {
      if ((unint64_t)v9 >= *(_QWORD *)(v2 + 120))
      {
        v9 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((std::vector<std::string> *)(v2 + 104), v8);
      }
      else
      {
        std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(v2 + 104, v8);
        ++v9;
      }
      *(_QWORD *)(v2 + 112) = v9;
      v8 = (__int128 *)((char *)v8 + 24);
    }
    while (v8 != v7);
  }
  v11 = (__int128 *)*((_QWORD *)this + 49);
  v10 = (__int128 *)*((_QWORD *)this + 50);
  if (v11 != v10)
  {
    v12 = *(std::vector<std::string>::pointer *)(v2 + 160);
    do
    {
      if ((unint64_t)v12 >= *(_QWORD *)(v2 + 168))
      {
        v12 = std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>((std::vector<std::string> *)(v2 + 152), v11);
      }
      else
      {
        std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(v2 + 152, v11);
        ++v12;
      }
      *(_QWORD *)(v2 + 160) = v12;
      v11 = (__int128 *)((char *)v11 + 24);
    }
    while (v11 != v10);
  }
  v253 = (_QWORD *)v2;
  v14 = (__int128 *)*((_QWORD *)this + 52);
  v13 = (__int128 *)*((_QWORD *)this + 53);
  v250 = this;
  if (v14 != v13)
  {
    v15 = (_QWORD *)(v2 + 144);
    v16 = *(std::string **)(v2 + 136);
    do
    {
      if ((unint64_t)v16 >= *v15)
      {
        v18 = *(_QWORD *)(v2 + 128);
        v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v16 - v18) >> 4);
        v20 = v19 + 1;
        if (v19 + 1 > 0x555555555555555)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((*v15 - v18) >> 4) > v20)
          v20 = 0x5555555555555556 * ((*v15 - v18) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((*v15 - v18) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v21 = 0x555555555555555;
        else
          v21 = v20;
        v293 = (char *)(v2 + 144);
        if (v21)
        {
          if (v21 > 0x555555555555555)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v22 = (char *)operator new(48 * v21);
        }
        else
        {
          v22 = 0;
        }
        *(_QWORD *)buf = v22;
        *(_QWORD *)&buf[8] = &v22[48 * v19];
        *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
        v292 = (uint64_t (**)())&v22[48 * v21];
        _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4__fs10filesystem4pathEEEC2B8ne180100IJLm0ELm1EEJS8_SB_EJEJEJRKS8_RKSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(*(std::string **)&buf[8], v14, (__int128 *)((char *)v14 + 24));
        v24 = *(_QWORD *)(v2 + 128);
        v23 = *(_QWORD *)(v2 + 136);
        v26 = *(_QWORD *)&buf[8];
        v25 = *(std::string **)&buf[16];
        if (v23 == v24)
        {
          v29 = vdupq_n_s64(v23);
          v17 = (_QWORD *)v2;
        }
        else
        {
          do
          {
            v27 = *(_OWORD *)(v23 - 48);
            *(_QWORD *)(v26 - 32) = *(_QWORD *)(v23 - 32);
            *(_OWORD *)(v26 - 48) = v27;
            *(_QWORD *)(v23 - 40) = 0;
            *(_QWORD *)(v23 - 32) = 0;
            *(_QWORD *)(v23 - 48) = 0;
            v28 = *(_OWORD *)(v23 - 24);
            *(_QWORD *)(v26 - 8) = *(_QWORD *)(v23 - 8);
            *(_OWORD *)(v26 - 24) = v28;
            v26 -= 48;
            *(_QWORD *)(v23 - 16) = 0;
            *(_QWORD *)(v23 - 8) = 0;
            *(_QWORD *)(v23 - 24) = 0;
            v23 -= 48;
          }
          while (v23 != v24);
          v17 = (_QWORD *)v2;
          v29 = *(int64x2_t *)(v2 + 128);
        }
        v16 = v25 + 2;
        v17[16] = v26;
        v17[17] = v25 + 2;
        *(int64x2_t *)&buf[8] = v29;
        v30 = (uint64_t (**)())v17[18];
        v17[18] = v292;
        v292 = v30;
        *(_QWORD *)buf = v29.i64[0];
        std::__split_buffer<std::tuple<std::string,std::__fs::filesystem::path>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4__fs10filesystem4pathEEEC2B8ne180100IJLm0ELm1EEJS8_SB_EJEJEJRKS8_RKSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(v16, v14, (__int128 *)((char *)v14 + 24));
        v16 += 2;
        v17 = (_QWORD *)v2;
        *(_QWORD *)(v2 + 136) = v16;
      }
      v17[17] = v16;
      v14 += 3;
    }
    while (v14 != v13);
  }
  v31 = (int *)*((_QWORD *)v250 + 40);
  v32 = (int *)*((_QWORD *)v250 + 41);
  v33 = v2;
  if (v31 != v32)
  {
    v34 = (_QWORD *)(v2 + 336);
    v35 = *(_DWORD **)(v2 + 344);
    do
    {
      v36 = *v31;
      v37 = v31[1];
      v38 = *(_QWORD *)(v33 + 352);
      if ((unint64_t)v35 >= v38)
      {
        v40 = (_DWORD *)*v34;
        v41 = ((uint64_t)v35 - *v34) >> 3;
        v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v43 = v38 - (_QWORD)v40;
        if (v43 >> 2 > v42)
          v42 = v43 >> 2;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v42;
        if (v44)
        {
          if (v44 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v45 = (char *)operator new(8 * v44);
        }
        else
        {
          v45 = 0;
        }
        v46 = &v45[8 * v41];
        *(_DWORD *)v46 = v36;
        *((_DWORD *)v46 + 1) = v37;
        v47 = v46;
        if (v35 != v40)
        {
          do
          {
            v48 = *((_QWORD *)v35 - 1);
            v35 -= 2;
            *((_QWORD *)v47 - 1) = v48;
            v47 -= 8;
          }
          while (v35 != v40);
          v35 = (_DWORD *)*v34;
        }
        v39 = v46 + 8;
        *(_QWORD *)(v2 + 336) = v47;
        *(_QWORD *)(v2 + 344) = v46 + 8;
        *(_QWORD *)(v2 + 352) = &v45[8 * v44];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v35 = v36;
        v35[1] = v37;
        v39 = v35 + 2;
      }
      v33 = v2;
      *(_QWORD *)(v2 + 344) = v39;
      v31 += 2;
      v35 = v39;
    }
    while (v31 != v32);
  }
  v49 = (_QWORD *)*((_QWORD *)v250 + 43);
  v50 = (_QWORD *)*((_QWORD *)v250 + 44);
  if (v49 != v50)
  {
    while (1)
    {
      v51 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v49 + 16))(*v49);
      v52 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v49 + 24))(*v49);
      v53 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v49 + 32))(*v49);
      if (v52)
      {
        if ((v52 & 0x8000000000000000) != 0)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v54 = (const void *)v53;
        v55 = (char *)operator new(v52);
        v56 = &v55[v52];
        memmove(v55, v54, v52);
        *(_QWORD *)&v57 = v55;
        *((_QWORD *)&v57 + 1) = &v55[v52];
      }
      else
      {
        v56 = 0;
        v57 = 0uLL;
      }
      v58 = v253;
      v60 = (char *)v253[46];
      v59 = v253[47];
      if ((unint64_t)v60 >= v59)
        break;
      *(_DWORD *)v60 = v51;
      *(_OWORD *)(v60 + 8) = v57;
      *((_QWORD *)v60 + 3) = v56;
      v61 = v60 + 32;
      v253[46] = v60 + 32;
LABEL_98:
      v58[46] = v61;
      v49 += 2;
      if (v49 == v50)
        goto LABEL_102;
    }
    v62 = (char *)v253[45];
    v63 = (v60 - v62) >> 5;
    v64 = v63 + 1;
    if ((unint64_t)(v63 + 1) >> 59)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v65 = v59 - (_QWORD)v62;
    if (v65 >> 4 > v64)
      v64 = v65 >> 4;
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0)
      v66 = 0x7FFFFFFFFFFFFFFLL;
    else
      v66 = v64;
    if (v66)
    {
      v265 = v57;
      if (v66 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v67 = (char *)operator new(32 * v66);
      v57 = v265;
    }
    else
    {
      v67 = 0;
    }
    v68 = &v67[32 * v63];
    *(_DWORD *)v68 = v51;
    v69 = &v67[32 * v66];
    *(_OWORD *)(v68 + 8) = v57;
    *((_QWORD *)v68 + 3) = v56;
    v61 = v68 + 32;
    if (v60 == v62)
    {
      v253[45] = v68;
      v253[46] = v61;
      v253[47] = v69;
      if (!v60)
        goto LABEL_97;
    }
    else
    {
      v70 = 0;
      do
      {
        v71 = &v68[v70];
        v72 = &v60[v70];
        *((_DWORD *)v71 - 8) = *(_DWORD *)&v60[v70 - 32];
        *((_QWORD *)v71 - 2) = 0;
        *((_QWORD *)v71 - 1) = 0;
        *((_QWORD *)v71 - 3) = 0;
        *(_OWORD *)(v71 - 24) = *(_OWORD *)&v60[v70 - 24];
        *((_QWORD *)v71 - 1) = *(_QWORD *)&v60[v70 - 8];
        *((_QWORD *)v72 - 3) = 0;
        *((_QWORD *)v72 - 2) = 0;
        *((_QWORD *)v72 - 1) = 0;
        v70 -= 32;
      }
      while (&v60[v70] != v62);
      v73 = (char *)v253[45];
      v60 = (char *)v253[46];
      v253[45] = &v68[v70];
      v253[46] = v61;
      v253[47] = v69;
      if (v60 != v73)
      {
        do
        {
          v74 = (void *)*((_QWORD *)v60 - 3);
          if (v74)
          {
            *((_QWORD *)v60 - 2) = v74;
            operator delete(v74);
          }
          v60 -= 32;
        }
        while (v60 != v73);
        v60 = v73;
      }
      if (!v60)
        goto LABEL_97;
    }
    operator delete(v60);
LABEL_97:
    v58 = v253;
    goto LABEL_98;
  }
LABEL_102:
  v271 = 1065353216;
  memset(v270, 0, sizeof(v270));
  memset(v272, 0, sizeof(v272));
  v273 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v270);
  v75 = *((unsigned int *)v250 + 119);
  if ((_DWORD)v75 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  *(_QWORD *)buf = &v286;
  v76 = ((uint64_t (*)(uint8_t *, char *))off_25083CD88[v75])(buf, (char *)v250 + 464);
  v283 = 0u;
  v284 = 0u;
  LODWORD(v285) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(buf, "In");
  v249 = (char *)v250 + 224;
  v292 = (uint64_t (**)())((char *)v250 + 224);
  v293 = (char *)v250 + 272;
  v294 = (char *)v250 + 296;
  std::string::basic_string[abi:ne180100]<0>(v295, "Out");
  v77 = 0;
  v295[3] = (char *)v250 + 248;
  v295[4] = (char *)v250 + 296;
  v295[5] = (char *)v250 + 272;
  v78 = buf;
  do
  {
    v263 = v77;
    v79 = &buf[48 * v77];
    v81 = (_QWORD *)*((_QWORD *)v79 + 3);
    v80 = v79 + 24;
    if (v81[1] != *v81)
    {
      v82 = 0;
      v83 = &buf[48 * v77];
      v266 = (uint64_t **)(v83 + 32);
      v84 = (void ****)(v83 + 40);
      do
      {
        v85 = **v266;
        LODWORD(v288.__r_.__value_.__l.__data_) = 2;
        adm::graph::SemanticSet::SemanticSet(__p, (int *)&v288, 1);
        v86 = ~LODWORD(__p[0]) & *(_QWORD *)(v85 + 8 * v82);
        v287.__r_.__value_.__r.__words[0] = v86;
        if (v86)
        {
          v87 = 0;
          while (((v86 >> v87) & 1) == 0)
          {
            if (++v87 == 32)
            {
              v87 = 0;
              v88 = 0;
              goto LABEL_140;
            }
          }
          v88 = &v287;
LABEL_140:
          while (v88 || v87)
          {
            v89 = adm::graph::SemanticSetIterator::operator*(v87);
            v90 = **v84;
            v91 = (*v84)[1];
            while (v90 != v91)
            {
              __p[0] = *v90;
              if ((adm::graph::SemanticSet::contains(__p, v89) & 1) != 0)
                goto LABEL_119;
              ++v90;
            }
            adm::graph::Semantic::operator std::string(__p, v89);
            adm::dsp::GraphMacroGenerator::generateBusSemanticFormatMacros((uint64_t)v272, (uint64_t)__p, **(_QWORD **)v80 + 40 * v82, v76);
            if (SHIBYTE(v269[0]) < 0)
              operator delete(__p[0]);
LABEL_119:
            adm::graph::Semantic::operator std::string(&v288, v89);
            v92 = (char)v78[23];
            if (v92 >= 0)
              v93 = (const std::string::value_type *)v78;
            else
              v93 = *(const std::string::value_type **)v78;
            if (v92 >= 0)
              v94 = v78[23];
            else
              v94 = *((_QWORD *)v78 + 1);
            v95 = std::string::insert(&v288, 0, v93, v94);
            v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
            v269[0] = *((_QWORD *)&v95->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v96;
            v95->__r_.__value_.__l.__size_ = 0;
            v95->__r_.__value_.__r.__words[2] = 0;
            v95->__r_.__value_.__r.__words[0] = 0;
            adm::dsp::GraphMacroGenerator::generateBusSemanticFormatMacros((uint64_t)v272, (uint64_t)__p, **(_QWORD **)v80 + 40 * v82, v76);
            if (SHIBYTE(v269[0]) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v288.__r_.__value_.__l.__data_);
            v97 = v87 + 1;
            v98 = 3;
            if (v87 + 1 > 3)
              v98 = v87 + 1;
            v99 = v87 + 1;
            while (v98 != v99)
            {
              v100 = v99 + 1;
              v101 = v88->__r_.__value_.__r.__words[0] >> v99++;
              if ((v101 & 1) != 0)
              {
                v87 = v100 - 1;
                goto LABEL_140;
              }
            }
            if (v97 >= 4)
              v87 = v98;
            else
              v87 = 0;
            if (v97 < 4)
              v88 = 0;
          }
        }
        else
        {
          adm::dsp::GraphMacroGenerator::generateBusSemanticFormatMacros((uint64_t)v272, (uint64_t)v78, **(_QWORD **)v80 + 40 * v82, v76);
        }
        ++v82;
      }
      while (v82 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v80 + 8) - **(_QWORD **)v80) >> 3));
    }
    v78 = &buf[48 * v263 + 48];
    v77 = 1;
  }
  while (v263 != 1);
  for (i = 0; i != -12; i -= 6)
  {
    if (SHIBYTE(v295[i + 2]) < 0)
      operator delete((void *)v295[i]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v283);
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, _QWORD *))(*v253 + 16))(buf, v253, v272);
  if (buf[16])
  {
    v103 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v104 = v250;
    if (v103)
    {
      v105 = (_QWORD *)operator new();
      *v105 = &off_25083CE38;
      v105[1] = 0;
      v105[2] = 0;
      v105[3] = v103;
    }
    else
    {
      v105 = 0;
    }
  }
  else
  {
    v103 = 0;
    v105 = 0;
    v104 = v250;
  }
  v106 = (std::__shared_weak_count *)*((_QWORD *)v104 + 21);
  *((_QWORD *)v104 + 20) = v103;
  *((_QWORD *)v104 + 21) = v105;
  if (v106)
  {
    p_shared_owners = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldaxr(p_shared_owners);
    while (__stlxr(v108 - 1, p_shared_owners));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (buf[16])
  {
    v109 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v109)
      (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
  }
  v110 = *((_QWORD *)v104 + 20);
  if (!v110)
  {
    get_adm_log_object();
    v247 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v247, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_236C84000, v247, OS_LOG_TYPE_FAULT, "Unable to configure DSPGraphKernel", buf, 2u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unable to configure DSPGraphKernel");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_25083BA68, MEMORY[0x24BEDAB88]);
  }
  v284 = 0u;
  v285 = 0u;
  v283 = 0u;
  v111 = (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v110 + 32))(v110, 0);
  v282[0] = v111;
  v252 = v110;
  v112 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v110 + 32))(v110, 1);
  v113 = v112;
  v282[1] = v112;
  if (v111 != (uint64_t)(*((_QWORD *)v104 + 35) - *((_QWORD *)v104 + 34)) >> 3
    || v112 != (uint64_t)(*((_QWORD *)v104 + 38) - *((_QWORD *)v104 + 37)) >> 3)
  {
    v234 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v279, v111);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v290, "number of buses in dspgraph does not match number of terminals: in(", &v279);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v280, &v290, " vs. ");
    std::to_string(&v278, (uint64_t)(*((_QWORD *)v250 + 35) - *((_QWORD *)v250 + 34)) >> 3);
    if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v235 = &v278;
    else
      v235 = (std::string *)v278.__r_.__value_.__r.__words[0];
    if ((v278.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v278.__r_.__value_.__r.__words[2]);
    else
      size = v278.__r_.__value_.__l.__size_;
    v237 = std::string::append(&v280, (const std::string::value_type *)v235, size);
    v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
    v281.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v281.__r_.__value_.__l.__data_ = v238;
    v237->__r_.__value_.__l.__size_ = 0;
    v237->__r_.__value_.__r.__words[2] = 0;
    v237->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v286, &v281, "), out(");
    std::to_string(&v277, v113);
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v239 = &v277;
    else
      v239 = (std::string *)v277.__r_.__value_.__r.__words[0];
    if ((v277.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v240 = HIBYTE(v277.__r_.__value_.__r.__words[2]);
    else
      v240 = v277.__r_.__value_.__l.__size_;
    v241 = std::string::append(&v286, (const std::string::value_type *)v239, v240);
    v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
    v287.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v242;
    v241->__r_.__value_.__l.__size_ = 0;
    v241->__r_.__value_.__r.__words[2] = 0;
    v241->__r_.__value_.__r.__words[0] = 0;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v288, &v287, " vs. ");
    std::to_string(&v276, (uint64_t)(*((_QWORD *)v250 + 38) - *((_QWORD *)v250 + 37)) >> 3);
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v243 = &v276;
    else
      v243 = (std::string *)v276.__r_.__value_.__r.__words[0];
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v244 = HIBYTE(v276.__r_.__value_.__r.__words[2]);
    else
      v244 = v276.__r_.__value_.__l.__size_;
    v245 = std::string::append(&v288, (const std::string::value_type *)v243, v244);
    v246 = *(_OWORD *)&v245->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v245->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v246;
    v245->__r_.__value_.__l.__size_ = 0;
    v245->__r_.__value_.__r.__words[2] = 0;
    v245->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x23B8011CC](v234, buf);
    __cxa_throw(v234, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v114 = 0;
  v115 = 0;
  v290.__r_.__value_.__r.__words[0] = 0x100000000;
  do
  {
    v251 = v114;
    v116 = *((unsigned int *)&v290.__r_.__value_.__l.__data_ + v115);
    v117 = v282[v116];
    if (v117 == 1)
    {
      LODWORD(v288.__r_.__value_.__l.__data_) = 0;
      v289 = 0;
      *(_OWORD *)&v288.__r_.__value_.__r.__words[1] = 0uLL;
      v118 = (std::string::size_type *)&v283 + 3 * v116;
      v119 = v118 + 2;
      v120 = *v118;
      if (v118[2] == *v118)
      {
        std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__vdeallocate((uint64_t *)&v283 + 3 * v116);
        v185 = *v119 - *v118;
        v186 = v185 >> 4;
        if ((unint64_t)(v185 >> 4) <= 1)
          v186 = 1;
        if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFE0)
          v187 = 0x7FFFFFFFFFFFFFFLL;
        else
          v187 = v186;
        std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__vallocate[abi:ne180100]((_QWORD *)&v283 + 3 * v116, v187);
        v120 = *((_QWORD *)&v283 + 3 * v116 + 1);
        data = (int)v288.__r_.__value_.__l.__data_;
      }
      else
      {
        v121 = (char *)&v283 + 24 * v116;
        v123 = *((_QWORD *)v121 + 1);
        v122 = (std::string::size_type *)(v121 + 8);
        if (v123 != v120)
        {
          *(_DWORD *)v120 = 0;
          std::string::operator=((std::string *)(v120 + 8), (const std::string *)&v288.__r_.__value_.__r.__words[1]);
          v124 = v120 + 32;
          v125 = *v122;
          for (j = v253; v125 != v124; v125 -= 32)
          {
            if (*(char *)(v125 - 1) < 0)
              operator delete(*(void **)(v125 - 24));
          }
          *v122 = v124;
          goto LABEL_308;
        }
        data = 0;
      }
      v189 = (std::string::size_type *)&v283 + 3 * v116 + 1;
      v287.__r_.__value_.__r.__words[0] = v120;
      v286.__r_.__value_.__r.__words[0] = v120;
      *(_QWORD *)buf = v119;
      *(_QWORD *)&buf[8] = &v286;
      *(_QWORD *)&buf[16] = &v287;
      LOBYTE(v292) = 0;
      *(_DWORD *)v120 = data;
      v190 = (std::string *)(v120 + 8);
      if (SHIBYTE(v289) < 0)
      {
        j = v253;
        std::string::__init_copy_ctor_external(v190, (const std::string::value_type *)v288.__r_.__value_.__l.__size_, v288.__r_.__value_.__r.__words[2]);
        v120 = v287.__r_.__value_.__r.__words[0];
      }
      else
      {
        v191 = *(_OWORD *)&v288.__r_.__value_.__r.__words[1];
        *(_QWORD *)(v120 + 24) = v289;
        *(_OWORD *)&v190->__r_.__value_.__l.__data_ = v191;
        j = v253;
      }
      v192 = v120 + 32;
      v287.__r_.__value_.__r.__words[0] = v192;
      LOBYTE(v292) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
      *v189 = v192;
LABEL_308:
      v183 = v251;
      if (SHIBYTE(v289) < 0)
        operator delete((void *)v288.__r_.__value_.__l.__size_);
      goto LABEL_310;
    }
    memset(buf, 0, sizeof(buf));
    v288.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    v288.__r_.__value_.__s.__data_[8] = 0;
    if (v117)
    {
      if (v117 >> 59)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v127 = (char *)operator new(32 * v117);
      v128 = &v127[32 * v117];
      *(_QWORD *)buf = v127;
      *(_QWORD *)&buf[16] = v128;
      do
      {
        *(_DWORD *)v127 = -1;
        *((_QWORD *)v127 + 2) = 0;
        *((_QWORD *)v127 + 3) = 0;
        *((_QWORD *)v127 + 1) = 0;
        v127 += 32;
      }
      while (v127 != v128);
      *(_QWORD *)&buf[8] = v128;
    }
    v129 = (uint64_t *)&v283 + 3 * v116;
    std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__vdeallocate(v129);
    *(_OWORD *)v129 = *(_OWORD *)buf;
    v129[2] = *(_QWORD *)&buf[16];
    memset(buf, 0, sizeof(buf));
    v288.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v288);
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v295[0] = &v292;
    v130 = "out";
    if (!(_DWORD)v116)
      v130 = "in";
    __s = (char *)v130;
    v292 = &off_25083CDA8;
    *(_QWORD *)buf = &buf[8];
    if (!v117)
      goto LABEL_292;
    v257 = (_QWORD *)&v283 + 3 * v116;
    v131 = 0;
    if ((_DWORD)v116)
      v132 = 3;
    else
      v132 = 2;
    v133 = (unsigned __int8 *)&v130[v132];
    do
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, unint64_t, BOOL))(*(_QWORD *)v252 + 48))(&v288, v252, v131, (_DWORD)v116 != 0);
      if ((_BYTE)v289)
      {
        v281 = v288;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v281, (char *)&unk_236CE4E1D);
        if ((_BYTE)v289 && SHIBYTE(v288.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v288.__r_.__value_.__l.__data_);
      }
      LODWORD(v288.__r_.__value_.__l.__data_) = v131;
      if ((v281.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v134 = &v281;
      else
        v134 = (std::string *)v281.__r_.__value_.__r.__words[0];
      v289 = 0;
      *(_OWORD *)&v288.__r_.__value_.__r.__words[1] = 0uLL;
      v135 = strlen((const char *)v134);
      v136 = __s;
      if (v135)
      {
        v137 = v135 - 1;
        v138 = v132 - 1;
        v136 = __s;
        v139 = v134;
        while (v139->__r_.__value_.__s.__data_[0] == *v136)
        {
          ++v136;
          if (v137)
          {
            v139 = (std::string *)((char *)v139 + 1);
            v140 = v138--;
            --v137;
            if (v140)
              continue;
          }
          goto LABEL_198;
        }
LABEL_360:
        v226 = __cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v286, (char *)v134);
        v227 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v287, "cannot extract bus semantic: ", &v286);
        MEMORY[0x23B8011CC](v226, &v287, v227);
        __cxa_throw(v226, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
      }
LABEL_198:
      if (v136 != (char *)v133)
        goto LABEL_360;
      if (v135 < v132)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      std::string::__assign_external((std::string *)&v288.__r_.__value_.__r.__words[1], (const std::string::value_type *)v134 + v132, v135 - v132);
      v141 = &buf[8];
      v142 = &buf[8];
      if (!*(_QWORD *)&buf[8])
      {
LABEL_212:
        v145 = (char *)operator new(0x40uLL);
        *((_DWORD *)v145 + 8) = v288.__r_.__value_.__l.__data_;
        *(_OWORD *)(v145 + 40) = *(_OWORD *)&v288.__r_.__value_.__r.__words[1];
        *((_QWORD *)v145 + 7) = v289;
        *(_OWORD *)&v288.__r_.__value_.__r.__words[1] = 0uLL;
        v289 = 0;
        *(_QWORD *)v145 = 0;
        *((_QWORD *)v145 + 1) = 0;
        *((_QWORD *)v145 + 2) = v141;
        *(_QWORD *)v142 = v145;
        if (**(_QWORD **)buf)
        {
          *(_QWORD *)buf = **(_QWORD **)buf;
          v145 = *(char **)v142;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], (uint64_t *)v145);
        ++*(_QWORD *)&buf[16];
        goto LABEL_215;
      }
      v143 = v295[0];
      if (!v295[0])
LABEL_361:
        std::__throw_bad_function_call[abi:ne180100]();
      v142 = &buf[8];
      v141 = *(uint8_t **)&buf[8];
      while ((*(unsigned int (**)(uint64_t, std::string *, uint8_t *))(*(_QWORD *)v143 + 48))(v143, &v288, v141 + 32))
      {
        v144 = *(uint8_t **)v141;
        v142 = v141;
        if (!*(_QWORD *)v141)
          goto LABEL_212;
LABEL_209:
        v143 = v295[0];
        v141 = v144;
        if (!v295[0])
          goto LABEL_361;
      }
      if (!v295[0])
        goto LABEL_361;
      if ((*(unsigned int (**)(_QWORD, uint8_t *, std::string *))(*(_QWORD *)v295[0] + 48))(v295[0], v141 + 32, &v288))
      {
        v142 = v141 + 8;
        v144 = (uint8_t *)*((_QWORD *)v141 + 1);
        if (!v144)
          goto LABEL_212;
        goto LABEL_209;
      }
      if (!*(_QWORD *)v142)
        goto LABEL_212;
LABEL_215:
      if (SHIBYTE(v289) < 0)
        operator delete((void *)v288.__r_.__value_.__l.__size_);
      if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v281.__r_.__value_.__l.__data_);
      ++v131;
    }
    while (v131 < v282[v116]);
    v146 = *(uint8_t **)buf;
    v147 = (uint64_t *)((char *)v250 + 296);
    if (!(_DWORD)v116)
      v147 = (uint64_t *)((char *)v250 + 272);
    v256 = v147;
    v148 = (_QWORD *)&v283 + 3 * v116;
    if (*(uint8_t **)buf != &buf[8])
    {
      v150 = *v147;
      v149 = v147[1];
      do
      {
        v260 = v146;
        if (v149 == v150)
          goto LABEL_363;
        v151 = 0;
        v255 = 0;
        v261 = v146 + 40;
        do
        {
          if (*(_DWORD *)(*v148 + 32 * v151) == -1)
          {
            if ((char)v146[63] < 0)
            {
              if (!*((_QWORD *)v146 + 6))
              {
LABEL_285:
                *(_DWORD *)(*v148 + 32 * v151) = *((_DWORD *)v146 + 8);
                goto LABEL_286;
              }
            }
            else if (!v146[63])
            {
              goto LABEL_285;
            }
            v152 = 0;
            v258 = 32 * v151;
            v259 = v151;
            v153 = (_QWORD *)(v150 + 8 * v151);
            while (((*v153 >> v152) & 1) == 0)
            {
              if (++v152 == 32)
              {
                v153 = 0;
                v152 = 0;
                goto LABEL_235;
              }
            }
            while (1)
            {
LABEL_235:
              if (!v153 && !v152)
              {
                v148 = v257;
                v151 = v259;
                goto LABEL_281;
              }
              v262 = adm::graph::SemanticSetIterator::operator*(v152);
              adm::graph::Semantic::operator std::string(&v287, v262);
              MEMORY[0x23B80143C](&v279);
              std::locale::locale((std::locale *)&v280, (const std::locale *)&v279);
              v154 = v146[63];
              v155 = (char)v154;
              if ((v154 & 0x80u) != 0)
                v154 = *((_QWORD *)v146 + 6);
              if (v154)
              {
                v264 = v153;
                v267 = v152;
                v156 = v155 >= 0 ? (std::string::size_type)v261 : *v261;
                v157 = v156 + v154;
                v158 = (v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v287
                     : (std::string *)v287.__r_.__value_.__r.__words[0];
                v159 = (v287.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? HIBYTE(v287.__r_.__value_.__r.__words[2])
                     : v287.__r_.__value_.__l.__size_;
                std::locale::locale((std::locale *)&v281, (const std::locale *)&v280);
                std::locale::locale((std::locale *)&v286, (const std::locale *)&v281);
                v288.__r_.__value_.__r.__words[0] = v156;
                v288.__r_.__value_.__l.__size_ = v157;
                std::locale::locale((std::locale *)&v288.__r_.__value_.__r.__words[2], (const std::locale *)&v286);
                std::locale::~locale((std::locale *)&v286);
                if (v159)
                {
                  v160 = (std::string *)((char *)v158 + v159);
                  v161 = v288.__r_.__value_.__l.__size_;
                  while (1)
                  {
                    v162 = v288.__r_.__value_.__r.__words[0];
                    if (v288.__r_.__value_.__r.__words[0] == v161)
                    {
LABEL_260:
                      v158 = v160;
                      goto LABEL_264;
                    }
                    v163 = 0;
                    v164 = v288.__r_.__value_.__r.__words[0];
                    v165 = v158;
                    while (v162 + v163 != v288.__r_.__value_.__l.__size_)
                    {
                      v166 = v158->__r_.__value_.__s.__data_[v163];
                      v167 = std::locale::use_facet((const std::locale *)&v288.__r_.__value_.__r.__words[2], MEMORY[0x24BEDB350]);
                      v168 = ((uint64_t (*)(const std::locale::facet *, _QWORD))v167->__vftable[1].~facet)(v167, v166);
                      v169 = *(_BYTE *)(v162 + v163);
                      v170 = std::locale::use_facet((const std::locale *)&v288.__r_.__value_.__r.__words[2], MEMORY[0x24BEDB350]);
                      if (v168 != ((unsigned int (*)(const std::locale::facet *, _QWORD))v170->__vftable[1].~facet)(v170, v169))goto LABEL_258;
                      v165 = (std::string *)((char *)v165 + 1);
                      ++v164;
                      if (v159 == ++v163)
                      {
                        v164 = v162 + v163;
                        v165 = v160;
                        goto LABEL_258;
                      }
                    }
                    v165 = (std::string *)((char *)v158 + v163);
                    v164 = v162 + v163;
LABEL_258:
                    v161 = v288.__r_.__value_.__l.__size_;
                    if (v164 == v288.__r_.__value_.__l.__size_)
                      break;
                    v158 = (std::string *)((char *)v158 + 1);
                    --v159;
                    if (v158 == v160)
                      goto LABEL_260;
                  }
                  v160 = v165;
                }
                else
                {
                  v160 = v158;
                }
LABEL_264:
                v171 = v158 != v160;
                std::locale::~locale((std::locale *)&v288.__r_.__value_.__r.__words[2]);
                std::locale::~locale((std::locale *)&v281);
                v146 = v260;
                v153 = v264;
                v152 = v267;
              }
              else
              {
                v171 = 1;
              }
              std::locale::~locale((std::locale *)&v280);
              std::locale::~locale((std::locale *)&v279);
              if (SHIBYTE(v287.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v287.__r_.__value_.__l.__data_);
              if (v171)
                break;
              v172 = 3;
              if (v152 + 1 > 3)
                v172 = v152 + 1;
              v173 = v152 + 1;
              while (v172 != v173)
              {
                v174 = v173 + 1;
                v175 = *v153 >> v173++;
                if ((v175 & 1) != 0)
                {
                  v152 = v174 - 1;
                  goto LABEL_235;
                }
              }
              if (v152 + 1 >= 4)
              {
                v152 = v172;
              }
              else
              {
                v153 = 0;
                v152 = 0;
              }
            }
            v148 = v257;
            *(_DWORD *)(*v257 + v258) = *((_DWORD *)v146 + 8);
            adm::graph::Semantic::operator std::string(&v288, v262);
            v151 = v259;
            v176 = *v257 + 32 * v259;
            v177 = v176 + 8;
            if (*(char *)(v176 + 31) < 0)
              operator delete(*(void **)v177);
            v178 = *(_OWORD *)&v288.__r_.__value_.__l.__data_;
            *(_QWORD *)(v177 + 16) = *((_QWORD *)&v288.__r_.__value_.__l + 2);
            *(_OWORD *)v177 = v178;
            v255 = 1;
LABEL_281:
            v150 = *v256;
            v149 = v256[1];
          }
          ++v151;
        }
        while (v151 < (v149 - v150) >> 3);
        if ((v255 & 1) == 0)
        {
LABEL_363:
          v228 = __cxa_allocate_exception(0x10uLL);
          std::string::basic_string[abi:ne180100]<0>(&v281, __s);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v286, "unable to map bus: ", &v281);
          if ((char)v260[63] < 0)
            std::string::__init_copy_ctor_external(&v280, *((const std::string::value_type **)v260 + 5), *((_QWORD *)v260 + 6));
          else
            v280 = *(std::string *)(v260 + 40);
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v229 = &v280;
          else
            v229 = (std::string *)v280.__r_.__value_.__r.__words[0];
          if ((v280.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v230 = HIBYTE(v280.__r_.__value_.__r.__words[2]);
          else
            v230 = v280.__r_.__value_.__l.__size_;
          v231 = std::string::append(&v286, (const std::string::value_type *)v229, v230);
          v232 = *(_OWORD *)&v231->__r_.__value_.__l.__data_;
          v287.__r_.__value_.__r.__words[2] = v231->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v287.__r_.__value_.__l.__data_ = v232;
          v231->__r_.__value_.__l.__size_ = 0;
          v231->__r_.__value_.__r.__words[2] = 0;
          v231->__r_.__value_.__r.__words[0] = 0;
          v233 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v288, &v287, " to terminals");
          MEMORY[0x23B8011CC](v228, &v288, v233);
          __cxa_throw(v228, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
        }
LABEL_286:
        v179 = (uint8_t *)*((_QWORD *)v146 + 1);
        if (v179)
        {
          do
          {
            v180 = v179;
            v179 = *(uint8_t **)v179;
          }
          while (v179);
        }
        else
        {
          do
          {
            v180 = (uint8_t *)*((_QWORD *)v146 + 2);
            v181 = *(_QWORD *)v180 == (_QWORD)v146;
            v146 = v180;
          }
          while (!v181);
        }
        v146 = v180;
      }
      while (v180 != &buf[8]);
    }
LABEL_292:
    std::__tree<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::destroy(*(char **)&buf[8]);
    v182 = (uint64_t (***)())v295[0];
    if ((uint64_t (***)())v295[0] == &v292)
    {
      v182 = &v292;
      v184 = 4;
      j = v253;
      v183 = v251;
LABEL_302:
      (*v182)[v184]();
    }
    else
    {
      j = v253;
      v183 = v251;
      if (v295[0])
      {
        v184 = 5;
        goto LABEL_302;
      }
    }
LABEL_310:
    v114 = 1;
    v115 = 1;
  }
  while ((v183 & 1) == 0);
  *(_OWORD *)__p = 0u;
  memset(v269, 0, 32);
  v194 = (unsigned int *)*((_QWORD *)&v283 + 1);
  v193 = (unsigned int *)v283;
  if ((_QWORD)v283 != *((_QWORD *)&v283 + 1))
  {
    v195 = 0;
    do
    {
      v196 = *v193;
      if ((unint64_t)v195 >= v269[0])
      {
        v198 = (char *)__p[0];
        v199 = (v195 - (char *)__p[0]) >> 3;
        v200 = v199 + 1;
        if ((unint64_t)(v199 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v201 = v269[0] - (unint64_t)__p[0];
        if ((uint64_t)(v269[0] - (unint64_t)__p[0]) >> 2 > v200)
          v200 = v201 >> 2;
        if ((unint64_t)v201 >= 0x7FFFFFFFFFFFFFF8)
          v202 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v202 = v200;
        if (v202)
        {
          v202 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v202);
          v198 = (char *)__p[0];
          v195 = (char *)__p[1];
        }
        else
        {
          v203 = 0;
        }
        v204 = (_QWORD *)(v202 + 8 * v199);
        *v204 = v196;
        v197 = v204 + 1;
        while (v195 != v198)
        {
          v205 = *((_QWORD *)v195 - 1);
          v195 -= 8;
          *--v204 = v205;
        }
        __p[0] = v204;
        __p[1] = v197;
        v269[0] = v202 + 8 * v203;
        if (v198)
          operator delete(v198);
      }
      else
      {
        *(_QWORD *)v195 = v196;
        v197 = v195 + 8;
      }
      __p[1] = v197;
      v193 += 8;
      v195 = (char *)v197;
    }
    while (v193 != v194);
  }
  v206 = (unsigned int *)*((_QWORD *)&v284 + 1);
  v207 = (unsigned int *)v285;
  if (*((_QWORD *)&v284 + 1) != (_QWORD)v285)
  {
    v208 = (_QWORD *)v269[2];
    do
    {
      v209 = *v206;
      if ((unint64_t)v208 >= v269[3])
      {
        v211 = (_QWORD *)v269[1];
        v212 = ((uint64_t)v208 - v269[1]) >> 3;
        v213 = v212 + 1;
        if ((unint64_t)(v212 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v214 = v269[3] - v269[1];
        if ((uint64_t)(v269[3] - v269[1]) >> 2 > v213)
          v213 = v214 >> 2;
        if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8)
          v215 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v215 = v213;
        if (v215)
        {
          v215 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v215);
          v211 = (_QWORD *)v269[1];
          v208 = (_QWORD *)v269[2];
        }
        else
        {
          v216 = 0;
        }
        v217 = (_QWORD *)(v215 + 8 * v212);
        *v217 = v209;
        v210 = v217 + 1;
        while (v208 != v211)
        {
          v218 = *--v208;
          *--v217 = v218;
        }
        v269[1] = v217;
        v269[2] = v210;
        v269[3] = v215 + 8 * v216;
        if (v211)
          operator delete(v211);
      }
      else
      {
        *v208 = v209;
        v210 = v208 + 1;
      }
      v269[2] = v210;
      v206 += 8;
      v208 = v210;
    }
    while (v206 != v207);
  }
  for (k = 24; k != -24; k -= 24)
  {
    *(_QWORD *)buf = (char *)&v283 + k;
    std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  v220 = (void *)*((_QWORD *)v250 + 22);
  if (v220)
  {
    *((_QWORD *)v250 + 23) = v220;
    operator delete(v220);
    *((_QWORD *)v250 + 22) = 0;
    *((_QWORD *)v250 + 23) = 0;
    *((_QWORD *)v250 + 24) = 0;
  }
  v221 = (void *)*((_QWORD *)v250 + 25);
  *((_OWORD *)v250 + 11) = *(_OWORD *)__p;
  *((_QWORD *)v250 + 24) = v269[0];
  __p[1] = 0;
  v269[0] = 0;
  __p[0] = 0;
  if (v221)
  {
    *((_QWORD *)v250 + 26) = v221;
    operator delete(v221);
    *((_QWORD *)v250 + 25) = 0;
    *((_QWORD *)v250 + 26) = 0;
    *((_QWORD *)v250 + 27) = 0;
  }
  *(_OWORD *)((char *)v250 + 200) = *(_OWORD *)&v269[1];
  *((_QWORD *)v250 + 27) = v269[3];
  memset(&v269[1], 0, 24);
  v222 = v274;
  (*(void (**)(adm::graph::DSPGraphKernel *, char *, _QWORD))(*(_QWORD *)v250 + 192))(v250, v249, v274);
  (*(void (**)(adm::graph::DSPGraphKernel *, char *, uint64_t))(*(_QWORD *)v250 + 200))(v250, v249, v222);
  for (m = 0; m != -6; m -= 3)
  {
    v224 = (void *)v269[m + 1];
    if (v224)
    {
      v269[m + 2] = v224;
      operator delete(v224);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v272);
  return (*(uint64_t (**)(_QWORD *))(*j + 8))(j);
}

void sub_236CA3E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  std::locale a69;
  char a72;
  std::locale a73;
  char a74;
  std::locale a75;
  char a76;
  int v76;
  void *v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t i;

  if (*(char *)(v78 - 201) < 0)
    operator delete(*(void **)(v78 - 224));
  if (a56 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x27F]) < 0)
    operator delete((void *)STACK[0x268]);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (a62 < 0)
    operator delete(a57);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (a76 < 0)
    operator delete(a75.__locale_);
  if (a68 < 0)
    operator delete(a63);
  if (a74 < 0)
    operator delete(a73.__locale_);
  if (*(char *)(v78 - 225) < 0)
    operator delete(*(void **)(v78 - 248));
  if (a72 < 0)
  {
    operator delete(a69.__locale_);
    v80 = a16;
    if ((v76 & 1) == 0)
      goto LABEL_26;
  }
  else
  {
    v80 = a16;
    if (!v76)
    {
LABEL_26:
      for (i = 24; i != -24; i -= 24)
      {
        *(_QWORD *)(v78 - 224) = (char *)&STACK[0x200] + i;
        std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v78 - 224));
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a43);
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v77);
  goto LABEL_26;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 32;
    }
  }
  return a1;
}

void std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 59)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(32 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * a2];
  return result;
}

void std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void std::__tree<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::destroy(*(_QWORD *)a1);
    std::__tree<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::function<BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

void std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::~__func()
{
  JUMPOUT(0x23B801508);
}

_QWORD *std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_25083CDA8;
  return result;
}

void std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25083CDA8;
}

BOOL std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 8), (_QWORD *)(a3 + 8)) << 24) > 0;
}

uint64_t std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN3adm5graph6detailL20createTerminalBusMapERKNS0_19KernelConfigurationERKNS_3dsp5GraphEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::$_0>,BOOL ()(adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&,adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic const&)>::target_type()
{
}

void std::vector<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic,std::allocator<adm::graph::detail::createTerminalBusMap(adm::graph::KernelConfiguration const&,adm::dsp::Graph const&)::DSPGraphBusSemantic>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__shared_ptr_pointer<adm::dsp::Graph  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

uint64_t std::__shared_ptr_pointer<adm::dsp::Graph  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<adm::dsp::Graph  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm3dsp5GraphEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::detail::getFormatMacroSubstitutions(adm::dsp::GraphMacroGenerator &,adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>(uint64_t a1, unsigned int *a2)
{
  return *a2 | 0x100000000;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<adm::graph::detail::getFormatMacroSubstitutions(adm::dsp::GraphMacroGenerator &,adm::graph::DSPGraphKernelConfiguration const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,adm::graph::DSPGraphKernelConfiguration::FixedBlockSize,adm::graph::DSPGraphKernelConfiguration::VariableBlockSize> const&>()
{
  return 0;
}

uint64_t std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,int>(_QWORD *a1, AudioStreamBasicDescription *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  CA::AudioBuffers *v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = (uint64_t)(v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = (CA::AudioBuffers *)(v12 + 8 * v9);
    v17 = v12 + 8 * v13;
    CA::AudioBuffers::AudioBuffers(v15, a2);
    v16 = (char *)v15 + 8;
    std::vector<CA::AudioBuffers>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    result = std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    result = (uint64_t)CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)a1[1], a2);
    v8 = v6 + 8;
    a1[1] = v6 + 8;
  }
  a1[1] = v8;
  return result;
}

void sub_236CA4830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CA::AudioBuffers *CA::AudioBuffers::AudioBuffers(CA::AudioBuffers *this, const AudioStreamBasicDescription *a2)
{
  CA::AudioBuffers *v3;
  std::logic_error *exception;

  v3 = (CA::AudioBuffers *)ExtendedAudioBufferList_CreateWithFormat();
  *(_QWORD *)this = v3;
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_CreateWithFormat failed");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  CA::AudioBuffers::Prepare(v3);
  return this;
}

void sub_236CA48F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CA::AudioBuffers>::__swap_out_circular_buffer(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (_QWORD *)*result;
  v2 = (_QWORD *)result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *--v2;
    *v2 = 0;
    *(_QWORD *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  v6 = (_QWORD *)*result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<CA::AudioBuffers>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3 == v2)
      break;
    *(_QWORD *)(a1 + 16) = v3 - 8;
    ExtendedAudioBufferList_Destroy();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t CA::AudioBuffers::Prepare(CA::AudioBuffers *this)
{
  uint64_t result;
  std::logic_error *exception;

  result = ExtendedAudioBufferList_Prepare();
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "ExtendedAudioBufferList_Prepare failed");
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  return result;
}

void sub_236CA4A04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void adm::graph::ExclaveKernel::~ExclaveKernel(adm::graph::ExclaveKernel *this)
{
  adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration((adm::graph::ExclaveKernel *)((char *)this + 160));
  adm::graph::DSPKernel::~DSPKernel(this);
}

{
  adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration((adm::graph::ExclaveKernel *)((char *)this + 160));
  adm::graph::DSPKernel::~DSPKernel(this);
  JUMPOUT(0x23B801508);
}

BOOL adm::graph::ExclaveKernel::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(void (***)(adm::graph::ExclaveKernel *__hidden))a2 != &off_25083CF38)
    return 0;
  result = adm::graph::KernelConfiguration::operator==((uint64_t *)(a1 + 160), (uint64_t *)(a2 + 160));
  if (result)
  {
    if (*(_DWORD *)(a1 + 304) == *(_DWORD *)(a2 + 304)
      && *(_DWORD *)(a1 + 308) == *(_DWORD *)(a2 + 308)
      && *(_DWORD *)(a1 + 312) == *(_DWORD *)(a2 + 312)
      && *(_DWORD *)(a1 + 316) == *(_DWORD *)(a2 + 316))
    {
      return *(_QWORD *)(a1 + 320) == *(_QWORD *)(a2 + 320);
    }
    return 0;
  }
  return result;
}

uint64_t adm::graph::ExclaveKernel::supportsBeginProcessingHandler(adm::graph::ExclaveKernel *this)
{
  return 1;
}

uint64_t adm::graph::ExclaveKernel::doBeginProcessing(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 24))(*((_QWORD *)this + 40));
}

uint64_t adm::graph::ExclaveKernel::supportsClientIOHandler(adm::graph::ExclaveKernel *this)
{
  return 1;
}

uint64_t adm::graph::ExclaveKernel::doClientIO(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 320) + 32))(*(_QWORD *)(a1 + 320), a5 + 80 * *(_QWORD *)(a1 + 328));
}

uint64_t adm::graph::ExclaveKernel::supportsEndProcessingHandler(adm::graph::ExclaveKernel *this)
{
  return 1;
}

uint64_t adm::graph::ExclaveKernel::doEndProcessing(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 40))(*((_QWORD *)this + 40));
}

uint64_t adm::graph::ExclaveKernel::hasParameter(adm::graph::ExclaveKernel *this, uint64_t a2)
{
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 48))(*((_QWORD *)this + 40)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 40) + 56))(*((_QWORD *)this + 40), a2);
}

uint64_t adm::graph::ExclaveKernel::isParameterWritable(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 48))(*((_QWORD *)this + 40));
}

float adm::graph::ExclaveKernel::getParameter(adm::graph::ExclaveKernel *this)
{
  float result;
  float v2[4];
  char v3;

  (*(void (**)(float *__return_ptr))(**((_QWORD **)this + 40) + 80))(v2);
  result = v2[0];
  if (!v3)
    return 0.0;
  return result;
}

uint64_t adm::graph::ExclaveKernel::setParameter(adm::graph::ExclaveKernel *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 40) + 88))(*((_QWORD *)this + 40), a2);
}

uint64_t adm::graph::ExclaveKernel::getInputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 64))(*((_QWORD *)this + 40));
}

uint64_t adm::graph::ExclaveKernel::getOutputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 40) + 72))(*((_QWORD *)this + 40));
}

uint64_t adm::graph::ExclaveKernel::hasProperty(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t adm::graph::ExclaveKernel::isPropertyWritable(adm::graph::ExclaveKernel *this)
{
  return 0;
}

void adm::graph::ExclaveKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  *a5 = 0;
}

uint64_t adm::graph::ExclaveKernel::getPropertyInfo(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t adm::graph::ExclaveKernel::getPropertySize(adm::graph::ExclaveKernel *this)
{
  return 0;
}

void adm::graph::ExclaveKernel::getInputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void adm::graph::ExclaveKernel::getOutputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t adm::graph::ExclaveKernel::visit()
{
  return 0;
}

void `non-virtual thunk to'adm::graph::ExclaveKernel::~ExclaveKernel(adm::graph::ExclaveKernel *this)
{
  adm::graph::DSPKernel *v1;

  v1 = (adm::graph::ExclaveKernel *)((char *)this - 24);
  adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration((adm::graph::ExclaveKernel *)((char *)this + 136));
  adm::graph::DSPKernel::~DSPKernel(v1);
}

{
  adm::graph::ExclaveKernel::~ExclaveKernel((adm::graph::ExclaveKernel *)((char *)this - 24));
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::hasParameter(adm::graph::ExclaveKernel *this, uint64_t a2)
{
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 48))(*((_QWORD *)this + 37)) & 1) != 0)
    return 1;
  else
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 37) + 56))(*((_QWORD *)this + 37), a2);
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::isParameterWritable(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 48))(*((_QWORD *)this + 37));
}

float `non-virtual thunk to'adm::graph::ExclaveKernel::getParameter(adm::graph::ExclaveKernel *this)
{
  float result;
  float v2[4];
  char v3;

  (*(void (**)(float *__return_ptr))(**((_QWORD **)this + 37) + 80))(v2);
  result = v2[0];
  if (!v3)
    return 0.0;
  return result;
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::setParameter(adm::graph::ExclaveKernel *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 37) + 88))(*((_QWORD *)this + 37), a2);
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::getInputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 64))(*((_QWORD *)this + 37));
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::getOutputParameterIDs(adm::graph::ExclaveKernel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 37) + 72))(*((_QWORD *)this + 37));
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::hasProperty(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::isPropertyWritable(adm::graph::ExclaveKernel *this)
{
  return 0;
}

void `non-virtual thunk to'adm::graph::ExclaveKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  *a5 = 0;
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::getPropertyInfo(adm::graph::ExclaveKernel *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::getPropertySize(adm::graph::ExclaveKernel *this)
{
  return 0;
}

void `non-virtual thunk to'adm::graph::ExclaveKernel::getInputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void `non-virtual thunk to'adm::graph::ExclaveKernel::getOutputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t `non-virtual thunk to'adm::graph::ExclaveKernel::visit()
{
  return 0;
}

void adm::graph::ExclaveKernelConfiguration::~ExclaveKernelConfiguration(adm::graph::ExclaveKernelConfiguration *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v8 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
  }
  v7 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v7;
    operator delete(v7);
  }
}

void std::vector<std::__fs::filesystem::path>::__construct_one_at_end[abi:ne180100]<std::__fs::filesystem::path const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_236CA4ED4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::__fs::filesystem::path>::__push_back_slow_path<std::__fs::filesystem::path const&>(std::vector<std::string> *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *p_end_cap;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::__split_buffer<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer v12;
  std::__split_buffer<std::string> __v;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7)
  {
    v9 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  end = v9 + v2;
  __v.__first_ = v9;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v9[v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v11 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
  }
  __v.__end_ = end + 1;
  std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(a1, &__v);
  v12 = a1->__end_;
  std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
  return v12;
}

void sub_236CA4FE8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::vector<std::string>::pointer begin;
  std::string *end;
  std::__split_buffer<std::string>::pointer v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string *v8;
  std::string *value;

  begin = this->__begin_;
  end = this->__end_;
  v4 = __v->__begin_;
  if (end == this->__begin_)
  {
    v5 = __v->__begin_;
  }
  else
  {
    do
    {
      v5 = v4 - 1;
      v6 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
      v4[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v4[-1].__r_.__value_.__l.__data_ = v6;
      end[-1].__r_.__value_.__l.__size_ = 0;
      end[-1].__r_.__value_.__r.__words[2] = 0;
      end[-1].__r_.__value_.__r.__words[0] = 0;
      --v4;
      --end;
    }
    while (end != begin);
  }
  __v->__begin_ = v5;
  v7 = this->__begin_;
  this->__begin_ = v5;
  __v->__begin_ = v7;
  v8 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v8;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4__fs10filesystem4pathEEEC2B8ne180100IJLm0ELm1EEJS8_SB_EJEJEJRKS8_RKSB_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSJ_IJDpT2_EEEDpOT3_(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_236CA5158(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::tuple<std::string,std::__fs::filesystem::path>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  const void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(const void **)(i - 8);
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(const void *a1)
{
  if (a1)
    CFRelease(a1);
}

void adm::dsp::v1::Graph::~Graph(adm::dsp::v1::Graph *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_25083D150;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_25083D150;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x23B801508);
}

uint64_t adm::dsp::v1::Graph::getBlockSizePolicy(adm::dsp::v1::Graph *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t adm::dsp::v1::Graph::getBlockSize(adm::dsp::v1::Graph *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 688);
}

uint64_t adm::dsp::v1::Graph::getTerminalCount(uint64_t result, int a2)
{
  if (a2 == 1)
    return DSPGraph::Graph::numOutputs(*(DSPGraph::Graph **)(result + 8));
  if (!a2)
    return DSPGraph::Graph::numInputs(*(DSPGraph::Graph **)(result + 8));
  return result;
}

uint64_t adm::dsp::v1::Graph::getTerminalFormat@<X0>(DSPGraph::Graph **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  const char *v17;
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD v20[3];

  v4 = a3;
  result = (*((uint64_t (**)(DSPGraph::Graph **, uint64_t))*a1 + 4))(a1, a3);
  if (result <= a2)
  {
    v13 = 0;
    *(_QWORD *)a4 = 1651536493;
  }
  else
  {
    if (v4 == 1)
    {
      v14 = DSPGraph::Graph::out(a1[1]);
      v10 = *(_QWORD *)(v14 + 64);
      if (*(_QWORD *)(v14 + 72) == v10)
      {
        std::string::basic_string[abi:ne180100]<0>(v20, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v19, "in");
        v18 = (_QWORD *)(v14 + 32);
        if (*(char *)(v14 + 55) < 0)
          v18 = (_QWORD *)*v18;
        DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v17, v18, (uint64_t)(*(_QWORD *)(v14 + 72) - *(_QWORD *)(v14 + 64)) >> 5, 0);
        result = DSPGraph::ThrowException();
        goto LABEL_16;
      }
    }
    else
    {
      if (v4)
        return result;
      v9 = DSPGraph::Graph::in(a1[1]);
      v10 = *(_QWORD *)(v9 + 88);
      if (*(_QWORD *)(v9 + 96) == v10)
      {
        std::string::basic_string[abi:ne180100]<0>(v20, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
        std::string::basic_string[abi:ne180100]<0>(v19, "out");
        v12 = (_QWORD *)(v9 + 32);
        if (*(char *)(v9 + 55) < 0)
          v12 = (_QWORD *)*v12;
        DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v11, v12, (uint64_t)(*(_QWORD *)(v9 + 96) - *(_QWORD *)(v9 + 88)) >> 5, 0);
        result = DSPGraph::ThrowException();
LABEL_16:
        __break(1u);
        return result;
      }
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    v15 = *(_QWORD *)(result + 120);
    v16 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)a4 = *(_OWORD *)v15;
    *(_OWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v15 + 32);
    v13 = 1;
  }
  *(_BYTE *)(a4 + 40) = v13;
  return result;
}

void sub_236CA54E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  __clang_call_terminate(a1);
}

double adm::dsp::v1::Graph::getTerminalName@<D0>(DSPGraph::Graph **a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  double result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v4 = a3;
  if ((*((unsigned int (**)(DSPGraph::Graph **, uint64_t))*a1 + 4))(a1, a3) <= a2)
  {
    *(_QWORD *)a4 = 1651536493;
    *(_BYTE *)(a4 + 24) = 0;
  }
  else
  {
    if (v4)
    {
      v8 = DSPGraph::Graph::out(a1[1]);
      v9 = (char *)(v8 + 32);
      if (*(char *)(v8 + 55) < 0)
        v9 = *(char **)v9;
    }
    else
    {
      v10 = DSPGraph::Graph::in(a1[1]);
      v9 = (char *)(v10 + 32);
      if (*(char *)(v10 + 55) < 0)
        v9 = *(char **)v9;
    }
    std::string::basic_string[abi:ne180100]<0>(&v11, v9);
    result = *(double *)&v11;
    *(_OWORD *)a4 = v11;
    *(_QWORD *)(a4 + 16) = v12;
    *(_BYTE *)(a4 + 24) = 1;
  }
  return result;
}

uint64_t adm::dsp::v1::Graph::getRequiredInputFrameCount@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD v4[2];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (*(_BYTE *)(*(_QWORD *)(this + 8) + 760))
  {
    v4[0] = this;
    v4[1] = &v5;
    this = adm::dsp::v1::Graph::getRequiredInputFrameCount::$_0::operator()(v4);
    *(_DWORD *)a3 = this;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_QWORD *)a3 = 1970171760;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

void sub_236CA56C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, int a14, __int16 a15, __int16 a16, _QWORD *a17, __int128 a18, uint64_t a19)
{
  uint64_t v19;
  _QWORD *v21;
  NSObject *adm_log_object;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  _BOOL4 v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  int v35;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v21 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v31 = (*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
      v32 = v21 + 2;
      if (*((char *)v21 + 39) < 0)
        v32 = (_QWORD *)*v32;
      v33 = v21 + 6;
      if (*((char *)v21 + 71) < 0)
        v33 = (_QWORD *)*v33;
      v34 = *((_DWORD *)v21 + 10);
      v35 = *((_DWORD *)v21 + 2);
      LODWORD(buf) = 136316418;
      *(_QWORD *)((char *)&buf + 4) = "get required input frame count";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v31;
      a16 = 2080;
      a17 = v32;
      LOWORD(a18) = 2080;
      *(_QWORD *)((char *)&a18 + 2) = v33;
      WORD5(a18) = 1024;
      HIDWORD(a18) = v34;
      LOWORD(a19) = 1024;
      *(_DWORD *)((char *)&a19 + 2) = v35;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    v23 = 1685287015;
LABEL_10:
    *(_QWORD *)v19 = v23;
    *(_BYTE *)(v19 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA5690);
  }
  v24 = __cxa_begin_catch(a1);
  v25 = get_adm_log_object();
  v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v26)
    {
      v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v24 + 16))(v24);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "get required input frame count";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v27;
      v28 = "failed to %s due to std::exception: %s";
      v29 = v25;
      v30 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
    }
  }
  else if (v26)
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "get required input frame count";
    v28 = "failed to %s due to unknown exception";
    v29 = v25;
    v30 = 12;
    goto LABEL_17;
  }
  v23 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getExpectedOutputFrameCount@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD v4[2];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  if (*(_BYTE *)(*(_QWORD *)(this + 8) + 760))
  {
    v4[0] = this;
    v4[1] = &v5;
    this = adm::dsp::v1::Graph::getExpectedOutputFrameCount::$_0::operator()(v4);
    *(_DWORD *)a3 = this;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else
  {
    *(_QWORD *)a3 = 1970171760;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

void sub_236CA5930(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, int a14, __int16 a15, __int16 a16, _QWORD *a17, __int128 a18, uint64_t a19)
{
  uint64_t v19;
  _QWORD *v21;
  NSObject *adm_log_object;
  uint64_t v23;
  void *v24;
  NSObject *v25;
  _BOOL4 v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  int v35;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v21 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v31 = (*(uint64_t (**)(_QWORD *))(*v21 + 16))(v21);
      v32 = v21 + 2;
      if (*((char *)v21 + 39) < 0)
        v32 = (_QWORD *)*v32;
      v33 = v21 + 6;
      if (*((char *)v21 + 71) < 0)
        v33 = (_QWORD *)*v33;
      v34 = *((_DWORD *)v21 + 10);
      v35 = *((_DWORD *)v21 + 2);
      LODWORD(buf) = 136316418;
      *(_QWORD *)((char *)&buf + 4) = "get expected output frame count";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v31;
      a16 = 2080;
      a17 = v32;
      LOWORD(a18) = 2080;
      *(_QWORD *)((char *)&a18 + 2) = v33;
      WORD5(a18) = 1024;
      HIDWORD(a18) = v34;
      LOWORD(a19) = 1024;
      *(_DWORD *)((char *)&a19 + 2) = v35;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    v23 = 1685287015;
LABEL_10:
    *(_QWORD *)v19 = v23;
    *(_BYTE *)(v19 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA5900);
  }
  v24 = __cxa_begin_catch(a1);
  v25 = get_adm_log_object();
  v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v26)
    {
      v27 = (*(uint64_t (**)(void *))(*(_QWORD *)v24 + 16))(v24);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "get expected output frame count";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v27;
      v28 = "failed to %s due to std::exception: %s";
      v29 = v25;
      v30 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
    }
  }
  else if (v26)
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "get expected output frame count";
    v28 = "failed to %s due to unknown exception";
    v29 = v25;
    v30 = 12;
    goto LABEL_17;
  }
  v23 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::reset@<X0>(DSPGraph::Graph **this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = DSPGraph::Graph::reset(this[1]);
  *a2 = 0;
  a2[16] = 1;
  return result;
}

void sub_236CA5B68(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, _QWORD *a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v17;
  NSObject *adm_log_object;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0)
        v28 = (_QWORD *)*v28;
      v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0)
        v29 = (_QWORD *)*v29;
      v30 = *((_DWORD *)v17 + 10);
      v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(_QWORD *)((char *)&a9 + 4) = "reset";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    v19 = 1685287015;
LABEL_10:
    *(_QWORD *)v15 = v19;
    *(_BYTE *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA5B38);
  }
  v20 = __cxa_begin_catch(a1);
  v21 = get_adm_log_object();
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "reset";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v23;
      v24 = "failed to %s due to std::exception: %s";
      v25 = v21;
      v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(_QWORD *)((char *)&a9 + 4) = "reset";
    v24 = "failed to %s due to unknown exception";
    v25 = v21;
    v26 = 12;
    goto LABEL_17;
  }
  v19 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::process@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _BYTE *a7@<X8>)
{
  uint64_t result;
  _QWORD v9[4];
  int v10;
  _QWORD v11[2];
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  v12[0] = a2;
  v12[1] = a3;
  v11[0] = a4;
  v11[1] = a5;
  v10 = a6;
  v9[0] = a1;
  v9[1] = v12;
  v9[2] = &v10;
  v9[3] = v11;
  result = adm::dsp::v1::Graph::process(std::span<adm::dsp::ProcessData const,18446744073709551615ul>,std::span<adm::dsp::ProcessData,18446744073709551615ul>,unsigned int)::$_0::operator()(v9);
  *a7 = 0;
  a7[16] = 1;
  return result;
}

void sub_236CA5DC0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf, int a20,__int16 a21,__int16 a22,_QWORD *a23,__int128 a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v27;
  NSObject *adm_log_object;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  _BOOL4 v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  int v41;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v27 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v37 = (*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
      v38 = v27 + 2;
      if (*((char *)v27 + 39) < 0)
        v38 = (_QWORD *)*v38;
      v39 = v27 + 6;
      if (*((char *)v27 + 71) < 0)
        v39 = (_QWORD *)*v39;
      v40 = *((_DWORD *)v27 + 10);
      v41 = *((_DWORD *)v27 + 2);
      LODWORD(buf) = 136316418;
      *(_QWORD *)((char *)&buf + 4) = "process";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v37;
      a22 = 2080;
      a23 = v38;
      LOWORD(a24) = 2080;
      *(_QWORD *)((char *)&a24 + 2) = v39;
      WORD5(a24) = 1024;
      HIDWORD(a24) = v40;
      LOWORD(a25) = 1024;
      *(_DWORD *)((char *)&a25 + 2) = v41;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    v29 = 1685287015;
LABEL_10:
    *(_QWORD *)v25 = v29;
    *(_BYTE *)(v25 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA5D90);
  }
  v30 = __cxa_begin_catch(a1);
  v31 = get_adm_log_object();
  v32 = os_log_type_enabled(v31, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v32)
    {
      v33 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "process";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v33;
      v34 = "failed to %s due to std::exception: %s";
      v35 = v31;
      v36 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&buf, v36);
    }
  }
  else if (v32)
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "process";
    v34 = "failed to %s due to unknown exception";
    v35 = v31;
    v36 = 12;
    goto LABEL_17;
  }
  v29 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getParameterIDs@<X0>(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  uint64_t *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 536);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = a2 == 1;
    do
    {
      if (*((unsigned __int8 *)v4 + 32) == v8)
      {
        if ((unint64_t)v7 >= v6)
        {
          v10 = (v7 - v5) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v6 - (_QWORD)v5) >> 1 > v11)
            v11 = (uint64_t)(v6 - (_QWORD)v5) >> 1;
          if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL)
            v12 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
          else
            v13 = 0;
          v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)v14 = *((_DWORD *)v4 + 4);
          v9 = v14 + 4;
          while (v7 != v5)
          {
            v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          v6 = v12 + 4 * v13;
          *a3 = v14;
          a3[1] = v9;
          a3[2] = (char *)v6;
          if (v5)
            operator delete(v5);
          v5 = v14;
        }
        else
        {
          *(_DWORD *)v7 = *((_DWORD *)v4 + 4);
          v9 = v7 + 4;
        }
        a3[1] = v9;
        v7 = v9;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

BOOL adm::dsp::v1::Graph::hasParameter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 528);
  if (!v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (v4 <= a2)
      v6 = a2 % v4;
  }
  else
  {
    v6 = ((_DWORD)v4 - 1) & a2;
  }
  v7 = *(uint64_t ***)(*(_QWORD *)(v3 + 520) + 8 * v6);
  if (!v7)
    return 0;
  v8 = *v7;
  if (!v8)
    return 0;
  while (1)
  {
    v9 = v8[1];
    if (v9 == a2)
      break;
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= v4)
        v9 %= v4;
    }
    else
    {
      v9 &= v4 - 1;
    }
    if (v9 != v6)
      return 0;
LABEL_16:
    v8 = (uint64_t *)*v8;
    if (!v8)
      return 0;
  }
  if (*((_DWORD *)v8 + 4) != a2)
    goto LABEL_16;
  return (a3 & 0xFF00000000) == 0 || *((_BYTE *)v8 + 32) == ((_DWORD)a3 == 1);
}

void adm::dsp::v1::Graph::getParameter(adm::dsp::v1::Graph *this@<X0>, uint64_t a2@<X8>)
{
  *(float *)a2 = (*(float (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  *(_BYTE *)(a2 + 16) = 1;
}

void sub_236CA622C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, _QWORD *a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v17;
  NSObject *adm_log_object;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0)
        v28 = (_QWORD *)*v28;
      v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0)
        v29 = (_QWORD *)*v29;
      v30 = *((_DWORD *)v17 + 10);
      v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(_QWORD *)((char *)&a9 + 4) = "get DSP parameter";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    v19 = 1685287015;
LABEL_10:
    *(_QWORD *)v15 = v19;
    *(_BYTE *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA61FCLL);
  }
  v20 = __cxa_begin_catch(a1);
  v21 = get_adm_log_object();
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "get DSP parameter";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v23;
      v24 = "failed to %s due to std::exception: %s";
      v25 = v21;
      v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(_QWORD *)((char *)&a9 + 4) = "get DSP parameter";
    v24 = "failed to %s due to unknown exception";
    v25 = v21;
    v26 = 12;
    goto LABEL_17;
  }
  v19 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::setParameter@<X0>(adm::dsp::v1::Graph *this@<X0>, float a2@<S0>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), a2);
  *a3 = 0;
  a3[16] = 1;
  return result;
}

void sub_236CA646C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, _QWORD *a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v17;
  NSObject *adm_log_object;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0)
        v28 = (_QWORD *)*v28;
      v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0)
        v29 = (_QWORD *)*v29;
      v30 = *((_DWORD *)v17 + 10);
      v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(_QWORD *)((char *)&a9 + 4) = "set DSP parameter";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    v19 = 1685287015;
LABEL_10:
    *(_QWORD *)v15 = v19;
    *(_BYTE *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA643CLL);
  }
  v20 = __cxa_begin_catch(a1);
  v21 = get_adm_log_object();
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "set DSP parameter";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v23;
      v24 = "failed to %s due to std::exception: %s";
      v25 = v21;
      v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(_QWORD *)((char *)&a9 + 4) = "set DSP parameter";
    v24 = "failed to %s due to unknown exception";
    v25 = v21;
    v26 = 12;
    goto LABEL_17;
  }
  v19 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getPropertyIDs@<X0>(uint64_t a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  uint64_t *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 8) + 576);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = a2 == 1;
    do
    {
      if (*((unsigned __int8 *)v4 + 64) == v8)
      {
        if ((unint64_t)v7 >= v6)
        {
          v10 = (v7 - v5) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v6 - (_QWORD)v5) >> 1 > v11)
            v11 = (uint64_t)(v6 - (_QWORD)v5) >> 1;
          if (v6 - (unint64_t)v5 >= 0x7FFFFFFFFFFFFFFCLL)
            v12 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v12);
          else
            v13 = 0;
          v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)v14 = *((_DWORD *)v4 + 4);
          v9 = v14 + 4;
          while (v7 != v5)
          {
            v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          v6 = v12 + 4 * v13;
          *a3 = v14;
          a3[1] = v9;
          a3[2] = (char *)v6;
          if (v5)
            operator delete(v5);
          v5 = v14;
        }
        else
        {
          *(_DWORD *)v7 = *((_DWORD *)v4 + 4);
          v9 = v7 + 4;
        }
        a3[1] = v9;
        v7 = v9;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
}

BOOL adm::dsp::v1::Graph::hasProperty(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  unint64_t v9;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 568);
  if (!v4)
    return 0;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    v6 = a2;
    if (v4 <= a2)
      v6 = a2 % v4;
  }
  else
  {
    v6 = ((_DWORD)v4 - 1) & a2;
  }
  v7 = *(uint64_t ***)(*(_QWORD *)(v3 + 560) + 8 * v6);
  if (!v7)
    return 0;
  v8 = *v7;
  if (!v8)
    return 0;
  while (1)
  {
    v9 = v8[1];
    if (v9 == a2)
      break;
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= v4)
        v9 %= v4;
    }
    else
    {
      v9 &= v4 - 1;
    }
    if (v9 != v6)
      return 0;
LABEL_16:
    v8 = (uint64_t *)*v8;
    if (!v8)
      return 0;
  }
  if (*((_DWORD *)v8 + 4) != a2)
    goto LABEL_16;
  return (a3 & 0xFF00000000) == 0 || *((_BYTE *)v8 + 64) == ((_DWORD)a3 == 1);
}

unint64_t adm::dsp::v1::Graph::getPropertyInfo@<X0>(adm::dsp::v1::Graph *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  _DWORD *exception;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
  v7 = result;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(_QWORD *)exception = &off_25083D2C8;
    exception[2] = v7;
  }
  v9 = *((_QWORD *)this + 1) + 576;
  do
  {
    v9 = *(_QWORD *)v9;
    if (!v9)
      break;
  }
  while (*(_DWORD *)(v9 + 16) != a2 || *(_BYTE *)(v9 + 64) == 0);
  if (v9)
    v11 = 0;
  else
    v11 = HIDWORD(result) & 1;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_236CA6950(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, _QWORD *a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v17;
  NSObject *adm_log_object;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0)
        v28 = (_QWORD *)*v28;
      v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0)
        v29 = (_QWORD *)*v29;
      v30 = *((_DWORD *)v17 + 10);
      v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(_QWORD *)((char *)&a9 + 4) = "get DSP property info";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    v19 = 1685287015;
LABEL_10:
    *(_QWORD *)v15 = v19;
    *(_BYTE *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA68F0);
  }
  v20 = __cxa_begin_catch(a1);
  v21 = get_adm_log_object();
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "get DSP property info";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v23;
      v24 = "failed to %s due to std::exception: %s";
      v25 = v21;
      v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(_QWORD *)((char *)&a9 + 4) = "get DSP property info";
    v24 = "failed to %s due to unknown exception";
    v25 = v21;
    v26 = 12;
    goto LABEL_17;
  }
  v19 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t result;
  _DWORD v8[15];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = *a3;
  v8[0] = a3[1];
  result = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a2, v8, v6);
  a3[1] = v8[0];
  *a4 = 0;
  a4[16] = 1;
  return result;
}

void sub_236CA6BA8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, __int16 a14, _QWORD *a15, __int128 a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  NSObject *adm_log_object;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v19 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v29 = (*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
      v30 = v19 + 2;
      if (*((char *)v19 + 39) < 0)
        v30 = (_QWORD *)*v30;
      v31 = v19 + 6;
      if (*((char *)v19 + 71) < 0)
        v31 = (_QWORD *)*v31;
      v32 = *((_DWORD *)v19 + 10);
      v33 = *((_DWORD *)v19 + 2);
      LODWORD(buf) = 136316418;
      *(_QWORD *)((char *)&buf + 4) = "get DSP property";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v29;
      a14 = 2080;
      a15 = v30;
      LOWORD(a16) = 2080;
      *(_QWORD *)((char *)&a16 + 2) = v31;
      WORD5(a16) = 1024;
      HIDWORD(a16) = v32;
      LOWORD(a17) = 1024;
      *(_DWORD *)((char *)&a17 + 2) = v33;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    v21 = 1685287015;
LABEL_10:
    *(_QWORD *)v17 = v21;
    *(_BYTE *)(v17 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA6B78);
  }
  v22 = __cxa_begin_catch(a1);
  v23 = get_adm_log_object();
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v24)
    {
      v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "get DSP property";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v25;
      v26 = "failed to %s due to std::exception: %s";
      v27 = v23;
      v28 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else if (v24)
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "get DSP property";
    v26 = "failed to %s due to unknown exception";
    v27 = v23;
    v28 = 12;
    goto LABEL_17;
  }
  v21 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::setProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a2, a4, a3);
  *a5 = 0;
  a5[16] = 1;
  return result;
}

void sub_236CA6DF4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, _QWORD *a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v17;
  NSObject *adm_log_object;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  int v31;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v17 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v27 = (*(uint64_t (**)(_QWORD *))(*v17 + 16))(v17);
      v28 = v17 + 2;
      if (*((char *)v17 + 39) < 0)
        v28 = (_QWORD *)*v28;
      v29 = v17 + 6;
      if (*((char *)v17 + 71) < 0)
        v29 = (_QWORD *)*v29;
      v30 = *((_DWORD *)v17 + 10);
      v31 = *((_DWORD *)v17 + 2);
      LODWORD(a9) = 136316418;
      *(_QWORD *)((char *)&a9 + 4) = "set DSP property";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v27;
      a12 = 2080;
      a13 = v28;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v29;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v30;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v31;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&a9, 0x36u);
    }
    v19 = 1685287015;
LABEL_10:
    *(_QWORD *)v15 = v19;
    *(_BYTE *)(v15 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA6DC4);
  }
  v20 = __cxa_begin_catch(a1);
  v21 = get_adm_log_object();
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v22)
    {
      v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(a9) = 136315394;
      *(_QWORD *)((char *)&a9 + 4) = "set DSP property";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v23;
      v24 = "failed to %s due to std::exception: %s";
      v25 = v21;
      v26 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&a9, v26);
    }
  }
  else if (v22)
  {
    LODWORD(a9) = 136315138;
    *(_QWORD *)((char *)&a9 + 4) = "set DSP property";
    v24 = "failed to %s due to unknown exception";
    v25 = v21;
    v26 = 12;
    goto LABEL_17;
  }
  v19 = 1970170734;
  goto LABEL_10;
}

uint64_t adm::dsp::v1::Graph::getLatencyInSamples@<X0>(DSPGraph::Graph **this@<X0>, uint64_t a2@<X8>)
{
  DSPGraph::Box *v4;
  _QWORD *v5;
  uint64_t i;
  NSObject *v7;
  char *v8;
  _QWORD *v9;
  double v10;
  NSObject *v11;
  double v12;
  uint64_t result;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  double v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v4 = (DSPGraph::Box *)DSPGraph::Graph::out(this[1]);
  v5 = (_QWORD *)*((_QWORD *)this[1] + 3);
  for (i = DSPGraph::getLog(void)::onceToken; v5; v5 = (_QWORD *)*v5)
  {
    if (i != -1)
      dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_276);
    v7 = DSPGraph::getLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_INFO))
    {
      v8 = (char *)v5[2];
      v9 = v8 + 32;
      if (v8[55] < 0)
        v9 = (_QWORD *)*v9;
      DSPGraph::Box::selfLatencyInSeconds((DSPGraph::Box *)v8);
      *(_DWORD *)buf = 136315394;
      v15 = *(double *)&v9;
      v16 = 2048;
      v17 = v10 * 1000.0;
      _os_log_impl(&dword_236C84000, v7, OS_LOG_TYPE_INFO, "latency for box '%s' = %.1fms", buf, 0x16u);
      i = DSPGraph::getLog(void)::onceToken;
    }
    else
    {
      i = -1;
    }
  }
  if (i != -1)
    dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_276);
  v11 = DSPGraph::getLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_INFO))
  {
    DSPGraph::Box::totalLatencyInSeconds(v4);
    *(_DWORD *)buf = 134217984;
    v15 = v12 * 1000.0;
    _os_log_impl(&dword_236C84000, v11, OS_LOG_TYPE_INFO, "total latency = %.1fms", buf, 0xCu);
  }
  result = DSPGraph::Box::totalLatencyInSamples(v4);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

void sub_236CA71BC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, __int16 a14, _QWORD *a15, __int128 a16, uint64_t a17)
{
  uint64_t v17;
  _QWORD *v19;
  NSObject *adm_log_object;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v19 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v29 = (*(uint64_t (**)(_QWORD *))(*v19 + 16))(v19);
      v30 = v19 + 2;
      if (*((char *)v19 + 39) < 0)
        v30 = (_QWORD *)*v30;
      v31 = v19 + 6;
      if (*((char *)v19 + 71) < 0)
        v31 = (_QWORD *)*v31;
      v32 = *((_DWORD *)v19 + 10);
      v33 = *((_DWORD *)v19 + 2);
      LODWORD(buf) = 136316418;
      *(_QWORD *)((char *)&buf + 4) = "get graph latency in samples";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v29;
      a14 = 2080;
      a15 = v30;
      LOWORD(a16) = 2080;
      *(_QWORD *)((char *)&a16 + 2) = v31;
      WORD5(a16) = 1024;
      HIDWORD(a16) = v32;
      LOWORD(a17) = 1024;
      *(_DWORD *)((char *)&a17 + 2) = v33;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x36u);
    }
    v21 = 1685287015;
LABEL_10:
    *(_QWORD *)v17 = v21;
    *(_BYTE *)(v17 + 16) = 0;
    __cxa_end_catch();
    JUMPOUT(0x236CA7164);
  }
  v22 = __cxa_begin_catch(a1);
  v23 = get_adm_log_object();
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v24)
    {
      v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = "get graph latency in samples";
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v25;
      v26 = "failed to %s due to std::exception: %s";
      v27 = v23;
      v28 = 22;
LABEL_17:
      _os_log_error_impl(&dword_236C84000, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else if (v24)
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = "get graph latency in samples";
    v26 = "failed to %s due to unknown exception";
    v27 = v23;
    v28 = 12;
    goto LABEL_17;
  }
  v21 = 1970170734;
  goto LABEL_10;
}

void adm::dsp::v1::Graph::connectToAUPB(uint64_t a1, const std::string::value_type *a2)
{
  std::string *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *adm_log_object;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (a2[24])
  {
    v3 = (std::string *)(*(_QWORD *)(a1 + 8) + 408);
    if (a2[23] < 0)
      a2 = *(const std::string::value_type **)a2;
    std::string::__assign_external(v3, a2);
  }
  v4 = operator new();
  v5 = a1 + 8;
  MEMORY[0x23B800FBC](v4, a1 + 8);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (_QWORD *)(*(_QWORD *)v5 + 408);
    if (*(char *)(*(_QWORD *)v5 + 431) < 0)
      v8 = (_QWORD *)*v8;
    v9 = 136315138;
    v10 = v8;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "created processing block for '%s' node", (uint8_t *)&v9, 0xCu);
  }
}

void sub_236CA74AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, int a10, __int16 a11, __int16 a12, uint64_t a13, __int128 a14, uint64_t a15)
{
  uint64_t v15;
  _QWORD *v18;
  NSObject *adm_log_object;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  void *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;

  if (!a2)
    _Unwind_Resume(exception_object);
  MEMORY[0x23B801508](v15, 0xE1C40E9FAB1CALL);
  if (a2 == 3)
  {
    v18 = __cxa_begin_catch(exception_object);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v20 = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
      v21 = v18 + 2;
      if (*((char *)v18 + 39) < 0)
        v21 = (_QWORD *)*v21;
      v22 = v18 + 6;
      if (*((char *)v18 + 71) < 0)
        v22 = (_QWORD *)*v22;
      v23 = *((_DWORD *)v18 + 10);
      v24 = *((_DWORD *)v18 + 2);
      LODWORD(a9) = 136316418;
      *(_QWORD *)((char *)&a9 + 4) = "connect to AUPB";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v20;
      a12 = 2080;
      a13 = (uint64_t)v21;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v22;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v23;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v24;
      v25 = "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d";
      v26 = adm_log_object;
      v27 = 54;
      goto LABEL_15;
    }
LABEL_13:
    __cxa_end_catch();
    JUMPOUT(0x236CA747CLL);
  }
  v28 = __cxa_begin_catch(exception_object);
  v29 = get_adm_log_object();
  v30 = os_log_type_enabled(v29, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (!v30)
      goto LABEL_13;
    v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
    LODWORD(a9) = 136315394;
    *(_QWORD *)((char *)&a9 + 4) = "connect to AUPB";
    WORD6(a9) = 2080;
    *(_QWORD *)((char *)&a9 + 14) = v31;
    v25 = "failed to %s due to std::exception: %s";
    v26 = v29;
    v27 = 22;
  }
  else
  {
    if (!v30)
      goto LABEL_13;
    LODWORD(a9) = 136315138;
    *(_QWORD *)((char *)&a9 + 4) = "connect to AUPB";
    v25 = "failed to %s due to unknown exception";
    v26 = v29;
    v27 = 12;
  }
LABEL_15:
  _os_log_error_impl(&dword_236C84000, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&a9, v27);
  goto LABEL_13;
}

uint64_t adm::dsp::v1::Graph::visit(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 8));
  return 1;
}

void sub_236CA76FC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, int a10, __int16 a11, __int16 a12, _QWORD *a13, __int128 a14, uint64_t a15)
{
  _QWORD *v16;
  NSObject *adm_log_object;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  void *v26;
  NSObject *v27;
  _BOOL4 v28;
  uint64_t v29;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v16 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v18 = (*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
      v19 = v16 + 2;
      if (*((char *)v16 + 39) < 0)
        v19 = (_QWORD *)*v19;
      v20 = v16 + 6;
      if (*((char *)v16 + 71) < 0)
        v20 = (_QWORD *)*v20;
      v21 = *((_DWORD *)v16 + 10);
      v22 = *((_DWORD *)v16 + 2);
      LODWORD(a9) = 136316418;
      *(_QWORD *)((char *)&a9 + 4) = "ABHelper visit";
      WORD6(a9) = 2080;
      *(_QWORD *)((char *)&a9 + 14) = v18;
      a12 = 2080;
      a13 = v19;
      LOWORD(a14) = 2080;
      *(_QWORD *)((char *)&a14 + 2) = v20;
      WORD5(a14) = 1024;
      HIDWORD(a14) = v21;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v22;
      v23 = "failed to %s due to DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d";
      v24 = adm_log_object;
      v25 = 54;
      goto LABEL_15;
    }
LABEL_13:
    __cxa_end_catch();
    JUMPOUT(0x236CA76CCLL);
  }
  v26 = __cxa_begin_catch(a1);
  v27 = get_adm_log_object();
  v28 = os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (!v28)
      goto LABEL_13;
    v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
    LODWORD(a9) = 136315394;
    *(_QWORD *)((char *)&a9 + 4) = "ABHelper visit";
    WORD6(a9) = 2080;
    *(_QWORD *)((char *)&a9 + 14) = v29;
    v23 = "failed to %s due to std::exception: %s";
    v24 = v27;
    v25 = 22;
  }
  else
  {
    if (!v28)
      goto LABEL_13;
    LODWORD(a9) = 136315138;
    *(_QWORD *)((char *)&a9 + 4) = "ABHelper visit";
    v23 = "failed to %s due to unknown exception";
    v24 = v27;
    v25 = 12;
  }
LABEL_15:
  _os_log_error_impl(&dword_236C84000, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&a9, v25);
  goto LABEL_13;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

os_log_t ___ZN8DSPGraph6getLogEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DSPGraph");
  DSPGraph::getLog(void)::gLog = (uint64_t)result;
  return result;
}

void caulk::bad_expected_access<int>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x23B801508);
}

uint64_t adm::dsp::v1::Graph::process(std::span<adm::dsp::ProcessData const,18446744073709551615ul>,std::span<adm::dsp::ProcessData,18446744073709551615ul>,unsigned int)::$_0::operator()(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  __int128 *v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  std::logic_error *exception;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_DWORD *)(*a1 + 24);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, 0);
  v5 = (_QWORD *)a1[1];
  if (v5[1] != v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mismatched input bus count");
    goto LABEL_27;
  }
  v6 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v42[-2 * v7];
  if ((_DWORD)v6)
  {
    bzero(v8, 80 * ((80 * (unint64_t)v6 - 80) / 0x50) + 80);
    v9 = 0;
    v10 = v8;
    do
    {
      v11 = 0;
      *((_DWORD *)v10 + 1) = 0;
      if (v3 != 2)
        v11 = *(_DWORD *)a1[2];
      *(_DWORD *)v10 = v11;
      v12 = *(__int128 **)(*v5 + v9 + 8);
      v13 = *v12;
      v14 = v12[1];
      v15 = v12[2];
      *(_OWORD *)(v10 + 7) = v12[3];
      *(_OWORD *)(v10 + 5) = v15;
      *(_OWORD *)(v10 + 3) = v14;
      *(_OWORD *)(v10 + 1) = v13;
      v10[9] = 0;
      v9 += 24;
      v10 += 10;
    }
    while (24 * v6 != v9);
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 1);
  v17 = (_QWORD *)a1[3];
  if (v17[1] != v16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mismatched output bus count");
LABEL_27:
    __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
  }
  v18 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v20 = &v42[-2 * v19];
  if ((_DWORD)v18)
  {
    bzero(v20, 80 * ((80 * (unint64_t)v18 - 80) / 0x50) + 80);
    v21 = 0;
    v22 = v20;
    do
    {
      v23 = 0;
      *((_DWORD *)v22 + 1) = 0;
      if (v3 != 3)
        v23 = *(_DWORD *)a1[2];
      *(_DWORD *)v22 = v23;
      v24 = *(__int128 **)(*v17 + v21 + 8);
      v25 = *v24;
      v26 = v24[1];
      v27 = v24[2];
      *(_OWORD *)(v22 + 7) = v24[3];
      *(_OWORD *)(v22 + 5) = v27;
      *(_OWORD *)(v22 + 3) = v26;
      *(_OWORD *)(v22 + 1) = v25;
      v22[9] = 0;
      v21 += 24;
      v22 += 10;
    }
    while (24 * v18 != v21);
  }
  if (v3)
    DSPGraph::Graph::preflight();
  if ((_DWORD)v6)
  {
    v28 = *(uint64_t **)a1[1];
    v29 = v8 + 9;
    do
    {
      v30 = *v28;
      v28 += 3;
      *v29 = v30;
      v29 += 10;
      --v6;
    }
    while (v6);
  }
  if (!(_DWORD)v18)
    return DSPGraph::Graph::processMultiple();
  v31 = 0;
  v32 = *(uint64_t **)a1[3];
  do
  {
    v33 = *v32;
    v32 += 3;
    v20[v31 + 9] = v33;
    v31 += 10;
  }
  while (10 * v18 != v31);
  result = DSPGraph::Graph::processMultiple();
  v35 = 0;
  v36 = (__int128 *)(v20 + 1);
  do
  {
    v37 = *(_OWORD **)(*(_QWORD *)a1[3] + v35 + 8);
    v38 = *v36;
    v39 = v36[1];
    v40 = v36[3];
    v37[2] = v36[2];
    v37[3] = v40;
    *v37 = v38;
    v37[1] = v39;
    v35 += 24;
    v36 += 5;
  }
  while (24 * v18 != v35);
  return result;
}

void sub_236CA7C78(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t adm::dsp::v1::Graph::getExpectedOutputFrameCount(unsigned int)::$_0::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, 0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = &v21[-2 * v5 - 1];
  if (v4)
  {
    v7 = v4;
    bzero(v6, 80 * ((80 * (unint64_t)v4 - 80) / 0x50) + 80);
    v8 = *(_DWORD *)a1[1];
    v9 = v6 + 1;
    do
    {
      *((_DWORD *)v9 - 2) = v8;
      *((_DWORD *)v9 - 1) = 0;
      *(_OWORD *)v9 = 0uLL;
      *((_OWORD *)v9 + 1) = 0uLL;
      *((_OWORD *)v9 + 2) = 0uLL;
      *((_OWORD *)v9 + 3) = 0uLL;
      v9[8] = 0;
      v9 += 10;
      --v7;
    }
    while (v7);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 1);
  v11 = v10;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = &v21[-2 * v13 - 1];
  if (v12)
  {
    bzero(v14, 80 * ((80 * (unint64_t)v11 - 80) / 0x50) + 80);
    v15 = v14;
    v16 = v11;
    do
    {
      v15[3] = 0uLL;
      v15[4] = 0uLL;
      v15[1] = 0uLL;
      v15[2] = 0uLL;
      *v15 = 0uLL;
      v15 += 5;
      --v16;
    }
    while (v16);
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v2 + 40))(v21, v2, 0, 0);
  DSPGraph::Graph::preflight();
  result = 0xFFFFFFFFLL;
  if ((_DWORD)v11)
  {
    do
    {
      v19 = *v14;
      v14 += 20;
      v18 = v19;
      if (v19 >= result)
        result = result;
      else
        result = v18;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t adm::dsp::v1::Graph::getRequiredInputFrameCount(unsigned int)::$_0::operator()(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, 0);
  v4 = v3;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = &v21[-2 * v6 - 1];
  if (v5)
  {
    bzero(v7, 80 * ((80 * (unint64_t)v4 - 80) / 0x50) + 80);
    v8 = v7;
    v9 = v4;
    do
    {
      v8[3] = 0uLL;
      v8[4] = 0uLL;
      v8[1] = 0uLL;
      v8[2] = 0uLL;
      *v8 = 0uLL;
      v8 += 5;
      --v9;
    }
    while (v9);
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, 1);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v21[-2 * v12 - 1];
  if (v11)
  {
    v14 = v11;
    bzero(v13, 80 * ((80 * (unint64_t)v11 - 80) / 0x50) + 80);
    v15 = *(_DWORD *)a1[1];
    v16 = v13 + 1;
    do
    {
      *((_DWORD *)v16 - 2) = v15;
      *((_DWORD *)v16 - 1) = 0;
      *(_OWORD *)v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      v16[8] = 0;
      v16 += 10;
      --v14;
    }
    while (v14);
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v2 + 40))(v21, v2, 0, 1);
  DSPGraph::Graph::preflight();
  result = 0;
  if ((_DWORD)v4)
  {
    do
    {
      v19 = *v7;
      v7 += 20;
      v18 = v19;
      if (result <= v19)
        result = v18;
      else
        result = result;
      --v4;
    }
    while (v4);
  }
  return result;
}

void std::__shared_ptr_pointer<DSPGraph::Graph  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN8DSPGraph5GraphEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void adm::dsp::v1::Graph::create(NSObject *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  DSPGraph *v9;
  const char *v10;
  uint8_t v11[1032];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!*a2)
    goto LABEL_12;
  v5 = 0;
  if (a3 <= 3 && a3 != 1)
  {
    v7 = operator new();
    v5 = v7;
    v8 = *a2;
    *a2 = 0;
    *(_QWORD *)v7 = &off_25083D150;
    *(_QWORD *)(v7 + 8) = v8;
    if (!v8)
    {
      *(_QWORD *)(v7 + 16) = 0;
      *(_DWORD *)(v7 + 24) = a3;
      *(_QWORD *)(v7 + 32) = 0;
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_276);
      a1 = DSPGraph::getLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
        goto LABEL_11;
      *(_WORD *)v11 = 0;
      v10 = "DSPGraph assertion failure: graph must be non-null";
      goto LABEL_10;
    }
    v9 = (DSPGraph *)operator new();
    *(_QWORD *)v9 = &off_25083D260;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *((_QWORD *)v9 + 3) = v8;
    *(_QWORD *)(v5 + 16) = v9;
    *(_DWORD *)(v5 + 24) = a3;
    *(_QWORD *)(v5 + 32) = 0;
    if (DSPGraph::ABIVersion(v9) != 4)
    {
      if (DSPGraph::getLog(void)::onceToken != -1)
        dispatch_once(&DSPGraph::getLog(void)::onceToken, &__block_literal_global_276);
      a1 = DSPGraph::getLog(void)::gLog;
      if (!os_log_type_enabled((os_log_t)DSPGraph::getLog(void)::gLog, OS_LOG_TYPE_FAULT))
        goto LABEL_11;
      *(_WORD *)v11 = 0;
      v10 = "DSPGraph assertion failure: DSPGraph ABI runtime/compile-time mismatch";
LABEL_10:
      _os_log_fault_impl(&dword_236C84000, a1, OS_LOG_TYPE_FAULT, v10, v11, 2u);
LABEL_11:
      qword_25644B938 = (uint64_t)v11;
      __break(1u);
LABEL_12:
      v5 = 0;
    }
  }
  a1->isa = (Class)v5;
}

void sub_236CA82B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void boost::exception_ptr::~exception_ptr(unsigned int **this)
{
  boost::detail::shared_count::~shared_count(this + 1);
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::~sp_counted_impl_p()
{
  JUMPOUT(0x23B801508);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  std::bad_exception::~bad_exception((std::bad_exception *)(a1 + 40));
  *(_QWORD *)a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  std::bad_exception::~bad_exception((std::bad_exception *)(a1 + 40));
  *(_QWORD *)a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x23B801508);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 48) = &unk_25083ED90;
  *(_QWORD *)v2 = &unk_25083EE08;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 8) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 40) = &unk_25083D568;
  *(_QWORD *)v2 = &off_25083D538;
  *(_QWORD *)(v2 + 48) = &unk_25083D5A8;
  boost::exception_detail::copy_boost_exception(v2, a1);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_236CA8480(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B801508](v1, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl((uint64_t)exception, a1);
}

void sub_236CA84FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *`non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(std::bad_exception *a1)
{
  uint64_t v1;

  std::bad_exception::~bad_exception(a1);
  *(_QWORD *)(v1 - 40) = &unk_25083EE08;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 - 32));
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(a1 - 40);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

uint64_t *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  std::bad_exception::~bad_exception((std::bad_exception *)v1 + 5);
  *(_QWORD *)v1 = &unk_25083EE08;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_exception_>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_25083ED90;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_25083EE08;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = &off_25083D538;
  *(_QWORD *)(a1 + 40) = &unk_25083D568;
  *(_QWORD *)(a1 + 48) = &unk_25083D5A8;
  return a1;
}

void boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
  std::bad_exception::~bad_exception((std::bad_exception *)this + 5);
  *(_QWORD *)this = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
}

{
  std::bad_exception::~bad_exception((std::bad_exception *)this + 5);
  *(_QWORD *)this = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x23B801508);
}

void `non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(std::bad_exception *this)
{
  uint64_t v1;

  std::bad_exception::~bad_exception(this);
  *(_QWORD *)(v1 - 40) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 - 32));
}

void `non-virtual thunk to'boost::exception_detail::bad_exception_::~bad_exception_(boost::exception_detail::bad_exception_ *this)
{
  boost::exception_detail::bad_exception_::~bad_exception_((boost::exception_detail::bad_exception_ *)((char *)this - 40));
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::~sp_counted_impl_p()
{
  JUMPOUT(0x23B801508);
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)(a1 + 40));
  *(_QWORD *)a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  return a1;
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)(a1 + 40));
  *(_QWORD *)a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 8));
  JUMPOUT(0x23B801508);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)(v2 + 48) = &unk_25083ED90;
  *(_QWORD *)v2 = &unk_25083EE08;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v2 + 8) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 40) = &unk_25083D3A8;
  *(_QWORD *)v2 = &off_25083D378;
  *(_QWORD *)(v2 + 48) = &unk_25083D3E8;
  boost::exception_detail::copy_boost_exception(v2, a1);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_236CA8870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x23B801508](v1, 0x10F1C4085500448);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x38uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl((uint64_t)exception, a1);
}

void sub_236CA88EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *`non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(std::bad_alloc *a1)
{
  uint64_t v1;

  std::bad_alloc::~bad_alloc(a1);
  *(_QWORD *)(v1 - 40) = &unk_25083EE08;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 - 32));
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(a1 - 40);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

uint64_t *`virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  std::bad_alloc::~bad_alloc((std::bad_alloc *)v1 + 5);
  *(_QWORD *)v1 = &unk_25083EE08;
  return boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 1);
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::bad_alloc_>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 48) = &unk_25083ED90;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_25083EE08;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = &off_25083D378;
  *(_QWORD *)(a1 + 40) = &unk_25083D3A8;
  *(_QWORD *)(a1 + 48) = &unk_25083D3E8;
  return a1;
}

void boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5);
  *(_QWORD *)this = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
}

{
  std::bad_alloc::~bad_alloc((std::bad_alloc *)this + 5);
  *(_QWORD *)this = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)this + 1);
  JUMPOUT(0x23B801508);
}

void `non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(std::bad_alloc *this)
{
  uint64_t v1;

  std::bad_alloc::~bad_alloc(this);
  *(_QWORD *)(v1 - 40) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v1 - 32));
}

void `non-virtual thunk to'boost::exception_detail::bad_alloc_::~bad_alloc_(boost::exception_detail::bad_alloc_ *this)
{
  boost::exception_detail::bad_alloc_::~bad_alloc_((boost::exception_detail::bad_alloc_ *)((char *)this - 40));
}

void adm::consume_exception_and_terminate(const std::exception *this, const std::exception *a2)
{
  const char *v3;

  v3 = (const char *)((uint64_t (*)(const std::exception *, const std::exception *))this->what)(this, a2);
  consume_exception_and_terminate(this, v3);
}

void consume_exception_and_terminate(const std::exception *a1, const char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  _QWORD *v7;
  const std::exception *v8;
  void **v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  void **v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t (**v17)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  uint64_t (**v22)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v23;
  char *v24;
  NSObject *adm_log_object;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  size_t v29;
  const char *v30;
  size_t v31;
  _QWORD *v32;
  void *__p[2];
  unsigned __int8 v34;
  void *__dst[2];
  unsigned __int8 v36;
  void *v37;
  _BYTE lpsrc[66];
  void *v39;
  char v40;
  _QWORD v41[20];

  v41[19] = *MEMORY[0x24BDAC8D0];
  qword_25644B938 = (uint64_t)a2;
  if (v3)
  {
    v4 = v3[1];
    if (v4)
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t, void **))(*(_QWORD *)v4 + 8))(lpsrc, v4, __dst);
      if (*(_QWORD *)lpsrc
      {
        __assert_rtn("get", "get_error_info.hpp", 46, "0!=dynamic_cast<ErrorInfo *>(eib.get())");
      }
      boost::detail::shared_count::~shared_count((unsigned int **)&lpsrc[8]);
    }
  }
  v6 = (char *)((uint64_t (*)(const std::exception *))a1->what)(a1);
  if (v5)
  {
    v16 = *((_QWORD *)v5 + 1);
    if (!v16)
    {
      v16 = operator new();
      v17 = &off_25083F148;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)v16 = &off_25083F148;
      *(_QWORD *)(v16 + 8) = v16 + 16;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_DWORD *)(v16 + 56) = 0;
      v18 = *((_QWORD *)v5 + 1);
      if (v18)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
        v17 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v16;
      }
      *((_QWORD *)v5 + 1) = v16;
      ((void (*)(uint64_t))v17[3])(v16);
    }
    v19 = (**(uint64_t (***)(uint64_t, _QWORD))v16)(v16, 0);
    if (!v19)
      __assert_rtn("get_diagnostic_information", "diagnostic_information.hpp", 109, "di!=0");
    if ((char *)v19 == v6)
    {
      std::string::basic_string[abi:ne180100]<0>(__dst, v6);
      goto LABEL_55;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)lpsrc);
    v28 = *((_QWORD *)v5 + 3);
    if (v28 || *((_DWORD *)v5 + 8) != -1 || *((_QWORD *)v5 + 2))
    {
      if (v28)
      {
        v29 = strlen(*((const char **)v5 + 3));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, v28, v29);
        if (*((_DWORD *)v5 + 8) != -1)
        {
          LOBYTE(__dst[0]) = 40;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)__dst, 1);
          v32 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"): ", 3);
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)"Throw in function ", 18);
      v30 = (const char *)*((_QWORD *)v5 + 2);
      if (v30)
      {
        v31 = strlen(*((const char **)v5 + 2));
      }
      else
      {
        v30 = "(unknown)";
        v31 = 9;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v30, v31);
      LOBYTE(__dst[0]) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)__dst, 1);
      v8 = (const std::exception *)v5;
      v7 = v5;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)"Throw location unknown (consider using BOOST_THROW_EXCEPTION)\n", 62);
      v8 = (const std::exception *)v5;
      v7 = v5;
    }
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)lpsrc);
    v7 = 0;
    v8 = a1;
  }
  std::string::basic_string[abi:ne180100]<0>(__dst, "Dynamic exception type: ");
  if ((v36 & 0x80u) == 0)
    v9 = __dst;
  else
    v9 = (void **)__dst[0];
  if ((v36 & 0x80u) == 0)
    v10 = v36;
  else
    v10 = (uint64_t)__dst[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v9, v10);
  v11 = (const char *)(*((_QWORD *)v8->__vftable[-1].what + 1) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v37, v11);
  if (v37)
    v12 = (char *)v37;
  else
    v12 = (char *)v11;
  std::string::basic_string[abi:ne180100]<0>(__p, v12);
  free(v37);
  if ((v34 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v34 & 0x80u) == 0)
    v14 = v34;
  else
    v14 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v13, v14);
  LOBYTE(v37) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)&v37, 1);
  if ((char)v34 < 0)
    operator delete(__p[0]);
  if ((char)v36 < 0)
    operator delete(__dst[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)"std::exception::what: ", 22);
  if (!v6)
    v6 = "(null)";
  v15 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)v6, v15);
  LOBYTE(__dst[0]) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(lpsrc, (uint64_t)__dst, 1);
  if (!v5)
    goto LABEL_30;
  v20 = __dst;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&lpsrc[8]);
  if ((v36 & 0x80u) != 0)
    v20 = (void **)__dst[0];
  v21 = v7[1];
  if (!v21)
  {
    v21 = operator new();
    v22 = &off_25083F148;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 16) = 0;
    *(_QWORD *)v21 = &off_25083F148;
    *(_QWORD *)(v21 + 8) = v21 + 16;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 48) = 0;
    *(_DWORD *)(v21 + 56) = 0;
    v23 = v7[1];
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23);
      v22 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v21;
    }
    v7[1] = v21;
    ((void (*)(uint64_t))v22[3])(v21);
  }
  v24 = (char *)(**(uint64_t (***)(uint64_t, void **))v21)(v21, v20);
  if (!v24)
    __assert_rtn("get_diagnostic_information", "diagnostic_information.hpp", 109, "di!=0");
  if ((char)v36 < 0)
    operator delete(__dst[0]);
  if (*v24)
    std::string::basic_string[abi:ne180100]<0>(__dst, v24);
  else
LABEL_30:
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)&lpsrc[8]);
  *(_QWORD *)lpsrc = *MEMORY[0x24BEDB800];
  *(_QWORD *)&lpsrc[*(_QWORD *)(*(_QWORD *)lpsrc - 24)] = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)&lpsrc[8] = MEMORY[0x24BEDB848] + 16;
  if (v40 < 0)
    operator delete(v39);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B801478](v41);
LABEL_55:
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    v26 = ((uint64_t (*)(const std::exception *))a1->what)(a1);
    v27 = __dst;
    if ((v36 & 0x80u) != 0)
      v27 = (void **)__dst[0];
    *(_DWORD *)lpsrc = 136315394;
    *(_QWORD *)&lpsrc[4] = v26;
    *(_WORD *)&lpsrc[12] = 2080;
    *(_QWORD *)&lpsrc[14] = v27;
    _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "**EXCEPTION**  %s\n%s", lpsrc, 0x16u);
  }
  abort();
}

void sub_236CA918C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_236CA919C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void adm::consume_exception_and_terminate(const std::exception *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  const char *v10;
  _QWORD __dst[2];
  char v12;
  _QWORD v13[2];
  uint64_t v14;
  _QWORD v15[8];
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  v19 = MEMORY[0x24BEDB858] + 104;
  v4 = MEMORY[0x24BEDB858] + 64;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  v14 = MEMORY[0x24BEDB858] + 64;
  v13[0] = v6;
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v6 - 24)) = v7;
  v13[1] = 0;
  v8 = (std::ios_base *)((char *)v13 + *(_QWORD *)(v13[0] - 24));
  std::ios_base::init(v8, v15);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[5];
  v14 = v5[4];
  *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v9;
  v13[0] = v5[1];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = v5[6];
  v19 = v3;
  v13[0] = v2 + 24;
  v14 = v4;
  std::streambuf::basic_streambuf();
  v15[0] = MEMORY[0x24BEDB848] + 16;
  v16 = 0u;
  v17 = 0u;
  v18 = 24;
  DSPGraph::Exception::print();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v15);
  if (v12 >= 0)
    v10 = (const char *)__dst;
  else
    v10 = (const char *)__dst[0];
  consume_exception_and_terminate(a1, v10);
}

void sub_236CA92EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;

  if (a15 < 0)
    operator delete(__p);
  a16 = *v34;
  v36 = v34[9];
  *(uint64_t *)((char *)&a16 + *(_QWORD *)(a16 - 24)) = v34[8];
  a18 = v36;
  a19 = v33 + 16;
  if (a32 < 0)
    operator delete(a27);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23B801478](v32);
  _Unwind_Resume(a1);
}

void adm::consume_unknown_exception_and_terminate(adm *this)
{
  qword_25644B938 = (uint64_t)"Unknown exception";
  abort();
}

void adm::log_exception(adm *this, const std::exception *a2)
{
  NSObject *adm_log_object;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    v4 = (*(uint64_t (**)(adm *))(*(_QWORD *)this + 16))(this);
    v5 = 136315138;
    v6 = v4;
    _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "**THROWING EXCEPTION** %s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CA9498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[7],char [7],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "format");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CA9504(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlohmann::detail::to_json_fn::operator()<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,CA::StreamDescription const&>(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t *v4;
  char *v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  char *v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  char *v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  char *v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  int v26;
  uint64_t *v27;
  uint64_t *v28;
  char *v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  char *v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;
  uint64_t *v38;
  char v39[8];
  uint64_t *v40;
  char v41[8];
  uint64_t *v42;
  char v43[8];
  uint64_t *v44;
  char v45[8];
  uint64_t *v46;
  char v47[8];
  uint64_t *v48;
  char v49[8];
  uint64_t *v50;
  char v51[8];
  uint64_t *v52;
  char v53[8];
  uint64_t *v54;
  char v55[8];
  uint64_t *v56;

  v4 = *(uint64_t **)a2;
  v55[0] = 7;
  v56 = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  v5 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "sample_rate");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  v6 = *v5;
  *v5 = 7;
  v55[0] = v6;
  v7 = (uint64_t *)*((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v4;
  v56 = v7;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v5);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v55);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v56, v6);
  v8 = (uint64_t *)*(unsigned int *)(a2 + 8);
  v53[0] = 6;
  v54 = v8;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  v9 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "format_id");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  v10 = *v9;
  *v9 = 6;
  v53[0] = v10;
  v11 = (uint64_t *)*((_QWORD *)v9 + 1);
  *((_QWORD *)v9 + 1) = v8;
  v54 = v11;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v53);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v54, v10);
  v12 = (uint64_t *)*(unsigned int *)(a2 + 12);
  v51[0] = 6;
  v52 = v12;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  v13 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "format_flags");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  v14 = *v13;
  *v13 = 6;
  v51[0] = v14;
  v15 = (uint64_t *)*((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v12;
  v52 = v15;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v13);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v51);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v52, v14);
  v16 = (uint64_t *)*(unsigned int *)(a2 + 16);
  v49[0] = 6;
  v50 = v16;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  v17 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "bytes_per_packet");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  v18 = *v17;
  *v17 = 6;
  v49[0] = v18;
  v19 = (uint64_t *)*((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = v16;
  v50 = v19;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v49);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v18);
  v20 = (uint64_t *)*(unsigned int *)(a2 + 20);
  v47[0] = 6;
  v48 = v20;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  v21 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "frames_per_packet");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  v22 = *v21;
  *v21 = 6;
  v47[0] = v22;
  v23 = (uint64_t *)*((_QWORD *)v21 + 1);
  *((_QWORD *)v21 + 1) = v20;
  v48 = v23;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v47);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v48, v22);
  v24 = (uint64_t *)*(unsigned int *)(a2 + 24);
  v45[0] = 6;
  v46 = v24;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  v25 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "bytes_per_frame");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  v26 = *v25;
  *v25 = 6;
  v45[0] = v26;
  v27 = (uint64_t *)*((_QWORD *)v25 + 1);
  *((_QWORD *)v25 + 1) = v24;
  v46 = v27;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v45);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v46, v26);
  v28 = (uint64_t *)*(unsigned int *)(a2 + 28);
  v43[0] = 6;
  v44 = v28;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "channels_per_frame");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  v30 = *v29;
  *v29 = 6;
  v43[0] = v30;
  v31 = (uint64_t *)*((_QWORD *)v29 + 1);
  *((_QWORD *)v29 + 1) = v28;
  v44 = v31;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v29);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v43);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v44, v30);
  v32 = (uint64_t *)*(unsigned int *)(a2 + 32);
  v41[0] = 6;
  v42 = v32;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  v33 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "bits_per_channel");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  v34 = *v33;
  *v33 = 6;
  v41[0] = v34;
  v35 = (uint64_t *)*((_QWORD *)v33 + 1);
  *((_QWORD *)v33 + 1) = v32;
  v42 = v35;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v41);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v42, v34);
  v36 = (uint64_t *)*(unsigned int *)(a2 + 36);
  v39[0] = 6;
  v40 = v36;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  v37 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::operator[]<char const>(a1, "reserved");
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  LODWORD(v33) = *v37;
  *v37 = 6;
  v39[0] = (char)v33;
  v38 = (uint64_t *)*((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v36;
  v40 = v38;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v37);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v39);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v40, (int)v33);
}

void sub_236CA9980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t *a10)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a9);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a10, a9);
  _Unwind_Resume(a1);
}

void nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::push_back(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  _BYTE *v6;
  __int128 *v7;
  __int128 v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t **p_size;
  int v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t **v19;
  void *v20;
  unint64_t v21;
  char *v22;
  void *v23;
  unint64_t v24;
  char *v25;
  void *exception;
  char *v27;
  _BYTE v28[8];
  uint64_t *v29;
  std::string __p;
  _BYTE v31[8];
  uint64_t *v32;
  _BYTE v33[8];
  __int128 *v34;
  std::string v35;
  std::string v36;

  v5 = *a1 == 1 && a3 == 2;
  if (v5 && (v6 = *(_BYTE **)(a2 + 16), *v6 == 3))
  {
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)v33, (uint64_t)v6, *(_BYTE *)(a2 + 24));
    if (v33[0] != 3 || (v7 = v34) == 0)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      if (v33[0] > 9uLL)
        v27 = "number";
      else
        v27 = off_25083C060[v33[0]];
      std::string::basic_string[abi:ne180100]<0>(&v35, v27);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, "incompatible ReferenceType for get_ref, actual type is ", &v35);
      nlohmann::detail::type_error::create((uint64_t)exception, 303, (uint64_t)&v36);
    }
    nlohmann::detail::json_ref<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::moved_or_copied((uint64_t)v28, *(_QWORD *)(a2 + 48), *(_BYTE *)(a2 + 56));
    v8 = *v7;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = 0;
    v9 = v28[0];
    v31[0] = v28[0];
    v32 = v29;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
    v28[0] = 0;
    v29 = 0;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    if (*a1)
    {
      if (*a1 != 1)
      {
        v23 = __cxa_allocate_exception(0x20uLL);
        v24 = *a1;
        if (v24 > 9)
          v25 = "number";
        else
          v25 = off_25083C060[v24];
        std::string::basic_string[abi:ne180100]<0>(&v35, v25);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, "cannot use push_back() with ", &v35);
        nlohmann::detail::type_error::create((uint64_t)v23, 308, (uint64_t)&v36);
      }
    }
    else
    {
      *a1 = 1;
      v10 = operator new(0x18uLL);
      v10[2] = 0;
      v10[1] = 0;
      *v10 = v10 + 1;
      *((_QWORD *)a1 + 1) = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    }
    v17 = (uint64_t **)*((_QWORD *)a1 + 1);
    v18 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)v17, &v35, &__p);
    if (!*v18)
    {
      v19 = v18;
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>> const&>((uint64_t)&v36, (uint64_t)v17, (uint64_t)&__p);
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(v17, (uint64_t)v35.__r_.__value_.__l.__data_, v19, (uint64_t *)v36.__r_.__value_.__l.__data_);
      v36.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t *)&v36);
    }
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v32, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v28);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v29, v28[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v33);
    v16 = v33[0];
    p_size = (uint64_t **)&v34;
  }
  else
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&v35, a2, a3);
    if (*a1)
    {
      if (*a1 != 2)
      {
        v20 = __cxa_allocate_exception(0x20uLL);
        v21 = *a1;
        if (v21 > 9)
          v22 = "number";
        else
          v22 = off_25083C060[v21];
        std::string::basic_string[abi:ne180100]<0>(&v36, v22);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "cannot use push_back() with ", &v36);
        nlohmann::detail::type_error::create((uint64_t)v20, 308, (uint64_t)&__p);
      }
    }
    else
    {
      *a1 = 2;
      v11 = operator new(0x18uLL);
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      *((_QWORD *)a1 + 1) = v11;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)a1);
    }
    v12 = (uint64_t *)*((_QWORD *)a1 + 1);
    v13 = v12[1];
    if (v13 >= v12[2])
    {
      v14 = std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v12, (uint64_t)&v35);
    }
    else
    {
      *(_BYTE *)v13 = v35.__r_.__value_.__s.__data_[0];
      *(_QWORD *)(v13 + 8) = v35.__r_.__value_.__l.__size_;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
      v35.__r_.__value_.__s.__data_[0] = 0;
      v35.__r_.__value_.__l.__size_ = 0;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(v13);
      v14 = v13 + 16;
    }
    v12[1] = v14;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35);
    p_size = (uint64_t **)&v35.__r_.__value_.__l.__size_;
    v16 = v35.__r_.__value_.__s.__data_[0];
  }
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(p_size, v16);
}

void sub_236CA9DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;
  uint64_t v29;

  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  if (a27 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[11],char [11],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CA9FA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CAA018(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[10],char [10],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "Reference");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CAA084(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CAA0F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::~pair(uint64_t a1)
{
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1 + 24);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(a1 + 32), *(unsigned __int8 *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[8],char [8],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CAA1B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CAA224(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[17],char [17],0>(uint64_t a1, char *a2)
{
  _QWORD *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v4 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v4, a2);
  *(_QWORD *)(a1 + 8) = v4;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CAA298(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void adm::vp::convert(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  int v22;
  __int128 v23;
  _DWORD *v24;
  _DWORD *v25;
  __int128 v26;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *a1 = *(_DWORD *)a2 != 0;
  a1[1] = (unint64_t)(v4 - v5) >> 6;
  bzero(a1 + 2, 0x388uLL);
  a1[229] = *(_DWORD *)(a2 + 56);
  v6 = *(const void **)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40) == (_QWORD)v6;
  v8 = (uint64_t)(*(_QWORD *)(a2 + 40) - (_QWORD)v6) >> 2;
  a1[228] = v8;
  if (!v7)
  {
    if (v8 <= 1)
      v8 = 1;
    memcpy(a1 + 212, v6, 4 * v8);
  }
  if (v5 != v4)
  {
    v9 = 0;
    v10 = a1 + 10;
    v11 = a1 + 5;
    v12 = a1 + 62;
    v13 = a1 + 61;
    do
    {
      if (*(_BYTE *)(v5 + 60))
        v14 = *(_DWORD *)(v5 + 56);
      else
        v14 = 0;
      v16 = *(int **)(v5 + 8);
      v15 = *(int **)(v5 + 16);
      v17 = *(_QWORD *)(v5 + 32);
      v18 = *(_QWORD *)(v5 + 40);
      v19 = &a1[70 * v9];
      v19[2] = 1;
      v19 += 2;
      *(_OWORD *)(v19 + 3) = 0uLL;
      *(_OWORD *)(v19 + 7) = 0uLL;
      *(_OWORD *)(v19 + 11) = 0uLL;
      *(_OWORD *)(v19 + 15) = 0uLL;
      *(_OWORD *)(v19 + 19) = 0uLL;
      *(_OWORD *)(v19 + 23) = 0uLL;
      *(_OWORD *)(v19 + 27) = 0uLL;
      *(_OWORD *)(v19 + 31) = 0uLL;
      *(_OWORD *)(v19 + 35) = 0uLL;
      *(_OWORD *)(v19 + 39) = 0uLL;
      *(_OWORD *)(v19 + 43) = 0uLL;
      *(_OWORD *)(v19 + 47) = 0uLL;
      *(_OWORD *)(v19 + 51) = 0uLL;
      *(_OWORD *)(v19 + 54) = 0uLL;
      v19[58] = -1431655765 * ((unint64_t)(v18 - v17) >> 4);
      *(_OWORD *)(v19 + 59) = 0uLL;
      *(_OWORD *)(v19 + 63) = 0uLL;
      *(_OWORD *)(v19 + 66) = 0uLL;
      v20 = v11;
      v21 = v10;
      v19[1] = v14;
      for (v19[2] = -1431655765 * ((unint64_t)((char *)v15 - (char *)v16) >> 4); v16 != v15; v16 += 12)
      {
        v22 = *v16;
        if ((*v16 - 1) >= 4)
          v22 = 0;
        *v20++ = v22;
        *((_QWORD *)v21 + 4) = *((_QWORD *)v16 + 5);
        v23 = *(_OWORD *)(v16 + 6);
        *(_OWORD *)v21 = *(_OWORD *)(v16 + 2);
        *((_OWORD *)v21 + 1) = v23;
        v21 += 10;
      }
      v24 = v13;
      v25 = v12;
      while (v17 != v18)
      {
        *v24++ = 5;
        v26 = *(_OWORD *)(v17 + 24);
        *(_OWORD *)v25 = *(_OWORD *)(v17 + 8);
        *((_OWORD *)v25 + 1) = v26;
        *((_QWORD *)v25 + 4) = *(_QWORD *)(v17 + 40);
        v17 += 48;
        v25 += 10;
      }
      ++v9;
      v5 += 64;
      v10 += 70;
      v11 += 70;
      v12 += 70;
      v13 += 70;
    }
    while (v5 != v4);
  }
}

void adm::dsp::GraphMacroGenerator::generateBusSemanticFormatMacros(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  void **v8;
  char *v9;
  void **v10;
  char *v11;
  void **v12;
  void *__p[2];
  char v14;
  std::string v15;
  void **v16;

  std::to_string(&v15, *(double *)a3);
  std::operator+<char>();
  v16 = __p;
  v7 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (__int128 **)&v16);
  v8 = (void **)(v7 + 40);
  if (v7[63] < 0)
    operator delete(*v8);
  *(std::string *)v8 = v15;
  *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
  v15.__r_.__value_.__s.__data_[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  std::to_string(&v15, *(_DWORD *)(a3 + 28));
  std::operator+<char>();
  v16 = __p;
  v9 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (__int128 **)&v16);
  v10 = (void **)(v9 + 40);
  if (v9[63] < 0)
    operator delete(*v10);
  *(std::string *)v10 = v15;
  *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
  v15.__r_.__value_.__s.__data_[0] = 0;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    std::to_string(&v15, a4);
    std::operator+<char>();
    v16 = __p;
    v11 = (char *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (__int128 **)&v16);
    v12 = (void **)(v11 + 40);
    if (v11[63] < 0)
      operator delete(*v12);
    *(std::string *)v12 = v15;
    *((_BYTE *)&v15.__r_.__value_.__s + 23) = 0;
    v15.__r_.__value_.__s.__data_[0] = 0;
    if (v14 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  _QWORD *v15;
  __int128 *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v28[2];
  char v29;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  i = operator new(0x40uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  v16 = *a3;
  v17 = **a3;
  *((_QWORD *)i + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 2) = 0;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)i + 6) = 0;
  *((_QWORD *)i + 7) = 0;
  *((_QWORD *)i + 5) = 0;
  v29 = 1;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_38:
    *v25 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v15;
  *v15 = i;
  *(_QWORD *)(v24 + 8 * v3) = v15;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_236CAA8B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void adm::dsp::GraphMacroGenerator::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v29[2];
  char v30;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 2));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v5 + 16))
                goto LABEL_47;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x40uLL);
      v16 = v15;
      v29[0] = v15;
      v29[1] = a1 + 16;
      v30 = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      if (*((char *)v5 + 39) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v15 + 16), (const std::string::value_type *)v5[2], v5[3]);
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        *((_QWORD *)v15 + 4) = v5[4];
        *((_OWORD *)v15 + 1) = v17;
      }
      v18 = (std::string *)(v16 + 5);
      if (*((char *)v5 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)v5[5], v5[6]);
      }
      else
      {
        v19 = *(_OWORD *)(v5 + 5);
        v16[7] = v5[7];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      }
      v30 = 1;
      v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v21 = *(float *)(a1 + 32);
      if (!v9 || (float)(v21 * (float)v9) < v20)
      {
        v22 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v22 = 1;
        v23 = v22 | (2 * v9);
        v24 = vcvtps_u32_f32(v20 / v21);
        if (v23 <= v24)
          v25 = v24;
        else
          v25 = v23;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v25);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v26 = *(_QWORD *)a1;
      v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v27)
      {
        *v16 = *v27;
      }
      else
      {
        *v16 = *v6;
        *v6 = v16;
        *(_QWORD *)(v26 + 8 * v2) = v6;
        if (!*v16)
          goto LABEL_46;
        v28 = *(_QWORD *)(*v16 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v28 >= v9)
            v28 %= v9;
        }
        else
        {
          v28 &= v9 - 1;
        }
        v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
      }
      *v27 = v16;
LABEL_46:
      v29[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
LABEL_47:
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
}

void sub_236CAABB4(void *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  __clang_call_terminate(a1);
}

void adm::LoadSystemConfiguration(adm *this)
{
  int v1;
  NSObject *adm_log_object;
  unsigned int v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const __CFString *v8;
  CFMutableStringRef MutableCopy;
  const __CFString *v10;
  NSObject *v11;
  std::string *p_p;
  NSObject *v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v18;
  std::string::size_type v19;
  int v20;
  const __CFDictionary *v23;
  std::string *v24;
  CFIndex v25;
  CFStringRef v26;
  int v27;
  const __CFDictionary *v28;
  std::string *v29;
  CFIndex v30;
  CFStringRef v31;
  uint64_t Value;
  int v33;
  char v34;
  NSObject *v35;
  NSObject *v36;
  int v37;
  int v38;
  int v39;
  std::string *v40;
  std::string *v41;
  std::string::size_type v42;
  char v43;
  std::string *v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  char v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  char *v53;
  NSObject *v54;
  std::string *v55;
  NSObject *v56;
  std::__fs::filesystem::path *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  std::string *v61;
  NSObject *v62;
  std::string *v63;
  NSObject *v64;
  __int128 *v65;
  NSObject *v66;
  char *v67;
  NSObject *v68;
  std::string *v69;
  std::__fs::filesystem::path *v70;
  std::string *v71;
  NSObject *v72;
  std::string *v73;
  std::runtime_error *exception;
  std::runtime_error *v75;
  std::runtime_error *v76;
  std::runtime_error *v77;
  std::string v79;
  std::string v80;
  uint64_t v81;
  std::string v82;
  char v83;
  std::string __p;
  char v85;
  std::__fs::filesystem::path v86;
  std::__fs::filesystem::path v87;
  CFDictionaryRef v88;
  char v89;
  std::error_code __ec;
  std::string v91;
  std::string v92;
  std::__fs::filesystem::path v93;
  std::string v94;
  std::string cf;
  char v96;
  _BYTE buf[32];
  std::string v98;
  int __val[2];
  std::string v100;
  char v101;
  std::string v102;
  char v103;
  unsigned int v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  int v111;
  std::string v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  memset(&v79, 0, sizeof(v79));
  std::__fs::filesystem::path::path[abi:ne180100]<char [24],void>(&v80, (std::string *)"/Library/Audio/Tunings/");
  if (MGIsQuestionValid() && (v1 = MGGetSInt32Answer()) != 0)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v1;
      _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "Found device acousticID = %d", buf, 8u);
    }
    v3 = v1 & 0xFFFFFF00;
    v4 = v1;
    v5 = 0x100000000;
  }
  else
  {
    v6 = get_adm_log_object();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_236C84000, v6, OS_LOG_TYPE_DEFAULT, "An acousticID was not found on this device", buf, 2u);
    }
    v3 = 0;
    v4 = 0;
    v5 = 0;
  }
  v81 = v5 | v4 | v3;
  v82.__r_.__value_.__s.__data_[0] = 0;
  v83 = 0;
  v7 = get_adm_log_object();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_236C84000, v7, OS_LOG_TYPE_DEFAULT, "A macBoardID was not found on this device", buf, 2u);
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  v85 = 0;
  if (!MGIsQuestionValid())
    goto LABEL_36;
  v8 = (const __CFString *)MGGetStringAnswer();
  if (!v8)
    goto LABEL_36;
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v8);
  CFRelease(v8);
  if (CFStringHasSuffix(MutableCopy, CFSTR("AP")))
  {
    v10 = CFSTR("AP");
  }
  else if (CFStringHasSuffix(MutableCopy, CFSTR("DEV")))
  {
    v10 = CFSTR("DEV");
  }
  else if (CFStringHasSuffix(MutableCopy, CFSTR("ap")))
  {
    v10 = CFSTR("ap");
  }
  else
  {
    if (!CFStringHasSuffix(MutableCopy, CFSTR("dev")))
      goto LABEL_22;
    v10 = CFSTR("dev");
  }
  CFStringTrim(MutableCopy, v10);
LABEL_22:
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, MutableCopy);
  if (!cf.__r_.__value_.__r.__words[0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)cf.__r_.__value_.__l.__data_);
  if (v85)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)buf;
    buf[23] = 0;
    buf[0] = 0;
  }
  else
  {
    __p = *(std::string *)buf;
    memset(buf, 0, 24);
    v85 = 1;
  }
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  v11 = get_adm_log_object();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = p_p;
    _os_log_impl(&dword_236C84000, v11, OS_LOG_TYPE_DEFAULT, "Found HW Model Name = %s", buf, 0xCu);
  }
  if (!v85)
  {
LABEL_36:
    v13 = get_adm_log_object();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_236C84000, v13, OS_LOG_TYPE_DEFAULT, "A HW Model Name was not found on this device", buf, 2u);
    }
  }
  *(_DWORD *)buf = 0;
  memset(&buf[8], 0, 24);
  std::__fs::filesystem::path::path[abi:ne180100]<char [24],void>(&v98, (std::string *)"/Library/Audio/Tunings/");
  LOBYTE(__val[0]) = 0;
  LOBYTE(__val[1]) = 0;
  v100.__r_.__value_.__s.__data_[0] = 0;
  v101 = 0;
  v102.__r_.__value_.__s.__data_[0] = 0;
  v103 = 0;
  LOBYTE(v104) = 0;
  v105 = 0;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 1065353216;
  __ec.__val_ = 0;
  __ec.__cat_ = std::system_category();
  if (v83)
  {
    size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v82.__r_.__value_.__l.__size_;
    if (size != 20)
      goto LABEL_59;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v82;
    else
      v15 = (std::string *)v82.__r_.__value_.__r.__words[0];
    if (v15->__r_.__value_.__r.__words[0] == 0x353941412D63614DLL
      && v15->__r_.__value_.__l.__size_ == 0x3732424144443142
      && LODWORD(v15->__r_.__value_.__r.__words[2]) == 892944952)
    {
      v33 = 0;
      v34 = 1;
      LOBYTE(Value) = 15;
    }
    else
    {
      v18 = v15->__r_.__value_.__r.__words[0];
      v19 = v15->__r_.__value_.__l.__size_;
      v20 = v15->__r_.__value_.__r.__words[2];
      if (v18 != 0x303033362D63614DLL || v19 != 0x3341374538393631 || v20 != 875640884)
      {
LABEL_59:
        if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(cf.__r_.__value_.__l.__data_);
        if (!v112.__r_.__value_.__s.__data_[8])
          goto LABEL_82;
        v23 = (const __CFDictionary *)v112.__r_.__value_.__r.__words[0];
        if (!v112.__r_.__value_.__r.__words[0]
          || ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (v24 = &v82)
            : (v24 = (std::string *)v82.__r_.__value_.__r.__words[0]),
              (v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (v25 = HIBYTE(v82.__r_.__value_.__r.__words[2]))
            : (v25 = v82.__r_.__value_.__l.__size_),
              v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0),
              (cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v26) == 0))
        {
          v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v75, "Could not construct");
          __cxa_throw(v75, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v27 = CFDictionaryContainsKey(v23, v26);
        CFRelease(v26);
        if (v27)
        {
          v28 = (const __CFDictionary *)v112.__r_.__value_.__r.__words[0];
          if (!v112.__r_.__value_.__r.__words[0])
          {
            v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v76, "Could not construct");
            __cxa_throw(v76, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = &v82;
          else
            v29 = (std::string *)v82.__r_.__value_.__r.__words[0];
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
          else
            v30 = v82.__r_.__value_.__l.__size_;
          v31 = CFStringCreateWithBytes(0, (const UInt8 *)v29, v30, 0x8000100u, 0);
          if (!v31)
          {
            v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v77, "Could not construct");
            __cxa_throw(v77, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          Value = (uint64_t)CFDictionaryGetValue(v28, v31);
          CFRelease(v31);
          if (Value)
            Value = applesauce::CF::convert_as<unsigned int,0>((const __CFNumber *)Value);
          v33 = Value & 0xFFFFFF00;
          v34 = BYTE4(Value) & 1;
        }
        else
        {
LABEL_82:
          v35 = get_adm_log_object();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            LODWORD(cf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)cf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"/System/Library/Components/AudioDSP.component/Contents/Resources/Tunings/vp_platform_info.plist";
            _os_log_error_impl(&dword_236C84000, v35, OS_LOG_TYPE_ERROR, "Device boardID not presented in vp_platform_info plist at path: %s", (uint8_t *)&cf, 0xCu);
          }
          v34 = 0;
          LOBYTE(Value) = 0;
          v33 = 0;
        }
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v112);
        goto LABEL_88;
      }
      v33 = 0;
      v34 = 1;
      LOBYTE(Value) = 16;
    }
LABEL_88:
    v105 = v34;
    v104 = v33 & 0xFFFFFF00 | Value;
  }
  v36 = get_adm_log_object();
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    v37 = BYTE4(v81);
    v38 = v81;
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&cf, (uint64_t)&v82, (char *)&unk_236CE4E1D);
    v39 = v37 ? v38 : 0;
    v40 = (cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &cf
        : (std::string *)cf.__r_.__value_.__r.__words[0];
    LODWORD(v112.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(v112.__r_.__value_.__r.__words[0]) = v39;
    LOWORD(v112.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v112.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v40;
    _os_log_impl(&dword_236C84000, v36, OS_LOG_TYPE_DEFAULT, "Loading configuration file for acousticID=%d, macBoardID='%s'", (uint8_t *)&v112, 0x12u);
    if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(cf.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)buf = 0;
  std::string::operator=((std::string *)&buf[8], &v79);
  std::string::operator=(&v98, &v80);
  __val[0] = v81;
  LOBYTE(__val[1]) = BYTE4(v81);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v100, &v82);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(&v102, &__p);
  if ((*(_QWORD *)__val & 0xFF00000000) != 0)
  {
    std::to_string(&v112, __val[0]);
    v41 = std::string::insert(&v112, 0, "AID", 3uLL);
    v42 = v41->__r_.__value_.__r.__words[0];
    v94.__r_.__value_.__r.__words[0] = v41->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
    v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    *(std::string::size_type *)((char *)&cf.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v94.__r_.__value_.__r.__words + 7);
    cf.__r_.__value_.__r.__words[0] = v42;
    cf.__r_.__value_.__l.__size_ = v94.__r_.__value_.__r.__words[0];
    *((_BYTE *)&cf.__r_.__value_.__s + 23) = v43;
    v96 = 1;
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
  }
  else
  {
    if (v103)
      v44 = &v102;
    else
      v44 = &v100;
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&cf, (__int128 *)v44);
  }
  if (v96)
    std::string::operator=((std::string *)&v106, &cf);
  if ((buf[31] & 0x80000000) != 0)
    std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)&buf[8], *(std::string::size_type *)&buf[16]);
  else
    v112 = *(std::string *)&buf[8];
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v94, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v94 = v98;
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v94;
  else
    v45 = (std::string *)v94.__r_.__value_.__r.__words[0];
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  else
    v46 = v94.__r_.__value_.__l.__size_;
  v47 = std::string::append(&v112, (const std::string::value_type *)v45, v46);
  v48 = v47->__r_.__value_.__r.__words[0];
  v93.__pn_.__r_.__value_.__r.__words[0] = v47->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v93.__pn_.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7);
  v49 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v108) < 0)
    operator delete(*((void **)&v107 + 1));
  *((_QWORD *)&v107 + 1) = v48;
  *(_QWORD *)&v108 = v93.__pn_.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)&v108 + 7) = *(std::string::size_type *)((char *)v93.__pn_.__r_.__value_.__r.__words + 7);
  HIBYTE(v108) = v49;
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)((char *)&v107 + 8), &__ec);
  if (!v112.__r_.__value_.__s.__data_[0]
    || (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), v112.__r_.__value_.__s.__data_[0] == 255)
    || !v112.__r_.__value_.__s.__data_[0])
  {
    v50 = get_adm_log_object();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      if (v108 >= 0)
        v53 = (char *)&v107 + 8;
      else
        v53 = (char *)*((_QWORD *)&v107 + 1);
      LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
      _os_log_error_impl(&dword_236C84000, v50, OS_LOG_TYPE_ERROR, "Root tuning directory not found: %s", (uint8_t *)&v112, 0xCu);
    }
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 224) = 0;
    goto LABEL_130;
  }
  v51 = get_adm_log_object();
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v112.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_236C84000, v51, OS_LOG_TYPE_DEFAULT, "Loading generic configuration file", (uint8_t *)&v112, 2u);
  }
  memset(&v112, 0, sizeof(v112));
  std::string::append[abi:ne180100]<char const*,0>(&v112, (std::string *)"Generic", (std::string *)"");
  std::__fs::filesystem::operator/[abi:ne180100](&v94, (uint64_t)&v107 + 8, (std::__fs::filesystem::path *)&v112);
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v112.__r_.__value_.__l.__data_);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v94, &__ec);
  if (v112.__r_.__value_.__s.__data_[0])
  {
    __ec.__val_ = 0;
    __ec.__cat_ = std::system_category();
    if (v112.__r_.__value_.__s.__data_[0] != 255)
    {
      if (v112.__r_.__value_.__s.__data_[0])
      {
        std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v92);
        std::__fs::filesystem::operator/[abi:ne180100](&v112, (uint64_t)&v94, (std::__fs::filesystem::path *)&v92);
        std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&v91);
        std::__fs::filesystem::operator/[abi:ne180100](&v93.__pn_, (uint64_t)&v112, (std::__fs::filesystem::path *)&v91);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        std::__fs::filesystem::__status(&v93, &__ec);
        if (!v112.__r_.__value_.__s.__data_[0]
          || (__ec.__val_ = 0,
              __ec.__cat_ = std::system_category(),
              v112.__r_.__value_.__s.__data_[0] == 255)
          || !v112.__r_.__value_.__s.__data_[0])
        {
          v54 = get_adm_log_object();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            v57 = &v93;
            if ((v93.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v57 = (std::__fs::filesystem::path *)v93.__pn_.__r_.__value_.__r.__words[0];
            LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
            _os_log_error_impl(&dword_236C84000, v54, OS_LOG_TYPE_ERROR, "Generic config file not found: %s", (uint8_t *)&v112, 0xCu);
          }
          *(_BYTE *)this = 0;
          *((_BYTE *)this + 224) = 0;
          goto LABEL_233;
        }
        if (!v89)
        {
          v56 = get_adm_log_object();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            v70 = &v93;
            if ((v93.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v70 = (std::__fs::filesystem::path *)v93.__pn_.__r_.__value_.__r.__words[0];
            LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v70;
            _os_log_error_impl(&dword_236C84000, v56, OS_LOG_TYPE_ERROR, "Failed to load generic config file: %s", (uint8_t *)&v112, 0xCu);
          }
          *(_BYTE *)this = 0;
          *((_BYTE *)this + 224) = 0;
          goto LABEL_232;
        }
        std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v92);
        std::__fs::filesystem::operator/[abi:ne180100](&v112, (uint64_t)&v94, (std::__fs::filesystem::path *)&v92);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (v96)
        {
          std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v92, (std::string *)&v106);
          std::__fs::filesystem::operator/[abi:ne180100](&v112, (uint64_t)&v107 + 8, (std::__fs::filesystem::path *)&v92);
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v92.__r_.__value_.__l.__data_);
          std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v112, &__ec);
          if (v92.__r_.__value_.__s.__data_[0]
            && (__ec.__val_ = 0, __ec.__cat_ = std::system_category(), v92.__r_.__value_.__s.__data_[0])
            && v92.__r_.__value_.__s.__data_[0] != 255)
          {
            std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v87.__pn_);
            std::__fs::filesystem::operator/[abi:ne180100](&v91, (uint64_t)&v112, &v87);
            std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(&v86.__pn_);
            std::__fs::filesystem::operator/[abi:ne180100](&v92, (uint64_t)&v91, &v86);
            if (SHIBYTE(v86.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__pn_.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v91.__r_.__value_.__l.__data_);
            if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v87.__pn_.__r_.__value_.__l.__data_);
            if (std::__fs::filesystem::exists[abi:ne180100]((const std::__fs::filesystem::path *)&v92, &__ec))
            {
              if (!v86.__pn_.__r_.__value_.__s.__data_[8])
              {
                v72 = get_adm_log_object();
                if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
                {
                  v73 = &v92;
                  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v73 = (std::string *)v92.__r_.__value_.__r.__words[0];
                  LODWORD(v91.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
                  _os_log_error_impl(&dword_236C84000, v72, OS_LOG_TYPE_ERROR, "Failed to load device specific config file: %s", (uint8_t *)&v91, 0xCu);
                }
                *(_BYTE *)this = 0;
                *((_BYTE *)this + 224) = 0;
                std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
                if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v92.__r_.__value_.__l.__data_);
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v112.__r_.__value_.__l.__data_);
                goto LABEL_232;
              }
              std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(&v87.__pn_);
              std::__fs::filesystem::operator/[abi:ne180100](&v91, (uint64_t)&v112, &v87);
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v91.__r_.__value_.__l.__data_);
              if (SHIBYTE(v87.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v87.__pn_.__r_.__value_.__l.__data_);
              std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
            }
            else
            {
              v68 = get_adm_log_object();
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                v69 = &v92;
                if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v69 = (std::string *)v92.__r_.__value_.__r.__words[0];
                LODWORD(v91.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v91.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
                _os_log_impl(&dword_236C84000, v68, OS_LOG_TYPE_DEFAULT, "Device specific config file not found: %s", (uint8_t *)&v91, 0xCu);
              }
            }
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v92.__r_.__value_.__l.__data_);
          }
          else
          {
            v58 = get_adm_log_object();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            {
              v71 = &v112;
              if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v71 = (std::string *)v112.__r_.__value_.__r.__words[0];
              LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v71;
              _os_log_error_impl(&dword_236C84000, v58, OS_LOG_TYPE_ERROR, "Device tuning directory not found: %s", (uint8_t *)&v92, 0xCu);
            }
          }
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
        }
        v59 = get_adm_log_object();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v112.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_236C84000, v59, OS_LOG_TYPE_DEFAULT, "SystemConfiguration:", (uint8_t *)&v112, 2u);
        }
        v60 = get_adm_log_object();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          if (LOBYTE(__val[1]))
          {
            std::to_string(&v112, __val[0]);
            if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v61 = &v112;
            else
              v61 = (std::string *)v112.__r_.__value_.__r.__words[0];
            LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v61;
            _os_log_impl(&dword_236C84000, v60, OS_LOG_TYPE_DEFAULT, "- AcousticID: %s", (uint8_t *)&v92, 0xCu);
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
          }
          else
          {
            LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)&unk_236CE4E1D;
            _os_log_impl(&dword_236C84000, v60, OS_LOG_TYPE_DEFAULT, "- AcousticID: %s", (uint8_t *)&v92, 0xCu);
          }
        }
        v62 = get_adm_log_object();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v112, (uint64_t)&v100, (char *)&unk_236CE4E1D);
          v63 = (v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v112
              : (std::string *)v112.__r_.__value_.__r.__words[0];
          LODWORD(v92.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v92.__r_.__value_.__r.__words + 4) = (std::string::size_type)v63;
          _os_log_impl(&dword_236C84000, v62, OS_LOG_TYPE_DEFAULT, "- MacBoardID: %s", (uint8_t *)&v92, 0xCu);
          if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v112.__r_.__value_.__l.__data_);
        }
        v64 = get_adm_log_object();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          if ((SBYTE7(v107) & 0x80u) == 0)
            v65 = &v106;
          else
            v65 = (__int128 *)v106;
          LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v65;
          _os_log_impl(&dword_236C84000, v64, OS_LOG_TYPE_DEFAULT, "- HWIdentifier: %s", (uint8_t *)&v112, 0xCu);
        }
        v66 = get_adm_log_object();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          if (v108 >= 0)
            v67 = (char *)&v107 + 8;
          else
            v67 = (char *)*((_QWORD *)&v107 + 1);
          LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
          _os_log_impl(&dword_236C84000, v66, OS_LOG_TYPE_DEFAULT, "- TuningRootDirectory: %s", (uint8_t *)&v112, 0xCu);
        }
        std::__optional_destruct_base<adm::SystemConfiguration,false>::__optional_destruct_base[abi:ne180100]<adm::SystemConfiguration>((uint64_t)this, (uint64_t)buf);
LABEL_232:
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v88);
LABEL_233:
        if (SHIBYTE(v93.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__pn_.__r_.__value_.__l.__data_);
        goto LABEL_153;
      }
    }
  }
  v52 = get_adm_log_object();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    v55 = &v94;
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v55 = (std::string *)v94.__r_.__value_.__r.__words[0];
    LODWORD(v112.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v112.__r_.__value_.__r.__words + 4) = (std::string::size_type)v55;
    _os_log_error_impl(&dword_236C84000, v52, OS_LOG_TYPE_ERROR, "Generic tuning directory not found: %s", (uint8_t *)&v112, 0xCu);
  }
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 224) = 0;
LABEL_153:
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
LABEL_130:
  if (v96 && SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(cf.__r_.__value_.__l.__data_);
  adm::SystemConfiguration::~SystemConfiguration((void **)buf);
  if (v85 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v83 && SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
}

void sub_236CABF3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  return this;
}

void sub_236CAC118(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v8;
  std::runtime_error *exception;
  CFIndex maxBufLen;
  CFRange v11;
  CFRange v12;

  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, CStringPtr);
  Length = CFStringGetLength(a2);
  maxBufLen = 0;
  v11.location = 0;
  v11.length = Length;
  CFStringGetBytes(a2, v11, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a1, maxBufLen, 0);
  if (*(char *)(a1 + 23) >= 0)
    v8 = (UInt8 *)a1;
  else
    v8 = *(UInt8 **)a1;
  v12.location = 0;
  v12.length = Length;
  return (_QWORD *)CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, v8, maxBufLen, &maxBufLen);
}

void sub_236CAC26C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, std::string **a2)
{
  std::string *v3;
  std::string *v4;
  int v5;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = (std::string *)((char *)v3 - 1);
  do
  {
    v5 = v4->__r_.__value_.__s.__data_[1];
    v4 = (std::string *)((char *)v4 + 1);
  }
  while (v5);
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_236CAC2D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void adm::`anonymous namespace'::LoadPlist(adm::_anonymous_namespace_ *this, const std::__fs::filesystem::path *a2)
{
  CFDataRef v3;
  CFDataRef v4;
  uint64_t v5;
  std::string pn;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    pn = a2->__pn_;
  applesauce::CF::make_DataRef(&v4, (uint64_t)&pn);
  v3 = v4;
  applesauce::CF::make_DictionaryRef((applesauce::CF::DictionaryRef *)&v5, v4);
  *(_QWORD *)this = v5;
  v5 = 0;
  *((_BYTE *)this + 8) = 1;
  if (v3)
    CFRelease(v3);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
}

void sub_236CAC3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  _BYTE *v11;
  uint64_t *v12;
  void *v14;
  NSObject *adm_log_object;
  _BOOL4 v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t *v21;

  if (!a2)
    _Unwind_Resume(a1);
  v14 = __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  v16 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (a2 == 2)
  {
    if (v16)
    {
      if (*((char *)v12 + 23) < 0)
        v12 = (uint64_t *)*v12;
      v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = v12;
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v17;
      v18 = "failed to load plist %s: %s";
      v19 = adm_log_object;
      v20 = 22;
      goto LABEL_14;
    }
  }
  else if (v16)
  {
    if (*((char *)v12 + 23) >= 0)
      v21 = v12;
    else
      v21 = (uint64_t *)*v12;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v21;
    v18 = "failed to load plist %s";
    v19 = adm_log_object;
    v20 = 12;
LABEL_14:
    _os_log_error_impl(&dword_236C84000, v19, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&buf, v20);
  }
  __cxa_end_catch();
  *v11 = 0;
  v11[8] = 0;
  JUMPOUT(0x236CAC398);
}

uint64_t std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

std::string *std::__fs::filesystem::operator/[abi:ne180100](std::string *this, uint64_t a2, std::__fs::filesystem::path *a3)
{
  int v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type size;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    *this = *(std::string *)a2;
  if (std::__fs::filesystem::path::__root_directory(a3).__size_)
    return std::string::operator=(this, &a3->__pn_);
  if (std::__fs::filesystem::path::__filename((const std::__fs::filesystem::path *)this).__size_)
    std::string::push_back(this, 47);
  v6 = SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = (std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]);
  else
    size = a3->__pn_.__r_.__value_.__l.__size_;
  return std::string::append(this, (const std::string::value_type *)v7, size);
}

void sub_236CAC5E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [4],void>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, (std::string *)"ADM", (std::string *)"");
  return a1;
}

void sub_236CAC63C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>(std::string *a1)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, (std::string *)"config.plist", (std::string *)"");
  return a1;
}

void sub_236CAC690(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void adm::`anonymous namespace'::AddDSPConfiguration(adm::_anonymous_namespace_ *this, CFDictionaryRef *a2, std::string::size_type *a3, std::__fs::filesystem::path *a4, const std::__fs::filesystem::path *a5)
{
  char *v8;
  unint64_t v9;
  uint64_t v10;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  std::string::size_type size;
  std::string::pointer v25;
  const void *v27;
  std::string::size_type v28;
  char v29;
  std::string *p_s;
  std::string::size_type v31;
  int v32;
  CFTypeID v34;
  const void *v35;
  const __CFString *v36;
  char *v37;
  char *v38;
  NSObject *adm_log_object;
  char *v40;
  char *v41;
  _QWORD *v42;
  std::string *v43;
  char *v44;
  char *v45;
  void **v46;
  char *v47;
  char *v48;
  std::string *i;
  std::string::size_type v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  std::string *v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  char *v66;
  char *v67;
  std::string *j;
  std::string::size_type v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  std::string *v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  const __CFArray *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t k;
  std::string::size_type v90;
  const __CFDictionary **m;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __int128 v106;
  std::__compressed_pair<std::string *> end_cap;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  int64x2_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  int v117;
  std::runtime_error *v118;
  std::runtime_error *v119;
  std::logic_error *v120;
  std::runtime_error *v121;
  std::runtime_error *v122;
  std::runtime_error *v123;
  std::runtime_error *v124;
  std::runtime_error *v125;
  std::runtime_error *v126;
  std::logic_error *exception;
  std::runtime_error *v128;
  std::runtime_error *v129;
  std::runtime_error *v130;
  std::runtime_error *v131;
  const __CFDictionary *v133;
  CFTypeRef cf;
  const applesauce::CF::DictionaryRef *v135;
  int v136;
  const void *v137;
  CFTypeRef v138;
  const __CFString *v139;
  std::__fs::filesystem::path v140;
  std::string v141;
  char v142;
  CFTypeRef v143;
  std::string v144;
  std::string __s;
  void *v146;
  uint64_t v147;
  _BYTE *v148;
  _BYTE *v149;
  void *v150;
  void *v151;
  std::string key;
  uint64_t v153;
  void *v154;
  void *v155;
  std::string __p;
  void *v157[2];
  char v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  _BYTE *v162;
  void *v163;
  void *v164;
  uint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  std::__split_buffer<std::string> __v;
  uint64_t v172;
  std::string buf;
  uint64_t v174;

  v136 = (int)a5;
  v174 = *MEMORY[0x24BDAC8D0];
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>::DictionaryRef_iterator((uint64_t)&v165, *a2);
  applesauce::CF::DictionaryRef_iterator<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>::DictionaryRef_iterator((uint64_t)&v159, *a2);
  v8 = (char *)this + 184;
  v160 = (v162 - (_BYTE *)v161) >> 3;
  v135 = (const applesauce::CF::DictionaryRef *)a3;
  while (1)
  {
    if (v165 && (v9 = v166, v166 != v168 - v167))
    {
      v10 = v159;
    }
    else
    {
      v10 = v159;
      if (!v159 || v160 == (v162 - (_BYTE *)v161) >> 3)
        break;
      v9 = v166;
    }
    if (v165 == v10 && v9 == v160)
      break;
    if ((v9 & 0x8000000000000000) != 0 || v9 >= v168 - v167)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "DictionaryRef_iterator iterator out of range.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
      __cxa_throw(exception, (struct type_info *)off_25083BA50, MEMORY[0x24BEDAB00]);
    }
    v12 = (const void *)v167[v9];
    if (v12)
    {
      CFRetain((CFTypeRef)v167[v9]);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, v12);
      v9 = v166;
    }
    else
    {
      key.__r_.__value_.__r.__words[0] = 0;
    }
    v13 = (const void *)v169[v9];
    if (v13)
    {
      CFRetain((CFTypeRef)v169[v9]);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v146, v13);
      v133 = (const __CFDictionary *)v146;
    }
    else
    {
      v133 = 0;
    }
    v14 = (const void *)key.__r_.__value_.__r.__words[0];
    if (!key.__r_.__value_.__r.__words[0])
    {
      v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v131, "Could not construct");
      __cxa_throw(v131, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)v157, (const __CFString *)key.__r_.__value_.__l.__data_);
    v137 = v14;
    if (!v133)
    {
      v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v130, "Could not construct");
      __cxa_throw(v130, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v15 = applesauce::CF::details::at_key<char const* const&>(v133, "DSPConfigurations");
    if (!v15)
      goto LABEL_26;
    v16 = v15;
    CFRetain(v15);
    cf = v16;
    v17 = CFGetTypeID(v16);
    if (v17 != CFDictionaryGetTypeID())
    {
      CFRelease(cf);
LABEL_26:
      cf = 0;
      key.__r_.__value_.__s.__data_[0] = 0;
      key.__r_.__value_.__s.__data_[8] = 0;
      goto LABEL_27;
    }
    key.__r_.__value_.__s.__data_[8] = 1;
    key.__r_.__value_.__r.__words[0] = 0;
LABEL_27:
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&key);
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)a3, a4);
    if (!cf)
    {
      v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v129, "Could not construct");
      __cxa_throw(v129, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "FilePathBase");
    v18 = CFDictionaryContainsKey((CFDictionaryRef)cf, key.__r_.__value_.__l.__data_);
    if (key.__r_.__value_.__r.__words[0])
      CFRelease(key.__r_.__value_.__l.__data_);
    if (v18)
    {
      if (*((char *)a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&key, (const std::string::value_type *)*a3, a3[1]);
      else
        key = *(std::string *)a3;
      applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&v146, (const __CFDictionary *)cf, "FilePathBase");
      if (SHIBYTE(v148) >= 0)
        v19 = (const std::string::value_type *)&v146;
      else
        v19 = (const std::string::value_type *)v146;
      if (SHIBYTE(v148) >= 0)
        v20 = HIBYTE(v148);
      else
        v20 = v147;
      v21 = std::string::append(&key, v19, v20);
      v22 = v21->__r_.__value_.__r.__words[0];
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v21->__r_.__value_.__l.__size_;
      *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v22;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)__v.__first_;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&__v.__first_ + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v23;
      if (SHIBYTE(v148) < 0)
        operator delete(v146);
      a3 = (std::string::size_type *)v135;
      if (SHIBYTE(key.__r_.__value_.__r.__words[2]) < 0)
        operator delete(key.__r_.__value_.__l.__data_);
    }
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&key, (CFDictionaryRef)cf);
    applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator((uint64_t)&v146, (CFDictionaryRef)cf);
    v147 = (v149 - v148) >> 3;
    while (1)
    {
      if (key.__r_.__value_.__r.__words[0]
        && (size = key.__r_.__value_.__l.__size_,
            key.__r_.__value_.__l.__size_ != (int64_t)(v153 - key.__r_.__value_.__r.__words[2]) >> 3))
      {
        v25 = (std::string::pointer)v146;
      }
      else
      {
        v25 = (std::string::pointer)v146;
        if (!v146 || v147 == (v149 - v148) >> 3)
          break;
        size = key.__r_.__value_.__l.__size_;
      }
      if (key.__r_.__value_.__l.__data_ == v25 && size == v147)
        break;
      if ((size & 0x8000000000000000) != 0 || size >= (int64_t)(v153 - key.__r_.__value_.__r.__words[2]) >> 3)
      {
        v120 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v120, "DictionaryRef_iterator iterator out of range.");
        v120->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v120, (struct type_info *)off_25083BA50, MEMORY[0x24BEDAB00]);
      }
      v139 = *(const __CFString **)(key.__r_.__value_.__r.__words[2] + 8 * size);
      if (v139)
      {
        CFRetain(v139);
        size = key.__r_.__value_.__l.__size_;
      }
      v27 = (const void *)*((_QWORD *)v154 + size);
      if (v27)
        CFRetain(*((CFTypeRef *)v154 + size));
      v138 = v27;
      if (!v139)
      {
        v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v121, "Could not construct");
        __cxa_throw(v121, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__s, v139);
      v28 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      v29 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = __s.__r_.__value_.__l.__size_;
      if (v28 != 12)
        goto LABEL_73;
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s = &__s;
      v31 = p_s->__r_.__value_.__r.__words[0];
      v32 = p_s->__r_.__value_.__r.__words[1];
      if (v31 != 0x68746150656C6946 || v32 != 1702060354)
      {
LABEL_73:
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v144, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        else
          v144 = __s;
        if (v27)
        {
          v34 = CFGetTypeID(v27);
          if (v34 != CFDictionaryGetTypeID())
          {
            v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v126, "Could not construct");
            __cxa_throw(v126, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          CFRetain(v138);
          v35 = v138;
        }
        else
        {
          v35 = 0;
        }
        applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v143, v35);
        if (!v143)
        {
          v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v122, "Could not construct");
          __cxa_throw(v122, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v36 = (const __CFString *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v143, "DSPGraphFileName");
        if (v36)
        {
          applesauce::CF::convert_as<std::string,0>((uint64_t)&__v, v36);
          if (LOBYTE(__v.__end_cap_.__value_))
          {
            if (v136)
            {
              v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
              v37 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&v141);
              v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
              v38 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v37 + 40), (unsigned __int8 *)&v144, (__int128 **)&v141);
              if (v38[135] < 0)
              {
                if (*((_QWORD *)v38 + 15))
                  goto LABEL_86;
              }
              else if (v38[135])
              {
LABEL_86:
                adm_log_object = get_adm_log_object();
                if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
                {
                  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
                  v40 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&v141);
                  v141.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
                  v41 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v40 + 40), (unsigned __int8 *)&v144, (__int128 **)&v141);
                  v42 = v41 + 112;
                  if (v41[135] < 0)
                    v42 = (_QWORD *)*v42;
                  if (!v143)
                  {
                    v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v128, "Could not construct");
                    __cxa_throw(v128, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
                  }
                  applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&v141, (const __CFDictionary *)v143, "DSPGraphFileName");
                  v43 = &v141;
                  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v43 = (std::string *)v141.__r_.__value_.__r.__words[0];
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v43;
                  _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "DSPGraphFilePath %s is already in the SystemConfiguration and can't be added to. Ignore the new value %s", (uint8_t *)&buf, 0x16u);
                  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v141.__r_.__value_.__l.__data_);
                  a3 = (std::string::size_type *)v135;
                }
                goto LABEL_100;
              }
            }
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&buf, (std::string *)&__v);
            std::__fs::filesystem::operator/[abi:ne180100](&v141, (uint64_t)&__p, (std::__fs::filesystem::path *)&buf);
            v140.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
            v44 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&v140);
            v140.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
            v45 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v44 + 40), (unsigned __int8 *)&v144, (__int128 **)&v140);
            v46 = (void **)(v45 + 112);
            if (v45[135] < 0)
              operator delete(*v46);
            *(std::string *)v46 = v141;
            *((_BYTE *)&v141.__r_.__value_.__s + 23) = 0;
            v141.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
LABEL_100:
            if (LOBYTE(__v.__end_cap_.__value_) && SHIBYTE(__v.__end_) < 0)
              operator delete(__v.__first_);
          }
        }
        if (!v143)
        {
          v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v124, "Could not construct");
          __cxa_throw(v124, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        applesauce::CF::details::find_at_key_or_optional<std::vector<std::string>,char const* const&>((uint64_t)&v141, (const __CFDictionary *)v143, "TuningStripFileNames");
        if (v142)
        {
          if ((v136 & 1) == 0)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v157;
            v47 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&__v);
            __v.__first_ = &v144;
            v48 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v47 + 40), (unsigned __int8 *)&v144, (__int128 **)&__v);
            std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)v48 + 5);
          }
          v50 = v141.__r_.__value_.__l.__size_;
          for (i = (std::string *)v141.__r_.__value_.__r.__words[0]; i != (std::string *)v50; ++i)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v157;
            v51 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&__v);
            __v.__first_ = &v144;
            v52 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v51 + 40), (unsigned __int8 *)&v144, (__int128 **)&__v);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v140.__pn_, i);
            std::__fs::filesystem::operator/[abi:ne180100](&buf, (uint64_t)&__p, &v140);
            v53 = *((_QWORD *)v52 + 7);
            v54 = *((_QWORD *)v52 + 6);
            if (v54 >= v53)
            {
              v56 = *((_QWORD *)v52 + 5);
              v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - v56) >> 3);
              v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - v56) >> 3);
              if (2 * v59 > v58)
                v58 = 2 * v59;
              if (v59 >= 0x555555555555555)
                v60 = 0xAAAAAAAAAAAAAAALL;
              else
                v60 = v58;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v52 + 56);
              if (v60)
                v60 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v60);
              else
                v61 = 0;
              v62 = (std::string *)(v60 + 24 * v57);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v60;
              __v.__begin_ = v62;
              __v.__end_cap_.__value_ = (std::string *)(v60 + 24 * v61);
              v63 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              v62->__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
              memset(&buf, 0, sizeof(buf));
              __v.__end_ = v62 + 1;
              std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((std::vector<std::string> *)(v52 + 40), &__v);
              v64 = *((_QWORD *)v52 + 6);
              std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
              v65 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
              *((_QWORD *)v52 + 6) = v64;
              if (v65 < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
            }
            else
            {
              v55 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(_QWORD *)(v54 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)v54 = v55;
              memset(&buf, 0, sizeof(buf));
              *((_QWORD *)v52 + 6) = v54 + 24;
            }
            if (SHIBYTE(v140.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v140.__pn_.__r_.__value_.__l.__data_);
          }
          a3 = (std::string::size_type *)v135;
          if (v142)
          {
            __v.__first_ = &v141;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          }
        }
        if (!v143)
        {
          v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v123, "Could not construct");
          __cxa_throw(v123, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        applesauce::CF::details::find_at_key_or_optional<std::vector<std::string>,char const* const&>((uint64_t)&v141, (const __CFDictionary *)v143, "PropStripFileNames");
        if (v142)
        {
          if ((v136 & 1) == 0)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v157;
            v66 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&__v);
            __v.__first_ = &v144;
            v67 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v66 + 40), (unsigned __int8 *)&v144, (__int128 **)&__v);
            std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)v67 + 8);
          }
          v69 = v141.__r_.__value_.__l.__size_;
          for (j = (std::string *)v141.__r_.__value_.__r.__words[0]; j != (std::string *)v69; ++j)
          {
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v157;
            v70 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&__v);
            __v.__first_ = &v144;
            v71 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v70 + 40), (unsigned __int8 *)&v144, (__int128 **)&__v);
            std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v140.__pn_, j);
            std::__fs::filesystem::operator/[abi:ne180100](&buf, (uint64_t)&__p, &v140);
            v72 = *((_QWORD *)v71 + 10);
            v73 = *((_QWORD *)v71 + 9);
            if (v73 >= v72)
            {
              v75 = *((_QWORD *)v71 + 8);
              v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v73 - v75) >> 3);
              v77 = v76 + 1;
              if (v76 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
              v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v75) >> 3);
              if (2 * v78 > v77)
                v77 = 2 * v78;
              if (v78 >= 0x555555555555555)
                v79 = 0xAAAAAAAAAAAAAAALL;
              else
                v79 = v77;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v71 + 80);
              if (v79)
                v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v79);
              else
                v80 = 0;
              v81 = (std::string *)(v79 + 24 * v76);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v79;
              __v.__begin_ = v81;
              __v.__end_cap_.__value_ = (std::string *)(v79 + 24 * v80);
              v82 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              v81->__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
              memset(&buf, 0, sizeof(buf));
              __v.__end_ = v81 + 1;
              std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer((std::vector<std::string> *)(v71 + 64), &__v);
              v83 = *((_QWORD *)v71 + 9);
              std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
              v84 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
              *((_QWORD *)v71 + 9) = v83;
              if (v84 < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
            }
            else
            {
              v74 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
              *(_QWORD *)(v73 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
              *(_OWORD *)v73 = v74;
              memset(&buf, 0, sizeof(buf));
              *((_QWORD *)v71 + 9) = v73 + 24;
            }
            if (SHIBYTE(v140.__pn_.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v140.__pn_.__r_.__value_.__l.__data_);
          }
          a3 = (std::string::size_type *)v135;
          if (v142)
          {
            __v.__first_ = &v141;
            std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
          }
        }
        if (!v143)
        {
          v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v125, "Could not construct");
          __cxa_throw(v125, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v85 = (const __CFArray *)applesauce::CF::details::at_key<char const* const&>((const __CFDictionary *)v143, "AUPresetOverrides");
        if (v85)
        {
          applesauce::CF::convert_as<std::vector<applesauce::CF::DictionaryRef>,0>((int64x2_t *)&v141, v85);
          if (v142)
          {
            if ((v136 & 1) == 0)
            {
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
              v86 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&buf);
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
              v87 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v86 + 40), (unsigned __int8 *)&v144, (__int128 **)&buf);
              v88 = *((_QWORD *)v87 + 11);
              for (k = *((_QWORD *)v87 + 12);
                    k != v88;
                    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(k))
              {
                k -= 48;
              }
              *((_QWORD *)v87 + 12) = v88;
            }
            v90 = v141.__r_.__value_.__l.__size_;
            for (m = (const __CFDictionary **)v141.__r_.__value_.__r.__words[0]; m != (const __CFDictionary **)v90; ++m)
            {
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
              v92 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v157, (__int128 **)&buf);
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v144;
              v93 = std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v92 + 40), (unsigned __int8 *)&v144, (__int128 **)&buf);
              if (!*m)
              {
                v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v118, "Could not construct");
                __cxa_throw(v118, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              v94 = v93;
              applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&__v, *m, "BoxName");
              if (!*m)
              {
                v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v119, "Could not construct");
                __cxa_throw(v119, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
              }
              applesauce::CF::details::find_at_key<std::string,char const* const&>((uint64_t)&v140, *m, "FileName");
              buf = v140.__pn_;
              memset(&v140, 0, sizeof(v140));
              std::__fs::filesystem::operator/[abi:ne180100]((std::string *)&__v.__end_cap_, (uint64_t)&__p, (std::__fs::filesystem::path *)&buf);
              v95 = *((_QWORD *)v94 + 12);
              v96 = *((_QWORD *)v94 + 13);
              if (v95 >= v96)
              {
                v99 = *((_QWORD *)v94 + 11);
                v100 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v95 - v99) >> 4);
                v101 = v100 + 1;
                if (v100 + 1 > 0x555555555555555)
                  std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - v99) >> 4);
                if (2 * v102 > v101)
                  v101 = 2 * v102;
                if (v102 >= 0x2AAAAAAAAAAAAAALL)
                  v103 = 0x555555555555555;
                else
                  v103 = v101;
                if (v103)
                  v103 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig>>(v103);
                else
                  v104 = 0;
                v105 = v103 + 48 * v100;
                v106 = *(_OWORD *)&__v.__first_;
                *(_QWORD *)(v105 + 16) = __v.__end_;
                *(_OWORD *)v105 = v106;
                memset(&__v, 0, 24);
                end_cap = __v.__end_cap_;
                *(_QWORD *)(v105 + 40) = v172;
                *(std::__compressed_pair<std::string *> *)(v105 + 24) = end_cap;
                __v.__end_cap_.__value_ = 0;
                v172 = 0;
                __v.__end_cap_.__value_ = 0;
                v109 = *((_QWORD *)v94 + 11);
                v108 = *((_QWORD *)v94 + 12);
                if (v108 == v109)
                {
                  v113 = vdupq_n_s64(v108);
                  v110 = v103 + 48 * v100;
                }
                else
                {
                  v110 = v103 + 48 * v100;
                  do
                  {
                    v111 = *(_OWORD *)(v108 - 48);
                    *(_QWORD *)(v110 - 32) = *(_QWORD *)(v108 - 32);
                    *(_OWORD *)(v110 - 48) = v111;
                    *(_QWORD *)(v108 - 40) = 0;
                    *(_QWORD *)(v108 - 32) = 0;
                    *(_QWORD *)(v108 - 48) = 0;
                    v112 = *(_OWORD *)(v108 - 24);
                    *(_QWORD *)(v110 - 8) = *(_QWORD *)(v108 - 8);
                    *(_OWORD *)(v110 - 24) = v112;
                    v110 -= 48;
                    *(_QWORD *)(v108 - 16) = 0;
                    *(_QWORD *)(v108 - 8) = 0;
                    *(_QWORD *)(v108 - 24) = 0;
                    v108 -= 48;
                  }
                  while (v108 != v109);
                  v113 = *(int64x2_t *)(v94 + 88);
                }
                v114 = v105 + 48;
                *((_QWORD *)v94 + 11) = v110;
                *((_QWORD *)v94 + 12) = v105 + 48;
                *((_QWORD *)v94 + 13) = v103 + 48 * v104;
                v116 = v113.i64[1];
                v115 = (void *)v113.i64[0];
                while ((void *)v116 != v115)
                {
                  v116 -= 48;
                  std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v116);
                }
                if (v115)
                  operator delete(v115);
                v117 = SHIBYTE(v172);
                *((_QWORD *)v94 + 12) = v114;
                v14 = v137;
                if (v117 < 0)
                  operator delete(__v.__end_cap_.__value_);
              }
              else
              {
                v97 = *(_OWORD *)&__v.__first_;
                *(_QWORD *)(v95 + 16) = __v.__end_;
                *(_OWORD *)v95 = v97;
                memset(&__v, 0, 24);
                v98 = v172;
                *(std::__compressed_pair<std::string *> *)(v95 + 24) = __v.__end_cap_;
                *(_QWORD *)(v95 + 40) = v98;
                __v.__end_cap_.__value_ = 0;
                v172 = 0;
                __v.__end_cap_.__value_ = 0;
                *((_QWORD *)v94 + 12) = v95 + 48;
              }
              if (SHIBYTE(__v.__end_) < 0)
                operator delete(__v.__first_);
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(v140.__pn_.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v140.__pn_.__r_.__value_.__l.__data_);
            }
            a3 = (std::string::size_type *)v135;
            if (v142)
            {
              __v.__first_ = &v141;
              std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
            }
          }
        }
        if (v143)
          CFRelease(v143);
        if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v144.__r_.__value_.__l.__data_);
        v29 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      if (v29 < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (v138)
        CFRelease(v138);
      CFRelease(v139);
      ++key.__r_.__value_.__l.__size_;
    }
    if (v150)
    {
      v151 = v150;
      operator delete(v150);
    }
    if (v148)
    {
      v149 = v148;
      operator delete(v148);
    }
    if (v154)
    {
      v155 = v154;
      operator delete(v154);
    }
    if (key.__r_.__value_.__r.__words[2])
    {
      v153 = key.__r_.__value_.__r.__words[2];
      operator delete((void *)key.__r_.__value_.__r.__words[2]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    CFRelease(cf);
    if (v158 < 0)
      operator delete(v157[0]);
    CFRelease(v133);
    CFRelease(v14);
    ++v166;
  }
  if (v163)
  {
    v164 = v163;
    operator delete(v163);
  }
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
}

void sub_236CAD834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef a14, CFTypeRef cf, uint64_t a16, uint64_t a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,CFTypeRef a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a65;
  void *a68;
  uint64_t v68;
  void *v70;
  void *v71;

  if (a56 < 0)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  if (a62 < 0)
    operator delete(a57);
  if (a14)
    CFRelease(a14);
  if (a18)
    CFRelease(a18);
  if (a68)
    operator delete(a68);
  if (a65)
    operator delete(a65);
  v70 = *(void **)(v68 - 200);
  if (v70)
  {
    *(_QWORD *)(v68 - 192) = v70;
    operator delete(v70);
  }
  v71 = *(void **)(v68 - 224);
  if (v71)
  {
    *(_QWORD *)(v68 - 216) = v71;
    operator delete(v71);
  }
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, std::string *a2)
{
  std::string::size_type v3;
  BOOL v4;
  std::string::size_type size;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v4 = (v3 & 0x80000000) != 0;
  size = a2->__r_.__value_.__l.__size_;
  if ((v3 & 0x80000000) != 0)
    a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
  v3 = v3;
  if (v4)
    v3 = size;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, (std::string *)((char *)a2 + v3));
  return a1;
}

void sub_236CADD48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL std::__fs::filesystem::exists[abi:ne180100](const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned __int8 v6;

  std::__fs::filesystem::__status(a1, a2);
  if (v6)
  {
    a2->__val_ = 0;
    a2->__cat_ = std::system_category();
    v3 = v6;
  }
  else
  {
    v3 = 0;
  }
  if (v3)
    v4 = v3 == 255;
  else
    v4 = 1;
  return !v4;
}

uint64_t std::__optional_destruct_base<adm::SystemConfiguration,false>::__optional_destruct_base[abi:ne180100]<adm::SystemConfiguration>(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  *(_DWORD *)result = *(_DWORD *)a2;
  v2 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(result + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(result + 32) = v3;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = v4;
  *(_BYTE *)(result + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v5 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(result + 64) = v5;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_BYTE *)(result + 88) = 1;
  }
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 120) = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v6 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(result + 96) = v6;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_BYTE *)(result + 120) = 1;
  }
  *(_QWORD *)(result + 128) = *(_QWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(result + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(result + 136) = v7;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v8 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(result + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(result + 160) = v8;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v9 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(result + 184) = v9;
  *(_QWORD *)(result + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v12 = *(_QWORD *)(a2 + 200);
  v10 = a2 + 200;
  v11 = v12;
  *(_QWORD *)(result + 200) = v12;
  v13 = *(_QWORD *)(v10 + 8);
  *(_QWORD *)(result + 208) = v13;
  *(_DWORD *)(result + 216) = *(_DWORD *)(v10 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)(v11 + 8);
    v15 = *(_QWORD *)(result + 192);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(v9 + 8 * v14) = result + 200;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
  }
  *(_BYTE *)(result + 224) = 1;
  return result;
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  char **v3;
  CFIndex Count;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    std::vector<void const*>::resize((char **)(a1 + 16), Count);
    std::vector<void const*>::resize(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }
  return a1;
}

_QWORD *applesauce::CF::details::find_at_key<std::string,char const* const&>(uint64_t a1, const __CFDictionary *a2, char *a3)
{
  const __CFString *v4;
  std::runtime_error *exception;

  v4 = (const __CFString *)applesauce::CF::details::at_key<char const* const&>(a2, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return applesauce::CF::convert_to<std::string,0>(a1, v4);
}

void sub_236CADFF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::DictionaryRef_iterator<applesauce::CF::TypeRef,applesauce::CF::TypeRef>::DictionaryRef_iterator(uint64_t a1, CFDictionaryRef theDict)
{
  char **v3;
  CFIndex Count;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  Count = CFDictionaryGetCount(theDict);
  std::vector<void const*>::resize((char **)(a1 + 16), Count);
  std::vector<void const*>::resize(v3, Count);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  return a1;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x50uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_DWORD *)v13 + 18) = 1065353216;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_236CAE2F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x88uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,adm::DSPGraphBasicConfiguration>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_236CAE584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,adm::DSPGraphBasicConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::details::find_at_key_or_optional<std::vector<std::string>,char const* const&>(uint64_t a1, const __CFDictionary *a2, char *a3)
{
  const __CFArray *v4;
  const __CFArray *v5;
  CFTypeID TypeID;
  CFIndex Count;
  int v8;
  uint64_t v9;
  CFIndex v10;
  const __CFString *ValueAtIndex;
  std::vector<std::string>::pointer end;
  std::string *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string::size_type v20;
  char v21;
  std::vector<std::string> v22;
  std::__split_buffer<std::string> __v;

  v4 = (const __CFArray *)applesauce::CF::details::at_key<char const* const&>(a2, a3);
  if (v4 && (v5 = v4, TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(v5)))
  {
    Count = CFArrayGetCount(v5);
    v8 = Count;
    memset(&v22, 0, sizeof(v22));
    if (Count << 32)
    {
      if (Count << 32 < 0)
LABEL_27:
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v22.__end_cap_;
      __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>((int)Count);
      __v.__begin_ = __v.__first_;
      __v.__end_ = __v.__first_;
      __v.__end_cap_.__value_ = &__v.__first_[v9];
      std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(&v22, &__v);
      std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
    }
    if (v8 < 1)
    {
LABEL_22:
      *(std::vector<std::string> *)a1 = v22;
      memset(&v22, 0, sizeof(v22));
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      v10 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v10);
        applesauce::CF::convert_as<std::string,0>((uint64_t)&v19, ValueAtIndex);
        if (!v21)
          break;
        end = v22.__end_;
        if (v22.__end_ >= v22.__end_cap_.__value_)
        {
          v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_ - (char *)v22.__begin_) >> 3);
          v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_27;
          if (0x5555555555555556 * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3) > v15)
            v15 = 0x5555555555555556 * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3) >= 0x555555555555555)
            v16 = 0xAAAAAAAAAAAAAAALL;
          else
            v16 = v15;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v22.__end_cap_;
          if (v16)
            v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v16);
          else
            v17 = 0;
          v18 = (std::string *)(v16 + 24 * v14);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v16;
          __v.__begin_ = v18;
          __v.__end_cap_.__value_ = (std::string *)(v16 + 24 * v17);
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__r.__words[2] = v20;
          v19 = 0uLL;
          v20 = 0;
          __v.__end_ = v18 + 1;
          std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(&v22, &__v);
          v13 = v22.__end_;
          std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer(&__v);
        }
        else
        {
          *(_OWORD *)v22.__end_ = v19;
          end->__r_.__value_.__r.__words[2] = v20;
          v20 = 0;
          v19 = 0uLL;
          v13 = end + 1;
        }
        v22.__end_ = v13;
        if (v8 == ++v10)
          goto LABEL_22;
      }
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v22;
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
}

void adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig::~AUPresetOverrideConfig(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  const void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

const void *applesauce::CF::details::at_key<char const* const&>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  return Value;
}

void sub_236CAE8DC(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x236CAE8C4);
}

void applesauce::CF::convert_as<std::vector<applesauce::CF::DictionaryRef>,0>(int64x2_t *a1, const __CFArray *a2)
{
  CFTypeID TypeID;
  CFIndex Count;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  CFIndex v15;
  uint64_t v16;
  const void *ValueAtIndex;
  const void *v18;
  CFTypeID v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  const void *v33;
  char v34;
  int64x2_t v35;
  char *v36;
  int64x2_t *v37;
  int64x2_t v38;
  unint64_t v39;
  char **v40;

  TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    Count = CFArrayGetCount(a2);
    v6 = Count;
    v35 = 0uLL;
    v36 = 0;
    if (Count << 32)
    {
      if (Count << 32 < 0)
LABEL_36:
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v40 = &v36;
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((int)Count);
      v9 = (_QWORD *)v35.i64[1];
      v10 = (_QWORD *)v35.i64[0];
      if (v35.i64[1] == v35.i64[0])
      {
        v13 = vdupq_n_s64(v35.u64[1]);
        v11 = v7;
      }
      else
      {
        v11 = v7;
        do
        {
          v12 = *--v9;
          *((_QWORD *)v11 - 1) = v12;
          v11 -= 8;
          *v9 = 0;
        }
        while (v9 != v10);
        v13 = v35;
      }
      v35.i64[0] = (uint64_t)v11;
      v35.i64[1] = (uint64_t)v7;
      v38 = v13;
      v14 = v36;
      v36 = &v7[8 * v8];
      v39 = (unint64_t)v14;
      v37 = (int64x2_t *)v13.i64[0];
      std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v37);
    }
    if (v6 < 1)
    {
LABEL_31:
      *a1 = v35;
      a1[1].i64[0] = (uint64_t)v36;
      v36 = 0;
      v35 = 0uLL;
      a1[1].i8[8] = 1;
    }
    else
    {
      v15 = 0;
      v16 = v6;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, v15);
        v18 = ValueAtIndex;
        if (!ValueAtIndex)
          break;
        CFRetain(ValueAtIndex);
        v19 = CFGetTypeID(v18);
        if (v19 != CFDictionaryGetTypeID())
        {
          CFRelease(v18);
          break;
        }
        v33 = v18;
        v34 = 1;
        v20 = (_QWORD *)v35.i64[1];
        if (v35.i64[1] >= (unint64_t)v36)
        {
          v21 = (_QWORD *)v35.i64[0];
          v22 = (v35.i64[1] - v35.i64[0]) >> 3;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61)
            goto LABEL_36;
          v24 = (uint64_t)&v36[-v35.i64[0]];
          if ((uint64_t)&v36[-v35.i64[0]] >> 2 > v23)
            v23 = v24 >> 2;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v25 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          v40 = &v36;
          if (v25)
          {
            v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v25);
            v20 = (_QWORD *)v35.i64[1];
            v21 = (_QWORD *)v35.i64[0];
            v18 = v33;
          }
          else
          {
            v26 = 0;
          }
          v27 = (_QWORD *)(v25 + 8 * v22);
          v28 = v25 + 8 * v26;
          v39 = v28;
          *v27 = v18;
          v29 = v27 + 1;
          v33 = 0;
          v38.i64[1] = (uint64_t)(v27 + 1);
          if (v20 != v21)
          {
            do
            {
              v30 = *--v20;
              *--v27 = v30;
              *v20 = 0;
            }
            while (v20 != v21);
            v29 = (_QWORD *)v38.i64[1];
            v28 = v39;
          }
          v31 = v35;
          v35.i64[0] = (uint64_t)v27;
          v35.i64[1] = (uint64_t)v29;
          v38 = v31;
          v32 = v36;
          v36 = (char *)v28;
          v39 = (unint64_t)v32;
          v37 = (int64x2_t *)v31.i64[0];
          std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v37);
          v35.i64[1] = (uint64_t)v29;
        }
        else
        {
          *(_QWORD *)v35.i64[1] = v18;
          v33 = 0;
          v35.i64[1] = (uint64_t)(v20 + 1);
        }
        std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
        if (++v15 == v16)
          goto LABEL_31;
      }
      LOBYTE(v33) = 0;
      v34 = 0;
      a1->i8[0] = 0;
      a1[1].i8[8] = 0;
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
    }
    v37 = &v35;
    std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }
  else
  {
    a1->i8[0] = 0;
    a1[1].i8[8] = 0;
  }
}

double applesauce::CF::convert_as<std::string,0>(uint64_t a1, const __CFString *a2)
{
  CFTypeID TypeID;
  double result;
  char *CStringPtr;
  CFIndex Length;
  UInt8 *p_b;
  __int128 __b;
  uint64_t v10;
  CFIndex maxBufLen;
  CFRange v12;
  CFRange v13;

  if (a2 && (TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(a2)))
  {
    CStringPtr = (char *)CFStringGetCStringPtr(a2, 0x8000100u);
    if (CStringPtr)
    {
      std::string::basic_string[abi:ne180100]<0>(&__b, CStringPtr);
    }
    else
    {
      Length = CFStringGetLength(a2);
      maxBufLen = 0;
      v12.location = 0;
      v12.length = Length;
      CFStringGetBytes(a2, v12, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::string::basic_string[abi:ne180100](&__b, maxBufLen, 0);
      if (v10 >= 0)
        p_b = (UInt8 *)&__b;
      else
        p_b = (UInt8 *)__b;
      v13.location = 0;
      v13.length = Length;
      CFStringGetBytes(a2, v13, 0x8000100u, 0, 0, p_b, maxBufLen, &maxBufLen);
    }
    result = *(double *)&__b;
    *(_OWORD *)a1 = __b;
    *(_QWORD *)(a1 + 16) = v10;
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  return result;
}

std::runtime_error *applesauce::CF::construct_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not construct");
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  return this;
}

void sub_236CAED64(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void std::vector<void const*>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v19 = &v3[8 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v3;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
  v12 = &v11[8 * v5];
  v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  v15 = &v12[8 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      v18 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      *((_QWORD *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

std::runtime_error *applesauce::CF::not_found(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not find item");
}

uint64_t applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        v11 = Value != 0;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0)
          v13 = 0;
        v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9)
          v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        else
          v5 = 0;
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        v14 = *(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        v14 = valuePtr;
LABEL_35:
        v5 = v14 | 0x100000000;
        if (!v10)
          v5 = 0;
LABEL_37:
        v7 = v5 & 0xFFFFFF00;
        v8 = v5 & 0x100000000;
        break;
      default:
        v7 = 0;
        v8 = 0;
        LOBYTE(v5) = 0;
        break;
    }
    v6 = v8 | v7 & 0xFFFFFF00;
    v5 = v5;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      v5 = CFBooleanGetValue(a1);
      v6 = 0x100000000;
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
  }
  return v6 | v5;
}

uint64_t *applesauce::CF::make_DataRef(CFDataRef *a1, uint64_t a2)
{
  const char *v3;
  FILE *v4;
  size_t v5;
  size_t v6;
  char *v7;
  char *v8;
  CFDataRef v9;
  std::runtime_error *exception;
  std::runtime_error *v12;
  _QWORD v13[4];
  FILE *__stream;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = fopen(v3, "rb");
  v13[0] = &off_25083E808;
  v13[1] = MEMORY[0x24BDAE2E0];
  v13[3] = v13;
  __stream = v4;
  v15[3] = v15;
  std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone((uint64_t)v13, v15);
  if (!__stream)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  fseek(__stream, 0, 2);
  v5 = MEMORY[0x23B80170C](__stream);
  if (v5)
  {
    v6 = v5;
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v5);
    v8 = &v7[v6];
    bzero(v7, v6);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  fseek(__stream, 0, 0);
  fread(v7, 1uLL, v8 - v7, __stream);
  v9 = CFDataCreate(0, (const UInt8 *)v7, v8 - v7);
  *a1 = v9;
  if (!v9)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v7)
    operator delete(v7);
  return std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::~unique_ptr[abi:ne180100]((uint64_t *)&__stream);
}

void sub_236CAF300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::~unique_ptr[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *applesauce::CF::make_DictionaryRef(applesauce::CF::DictionaryRef *a1, const __CFData *a2)
{
  CFPropertyListRef v3;
  const void *v4;
  CFTypeID v5;
  applesauce::CF::DictionaryRef *result;
  std::runtime_error *exception;

  if (!a2)
    goto LABEL_8;
  v3 = CFPropertyListCreateWithData(0, a2, 0, 0, 0);
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFDictionaryGetTypeID())
      return applesauce::CF::DictionaryRef::DictionaryRef(a1, v4);
    CFRelease(v4);
LABEL_8:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  result = (applesauce::CF::DictionaryRef *)CFDictionaryGetTypeID();
  if (result)
    goto LABEL_8;
  *(_QWORD *)a1 = 0;
  return result;
}

void sub_236CAF404(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t *std::unique_ptr<__sFILE,std::function<int ()(__sFILE*)>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v7 = v2;
    v3 = a1[4];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7);
  }
  v4 = (uint64_t *)a1[4];
  if (v4 == a1 + 1)
  {
    v5 = 4;
    v4 = a1 + 1;
    goto LABEL_8;
  }
  if (v4)
  {
    v5 = 5;
LABEL_8:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return a1;
}

void std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::~__func()
{
  JUMPOUT(0x23B801508);
}

_QWORD *std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25083E808;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25083E808;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"PFiP7__sFILEE"))
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<int (*)(__sFILE *),std::allocator<int (*)(__sFILE *)>,int ()(__sFILE *)>::target_type()
{
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

void adm::vp::SPIErrorCategory::~SPIErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x23B801508);
}

const char *adm::vp::SPIErrorCategory::name(adm::vp::SPIErrorCategory *this)
{
  return "adm::vp::SPIErrorCategory";
}

_QWORD *adm::vp::SPIErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v5;
  NSObject *adm_log_object;
  _DWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a1 > 1651270507)
  {
    if (a1 > 1651733600)
    {
      if (a1 == 1651733601)
      {
        v5 = "bad state";
        return std::string::basic_string[abi:ne180100]<0>(a2, v5);
      }
      if (a1 == 2004186175)
      {
        v5 = "unknown error has occurred";
        return std::string::basic_string[abi:ne180100]<0>(a2, v5);
      }
    }
    else
    {
      if (a1 == 1651270508)
      {
        v5 = "bad legacy call";
        return std::string::basic_string[abi:ne180100]<0>(a2, v5);
      }
      if (a1 == 1651664230)
      {
        v5 = "bad VoiceProcessorRef";
        return std::string::basic_string[abi:ne180100]<0>(a2, v5);
      }
    }
  }
  else if (a1 > 1651076963)
  {
    if (a1 == 1651076964)
    {
      v5 = "bad VoiceProcessor[Uplink|Downlink]IOData";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    }
    if (a1 == 1651270507)
    {
      v5 = "back lock";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    }
  }
  else
  {
    if (a1 == 1650553447)
    {
      v5 = "bad argument";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    }
    if (a1 == 1650681447)
    {
      v5 = "bad VoiceProcessor[Uplink|Downlink]Congiguration";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    }
  }
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    v8[0] = 67109120;
    v8[1] = a1;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown return status %d in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)v8, 8u);
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, "???");
}

void adm::vp::SPI::~SPI(adm::vp::SPI *this)
{
  NSObject *adm_log_object;
  unsigned int v3;
  NSObject *v4;
  void **v5;
  uint64_t i;
  _BYTE v7[8];
  uint64_t *v8;
  void *__p[2];
  char v10;
  uint8_t buf[16];
  uint8_t *v12;
  char v13;
  _BYTE v14[8];
  _QWORD v15[2];
  char v16;
  _BYTE v17[8];
  uint64_t *v18[2];
  char v19;
  uint8_t v20[4];
  void **v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "destroying voice processor", buf, 2u);
  }
  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)this + 16))(*((_QWORD *)this + 1));
  if (v3)
  {
    v4 = get_adm_log_object();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[6],char [6],0>((uint64_t)buf, "error");
      v12 = buf;
      v13 = 1;
      v14[0] = 5;
      v15[0] = v3;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v14);
      v15[1] = v14;
      v16 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v17, (uint64_t)buf, 2);
      v18[1] = (uint64_t *)v17;
      v19 = 1;
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v7, (uint64_t)v17, 1);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v7, -1);
      if (v10 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      *(_DWORD *)v20 = 136315138;
      v21 = v5;
      _os_log_error_impl(&dword_236C84000, v4, OS_LOG_TYPE_ERROR, "failed to destroy voice processor with error: %s", v20, 0xCu);
      if (v10 < 0)
        operator delete(__p[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v7);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v8, v7[0]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v17);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v18, v17[0]);
      for (i = 0; i != -8; i -= 4)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v14[i * 8]);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v15[i], v14[i * 8]);
      }
    }
  }
}

void sub_236CAFAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 buf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unsigned __int8 a23,uint64_t *a24)
{
  uint64_t i;
  NSObject *adm_log_object;

  if (a2)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a11, a10);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&a24, a23);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a19 + i);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a20 + i), *((unsigned __int8 *)&a19 + i));
    }
    __cxa_begin_catch(exception_object);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
    {
      buf = 0;
      _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x236CAF940);
  }
  _Unwind_Resume(exception_object);
}

uint64_t adm::graph::Kernel::supportsRegisterClientHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doRegisterClient(adm::graph::Kernel *this)
{
  NSObject *adm_log_object;
  _QWORD *v2;
  void **v3;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v9[8];
  uint64_t *v10;
  void *__p[2];
  char v12;
  _BYTE v13[16];
  _BYTE *v14;
  char v15;
  _BYTE v16[8];
  _QWORD v17[2];
  char v18;
  _BYTE v19[16];
  _BYTE *v20;
  char v21;
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;
  _BYTE v25[16];
  _BYTE *v26;
  char v27;
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  _BYTE v31[16];
  _BYTE *v32;
  char v33;
  _QWORD v34[3];
  char v35;
  _BYTE v36[16];
  _BYTE *v37;
  char v38;
  uint8_t buf[4];
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    v26 = v25;
    v27 = 1;
    v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    v32 = v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    v20 = v19;
    v21 = 1;
    v22[0] = 5;
    v23[0] = 27;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    v14 = v13;
    v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doRegisterClient(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    v37 = v36;
    v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v40 = v3;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CAFEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsBeginProcessingHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doBeginProcessing(adm::graph::Kernel *this)
{
  NSObject *adm_log_object;
  _QWORD *v2;
  void **v3;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v9[8];
  uint64_t *v10;
  void *__p[2];
  char v12;
  _BYTE v13[16];
  _BYTE *v14;
  char v15;
  _BYTE v16[8];
  _QWORD v17[2];
  char v18;
  _BYTE v19[16];
  _BYTE *v20;
  char v21;
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;
  _BYTE v25[16];
  _BYTE *v26;
  char v27;
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  _BYTE v31[16];
  _BYTE *v32;
  char v33;
  _QWORD v34[3];
  char v35;
  _BYTE v36[16];
  _BYTE *v37;
  char v38;
  uint8_t buf[4];
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    v26 = v25;
    v27 = 1;
    v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    v32 = v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    v20 = v19;
    v21 = 1;
    v22[0] = 5;
    v23[0] = 40;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    v14 = v13;
    v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doBeginProcessing(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    v37 = v36;
    v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v40 = v3;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB02CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsBeginCycleHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doBeginCycle()
{
  NSObject *adm_log_object;
  _QWORD *v1;
  void **v2;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v8[8];
  uint64_t *v9;
  void *__p[2];
  char v11;
  _BYTE v12[16];
  _BYTE *v13;
  char v14;
  _BYTE v15[8];
  _QWORD v16[2];
  char v17;
  _BYTE v18[16];
  _BYTE *v19;
  char v20;
  _BYTE v21[8];
  _QWORD v22[2];
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  _BYTE v30[16];
  _BYTE *v31;
  char v32;
  _QWORD v33[3];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  uint8_t buf[4];
  void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v24, "file");
    v25 = v24;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v27);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v24, 2);
    v31 = v30;
    v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v18, "line");
    v19 = v18;
    v20 = 1;
    v21[0] = 5;
    v22[0] = 53;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v22[1] = v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v18, 2);
    v33[2] = v33;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v12);
    v13 = v12;
    v14 = 1;
    v16[0] = 0;
    v15[0] = 3;
    v1 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v1, "virtual void adm::graph::Kernel::doBeginCycle(AMCP::Object_ID, const AMCP::Proc_Cycle_Info &)");
    v16[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    v16[1] = v15;
    v17 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v12, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v30, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v8, 4);
    if (v11 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v39 = v2;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i + 8], v35[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v16[j], v15[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v21[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[k], v21[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[m + 8], v27[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB06F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsClientIOHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doClientIO()
{
  NSObject *adm_log_object;
  _QWORD *v1;
  void **v2;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v8[8];
  uint64_t *v9;
  void *__p[2];
  char v11;
  _BYTE v12[16];
  _BYTE *v13;
  char v14;
  _BYTE v15[8];
  _QWORD v16[2];
  char v17;
  _BYTE v18[16];
  _BYTE *v19;
  char v20;
  _BYTE v21[8];
  _QWORD v22[2];
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  _BYTE v30[16];
  _BYTE *v31;
  char v32;
  _QWORD v33[3];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  uint8_t buf[4];
  void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v24, "file");
    v25 = v24;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v27);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v24, 2);
    v31 = v30;
    v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v18, "line");
    v19 = v18;
    v20 = 1;
    v21[0] = 5;
    v22[0] = 67;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v22[1] = v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v18, 2);
    v33[2] = v33;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v12);
    v13 = v12;
    v14 = 1;
    v16[0] = 0;
    v15[0] = 3;
    v1 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v1, "virtual void adm::graph::Kernel::doClientIO(AMCP::Object_ID, const AMCP::Proc_Cycle_Info &, std::size_t, AMCP::Proc_Stream *, std::size_t, AMCP::Proc_Stream *)");
    v16[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    v16[1] = v15;
    v17 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v12, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v30, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v8, 4);
    if (v11 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v39 = v2;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i + 8], v35[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v16[j], v15[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v21[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[k], v21[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[m + 8], v27[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB0B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsEndCycleHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doEndCycle()
{
  NSObject *adm_log_object;
  _QWORD *v1;
  void **v2;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v8[8];
  uint64_t *v9;
  void *__p[2];
  char v11;
  _BYTE v12[16];
  _BYTE *v13;
  char v14;
  _BYTE v15[8];
  _QWORD v16[2];
  char v17;
  _BYTE v18[16];
  _BYTE *v19;
  char v20;
  _BYTE v21[8];
  _QWORD v22[2];
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  _BYTE v30[16];
  _BYTE *v31;
  char v32;
  _QWORD v33[3];
  char v34;
  _BYTE v35[16];
  _BYTE *v36;
  char v37;
  uint8_t buf[4];
  void **v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v24, "file");
    v25 = v24;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v27);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v30, (uint64_t)v24, 2);
    v31 = v30;
    v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v18, "line");
    v19 = v18;
    v20 = 1;
    v21[0] = 5;
    v22[0] = 80;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    v22[1] = v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v18, 2);
    v33[2] = v33;
    v34 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v12);
    v13 = v12;
    v14 = 1;
    v16[0] = 0;
    v15[0] = 3;
    v1 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v1, "virtual void adm::graph::Kernel::doEndCycle(AMCP::Object_ID, const AMCP::Proc_Cycle_Info &)");
    v16[0] = v1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v15);
    v16[1] = v15;
    v17 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v35, (uint64_t)v12, 2);
    v36 = v35;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v8, (uint64_t)v30, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v8, 4);
    if (v11 >= 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v39 = v2;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v11 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v8);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v9, v8[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v35[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v35[i + 8], v35[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v15[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v16[j], v15[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v21[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v22[k], v21[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[m + 8], v27[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB0F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsEndProcessingHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doEndProcessing(adm::graph::Kernel *this)
{
  NSObject *adm_log_object;
  _QWORD *v2;
  void **v3;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v9[8];
  uint64_t *v10;
  void *__p[2];
  char v12;
  _BYTE v13[16];
  _BYTE *v14;
  char v15;
  _BYTE v16[8];
  _QWORD v17[2];
  char v18;
  _BYTE v19[16];
  _BYTE *v20;
  char v21;
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;
  _BYTE v25[16];
  _BYTE *v26;
  char v27;
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  _BYTE v31[16];
  _BYTE *v32;
  char v33;
  _QWORD v34[3];
  char v35;
  _BYTE v36[16];
  _BYTE *v37;
  char v38;
  uint8_t buf[4];
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    v26 = v25;
    v27 = 1;
    v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    v32 = v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    v20 = v19;
    v21 = 1;
    v22[0] = 5;
    v23[0] = 93;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    v14 = v13;
    v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doEndProcessing(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    v37 = v36;
    v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v40 = v3;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB136C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsUnregisterClientHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doUnregisterClient(adm::graph::Kernel *this)
{
  NSObject *adm_log_object;
  _QWORD *v2;
  void **v3;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v9[8];
  uint64_t *v10;
  void *__p[2];
  char v12;
  _BYTE v13[16];
  _BYTE *v14;
  char v15;
  _BYTE v16[8];
  _QWORD v17[2];
  char v18;
  _BYTE v19[16];
  _BYTE *v20;
  char v21;
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;
  _BYTE v25[16];
  _BYTE *v26;
  char v27;
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  _BYTE v31[16];
  _BYTE *v32;
  char v33;
  _QWORD v34[3];
  char v35;
  _BYTE v36[16];
  _BYTE *v37;
  char v38;
  uint8_t buf[4];
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    v26 = v25;
    v27 = 1;
    v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    v32 = v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    v20 = v19;
    v21 = 1;
    v22[0] = 5;
    v23[0] = 106;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    v14 = v13;
    v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual void adm::graph::Kernel::doUnregisterClient(AMCP::Object_ID)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    v37 = v36;
    v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v40 = v3;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB1794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsGetLatencyHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doGetLatency(adm::graph::Kernel *this)
{
  NSObject *adm_log_object;
  _QWORD *v2;
  void **v3;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v9[8];
  uint64_t *v10;
  void *__p[2];
  char v12;
  _BYTE v13[16];
  _BYTE *v14;
  char v15;
  _BYTE v16[8];
  _QWORD v17[2];
  char v18;
  _BYTE v19[16];
  _BYTE *v20;
  char v21;
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;
  _BYTE v25[16];
  _BYTE *v26;
  char v27;
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  _BYTE v31[16];
  _BYTE *v32;
  char v33;
  _QWORD v34[3];
  char v35;
  _BYTE v36[16];
  _BYTE *v37;
  char v38;
  uint8_t buf[4];
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    v26 = v25;
    v27 = 1;
    v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    v32 = v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    v20 = v19;
    v21 = 1;
    v22[0] = 5;
    v23[0] = 119;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    v14 = v13;
    v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual std::int64_t adm::graph::Kernel::doGetLatency()");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    v37 = v36;
    v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v40 = v3;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB1BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsGetRequiredInputSamplesForOutputSamplesHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doGetRequiredInputSamplesForOutputSamples(adm::graph::Kernel *this)
{
  NSObject *adm_log_object;
  _QWORD *v2;
  void **v3;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v9[8];
  uint64_t *v10;
  void *__p[2];
  char v12;
  _BYTE v13[16];
  _BYTE *v14;
  char v15;
  _BYTE v16[8];
  _QWORD v17[2];
  char v18;
  _BYTE v19[16];
  _BYTE *v20;
  char v21;
  _BYTE v22[8];
  _QWORD v23[2];
  char v24;
  _BYTE v25[16];
  _BYTE *v26;
  char v27;
  _BYTE v28[16];
  uint64_t v29;
  char v30;
  _BYTE v31[16];
  _BYTE *v32;
  char v33;
  _QWORD v34[3];
  char v35;
  _BYTE v36[16];
  _BYTE *v37;
  char v38;
  uint8_t buf[4];
  void **v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v25, "file");
    v26 = v25;
    v27 = 1;
    v29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v28);
    v30 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v25, 2);
    v32 = v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v19, "line");
    v20 = v19;
    v21 = 1;
    v22[0] = 5;
    v23[0] = 132;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v22);
    v23[1] = v22;
    v24 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v34, (uint64_t)v19, 2);
    v34[2] = v34;
    v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v13);
    v14 = v13;
    v15 = 1;
    v17[0] = 0;
    v16[0] = 3;
    v2 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v2, "virtual std::uint64_t adm::graph::Kernel::doGetRequiredInputSamplesForOutputSamples(std::uint64_t)");
    v17[0] = v2;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    v17[1] = v16;
    v18 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v13, 2);
    v37 = v36;
    v38 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v9, (uint64_t)v31, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v9, 4);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v40 = v3;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v9);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v10, v9[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v36[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v36[i + 8], v36[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v16[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v17[j], v16[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v22[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v23[k], v22[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v28[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v28[m + 8], v28[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB1FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t adm::graph::Kernel::supportsGetExpectedOutputSamplesForInputSamplesHandler(adm::graph::Kernel *this)
{
  return 0;
}

void adm::graph::Kernel::doGetExpectedOutputSamplesForInputSamples(adm::graph::Kernel *this, unint64_t a2, unint64_t *a3)
{
  NSObject *adm_log_object;
  _QWORD *v4;
  void **v5;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  std::logic_error *exception;
  _BYTE v11[8];
  uint64_t *v12;
  void *__p[2];
  char v14;
  _BYTE v15[16];
  _BYTE *v16;
  char v17;
  _BYTE v18[8];
  _QWORD v19[2];
  char v20;
  _BYTE v21[16];
  _BYTE *v22;
  char v23;
  _BYTE v24[8];
  _QWORD v25[2];
  char v26;
  _BYTE v27[16];
  _BYTE *v28;
  char v29;
  _BYTE v30[16];
  uint64_t v31;
  char v32;
  _BYTE v33[16];
  _BYTE *v34;
  char v35;
  _QWORD v36[3];
  char v37;
  _BYTE v38[16];
  _BYTE *v39;
  char v40;
  uint8_t buf[4];
  void **v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v27, "file");
    v28 = v27;
    v29 = 1;
    v31 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>((uint64_t)v30);
    v32 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v33, (uint64_t)v27, 2);
    v34 = v33;
    v35 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[5],char [5],0>((uint64_t)v21, "line");
    v22 = v21;
    v23 = 1;
    v24[0] = 5;
    v25[0] = 145;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v24);
    v25[1] = v24;
    v26 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v36, (uint64_t)v21, 2);
    v36[2] = v36;
    v37 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>((uint64_t)v15);
    v16 = v15;
    v17 = 1;
    v19[0] = 0;
    v18[0] = 3;
    v4 = operator new(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v4, "virtual std::uint64_t adm::graph::Kernel::doGetExpectedOutputSamplesForInputSamples(std::uint64_t, std::uint64_t &)");
    v19[0] = v4;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    v19[1] = v18;
    v20 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v38, (uint64_t)v15, 2);
    v39 = v38;
    v40 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v11, (uint64_t)v33, 3);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(__p, (uint64_t)v11, 4);
    if (v14 >= 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v42 = v5;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "operation is not supported: %s", buf, 0xCu);
    if (v14 < 0)
      operator delete(__p[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v11);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v12, v11[0]);
    for (i = 0; i != -96; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v38[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v38[i + 8], v38[i]);
    }
    for (j = 0; j != -8; j -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v18[j * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v19[j], v18[j * 8]);
    }
    for (k = 0; k != -8; k -= 4)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v24[k * 8]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v25[k], v24[k * 8]);
    }
    for (m = 0; m != -64; m -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v30[m]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v30[m + 8], v30[m]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "operation is not supported");
  __cxa_throw(exception, MEMORY[0x24BEDB720], MEMORY[0x24BEDAAC0]);
}

void sub_236CB240C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json(&a10);
  for (i = 64; i != -32; i -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(v31 - 176 + i));
  for (j = 32; j != -32; j -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a15 + j));
  for (k = 32; k != -32; k -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a23 + k));
  for (m = 32; m != -32; m -= 32)
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::~basic_json((uint64_t **)(&a31 + m));
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[78],char [78],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Kernel.cpp");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CB25A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[9],char [9],0>(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  v2 = operator new(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v2, "function");
  *(_QWORD *)(a1 + 8) = v2;
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void sub_236CB260C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::DSPKernel::createPreProcessingConverters(adm::graph::DSPKernel *this, const adm::graph::KernelConfiguration *a2, int a3)
{
  AudioConverterRef **v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  int v10;
  const AudioStreamBasicDescription *v11;
  UInt32 mChannelsPerFrame;
  unint64_t v13;
  AudioConverterRef *v14;
  _QWORD *v15;
  AudioConverterRef *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  AudioConverterRef *v22;
  unint64_t v23;
  OpaqueAudioConverter *v24;
  __int128 v25;
  unint64_t v26;
  void *v27;
  __n128 v28;
  void *exception;
  __n128 v30;
  std::string v31;
  AudioConverterRef outAudioConverter;
  AudioStreamBasicDescription inDestinationFormat;
  std::string v34;
  unint64_t v35;
  char *v36;

  v6 = (AudioConverterRef **)((char *)this + 32);
  result = (uint64_t)std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve((_QWORD *)this + 4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v8 = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    v9 = 0;
    v10 = 4 * a3;
    do
    {
      v11 = (const AudioStreamBasicDescription *)(v8 + 40 * v9);
      if (v11->mFormatID != 1819304813)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)&inDestinationFormat, v9);
        v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Non-LinearPCM format for input terminal index ", (std::string *)&inDestinationFormat);
        MEMORY[0x23B8011FC](exception, &v34, v30);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      mChannelsPerFrame = v11->mChannelsPerFrame;
      inDestinationFormat.mSampleRate = v11->mSampleRate;
      *(_OWORD *)&inDestinationFormat.mFormatID = xmmword_236CE1880;
      inDestinationFormat.mBytesPerFrame = 4;
      inDestinationFormat.mChannelsPerFrame = mChannelsPerFrame;
      *(_QWORD *)&inDestinationFormat.mBitsPerChannel = 32;
      outAudioConverter = 0;
      if (AudioConverterNew(v11, &inDestinationFormat, &outAudioConverter))
      {
        v27 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v9);
        v28 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Failed to create preprocessing converter for stream ", &v31);
        MEMORY[0x23B8011FC](v27, &v34, v28);
        __cxa_throw(v27, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v14 = (AudioConverterRef *)*((_QWORD *)this + 5);
      v13 = *((_QWORD *)this + 6);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *v6;
        v17 = v14 - *v6;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v36 = (char *)this + 48;
        if (v20)
        {
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
          v16 = (AudioConverterRef *)*((_QWORD *)this + 4);
          v14 = (AudioConverterRef *)*((_QWORD *)this + 5);
        }
        else
        {
          v21 = 0;
        }
        v22 = (AudioConverterRef *)(v20 + 8 * v17);
        v23 = v20 + 8 * v21;
        v35 = v23;
        *v22 = outAudioConverter;
        v34.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 1);
        if (v14 == v16)
        {
          v15 = v22 + 1;
        }
        else
        {
          do
          {
            v24 = *--v14;
            *v14 = 0;
            *--v22 = v24;
          }
          while (v14 != v16);
          v15 = (_QWORD *)v34.__r_.__value_.__r.__words[2];
          v23 = v35;
        }
        v25 = *((_OWORD *)this + 2);
        *((_QWORD *)this + 4) = v22;
        *((_QWORD *)this + 5) = v15;
        *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = v25;
        v26 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v23;
        v35 = v26;
        v34.__r_.__value_.__r.__words[0] = v25;
        std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        *v14 = outAudioConverter;
        v15 = v14 + 1;
      }
      *((_QWORD *)this + 5) = v15;
      LODWORD(v34.__r_.__value_.__l.__data_) = v10;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>((_QWORD *)this + 10, &inDestinationFormat);
      result = CA::AudioBuffers::Prepare(*(CA::AudioBuffers **)(*((_QWORD *)this + 11) - 8));
      ++v9;
      v8 = *(_QWORD *)a2;
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  }
  return result;
}

void sub_236CB290C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;

  if (a34 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v35 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

uint64_t adm::graph::DSPKernel::createPostProcessingConverters(adm::graph::DSPKernel *this, const adm::graph::KernelConfiguration *a2, int a3)
{
  AudioConverterRef **v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  int v10;
  const AudioStreamBasicDescription *v11;
  UInt32 mChannelsPerFrame;
  unint64_t v13;
  AudioConverterRef *v14;
  _QWORD *v15;
  AudioConverterRef *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  AudioConverterRef *v22;
  unint64_t v23;
  OpaqueAudioConverter *v24;
  __int128 v25;
  unint64_t v26;
  void *v27;
  __n128 v28;
  void *exception;
  __n128 v30;
  std::string v31;
  AudioConverterRef outAudioConverter;
  AudioStreamBasicDescription inSourceFormat;
  std::string v34;
  unint64_t v35;
  char *v36;

  v6 = (AudioConverterRef **)((char *)this + 56);
  result = (uint64_t)std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve((_QWORD *)this + 7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  v8 = *((_QWORD *)a2 + 3);
  if (*((_QWORD *)a2 + 4) != v8)
  {
    v9 = 0;
    v10 = 4 * a3;
    do
    {
      v11 = (const AudioStreamBasicDescription *)(v8 + 40 * v9);
      if (v11->mFormatID != 1819304813)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)&inSourceFormat, v9);
        v30 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Non-LinearPCM format for output terminal index ", (std::string *)&inSourceFormat);
        MEMORY[0x23B8011FC](exception, &v34, v30);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      mChannelsPerFrame = v11->mChannelsPerFrame;
      inSourceFormat.mSampleRate = v11->mSampleRate;
      *(_OWORD *)&inSourceFormat.mFormatID = xmmword_236CE1880;
      inSourceFormat.mBytesPerFrame = 4;
      inSourceFormat.mChannelsPerFrame = mChannelsPerFrame;
      *(_QWORD *)&inSourceFormat.mBitsPerChannel = 32;
      outAudioConverter = 0;
      if (AudioConverterNew(&inSourceFormat, v11, &outAudioConverter))
      {
        v27 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v9);
        v28 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34, "Failed to create postprocessing converter for stream ", &v31);
        MEMORY[0x23B8011FC](v27, &v34, v28);
        __cxa_throw(v27, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v14 = (AudioConverterRef *)*((_QWORD *)this + 8);
      v13 = *((_QWORD *)this + 9);
      if ((unint64_t)v14 >= v13)
      {
        v16 = *v6;
        v17 = v14 - *v6;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 2 > v18)
          v18 = v19 >> 2;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v36 = (char *)this + 72;
        if (v20)
        {
          v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v20);
          v16 = (AudioConverterRef *)*((_QWORD *)this + 7);
          v14 = (AudioConverterRef *)*((_QWORD *)this + 8);
        }
        else
        {
          v21 = 0;
        }
        v22 = (AudioConverterRef *)(v20 + 8 * v17);
        v23 = v20 + 8 * v21;
        v35 = v23;
        *v22 = outAudioConverter;
        v34.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 1);
        if (v14 == v16)
        {
          v15 = v22 + 1;
        }
        else
        {
          do
          {
            v24 = *--v14;
            *v14 = 0;
            *--v22 = v24;
          }
          while (v14 != v16);
          v15 = (_QWORD *)v34.__r_.__value_.__r.__words[2];
          v23 = v35;
        }
        v25 = *(_OWORD *)((char *)this + 56);
        *((_QWORD *)this + 7) = v22;
        *((_QWORD *)this + 8) = v15;
        *(_OWORD *)&v34.__r_.__value_.__r.__words[1] = v25;
        v26 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v23;
        v35 = v26;
        v34.__r_.__value_.__r.__words[0] = v25;
        std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v34);
      }
      else
      {
        *v14 = outAudioConverter;
        v15 = v14 + 1;
      }
      *((_QWORD *)this + 8) = v15;
      LODWORD(v34.__r_.__value_.__l.__data_) = v10;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>((_QWORD *)this + 13, &inSourceFormat);
      result = CA::AudioBuffers::Prepare(*(CA::AudioBuffers **)(*((_QWORD *)this + 14) - 8));
      ++v9;
      v8 = *((_QWORD *)a2 + 3);
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a2 + 4) - v8) >> 3));
  }
  return result;
}

void sub_236CB2C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;

  if (a34 < 0)
    operator delete(__p);
  if (a26 < 0)
  {
    operator delete(a21);
    if ((v35 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

uint64_t adm::graph::DSPKernel::doClientIOPreProcessing(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const AudioBufferList **v9;
  const char *v10;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  OpaqueAudioConverter *v12;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v17 = a3;
  v4 = (a1[5].__d_.__rep_ - a1[4].__d_.__rep_) >> 3;
  if (v4 != a3)
  {
    v6 = (a1[11].__d_.__rep_ - a1[10].__d_.__rep_) >> 3;
    goto LABEL_12;
  }
  v6 = (a1[11].__d_.__rep_ - a1[10].__d_.__rep_) >> 3;
  if (v6 != a3)
  {
LABEL_12:
    v7 = 1920231791;
    v15 = v6;
    v16 = v4;
    adm::util::RTLogger::log<unsigned long &,unsigned long,unsigned long>(a1 + 16, (uint64_t)"numStreams = %u, mPreProcessingConverters size is %u, mPreProcessingABLs size is %u", &v17, (uint64_t *)&v16, &v15);
    return v7;
  }
  v7 = 0;
  if (a3)
  {
    v8 = 0;
    v9 = (const AudioBufferList **)(a2 + 72);
    v10 = "mPreProcessingConverters is nullptr at index %u";
    while (1)
    {
      rep = a1[4].__d_.__rep_;
      if (v8 >= (a1[5].__d_.__rep_ - rep) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v12 = *(OpaqueAudioConverter **)(rep + 8 * v8);
      if (!v12)
        break;
      if (!*v9)
      {
        v10 = "inStreams ABL is nullptr at index %u";
        break;
      }
      v13 = a1[10].__d_.__rep_;
      if (v8 >= (a1[11].__d_.__rep_ - v13) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v7 = AudioConverterConvertComplexBuffer(v12, *((_DWORD *)v9 - 2), *v9, (AudioBufferList *)(*(_QWORD *)(v13 + 8 * v8++) + 48)) | v7;
      v9 += 10;
      if (a3 == v8)
        return v7;
    }
    v7 = 1920231791;
    v16 = v8;
    adm::util::RTLogger::log<unsigned long &>(a1 + 16, (uint64_t)v10, (uint64_t *)&v16);
  }
  return v7;
}

uint64_t adm::graph::DSPKernel::doClientIOPostProcessing(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  AudioBufferList **v9;
  const char *v10;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  OpaqueAudioConverter *v12;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v17 = a3;
  v4 = (a1[8].__d_.__rep_ - a1[7].__d_.__rep_) >> 3;
  if (v4 != a3)
  {
    v6 = (a1[14].__d_.__rep_ - a1[13].__d_.__rep_) >> 3;
    goto LABEL_12;
  }
  v6 = (a1[14].__d_.__rep_ - a1[13].__d_.__rep_) >> 3;
  if (v6 != a3)
  {
LABEL_12:
    v7 = 1920231791;
    v15 = v6;
    v16 = v4;
    adm::util::RTLogger::log<unsigned long &,unsigned long,unsigned long>(a1 + 16, (uint64_t)"numStreams = %u, mPostProcessingConverters size is %u, mPostProcessingABLs size is %u", &v17, (uint64_t *)&v16, &v15);
    return v7;
  }
  v7 = 0;
  if (a3)
  {
    v8 = 0;
    v9 = (AudioBufferList **)(a2 + 72);
    v10 = "mPostProcessingConverters is nullptr at index %u";
    while (1)
    {
      rep = a1[7].__d_.__rep_;
      if (v8 >= (a1[8].__d_.__rep_ - rep) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v12 = *(OpaqueAudioConverter **)(rep + 8 * v8);
      if (!v12)
        break;
      if (!*v9)
      {
        v10 = "outStreams ABL is nullptr at index %u";
        break;
      }
      v13 = a1[13].__d_.__rep_;
      if (v8 >= (a1[14].__d_.__rep_ - v13) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v7 = AudioConverterConvertComplexBuffer(v12, *((_DWORD *)v9 - 2), (const AudioBufferList *)(*(_QWORD *)(v13 + 8 * v8++) + 48), *v9) | v7;
      v9 += 10;
      if (a3 == v8)
        return v7;
    }
    v7 = 1920231791;
    v16 = v8;
    adm::util::RTLogger::log<unsigned long &>(a1 + 16, (uint64_t)v10, (uint64_t *)&v16);
  }
  return v7;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned long &,unsigned long,unsigned long>(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  int rep;
  std::chrono::system_clock::time_point result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v15 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 80, 8);
  *(_DWORD *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 24) = 3;
  *(_QWORD *)(v15 + 32) = a2;
  *(_DWORD *)(v15 + 40) = rep;
  *(_QWORD *)(v15 + 48) = v12;
  *(_QWORD *)(v15 + 56) = v13;
  *(_QWORD *)(v15 + 64) = v14;
  *(_QWORD *)v15 = &off_25083D7C0;
  *(_QWORD *)(v15 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v15);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned long &>(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t *a3)
{
  int rep;
  std::chrono::system_clock::time_point result;
  uint64_t v8;
  uint64_t v9;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v8 = *a3;
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
  *(_DWORD *)(v9 + 16) = 0;
  *(_DWORD *)(v9 + 24) = 3;
  *(_QWORD *)(v9 + 32) = a2;
  *(_DWORD *)(v9 + 40) = rep;
  *(_QWORD *)(v9 + 48) = v8;
  *(_QWORD *)v9 = &off_25083E340;
  *(_QWORD *)(v9 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v9);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(_QWORD *)(a1 + 48));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &>(adm::util::RTLogLevel,char const*,unsigned long &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned long &,unsigned long,unsigned long>(adm::util::RTLogLevel,char const*,unsigned long &,unsigned long,unsigned long &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 80, 8);
  return a1;
}

_QWORD *std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve(_QWORD *result, unint64_t a2)
{
  char **v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int64x2_t v10;
  char *v11;
  uint64_t v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;

  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v2 = (char **)result;
    v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    v7 = *v2;
    v6 = v2[1];
    if (v6 == *v2)
    {
      v10 = vdupq_n_s64((unint64_t)v6);
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v9 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v13 = v10;
    v11 = v2[2];
    v2[2] = &v4[8 * v5];
    v14 = v11;
    v12 = v10.i64[0];
    return (_QWORD *)std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v12);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>::reset[abi:ne180100]((OpaqueAudioConverter **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>(_QWORD *a1, AudioStreamBasicDescription *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  CA::AudioBuffers *v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = (uint64_t)(v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = (CA::AudioBuffers *)(v12 + 8 * v9);
    v17 = v12 + 8 * v13;
    CA::AudioBuffers::AudioBuffers(v15, a2);
    v16 = (char *)v15 + 8;
    std::vector<CA::AudioBuffers>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    result = std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    result = (uint64_t)CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)a1[1], a2);
    v8 = v6 + 8;
    a1[1] = v6 + 8;
  }
  a1[1] = v8;
  return result;
}

void sub_236CB39F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CA::AudioBuffers>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::getControllerEK(_anonymous_namespace_ *this, unint64_t a2, const char *a3)
{
  unint64_t v3;
  unsigned __int8 v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  int v14;
  NSObject *adm_log_object;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  int v20;
  int v21;
  NSObject *v22;
  unint64_t v23;
  uint8x8_t v24;
  _QWORD *v25;
  _QWORD *j;
  unint64_t v27;
  _QWORD *v28;
  float v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t prime;
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD **v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  _QWORD *k;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t *m;
  unint64_t v51;
  NSObject *v52;
  char v53;
  _QWORD *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  void *v63;
  _BYTE buf[18];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if ((v7 & 1) == 0
  {
    *(_OWORD *)&qword_25644D9B0 = 0u;
    dword_25644D9C0 = 1065353216;
  }
  {
                                        + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = a2;
        v10 = a2
    }
    else
    {
           - 1) & a2;
    }
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2)
            goto LABEL_98;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
                        + 1))
                     + 1);
          }
          else
          {
                   + 1)
                 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  v14 = tb_conclave_endpoint_for_service();
  if (v14)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v14;
      v16 = "tb call failed to lookup endpoint for service[%s]: error[%d]";
      v17 = adm_log_object;
      v18 = 18;
LABEL_24:
      _os_log_error_impl(&dword_236C84000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
      goto LABEL_97;
    }
    goto LABEL_97;
  }
  v19 = tb_client_connection_create_with_endpoint();
  v20 = tb_client_connection_activate();
  if (!v20)
  {
    {
                                           + 8));
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        v3 = a2;
          v3 = a2
      }
      else
      {
            - 1) & a2;
      }
      if (v25)
      {
        for (j = (_QWORD *)*v25; j; j = (_QWORD *)*j)
        {
          v27 = j[1];
          if (v27 == a2)
          {
            if (j[2] == a2)
              goto LABEL_97;
          }
          else
          {
            if (v24.u32[0] > 1uLL)
            {
                          + 1))
                       + 1);
            }
            else
            {
                     + 1)
                   - 1;
            }
            if (v27 != v3)
              break;
          }
        }
      }
    }
    v28 = operator new(0x30uLL);
    *(_QWORD *)buf = v28;
    *(_QWORD *)&buf[8] = &qword_25644D9B0;
    *v28 = 0;
    v28[1] = a2;
    v28[2] = a2;
    v28[3] = v19;
    *((_OWORD *)v28 + 2) = 0u;
    buf[16] = 1;
    v29 = (float)(unint64_t)(qword_25644D9B8 + 1);
    if (v23 && (float)(*(float *)&dword_25644D9C0 * (float)v23) >= v29)
      goto LABEL_88;
    v30 = (v23 & (v23 - 1)) == 0;
    if (v23 < 3)
      v30 = 0;
    v31 = (2 * v23) | !v30;
    v32 = vcvtps_u32_f32(v29 / *(float *)&dword_25644D9C0);
    if (v31 <= v32)
      prime = (int8x8_t)v32;
    else
      prime = (int8x8_t)v31;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    if (*(_QWORD *)&prime > v23)
      goto LABEL_54;
    if (*(_QWORD *)&prime < v23)
    {
      v40 = vcvtps_u32_f32((float)(unint64_t)qword_25644D9B8 / *(float *)&dword_25644D9C0);
      if (v23 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v23), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (*(_QWORD *)&prime <= v40)
        prime = (int8x8_t)v40;
      if (*(_QWORD *)&prime >= v23)
      {
      }
      else
      {
        if (prime)
        {
LABEL_54:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v34 = operator new(8 * *(_QWORD *)&prime);
          if (v35)
            operator delete(v35);
          v36 = 0;
          do
                      + 8 * v36++) = 0;
          while (*(_QWORD *)&prime != v36);
          v37 = (_QWORD **)qword_25644D9B0;
          if (qword_25644D9B0)
          {
            v38 = *(_QWORD *)(qword_25644D9B0 + 8);
            v39 = (uint8x8_t)vcnt_s8(prime);
            v39.i16[0] = vaddlv_u8(v39);
            if (v39.u32[0] > 1uLL)
            {
              if (v38 >= *(_QWORD *)&prime)
                v38 %= *(_QWORD *)&prime;
            }
            else
            {
              v38 &= *(_QWORD *)&prime - 1;
            }
            for (k = *v37; k; v38 = v44)
            {
              v44 = k[1];
              if (v39.u32[0] > 1uLL)
              {
                if (v44 >= *(_QWORD *)&prime)
                  v44 %= *(_QWORD *)&prime;
              }
              else
              {
                v44 &= *(_QWORD *)&prime - 1;
              }
              if (v44 != v38)
              {
                                + 8 * v44))
                {
                            + 8 * v44) = v37;
                  goto LABEL_79;
                }
                *v37 = (_QWORD *)*k;
                                 + 8 * v44);
                            + 8 * v44) = k;
                k = v37;
              }
              v44 = v38;
LABEL_79:
              v37 = (_QWORD **)k;
              k = (_QWORD *)*k;
            }
          }
          v23 = (unint64_t)prime;
          goto LABEL_83;
        }
        if (v63)
          operator delete(v63);
        v23 = 0;
      }
    }
LABEL_83:
    if ((v23 & (v23 - 1)) != 0)
    {
      if (v23 <= a2)
        v3 = a2 % v23;
      else
        v3 = a2;
    }
    else
    {
      v3 = (v23 - 1) & a2;
    }
LABEL_88:
    if (v45)
    {
      **(_QWORD **)buf = *v45;
      *v45 = *(_QWORD *)buf;
    }
    else
    {
      **(_QWORD **)buf = qword_25644D9B0;
      qword_25644D9B0 = *(_QWORD *)buf;
      if (**(_QWORD **)buf)
      {
        v46 = *(_QWORD *)(**(_QWORD **)buf + 8);
        if ((v23 & (v23 - 1)) != 0)
        {
          if (v46 >= v23)
            v46 %= v23;
        }
        else
        {
          v46 &= v23 - 1;
        }
      }
    }
    *(_QWORD *)buf = 0;
    ++qword_25644D9B8;
    goto LABEL_97;
  }
  v21 = v20;
  v22 = get_adm_log_object();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v21;
    v16 = "tb call to initialize exclave failed: %d";
    v17 = v22;
    v18 = 8;
    goto LABEL_24;
  }
LABEL_97:
LABEL_98:
  if (v8)
  {
    v47 = (uint8x8_t)vcnt_s8(v8);
    v47.i16[0] = vaddlv_u8(v47);
    if (v47.u32[0] > 1uLL)
    {
      v48 = a2;
      if (*(_QWORD *)&v8 <= a2)
        v48 = a2 % *(_QWORD *)&v8;
    }
    else
    {
      v48 = (*(_QWORD *)&v8 - 1) & a2;
    }
    if (v49)
    {
      for (m = *v49; m; m = (uint64_t *)*m)
      {
        v51 = m[1];
        if (v51 == a2)
        {
          if (m[2] == a2)
          {
            v54 = (_QWORD *)operator new();
            *v54 = &off_25083D818;
            v54[1] = 0;
            v54[2] = 0;
            v54[3] = m + 3;
            *(_QWORD *)&v55 = m + 3;
            *((_QWORD *)&v55 + 1) = v54;
            v56 = (std::__shared_weak_count *)m[5];
            *((_OWORD *)m + 2) = v55;
            if (v56)
            {
              p_shared_owners = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(p_shared_owners);
              while (__stlxr(v58 - 1, p_shared_owners));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v60 = m[4];
            v59 = m[5];
            if (v59)
            {
              v61 = (unint64_t *)(v59 + 16);
              do
                v62 = __ldxr(v61);
              while (__stxr(v62 + 1, v61));
            }
            *(_QWORD *)this = v60;
            *((_QWORD *)this + 1) = v59;
            v53 = 1;
            goto LABEL_117;
          }
        }
        else
        {
          if (v47.u32[0] > 1uLL)
          {
            if (v51 >= *(_QWORD *)&v8)
              v51 %= *(_QWORD *)&v8;
          }
          else
          {
            v51 &= *(_QWORD *)&v8 - 1;
          }
          if (v51 != v48)
            break;
        }
      }
    }
  }
  v52 = get_adm_log_object();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a2;
    _os_log_error_impl(&dword_236C84000, v52, OS_LOG_TYPE_ERROR, "Unable to initialize exclave ID %llu", buf, 0xCu);
  }
  v53 = 0;
  *(_QWORD *)this = 1970431354;
LABEL_117:
  *((_BYTE *)this + 16) = v53;
}

void sub_236CB41EC()
{
  __break(1u);
}

void sub_236CB4208(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_236CB4214(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_236CB4224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  int *v9;
  caulk::concurrent::messenger *v10;
  int v11;
  uint64_t v12;
  NSObject *adm_log_object;
  void *v14;
  void *v15;
  BOOL v16;
  char v17;
  NSObject *v18;
  int v19;
  unint64_t v20;
  char v22;
  uint8_t *v23;
  uint8_t buf[16];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_25083D918;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((_QWORD *)(a1 + 24), a3, (uint64_t)a3 + 4 * a4, (4 * a4) >> 2);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((_QWORD *)(a1 + 48), a5, (uint64_t)a5 + 4 * a6, (4 * a6) >> 2);
  *(_DWORD *)(a1 + 72) = 0;
  v9 = (int *)(a1 + 72);
  *(_DWORD *)buf = 0;
  v10 = (caulk::concurrent::messenger *)exclaves_inbound_buffer_create();
  if (!(_DWORD)v10)
  {
    v11 = *v9;
    *v9 = *(_DWORD *)buf;
    LODWORD(v23) = v11;
    caulk::mach::mach_port::~mach_port((mach_port_name_t *)&v23);
  }
  *(_DWORD *)(a1 + 76) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v12 = caulk::concurrent::messenger::shared_logging_priority(v10);
  MEMORY[0x23B800FEC](a1 + 96, 0, v12);
  *(_BYTE *)(a1 + 112) = 0;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) created", buf, 0xCu);
  }
  if (!AudioCaptureLibraryCore(char **)::frameworkLibrary)
  {
    *(_OWORD *)buf = xmmword_25083D978;
    v25 = 0;
    AudioCaptureLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
  if (AudioCaptureLibraryCore(char **)::frameworkLibrary)
  {
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", CFSTR("com.apple.coreaudio"));
    objc_msgSend(v14, "objectForKey:", CFSTR("adm_debug_capture_level"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = v15 == 0;

    if (v16)
      v17 = 0;
    else
      v17 = objc_msgSend(v14, "integerForKey:", CFSTR("adm_debug_capture_level"));

    *(_BYTE *)(a1 + 112) = v17;
    v18 = get_adm_log_object();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(unsigned __int8 *)(a1 + 112);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v19;
      _os_log_impl(&dword_236C84000, v18, OS_LOG_TYPE_DEFAULT, "ADM debug capture level set to %hhu", buf, 8u);
    }
    if (*(_BYTE *)(a1 + 112))
    {
      v20 = atomic_load(&adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::onceflag);
      if (v20 != -1)
      {
        *(_QWORD *)buf = &v22;
        v23 = buf;
        std::__call_once(&adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::onceflag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::{lambda(void)#1} &&>>);
      }
    }
  }
  return a1;
}

void sub_236CB451C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  mach_port_name_t *v4;
  uint64_t v5;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;

  MEMORY[0x23B801004](v5);
  caulk::mach::mach_port::~mach_port(v4);
  v7 = *v3;
  if (*v3)
  {
    v1[7] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[4] = v8;
    operator delete(v8);
  }
  v9 = (std::__shared_weak_count *)v1[2];
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void adm::graph::ExclaveDSPControllerClientSoundAnalysis::~ExclaveDSPControllerClientSoundAnalysis(adm::graph::ExclaveDSPControllerClientSoundAnalysis *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x23B801508);
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::configure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, unsigned int a6)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v13;
  NSObject *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *adm_log_object;
  const char *v20;
  int v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  int v25;
  int v26;
  const char *v27;
  _QWORD v28[5];
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t (*v33)();
  _OWORD v34[2];
  uint64_t v35;
  _QWORD v36[6];
  _QWORD v37[6];
  __int16 v38;
  NSObject *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint8_t buf[32];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    v13 = std::__shared_weak_count::lock(v7);
    if (v13 && *(_QWORD *)(a1 + 8))
    {
      *(_DWORD *)(a1 + 76) = (_DWORD)a5;
      memset(v37, 0, 40);
      adm::exclaves::utility::convert_to<audiodsptypes_audiostreambasicdescription_s,CA::StreamDescription>((uint64_t)v37, a2);
      memset(v36, 0, 40);
      adm::exclaves::utility::convert_to<audiodsptypes_audiostreambasicdescription_s,CA::StreamDescription>((uint64_t)v36, a3);
      v35 = 0;
      memset(v34, 0, sizeof(v34));
      adm::exclaves::utility::convert_to<audiodsptypes_audiostreambasicdescription_s,CA::StreamDescription>((uint64_t)v34, a4);
      if (a6 > 1)
      {
        v15 = 1651536493;
        adm_log_object = get_adm_log_object();
        if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v20 = "failed to convert latency";
LABEL_22:
          _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, v20, buf, 2u);
          goto LABEL_9;
        }
        goto LABEL_9;
      }
      if (!*(_DWORD *)(a1 + 72))
      {
        v15 = 1768843636;
        adm_log_object = get_adm_log_object();
        if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          v20 = "failed to create refStreamInboundBuffer";
          goto LABEL_22;
        }
LABEL_9:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return v15;
      }
      v29 = 0;
      v30 = &v29;
      v31 = 0x3002000000;
      v32 = __Block_byref_object_copy__13;
      v33 = __Block_byref_object_dispose__14;
      v28[0] = MEMORY[0x24BDAC760];
      v28[1] = 0x40000000;
      v28[2] = ___ZN3adm5graph30ExclaveDSPControllerClientImpl9configureERKN2CA17StreamDescriptionES5_S5_jNS_8exclaves17MicRefLatencyTypeEjj_block_invoke;
      v28[3] = &unk_25083D9E8;
      v28[4] = &v29;
      v45 = 0;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      v52 = 0;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      memset(buf, 0, sizeof(buf));
      v21 = tb_client_connection_message_construct();
      if (v21)
      {
        v22 = v21;
        goto LABEL_25;
      }
      tb_message_encode_u64();
      tb_message_encode_u32();
      tb_message_encode_s64();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_s64();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_s64();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u32();
      tb_message_encode_u8();
      tb_message_encode_u8();
      tb_message_encode_u8();
      tb_message_encode_u8();
      tb_message_complete();
      v39 = 0;
      v22 = tb_connection_send_query();
      if ((v22 & 0xFFFFFFF7) != 0)
        goto LABEL_24;
      v24 = v39;
      if (!v39)
      {
        v22 = 4;
LABEL_24:
        tb_client_connection_message_destruct();
        goto LABEL_25;
      }
      v38 = 0;
      tb_message_decode_u8();
      if ((_BYTE)v38)
      {
        if (v38 != 1)
        {
          tb_client_connection_message_destruct();
          v22 = 7;
LABEL_25:
          v15 = 1970170734;
          v23 = get_adm_log_object();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v22;
            _os_log_error_impl(&dword_236C84000, v23, OS_LOG_TYPE_ERROR, "tb call to configure failed: tbError=%d", buf, 8u);
          }
          goto LABEL_27;
        }
        v46 = 0;
        tb_message_decode_u8();
        if (v46 - 1 >= 6 && v46 != 255)
        {
          _os_crash();
          __break(1u);
          goto LABEL_46;
        }
        HIBYTE(v38) = v46;
      }
      ___ZN3adm5graph30ExclaveDSPControllerClientImpl9configureERKN2CA17StreamDescriptionES5_S5_jNS_8exclaves17MicRefLatencyTypeEjj_block_invoke((uint64_t)v28, v38);
      tb_client_connection_message_destruct();
      v25 = *((unsigned __int8 *)v30 + 40);
      if (v25 == 1)
        a5 = (char *)v30 + 41;
      else
        a5 = 0;
      if (v25 != 1)
      {
        v15 = 0;
LABEL_27:
        _Block_object_dispose(&v29, 8);
        goto LABEL_9;
      }
      v24 = get_adm_log_object();
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
LABEL_39:
        if (*a5 - 1 > 5)
          v15 = 1970170734;
        else
          v15 = dword_236CDD2A4[(*a5 - 1)];
        goto LABEL_27;
      }
LABEL_46:
      v26 = *a5;
      if ((v26 + 1) > 7u)
        v27 = "<unknown>";
      else
        v27 = off_25083BFA0[(v26 + 1)];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v27;
      _os_log_error_impl(&dword_236C84000, v24, OS_LOG_TYPE_ERROR, "tb call to configure failed: failure=%d, %s", buf, 0x12u);
      goto LABEL_39;
    }
  }
  else
  {
    v13 = 0;
  }
  v14 = get_adm_log_object();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_236C84000, v14, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) configure: EK unavailable", buf, 0xCu);
  }
  v15 = 1970431354;
  if (v13)
    goto LABEL_9;
  return v15;
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::ioStarting(adm::graph::ExclaveDSPControllerClientImpl *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *adm_log_object;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t buf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3 && *((_QWORD *)this + 1))
    {
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      *(_OWORD *)buf = 0u;
      v13 = 0u;
      v4 = tb_client_connection_message_construct();
      if (v4)
      {
        v5 = v4;
      }
      else
      {
        tb_message_encode_u64();
        tb_message_complete();
        v5 = tb_connection_send_query();
        tb_client_connection_message_destruct();
        if (!v5)
        {
          v7 = 0;
LABEL_14:
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
          return v7;
        }
      }
      v7 = 1970170734;
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v5;
        _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "tb call to iostarting failed: %d", buf, 8u);
      }
      goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
  }
  v6 = get_adm_log_object();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_236C84000, v6, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) ioStarting: EK unavailable", buf, 0xCu);
  }
  v7 = 0;
  if (v3)
    goto LABEL_14;
  return v7;
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::process(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t result;
  int v23;
  char *v24;
  const char *v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)();
  __int16 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int8 v40;
  uint64_t v41[14];

  v41[13] = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_13;
  }
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5 || !*(_QWORD *)(a1 + 8))
  {
LABEL_13:
    v13 = *(_DWORD *)(a1 + 80);
    if (v13 >= 0x65)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 88) <= 500999)
        goto LABEL_17;
      v13 = *(_DWORD *)(a1 + 80);
    }
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
    *(_DWORD *)(v14 + 16) = 0;
    *(_DWORD *)(v14 + 24) = 2;
    *(_QWORD *)(v14 + 32) = "ControllerClient(%p) process: EK unavailable";
    *(_DWORD *)(v14 + 40) = v13;
    *(_QWORD *)(v14 + 48) = a1;
    *(_QWORD *)v14 = &off_25083DA40;
    *(_QWORD *)(v14 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 96), (caulk::concurrent::message *)v14);
    *(std::chrono::system_clock::time_point *)(a1 + 88) = std::chrono::system_clock::now();
LABEL_17:
    v15 = *(_DWORD *)(a1 + 80);
    if (v15 == -1)
    {
      v16 = 0;
      if (v5)
        goto LABEL_34;
    }
    else
    {
      v16 = 0;
      *(_DWORD *)(a1 + 80) = v15 + 1;
      if (v5)
        goto LABEL_34;
    }
    return v16;
  }
  if (!*(_DWORD *)(a1 + 72))
  {
LABEL_22:
    adm::util::RTLogger::log<>((std::chrono::system_clock::time_point *)(a1 + 80), (uint64_t)"copyDataFromABLToInboundBuffer failed.");
LABEL_24:
    v16 = 1970170734;
    goto LABEL_34;
  }
  v6 = *(_DWORD **)(a2 + 72);
  if (*v6)
  {
    v7 = 0;
    v8 = 0;
    v9 = v6 + 3;
    while (!exclaves_inbound_buffer_copyin())
    {
      v10 = *v9;
      v9 += 4;
      v8 += v10;
      if (++v7 >= (unint64_t)*v6)
        goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_9:
  if (*(_DWORD *)(a2 + 64) != *(_DWORD *)(a1 + 76))
  {
    adm::util::RTLogger::log<unsigned int const&,unsigned int &>((std::chrono::system_clock::time_point *)(a1 + 80), (uint64_t)"IO proc block size %u doesn't match the block size of the ExclaveDSPControllerClient %u", (int *)(a2 + 64), (int *)(a1 + 76));
    goto LABEL_24;
  }
  v27 = 0;
  v28 = &v27;
  v29 = 0x3002000000;
  v30 = __Block_byref_object_copy__20;
  v31 = __Block_byref_object_dispose__21;
  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 0x40000000;
  v26[2] = ___ZN3adm5graph30ExclaveDSPControllerClientImpl7processERKN4AMCP11Proc_StreamE_block_invoke;
  v26[3] = &unk_25083DA10;
  v26[4] = &v27;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  v34 = 0u;
  v35 = 0u;
  memset(v41, 0, 104);
  v11 = tb_client_connection_message_construct();
  if (v11)
  {
    v12 = v11;
    goto LABEL_27;
  }
  tb_message_encode_u64();
  tb_message_encode_f64();
  tb_message_encode_u64();
  tb_message_encode_f64();
  tb_message_encode_u64();
  tb_message_encode_u32();
  tb_message_encode_u32();
  tb_message_complete();
  v33 = 0;
  v12 = tb_connection_send_query();
  if ((v12 & 0xFFFFFFF7) != 0)
    goto LABEL_26;
  if (!v33)
  {
    v12 = 4;
LABEL_26:
    tb_client_connection_message_destruct();
    goto LABEL_27;
  }
  v32 = 0;
  tb_message_decode_u8();
  if (!(_BYTE)v32)
  {
LABEL_45:
    ___ZN3adm5graph30ExclaveDSPControllerClientImpl7processERKN4AMCP11Proc_StreamE_block_invoke((uint64_t)v26, v32);
    tb_client_connection_message_destruct();
    v23 = *((unsigned __int8 *)v28 + 40);
    if (v23 == 1)
      v24 = (char *)v28 + 41;
    else
      v24 = 0;
    if (v23 == 1)
    {
      if ((*v24 + 1) > 4u)
        v25 = "<unknown>";
      else
        v25 = off_25083BFE0[(*v24 + 1)];
      v41[0] = (uint64_t)v25;
      adm::util::RTLogger::log<audiodsputility_processerror_s const&,char const*>((std::chrono::system_clock::time_point *)(a1 + 80), v24, v41);
      if (*v24 - 1 > 2)
        v16 = 1970170734;
      else
        v16 = dword_236CDD2BC[(*v24 - 1)];
    }
    else
    {
      v16 = 0;
    }
    goto LABEL_33;
  }
  if (v32 != 1)
  {
    tb_client_connection_message_destruct();
    v12 = 7;
LABEL_27:
    v17 = *(_DWORD *)(a1 + 80);
    if (v17 >= 0x65)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ - *(_QWORD *)(a1 + 88) <= 500999)
        goto LABEL_31;
      v17 = *(_DWORD *)(a1 + 80);
    }
    v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 56, 8);
    *(_DWORD *)(v18 + 16) = 0;
    *(_DWORD *)(v18 + 24) = 3;
    *(_QWORD *)(v18 + 32) = "tb call to process failed: tbError=%d";
    *(_DWORD *)(v18 + 40) = v17;
    *(_DWORD *)(v18 + 44) = v12;
    *(_QWORD *)v18 = &off_25083DB48;
    *(_QWORD *)(v18 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 96), (caulk::concurrent::message *)v18);
    *(std::chrono::system_clock::time_point *)(a1 + 88) = std::chrono::system_clock::now();
LABEL_31:
    v16 = 1970170734;
    v19 = *(_DWORD *)(a1 + 80);
    if (v19 != -1)
      *(_DWORD *)(a1 + 80) = v19 + 1;
LABEL_33:
    _Block_object_dispose(&v27, 8);
LABEL_34:
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    return v16;
  }
  v40 = 0;
  tb_message_decode_u8();
  if (v40 - 1 < 3 || v40 == 255)
  {
    HIBYTE(v32) = v40;
    goto LABEL_45;
  }
  result = _os_crash();
  __break(1u);
  return result;
}

void sub_236CB5594(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::ioStopped(adm::graph::ExclaveDSPControllerClientImpl *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *adm_log_object;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint8_t buf[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3 && *((_QWORD *)this + 1))
    {
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      *(_OWORD *)buf = 0u;
      v13 = 0u;
      v4 = tb_client_connection_message_construct();
      if (v4)
      {
        v5 = v4;
      }
      else
      {
        tb_message_encode_u64();
        tb_message_complete();
        v5 = tb_connection_send_query();
        tb_client_connection_message_destruct();
        if (!v5)
        {
          v7 = 0;
LABEL_14:
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
          return v7;
        }
      }
      v7 = 1970170734;
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v5;
        _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "tb call to iostopped failed: %d", buf, 8u);
      }
      goto LABEL_14;
    }
  }
  else
  {
    v3 = 0;
  }
  v6 = get_adm_log_object();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_236C84000, v6, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) ioStopped: EK unavailable", buf, 0xCu);
  }
  v7 = 0;
  if (v3)
    goto LABEL_14;
  return v7;
}

BOOL adm::graph::ExclaveDSPControllerClientImpl::hasInputParameter(adm::graph::ExclaveDSPControllerClientImpl *this, __int32 a2)
{
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;

  v3 = (__int32 *)*((_QWORD *)this + 4);
  v4 = wmemchr(*((__int32 **)this + 3), a2, ((uint64_t)v3 - *((_QWORD *)this + 3)) >> 2);
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  return v5 != *((__int32 **)this + 4);
}

BOOL adm::graph::ExclaveDSPControllerClientImpl::hasOutputParameter(adm::graph::ExclaveDSPControllerClientImpl *this, __int32 a2)
{
  __int32 *v3;
  __int32 *v4;
  __int32 *v5;

  v3 = (__int32 *)*((_QWORD *)this + 7);
  v4 = wmemchr(*((__int32 **)this + 6), a2, ((uint64_t)v3 - *((_QWORD *)this + 6)) >> 2);
  if (v4)
    v5 = v4;
  else
    v5 = v3;
  return v5 != *((__int32 **)this + 7);
}

_QWORD *adm::graph::ExclaveDSPControllerClientImpl::getInputParameterIDs@<X0>(adm::graph::ExclaveDSPControllerClientImpl *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2);
}

_QWORD *adm::graph::ExclaveDSPControllerClientImpl::getOutputParameterIDs@<X0>(adm::graph::ExclaveDSPControllerClientImpl *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *((const void **)this + 6), *((_QWORD *)this + 7), (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2);
}

void adm::graph::ExclaveDSPControllerClientImpl::getParameter(adm::graph::ExclaveDSPControllerClientImpl *this@<X0>, __int32 a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  const char *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  __n128 (*v33)(uint64_t, uint64_t);
  uint64_t (*v34)();
  int v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _OWORD v47[6];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  v35 = a2;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7 && *((_QWORD *)this + 1))
    {
      v8 = (__int32 *)*((_QWORD *)this + 7);
      v9 = wmemchr(*((__int32 **)this + 6), a2, ((uint64_t)v8 - *((_QWORD *)this + 6)) >> 2);
      if (v9)
        v10 = v9;
      else
        v10 = v8;
      if (v10 == *((__int32 **)this + 7))
      {
        v11 = "getParameter(%d): parameter not supported";
      }
      else
      {
        v11 = "getParameter(%d): converting id to ex id failed";
        if (a2 <= 1936748645)
        {
          if (a2 == 1651797616 || a2 == 1936748642)
          {
LABEL_27:
            v30 = 0;
            v31 = &v30;
            v32 = 0x4002000000;
            v33 = __Block_byref_object_copy__48;
            v34 = __Block_byref_object_dispose__49;
            v29[0] = MEMORY[0x24BDAC760];
            v29[1] = 0x40000000;
            v29[2] = ___ZNK3adm5graph30ExclaveDSPControllerClientImpl12getParameterEj_block_invoke;
            v29[3] = &unk_25083DBF0;
            v29[4] = &v30;
            v46 = 0;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v41 = 0u;
            v48 = 0;
            memset(v47, 0, sizeof(v47));
            v15 = tb_client_connection_message_construct();
            if (v15)
            {
              v16 = v15;
              goto LABEL_31;
            }
            tb_message_encode_u64();
            tb_message_encode_u8();
            tb_message_complete();
            v40 = 0;
            v16 = tb_connection_send_query();
            if ((v16 & 0xFFFFFFF7) != 0)
              goto LABEL_30;
            if (!v40)
            {
              v16 = 4;
LABEL_30:
              tb_client_connection_message_destruct();
              goto LABEL_31;
            }
            v38 = 0uLL;
            v39 = 0;
            tb_message_decode_u8();
            if (v38.n128_u8[0] != 1)
            {
              if (v38.n128_u8[0])
              {
                tb_client_connection_message_destruct();
                v16 = 7;
LABEL_31:
                v17 = *((_DWORD *)this + 20);
                if (v17 >= 0x65)
                {
                  if (std::chrono::system_clock::now().__d_.__rep_ - *((_QWORD *)this + 11) <= 500999)
                  {
LABEL_35:
                    v19 = *((_DWORD *)this + 20);
                    if (v19 != -1)
                      *((_DWORD *)this + 20) = v19 + 1;
                    v20 = 0;
                    v21 = 1970170734;
                    goto LABEL_38;
                  }
                  v17 = *((_DWORD *)this + 20);
                }
                v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
                *(_DWORD *)(v18 + 16) = 0;
                *(_DWORD *)(v18 + 24) = 3;
                *(_QWORD *)(v18 + 32) = "getParameter(%d): tb call failed: tbError=%d";
                *(_DWORD *)(v18 + 40) = v17;
                *(_DWORD *)(v18 + 44) = a2;
                *(_DWORD *)(v18 + 48) = v16;
                *(_QWORD *)v18 = &off_25083DC78;
                *(_QWORD *)(v18 + 8) = 0;
                caulk::concurrent::messenger::enqueue((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), (caulk::concurrent::message *)v18);
                *((std::chrono::system_clock::time_point *)this + 11) = std::chrono::system_clock::now();
                goto LABEL_35;
              }
              tb_message_decode_u64();
              if (v38.n128_i64[1] <= 0x23580A01CC35D89DLL)
              {
                if (v38.n128_u64[1] != 0xBA94426FF040F022 && v38.n128_u64[1] != 0xE9CAC24E271E1010)
                  goto LABEL_82;
              }
              else if (v38.n128_u64[1] != 0x23580A01CC35D89ELL)
              {
                if (v38.n128_u64[1] == 0x5DD696EC90A5CD44)
                {
                  tb_message_decode_f32();
                  goto LABEL_63;
                }
                if (v38.n128_u64[1] != 0x7F1E21C17219CAE8)
                {
LABEL_82:
                  _os_crash();
                  __break(1u);
                  return;
                }
                v36.n128_u8[0] = 0;
                tb_message_decode_u8();
                if (v36.n128_u8[0] <= 6u)
                {
                  LOBYTE(v39) = v36.n128_u8[0];
LABEL_63:
                  v36 = v38;
                  v37 = v39;
                  ___ZNK3adm5graph30ExclaveDSPControllerClientImpl12getParameterEj_block_invoke((uint64_t)v29, &v36);
                  tb_client_connection_message_destruct();
                  v24 = *((unsigned __int8 *)v31 + 40);
                  if (v24 == 1)
                    v25 = (char *)(v31 + 6);
                  else
                    v25 = 0;
                  if (v24 == 1)
                  {
                    if ((*v25 + 1) > 4u)
                      v26 = "<unknown>";
                    else
                      v26 = off_25083C008[(*v25 + 1)];
                    *(_QWORD *)&v47[0] = v26;
                    adm::util::RTLogger::log<unsigned int &,audiodsputility_parametererror_s const&,char const*>((std::chrono::system_clock::time_point *)this + 10, &v35, v25, (uint64_t *)v47);
                    if (*v25 - 1 > 2)
                      v21 = 1970170734;
                    else
                      v21 = dword_236CDD2C8[(*v25 - 1)];
                    v20 = 0;
LABEL_38:
                    *(_QWORD *)a3 = v21;
LABEL_39:
                    *(_BYTE *)(a3 + 16) = v20;
                    _Block_object_dispose(&v30, 8);
LABEL_40:
                    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
                    do
                      v23 = __ldaxr(p_shared_owners);
                    while (__stlxr(v23 - 1, p_shared_owners));
                    if (!v23)
                    {
                      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                      std::__shared_weak_count::__release_weak(v7);
                    }
                    return;
                  }
                  if (*((_BYTE *)v31 + 40))
                    v27 = 0;
                  else
                    v27 = (uint64_t)(v31 + 6);
                  v28 = adm::exclaves::utility::convert_to<std::optional<float>,audiodsputility_parametervalue_s>(v27);
                  if (HIDWORD(v28))
                  {
                    *(_DWORD *)a3 = v28;
                    v20 = 1;
                    goto LABEL_39;
                  }
                  adm::util::RTLogger::log<unsigned int &>((std::chrono::system_clock::time_point *)this + 10, (uint64_t)"getParameter(%d): value conversion failed", &v35);
                  _Block_object_dispose(&v30, 8);
LABEL_24:
                  *(_QWORD *)a3 = 1651536493;
                  *(_BYTE *)(a3 + 16) = 0;
                  goto LABEL_40;
                }
LABEL_81:
                _os_crash();
                __break(1u);
                goto LABEL_82;
              }
              tb_message_decode_BOOL();
              goto LABEL_63;
            }
            v36.n128_u8[0] = 0;
            tb_message_decode_u8();
            if (v36.n128_u8[0] - 1 < 3 || v36.n128_u8[0] == 255)
            {
              v38.n128_u8[8] = v36.n128_u8[0];
              goto LABEL_63;
            }
            _os_crash();
            __break(1u);
            goto LABEL_81;
          }
        }
        else if (a2 == 1936748646 || a2 == 1969844082 || a2 == 1987339878)
        {
          goto LABEL_27;
        }
      }
      adm::util::RTLogger::log<unsigned int &>((std::chrono::system_clock::time_point *)this + 10, (uint64_t)v11, &v35);
      goto LABEL_24;
    }
  }
  else
  {
    v7 = 0;
  }
  v12 = *((_DWORD *)this + 20);
  if (v12 >= 0x65)
  {
    if (std::chrono::system_clock::now().__d_.__rep_ - *((_QWORD *)this + 11) <= 500999)
      goto LABEL_18;
    v12 = *((_DWORD *)this + 20);
  }
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 72, 8);
  *(_DWORD *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 24) = 2;
  *(_QWORD *)(v13 + 32) = "ControllerClient(%p) getParameter(%d): EK unavailable";
  *(_DWORD *)(v13 + 40) = v12;
  *(_QWORD *)(v13 + 48) = this;
  *(_DWORD *)(v13 + 56) = a2;
  *(_QWORD *)v13 = &off_25083DC20;
  *(_QWORD *)(v13 + 8) = 0;
  caulk::concurrent::messenger::enqueue((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), (caulk::concurrent::message *)v13);
  *((std::chrono::system_clock::time_point *)this + 11) = std::chrono::system_clock::now();
LABEL_18:
  v14 = *((_DWORD *)this + 20);
  if (v14 != -1)
    *((_DWORD *)this + 20) = v14 + 1;
  *(_QWORD *)a3 = 1970431354;
  *(_BYTE *)(a3 + 16) = 0;
  if (v7)
    goto LABEL_40;
}

void sub_236CB5F4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t adm::graph::ExclaveDSPControllerClientImpl::setParameter(adm::graph::ExclaveDSPControllerClientImpl *this, __int32 a2, float a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  __int32 *v8;
  __int32 *v9;
  __int32 *v10;
  const char *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int64_t v17;
  int v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t result;
  int v23;
  char *v24;
  const char *v25;
  _QWORD v26[5];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)();
  float v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  _OWORD v36[5];
  uint64_t v37;
  unsigned __int8 v38;
  _OWORD v39[6];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v33 = a2;
  v32 = a3;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_14;
  }
  v7 = std::__shared_weak_count::lock(v6);
  if (!v7 || !*((_QWORD *)this + 1))
  {
LABEL_14:
    v13 = *((_DWORD *)this + 20);
    if (v13 >= 0x65)
    {
      if (std::chrono::system_clock::now().__d_.__rep_ - *((_QWORD *)this + 11) < 501000)
        goto LABEL_18;
      v13 = *((_DWORD *)this + 20);
    }
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 72, 8);
    *(_DWORD *)(v14 + 16) = 0;
    *(_DWORD *)(v14 + 24) = 2;
    *(_QWORD *)(v14 + 32) = "ControllerClient(%p) setParameter(%d, %f): EK unavailable";
    *(_DWORD *)(v14 + 40) = v13;
    *(_QWORD *)(v14 + 48) = this;
    *(_DWORD *)(v14 + 56) = a2;
    *(float *)(v14 + 60) = a3;
    *(_QWORD *)v14 = &off_25083DDA8;
    *(_QWORD *)(v14 + 8) = 0;
    caulk::concurrent::messenger::enqueue((adm::graph::ExclaveDSPControllerClientImpl *)((char *)this + 96), (caulk::concurrent::message *)v14);
    *((std::chrono::system_clock::time_point *)this + 11) = std::chrono::system_clock::now();
LABEL_18:
    v15 = *((_DWORD *)this + 20);
    if (v15 != -1)
      *((_DWORD *)this + 20) = v15 + 1;
    v16 = 1970431354;
    if (!v7)
      return v16;
    goto LABEL_48;
  }
  v8 = (__int32 *)*((_QWORD *)this + 4);
  v9 = wmemchr(*((__int32 **)this + 3), a2, ((uint64_t)v8 - *((_QWORD *)this + 3)) >> 2);
  if (v9)
    v10 = v9;
  else
    v10 = v8;
  if (v10 == *((__int32 **)this + 4))
  {
    v11 = "setParameter(%d, %f): parameter not supported";
    goto LABEL_23;
  }
  v11 = "setParameter(%d, %f): converting id to ex id failed";
  if (a2 <= 1936748645)
  {
    if (a2 == 1651797616)
    {
      v12 = 0x23580A01CC35D89ELL;
    }
    else
    {
      if (a2 != 1936748642)
        goto LABEL_23;
      v12 = 0xBA94426FF040F022;
    }
  }
  else
  {
    switch(a2)
    {
      case 1987339878:
        v12 = 0xE9CAC24E271E1010;
        break;
      case 1969844082:
        if ((int)a3 > 6)
        {
          v11 = "setParameter(%d, %f): converting value to tb failed";
          goto LABEL_23;
        }
        v12 = 0x7F1E21C17219CAE8;
        break;
      case 1936748646:
        v12 = 0x5DD696EC90A5CD44;
        break;
      default:
LABEL_23:
        adm::util::RTLogger::log<unsigned int &,float &>((std::chrono::system_clock::time_point *)this + 10, (uint64_t)v11, &v33, (int *)&v32);
        v16 = 1651536493;
        goto LABEL_48;
    }
  }
  v27 = 0;
  v28 = &v27;
  v29 = 0x3002000000;
  v30 = __Block_byref_object_copy__86;
  v31 = __Block_byref_object_dispose__87;
  v26[0] = MEMORY[0x24BDAC760];
  v26[1] = 0x40000000;
  v26[2] = ___ZN3adm5graph30ExclaveDSPControllerClientImpl12setParameterEjf_block_invoke;
  v26[3] = &unk_25083DD78;
  v26[4] = &v27;
  v17 = v12 & 0xFFDEFFEFFFFFFFFFLL;
  v37 = 0;
  memset(v36, 0, sizeof(v36));
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  v18 = tb_client_connection_message_construct();
  if (v18)
  {
    LODWORD(v36[0]) = v18;
LABEL_45:
    adm::util::RTLogger::log<unsigned int &,float &,tb_error_t &>((std::chrono::system_clock::time_point *)this + 10, &v33, (int *)&v32, (int *)v36);
    goto LABEL_46;
  }
  tb_message_encode_u64();
  tb_message_encode_u8();
  tb_message_encode_u64();
  if (v17 <= 0x23580A01CC35D89DLL)
  {
    if (v17 != 0xBA94426FF040F022 && v17 != 0xE9CAC24E271E1010)
      goto LABEL_43;
LABEL_40:
    tb_message_encode_BOOL();
    goto LABEL_43;
  }
  switch(v17)
  {
    case 0x23580A01CC35D89ELL:
      goto LABEL_40;
    case 0x5DD696EC90A5CD44:
      tb_message_encode_f32();
      break;
    case 0x7F1E21C17219CAE8:
      tb_message_encode_u8();
      break;
  }
LABEL_43:
  tb_message_complete();
  v35 = 0;
  v19 = tb_connection_send_query();
  if ((v19 & 0xFFFFFFF7) != 0)
  {
LABEL_44:
    tb_client_connection_message_destruct();
    LODWORD(v36[0]) = v19;
    goto LABEL_45;
  }
  if (!v35)
  {
    v19 = 4;
    goto LABEL_44;
  }
  v34 = 0;
  tb_message_decode_u8();
  if (!(_BYTE)v34)
  {
LABEL_59:
    ___ZN3adm5graph30ExclaveDSPControllerClientImpl12setParameterEjf_block_invoke((uint64_t)v26, v34);
    tb_client_connection_message_destruct();
    v16 = 0;
    LODWORD(v36[0]) = 0;
    v23 = *((unsigned __int8 *)v28 + 40);
    if (v23 == 1)
      v24 = (char *)v28 + 41;
    else
      v24 = 0;
    if (v23 != 1)
      goto LABEL_47;
    if ((*v24 + 1) > 4u)
      v25 = "<unknown>";
    else
      v25 = off_25083C008[(*v24 + 1)];
    *(_QWORD *)&v39[0] = v25;
    adm::util::RTLogger::log<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>((std::chrono::system_clock::time_point *)this + 10, &v33, (int *)&v32, v24, (uint64_t *)v39);
    if (*v24 - 1 <= 2)
    {
      v16 = dword_236CDD2C8[(*v24 - 1)];
      goto LABEL_47;
    }
LABEL_46:
    v16 = 1970170734;
LABEL_47:
    _Block_object_dispose(&v27, 8);
LABEL_48:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return v16;
  }
  if (v34 != 1)
  {
    tb_client_connection_message_destruct();
    LODWORD(v36[0]) = 7;
    goto LABEL_45;
  }
  v38 = 0;
  tb_message_decode_u8();
  if (v38 - 1 < 3 || v38 == 255)
  {
    HIBYTE(v34) = v38;
    goto LABEL_59;
  }
  result = _os_crash();
  __break(1u);
  return result;
}

void sub_236CB6598(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,float &>(std::chrono::system_clock::time_point *a1, uint64_t a2, int *a3, int *a4)
{
  int rep;
  std::chrono::system_clock::time_point result;
  int v10;
  int v11;
  uint64_t v12;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v10 = *a3;
  v11 = *a4;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
  *(_DWORD *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 24) = 3;
  *(_QWORD *)(v12 + 32) = a2;
  *(_DWORD *)(v12 + 40) = rep;
  *(_DWORD *)(v12 + 44) = v10;
  *(_DWORD *)(v12 + 48) = v11;
  *(_QWORD *)v12 = &off_25083DE00;
  *(_QWORD *)(v12 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v12);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

uint64_t __Block_byref_object_copy__86(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl12setParameterEjf_block_invoke(uint64_t result, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,float &,tb_error_t &>(std::chrono::system_clock::time_point *a1, int *a2, int *a3, int *a4)
{
  int rep;
  std::chrono::system_clock::time_point result;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v10 = *a2;
  v11 = *a3;
  v12 = *a4;
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
  *(_DWORD *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 24) = 3;
  *(_QWORD *)(v13 + 32) = "setParameter(%d, %f): tb call failed: tbError=%d";
  *(_DWORD *)(v13 + 40) = rep;
  *(_DWORD *)(v13 + 44) = v10;
  *(_DWORD *)(v13 + 48) = v11;
  *(_DWORD *)(v13 + 52) = v12;
  *(_QWORD *)v13 = &off_25083DE58;
  *(_QWORD *)(v13 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v13);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(std::chrono::system_clock::time_point *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  int rep;
  std::chrono::system_clock::time_point result;
  int v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v12 = *a2;
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 72, 8);
  *(_DWORD *)(v16 + 16) = 0;
  *(_DWORD *)(v16 + 24) = 3;
  *(_QWORD *)(v16 + 32) = "setParameter(%d, %f): tb call failed: failure=%d, %s";
  *(_DWORD *)(v16 + 40) = rep;
  *(_DWORD *)(v16 + 44) = v12;
  *(_DWORD *)(v16 + 48) = v13;
  *(_BYTE *)(v16 + 52) = v14;
  *(_QWORD *)(v16 + 56) = v15;
  *(_QWORD *)v16 = &off_25083DEB0;
  *(_QWORD *)(v16 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v16);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44), *(float *)(a1 + 48), *(unsigned __int8 *)(a1 + 52), *(_QWORD *)(a1 + 56), a1);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,float &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 72, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44), *(float *)(a1 + 48), *(unsigned int *)(a1 + 52));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,float &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44), *(float *)(a1 + 48), a1);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,float &>(adm::util::RTLogLevel,char const*,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), *(float *)(a1 + 60));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl *,unsigned int &,float &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 72, 8);
  return a1;
}

__n128 __Block_byref_object_copy__48(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 ___ZNK3adm5graph30ExclaveDSPControllerClientImpl12getParameterEj_block_invoke(uint64_t a1, __n128 *a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  result = *a2;
  *(_QWORD *)(v2 + 56) = a2[1].n128_u64[0];
  *(__n128 *)(v2 + 40) = result;
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<unsigned int &,audiodsputility_parametererror_s const&,char const*>(std::chrono::system_clock::time_point *a1, int *a2, char *a3, uint64_t *a4)
{
  int rep;
  std::chrono::system_clock::time_point result;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v10 = *a2;
  v11 = *a3;
  v12 = *a4;
  v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 72, 8);
  *(_DWORD *)(v13 + 16) = 0;
  *(_DWORD *)(v13 + 24) = 3;
  *(_QWORD *)(v13 + 32) = "getParameter(%d): tb call failed: failure=%d, %s";
  *(_DWORD *)(v13 + 40) = rep;
  *(_DWORD *)(v13 + 44) = v10;
  *(_BYTE *)(v13 + 48) = v11;
  *(_QWORD *)(v13 + 56) = v12;
  *(_QWORD *)v13 = &off_25083DCD0;
  *(_QWORD *)(v13 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v13);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 56));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,audiodsputility_parametererror_s const&,char const*>(adm::util::RTLogLevel,char const*,unsigned int &,audiodsputility_parametererror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 72, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), a1);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<unsigned int &,tb_error_t &>(adm::util::RTLogLevel,char const*,unsigned int &,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56), a1);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl const*,unsigned int &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 72, 8);
  return a1;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl7processERKN4AMCP11Proc_StreamE_block_invoke(uint64_t result, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

std::chrono::system_clock::time_point adm::util::RTLogger::log<audiodsputility_processerror_s const&,char const*>(std::chrono::system_clock::time_point *a1, char *a2, uint64_t *a3)
{
  int rep;
  std::chrono::system_clock::time_point result;
  char v8;
  uint64_t v9;
  uint64_t v10;

  rep = a1->__d_.__rep_;
  if (LODWORD(a1->__d_.__rep_) >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[1].__d_.__rep_ < 501000)
      goto LABEL_5;
    rep = a1->__d_.__rep_;
  }
  v8 = *a2;
  v9 = *a3;
  v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
  *(_DWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) = 3;
  *(_QWORD *)(v10 + 32) = "tb call to process failed: failure=%d, %s";
  *(_DWORD *)(v10 + 40) = rep;
  *(_BYTE *)(v10 + 44) = v8;
  *(_QWORD *)(v10 + 48) = v9;
  *(_QWORD *)v10 = &off_25083DBA0;
  *(_QWORD *)(v10 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[2], (caulk::concurrent::message *)v10);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[1].__d_.__rep_ = result.__d_.__rep_;
LABEL_5:
  if (LODWORD(a1->__d_.__rep_) != -1)
    ++LODWORD(a1->__d_.__rep_);
  return result;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned __int8 *)(a1 + 44), *(_QWORD *)(a1 + 48), a1);
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<audiodsputility_processerror_s const&,char const*>(adm::util::RTLogLevel,char const*,audiodsputility_processerror_s const&,char const* &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<tb_error_t &>(adm::util::RTLogLevel,char const*,tb_error_t &)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 56, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(_QWORD *)(a1 + 48));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<adm::graph::ExclaveDSPControllerClientImpl *>(adm::util::RTLogLevel,char const*,adm::graph::ExclaveDSPControllerClientImpl * &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl9configureERKN2CA17StreamDescriptionES5_S5_jNS_8exclaves17MicRefLatencyTypeEjj_block_invoke(uint64_t result, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

void adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(adm::graph::ExclaveDSPControllerClientImpl *this)
{
  NSObject *adm_log_object;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  int v5;
  int v6;
  NSObject *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  NSObject *v14;
  uint64_t *v15;
  int v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)();
  __int16 v27;
  NSObject *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint8_t buf[32];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_25083D918;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) destroyed", buf, 0xCu);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4 && *((_QWORD *)this + 1))
    {
      v22 = 0;
      v23 = &v22;
      v24 = 0x3002000000;
      v25 = __Block_byref_object_copy_;
      v26 = __Block_byref_object_dispose_;
      v21[0] = MEMORY[0x24BDAC760];
      v21[1] = 0x40000000;
      v21[2] = ___ZN3adm5graph30ExclaveDSPControllerClientImpl11unconfigureEv_block_invoke;
      v21[3] = &unk_25083D9C0;
      v21[4] = &v22;
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      v29 = 0u;
      v30 = 0u;
      v41 = 0;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      memset(buf, 0, sizeof(buf));
      v5 = tb_client_connection_message_construct();
      if (v5)
      {
        v6 = v5;
LABEL_15:
        v8 = get_adm_log_object();
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
LABEL_16:
          _Block_object_dispose(&v22, 8);
LABEL_17:
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
          goto LABEL_21;
        }
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v6;
        v18 = "tb call to unconfigure failed: tbError=%d";
        v19 = v8;
        v20 = 8;
LABEL_38:
        _os_log_error_impl(&dword_236C84000, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
        goto LABEL_16;
      }
      tb_message_encode_u64();
      tb_message_complete();
      v28 = 0;
      v6 = tb_connection_send_query();
      if ((v6 & 0xFFFFFFF7) != 0)
      {
LABEL_14:
        tb_client_connection_message_destruct();
        goto LABEL_15;
      }
      v14 = v28;
      if (!v28)
      {
        v6 = 4;
        goto LABEL_14;
      }
      v27 = 0;
      tb_message_decode_u8();
      if ((_BYTE)v27)
      {
        if (v27 != 1)
        {
          tb_client_connection_message_destruct();
          v6 = 7;
          goto LABEL_15;
        }
        v35 = 0;
        tb_message_decode_u8();
        if (v35 - 1 >= 6 && v35 != 255)
        {
          _os_crash();
          __break(1u);
          goto LABEL_43;
        }
        HIBYTE(v27) = v35;
      }
      ___ZN3adm5graph30ExclaveDSPControllerClientImpl11unconfigureEv_block_invoke((uint64_t)v21, v27);
      tb_client_connection_message_destruct();
      v15 = v23;
      if (*((_BYTE *)v23 + 40) != 1)
        goto LABEL_16;
      v14 = get_adm_log_object();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        goto LABEL_16;
      v16 = *((unsigned __int8 *)v15 + 41);
      if ((v16 + 1) <= 7u)
      {
        v17 = off_25083BFA0[(v16 + 1)];
LABEL_44:
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v16;
        *(_WORD *)&buf[8] = 2080;
        *(_QWORD *)&buf[10] = v17;
        v18 = "tb call to unconfigure failed: failure=%d, %s";
        v19 = v14;
        v20 = 18;
        goto LABEL_38;
      }
LABEL_43:
      v17 = "<unknown>";
      goto LABEL_44;
    }
  }
  else
  {
    v4 = 0;
  }
  v7 = get_adm_log_object();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = this;
    _os_log_impl(&dword_236C84000, v7, OS_LOG_TYPE_DEFAULT, "ControllerClient(%p) unconfigure: EK unavailable", buf, 0xCu);
  }
  if (v4)
    goto LABEL_17;
LABEL_21:
  MEMORY[0x23B801004]((char *)this + 96);
  caulk::mach::mach_port::~mach_port((mach_port_name_t *)this + 18);
  v11 = (void *)*((_QWORD *)this + 6);
  if (v11)
  {
    *((_QWORD *)this + 7) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 3);
  if (v12)
  {
    *((_QWORD *)this + 4) = v12;
    operator delete(v12);
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x23B801508);
}

void caulk::mach::mach_port::~mach_port(mach_port_name_t *this)
{
  if (*this)
    mach_port_deallocate(*MEMORY[0x24BDAEC58], *this);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN3adm5graph30ExclaveDSPControllerClientImpl11unconfigureEv_block_invoke(uint64_t result, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 40) = a2;
  return result;
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_236CB9038(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<adm::graph::ExclaveDSPControllerClientImpl::ExclaveDSPControllerClientImpl(std::weak_ptr<audiodspcontroller_audiodspcontrol_s>,std::initializer_list<unsigned int>,std::initializer_list<unsigned int>,adm::exclaves::UseCase)::{lambda(void)#1} &&>>()
{
  uint64_t (*v0)(void);
  NSObject *adm_log_object;
  _Unwind_Exception *v2;
  uint8_t buf[8];
  uint64_t v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v0 = (uint64_t (*)(void))getAudioCaptureInitializeSymbolLoc(void)::ptr;
  v11 = getAudioCaptureInitializeSymbolLoc(void)::ptr;
  if (!getAudioCaptureInitializeSymbolLoc(void)::ptr)
  {
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    v4 = 0x40000000;
    v5 = ___ZL34getAudioCaptureInitializeSymbolLocv_block_invoke;
    v6 = &unk_25083D998;
    v7 = &v8;
    ___ZL34getAudioCaptureInitializeSymbolLocv_block_invoke((uint64_t)buf);
    v0 = (uint64_t (*)(void))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v0)
  {
    dlerror();
    v2 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v2);
  }
  if ((v0() & 1) == 0)
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "failed to initialize AudioCapture", buf, 2u);
    }
  }
}

void adm::graph::ExclaveDSPControllerClientSiri::~ExclaveDSPControllerClientSiri(adm::graph::ExclaveDSPControllerClientSiri *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x23B801508);
}

void adm::graph::ExclaveDSPControllerClientMTD::~ExclaveDSPControllerClientMTD(adm::graph::ExclaveDSPControllerClientMTD *this)
{
  adm::graph::ExclaveDSPControllerClientImpl::~ExclaveDSPControllerClientImpl(this);
  JUMPOUT(0x23B801508);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,`anonymous namespace'::getControllerEK(unsigned long long,char const*)::ControllerInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,`anonymous namespace'::getControllerEK(unsigned long long,char const*)::ControllerInfo>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v2 + 32);
    operator delete(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<audiodspcontroller_audiodspcontrol_s *,`anonymous namespace'::getControllerEK(unsigned long long,char const*)::$_0,std::allocator<audiodspcontroller_audiodspcontrol_s>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

uint64_t std::__shared_ptr_pointer<audiodspcontroller_audiodspcontrol_s *,`anonymous namespace'::getControllerEK(unsigned long long,char const*)::$_0,std::allocator<audiodspcontroller_audiodspcontrol_s>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_115getControllerEKEyPKcE3$_0"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void adm::graph::VoiceProcessorUplinkKernel::~VoiceProcessorUplinkKernel(adm::graph::VoiceProcessorUplinkKernel *this)
{
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 192);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  adm::graph::DSPKernel::~DSPKernel(this);
}

{
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 192);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  adm::graph::DSPKernel::~DSPKernel(this);
  JUMPOUT(0x23B801508);
}

uint64_t adm::graph::VoiceProcessorKernel::operator==()
{
  return 0;
}

uint64_t adm::graph::VoiceProcessorKernel::supportsClientIOHandler(adm::graph::VoiceProcessorKernel *this)
{
  return 1;
}

std::chrono::system_clock::time_point adm::graph::VoiceProcessorUplinkKernel::doClientIO(std::chrono::system_clock::time_point *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7)
{
  std::chrono::system_clock::time_point result;
  uint64_t i;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep rep;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 *v33;
  char v34;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v35;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[21];
  uint64_t v48;
  _OWORD v49[4];
  int v50;
  char v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  int v57;
  char v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v43 = adm::graph::DSPKernel::doClientIOPreProcessing(a1, a5, a4);
  if (v43)
    return adm::util::RTLogger::log<int &>(a1 + 16, (uint64_t)"doClientIOPreProcessing returns error %u", &v43);
  for (i = 0; i != 10; i += 5)
  {
    v15 = &v49[i];
    *((_QWORD *)v15 + 9) = 0;
    *v15 = 0uLL;
    v15[1] = 0uLL;
    v15[2] = 0uLL;
    v15[3] = 0uLL;
    *(_QWORD *)((char *)v15 + 61) = 0;
  }
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  memset(v47, 0, sizeof(v47));
  v16 = *(_OWORD *)(a5 + 16);
  v49[0] = *(_OWORD *)a5;
  v49[1] = v16;
  v17 = *(_OWORD *)(a5 + 48);
  v19 = *(_OWORD *)a5;
  v18 = *(_OWORD *)(a5 + 16);
  v49[2] = *(_OWORD *)(a5 + 32);
  v49[3] = v17;
  v48 = 0;
  v50 = *(_DWORD *)(a5 + 64);
  v51 = *(_BYTE *)(a5 + 68);
  v52 = a1[22].__d_.__rep_ + 48;
  v53 = v19;
  v54 = v18;
  v20 = *(_OWORD *)(a5 + 48);
  v55 = *(_OWORD *)(a5 + 32);
  v56 = v20;
  v57 = v50;
  v58 = v51;
  v59 = a1[24].__d_.__rep_ + 48;
  if (a6)
  {
    rep = a1[13].__d_.__rep_;
    v22 = a1[14].__d_.__rep_;
    v23 = a7[1];
    v44 = *a7;
    v45 = v23;
    v24 = a7[3];
    v46 = a7[2];
    *(_OWORD *)v47 = v24;
    v25 = v22 - rep;
    if (v22 == rep)
LABEL_11:
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v26 = 0;
    v27 = v25 >> 3;
    v28 = a7 + 5;
    v29 = v49;
    while (a6 - 1 != v26)
    {
      ++v26;
      v30 = v28[1];
      *v29 = *v28;
      v29[1] = v30;
      v31 = v28[3];
      v29[2] = v28[2];
      v29[3] = v31;
      v28 += 5;
      v29 += 5;
      if (v27 == v26)
        goto LABEL_11;
    }
    v32 = *(_QWORD *)(rep + 8 * v26) + 48;
    v33 = &a7[5 * v26];
    v34 = *((_BYTE *)v33 + 68);
    LODWORD(v33) = *((_DWORD *)v33 + 16);
    v48 = v32;
    *(_DWORD *)&v47[16] = (_DWORD)v33;
    v47[20] = v34;
  }
  v35 = a1[20].__d_.__rep_;
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v35 + 8)))
    v36 = v35;
  else
    v36 = 0;
  (*(void (**)(uint64_t *__return_ptr, std::chrono::duration<long long, std::ratio<1, 1000000>>::rep, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, __int128 *))(*(_QWORD *)v36 + 56))(&v41, v36, a2, a3, 2, v49, a6, &v44);
  if (v42)
  {
    result.__d_.__rep_ = adm::graph::DSPKernel::doClientIOPostProcessing(a1, (uint64_t)a7, a6);
    v43 = result.__d_.__rep_;
    if (LODWORD(result.__d_.__rep_))
      return adm::util::RTLogger::log<int &>(a1 + 16, (uint64_t)"doClientIOPostProcessing returns error %u", &v43);
    return result;
  }
  v37 = v41;
  v38 = a1[16].__d_.__rep_;
  if (v38 >= 0x65)
  {
    result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (result.__d_.__rep_ - a1[17].__d_.__rep_ < 501000)
      goto LABEL_23;
    v38 = a1[16].__d_.__rep_;
  }
  v39 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 56, 8);
  *(_DWORD *)(v39 + 16) = 0;
  *(_DWORD *)(v39 + 24) = 3;
  *(_QWORD *)(v39 + 32) = "clientIO has error %u";
  *(_DWORD *)(v39 + 40) = v38;
  *(_DWORD *)(v39 + 44) = v37;
  *(_QWORD *)v39 = &off_25083E398;
  *(_QWORD *)(v39 + 8) = 0;
  caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&a1[18], (caulk::concurrent::message *)v39);
  result.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  a1[17].__d_.__rep_ = result.__d_.__rep_;
LABEL_23:
  v40 = a1[16].__d_.__rep_;
  if (v40 != -1)
    LODWORD(a1[16].__d_.__rep_) = v40 + 1;
  return result;
}

BOOL adm::graph::VoiceProcessorUplinkKernel::supportsGetRequiredInputSamplesForOutputSamplesHandler(adm::graph::VoiceProcessorUplinkKernel *this)
{
  return *((_BYTE *)adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>::getConfiguration(*((_QWORD *)this + 20))
         + 60) == 0;
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::doGetRequiredInputSamplesForOutputSamples(adm::graph::VoiceProcessorUplinkKernel *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *exception;
  _QWORD v7[2];
  char v8;

  v3 = *((_QWORD *)this + 20);
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v3 + 8)))
    v4 = v3;
  else
    v4 = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v7, v4, a2);
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, v7[0], v7[1]);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return v7[0];
}

void sub_236CB9764(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::createPreProcessingConverters(adm::graph::VoiceProcessorUplinkKernel *this, Float64 **a2, int a3)
{
  Float64 *v5;
  uint64_t v6;
  unint64_t v7;
  UInt32 v8;
  UInt32 v9;
  uint64_t v10;
  int v11;
  UInt32 v12;
  Float64 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  Float64 *v21;
  int v22;
  int v23;
  unint64_t v24;
  char *v25;
  Float64 *v26;
  unsigned int *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  AudioStreamBasicDescription v34;
  AudioStreamBasicDescription v35;

  adm::graph::DSPKernel::createPreProcessingConverters(this, (const adm::graph::KernelConfiguration *)a2, a3);
  v5 = a2[1];
  if (v5 == *a2)
  {
    v9 = 0;
    v8 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 28;
    v5 = *a2;
    do
    {
      v11 = adm::graph::SemanticSet::contains(&a2[6][v6], 1);
      if (v11)
        v12 = v8;
      else
        v12 = v9;
      if (v11)
        v8 = v12 + *(_DWORD *)((char *)v5 + v10);
      else
        v9 = v12 + *(_DWORD *)((char *)v5 + v10);
      ++v7;
      v5 = *a2;
      v10 += 40;
      ++v6;
    }
    while (v7 < 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  }
  v13 = *v5;
  *(_OWORD *)&v35.mFormatID = xmmword_236CE1880;
  v35.mBytesPerFrame = 4;
  v35.mChannelsPerFrame = v9;
  *(_QWORD *)&v35.mBitsPerChannel = 32;
  v34.mSampleRate = v13;
  *(_OWORD *)&v34.mFormatID = xmmword_236CE1880;
  v34.mBytesPerFrame = 4;
  v34.mChannelsPerFrame = v8;
  *(_QWORD *)&v34.mBitsPerChannel = 32;
  v35.mSampleRate = v13;
  CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)&v33, &v35);
  v14 = (uint64_t *)((char *)this + 176);
  if (*((_BYTE *)this + 184))
  {
    v15 = *v14;
    v16 = v33;
  }
  else
  {
    v15 = 0;
    v16 = v33;
    *((_BYTE *)this + 184) = 1;
  }
  v33 = v15;
  *v14 = v16;
  ExtendedAudioBufferList_Destroy();
  CA::AudioBuffers::AudioBuffers((CA::AudioBuffers *)&v33, &v34);
  v17 = (uint64_t *)((char *)this + 192);
  if (*((_BYTE *)this + 200))
  {
    v18 = *v17;
    v19 = v33;
  }
  else
  {
    v18 = 0;
    v19 = v33;
    *((_BYTE *)this + 200) = 1;
  }
  v33 = v18;
  *v17 = v19;
  result = ExtendedAudioBufferList_Destroy();
  v21 = *a2;
  if (a2[1] != *a2)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    do
    {
      result = adm::graph::SemanticSet::contains(&a2[6][v24], 1);
      if ((_DWORD)result)
        v25 = (char *)this + 192;
      else
        v25 = (char *)this + 176;
      v26 = &v21[5 * v24];
      v28 = *((_DWORD *)v26 + 7);
      v27 = (unsigned int *)v26 + 7;
      if (v28)
      {
        v29 = 0;
        v30 = *(_QWORD *)v25 + 56;
        if ((_DWORD)result)
          v31 = v23;
        else
          v31 = v22;
        v32 = 56;
        do
        {
          *(_OWORD *)(v30 + 16 * (v31 + v29++)) = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)this + 10)
                                                                                        + 8 * v24)
                                                                            + v32);
          v32 += 16;
        }
        while (v29 < *v27);
        if ((_DWORD)result)
          v23 = v31 + v29;
        else
          v22 = v31 + v29;
      }
      ++v24;
      v21 = *a2;
    }
    while (v24 < 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  }
  return result;
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::createPostProcessingConverters(adm::graph::VoiceProcessorUplinkKernel *this, const adm::graph::KernelConfiguration *a2, int a3)
{
  AudioConverterRef **v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  int v10;
  const AudioStreamBasicDescription *v11;
  unint64_t v12;
  AudioConverterRef *v13;
  _QWORD *v14;
  AudioConverterRef *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  AudioConverterRef *v21;
  unint64_t v22;
  OpaqueAudioConverter *v23;
  __int128 v24;
  unint64_t v25;
  void *v26;
  __n128 v27;
  void *exception;
  __n128 v29;
  std::string v30;
  AudioConverterRef outAudioConverter;
  AudioStreamBasicDescription inSourceFormat;
  std::string v33;
  unint64_t v34;
  char *v35;

  v6 = (AudioConverterRef **)((char *)this + 56);
  result = (uint64_t)std::vector<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::reserve((_QWORD *)this + 7, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  v8 = *((_QWORD *)a2 + 3);
  if (*((_QWORD *)a2 + 4) != v8)
  {
    v9 = 0;
    v10 = 4 * a3;
    do
    {
      v11 = (const AudioStreamBasicDescription *)(v8 + 40 * v9);
      if (v11->mFormatID != 1819304813)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        std::to_string((std::string *)&inSourceFormat, v9);
        v29 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, "Non-LinearPCM format for output terminal index ", (std::string *)&inSourceFormat);
        MEMORY[0x23B8011FC](exception, &v33, v29);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      inSourceFormat.mSampleRate = v11->mSampleRate;
      *(_OWORD *)&inSourceFormat.mFormatID = xmmword_236CE1880;
      *(_OWORD *)&inSourceFormat.mBytesPerFrame = xmmword_236CE1890;
      outAudioConverter = 0;
      if (AudioConverterNew(&inSourceFormat, v11, &outAudioConverter))
      {
        v26 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v30, v9);
        v27 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v33, "Failed to create postprocessing converter for stream ", &v30);
        MEMORY[0x23B8011FC](v26, &v33, v27);
        __cxa_throw(v26, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v13 = (AudioConverterRef *)*((_QWORD *)this + 8);
      v12 = *((_QWORD *)this + 9);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *v6;
        v16 = v13 - *v6;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        v35 = (char *)this + 72;
        if (v19)
        {
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v19);
          v15 = (AudioConverterRef *)*((_QWORD *)this + 7);
          v13 = (AudioConverterRef *)*((_QWORD *)this + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (AudioConverterRef *)(v19 + 8 * v16);
        v22 = v19 + 8 * v20;
        v34 = v22;
        *v21 = outAudioConverter;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)(v21 + 1);
        if (v13 == v15)
        {
          v14 = v21 + 1;
        }
        else
        {
          do
          {
            v23 = *--v13;
            *v13 = 0;
            *--v21 = v23;
          }
          while (v13 != v15);
          v14 = (_QWORD *)v33.__r_.__value_.__r.__words[2];
          v22 = v34;
        }
        v24 = *(_OWORD *)((char *)this + 56);
        *((_QWORD *)this + 7) = v21;
        *((_QWORD *)this + 8) = v14;
        *(_OWORD *)&v33.__r_.__value_.__r.__words[1] = v24;
        v25 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v22;
        v34 = v25;
        v33.__r_.__value_.__r.__words[0] = v24;
        std::__split_buffer<std::unique_ptr<OpaqueAudioConverter,applesauce::raii::v1::detail::opaque_deletion_functor<OpaqueAudioConverter*,&(AudioConverterDispose)>>>::~__split_buffer((uint64_t)&v33);
      }
      else
      {
        *v13 = outAudioConverter;
        v14 = v13 + 1;
      }
      *((_QWORD *)this + 8) = v14;
      LODWORD(v33.__r_.__value_.__l.__data_) = v10;
      std::vector<CA::AudioBuffers>::emplace_back<CA::StreamDescription const&,unsigned int>((_QWORD *)this + 13, &inSourceFormat);
      result = CA::AudioBuffers::Prepare(*(CA::AudioBuffers **)(*((_QWORD *)this + 14) - 8));
      ++v9;
      v8 = *((_QWORD *)a2 + 3);
    }
    while (v9 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a2 + 4) - v8) >> 3));
  }
  return result;
}

void sub_236CB9C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;
  int v37;

  if (a36 < 0)
    operator delete(__p);
  if (a28 < 0)
  {
    operator delete(a23);
    if ((v37 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

uint64_t adm::graph::VoiceProcessorKernel::hasParameter(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

uint64_t adm::graph::VoiceProcessorKernel::isParameterWritable(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

float adm::graph::VoiceProcessorKernel::getParameter(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  uint64_t v3;
  void *exception;
  _QWORD v6[2];
  char v7;

  v3 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(_QWORD *)this + 352))(this);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v6, v3, a2);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, v6[0], v6[1]);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return *(float *)v6;
}

void sub_236CB9DBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *adm::graph::VoiceProcessorKernel::setParameter(adm::graph::VoiceProcessorKernel *this, uint64_t a2, float a3)
{
  uint64_t v5;
  _QWORD *result;
  void *exception;
  _QWORD v8[2];
  char v9;

  v5 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(_QWORD *)this + 344))(this);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, float))(*(_QWORD *)v5 + 24))(v8, v5, a2, a3);
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, v8[0], v8[1]);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_236CB9E58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void adm::graph::VoiceProcessorKernel::getInputParameterIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void adm::graph::VoiceProcessorKernel::getOutputParameterIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t adm::graph::VoiceProcessorKernel::hasProperty(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(_QWORD *)this + 352))(this);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(&v5, v3, a2);
  return v6;
}

BOOL adm::graph::VoiceProcessorKernel::isPropertyWritable(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  char v2;

  adm::graph::VoiceProcessorKernel::getPropertyInfo(this, a2);
  return v2 != 0;
}

_QWORD *adm::graph::VoiceProcessorKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  _QWORD *result;
  void *exception;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = a3;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(v11, v8, a2, a4, &v13);
  if (!v12)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, v11[0], v11[1]);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  *a5 = v13;
  return result;
}

void sub_236CB9F88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *adm::graph::VoiceProcessorKernel::setProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *result;
  void *exception;
  _QWORD v10[2];
  char v11;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  result = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v10, v7, a2, a4, a3);
  if (!v11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, v10[0], v10[1]);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return result;
}

void sub_236CBA02C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t adm::graph::VoiceProcessorKernel::getPropertyInfo(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  uint64_t v3;
  void *exception;
  _QWORD v6[2];
  char v7;

  v3 = (*(uint64_t (**)(adm::graph::VoiceProcessorKernel *))(*(_QWORD *)this + 352))(this);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v6, v3, a2);
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    MEMORY[0x23B8012BC](exception, v6[0], v6[1]);
    __cxa_throw(exception, MEMORY[0x24BEDB6E8], (void (*)(void *))MEMORY[0x24BEDADC8]);
  }
  return v6[0];
}

void sub_236CBA0BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void adm::graph::VoiceProcessorKernel::getInputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void adm::graph::VoiceProcessorKernel::getOutputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t adm::graph::VoiceProcessorKernel::visit()
{
  return 0;
}

uint64_t adm::graph::VoiceProcessorUplinkKernel::getInterface(adm::graph::VoiceProcessorUplinkKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 20);
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v1 + 8)))
    return v1;
  else
    return 0;
}

{
  uint64_t v1;

  v1 = *((_QWORD *)this + 20);
  if (adm::vp::SPIClient::isConfigured((std::__shared_mutex_base *)(v1 + 8)))
    return v1;
  else
    return 0;
}

void `non-virtual thunk to'adm::graph::VoiceProcessorUplinkKernel::~VoiceProcessorUplinkKernel(adm::graph::VoiceProcessorUplinkKernel *this)
{
  adm::graph::DSPKernel *v2;

  v2 = (adm::graph::VoiceProcessorUplinkKernel *)((char *)this - 24);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 168);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 152);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  adm::graph::DSPKernel::~DSPKernel(v2);
}

{
  adm::graph::DSPKernel *v2;

  v2 = (adm::graph::VoiceProcessorUplinkKernel *)((char *)this - 24);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 168);
  std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 152);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  adm::graph::DSPKernel::~DSPKernel(v2);
  JUMPOUT(0x23B801508);
}

uint64_t `non-virtual thunk to'adm::graph::VoiceProcessorKernel::hasParameter(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

uint64_t `non-virtual thunk to'adm::graph::VoiceProcessorKernel::isParameterWritable(adm::graph::VoiceProcessorKernel *this)
{
  return 0;
}

float `non-virtual thunk to'adm::graph::VoiceProcessorKernel::getParameter(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  return adm::graph::VoiceProcessorKernel::getParameter((adm::graph::VoiceProcessorKernel *)((char *)this - 24), a2);
}

_QWORD *`non-virtual thunk to'adm::graph::VoiceProcessorKernel::setParameter(adm::graph::VoiceProcessorKernel *this, uint64_t a2, float a3)
{
  return adm::graph::VoiceProcessorKernel::setParameter((adm::graph::VoiceProcessorKernel *)((char *)this - 24), a2, a3);
}

void `non-virtual thunk to'adm::graph::VoiceProcessorKernel::getInputParameterIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void `non-virtual thunk to'adm::graph::VoiceProcessorKernel::getOutputParameterIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t `non-virtual thunk to'adm::graph::VoiceProcessorKernel::hasProperty(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this - 3) + 352))((char *)this - 24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(&v5, v3, a2);
  return v6;
}

BOOL `non-virtual thunk to'adm::graph::VoiceProcessorKernel::isPropertyWritable(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  return adm::graph::VoiceProcessorKernel::isPropertyWritable((adm::graph::VoiceProcessorKernel *)((char *)this - 24), a2);
}

_QWORD *`non-virtual thunk to'adm::graph::VoiceProcessorKernel::getProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return adm::graph::VoiceProcessorKernel::getProperty(a1 - 24, a2, a3, a4, a5);
}

_QWORD *`non-virtual thunk to'adm::graph::VoiceProcessorKernel::setProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return adm::graph::VoiceProcessorKernel::setProperty(a1 - 24, a2, a3, a4);
}

uint64_t `non-virtual thunk to'adm::graph::VoiceProcessorKernel::getPropertyInfo(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  return adm::graph::VoiceProcessorKernel::getPropertyInfo((adm::graph::VoiceProcessorKernel *)((char *)this - 24), a2);
}

uint64_t `non-virtual thunk to'adm::graph::VoiceProcessorKernel::getPropertySize(adm::graph::VoiceProcessorKernel *this, uint64_t a2)
{
  return adm::graph::VoiceProcessorKernel::getPropertyInfo((adm::graph::VoiceProcessorKernel *)((char *)this - 24), a2);
}

void `non-virtual thunk to'adm::graph::VoiceProcessorKernel::getInputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void `non-virtual thunk to'adm::graph::VoiceProcessorKernel::getOutputPropertyIDs(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t `non-virtual thunk to'adm::graph::VoiceProcessorKernel::visit()
{
  return 0;
}

uint64_t std::__optional_destruct_base<CA::AudioBuffers,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    ExtendedAudioBufferList_Destroy();
  return a1;
}

void caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::perform(uint64_t a1)
{
  NSObject *adm_log_object;
  void **v3;
  int v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  NSObject *v13;
  void **v15;
  int v16;
  caulk::concurrent::message *v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  void **v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = (caulk::concurrent::message *)a1;
  caulk::make_string(*(caulk **)(a1 + 32), (uint64_t)__p, *(unsigned int *)(a1 + 44));
  switch(*(_DWORD *)(a1 + 24))
  {
    case 0:
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
      {
        v3 = __p;
        if (v19 < 0)
          v3 = (void **)__p[0];
        v4 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v3;
        v22 = 1024;
        v23 = v4;
        _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
    case 1:
      v7 = get_adm_log_object();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        v8 = __p;
        if (v19 < 0)
          v8 = (void **)__p[0];
        v9 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v8;
        v22 = 1024;
        v23 = v9;
        v10 = v7;
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_18;
      }
      break;
    case 2:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
        goto LABEL_17;
      }
      break;
    case 3:
      v13 = get_adm_log_object();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v15 = __p;
        if (v19 < 0)
          v15 = (void **)__p[0];
        v16 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v15;
        v22 = 1024;
        v23 = v16;
        _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, "!!! ADM realtime error: %s. Log counter = %u", buf, 0x12u);
      }
      break;
    default:
      v5 = get_adm_log_object();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v6 = __p;
        if (v19 < 0)
          v6 = (void **)__p[0];
LABEL_17:
        v12 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)buf = 136315394;
        v21 = v6;
        v22 = 1024;
        v23 = v12;
        v10 = v5;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_18:
        _os_log_impl(&dword_236C84000, v10, v11, "%s. Log counter = %u", buf, 0x12u);
      }
      break;
  }
  if (v19 < 0)
    operator delete(__p[0]);
  return caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(&v17);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<void adm::util::RTLogger::doLog<int>(adm::util::RTLogLevel,char const*,int &&)::{lambda(void)#1}>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 56, 8);
  return a1;
}

void adm::consume_exception_and_terminate(adm *this, const NSException *a2)
{
  adm *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  char *v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  char __str[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  -[adm name](v2, "name");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[adm reason](v2, "reason");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[adm callStackReturnAddresses](v2, "callStackReturnAddresses");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "count");
    os_unfair_lock_lock(&__last_exception_backtrace_lock__);
    strlcpy(__last_exception_backtrace__, "(", 0x2000uLL);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        v23 = 0;
        v21 = 0u;
        v22 = 0u;
        *(_OWORD *)__str = 0u;
        v20 = 0u;
        objc_msgSend(v6, "objectAtIndex:", i);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        snprintf(__str, 0x44uLL, "%p ", (const void *)objc_msgSend(v9, "unsignedIntegerValue"));

        strlcat(__last_exception_backtrace__, __str, 0x2000uLL);
      }
    }
    v10 = strrchr(__last_exception_backtrace__, 32);
    if (v10)
      *(_WORD *)v10 = 41;
    else
      strlcat(__last_exception_backtrace__, ")", 0x2000uLL);
  }
  else
  {
    os_unfair_lock_lock(&__last_exception_backtrace_lock__);
    strlcpy(__last_exception_backtrace__, "()", 0x2000uLL);
  }
  os_unfair_lock_unlock(&__last_exception_backtrace_lock__);
  -[adm callStackReturnAddresses](v2, "callStackReturnAddresses");
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (!v11)
    v11 = v6;
  v12 = (void *)MEMORY[0x24BDD17C8];
  objc_msgSend(v11, "description");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringWithFormat:", CFSTR("***NSException*** '%@', reason: '%@'\n*** First throw call stack:\n%@\n"), v3, v4, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("*** Terminating due to uncaught exception '%@', reason: '%@'"), v3, v4);
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v15 = objc_msgSend(v16, "UTF8String");

  }
  else
  {
    v15 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
  }
  qword_25644B938 = v15;
  get_adm_log_object();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    v18 = objc_msgSend(objc_retainAutorelease(v14), "UTF8String");
    *(_DWORD *)__str = 136315138;
    *(_QWORD *)&__str[4] = v18;
    _os_log_error_impl(&dword_236C84000, v17, OS_LOG_TYPE_ERROR, "***EXCEPTION***\n%s", (uint8_t *)__str, 0xCu);
  }

  abort();
}

void sub_236CBA8BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL adm::config_policy::isExclaveUseCase(uint64_t a1)
{
  _QWORD *v2;
  _BOOL8 v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "isolated audio muted talker detection");
  v2 = std::__tree<std::string>::find<std::string>(a1, v10);
  if ((_QWORD *)(a1 + 8) == v2)
  {
    v4 = v2;
    std::string::basic_string[abi:ne180100]<0>(v8, "isolated audio siri");
    if (v4 == std::__tree<std::string>::find<std::string>(a1, v8))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "isolated audio sound analysis");
      v3 = v4 != std::__tree<std::string>::find<std::string>(a1, __p);
      if (v7 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v3 = 1;
    }
    if (v9 < 0)
      operator delete(v8[0]);
  }
  else
  {
    v3 = 1;
  }
  if (v11 < 0)
    operator delete(v10[0]);
  return v3;
}

void sub_236CBAA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v18 - 17) < 0)
    operator delete(*(void **)(v18 - 40));
  _Unwind_Resume(exception_object);
}

double adm::config_policy::getPrimaryStreamInfo(adm::config_policy *this, const adm::ConfigurationChangeRequest *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  char v6;

  if (!v6)
    std::__throw_bad_optional_access[abi:ne180100]();
  result = *(double *)&v4;
  *(_OWORD *)this = v4;
  *((_QWORD *)this + 2) = v5;
  return result;
}

void `anonymous namespace'::findStreamByID(uint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4)
{
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  NSObject *adm_log_object;
  char v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (a2 != a3)
  {
    v7 = a2;
    while (2)
    {
      v8 = (unsigned __int8 *)v7[21];
      v9 = (unsigned __int8 *)v7[22];
      while (v8 != v9)
      {
        if (std::operator==[abi:ne180100]<std::string,std::string>(v8, a4))
        {
          *(_QWORD *)a1 = v7;
          *(_QWORD *)(a1 + 8) = v8;
          v13 = 1;
          *(_BYTE *)(a1 + 16) = 1;
          goto LABEL_16;
        }
        v8 += 136;
      }
      v10 = (unsigned __int8 *)v7[24];
      v11 = (unsigned __int8 *)v7[25];
      while (v10 != v11)
      {
        if (std::operator==[abi:ne180100]<std::string,std::string>(v10, a4))
        {
          *(_QWORD *)a1 = v7;
          *(_QWORD *)(a1 + 8) = v10;
          v13 = 1;
          *(_BYTE *)(a1 + 16) = 0;
          goto LABEL_16;
        }
        v10 += 136;
      }
      v7 += 27;
      if (v7 != a3)
        continue;
      break;
    }
  }
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    if ((a4[23] & 0x80u) == 0)
      v14 = (uint64_t *)a4;
    else
      v14 = *(uint64_t **)a4;
    v15 = 136315138;
    v16 = v14;
    _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "Requested stream ID %s not found (this shouldn't happen)", (uint8_t *)&v15, 0xCu);
  }
  v13 = 0;
  *(_BYTE *)a1 = 0;
LABEL_16:
  *(_BYTE *)(a1 + 24) = v13;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

BOOL std::operator==[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  BOOL v14;

  v2 = a1[24];
  if (a1[24])
  {
    v3 = a1[23];
    if ((v3 & 0x80u) == 0)
      v4 = a1[23];
    else
      v4 = *((_QWORD *)a1 + 1);
    v5 = a2[23];
    v6 = (char)v5;
    if ((v5 & 0x80u) != 0)
      v5 = *((_QWORD *)a2 + 1);
    if (v4 == v5)
    {
      if (v6 < 0)
        a2 = *(unsigned __int8 **)a2;
      if ((v3 & 0x80) != 0)
      {
        return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
      }
      else if (a1[23])
      {
        v7 = v3 - 1;
        do
        {
          v9 = *a1++;
          v8 = v9;
          v11 = *a2++;
          v10 = v11;
          v13 = v7-- != 0;
          v14 = v8 == v10;
          v2 = v8 == v10;
        }
        while (v14 && v13);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void adm::config_policy::getActiveStreamInfo(adm::config_policy *this, const ConfigurationChangeRequest *a2)
{
  unsigned __int8 *begin;
  unsigned __int8 *end;
  _QWORD *v6;
  unint64_t v7;
  __int128 v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  begin = (unsigned __int8 *)a2->mIOContextDescription.mStreamIDs.__begin_;
  end = (unsigned __int8 *)a2->mIOContextDescription.mStreamIDs.__end_;
  if (begin != end)
  {
    v6 = 0;
    do
    {
      if (!v21)
        std::__throw_bad_optional_access[abi:ne180100]();
      v7 = *((_QWORD *)this + 2);
      if ((unint64_t)v6 >= v7)
      {
        v10 = *(_QWORD **)this;
        v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)this) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v10) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v15 = (char *)operator new(24 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[24 * v11];
        *(_OWORD *)v16 = v19;
        *((_QWORD *)v16 + 2) = v20;
        v17 = v16;
        if (v6 != v10)
        {
          do
          {
            v18 = *(_OWORD *)(v6 - 3);
            *(v17 - 8) = *((_BYTE *)v6 - 8);
            *(_OWORD *)(v17 - 24) = v18;
            v17 -= 24;
            v6 -= 3;
          }
          while (v6 != v10);
          v6 = *(_QWORD **)this;
        }
        v9 = v16 + 24;
        *(_QWORD *)this = v17;
        *((_QWORD *)this + 1) = v16 + 24;
        *((_QWORD *)this + 2) = &v15[24 * v14];
        if (v6)
          operator delete(v6);
      }
      else
      {
        v8 = v19;
        v6[2] = v20;
        *(_OWORD *)v6 = v8;
        v9 = v6 + 3;
      }
      *((_QWORD *)this + 1) = v9;
      begin += 24;
      v6 = v9;
    }
    while (begin != end);
  }
}

void sub_236CBAEAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::validateStreamUsage(ConfigurationChangeRequest *this, const adm::ConfigurationChangeRequest *a2)
{
  int v2;
  unint64_t value;
  ConfigurationChangeRequest *v5;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *p_pair1;
  BOOL v7;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v8;
  BOOL v9;
  NSObject *adm_log_object;
  unint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v15;
  NSObject *v16;
  ConfigurationChangeRequest *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  char v24;
  char *v25;
  double v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  IOContextDescription *p_mIOContextDescription;
  _BOOL4 isExclaveUseCase;
  const DeviceDescription *v33;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v34;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v35;
  std::string::size_type size;
  std::string *p_buf;
  int data;
  int v39;
  BOOL v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  NSObject *v45;
  uint32_t v46;
  uint64_t v47;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v48;
  NSObject *v49;
  BOOL v50;
  BOOL v51;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v52;
  BOOL v53;
  BOOL v54;
  _BOOL4 v55;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v56;
  std::string::size_type v57;
  NSObject *v58;
  adm::config_policy *v59;
  __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *v60;
  _BOOL4 v61;
  unint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  BOOL v65;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *__p;
  char *v74;
  char v75;
  void *v76[2];
  char v77;
  std::string buf;
  uint64_t v79;

  v2 = (int)a2;
  v79 = *MEMORY[0x24BDAC8D0];
  if (!this->mIsActivation)
    goto LABEL_43;
  value = this->mIOContextDescription.mSemantics.__tree_.__pair3_.__value_;
  if (value == 1)
    goto LABEL_43;
  if (value != 3)
  {
    if (value != 2)
    {
      adm_log_object = get_adm_log_object();
      if (!os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
        goto LABEL_105;
      v11 = this->mIOContextDescription.mSemantics.__tree_.__pair3_.__value_;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
      v12 = "Unsupported IOContext semantic count: %lu";
      v13 = adm_log_object;
      v14 = 12;
LABEL_161:
      _os_log_error_impl(&dword_236C84000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&buf, v14);
      goto LABEL_105;
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice activity detection");
    v5 = (ConfigurationChangeRequest *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
    p_pair1 = &this->mIOContextDescription.mSemantics.__tree_.__pair1_;
    if (&this->mIOContextDescription.mSemantics.__tree_.__pair1_ != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v76, "voice isolation");
      if (p_pair1 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v76))
      {
        v7 = 1;
LABEL_39:
        if (v77 < 0)
          operator delete(v76[0]);
LABEL_41:
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
          if (v7)
            goto LABEL_43;
        }
        else if (v7)
        {
          goto LABEL_43;
        }
        v16 = get_adm_log_object();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
LABEL_105:
          v49 = get_adm_log_object();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl(&dword_236C84000, v49, OS_LOG_TYPE_ERROR, "invalid configChangeRequest - semantics", (uint8_t *)&buf, 2u);
          }
          return 0;
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v12 = "Unsupported IOContext semantic combination";
        goto LABEL_160;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "airpods noise suppression");
    v15 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &__p);
    if (p_pair1 == v15
      || (std::string::basic_string[abi:ne180100]<0>(v71, "voice isolation"),
          p_pair1 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v71)))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "airpods noise suppression");
      if (p_pair1 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v69))
      {
        v7 = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v67, "voice activity detection");
        v7 = p_pair1 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v67);
        if (v68 < 0)
          operator delete(v67[0]);
      }
      if (v70 < 0)
        operator delete(v69[0]);
      if (p_pair1 == v15)
      {
LABEL_36:
        if (v75 < 0)
          operator delete(__p);
        if (p_pair1 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)v5)
          goto LABEL_41;
        goto LABEL_39;
      }
    }
    else
    {
      v7 = 1;
    }
    if (v72 < 0)
      operator delete(v71[0]);
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "voice activity detection");
  v8 = &this->mIOContextDescription.mSemantics.__tree_.__pair1_;
  if (&this->mIOContextDescription.mSemantics.__tree_.__pair1_ == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf))
  {
    v9 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v76, "voice isolation");
    if (v8 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, v76))
    {
      v9 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "airpods noise suppression");
      v9 = v8 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &__p);
      if (v75 < 0)
        operator delete(__p);
    }
    if (v77 < 0)
      operator delete(v76[0]);
  }
  if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_43;
    goto LABEL_28;
  }
  operator delete(buf.__r_.__value_.__l.__data_);
  if (!v9)
  {
LABEL_28:
    v16 = get_adm_log_object();
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      goto LABEL_105;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v12 = "Unsupported IOContext semantic combination";
LABEL_160:
    v13 = v16;
    v14 = 2;
    goto LABEL_161;
  }
LABEL_43:
  adm::config_policy::getActiveStreamInfo((adm::config_policy *)&__p, this);
  if (this->mIsActivation)
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation");
    v17 = (ConfigurationChangeRequest *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    v18 = (char *)__p;
    v19 = v74;
    if (&this->mIOContextDescription.mSemantics.__tree_.__pair1_ != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)v17
      && __p != v74
      && *(_DWORD *)(*(_QWORD *)__p + 64) == 1986622068)
    {
      v20 = get_adm_log_object();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_236C84000, v20, OS_LOG_TYPE_ERROR, "don't perform VI on virtual device input streams", (uint8_t *)&buf, 2u);
      }
      v21 = get_adm_log_object();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v22 = "invalid configChangeRequest - devices";
        goto LABEL_225;
      }
      goto LABEL_226;
    }
  }
  else
  {
    v18 = (char *)__p;
    v19 = v74;
  }
  if (v18 == v19)
  {
    v28 = 0;
    v29 = 0;
    if ((v2 & 1) == 0)
      goto LABEL_67;
    goto LABEL_68;
  }
  v23 = 0;
  v24 = 1;
  v25 = v18;
  do
  {
    v26 = *(double *)(*((_QWORD *)v25 + 1) + 64);
    if ((v24 & 1) != 0)
      v27 = (int)v26;
    else
      v27 = v23;
    if (v26 != (double)v27)
    {
      v44 = get_adm_log_object();
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        goto LABEL_94;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v43 = "inconsistent stream sample rates";
LABEL_92:
      v45 = v44;
      v46 = 2;
      goto LABEL_156;
    }
    if (v26 != *(double *)(*(_QWORD *)v25 + 56))
    {
      v44 = get_adm_log_object();
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        goto LABEL_94;
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v43 = "inconsistent device sample rates";
      goto LABEL_92;
    }
    v24 = 0;
    v25 += 24;
    v23 = (int)v26;
  }
  while (v25 != v19);
  v28 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
  if ((v2 & 1) != 0)
    goto LABEL_68;
  v29 = 0;
  v30 = v18;
  do
  {
    v29 += std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(*((_QWORD *)v30 + 1) + 32), "reference");
    v30 += 24;
  }
  while (v30 != v19);
LABEL_67:
  v28 -= v29;
LABEL_68:
  p_mIOContextDescription = &this->mIOContextDescription;
  isExclaveUseCase = adm::config_policy::isExclaveUseCase((uint64_t)&this->mIOContextDescription);
  std::string::basic_string[abi:ne180100]<0>(&buf, "airpods noise suppression");
  v34 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
  v35 = &this->mIOContextDescription.mSemantics.__tree_.__pair1_;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v35 == v34)
  {
    if (isExclaveUseCase)
    {
      if (v28 - 4 <= 0xFFFFFFFFFFFFFFFCLL)
      {
        v42 = get_adm_log_object();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
          v43 = "unexpected stream count: %lu";
LABEL_155:
          v45 = v42;
          v46 = 12;
LABEL_156:
          _os_log_error_impl(&dword_236C84000, v45, OS_LOG_TYPE_ERROR, v43, (uint8_t *)&buf, v46);
          goto LABEL_94;
        }
        goto LABEL_94;
      }
      if (adm::config_policy::isBuiltInMicrophoneDevice(*(adm::config_policy **)v18, v33))
      {
        if (v18[16] == 1)
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((_QWORD *)v18 + 1) + 32, "general");
          v50 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (v50)
          {
            v51 = v28 >= 2
               && *(v19 - 8) == 1
               && std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(*((_QWORD *)v19 - 2) + 32), "reference");
            v47 = 1;
            if (!v2 || v51)
              goto LABEL_227;
            v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              goto LABEL_226;
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            v22 = "this route requires a ref stream";
          }
          else
          {
            v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              goto LABEL_226;
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            v22 = "mic stream not general semantic";
          }
        }
        else
        {
          v21 = get_adm_log_object();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            goto LABEL_226;
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v22 = "mic stream not input stream ";
        }
      }
      else
      {
        v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_226;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v22 = "exclave use-cases can only operate on built-in mic";
      }
      goto LABEL_225;
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice activity detection");
    v48 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)&this->mIOContextDescription, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v35 != v48)
    {
      if (v28 - 3 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v42 = get_adm_log_object();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          goto LABEL_94;
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
        v43 = "unexpected stream count: %lu";
        goto LABEL_155;
      }
      if (v18[16] == 1)
      {
        std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((_QWORD *)v18 + 1) + 32, "general");
        v54 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (v54)
        {
          if (v28 == 2)
          {
            if (v18[40] == 1)
            {
              if (!std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(*((_QWORD *)v18 + 4) + 32)))
                goto LABEL_122;
              v21 = get_adm_log_object();
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                goto LABEL_226;
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              v22 = "ref stream not ref semantic";
            }
            else
            {
              v21 = get_adm_log_object();
              if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                goto LABEL_226;
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              v22 = "ref stream not input stream ";
            }
          }
          else
          {
            if (!v2)
              goto LABEL_122;
            v59 = *(adm::config_policy **)v18;
            if (*(_QWORD *)v18)
            {
              if (*((_DWORD *)v59 + 16) == 1651275109 && *((_DWORD *)v59 + 19) == 1 && *((_BYTE *)v59 + 160))
                goto LABEL_122;
            }
            v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              goto LABEL_226;
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            v22 = "this route requires a ref stream";
          }
        }
        else
        {
          v21 = get_adm_log_object();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            goto LABEL_226;
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v22 = "mic stream not general semantic";
        }
      }
      else
      {
        v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_226;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v22 = "mic stream not input stream ";
      }
      goto LABEL_225;
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation");
    v52 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v35 == v52)
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "spatial playback");
      if (v35 == (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf))
      {
        std::string::basic_string[abi:ne180100]<0>(v69, "spatial channel virtualization only");
        v55 = v35 != (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, v69);
        if (v70 < 0)
          operator delete(v69[0]);
      }
      else
      {
        v55 = 1;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (!v55)
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation conferencing");
        v56 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (v35 == v56)
        {
          std::string::basic_string[abi:ne180100]<0>(&buf, "general");
          v60 = (__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::string, void *>>> *)std::__tree<std::string>::find<std::string>((uint64_t)p_mIOContextDescription, &buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          v47 = 1;
          if (v35 == v60 || v28 == 1)
          {
LABEL_95:
            if (v18)
              goto LABEL_227;
            return v47;
          }
          v42 = get_adm_log_object();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
            v43 = "expected 1 stream but got %lu";
            goto LABEL_155;
          }
LABEL_94:
          v47 = 0;
          goto LABEL_95;
        }
        if (v2)
          v57 = 2;
        else
          v57 = 1;
        if (v28 < v57)
        {
          v58 = get_adm_log_object();
          if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            goto LABEL_94;
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v57;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v28;
          v43 = "expected at least %lu stream(s) but got %lu";
          v45 = v58;
          v46 = 22;
          goto LABEL_156;
        }
        if (v18[16] == 1)
        {
          std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((_QWORD *)v18 + 1) + 32, "general");
          v61 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          if (v61)
          {
            v62 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v18) >> 3);
            if (v62 < 2)
              goto LABEL_122;
            v63 = v18 + 40;
            v64 = v62 - 1;
            v47 = 1;
            while (1)
            {
              if (*v63 != 1)
              {
                v21 = get_adm_log_object();
                if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
                  goto LABEL_226;
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                v22 = "ref stream is not input stream";
                goto LABEL_225;
              }
              if (std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(*((_QWORD *)v63 - 1) + 32)))
                break;
              v63 += 24;
              if (!--v64)
                goto LABEL_95;
            }
            v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              goto LABEL_226;
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            v22 = "ref stream is not ref semantic";
          }
          else
          {
            v21 = get_adm_log_object();
            if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
              goto LABEL_226;
            LOWORD(buf.__r_.__value_.__l.__data_) = 0;
            v22 = "mic stream not general semantic";
          }
        }
        else
        {
          v21 = get_adm_log_object();
          if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            goto LABEL_226;
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v22 = "mic stream not input stream";
        }
LABEL_225:
        _os_log_error_impl(&dword_236C84000, v21, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&buf, 2u);
        goto LABEL_226;
      }
      if (v28 != 1)
      {
        v42 = get_adm_log_object();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          goto LABEL_94;
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
        v43 = "expected 1 stream but got %lu";
        goto LABEL_155;
      }
      if (v18[16])
      {
        v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_226;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v22 = "stream not output stream";
        goto LABEL_225;
      }
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((_QWORD *)v18 + 1) + 32, "general");
      v65 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (!v65)
      {
        v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_226;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v22 = "stream not general semantic";
        goto LABEL_225;
      }
    }
    else
    {
      if (v28 != 1)
      {
        v42 = get_adm_log_object();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          goto LABEL_94;
        LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
        v43 = "expected 1 stream but got %lu";
        goto LABEL_155;
      }
      if (v18[16] != 1)
      {
        v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_226;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v22 = "mic stream not input stream";
        goto LABEL_225;
      }
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((_QWORD *)v18 + 1) + 32, "general");
      v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (!v53)
      {
        v21 = get_adm_log_object();
        if (!os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          goto LABEL_226;
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v22 = "mic stream not general semantic";
        goto LABEL_225;
      }
    }
LABEL_122:
    v47 = 1;
    goto LABEL_227;
  }
  if (v28 != 1)
  {
    v42 = get_adm_log_object();
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      goto LABEL_94;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    v43 = "expected 1 stream but got %lu";
    goto LABEL_155;
  }
  if (v18[16] == 1)
  {
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *((_QWORD *)v18 + 1) + 32, "general");
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = buf.__r_.__value_.__l.__size_;
    if (size == 7)
    {
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      data = (int)p_buf->__r_.__value_.__l.__data_;
      v39 = *(_DWORD *)((char *)p_buf->__r_.__value_.__r.__words + 3);
      v41 = data == 1701733735 && v39 == 1818325605;
    }
    else
    {
      v41 = 0;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v41)
      goto LABEL_122;
    v21 = get_adm_log_object();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v22 = "mic stream not general semantic";
      goto LABEL_225;
    }
  }
  else
  {
    v21 = get_adm_log_object();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v22 = "mic stream not input stream";
      goto LABEL_225;
    }
  }
LABEL_226:
  v47 = 0;
LABEL_227:
  v74 = v18;
  operator delete(v18);
  return v47;
}

void sub_236CBBE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  void *v36;

  operator delete(v36);
  _Unwind_Resume(a1);
}

BOOL adm::config_policy::isBuiltInMicrophoneDevice(adm::config_policy *this, const DeviceDescription *a2)
{
  if (*((_DWORD *)this + 16) != 1651274862)
    return 0;
  if (*((_DWORD *)this + 17) == 1768778083)
    return 1;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(unsigned __int8 *)(a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (v1 != 7)
    return 0;
  if (v2 >= 0)
    v3 = (int *)a1;
  else
    v3 = *(int **)a1;
  v4 = *v3;
  v5 = *(int *)((char *)v3 + 3);
  return v4 == 1701733735 && v5 == 1818325605;
}

BOOL std::operator!=[abi:ne180100]<std::string,char [10]>(uint64_t **a1)
{
  uint64_t *v1;
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;

  if (!*((_BYTE *)a1 + 24))
    return 1;
  v1 = (uint64_t *)*((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((char)v1 < 0)
    v1 = a1[1];
  if (v1 != (uint64_t *)9)
    return 1;
  if (v2 >= 0)
    v3 = (uint64_t *)a1;
  else
    v3 = *a1;
  v4 = *v3;
  v5 = *((unsigned __int8 *)v3 + 8);
  return v4 != 0x636E657265666572 || v5 != 101;
}

uint64_t std::__find_impl[abi:ne180100]<std::string_view const*,std::string_view const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v3;
  char v5;
  size_t v6;
  const void *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = *((unsigned __int8 *)a3 + 23);
    else
      v6 = (size_t)a3[1];
    if (v5 >= 0)
      v7 = a3;
    else
      v7 = *a3;
    while (*(_QWORD *)(v3 + 8) != v6 || memcmp(*(const void **)v3, v7, v6))
    {
      v3 += 16;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

BOOL adm::config_policy::isBuiltInSpeakerDevice(adm::config_policy *this, const DeviceDescription *a2)
{
  if (*((_DWORD *)this + 16) != 1651274862)
    return 0;
  if (*((_DWORD *)this + 18) == 1769173099)
    return 1;
}

_anonymous_namespace_ *adm::config_policy::getDeviceDescription(adm::ConfigurationChangeRequest *a1, int a2)
{
  const DeviceDescription *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v9;
  unsigned __int8 v10;

  if (*((_QWORD *)a1 + 21) == *((_QWORD *)a1 + 22))
    return 0;
  adm::config_policy::getPrimaryStreamInfo((adm::config_policy *)&v9, a1);
  if (v10 == a2)
    return (_anonymous_namespace_ *)v9;
  v6 = (_anonymous_namespace_ *)*((_QWORD *)a1 + 24);
  v7 = (_anonymous_namespace_ *)*((_QWORD *)a1 + 25);
  v5 = v6;
  if (v6 != v7)
  {
    v5 = v6;
    while (a2 || !*((_BYTE *)v5 + 48))
    {
      v5 = (_anonymous_namespace_ *)((char *)v5 + 216);
      if (v5 == v7)
        goto LABEL_12;
    }
  }
  if (v5 == v7)
  {
LABEL_12:
    if (v6 == v7)
      goto LABEL_22;
    v5 = v6;
    {
      v5 = (_anonymous_namespace_ *)((char *)v5 + 216);
      if (v5 == v7)
        goto LABEL_18;
    }
    if (v5 != v7)
      return v5;
LABEL_18:
    if (v6 == v7)
    {
LABEL_22:
      v7 = v6;
    }
    else
    {
      {
        v6 = (_anonymous_namespace_ *)((char *)v6 + 216);
        if (v6 == v7)
        {
          v6 = v7;
          break;
        }
      }
    }
    if (v6 == v7)
      return 0;
    else
      return v6;
  }
  return v5;
}

uint64_t `anonymous namespace'::getDeviceDirection(_anonymous_namespace_ *this, const DeviceDescription *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 21);
  v3 = *((_QWORD *)this + 22);
  if (v2 == v3)
    return 0;
  v5 = 0;
  do
  {
    v5 += std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(v2 + 32));
    v2 += 136;
  }
  while (v2 != v3);
  if (!v5)
    return 0;
  v7 = *((_QWORD *)this + 24);
  v6 = *((_QWORD *)this + 25);
  if (v7 == v6)
    return 1;
  v8 = 0;
  do
  {
    v8 += std::operator!=[abi:ne180100]<std::string,char [10]>((uint64_t **)(v7 + 32));
    v7 += 136;
  }
  while (v7 != v6);
  if (!v8)
    return 1;
  else
    return 2;
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::getParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  int *v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  int v9;

  v9 = 0;
  v6 = a2;
  v5 = &v9;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float *),VoiceProcessorParameterID,float *>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v5);
  v4 = v8;
  if (v8)
  {
    *(_DWORD *)a3 = v9;
    v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  *(_BYTE *)(a3 + 16) = v4;
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::setParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X8>, float a4@<S0>)
{
  char v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  float v9;

  v9 = a4;
  v6 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float),VoiceProcessorParameterID,float &>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v9);
  v5 = v8;
  if (v8)
  {
    *a3 = 0;
    v5 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  a3[16] = v5;
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::getPropertyInfo(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  _BOOL8 v5;
  uint64_t *v6;
  char *v7;
  unsigned int v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = 0;
  v8 = a2;
  v7 = (char *)&v11 + 4;
  v6 = &v11;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,unsigned int *,unsigned int *),VoiceProcessorPropertyID,unsigned int *,unsigned int *>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v7, &v6);
  v4 = v10;
  if (v10)
  {
    v5 = (_DWORD)v11 != 0;
    *(_QWORD *)a3 = HIDWORD(v11);
    *(_QWORD *)(a3 + 8) = v5;
    v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v9;
  }
  *(_BYTE *)(a3 + 16) = v4;
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::getProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _BYTE *a5@<X8>)
{
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  char v11;
  unsigned int v12;
  uint64_t v13;

  v13 = a3;
  v12 = *a4;
  v9 = a2;
  v8 = &v12;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void *,unsigned int *),VoiceProcessorPropertyID,void *&,unsigned int *>((uint64_t)&v10, (std::__shared_mutex_base *)(a1 + 8), &v9, &v13, &v8);
  v7 = v11;
  if (v11)
  {
    *a4 = v12;
    *a5 = 0;
    v7 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v10;
  }
  a5[16] = v7;
}

void adm::vp::detail::ProxyImplementation<adm::vp::UplinkConfiguration>::setProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X8>)
{
  char v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = a3;
  v7 = a4;
  v8 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void const*,unsigned int),VoiceProcessorPropertyID,void const*&,unsigned int>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v11, &v7);
  v6 = v10;
  if (v10)
  {
    *a5 = 0;
    v6 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v9;
  }
  a5[16] = v6;
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void const*,unsigned int),VoiceProcessorPropertyID,void const*&,unsigned int>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, _QWORD *a4, unsigned int *a5)
{
  _QWORD *sig;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v12;
  uint64_t v13;
  void (***v14)(adm::vp::SPIErrorCategory *__hidden);

  if (!std::__shared_mutex_base::try_lock_shared(this))
    goto LABEL_7;
  sig = (_QWORD *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(_QWORD *)a1 = 6;
    *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v11 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*sig + 96);
  if (v11)
  {
    v12 = v11(sig[1], *a3, *a4, *a5);
    if (!v12)
    {
      *(_BYTE *)a1 = 0;
      LOBYTE(v11) = 1;
      goto LABEL_11;
    }
    LOBYTE(v11) = 0;
    v13 = v12;
    v14 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    v13 = 2;
    v14 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
LABEL_11:
  *(_BYTE *)(a1 + 16) = (_BYTE)v11;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_236CBC688(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  uint64_t v9;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(_QWORD *)v9 = 6;
  *(_QWORD *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x236CBC668);
}

void adm::vp::ErrorCategory::~ErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x23B801508);
}

const char *adm::vp::ErrorCategory::name(adm::vp::ErrorCategory *this)
{
  return "adm::vp::ErrorCategory";
}

_QWORD *adm::vp::ErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_25083E748[a1]);
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void *,unsigned int *),VoiceProcessorPropertyID,void *&,unsigned int *>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *sig;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v12;
  uint64_t v13;
  void (***v14)(adm::vp::SPIErrorCategory *__hidden);

  if (!std::__shared_mutex_base::try_lock_shared(this))
    goto LABEL_7;
  sig = (_QWORD *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(_QWORD *)a1 = 6;
    *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v11 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*sig + 88);
  if (v11)
  {
    v12 = v11(sig[1], *a3, *a4, *a5);
    if (!v12)
    {
      *(_BYTE *)a1 = 0;
      LOBYTE(v11) = 1;
      goto LABEL_11;
    }
    LOBYTE(v11) = 0;
    v13 = v12;
    v14 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    v13 = 2;
    v14 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
LABEL_11:
  *(_BYTE *)(a1 + 16) = (_BYTE)v11;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_236CBC810(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  uint64_t v9;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(_QWORD *)v9 = 6;
  *(_QWORD *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x236CBC7F0);
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,unsigned int *,unsigned int *),VoiceProcessorPropertyID,unsigned int *,unsigned int *>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *sig;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v12;
  uint64_t v13;
  void (***v14)(adm::vp::SPIErrorCategory *__hidden);

  if (!std::__shared_mutex_base::try_lock_shared(this))
    goto LABEL_7;
  sig = (_QWORD *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(_QWORD *)a1 = 6;
    *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v11 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*sig + 48);
  if (v11)
  {
    v12 = v11(sig[1], *a3, *a4, *a5);
    if (!v12)
    {
      *(_BYTE *)a1 = 0;
      LOBYTE(v11) = 1;
      goto LABEL_11;
    }
    LOBYTE(v11) = 0;
    v13 = v12;
    v14 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    v13 = 2;
    v14 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
LABEL_11:
  *(_BYTE *)(a1 + 16) = (_BYTE)v11;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_236CBC950(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  uint64_t v9;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(_QWORD *)v9 = 6;
  *(_QWORD *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x236CBC930);
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float),VoiceProcessorParameterID,float &>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, float *a4)
{
  _QWORD *sig;
  uint64_t (*v9)(_QWORD, _QWORD, float);
  unsigned int v10;
  uint64_t v11;
  void (***v12)(adm::vp::SPIErrorCategory *__hidden);

  if (!std::__shared_mutex_base::try_lock_shared(this))
    goto LABEL_7;
  sig = (_QWORD *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(_QWORD *)a1 = 6;
    *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v9 = *(uint64_t (**)(_QWORD, _QWORD, float))(*sig + 64);
  if (v9)
  {
    v10 = v9(sig[1], *a3, *a4);
    if (!v10)
    {
      *(_BYTE *)a1 = 0;
      LOBYTE(v9) = 1;
      goto LABEL_11;
    }
    LOBYTE(v9) = 0;
    v11 = v10;
    v12 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    v11 = 2;
    v12 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
LABEL_11:
  *(_BYTE *)(a1 + 16) = (_BYTE)v9;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_236CBCA80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  uint64_t v9;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(_QWORD *)v9 = 6;
  *(_QWORD *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x236CBCA64);
}

void adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float *),VoiceProcessorParameterID,float *>(uint64_t a1, std::__shared_mutex_base *this, unsigned int *a3, _QWORD *a4)
{
  _QWORD *sig;
  uint64_t (*v9)(_QWORD, _QWORD, _QWORD);
  unsigned int v10;
  uint64_t v11;
  void (***v12)(adm::vp::SPIErrorCategory *__hidden);

  if (!std::__shared_mutex_base::try_lock_shared(this))
    goto LABEL_7;
  sig = (_QWORD *)this[1].__mut_.__m_.__sig;
  if (!sig)
  {
    std::__shared_mutex_base::unlock_shared(this);
LABEL_7:
    *(_QWORD *)a1 = 6;
    *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  v9 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*sig + 56);
  if (v9)
  {
    v10 = v9(sig[1], *a3, *a4);
    if (!v10)
    {
      *(_BYTE *)a1 = 0;
      LOBYTE(v9) = 1;
      goto LABEL_11;
    }
    LOBYTE(v9) = 0;
    v11 = v10;
    v12 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
  }
  else
  {
    v11 = 2;
    v12 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v12;
LABEL_11:
  *(_BYTE *)(a1 + 16) = (_BYTE)v9;
  std::__shared_mutex_base::unlock_shared(this);
}

void sub_236CBCBB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  uint64_t v9;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    a9 = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&a9, 2u);
  }
  *(_QWORD *)v9 = 6;
  *(_QWORD *)(v9 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(v9 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x236CBCB94);
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::getParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  int *v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  int v9;

  v9 = 0;
  v6 = a2;
  v5 = &v9;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float *),VoiceProcessorParameterID,float *>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v5);
  v4 = v8;
  if (v8)
  {
    *(_DWORD *)a3 = v9;
    v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  *(_BYTE *)(a3 + 16) = v4;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::setParameter(uint64_t a1@<X0>, unsigned int a2@<W1>, _BYTE *a3@<X8>, float a4@<S0>)
{
  char v5;
  unsigned int v6;
  __int128 v7;
  char v8;
  float v9;

  v9 = a4;
  v6 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorParameterID,float),VoiceProcessorParameterID,float &>((uint64_t)&v7, (std::__shared_mutex_base *)(a1 + 8), &v6, &v9);
  v5 = v8;
  if (v8)
  {
    *a3 = 0;
    v5 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v7;
  }
  a3[16] = v5;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::getPropertyInfo(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  _BOOL8 v5;
  uint64_t *v6;
  char *v7;
  unsigned int v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = 0;
  v8 = a2;
  v7 = (char *)&v11 + 4;
  v6 = &v11;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,unsigned int *,unsigned int *),VoiceProcessorPropertyID,unsigned int *,unsigned int *>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v7, &v6);
  v4 = v10;
  if (v10)
  {
    v5 = (_DWORD)v11 != 0;
    *(_QWORD *)a3 = HIDWORD(v11);
    *(_QWORD *)(a3 + 8) = v5;
    v4 = 1;
  }
  else
  {
    *(_OWORD *)a3 = v9;
  }
  *(_BYTE *)(a3 + 16) = v4;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::getProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _BYTE *a5@<X8>)
{
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  char v11;
  unsigned int v12;
  uint64_t v13;

  v13 = a3;
  v12 = *a4;
  v9 = a2;
  v8 = &v12;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void *,unsigned int *),VoiceProcessorPropertyID,void *&,unsigned int *>((uint64_t)&v10, (std::__shared_mutex_base *)(a1 + 8), &v9, &v13, &v8);
  v7 = v11;
  if (v11)
  {
    *a4 = v12;
    *a5 = 0;
    v7 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v10;
  }
  a5[16] = v7;
}

void adm::vp::detail::ProxyImplementation<adm::vp::DownlinkConfiguration>::setProperty(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, _BYTE *a5@<X8>)
{
  char v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v9;
  char v10;
  uint64_t v11;

  v11 = a3;
  v7 = a4;
  v8 = a2;
  adm::vp::SPIClient::call<VoiceProcessorError ()(void *,VoiceProcessorPropertyID,void const*,unsigned int),VoiceProcessorPropertyID,void const*&,unsigned int>((uint64_t)&v9, (std::__shared_mutex_base *)(a1 + 8), &v8, &v11, &v7);
  v6 = v10;
  if (v10)
  {
    *a5 = 0;
    v6 = 1;
  }
  else
  {
    *(_OWORD *)a5 = v9;
  }
  a5[16] = v6;
}

void adm::vp::detail::UplinkProxyImplementation::~UplinkProxyImplementation(adm::vp::detail::UplinkProxyImplementation *this)
{
  std::condition_variable *v2;

  *(_QWORD *)this = off_25083E4A0;
  v2 = (std::condition_variable *)((char *)this + 72);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  std::condition_variable *v2;

  *(_QWORD *)this = off_25083E4A0;
  v2 = (std::condition_variable *)((char *)this + 72);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x23B801508);
}

void adm::vp::detail::UplinkProxyImplementation::clientIO(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  void (***v6)(adm::vp::SPIErrorCategory *__hidden);
  __int128 *v9;
  _QWORD *v10;
  __int128 *v11;
  _QWORD *v12;
  std::__shared_mutex_base *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD, _DWORD *);
  int v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  _DWORD v21[2];
  __int128 v22;
  _OWORD v23[2];
  __int128 v24;
  _OWORD v25[3];
  __int128 v26;

  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v26 = 0u;
  memset(v23, 0, sizeof(v23));
  v22 = 0u;
  v21[0] = *(_DWORD *)(a1 + 220);
  v21[1] = a2;
  HIDWORD(v24) = a4;
  if (a2)
  {
    v9 = &v24;
    v10 = (_QWORD *)v23 + 1;
    do
    {
      *(v10 - 3) = *(_QWORD *)(a3 + 72);
      *v10++ = a3;
      *(_DWORD *)v9 = *(_DWORD *)(a3 + 64);
      v9 = (__int128 *)((char *)v9 + 4);
      a3 += 80;
      --a2;
    }
    while (a2);
  }
  if (a4)
  {
    v11 = &v26;
    v12 = v25;
    do
    {
      *v12 = *(_QWORD *)(a5 + 72);
      v12[3] = a5;
      *(_DWORD *)v11 = *(_DWORD *)(a5 + 64);
      v11 = (__int128 *)((char *)v11 + 4);
      a5 += 80;
      ++v12;
      --a4;
    }
    while (a4);
  }
  v13 = (std::__shared_mutex_base *)(a1 + 8);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(a1 + 8)))
    goto LABEL_13;
  v14 = *(_QWORD **)(a1 + 176);
  if (!v14)
  {
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(a1 + 8));
LABEL_13:
    v19 = 0;
    v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    v18 = 6;
    goto LABEL_14;
  }
  v15 = *(uint64_t (**)(_QWORD, _DWORD *))(*v14 + 128);
  if (v15)
  {
    v16 = v15(v14[1], v21);
    if (v16)
    {
      v17 = 0;
      v18 = v16;
      v19 = v16 & 0xFFFFFF00;
      v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
    v19 = 0;
    v18 = 2;
    v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v13);
  if (v17)
  {
    *(_BYTE *)a6 = 0;
    v20 = 1;
    goto LABEL_15;
  }
LABEL_14:
  v20 = 0;
  *(_QWORD *)a6 = v19 | v18;
  *(_QWORD *)(a6 + 8) = v6;
LABEL_15:
  *(_BYTE *)(a6 + 16) = v20;
}

void sub_236CBD0B0(void *a1)
{
  uint64_t v1;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)(v1 - 64) = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)(v1 - 64), 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x236CBD080);
}

void adm::vp::detail::UplinkProxyImplementation::getRequiredInputSamplesForOutputSamples(void (***this)(adm::vp::SPIErrorCategory *__hidden this)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void (***v4)(adm::vp::SPIErrorCategory *__hidden);
  std::__shared_mutex_base *v6;
  void (**v7)(adm::vp::SPIErrorCategory *__hidden);
  uint64_t (*v8)(void (*)(adm::vp::SPIErrorCategory *__hidden), _QWORD, uint64_t, _DWORD *);
  int v9;
  int v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _DWORD v15[5];

  v4 = this;
  v15[0] = 0;
  v6 = (std::__shared_mutex_base *)(this + 1);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(this + 1)))
    goto LABEL_7;
  v7 = v4[22];
  if (!v7)
  {
    std::__shared_mutex_base::unlock_shared(v6);
LABEL_7:
    v12 = 0;
    v4 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    v11 = 6;
    goto LABEL_8;
  }
  v8 = (uint64_t (*)(void (*)(adm::vp::SPIErrorCategory *__hidden), _QWORD, uint64_t, _DWORD *))*((_QWORD *)*v7 + 15);
  if (v8)
  {
    v9 = v8(v7[1], *((unsigned int *)v4 + 55), a2, v15);
    if (v9)
    {
      v10 = 0;
      v11 = v9;
      v12 = v9 & 0xFFFFFF00;
      v4 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v10 = 1;
    }
  }
  else
  {
    v10 = 0;
    v12 = 0;
    v11 = 2;
    v4 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v6);
  if (v10)
  {
    v14 = v15[0];
    v13 = 1;
    goto LABEL_9;
  }
LABEL_8:
  v13 = 0;
  v14 = v12 | v11;
  *(_QWORD *)(a3 + 8) = v4;
LABEL_9:
  *(_QWORD *)a3 = v14;
  *(_BYTE *)(a3 + 16) = v13;
}

void sub_236CBD210(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 buf)
{
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    buf = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x236CBD1E0);
}

void adm::vp::detail::UplinkProxyImplementation::getExpectedOutputSamplesForInputSamples(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(a1 + 16) = 0;
}

void adm::vp::detail::DownlinkProxyImplementation::~DownlinkProxyImplementation(adm::vp::detail::DownlinkProxyImplementation *this)
{
  std::condition_variable *v2;

  *(_QWORD *)this = off_25083E500;
  v2 = (std::condition_variable *)((char *)this + 72);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  std::condition_variable *v2;

  *(_QWORD *)this = off_25083E500;
  v2 = (std::condition_variable *)((char *)this + 72);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::condition_variable::~condition_variable(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x23B801508);
}

void adm::vp::detail::DownlinkProxyImplementation::clientIO(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  void (***v6)(adm::vp::SPIErrorCategory *__hidden);
  __int128 *v9;
  _QWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  std::__shared_mutex_base *v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD, _DWORD *);
  int v16;
  int v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  _DWORD v21[2];
  __int128 v22;
  __int128 v23;
  _OWORD v24[3];
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];

  v26 = 0u;
  v27[0] = 0u;
  v25 = 0u;
  memset(v24, 0, sizeof(v24));
  v22 = 0u;
  v23 = 0u;
  v21[0] = *(_DWORD *)(a1 + 220);
  v21[1] = a2;
  DWORD1(v26) = a4;
  if (a2)
  {
    v9 = &v25;
    v10 = (_QWORD *)v24 + 1;
    do
    {
      *(v10 - 5) = *(_QWORD *)(a3 + 72);
      *v10++ = a3;
      *(_DWORD *)v9 = *(_DWORD *)(a3 + 64);
      v9 = (__int128 *)((char *)v9 + 4);
      a3 += 80;
      --a2;
    }
    while (a2);
  }
  if (a4)
  {
    v11 = (_DWORD *)v27 + 2;
    v12 = v27;
    do
    {
      *(v12 - 1) = *(_QWORD *)(a5 + 72);
      *v12 = a5;
      *v11++ = *(_DWORD *)(a5 + 64);
      a5 += 80;
      ++v12;
      --a4;
    }
    while (a4);
  }
  v13 = (std::__shared_mutex_base *)(a1 + 8);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(a1 + 8)))
    goto LABEL_13;
  v14 = *(_QWORD **)(a1 + 176);
  if (!v14)
  {
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(a1 + 8));
LABEL_13:
    v19 = 0;
    v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    v18 = 6;
    goto LABEL_14;
  }
  v15 = *(uint64_t (**)(_QWORD, _DWORD *))(*v14 + 144);
  if (v15)
  {
    v16 = v15(v14[1], v21);
    if (v16)
    {
      v17 = 0;
      v18 = v16;
      v19 = v16 & 0xFFFFFF00;
      v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
    v19 = 0;
    v18 = 2;
    v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v13);
  if (v17)
  {
    *(_BYTE *)a6 = 0;
    v20 = 1;
    goto LABEL_15;
  }
LABEL_14:
  v20 = 0;
  *(_QWORD *)a6 = v19 | v18;
  *(_QWORD *)(a6 + 8) = v6;
LABEL_15:
  *(_BYTE *)(a6 + 16) = v20;
}

void sub_236CBD4CC(void *a1)
{
  uint64_t v1;
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)(v1 - 64) = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)(v1 - 64), 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x236CBD49CLL);
}

void adm::vp::detail::DownlinkProxyImplementation::getRequiredInputSamplesForOutputSamples(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 2;
  *(_QWORD *)(a1 + 8) = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  *(_BYTE *)(a1 + 16) = 0;
}

void adm::vp::detail::DownlinkProxyImplementation::getExpectedOutputSamplesForInputSamples(void (***this)(adm::vp::SPIErrorCategory *__hidden this)@<X0>, unint64_t *a2@<X2>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  void (***v6)(adm::vp::SPIErrorCategory *__hidden);
  std::__shared_mutex_base *v8;
  void (**v9)(adm::vp::SPIErrorCategory *__hidden);
  uint64_t (*v10)(void (*)(adm::vp::SPIErrorCategory *__hidden), _QWORD, uint64_t, unsigned int *, unsigned int *);
  int v11;
  int v12;
  unsigned __int8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17[6];

  v6 = this;
  *(_QWORD *)v17 = 0;
  v8 = (std::__shared_mutex_base *)(this + 1);
  if (!std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(this + 1)))
    goto LABEL_7;
  v9 = v6[22];
  if (!v9)
  {
    std::__shared_mutex_base::unlock_shared(v8);
LABEL_7:
    v14 = 0;
    v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
    v13 = 6;
    goto LABEL_8;
  }
  v10 = (uint64_t (*)(void (*)(adm::vp::SPIErrorCategory *__hidden), _QWORD, uint64_t, unsigned int *, unsigned int *))*((_QWORD *)*v9 + 17);
  if (v10)
  {
    v11 = v10(v9[1], *((unsigned int *)v6 + 55), a3, &v17[1], v17);
    if (v11)
    {
      v12 = 0;
      v13 = v11;
      v14 = v11 & 0xFFFFFF00;
      v6 = &adm::vp::unexpected(VoiceProcessorError)::kSPIErrorCategory;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      v12 = 1;
    }
  }
  else
  {
    v12 = 0;
    v14 = 0;
    v13 = 2;
    v6 = &adm::vp::unexpected(adm::vp::ErrorCode)::kErrorCategory;
  }
  std::__shared_mutex_base::unlock_shared(v8);
  if (v12)
  {
    v16 = v17[0];
    *a2 = v17[1];
    v15 = 1;
    goto LABEL_9;
  }
LABEL_8:
  v15 = 0;
  v16 = v14 | v13;
  *(_QWORD *)(a4 + 8) = v6;
LABEL_9:
  *(_QWORD *)a4 = v16;
  *(_BYTE *)(a4 + 16) = v15;
}

void sub_236CBD658(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 buf)
{
  NSObject *adm_log_object;

  __cxa_begin_catch(a1);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
  {
    buf = 0;
    _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "unknown exception in voice processor proxy SPI - file a radar for \"Audio - DSP Software\"", (uint8_t *)&buf, 2u);
  }
  __cxa_end_catch();
  JUMPOUT(0x236CBD624);
}

BOOL adm::vp::SPIClient::isConfigured(std::__shared_mutex_base *this)
{
  _BOOL8 result;
  uint64_t sig;

  result = std::__shared_mutex_base::try_lock_shared(this);
  if ((_DWORD)result)
  {
    sig = this[1].__mut_.__m_.__sig;
    std::__shared_mutex_base::unlock_shared(this);
    return sig != 0;
  }
  return result;
}

_DWORD *adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>::getConfiguration(uint64_t a1)
{
  __n128 v1;
  _DWORD *v2;
  _DWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 v8;
  _DWORD *v9;
  int v10;
  char v11;

  adm::vp::ImmutableConfiguration<adm::vp::UplinkConfiguration>::getNodeConfiguration((uint64_t)&v8, *(_QWORD *)(a1 + 200), *(std::__shared_weak_count **)(a1 + 208), *(_DWORD *)(a1 + 216));
  if (!v11)
    std::__throw_bad_optional_access[abi:ne180100]();
  v1 = v8;
  v2 = v9;
  if (!v9)
  {
    v2 = *(_DWORD **)(v8.n128_u64[0] + 8);
    v3 = *(_DWORD **)(v8.n128_u64[0] + 16);
    if (v2 == v3)
    {
LABEL_6:
      v2 = 0;
    }
    else
    {
      while (*v2 != v10)
      {
        v2 += 16;
        if (v2 == v3)
          goto LABEL_6;
      }
    }
  }
  v4 = (std::__shared_weak_count *)v8.n128_u64[1];
  if (v8.n128_u64[1])
  {
    v5 = (unint64_t *)(v8.n128_u64[1] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(unint64_t, __n128))(*(_QWORD *)v1.n128_u64[1] + 16))(v1.n128_u64[1], v1);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v2;
}

void adm::dsp::v1::GraphBuilder::~GraphBuilder(adm::dsp::v1::GraphBuilder *this)
{
  adm::dsp::GraphBuilder::~GraphBuilder(this);
  JUMPOUT(0x23B801508);
}

uint64_t adm::dsp::v1::GraphBuilder::build@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  NSObject *adm_log_object;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t *);
  const char *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;
  NSObject *v23;
  unint64_t v24;
  unsigned __int8 v25;
  BOOL v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  DSPGraph::Graph *v30;
  const std::string::value_type *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  unsigned __int16 v38;
  uint64_t result;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  uint64_t v54;
  int v55;
  int v56;
  NSObject *v57;
  int v58;
  uint64_t v59;
  int v60;
  NSObject *v61;
  NSObject *v62;
  int v63;
  _OWORD *v64;
  const UInt8 *v65;
  CFIndex v66;
  NSObject *v67;
  std::string::size_type v68;
  uint64_t i;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string::size_type v73;
  uint64_t j;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  std::string::size_type v79;
  uint64_t v80;
  std::string *v81;
  __int128 v82;
  std::string *v83;
  __int128 v84;
  int v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  uint64_t v90;
  std::string::size_type v91;
  uint64_t v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  CFTypeRef *v96;
  CFTypeRef *v97;
  CFTypeRef v98;
  CFTypeRef *v99;
  CFTypeRef *v100;
  CFTypeRef v101;
  char v102;
  NSObject *v103;
  int v104;
  NSObject *v105;
  NSObject *v106;
  int v107;
  DSPGraph::Graph *v108;
  uint64_t v109;
  std::string::size_type v110;
  uint64_t v111;
  const void *v112;
  const char *v113;
  _QWORD *v114;
  const char *v115;
  _QWORD *v116;
  const char *v117;
  _QWORD *v118;
  const char *v119;
  _QWORD *v120;
  std::runtime_error *exception;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  DSPGraph::Graph *v125;
  std::string v126;
  CFTypeRef cf;
  DSPGraph::Graph *v128;
  std::string v129;
  std::string v130;
  _BYTE buf[28];
  uint64_t v132;

  v4 = a1;
  v132 = *MEMORY[0x24BDAC8D0];
  v128 = 0;
  if (*(_BYTE *)(a1 + 256))
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "compiling text", buf, 2u);
    }
    v7 = v4;
    if (*(char *)(v4 + 255) < 0)
    {
      v8 = *(_QWORD *)(v4 + 232);
      v9 = *(_QWORD *)(v4 + 240);
    }
    else
    {
      v8 = v4 + 232;
      v9 = *(unsigned __int8 *)(v4 + 255);
    }
    v16 = 0;
    v17 = 0;
    v18 = (_BYTE *)(v8 + v9);
LABEL_14:
    if (v9 >= (unint64_t)v16)
    {
      v19 = v9 - (_QWORD)v16;
      if ((uint64_t)(v9 - (_QWORD)v16) >= 1)
      {
        v20 = &v16[v8];
        do
        {
          v21 = memchr(v20, 10, v19);
          if (!v21)
            break;
          if (*v21 == 10)
          {
            if (v21 == v18)
              break;
            v22 = &v21[-v8];
            if (&v21[-v8] == (_BYTE *)-1)
              break;
            v122 = a3;
            v23 = get_adm_log_object();
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              v24 = v22 - v16;
              if (v9 - (unint64_t)v16 < v22 - v16)
                v24 = v9 - (_QWORD)v16;
              if (v24 >= 0x80000000)
                v25 = 0;
              else
                v25 = v24;
              v26 = v24 == 0;
              v27 = v24 >> 31;
              v28 = v24 & 0xFFFFFF00 | v25;
              if (v26)
                v29 = 0x80000000;
              else
                v29 = 0x7FFFFFFF;
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v17;
              *(_WORD *)&buf[12] = 1040;
              if (v27)
                v28 = v29;
              *(_DWORD *)&buf[14] = v28;
              ++v17;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = &v16[v8];
              _os_log_impl(&dword_236C84000, v23, OS_LOG_TYPE_DEFAULT, "compiling line %2lu - %.*s", buf, 0x1Cu);
            }
            v16 = v22 + 1;
            a3 = v122;
            goto LABEL_14;
          }
          v20 = v21 + 1;
          v19 = v18 - v20;
        }
        while (v18 - v20 >= 1);
      }
    }
    *(_QWORD *)buf = &v128;
    *(_QWORD *)&buf[8] = v7;
    v4 = v7;
    *(_QWORD *)&buf[16] = a2;
    v14 = caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_0>;
    v15 = "compile DSP graph text";
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 96);
    v11 = get_adm_log_object();
    v12 = v11;
    if (!v10)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        v36 = "failed to build DSP graph - graph file path and graph text are missing";
        v37 = v12;
        goto LABEL_96;
      }
LABEL_49:
      v38 = 25456;
LABEL_50:
      *(_QWORD *)a3 = v38 | 0x64670000u;
      *(_BYTE *)(a3 + 16) = 0;
      goto LABEL_51;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v13 = (_QWORD *)(v4 + 72);
      if (*(char *)(v4 + 95) < 0)
        v13 = (_QWORD *)*v13;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_236C84000, v12, OS_LOG_TYPE_DEFAULT, "compiling file \"%s\"", buf, 0xCu);
    }
    *(_QWORD *)buf = &v128;
    *(_QWORD *)&buf[8] = v4;
    *(_QWORD *)&buf[16] = a2;
    v14 = caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_1>;
    v15 = "compile DSP graph";
  }
  v30 = v128;
  if (!v128)
  {
    v35 = get_adm_log_object();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v36 = "failed to build DSP graph - compilation error";
      v37 = v35;
LABEL_96:
      _os_log_error_impl(&dword_236C84000, v37, OS_LOG_TYPE_ERROR, v36, buf, 2u);
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  if (*(_BYTE *)(v4 + 224))
  {
    v31 = (const std::string::value_type *)(v4 + 200);
    if (*(char *)(v4 + 223) < 0)
      v31 = *(const std::string::value_type **)v31;
    std::string::__assign_external((std::string *)v128 + 17, v31);
    v30 = v128;
  }
  if (DSPGraph::Graph::numInputs(v30))
  {
    v32 = DSPGraph::Graph::in(v128);
    v33 = *(_QWORD *)(v32 + 88);
    if (*(_QWORD *)(v32 + 96) == v33)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v130, "out");
      v118 = (_QWORD *)(v32 + 32);
      if (*(char *)(v32 + 55) < 0)
        v118 = (_QWORD *)*v118;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v117, v118, (uint64_t)(*(_QWORD *)(v32 + 96) - *(_QWORD *)(v32 + 88)) >> 5, 0);
      result = DSPGraph::ThrowException();
      goto LABEL_225;
    }
    v34 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 40))(v33) + 120);
  }
  else
  {
    v34 = 0;
  }
  v40 = 1;
  while (v40 < DSPGraph::Graph::numInputs(v128))
  {
    v41 = DSPGraph::Graph::in(v128);
    v42 = *(_QWORD *)(v41 + 88);
    if (*(_QWORD *)(v41 + 96) == v42)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v130, "out");
      v114 = (_QWORD *)(v41 + 32);
      if (*(char *)(v41 + 55) < 0)
        v114 = (_QWORD *)*v114;
      DSPGraph::strprintf((DSPGraph *)"Box::out inIndex out of range! box %s has %zu outputs but input %u was requested", v113, v114, (uint64_t)(*(_QWORD *)(v41 + 96) - *(_QWORD *)(v41 + 88)) >> 5, 0);
      result = DSPGraph::ThrowException();
      goto LABEL_225;
    }
    ++v40;
    if (v34 != **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42) + 120))
    {
      v43 = get_adm_log_object();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_236C84000, v43, OS_LOG_TYPE_ERROR, "failed to build DSP graph - all input bus sample rates must be equal", buf, 2u);
      }
      v38 = 29554;
      goto LABEL_50;
    }
  }
  if (!DSPGraph::Graph::numOutputs(v128))
  {
    v46 = a3;
    v47 = 0;
    goto LABEL_66;
  }
  v44 = DSPGraph::Graph::out(v128);
  v45 = *(_QWORD *)(v44 + 64);
  if (*(_QWORD *)(v44 + 72) == v45)
  {
    std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
    std::string::basic_string[abi:ne180100]<0>(&v130, "in");
    v120 = (_QWORD *)(v44 + 32);
    if (*(char *)(v44 + 55) < 0)
      v120 = (_QWORD *)*v120;
    DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v119, v120, (uint64_t)(*(_QWORD *)(v44 + 72) - *(_QWORD *)(v44 + 64)) >> 5, 0);
    result = DSPGraph::ThrowException();
LABEL_225:
    __break(1u);
    return result;
  }
  v46 = a3;
  v47 = **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45) + 120);
LABEL_66:
  v48 = 1;
  while (v48 < DSPGraph::Graph::numOutputs(v128))
  {
    v49 = DSPGraph::Graph::out(v128);
    v50 = *(_QWORD *)(v49 + 64);
    if (*(_QWORD *)(v49 + 72) == v50)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/System/Library/PrivateFrameworks/AudioToolboxCore.framework/PrivateHeaders/DSPGraph_Box.h");
      std::string::basic_string[abi:ne180100]<0>(&v130, "in");
      v116 = (_QWORD *)(v49 + 32);
      if (*(char *)(v49 + 55) < 0)
        v116 = (_QWORD *)*v116;
      DSPGraph::strprintf((DSPGraph *)"Box::in inIndex out of range! box %s has %zu inputs but input %u was requested", v115, v116, (uint64_t)(*(_QWORD *)(v49 + 72) - *(_QWORD *)(v49 + 64)) >> 5, 0);
      result = DSPGraph::ThrowException();
      goto LABEL_225;
    }
    ++v48;
    if (v47 != **(double **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 40))(v50) + 120))
    {
      v51 = get_adm_log_object();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_236C84000, v51, OS_LOG_TYPE_ERROR, "failed to build DSP graph - all output bus sample rates must be equal", buf, 2u);
      }
      *(_QWORD *)v46 = 1684501362;
      *(_BYTE *)(v46 + 16) = 0;
      goto LABEL_51;
    }
  }
  if (*(_BYTE *)(v4 + 316))
  {
    v52 = get_adm_log_object();
    v53 = v52;
    v54 = v46;
    if (v34 != v47)
    {
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_236C84000, v53, OS_LOG_TYPE_ERROR, "failed to build DSP graph - I/O bus sample rates of fixed block size graphs must be equal", buf, 2u);
      }
      v59 = 1684501362;
      goto LABEL_94;
    }
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      v55 = *(_DWORD *)(v4 + 312);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v55;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v34;
      _os_log_impl(&dword_236C84000, v53, OS_LOG_TYPE_DEFAULT, "setting fixed slice duration using block size %u and sample rate %u", buf, 0xEu);
    }
    DSPGraph::Graph::setSliceDuration();
    v56 = 0;
  }
  else
  {
    v54 = v46;
    if (*(_BYTE *)(v4 + 324))
    {
      v57 = get_adm_log_object();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        v58 = *(_DWORD *)(v4 + 320);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v58;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v47;
        _os_log_impl(&dword_236C84000, v57, OS_LOG_TYPE_DEFAULT, "setting variable slice duration using block size %u and ouptut sample rate %u", buf, 0xEu);
      }
      DSPGraph::Graph::setSliceDuration();
      v56 = 2;
    }
    else
    {
      v60 = *(unsigned __int8 *)(v4 + 332);
      v61 = get_adm_log_object();
      v62 = v61;
      if (!v60)
      {
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_236C84000, v62, OS_LOG_TYPE_ERROR, "failed to build DSP graph - block size information is missing", buf, 2u);
        }
        v59 = 1684497011;
        goto LABEL_94;
      }
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        v63 = *(_DWORD *)(v4 + 328);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v63;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v34;
        _os_log_impl(&dword_236C84000, v62, OS_LOG_TYPE_DEFAULT, "setting variable slice duration using block size %u and input sample rate %u", buf, 0xEu);
      }
      DSPGraph::Graph::setSliceDuration();
      v56 = 3;
    }
  }
  *(_QWORD *)buf = v4;
  *(_QWORD *)&buf[8] = &v128;
  *(_QWORD *)buf = &v128;
  {
    v59 = 1684497254;
LABEL_94:
    *(_QWORD *)v54 = v59;
    *(_BYTE *)(v54 + 16) = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(v4 + 32))
  {
    v64 = (_OWORD *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
    }
    else
    {
      *(_OWORD *)buf = *v64;
      *(_QWORD *)&buf[16] = *(_QWORD *)(v4 + 24);
    }
    if (buf[23] >= 0)
      v65 = buf;
    else
      v65 = *(const UInt8 **)buf;
    if (buf[23] >= 0)
      v66 = buf[23];
    else
      v66 = *(_QWORD *)&buf[8];
    cf = CFStringCreateWithBytes(0, v65, v66, 0x8000100u, 0);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (*(_BYTE *)(v4 + 32))
    {
      v67 = get_adm_log_object();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(v4 + 31) < 0)
          v64 = *(_OWORD **)v64;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v64;
        _os_log_impl(&dword_236C84000, v67, OS_LOG_TYPE_DEFAULT, "setting \"%s\" resources path", buf, 0xCu);
      }
    }
  }
  else
  {
    cf = 0;
  }
  v124 = v56;
  v123 = v54;
  v68 = *(_QWORD *)(v4 + 152);
  for (i = *(_QWORD *)(v4 + 160); v68 != i; v68 += 24)
  {
    if (*(char *)(v68 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v68, *(_QWORD *)(v68 + 8));
    }
    else
    {
      v70 = *(_OWORD *)v68;
      v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v68 + 16);
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v70;
    }
    v71 = std::string::insert(&v130, 0, "file_path ", 0xAuLL);
    v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v71->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    v130.__r_.__value_.__r.__words[0] = v68;
    v130.__r_.__value_.__l.__size_ = (std::string::size_type)&cf;
    v130.__r_.__value_.__r.__words[2] = (std::string::size_type)&v128;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v73 = *(_QWORD *)(v4 + 104);
  for (j = *(_QWORD *)(v4 + 112); v73 != j; v73 += 24)
  {
    if (*(char *)(v73 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v73, *(_QWORD *)(v73 + 8));
    }
    else
    {
      v75 = *(_OWORD *)v73;
      v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v73 + 16);
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v75;
    }
    v76 = std::string::insert(&v130, 0, "file_path ", 0xAuLL);
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    *(_QWORD *)&buf[16] = *((_QWORD *)&v76->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v130.__r_.__value_.__l.__data_);
    v130.__r_.__value_.__r.__words[0] = v73;
    v130.__r_.__value_.__l.__size_ = (std::string::size_type)&v128;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v78 = v4;
  v79 = *(_QWORD *)(v4 + 128);
  v80 = *(_QWORD *)(v4 + 136);
  if (v79 != v80)
  {
    while (1)
    {
      if (*(char *)(v79 + 47) < 0)
        std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)(v79 + 24), *(_QWORD *)(v79 + 32));
      else
        v126 = *(std::string *)(v79 + 24);
      v81 = std::string::insert(&v126, 0, "file_path ", 0xAuLL);
      v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v129.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      v83 = std::string::append(&v129, ", box_name ", 0xBuLL);
      v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
      v130.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v84;
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      v85 = *(char *)(v79 + 23);
      if (v85 >= 0)
        v86 = (const std::string::value_type *)v79;
      else
        v86 = *(const std::string::value_type **)v79;
      if (v85 >= 0)
        v87 = *(unsigned __int8 *)(v79 + 23);
      else
        v87 = *(_QWORD *)(v79 + 8);
      v88 = std::string::append(&v130, v86, v87);
      v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v88->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v130.__r_.__value_.__l.__data_);
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v129.__r_.__value_.__l.__data_);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      v130.__r_.__value_.__r.__words[0] = v79;
      v130.__r_.__value_.__l.__size_ = v79 + 24;
      v130.__r_.__value_.__r.__words[2] = (std::string::size_type)&v128;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v79 += 48;
      if (v79 == v80)
        goto LABEL_153;
    }
LABEL_199:
    v111 = 1684496757;
LABEL_200:
    *(_QWORD *)v54 = v111;
    *(_BYTE *)(v54 + 16) = 0;
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    goto LABEL_202;
  }
LABEL_153:
  v90 = v78;
  v91 = *(_QWORD *)(v78 + 176);
  v92 = *(_QWORD *)(v90 + 184);
  if (v91 != v92)
  {
    while (1)
    {
      if (*(char *)(v91 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)v91, *(_QWORD *)(v91 + 8));
      }
      else
      {
        v93 = *(_OWORD *)v91;
        v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v91 + 16);
        *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v93;
      }
      v94 = std::string::insert(&v130, 0, "file_path ", 0xAuLL);
      v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v94->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v95;
      v94->__r_.__value_.__l.__size_ = 0;
      v94->__r_.__value_.__r.__words[2] = 0;
      v94->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v130.__r_.__value_.__l.__data_);
      v130.__r_.__value_.__r.__words[0] = v91;
      v130.__r_.__value_.__l.__size_ = (std::string::size_type)&cf;
      v130.__r_.__value_.__r.__words[2] = (std::string::size_type)&v128;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v91 += 24;
      if (v91 == v92)
        goto LABEL_163;
    }
LABEL_198:
    v111 = 1684500595;
    goto LABEL_200;
  }
LABEL_163:
  v96 = *(CFTypeRef **)(v90 + 288);
  v97 = *(CFTypeRef **)(v90 + 296);
  if (v96 == v97)
  {
LABEL_170:
    v99 = *(CFTypeRef **)(v90 + 264);
    v100 = *(CFTypeRef **)(v90 + 272);
    if (v99 == v100)
    {
LABEL_179:
      *(_QWORD *)buf = v90;
      *(_QWORD *)&buf[8] = &v128;
      *(_QWORD *)buf = v90;
      *(_QWORD *)&buf[8] = &v128;
      if (*(_BYTE *)(v90 + 388))
      {
        v103 = get_adm_log_object();
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          v104 = *(_DWORD *)(v90 + 384);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v104;
          _os_log_impl(&dword_236C84000, v103, OS_LOG_TYPE_DEFAULT, "setting sample rate conversion algorithm to %u", buf, 8u);
        }
        DSPGraph::Graph::setSRCAlgorithm(v128);
        if (*(_BYTE *)(v90 + 388) && *(_DWORD *)(v90 + 384) == 1835626096)
        {
          v105 = get_adm_log_object();
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_236C84000, v105, OS_LOG_TYPE_DEFAULT, "enabling minium phase sample rate conversion", buf, 2u);
          }
          DSPGraph::Graph::setSRCMinimumPhase(v128);
        }
      }
      if (*(_BYTE *)(v90 + 396))
      {
        v106 = get_adm_log_object();
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
        {
          v107 = *(_DWORD *)(v90 + 392);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v107;
          _os_log_impl(&dword_236C84000, v106, OS_LOG_TYPE_DEFAULT, "setting sample rate conversion quality to %u", buf, 8u);
        }
        DSPGraph::Graph::setSRCQuality(v128);
      }
      LODWORD(v129.__r_.__value_.__l.__data_) = 2 * *(unsigned __int8 *)(v90 + 401);
      *(_QWORD *)buf = &v128;
      *(_QWORD *)&buf[8] = &v129;
      {
        v108 = v128;
        v128 = 0;
        v125 = v108;
        adm::dsp::v1::Graph::create(&v130, (uint64_t *)&v125, v124);
        v109 = (uint64_t)v125;
        v125 = 0;
        if (v109)
          (*(void (**)(uint64_t))(*(_QWORD *)v109 + 8))(v109);
        v110 = v130.__r_.__value_.__r.__words[0];
        if (v130.__r_.__value_.__r.__words[0] && *(_BYTE *)(v90 + 402))
        {
          *(_QWORD *)buf = &v130;
          *(_QWORD *)&buf[8] = v90;
          v110 = v130.__r_.__value_.__r.__words[0];
        }
        *(_QWORD *)v123 = v110;
        *(_BYTE *)(v123 + 16) = 1;
      }
      else
      {
        *(_QWORD *)v123 = 1684498798;
        *(_BYTE *)(v123 + 16) = 0;
      }
      goto LABEL_202;
    }
    while (1)
    {
      v101 = *v99;
      if (*v99)
        CFRetain(*v99);
      v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v128;
      v130.__r_.__value_.__l.__size_ = (std::string::size_type)&v129;
      std::string::basic_string[abi:ne180100]<0>(buf, (char *)&unk_236CE4E1D);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if ((v102 & 1) == 0)
        break;
      if (v129.__r_.__value_.__r.__words[0])
        CFRelease(v129.__r_.__value_.__l.__data_);
      if (++v99 == v100)
        goto LABEL_179;
    }
    *(_QWORD *)v123 = 1684496757;
    *(_BYTE *)(v123 + 16) = 0;
    v112 = (const void *)v129.__r_.__value_.__r.__words[0];
    if (v129.__r_.__value_.__r.__words[0])
LABEL_208:
      CFRelease(v112);
  }
  else
  {
    while (1)
    {
      v98 = *v96;
      if (*v96)
        CFRetain(*v96);
      v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
      *(_QWORD *)buf = &v128;
      *(_QWORD *)&buf[8] = &v130;
      if (v130.__r_.__value_.__r.__words[0])
        CFRelease(v130.__r_.__value_.__l.__data_);
      if (++v96 == v97)
        goto LABEL_170;
    }
    *(_QWORD *)v123 = 1684500595;
    *(_BYTE *)(v123 + 16) = 0;
    v112 = (const void *)v130.__r_.__value_.__r.__words[0];
    if (v130.__r_.__value_.__r.__words[0])
      goto LABEL_208;
  }
LABEL_202:
  if (cf)
    CFRelease(cf);
LABEL_51:
  result = (uint64_t)v128;
  v128 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_236CBEA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_0>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  _BYTE v8[40];
  _OWORD v9[13];
  uint64_t v10;
  uint64_t v11;
  void **v12;

  v1 = *a1;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)v9);
  adm::dsp::GraphMacroGenerator::operator()((uint64_t)v8, *(_QWORD *)(v1 + 16));
  memset(v7, 0, sizeof(v7));
  DSPGraph::Interpreter::compileText();
  v2 = *(uint64_t **)v1;
  v3 = v11;
  v11 = 0;
  v4 = *v2;
  *v2 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v11;
  v11 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v12 = (void **)v7;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v8);
  return MEMORY[0x23B801034](v9);
}

void sub_236CBEC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  *(_QWORD *)(v5 - 40) = v4;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 40));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  MEMORY[0x23B801034](va1);
  _Unwind_Resume(a1);
}

uint64_t adm::dsp::v1::`anonymous namespace'::exception_guard(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
}

{
  void (*v4)(_QWORD);
  _QWORD v5[7];

  v5[6] = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  v5[0] = a3;
  a2(v5);
  return 1;
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  _BYTE v8[40];
  _OWORD v9[13];
  uint64_t v10;
  uint64_t v11;
  void **v12;

  v1 = *a1;
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  DSPGraph::Interpreter::Interpreter((DSPGraph::Interpreter *)v9);
  adm::dsp::GraphMacroGenerator::operator()((uint64_t)v8, *(_QWORD *)(v1 + 16));
  memset(v7, 0, sizeof(v7));
  DSPGraph::Interpreter::compileFile();
  v2 = *(uint64_t **)v1;
  v3 = v11;
  v11 = 0;
  v4 = *v2;
  *v2 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v11;
  v11 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v12 = (void **)v7;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v8);
  return MEMORY[0x23B801034](v9);
}

void sub_236CBED8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  *(_QWORD *)(v5 - 40) = v4;
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 40));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  MEMORY[0x23B801034](va1);
  _Unwind_Resume(a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_2>(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  const time_t *v6;
  char *v7;
  const char *v8;
  const char *v9;
  tm *v10;
  std::string *v11;
  int v12;
  size_t v13;
  size_t v14;
  std::string *v15;
  std::string v16;
  CFTypeRef cf;
  std::error_code v18;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = **a1;
  if (*(_BYTE *)(v1 + 400) && *(_BYTE *)(v1 + 64))
  {
    v2 = *(_QWORD *)(*a1)[1];
    v3 = v1 + 40;
    v18.__val_ = 0;
    v18.__cat_ = std::system_category();
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)(v1 + 40), &v18);
    if (*(char *)(v2 + 431) >= 0)
      v4 = (char *)(v2 + 408);
    else
      v4 = *(char **)(v2 + 408);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v4);
    v5 = *(_QWORD **)(v2 + 24);
    if (v5)
    {
      v6 = (const time_t *)(v1 + 408);
      do
      {
        if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[2] + 232))(v5[2])
          || (*(uint64_t (**)(_QWORD))(*(_QWORD *)v5[2] + 240))(v5[2]))
        {
          v7 = (char *)v5[2];
          if (*(char *)(v2 + 431) >= 0)
            v8 = (const char *)(v2 + 408);
          else
            v8 = *(const char **)(v2 + 408);
          v9 = v7 + 32;
          if (v7[55] < 0)
            v9 = *(const char **)v9;
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v20 = 0;
          std::string::append[abi:ne180100]<char const*,0>((std::string *)__p, (std::string *)"adm.", (std::string *)"");
          std::__fs::filesystem::operator/[abi:ne180100](&v16, v3, (std::__fs::filesystem::path *)__p);
          if (SBYTE7(v20) < 0)
            operator delete(__p[0]);
          v21 = 0u;
          v22 = 0u;
          *(_OWORD *)__p = 0u;
          v20 = 0u;
          v10 = localtime(v6);
          strftime((char *)__p, 0x40uLL, "%Y%m%d.%H%M%S.", v10);
          v11 = (std::string *)((char *)&v18.__cat_ + 7);
          do
          {
            v12 = v11->__r_.__value_.__s.__data_[1];
            v11 = (std::string *)((char *)v11 + 1);
          }
          while (v12);
          std::string::append[abi:ne180100]<char const*,0>(&v16, (std::string *)__p, v11);
          if (v8 && *v8)
          {
            v13 = strlen(v8);
            std::string::append(&v16, v8, v13);
            std::string::append(&v16, ".", 1uLL);
          }
          if (v9 && *v9)
          {
            v14 = strlen(v9);
            std::string::append(&v16, v9, v14);
          }
          std::string::append(&v16, ".caf", 4uLL);
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v15 = &v16;
          else
            v15 = (std::string *)v16.__r_.__value_.__r.__words[0];
          (*(void (**)(char *, std::string *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 152))(v7, v15, 0, 1, 1, 4096);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
        }
        v5 = (_QWORD *)*v5;
      }
      while (v5);
    }
    if (cf)
      CFRelease(cf);
  }
}

void sub_236CBF024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, CFTypeRef cf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_3>(DSPGraph::Graph ****a1)
{
  return DSPGraph::Graph::configure(***a1);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_4>(const std::__fs::filesystem::path ***a1)
{
  const std::__fs::filesystem::path **v1;
  const std::__fs::filesystem::path *v2;
  __int128 v3;
  CFDataRef v4;
  std::string::size_type v5;
  NSObject *adm_log_object;
  _BOOL4 v7;
  const std::__fs::filesystem::path *v8;
  DSPGraph::Graph *v9;
  const void *v10;
  const std::__fs::filesystem::path *v11;
  DSPGraph::Graph *v12;
  CFDataRef v13;
  CFTypeRef cf;
  std::string v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, v2->__pn_.__r_.__value_.__l.__data_, v2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__pn_.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v3;
  }
  applesauce::CF::make_DataRef(&v13, (uint64_t)&v15);
  v4 = v13;
  applesauce::CF::make_DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v13);
  if (v4)
    CFRelease(v4);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v5 = v1[1]->__pn_.__r_.__value_.__r.__words[0];
  adm_log_object = get_adm_log_object();
  v7 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      v8 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0)
        v8 = (const std::__fs::filesystem::path *)v8->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    v9 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v9, (const __CFDictionary *)v15.__r_.__value_.__l.__data_, (const __CFString *)v1[1]->__pn_.__r_.__value_.__l.__data_);
    v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0])
LABEL_20:
      CFRelease(v10);
  }
  else
  {
    if (v7)
    {
      v11 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0)
        v11 = (const std::__fs::filesystem::path *)v11->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    v12 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v12, (const __CFDictionary *)v15.__r_.__value_.__l.__data_);
    v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0])
      goto LABEL_20;
  }
  if (cf)
    CFRelease(cf);
}

void sub_236CBF278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_236CBF398(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int buf, __int128 a12, uint64_t *a13)
{
  uint64_t *v13;
  void *v15;
  NSObject *adm_log_object;
  uint64_t v17;
  uint64_t *v18;
  const char *v19;
  void *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t *v23;
  NSObject *v24;
  uint32_t v25;
  uint64_t *v26;

  if (!a2)
    _Unwind_Resume(a1);
  if (a2 == 3)
  {
    v15 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
      if (*((char *)v13 + 23) >= 0)
        v18 = v13;
      else
        v18 = (uint64_t *)*v13;
      buf = 136315650;
      WORD2(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 6) = v17;
      HIWORD(a12) = 2080;
      a13 = v18;
      v19 = "failed to %s due to DSPGraph exception: %s - %s";
LABEL_14:
      v24 = adm_log_object;
      v25 = 32;
LABEL_21:
      _os_log_error_impl(&dword_236C84000, v24, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    v20 = __cxa_begin_catch(a1);
    adm_log_object = get_adm_log_object();
    v21 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v21)
      {
        v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
        if (*((char *)v13 + 23) >= 0)
          v23 = v13;
        else
          v23 = (uint64_t *)*v13;
        buf = 136315650;
        WORD2(a12) = 2080;
        *(_QWORD *)((char *)&a12 + 6) = v22;
        HIWORD(a12) = 2080;
        a13 = v23;
        v19 = "failed to %s due to std::exception: %s - %s";
        goto LABEL_14;
      }
    }
    else if (v21)
    {
      if (*((char *)v13 + 23) >= 0)
        v26 = v13;
      else
        v26 = (uint64_t *)*v13;
      buf = 136315394;
      WORD2(a12) = 2080;
      *(_QWORD *)((char *)&a12 + 6) = v26;
      v19 = "failed to %s due to unknown exception - %s";
      v24 = adm_log_object;
      v25 = 22;
      goto LABEL_21;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x236CBF364);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_5>(const std::__fs::filesystem::path ***a1)
{
  const std::__fs::filesystem::path **v1;
  NSObject *adm_log_object;
  const std::__fs::filesystem::path *v3;
  DSPGraph::Graph *v4;
  _BYTE cf[24];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *v1;
    if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0)
      v3 = (const std::__fs::filesystem::path *)v3->__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)cf = 136315138;
    *(_QWORD *)&cf[4] = v3;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", cf, 0xCu);
  }
  v4 = (DSPGraph::Graph *)v1[1]->__pn_.__r_.__value_.__r.__words[0];
  DSPGraph::Graph::setAUStrip(v4, *(const __CFDictionary **)cf);
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
}

void sub_236CBF5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_6>(const std::__fs::filesystem::path ***a1)
{
  const std::__fs::filesystem::path **v1;
  NSObject *adm_log_object;
  const std::__fs::filesystem::path *v3;
  const std::__fs::filesystem::path *v4;
  uint64_t v5;
  _BYTE cf[12];
  __int16 v7;
  const std::__fs::filesystem::path *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *v1;
    if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0)
      v3 = (const std::__fs::filesystem::path *)v3->__pn_.__r_.__value_.__r.__words[0];
    v4 = v1[1];
    if (SHIBYTE(v4->__pn_.__r_.__value_.__r.__words[2]) < 0)
      v4 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)cf = 136315394;
    *(_QWORD *)&cf[4] = v3;
    v7 = 2080;
    v8 = v4;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "on box \"%s\", setting \"%s\"", cf, 0x16u);
  }
  v5 = DSPGraph::Graph::box();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 352))(v5, *(_QWORD *)cf);
  if (*(_QWORD *)cf)
    CFRelease(*(CFTypeRef *)cf);
}

void sub_236CBF720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_7>(const std::__fs::filesystem::path ***a1)
{
  const std::__fs::filesystem::path **v1;
  const std::__fs::filesystem::path *v2;
  __int128 v3;
  CFDataRef v4;
  std::string::size_type v5;
  NSObject *adm_log_object;
  _BOOL4 v7;
  const std::__fs::filesystem::path *v8;
  DSPGraph::Graph *v9;
  const void *v10;
  const std::__fs::filesystem::path *v11;
  DSPGraph::Graph *v12;
  CFDataRef v13;
  CFTypeRef cf;
  std::string v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = **a1;
  if (SHIBYTE(v2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, v2->__pn_.__r_.__value_.__l.__data_, v2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__pn_.__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v3;
  }
  applesauce::CF::make_DataRef(&v13, (uint64_t)&v15);
  v4 = v13;
  applesauce::CF::make_DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v13);
  if (v4)
    CFRelease(v4);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v5 = v1[1]->__pn_.__r_.__value_.__r.__words[0];
  adm_log_object = get_adm_log_object();
  v7 = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      v8 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0)
        v8 = (const std::__fs::filesystem::path *)v8->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
      _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    v9 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v9, (const __CFDictionary *)v15.__r_.__value_.__l.__data_, (const __CFString *)v1[1]->__pn_.__r_.__value_.__l.__data_);
    v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0])
LABEL_20:
      CFRelease(v10);
  }
  else
  {
    if (v7)
    {
      v11 = *v1;
      if (SHIBYTE((*v1)->__pn_.__r_.__value_.__r.__words[2]) < 0)
        v11 = (const std::__fs::filesystem::path *)v11->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting \"%s\"", (uint8_t *)&v15, 0xCu);
    }
    v12 = (DSPGraph::Graph *)v1[2]->__pn_.__r_.__value_.__r.__words[0];
    DSPGraph::Graph::setPropertyStrip(v12, (const __CFDictionary *)v15.__r_.__value_.__l.__data_);
    v10 = (const void *)v15.__r_.__value_.__r.__words[0];
    if (v15.__r_.__value_.__r.__words[0])
      goto LABEL_20;
  }
  if (cf)
    CFRelease(cf);
}

void sub_236CBF92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, CFTypeRef cf, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_8>(DSPGraph::Graph ****a1)
{
  DSPGraph::Graph ***v1;
  NSObject *adm_log_object;
  uint8_t v4[16];

  v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting propstrip as plist", v4, 2u);
  }
  return DSPGraph::Graph::setPropertyStrip(**v1, *v1[1]);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_9>(DSPGraph::Graph ****a1)
{
  DSPGraph::Graph ***v1;
  NSObject *adm_log_object;
  uint8_t v4[16];

  v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting austrip as plist", v4, 2u);
  }
  return DSPGraph::Graph::setAUStrip(**v1, *v1[1]);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_10>(uint64_t **a1)
{
  std::string::size_type *v1;
  std::string::size_type v2;
  uint64_t *v3;
  uint64_t v4;
  float *v5;
  float *v6;
  unsigned int v7;
  float v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string v20;
  void *v21[2];
  std::string::size_type v22;
  float v23;
  int v24;

  v1 = (std::string::size_type *)(*a1)[1];
  v2 = *v1;
  v3 = *(uint64_t **)(*v1 + 536);
  if (v3)
  {
    v4 = **a1;
    do
    {
      v5 = *(float **)(v4 + 336);
      v6 = *(float **)(v4 + 344);
      if (v5 != v6)
      {
        v7 = *((_DWORD *)v3 + 4);
        while (*(_DWORD *)v5 != v7)
        {
          v5 += 2;
          if (v5 == v6)
            goto LABEL_24;
        }
        v8 = v5[1];
        v24 = *((_DWORD *)v3 + 4);
        v23 = v8;
        std::to_string(&v18, v7);
        v9 = std::string::insert(&v18, 0, "parameter id ", 0xDuLL);
        v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        v11 = std::string::append(&v19, ", value ", 8uLL);
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, v8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        v15 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v22 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)v21 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
        v20.__r_.__value_.__l.__size_ = (std::string::size_type)&v23;
        v20.__r_.__value_.__r.__words[2] = v2;
        if (SHIBYTE(v22) < 0)
          operator delete(v21[0]);
      }
LABEL_24:
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_236CBFC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_11>(uint64_t **a1)
{
  std::string::size_type *v1;
  std::string::size_type v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  unsigned int v15;
  _QWORD v16[2];

  v1 = (std::string::size_type *)(*a1)[1];
  v2 = *v1;
  v3 = *(uint64_t **)(*v1 + 576);
  if (v3)
  {
    v4 = **a1;
    do
    {
      if (!*((_BYTE *)v3 + 64))
      {
        v5 = *(_QWORD *)(v4 + 360);
        v6 = *(_QWORD *)(v4 + 368);
        if (v5 != v6)
        {
          v7 = *((_DWORD *)v3 + 4);
          while (*(_DWORD *)v5 != v7)
          {
            v5 += 32;
            if (v5 == v6)
              goto LABEL_4;
          }
          v8 = *(_QWORD *)(v5 + 8);
          v9 = *(_QWORD *)(v5 + 16) - v8;
          v16[0] = v8;
          v16[1] = v9;
          v15 = v7;
          std::to_string(&v12, v7);
          v10 = std::string::insert(&v12, 0, "property id ", 0xCuLL);
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          v14 = v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v12.__r_.__value_.__l.__data_);
          v12.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
          v12.__r_.__value_.__l.__size_ = v2;
          v12.__r_.__value_.__r.__words[2] = (std::string::size_type)&v15;
          if (SHIBYTE(v14) < 0)
            operator delete(__p[0]);
        }
      }
LABEL_4:
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
}

void sub_236CBFE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_12>(DSPGraph::Graph ****a1)
{
  return DSPGraph::Graph::initializeWithFlags(***a1);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::build(adm::dsp::GraphMacroGenerator const&)::$_13>(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v2;
  NSObject *adm_log_object;
  uint8_t v5[16];

  v1 = *(_QWORD ***)a1;
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v5 = 0;
    _os_log_debug_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEBUG, "connecting to AUPB", v5, 2u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)**v1 + 168))(**v1, v2 + 200);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::doSetPropertyValue(DSPGraph::Graph &,unsigned int,std::span<std::byte const,18446744073709551615ul>)::$_0>(_QWORD ***a1)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD, _QWORD, _QWORD))(*(*a1)[1] + 56))((*a1)[1], *(unsigned int *)(*a1)[2], *((unsigned int *)**a1 + 2), ***a1);
}

uint64_t caulk::function_ref<void ()(void)>::functor_invoker<adm::dsp::v1::GraphBuilder::doSetParameterValue(DSPGraph::Graph &,unsigned int,float)::$_0>(unsigned int ***a1)
{
  unsigned int **v1;
  NSObject *adm_log_object;
  unsigned int v3;
  int v4;
  std::string *v5;
  double v6;
  std::string v8;
  _BYTE buf[12];
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    v3 = **v1;
    v4 = bswap32(v3);
    *(_DWORD *)&buf[1] = v4;
    if (((char)v4 - 32) > 0x5E
      || (((__int16)v4 >> 8) - 32) > 0x5E
      || ((v4 << 8 >> 24) - 32) > 0x5E
      || ((v4 >> 24) - 32) > 0x5E)
    {
      std::to_string(&v8, v3);
    }
    else
    {
      strcpy(&buf[5], "'");
      buf[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(&v8, buf);
    }
    v5 = &v8;
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
    v6 = *(float *)v1[1];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v5;
    v10 = 2048;
    v11 = v6;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "setting parameter %s to %f", buf, 0x16u);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__r_.__value_.__l.__data_);
  }
  return (*(uint64_t (**)(unsigned int *, _QWORD, float))(*(_QWORD *)v1[2] + 40))(v1[2], **v1, *(float *)v1[1]);
}

void sub_236CC0064(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void adm::dsp::v1::`anonymous namespace'::loadPlist(adm::dsp::v1::_anonymous_namespace_ *this, const std::__fs::filesystem::path *a2)
{
  CFDataRef v3;
  std::string __p;
  CFDataRef v5;

  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    __p = a2->__pn_;
  applesauce::CF::make_DataRef(&v5, (uint64_t)&__p);
  v3 = v5;
  applesauce::CF::make_DictionaryRef(this, v5);
  if (v3)
    CFRelease(v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_236CC00FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  applesauce::CF::DataRef::~DataRef(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

DSPGraph::Interpreter *DSPGraph::Interpreter::Interpreter(DSPGraph::Interpreter *this)
{
  *(_QWORD *)this = MEMORY[0x24BE0A9F8] + 16;
  *((_QWORD *)this + 1) = 0;
  MEMORY[0x23B801040]((char *)this + 16);
  *((_QWORD *)this + 20) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 42) = 1;
  *((_QWORD *)this + 22) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  return this;
}

void sub_236CC0180(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void adm::dsp::GraphBuilder::~GraphBuilder(adm::dsp::GraphBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void **v10;

  *(_QWORD *)this = off_25083E7E0;
  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    v3 = *((_QWORD *)this + 46);
    v4 = (void *)*((_QWORD *)this + 45);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 45);
    }
    *((_QWORD *)this + 46) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 42);
  if (v6)
  {
    *((_QWORD *)this + 43) = v6;
    operator delete(v6);
  }
  v10 = (void **)((char *)this + 288);
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 264);
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((_BYTE *)this + 256) && *((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((_BYTE *)this + 224) && *((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  v10 = (void **)((char *)this + 176);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 152);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v10);
  v7 = *((_QWORD *)this + 16);
  if (v7)
  {
    v8 = *((_QWORD *)this + 17);
    v9 = (void *)*((_QWORD *)this + 16);
    if (v8 != v7)
    {
      do
      {
        v8 -= 48;
        std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>(v8);
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v7;
    operator delete(v9);
  }
  v10 = (void **)((char *)this + 104);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v10);
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((_BYTE *)this + 32))
  {
    if (*((char *)this + 31) < 0)
      operator delete(*((void **)this + 1));
  }
}

void adm::config_policy::getDeviceConfigurations(uint64_t a1, adm::ConfigurationChangeRequest *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  void **v8;
  __int128 v9;
  _anonymous_namespace_ *DeviceDescription;
  _anonymous_namespace_ *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  const DeviceDescription *v15;
  NSObject *adm_log_object;
  int v17;
  NSObject *v18;
  std::string::size_type size;
  uint64_t **v20;
  const DeviceConfiguration *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  NSObject *v26;
  int v27;
  int v28;
  NSObject *v29;
  const char *v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t i;
  NSObject *v46;
  std::string *v47;
  const char *v48;
  NSObject *v49;
  int v50;
  std::string::size_type v51;
  char v52;
  uint64_t **v53;
  const DeviceConfiguration *v54;
  __int128 v55;
  uint64_t *v56;
  std::string::size_type v57;
  BOOL v58;
  __int128 *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  std::string::size_type v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  std::string::size_type v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  std::string::size_type v80;
  uint64_t *v81;
  uint64_t *v82;
  std::string::size_type v83;
  std::string v84;
  __int128 v85;
  _BYTE v86[29];
  unsigned __int8 v87;
  std::string v88;
  __int128 v89;
  _BYTE v90[29];
  char v91;
  uint64_t *v92;
  _QWORD *v93[2];
  _BYTE __p[12];
  char v95;
  std::string v96;
  std::string buf;
  __int128 v98;
  _BYTE v99[29];
  uint64_t v100;

  v100 = *MEMORY[0x24BDAC8D0];
  v93[0] = 0;
  v93[1] = 0;
  v92 = (uint64_t *)v93;
  if (*(_BYTE *)(a3 + 24))
  {
    v5 = *(_QWORD *)a3;
    v6 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)a3 != v6)
    {
      do
      {
        BYTE8(v89) = 0;
        *(_WORD *)v90 = 0;
        v90[4] = 0;
        v90[8] = 0;
        *(_WORD *)&v90[12] = 0;
        v90[16] = 0;
        v90[20] = 0;
        v90[24] = 0;
        v90[28] = 0;
        memset(&v88, 0, sizeof(v88));
        LOBYTE(v89) = 0;
        std::string::operator=(&v88, (const std::string *)v5);
        if (*(_BYTE *)(v5 + 41) && *(_BYTE *)(v5 + 40))
          *(_WORD *)v90 = 256;
        if (*(_BYTE *)(v5 + 53) && *(_BYTE *)(v5 + 52))
          *(_WORD *)&v90[12] = 256;
        if (*(_BYTE *)(v5 + 68) && *(_DWORD *)(v5 + 64))
        {
          *(_DWORD *)&v90[24] = 0;
          v90[28] = 1;
        }
        if (*(_BYTE *)(v5 + 60) && *(_DWORD *)(v5 + 56))
        {
          *(_DWORD *)&v90[16] = 0;
          v90[20] = 1;
        }
        v7 = std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, (_QWORD *)v5, v5);
        v8 = (void **)(v7 + 7);
        if (*((char *)v7 + 79) < 0)
          operator delete(*v8);
        v7[9] = (uint64_t *)v88.__r_.__value_.__r.__words[2];
        *(_OWORD *)v8 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
        v9 = *(_OWORD *)v90;
        *((_OWORD *)v7 + 5) = v89;
        *((_OWORD *)v7 + 6) = v9;
        *(_OWORD *)((char *)v7 + 109) = *(_OWORD *)&v90[13];
        v5 += 72;
      }
      while (v5 != v6);
    }
  }
  if (*(_BYTE *)a2)
  {
    DeviceDescription = adm::config_policy::getDeviceDescription(a2, 1);
    v11 = adm::config_policy::getDeviceDescription(a2, 0);
    BYTE8(v85) = 0;
    *(_WORD *)v86 = 0;
    v86[4] = 0;
    v86[8] = 0;
    *(_WORD *)&v86[12] = 0;
    v86[16] = 0;
    v86[20] = 0;
    v86[24] = 0;
    v86[28] = 0;
    memset(&v84, 0, sizeof(v84));
    LOBYTE(v85) = 0;
    std::string::basic_string[abi:ne180100]<0>(&buf, "voice isolation conferencing");
    v12 = (char *)a2 + 8;
    v13 = std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, &buf);
    v14 = (_QWORD *)((char *)a2 + 16);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v14 == v13)
    {
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "No input device configuration needed", (uint8_t *)&buf, 2u);
      }
      goto LABEL_28;
    }
    if (DeviceDescription)
    {
      std::string::operator=(&v84, (const std::string *)DeviceDescription);
      if (*((_QWORD *)DeviceDescription + 24) != *((_QWORD *)DeviceDescription + 25))
        goto LABEL_24;
      v23 = *((_QWORD *)DeviceDescription + 21);
      v24 = *((_QWORD *)DeviceDescription + 22);
      if (v23 == v24)
        goto LABEL_24;
      while (!std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(v23 + 32), "reference"))
      {
        v23 += 136;
        if (v23 == v24)
          goto LABEL_24;
      }
      if (v23 == v24)
        goto LABEL_24;
      *(_WORD *)v86 = 257;
      v34 = *(_QWORD *)(v23 + 104);
      v35 = *(_QWORD *)(v23 + 112);
      v36 = v34 + 40;
      v37 = v34 == v35 || v36 == v35;
      if (!v37)
      {
        do
        {
          if (*(_DWORD *)(v34 + 28) < *(_DWORD *)(v36 + 28))
            v34 = v36;
          v36 += 40;
        }
        while (v36 != v35);
      }
      v38 = *(_DWORD *)(v34 + 28);
      v39 = get_adm_log_object();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v38;
        _os_log_impl(&dword_236C84000, v39, OS_LOG_TYPE_DEFAULT, "The max channel count in the supported ref stream format is %u", (uint8_t *)&buf, 8u);
      }
      if (v38)
      {
        *(_DWORD *)&v86[4] = v38;
        v86[8] = 1;
LABEL_24:
        if (adm::config_policy::isBuiltInMicrophoneDevice(DeviceDescription, v15))
        {
          *(_DWORD *)&v86[24] = 1;
          v86[28] = 1;
          *(_DWORD *)&v86[16] = 1;
          v86[20] = 1;
        }
LABEL_28:
        v88 = v84;
        v89 = v85;
        memset(&v84, 0, sizeof(v84));
        *(_OWORD *)v90 = *(_OWORD *)v86;
        *(_OWORD *)&v90[13] = *(_OWORD *)&v86[13];
        v17 = 1;
        goto LABEL_31;
      }
      v18 = get_adm_log_object();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v48 = "Max channel count of the available ref stream is 0 ";
        goto LABEL_108;
      }
    }
    else
    {
      v18 = get_adm_log_object();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        v48 = "Input device description unavailable";
LABEL_108:
        _os_log_error_impl(&dword_236C84000, v18, OS_LOG_TYPE_ERROR, v48, (uint8_t *)&buf, 2u);
      }
    }
    v17 = 0;
    v88.__r_.__value_.__r.__words[0] = 1969448551;
LABEL_31:
    v91 = v17;
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v84.__r_.__value_.__l.__data_);
      if (v91)
      {
LABEL_33:
        size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v88.__r_.__value_.__l.__size_;
        if (size)
        {
          v20 = std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, &v88, (uint64_t)&v88);
        }
        BYTE8(v98) = 0;
        *(_WORD *)v99 = 0;
        v99[4] = 0;
        v99[8] = 0;
        *(_WORD *)&v99[12] = 0;
        v99[16] = 0;
        v99[20] = 0;
        v99[24] = 0;
        v99[28] = 0;
        memset(&buf, 0, sizeof(buf));
        LOBYTE(v98) = 0;
        std::string::basic_string[abi:ne180100]<0>(&v96, "voice isolation conferencing");
        if (v14 == std::__tree<std::string>::find<std::string>((uint64_t)v12, &v96))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "voice activity detection");
          v22 = v14 != std::__tree<std::string>::find<std::string>((uint64_t)v12, __p)
             || adm::config_policy::isExclaveUseCase((uint64_t)v12);
          if (v95 < 0)
            operator delete(*(void **)__p);
        }
        else
        {
          v22 = 1;
        }
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v96.__r_.__value_.__l.__data_);
          if (v22)
          {
LABEL_52:
            if (v11)
            {
              std::string::operator=(&buf, (const std::string *)v11);
              std::string::basic_string[abi:ne180100]<0>(&v96, "voice isolation conferencing");
              v25 = v14 != std::__tree<std::string>::find<std::string>((uint64_t)v12, &v96)
                 || adm::config_policy::isExclaveUseCase((uint64_t)v12);
              if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v96.__r_.__value_.__l.__data_);
              v31 = DeviceDescription
                 && *((_DWORD *)DeviceDescription + 16) == 1651275109
                 && *((_DWORD *)DeviceDescription + 19) == 1
                 && *((_BYTE *)DeviceDescription + 160) != 0;
              if (*((_DWORD *)v11 + 16) == 1651275109 && !v25 && v31 && *((_DWORD *)v11 + 19) == 1)
                goto LABEL_118;
              v32 = *((_QWORD *)v11 + 21);
              v33 = *((_QWORD *)v11 + 22);
              if (v32 == v33)
                goto LABEL_96;
              while (!std::operator==[abi:ne180100]<std::string,char [10]>((const void **)(v32 + 32), "reference"))
              {
                v32 += 136;
                if (v32 == v33)
                  goto LABEL_96;
              }
              if (v32 == v33)
              {
LABEL_96:
                v43 = get_adm_log_object();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(v96.__r_.__value_.__l.__data_) = 0;
                  _os_log_error_impl(&dword_236C84000, v43, OS_LOG_TYPE_ERROR, "None of the input HW streams on the output device is marked as ref stream", (uint8_t *)&v96, 2u);
                }
                v44 = *((_QWORD *)v11 + 21);
                for (i = *((_QWORD *)v11 + 22); v44 != i; v44 += 136)
                {
                  v46 = get_adm_log_object();
                  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                  {
                    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&v96, v44 + 32, (char *)&unk_236CE4E1D);
                    v47 = (v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                        ? &v96
                        : (std::string *)v96.__r_.__value_.__r.__words[0];
                    *(_DWORD *)__p = 136315138;
                    *(_QWORD *)&__p[4] = v47;
                    _os_log_error_impl(&dword_236C84000, v46, OS_LOG_TYPE_ERROR, "Input HW stream on the output device has semantic %s", __p, 0xCu);
                    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v96.__r_.__value_.__l.__data_);
                  }
                }
                goto LABEL_126;
              }
              v40 = *(_QWORD *)(v32 + 104);
              v41 = *(_QWORD *)(v32 + 112);
              if (v40 == v41)
              {
                v42 = 0;
              }
              else
              {
                v42 = 0;
                do
                {
                  if (*(_DWORD *)(v40 + 28) > v42)
                    v42 = *(_DWORD *)(v40 + 28);
                  v40 += 40;
                }
                while (v40 != v41);
              }
              v49 = get_adm_log_object();
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v96.__r_.__value_.__l.__data_) = 67109120;
                HIDWORD(v96.__r_.__value_.__r.__words[0]) = v42;
                _os_log_impl(&dword_236C84000, v49, OS_LOG_TYPE_DEFAULT, "The max channel count in the supported ref stream format is %u", (uint8_t *)&v96, 8u);
              }
              if (v42)
              {
                *(_WORD *)v99 = 257;
                if (!v99[8])
                  v99[8] = 1;
                *(_DWORD *)&v99[4] = v42;
LABEL_118:
                std::string::basic_string[abi:ne180100]<0>(&v96, "voice isolation conferencing");
                if (v14 == std::__tree<std::string>::find<std::string>((uint64_t)v12, &v96))
                {
                  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v96.__r_.__value_.__l.__data_);
                }
                else
                {
                  v50 = *((_DWORD *)v11 + 16);
                  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v96.__r_.__value_.__l.__data_);
                  if (v50 == 1651275109)
                    *(_WORD *)&v99[12] = 257;
                }
LABEL_58:
                v27 = 0;
                v84 = buf;
                v85 = v98;
                memset(&buf, 0, sizeof(buf));
                *(_OWORD *)v86 = *(_OWORD *)v99;
                *(_OWORD *)&v86[13] = *(_OWORD *)&v99[13];
                v28 = 1;
                goto LABEL_127;
              }
              v29 = get_adm_log_object();
              if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
LABEL_126:
                v28 = 0;
                v84.__r_.__value_.__r.__words[0] = 1969448551;
                v27 = 1;
LABEL_127:
                v87 = v28;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if (v27)
                    goto LABEL_129;
                }
                else if (v27)
                {
LABEL_129:
                  *(_OWORD *)a1 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
                  *(_BYTE *)(a1 + 24) = 0;
                  goto LABEL_138;
                }
                v51 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                v52 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v51 = v84.__r_.__value_.__l.__size_;
                if (v51)
                {
                  v53 = std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, &v84, (uint64_t)&v84);
                  v28 = v87;
                  v52 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                }
                if (v28 && v52 < 0)
                  operator delete(v84.__r_.__value_.__l.__data_);
LABEL_138:
                if (v91 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v88.__r_.__value_.__l.__data_);
                if ((v27 & 1) != 0)
                  goto LABEL_192;
                goto LABEL_142;
              }
              LOWORD(v96.__r_.__value_.__l.__data_) = 0;
              v30 = "Max channel count of the available ref stream is 0 ";
            }
            else
            {
              v29 = get_adm_log_object();
              if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                goto LABEL_126;
              LOWORD(v96.__r_.__value_.__l.__data_) = 0;
              v30 = "Output device description unavailable";
            }
            _os_log_error_impl(&dword_236C84000, v29, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&v96, 2u);
            goto LABEL_126;
          }
        }
        else if (v22)
        {
          goto LABEL_52;
        }
        v26 = get_adm_log_object();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v96.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_236C84000, v26, OS_LOG_TYPE_DEFAULT, "No output device configuration needed", (uint8_t *)&v96, 2u);
        }
        goto LABEL_58;
      }
    }
    else if (v17)
    {
      goto LABEL_33;
    }
    *(_OWORD *)a1 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
    *(_BYTE *)(a1 + 24) = 0;
    goto LABEL_192;
  }
LABEL_142:
  v55 = 0uLL;
  memset(&v88, 0, sizeof(v88));
  v56 = v92;
  if (v92 != (uint64_t *)v93)
  {
    v57 = 0;
    while (1)
    {
      if (*((_BYTE *)v56 + 88))
        v58 = 0;
      else
        v58 = *((_BYTE *)v56 + 97) == 0;
      if (v58
        && *((_BYTE *)v56 + 104) == 0
        && *((_BYTE *)v56 + 109) == 0
        && *((_BYTE *)v56 + 116) == 0
        && *((_BYTE *)v56 + 124) == 0)
      {
        goto LABEL_181;
      }
      v63 = (__int128 *)(v56 + 7);
      if (v57 >= v88.__r_.__value_.__r.__words[2])
      {
        v67 = 0x8E38E38E38E38E39 * ((uint64_t)(v57 - v88.__r_.__value_.__r.__words[0]) >> 3);
        v68 = v67 + 1;
        if (v67 + 1 > 0x38E38E38E38E38ELL)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (0x1C71C71C71C71C72
           * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3) > v68)
          v68 = 0x1C71C71C71C71C72
              * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3);
        if (0x8E38E38E38E38E39
           * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3) >= 0x1C71C71C71C71C7)
          v69 = 0x38E38E38E38E38ELL;
        else
          v69 = v68;
        if (v69)
          v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DeviceConfiguration>>(v69);
        else
          v70 = 0;
        v71 = v69 + 72 * v67;
        v72 = *v63;
        *(_QWORD *)(v71 + 16) = v56[9];
        *(_OWORD *)v71 = v72;
        v56[8] = 0;
        v56[9] = 0;
        *(_QWORD *)v63 = 0;
        v73 = *(_OWORD *)((char *)v56 + 109);
        v74 = *((_OWORD *)v56 + 5);
        *(_OWORD *)(v71 + 40) = *((_OWORD *)v56 + 6);
        *(_OWORD *)(v71 + 24) = v74;
        *(_OWORD *)(v71 + 53) = v73;
        v57 = v71 + 72;
        v76 = (char *)v88.__r_.__value_.__l.__size_;
        v75 = v88.__r_.__value_.__r.__words[0];
        if (v88.__r_.__value_.__l.__size_ == v88.__r_.__value_.__r.__words[0])
        {
          v88.__r_.__value_.__r.__words[0] = v71;
          v88.__r_.__value_.__l.__size_ = v71 + 72;
          v88.__r_.__value_.__r.__words[2] = v69 + 72 * v70;
          if (!v76)
            goto LABEL_180;
        }
        else
        {
          do
          {
            v77 = *(_OWORD *)(v76 - 72);
            *(_QWORD *)(v71 - 56) = *((_QWORD *)v76 - 7);
            *(_OWORD *)(v71 - 72) = v77;
            *((_QWORD *)v76 - 8) = 0;
            *((_QWORD *)v76 - 7) = 0;
            *((_QWORD *)v76 - 9) = 0;
            v78 = *((_OWORD *)v76 - 3);
            v79 = *((_OWORD *)v76 - 2);
            *(_OWORD *)(v71 - 19) = *(_OWORD *)(v76 - 19);
            *(_OWORD *)(v71 - 48) = v78;
            *(_OWORD *)(v71 - 32) = v79;
            v71 -= 72;
            v76 -= 72;
          }
          while (v76 != (char *)v75);
          v76 = (char *)v88.__r_.__value_.__l.__size_;
          v80 = v88.__r_.__value_.__r.__words[0];
          v88.__r_.__value_.__r.__words[0] = v71;
          v88.__r_.__value_.__l.__size_ = v57;
          v88.__r_.__value_.__r.__words[2] = v69 + 72 * v70;
          if (v76 != (char *)v80)
          {
            do
            {
              if (*(v76 - 49) < 0)
                operator delete(*((void **)v76 - 9));
              v76 -= 72;
            }
            while (v76 != (char *)v80);
            v76 = (char *)v80;
          }
          if (!v76)
            goto LABEL_180;
        }
        operator delete(v76);
      }
      else
      {
        v64 = *v63;
        *(_QWORD *)(v57 + 16) = v56[9];
        *(_OWORD *)v57 = v64;
        v56[8] = 0;
        v56[9] = 0;
        *(_QWORD *)v63 = 0;
        v65 = *((_OWORD *)v56 + 5);
        v66 = *((_OWORD *)v56 + 6);
        *(_OWORD *)(v57 + 53) = *(_OWORD *)((char *)v56 + 109);
        *(_OWORD *)(v57 + 40) = v66;
        *(_OWORD *)(v57 + 24) = v65;
        v57 += 72;
      }
LABEL_180:
      v88.__r_.__value_.__l.__size_ = v57;
LABEL_181:
      v81 = (uint64_t *)v56[1];
      if (v81)
      {
        do
        {
          v82 = v81;
          v81 = (uint64_t *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (uint64_t *)v56[2];
          v37 = *v82 == (_QWORD)v56;
          v56 = v82;
        }
        while (!v37);
      }
      v56 = v82;
      if (v82 == (uint64_t *)v93)
      {
        v55 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
        v83 = v88.__r_.__value_.__r.__words[2];
        goto LABEL_191;
      }
    }
  }
  v83 = 0;
LABEL_191:
  *(_OWORD *)a1 = v55;
  *(_QWORD *)(a1 + 16) = v83;
  memset(&v88, 0, sizeof(v88));
  *(_BYTE *)(a1 + 24) = 1;
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
LABEL_192:
  std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(v93[0]);
}

void sub_236CC0F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,_QWORD *a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 153) < 0)
    operator delete(*(void **)(v46 - 176));
  if (a36)
  {
    if (a29 < 0)
      operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(a39);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  char *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0)
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = (char *)operator new(0x80uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v11 + 6) = *(_QWORD *)(a3 + 16);
    }
    *((_QWORD *)v11 + 15) = 0;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    v17 = 1;
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = v7;
    *v8 = (uint64_t *)v11;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_236CC119C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *`anonymous namespace'::mergeConfigs(std::string *this, const std::string *__str, const DeviceConfiguration *a3)
{
  std::string *v4;
  std::string::size_type size;
  std::string::pointer data;
  int v7;
  int v8;
  int v9;

  v4 = this;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
    this = std::string::operator=(this, __str);
  if (__str[1].__r_.__value_.__s.__data_[8])
  {
    data = __str[1].__r_.__value_.__l.__data_;
    v4[1].__r_.__value_.__s.__data_[8] = __str[1].__r_.__value_.__s.__data_[8];
    v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  }
  if (__str[1].__r_.__value_.__s.__data_[17])
    LOWORD(v4[1].__r_.__value_.__r.__words[2]) = __str[1].__r_.__value_.__r.__words[2];
  if (__str[2].__r_.__value_.__s.__data_[0])
  {
    v7 = HIDWORD(__str[1].__r_.__value_.__r.__words[2]);
    v4[2].__r_.__value_.__s.__data_[0] = __str[2].__r_.__value_.__s.__data_[0];
    HIDWORD(v4[1].__r_.__value_.__r.__words[2]) = v7;
  }
  if (__str[2].__r_.__value_.__s.__data_[5])
    WORD2(v4[2].__r_.__value_.__r.__words[0]) = WORD2(__str[2].__r_.__value_.__r.__words[0]);
  if (__str[2].__r_.__value_.__s.__data_[12])
  {
    v8 = __str[2].__r_.__value_.__r.__words[1];
    v4[2].__r_.__value_.__s.__data_[12] = __str[2].__r_.__value_.__s.__data_[12];
    LODWORD(v4[2].__r_.__value_.__r.__words[1]) = v8;
  }
  if (__str[2].__r_.__value_.__s.__data_[20])
  {
    v9 = __str[2].__r_.__value_.__r.__words[2];
    v4[2].__r_.__value_.__s.__data_[20] = __str[2].__r_.__value_.__s.__data_[20];
    LODWORD(v4[2].__r_.__value_.__r.__words[2]) = v9;
  }
  return this;
}

void std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<adm::DeviceConfiguration>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,adm::DeviceConfiguration>,std::__map_value_compare<std::string,std::__value_type<std::string,adm::DeviceConfiguration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,adm::DeviceConfiguration>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::vector<adm::DeviceConfiguration>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 49) < 0)
      operator delete(*(void **)(i - 72));
  }
  a1[1] = v2;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DeviceConfiguration>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(72 * a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,adm::DeviceConfiguration>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<adm::DSPGraphBasicConfiguration::AUPresetOverrideConfig,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

BOOL adm::utility::convertFromDictionary(adm::utility *this, NSDictionary *a2, adm::ConfigurationChangeRequest *a3)
{
  adm::utility *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  BOOL v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  id v27;
  void *v28;
  void *v29;
  _BOOL4 v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t j;
  id v36;
  void *v37;
  void *v38;
  _BOOL4 v39;
  void *v40;
  void *v41;
  std::string *v42;
  std::string *v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t v46;
  id v47;
  NSObject *v48;
  NSObject *v49;
  int v50;
  int v51;
  char *v52;
  void *v53;
  NSObject *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  std::vector<std::string> *v64;
  uint64_t v65;
  uint64_t k;
  id v67;
  Class v68;
  Class isa;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __int128 v77;
  objc_class *v78;
  int v79;
  NSDictionary *v80;
  int isa_low;
  __int128 v82;
  NSDictionary *v83;
  int v84;
  __int128 v85;
  NSDictionary *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  id v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  NSDictionary *v106;
  NSDictionary *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  std::string::size_type size;
  std::string *v117;
  int data_low;
  int v119;
  BOOL v120;
  NSDictionary *v121;
  void *v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t m;
  NSDictionary *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  __int128 v138;
  __int128 v139;
  void *v140;
  void *v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  void *v146;
  void *v147;
  void *v148;
  void *v149;
  NSDictionary *v150;
  void *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t n;
  NSDictionary *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  char *v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  void *v169;
  void *v170;
  Class v171;
  Class v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  Class v177;
  Class v178;
  void **v179;
  void **v180;
  _QWORD *v181;
  void **v182;
  void **v183;
  int v184;
  _QWORD *v185;
  char *v186;
  void **v187;
  void **v188;
  void **v189;
  void **v190;
  void **v191;
  int v192;
  void ***v193;
  void **v194;
  int v195;
  void *v196;
  _QWORD *v197;
  void *v198;
  void **v199;
  uint64_t *v200;
  uint64_t v201;
  _BYTE *v202;
  void **v203;
  void **v204;
  _QWORD *v205;
  _BYTE *v206;
  void **v207;
  BOOL v208;
  _QWORD *v209;
  void *v210;
  uint64_t *v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t v214;
  int v215;
  NSObject *v216;
  const char *v217;
  NSObject *v218;
  _BOOL8 v219;
  NSObject *v221;
  NSObject *v222;
  NSObject *v223;
  NSObject *v224;
  NSObject *v225;
  NSObject *v226;
  const char *v227;
  void *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  std::string *v233;
  void *v234;
  id v235;
  id v236;
  id v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  std::string *v243;
  std::string *v244;
  adm::utility *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  id obj;
  id obja;
  id objb;
  id v254;
  id v255;
  id v256;
  id v257;
  id v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  uint8_t buf[16];
  _BYTE v304[128];
  _BYTE v305[128];
  _BYTE v306[128];
  std::string v307;
  char v308;
  std::string v309;
  char v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  int v315;
  char v316;
  _BYTE v317[128];
  void *__p[2];
  _OWORD v319[2];
  char v320;
  __int128 v321;
  _BYTE v322[48];
  char v323;
  std::string v324;
  char v325;
  char v326;
  _OWORD v327[3];
  _BYTE v328[128];
  _BYTE v329[128];
  _BYTE v330[128];
  _BYTE v331[128];
  __int128 v332;
  __int128 v333;
  uint64_t v334;
  uint64_t v335;

  v335 = *MEMORY[0x24BDAC8D0];
  v3 = this;
  v245 = v3;
  if (!v3)
  {
    get_adm_log_object();
    v216 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
    {
LABEL_369:

      goto LABEL_370;
    }
    *(_WORD *)buf = 0;
    v217 = "Null config change dictionary received!";
LABEL_378:
    _os_log_error_impl(&dword_236C84000, v216, OS_LOG_TYPE_ERROR, v217, buf, 2u);
    goto LABEL_369;
  }
  -[adm::utility objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("is activation"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_368;
  -[adm::utility objectForKeyedSubscript:](v245, "objectForKeyedSubscript:", CFSTR("io context description"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v5)
  {

    goto LABEL_368;
  }
  -[adm::utility objectForKeyedSubscript:](v245, "objectForKeyedSubscript:", CFSTR("device descriptions"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v6)
  {
LABEL_368:
    get_adm_log_object();
    v216 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v216, OS_LOG_TYPE_ERROR))
      goto LABEL_369;
    *(_WORD *)buf = 0;
    v217 = "Missing top level description entry from the config change dictionary!";
    goto LABEL_378;
  }
  -[adm::utility objectForKeyedSubscript:](v245, "objectForKeyedSubscript:", CFSTR("io context description"));
  v254 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v254, "objectForKeyedSubscript:", CFSTR("io context semantic list"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v7
    || (objc_msgSend(v254, "objectForKeyedSubscript:", CFSTR("io context stream id list")),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v8,
        v7,
        !v8))
  {
    get_adm_log_object();
    v221 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236C84000, v221, OS_LOG_TYPE_ERROR, "Incomplete IOContext description from the config change dictionary!", buf, 2u);
    }

    goto LABEL_370;
  }
  -[adm::utility objectForKeyedSubscript:](v245, "objectForKeyedSubscript:", CFSTR("device descriptions"));
  v301 = 0u;
  v302 = 0u;
  v299 = 0u;
  v300 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v299, __p, 16);
  if (!v9)
    goto LABEL_44;
  v10 = *(_QWORD *)v300;
  v240 = *(_QWORD *)v300;
  do
  {
    v11 = 0;
    v243 = (std::string *)v9;
    do
    {
      if (*(_QWORD *)v300 != v10)
        objc_enumerationMutation(obj);
      v246 = v11;
      v12 = *(id *)(*((_QWORD *)&v299 + 1) + 8 * v11);
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("device uid"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v13)
        goto LABEL_395;
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("device model uid"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v14)
        goto LABEL_394;
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("sample rate"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v15)
        goto LABEL_393;
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("transport type"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v16)
        goto LABEL_392;
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("latency in samples"));
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v17)
        goto LABEL_391;
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("latency out samples"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v18
        || (objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("safety offset in samples")),
            (v19 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
      {

LABEL_391:
LABEL_392:

LABEL_393:
LABEL_394:

LABEL_395:
        get_adm_log_object();
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_236C84000, v23, OS_LOG_TYPE_ERROR, "Incomplete device description from the config change dictionary!", buf, 2u);
        }
LABEL_397:

LABEL_370:
        get_adm_log_object();
        v218 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_error_impl(&dword_236C84000, v218, OS_LOG_TYPE_ERROR, "Invalid config change dictionary received!", (uint8_t *)__p, 2u);
        }

        v219 = 0;
        goto LABEL_373;
      }
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("safety offset out samples"));
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = v20 == 0;

      if (v21)
        goto LABEL_395;
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("hw streams input"));
      v22 = objc_claimAutoreleasedReturnValue();
      if (-[NSObject count](v22, "count"))
      {
        v297 = 0u;
        v298 = 0u;
        v295 = 0u;
        v296 = 0u;
        v23 = v22;
        v24 = -[NSObject countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v295, &v307, 16);
        if (!v24)
          goto LABEL_30;
        v25 = *(_QWORD *)v296;
        while (1)
        {
          for (i = 0; i != v24; ++i)
          {
            if (*(_QWORD *)v296 != v25)
              objc_enumerationMutation(v23);
            v27 = *(id *)(*((_QWORD *)&v295 + 1) + 8 * i);
            objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("current format"));
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v28
              || (objc_msgSend(v27, "objectForKeyedSubscript:", CFSTR("supported formats")),
                  v29 = (void *)objc_claimAutoreleasedReturnValue(),
                  v30 = v29 == 0,
                  v29,
                  v28,
                  v30))
            {
              get_adm_log_object();
              v222 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v222, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_236C84000, v222, OS_LOG_TYPE_ERROR, "Incomplete input HW stream description from the config change dictionary!", buf, 2u);
              }

              goto LABEL_397;
            }

          }
          v24 = -[NSObject countByEnumeratingWithState:objects:count:](v23, "countByEnumeratingWithState:objects:count:", &v295, &v307, 16);
          if (!v24)
          {
LABEL_30:

            break;
          }
        }
      }
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("hw streams output"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      if (!objc_msgSend(v31, "count"))
        goto LABEL_42;
      v293 = 0u;
      v294 = 0u;
      v291 = 0u;
      v292 = 0u;
      v32 = v31;
      v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v291, &v332, 16);
      if (!v33)
        goto LABEL_41;
      v34 = *(_QWORD *)v292;
      do
      {
        for (j = 0; j != v33; ++j)
        {
          if (*(_QWORD *)v292 != v34)
            objc_enumerationMutation(v32);
          v36 = *(id *)(*((_QWORD *)&v291 + 1) + 8 * j);
          objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("current format"));
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v37
            || (objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("supported formats")),
                v38 = (void *)objc_claimAutoreleasedReturnValue(),
                v39 = v38 == 0,
                v38,
                v37,
                v39))
          {
            get_adm_log_object();
            v223 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_error_impl(&dword_236C84000, v223, OS_LOG_TYPE_ERROR, "Incomplete output HW stream description from the config change dictionary!", buf, 2u);
            }

            v23 = v22;
            goto LABEL_397;
          }

        }
        v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v291, &v332, 16);
      }
      while (v33);
LABEL_41:

LABEL_42:
      v11 = v246 + 1;
      v10 = v240;
    }
    while ((std::string *)(v246 + 1) != v243);
    v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v299, __p, 16);
  }
  while (v9);
LABEL_44:

  -[adm::utility objectForKeyedSubscript:](v245, "objectForKeyedSubscript:", CFSTR("is activation"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(a2->super.isa) = objc_msgSend(v40, "BOOLValue");

  -[adm::utility objectForKeyedSubscript:](v245, "objectForKeyedSubscript:", CFSTR("io context description"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v234 = v41;
  objc_msgSend(v41, "objectForKeyedSubscript:", CFSTR("io context semantic list"));
  v42 = (std::string *)objc_claimAutoreleasedReturnValue();
  v43 = v42;
  if (!v42)
    goto LABEL_79;
  v289 = 0u;
  v290 = 0u;
  v287 = 0u;
  v288 = 0u;
  v233 = v42;
  v44 = unk_25644FE30(v233, "countByEnumeratingWithState:objects:count:", &v287, v331, 16);
  v244 = v43;
  if (!v44)
    goto LABEL_78;
  v45 = (uint64_t **)&a2[1];
  obja = *(id *)v288;
  while (2)
  {
    v247 = v44;
    v46 = 0;
    while (2)
    {
      if (*(id *)v288 != obja)
        objc_enumerationMutation(v233);
      v47 = *(id *)(*((_QWORD *)&v287 + 1) + 8 * v46);
      if (!objc_msgSend(v47, "isEqual:", CFSTR("isolated audio")))
      {
        if (!objc_msgSend(v47, "isEqual:", CFSTR("dsp offload")))
        {
          v60 = v47;
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v47), "UTF8String"));
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v45, __p, (uint64_t)__p);
          goto LABEL_74;
        }
        v255 = v47;
        objc_msgSend(v41, "objectForKeyedSubscript:", CFSTR("dsp offload description"));
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        if (v53)
        {
          v285 = 0u;
          v286 = 0u;
          v283 = 0u;
          v284 = 0u;
          v54 = v53;
          v55 = -[NSObject countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v283, v330, 16);
          if (!v55)
            goto LABEL_388;
          v56 = 0;
          v57 = *(_QWORD *)v284;
LABEL_60:
          v58 = 0;
          while (1)
          {
            if (*(_QWORD *)v284 != v57)
              objc_enumerationMutation(v54);
            v59 = *(void **)(*((_QWORD *)&v283 + 1) + 8 * v58);
            if (objc_msgSend(v59, "isEqualToString:", CFSTR("airpods noise suppression")))
              v56 = "airpods noise suppression";
            if (!v56)
              break;
            std::string::basic_string[abi:ne180100]<0>(__p, v56);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v45, __p, (uint64_t)__p);
            if (SBYTE7(v319[0]) < 0)
              operator delete(__p[0]);
            if (v55 == ++v58)
            {
              v55 = -[NSObject countByEnumeratingWithState:objects:count:](v54, "countByEnumeratingWithState:objects:count:", &v283, v330, 16);
              if (!v55)
              {

                v60 = v255;
                goto LABEL_76;
              }
              goto LABEL_60;
            }
          }
          get_adm_log_object();
          v224 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v224, OS_LOG_TYPE_ERROR))
          {
            LODWORD(__p[0]) = 138412290;
            *(void **)((char *)__p + 4) = v59;
            _os_log_error_impl(&dword_236C84000, v224, OS_LOG_TYPE_ERROR, "Invalid DSPOffload description %@", (uint8_t *)__p, 0xCu);
          }

LABEL_388:
          v49 = v54;
          goto LABEL_389;
        }
        get_adm_log_object();
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v227 = "IOContext description missing DSPOffload description";
          goto LABEL_422;
        }
LABEL_414:
        v49 = 0;
        goto LABEL_389;
      }
      v255 = v47;
      objc_msgSend(v41, "objectForKeyedSubscript:", CFSTR("isolated audio use case id"));
      v48 = objc_claimAutoreleasedReturnValue();
      v49 = v48;
      if (!v48)
      {
        get_adm_log_object();
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          v227 = "IOContext description missing isolated audio use case ID";
LABEL_422:
          _os_log_error_impl(&dword_236C84000, v54, OS_LOG_TYPE_ERROR, v227, (uint8_t *)__p, 2u);
          goto LABEL_414;
        }
        goto LABEL_414;
      }
      v50 = -[NSObject unsignedIntValue](v48, "unsignedIntValue");
      v51 = v50;
      if (v50 != 1936614497)
      {
        v52 = "isolated audio siri";
        if (v50 == 1936290409)
          goto LABEL_73;
        if (v50 == 1836346212)
        {
          v52 = "isolated audio muted talker detection";
          goto LABEL_73;
        }
        get_adm_log_object();
        v54 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__p[0]) = 67109120;
          HIDWORD(__p[0]) = v51;
          _os_log_error_impl(&dword_236C84000, v54, OS_LOG_TYPE_ERROR, "Invalid IsolatedAudio use case ID %d", (uint8_t *)__p, 8u);
        }
LABEL_389:

        goto LABEL_407;
      }
      v52 = "isolated audio sound analysis";
LABEL_73:

      std::string::basic_string[abi:ne180100]<0>(__p, v52);
      v60 = v47;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v45, __p, (uint64_t)__p);
LABEL_74:
      if (SBYTE7(v319[0]) < 0)
        operator delete(__p[0]);
LABEL_76:

      ++v46;
      v41 = v234;
      if (v46 != v247)
        continue;
      break;
    }
    v44 = unk_25644FE38(v233, "countByEnumeratingWithState:objects:count:", &v287, v331, 16);
    if (v44)
      continue;
    break;
  }
LABEL_78:

  v43 = v244;
LABEL_79:

  objc_msgSend(v234, "objectForKeyedSubscript:", CFSTR("io context stream id list"));
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = v61;
  if (v61)
  {
    v281 = 0u;
    v282 = 0u;
    v279 = 0u;
    v280 = 0u;
    v256 = v61;
    v63 = objc_msgSend(v256, "countByEnumeratingWithState:objects:count:", &v279, v329, 16);
    objb = v62;
    if (v63)
    {
      v64 = (std::vector<std::string> *)&a2[21];
      v65 = *(_QWORD *)v280;
      do
      {
        for (k = 0; k != v63; ++k)
        {
          if (*(_QWORD *)v280 != v65)
            objc_enumerationMutation(v256);
          v67 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v279 + 1) + 8 * k));
          std::string::basic_string[abi:ne180100]<0>(&v307, (char *)objc_msgSend(v67, "UTF8String"));
          isa = a2[22].super.isa;
          v68 = a2[23].super.isa;
          if (isa >= v68)
          {
            v71 = 0xAAAAAAAAAAAAAAABLL * ((isa - (Class)v64->__begin_) >> 3);
            v72 = v71 + 1;
            if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
            v73 = 0xAAAAAAAAAAAAAAABLL * ((v68 - (Class)v64->__begin_) >> 3);
            if (2 * v73 > v72)
              v72 = 2 * v73;
            if (v73 >= 0x555555555555555)
              v74 = 0xAAAAAAAAAAAAAAALL;
            else
              v74 = v72;
            *(_QWORD *)&v319[1] = a2 + 23;
            if (v74)
              v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v74);
            else
              v75 = 0;
            v76 = (_QWORD *)(v74 + 24 * v71);
            __p[0] = (void *)v74;
            __p[1] = v76;
            *((_QWORD *)&v319[0] + 1) = v74 + 24 * v75;
            v77 = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
            v76[2] = *((_QWORD *)&v307.__r_.__value_.__l + 2);
            *(_OWORD *)v76 = v77;
            memset(&v307, 0, sizeof(v307));
            *(_QWORD *)&v319[0] = v76 + 3;
            std::vector<std::__fs::filesystem::path>::__swap_out_circular_buffer(v64, (std::__split_buffer<std::string> *)__p);
            v78 = a2[22].super.isa;
            std::__split_buffer<std::__fs::filesystem::path>::~__split_buffer((std::__split_buffer<std::string> *)__p);
            v79 = SHIBYTE(v307.__r_.__value_.__r.__words[2]);
            a2[22].super.isa = v78;
            if (v79 < 0)
              operator delete(v307.__r_.__value_.__l.__data_);
          }
          else
          {
            v70 = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
            *((_QWORD *)isa + 2) = *((_QWORD *)&v307.__r_.__value_.__l + 2);
            *(_OWORD *)isa = v70;
            a2[22].super.isa = (Class)((char *)isa + 24);
          }

        }
        v63 = objc_msgSend(v256, "countByEnumeratingWithState:objects:count:", &v279, v329, 16);
      }
      while (v63);
    }

    v62 = objb;
  }

  objc_msgSend(v234, "objectForKey:", CFSTR("io context input format"));
  v80 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  if (v80)
  {
    isa_low = LOBYTE(a2[9].super.isa);
    v82 = v319[0];
    *(_OWORD *)&a2[4].super.isa = *(_OWORD *)__p;
    *(_OWORD *)&a2[6].super.isa = v82;
    a2[8].super.isa = *(Class *)&v319[1];
    if (!isa_low)
      LOBYTE(a2[9].super.isa) = 1;
  }

  objc_msgSend(v234, "objectForKey:", CFSTR("io context output format"));
  v83 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  if (v83)
  {
    v84 = LOBYTE(a2[15].super.isa);
    v85 = v319[0];
    *(_OWORD *)&a2[10].super.isa = *(_OWORD *)__p;
    *(_OWORD *)&a2[12].super.isa = v85;
    a2[14].super.isa = *(Class *)&v319[1];
    if (!v84)
      LOBYTE(a2[15].super.isa) = 1;
  }

  objc_msgSend(v234, "objectForKey:", CFSTR("io context output client virtual layout"));
  v86 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
  if (v86)
  {
    std::optional<CA::ChannelLayout>::operator=[abi:ne180100]<CA::ChannelLayout,void>((uint64_t)&a2[16], (uint64_t)__p);
    if (__p[0])
      operator delete(__p[0]);
  }

  objc_msgSend(v234, "objectForKey:", CFSTR("io context buffer size"));
  v87 = (void *)objc_claimAutoreleasedReturnValue();
  v88 = v87;
  if (v87)
  {
    LODWORD(a2[20].super.isa) = objc_msgSend(v87, "unsignedIntValue");
    BYTE4(a2[20].super.isa) = 1;
  }

  -[adm::utility objectForKeyedSubscript:](v245, "objectForKeyedSubscript:", CFSTR("device descriptions"));
  v277 = 0u;
  v278 = 0u;
  v275 = 0u;
  v276 = 0u;
  v233 = (std::string *)(id)objc_claimAutoreleasedReturnValue();
  v89 = unk_25644FE40(v233, "countByEnumeratingWithState:objects:count:", &v275, v328, 16);
  if (v89)
  {
    v230 = *(_QWORD *)v276;
    do
    {
      v90 = 0;
      v229 = v89;
      do
      {
        if (*(_QWORD *)v276 != v230)
          objc_enumerationMutation(v233);
        v231 = v90;
        v91 = *(id *)(*((_QWORD *)&v275 + 1) + 8 * v90);
        v323 = 0;
        v324.__r_.__value_.__s.__data_[0] = 0;
        v325 = 0;
        v326 = 0;
        *(_OWORD *)__p = 0u;
        memset(v319, 0, sizeof(v319));
        v320 = 0;
        v321 = 0u;
        memset(v322, 0, 25);
        memset(v327, 0, sizeof(v327));
        v235 = v91;
        objc_msgSend(v91, "objectForKeyedSubscript:", CFSTR("device uid"));
        v92 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(&v307, (char *)objc_msgSend(v92, "UTF8String"));
        if (SBYTE7(v319[0]) < 0)
          operator delete(__p[0]);
        *(_OWORD *)__p = *(_OWORD *)&v307.__r_.__value_.__l.__data_;
        *(_QWORD *)&v319[0] = *((_QWORD *)&v307.__r_.__value_.__l + 2);
        *((_BYTE *)&v307.__r_.__value_.__s + 23) = 0;
        v307.__r_.__value_.__s.__data_[0] = 0;

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("device model uid"));
        v93 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(&v307, (char *)objc_msgSend(v93, "UTF8String"));
        if (SHIBYTE(v319[1]) < 0)
          operator delete(*((void **)&v319[0] + 1));
        *(std::string *)((char *)v319 + 8) = v307;
        *((_BYTE *)&v307.__r_.__value_.__s + 23) = 0;
        v307.__r_.__value_.__s.__data_[0] = 0;

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("is default device"));
        v94 = (void *)objc_claimAutoreleasedReturnValue();
        v320 = objc_msgSend(v94, "BOOLValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("sample rate"));
        v95 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v95, "doubleValue");
        *(_QWORD *)&v321 = v96;

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("transport type"));
        v97 = (void *)objc_claimAutoreleasedReturnValue();
        DWORD2(v321) = objc_msgSend(v97, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("data source type in"));
        v98 = (void *)objc_claimAutoreleasedReturnValue();
        HIDWORD(v321) = objc_msgSend(v98, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("data source type out"));
        v99 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v322 = objc_msgSend(v99, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("bluetooth device category"));
        v100 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&v322[4] = objc_msgSend(v100, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("latency in samples"));
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&v322[8] = objc_msgSend(v101, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("latency out samples"));
        v102 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&v322[12] = objc_msgSend(v102, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("safety offset in samples"));
        v103 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&v322[16] = objc_msgSend(v103, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("safety offset out samples"));
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&v322[20] = objc_msgSend(v104, "unsignedIntValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("bluetooth ecnr enabled"));
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        v326 = objc_msgSend(v105, "BOOLValue");

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("output default layout"));
        v106 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        if (v106)
        {
          if (v325)
          {
            if (v324.__r_.__value_.__r.__words[0])
            {
              v324.__r_.__value_.__l.__size_ = v324.__r_.__value_.__r.__words[0];
              operator delete(v324.__r_.__value_.__l.__data_);
            }
            v324 = v307;
          }
          else
          {
            v324 = v307;
            v325 = 1;
          }
        }

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("output preferred layout"));
        v107 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
        if (v107)
        {
          if (v323)
          {
            if (*(_QWORD *)&v322[24])
            {
              *(_QWORD *)&v322[32] = *(_QWORD *)&v322[24];
              operator delete(*(void **)&v322[24]);
            }
            *(std::string *)&v322[24] = v307;
          }
          else
          {
            *(std::string *)&v322[24] = v307;
            v323 = 1;
          }
        }

        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("hw streams input"));
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        v232 = v108;
        if (objc_msgSend(v108, "count"))
        {
          v273 = 0u;
          v274 = 0u;
          v271 = 0u;
          v272 = 0u;
          v236 = v108;
          v109 = objc_msgSend(v236, "countByEnumeratingWithState:objects:count:", &v271, v317, 16);
          if (!v109)
            goto LABEL_193;
          v238 = *(_QWORD *)v272;
          while (1)
          {
            v110 = 0;
            v241 = v109;
            do
            {
              if (*(_QWORD *)v272 != v238)
                objc_enumerationMutation(v236);
              v248 = v110;
              v111 = *(id *)(*((_QWORD *)&v271 + 1) + 8 * v110);
              v307.__r_.__value_.__s.__data_[0] = 0;
              v308 = 0;
              v309.__r_.__value_.__s.__data_[0] = 0;
              v310 = 0;
              v311 = 0u;
              v312 = 0u;
              v313 = 0u;
              v314 = 0u;
              v315 = 0;
              v316 = 1;
              v257 = v111;
              objc_msgSend(v111, "objectForKeyedSubscript:", CFSTR("stream id"));
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              v113 = v112;
              if (v112)
                std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(&v307, (std::string::value_type *)objc_msgSend(objc_retainAutorelease(v112), "UTF8String"));

              objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("stream semantic"));
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              v115 = v114;
              if (v114)
              {
                std::string::basic_string[abi:ne180100]<0>(&v332, (char *)objc_msgSend(objc_retainAutorelease(v114), "UTF8String"));
                if (v310)
                {
                  if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(v309.__r_.__value_.__l.__data_);
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                    if (!v310)
                      goto LABEL_158;
                  }
                  else
                  {
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                  }
                }
                else
                {
                  *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                  v309.__r_.__value_.__r.__words[2] = v333;
                  v310 = 1;
                }
                size = HIBYTE(v309.__r_.__value_.__r.__words[2]);
                if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = v309.__r_.__value_.__l.__size_;
                if (size == 3)
                {
                  v117 = &v309;
                  if ((v309.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v117 = (std::string *)v309.__r_.__value_.__r.__words[0];
                  data_low = LOWORD(v117->__r_.__value_.__l.__data_);
                  v119 = v117->__r_.__value_.__s.__data_[2];
                  v120 = data_low == 24948 && v119 == 112;
                  if (v120)
                    std::string::__assign_external(&v309, "reference");
                }
              }
LABEL_158:

              objc_msgSend(v257, "objectForKey:", CFSTR("current format"));
              v121 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
              v311 = v332;
              v312 = v333;
              *(_QWORD *)&v313 = v334;

              objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("supported formats"));
              v122 = (void *)objc_claimAutoreleasedReturnValue();
              v269 = 0u;
              v270 = 0u;
              v267 = 0u;
              v268 = 0u;
              v123 = v122;
              v124 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v267, v306, 16);
              if (v124)
              {
                v125 = *(_QWORD *)v268;
                do
                {
                  for (m = 0; m != v124; ++m)
                  {
                    if (*(_QWORD *)v268 != v125)
                      objc_enumerationMutation(v123);
                    v127 = (NSDictionary *)*(id *)(*((_QWORD *)&v267 + 1) + 8 * m);
                    v128 = v314;
                    if ((unint64_t)v314 >= *((_QWORD *)&v314 + 1))
                    {
                      v130 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v314 - *((_QWORD *)&v313 + 1)) >> 3);
                      v131 = v130 + 1;
                      if (v130 + 1 > 0x666666666666666)
                        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                      if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v314 + 1) - *((_QWORD *)&v313 + 1)) >> 3) > v131)
                        v131 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v314 + 1) - *((_QWORD *)&v313 + 1)) >> 3);
                      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v314 + 1) - *((_QWORD *)&v313 + 1)) >> 3) >= 0x333333333333333)
                        v132 = 0x666666666666666;
                      else
                        v132 = v131;
                      if (v132)
                        v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v132);
                      else
                        v133 = 0;
                      v134 = v132 + 40 * v130;
                      *(_OWORD *)v134 = v332;
                      *(_OWORD *)(v134 + 16) = v333;
                      *(_QWORD *)(v134 + 32) = v334;
                      v135 = (char *)v314;
                      v136 = (char *)*((_QWORD *)&v313 + 1);
                      v137 = v134;
                      if ((_QWORD)v314 != *((_QWORD *)&v313 + 1))
                      {
                        do
                        {
                          v138 = *(_OWORD *)(v135 - 40);
                          v139 = *(_OWORD *)(v135 - 24);
                          *(_QWORD *)(v137 - 8) = *((_QWORD *)v135 - 1);
                          *(_OWORD *)(v137 - 24) = v139;
                          *(_OWORD *)(v137 - 40) = v138;
                          v137 -= 40;
                          v135 -= 40;
                        }
                        while (v135 != v136);
                        v135 = (char *)*((_QWORD *)&v313 + 1);
                      }
                      v129 = v134 + 40;
                      *((_QWORD *)&v313 + 1) = v137;
                      *(_QWORD *)&v314 = v134 + 40;
                      *((_QWORD *)&v314 + 1) = v132 + 40 * v133;
                      if (v135)
                        operator delete(v135);
                    }
                    else
                    {
                      *(_OWORD *)v314 = v332;
                      *(_OWORD *)(v128 + 16) = v333;
                      *(_QWORD *)(v128 + 32) = v334;
                      v129 = v128 + 40;
                    }
                    *(_QWORD *)&v314 = v129;

                  }
                  v124 = objc_msgSend(v123, "countByEnumeratingWithState:objects:count:", &v267, v306, 16);
                }
                while (v124);
              }

              objc_msgSend(v257, "objectForKeyedSubscript:", CFSTR("latency samples"));
              v140 = (void *)objc_claimAutoreleasedReturnValue();
              v141 = v140;
              if (v140)
              {
                v315 = objc_msgSend(v140, "unsignedIntValue");
                v316 = 1;
              }

              std::vector<adm::HardwareStreamDescription>::push_back[abi:ne180100]((__int128 **)v327, (__int128 *)&v307);
              if (*((_QWORD *)&v313 + 1))
              {
                *(_QWORD *)&v314 = *((_QWORD *)&v313 + 1);
                operator delete(*((void **)&v313 + 1));
              }
              if (v310 && SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v309.__r_.__value_.__l.__data_);
              if (v308 && SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v307.__r_.__value_.__l.__data_);

              v110 = v248 + 1;
            }
            while (v248 + 1 != v241);
            v109 = objc_msgSend(v236, "countByEnumeratingWithState:objects:count:", &v271, v317, 16);
            if (!v109)
            {
LABEL_193:

              break;
            }
          }
        }
        objc_msgSend(v235, "objectForKeyedSubscript:", CFSTR("hw streams output"));
        v142 = (void *)objc_claimAutoreleasedReturnValue();
        v228 = v142;
        if (objc_msgSend(v142, "count"))
        {
          v265 = 0u;
          v266 = 0u;
          v263 = 0u;
          v264 = 0u;
          v237 = v142;
          v143 = objc_msgSend(v237, "countByEnumeratingWithState:objects:count:", &v263, v305, 16);
          if (v143)
          {
            v239 = *(_QWORD *)v264;
            do
            {
              v144 = 0;
              v242 = v143;
              do
              {
                if (*(_QWORD *)v264 != v239)
                  objc_enumerationMutation(v237);
                v249 = v144;
                v145 = *(id *)(*((_QWORD *)&v263 + 1) + 8 * v144);
                v307.__r_.__value_.__s.__data_[0] = 0;
                v308 = 0;
                v309.__r_.__value_.__s.__data_[0] = 0;
                v310 = 0;
                v311 = 0u;
                v312 = 0u;
                v313 = 0u;
                v314 = 0u;
                v315 = 0;
                v316 = 1;
                v258 = v145;
                objc_msgSend(v145, "objectForKeyedSubscript:", CFSTR("stream id"));
                v146 = (void *)objc_claimAutoreleasedReturnValue();
                v147 = v146;
                if (v146)
                  std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(&v307, (std::string::value_type *)objc_msgSend(objc_retainAutorelease(v146), "UTF8String"));

                objc_msgSend(v258, "objectForKeyedSubscript:", CFSTR("stream semantic"));
                v148 = (void *)objc_claimAutoreleasedReturnValue();
                v149 = v148;
                if (v148)
                {
                  std::string::basic_string[abi:ne180100]<0>(&v332, (char *)objc_msgSend(objc_retainAutorelease(v148), "UTF8String"));
                  if (v310)
                  {
                    if (SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v309.__r_.__value_.__l.__data_);
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                  }
                  else
                  {
                    *(_OWORD *)&v309.__r_.__value_.__l.__data_ = v332;
                    v309.__r_.__value_.__r.__words[2] = v333;
                    v310 = 1;
                  }
                }

                objc_msgSend(v258, "objectForKey:", CFSTR("current format"));
                v150 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
                v311 = v332;
                v312 = v333;
                *(_QWORD *)&v313 = v334;

                objc_msgSend(v258, "objectForKeyedSubscript:", CFSTR("supported formats"));
                v151 = (void *)objc_claimAutoreleasedReturnValue();
                v261 = 0u;
                v262 = 0u;
                v259 = 0u;
                v260 = 0u;
                v152 = v151;
                v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v259, v304, 16);
                if (v153)
                {
                  v154 = *(_QWORD *)v260;
                  do
                  {
                    for (n = 0; n != v153; ++n)
                    {
                      if (*(_QWORD *)v260 != v154)
                        objc_enumerationMutation(v152);
                      v156 = (NSDictionary *)*(id *)(*((_QWORD *)&v259 + 1) + 8 * n);
                      v157 = v314;
                      if ((unint64_t)v314 >= *((_QWORD *)&v314 + 1))
                      {
                        v159 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v314 - *((_QWORD *)&v313 + 1)) >> 3);
                        v160 = v159 + 1;
                        if (v159 + 1 > 0x666666666666666)
                          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
                        if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v314 + 1) - *((_QWORD *)&v313 + 1)) >> 3) > v160)
                          v160 = 0x999999999999999ALL
                               * ((uint64_t)(*((_QWORD *)&v314 + 1) - *((_QWORD *)&v313 + 1)) >> 3);
                        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v314 + 1) - *((_QWORD *)&v313 + 1)) >> 3) >= 0x333333333333333)
                          v161 = 0x666666666666666;
                        else
                          v161 = v160;
                        if (v161)
                          v161 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v161);
                        else
                          v162 = 0;
                        v163 = v161 + 40 * v159;
                        *(_OWORD *)v163 = v332;
                        *(_OWORD *)(v163 + 16) = v333;
                        *(_QWORD *)(v163 + 32) = v334;
                        v164 = (char *)v314;
                        v165 = (char *)*((_QWORD *)&v313 + 1);
                        v166 = v163;
                        if ((_QWORD)v314 != *((_QWORD *)&v313 + 1))
                        {
                          do
                          {
                            v167 = *(_OWORD *)(v164 - 40);
                            v168 = *(_OWORD *)(v164 - 24);
                            *(_QWORD *)(v166 - 8) = *((_QWORD *)v164 - 1);
                            *(_OWORD *)(v166 - 24) = v168;
                            *(_OWORD *)(v166 - 40) = v167;
                            v166 -= 40;
                            v164 -= 40;
                          }
                          while (v164 != v165);
                          v164 = (char *)*((_QWORD *)&v313 + 1);
                        }
                        v158 = v163 + 40;
                        *((_QWORD *)&v313 + 1) = v166;
                        *(_QWORD *)&v314 = v163 + 40;
                        *((_QWORD *)&v314 + 1) = v161 + 40 * v162;
                        if (v164)
                          operator delete(v164);
                      }
                      else
                      {
                        *(_OWORD *)v314 = v332;
                        *(_OWORD *)(v157 + 16) = v333;
                        *(_QWORD *)(v157 + 32) = v334;
                        v158 = v157 + 40;
                      }
                      *(_QWORD *)&v314 = v158;

                    }
                    v153 = objc_msgSend(v152, "countByEnumeratingWithState:objects:count:", &v259, v304, 16);
                  }
                  while (v153);
                }

                objc_msgSend(v258, "objectForKeyedSubscript:", CFSTR("latency samples"));
                v169 = (void *)objc_claimAutoreleasedReturnValue();
                v170 = v169;
                if (v169)
                {
                  v315 = objc_msgSend(v169, "unsignedIntValue");
                  v316 = 1;
                }

                std::vector<adm::HardwareStreamDescription>::push_back[abi:ne180100]((__int128 **)&v327[1] + 1, (__int128 *)&v307);
                if (*((_QWORD *)&v313 + 1))
                {
                  *(_QWORD *)&v314 = *((_QWORD *)&v313 + 1);
                  operator delete(*((void **)&v313 + 1));
                }
                if (v310 && SHIBYTE(v309.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v309.__r_.__value_.__l.__data_);
                if (v308 && SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v307.__r_.__value_.__l.__data_);

                v144 = v249 + 1;
              }
              while (v249 + 1 != v242);
              v143 = objc_msgSend(v237, "countByEnumeratingWithState:objects:count:", &v263, v305, 16);
            }
            while (v143);
          }

          v142 = v228;
        }
        std::vector<adm::DeviceDescription>::push_back[abi:ne180100]((__int128 **)&a2[24], (__int128 *)__p);

        v307.__r_.__value_.__r.__words[0] = (std::string::size_type)&v327[1] + 8;
        std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
        v307.__r_.__value_.__r.__words[0] = (std::string::size_type)v327;
        std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)&v307);
        if (v325 && v324.__r_.__value_.__r.__words[0])
        {
          v324.__r_.__value_.__l.__size_ = v324.__r_.__value_.__r.__words[0];
          operator delete(v324.__r_.__value_.__l.__data_);
        }
        if (v323 && *(_QWORD *)&v322[24])
        {
          *(_QWORD *)&v322[32] = *(_QWORD *)&v322[24];
          operator delete(*(void **)&v322[24]);
        }
        if (SHIBYTE(v319[1]) < 0)
          operator delete(*((void **)&v319[0] + 1));
        if (SBYTE7(v319[0]) < 0)
          operator delete(__p[0]);

        v90 = v231 + 1;
      }
      while (v231 + 1 != v229);
      v89 = unk_25644FE48(v233, "countByEnumeratingWithState:objects:count:", &v275, v328, 16);
    }
    while (v89);
  }

  *(_QWORD *)&v319[0] = 0;
  __p[1] = 0;
  __p[0] = &__p[1];
  v171 = a2[24].super.isa;
  v172 = a2[25].super.isa;
  if (v171 == v172)
  {
LABEL_268:
    v177 = a2[21].super.isa;
    v178 = a2[22].super.isa;
    if (v177 == v178)
      goto LABEL_364;
    while (1)
    {
      if (&__p[1] == std::__tree<std::string>::find<std::string>((uint64_t)__p, v177))
        goto LABEL_404;
      v179 = (void **)__p[1];
      if (!__p[1])
        goto LABEL_363;
      v180 = &__p[1];
      v181 = __p[1];
      do
      {
        v182 = v180;
        v183 = (void **)(v181 + 4);
        v184 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v181 + 4, v177);
        v185 = v181 + 1;
        if (v184 >= 0)
        {
          v185 = v181;
          v180 = (void **)v181;
        }
        v181 = (_QWORD *)*v185;
      }
      while (*v185);
      if (v180 == &__p[1])
        goto LABEL_363;
      v186 = (char *)(v184 >= 0 ? v183 : v182 + 4);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v177, v186) & 0x80) != 0)
        goto LABEL_363;
      v187 = (void **)v180[1];
      v188 = v187;
      v189 = v180;
      if (v187)
      {
        do
        {
          v190 = v188;
          v188 = (void **)*v188;
        }
        while (v188);
      }
      else
      {
        do
        {
          v190 = (void **)v189[2];
          v120 = *v190 == v189;
          v189 = v190;
        }
        while (!v120);
      }
      if (__p[0] == v180)
        __p[0] = v190;
      --*(_QWORD *)&v319[0];
      if (*v180)
      {
        if (!v187)
        {
          v187 = (void **)*v180;
          v191 = v180;
LABEL_295:
          v192 = 0;
          v187[2] = v191[2];
          goto LABEL_296;
        }
        do
        {
          v191 = v187;
          v187 = (void **)*v187;
        }
        while (v187);
        v187 = (void **)v191[1];
      }
      else
      {
        v191 = v180;
      }
      if (v187)
        goto LABEL_295;
      v192 = 1;
LABEL_296:
      v193 = (void ***)v191[2];
      v194 = *v193;
      if (*v193 == v191)
      {
        *v193 = v187;
        if (v191 == v179)
        {
          v194 = 0;
          v179 = v187;
        }
        else
        {
          v194 = v193[1];
        }
      }
      else
      {
        v193[1] = v187;
      }
      v195 = *((unsigned __int8 *)v191 + 24);
      if (v191 != v180)
      {
        v196 = v180[2];
        v191[2] = v196;
        *((_QWORD *)v196 + (*(_QWORD *)v180[2] != (_QWORD)v180)) = v191;
        v197 = *v180;
        *v191 = *v180;
        v197[2] = v191;
        v198 = v180[1];
        v191[1] = v198;
        if (v198)
          *((_QWORD *)v198 + 2) = v191;
        *((_BYTE *)v191 + 24) = *((_BYTE *)v180 + 24);
        if (v179 == v180)
          v179 = v191;
      }
      if (!v195 || !v179)
        goto LABEL_360;
      if (!v192)
      {
        *((_BYTE *)v187 + 24) = 1;
        goto LABEL_360;
      }
      while (1)
      {
        v199 = (void **)v194[2];
        if (*v199 != v194)
          break;
        if (!*((_BYTE *)v194 + 24))
        {
          *((_BYTE *)v194 + 24) = 1;
          *((_BYTE *)v199 + 24) = 0;
          v205 = v194[1];
          *v199 = v205;
          if (v205)
            v205[2] = v199;
          v194[2] = v199[2];
          *((_QWORD *)v199[2] + (*(_QWORD *)v199[2] != (_QWORD)v199)) = v194;
          v194[1] = v199;
          v199[2] = v194;
          if (v179 == v199)
            v179 = v194;
          v194 = (void **)*v199;
        }
        v206 = *v194;
        if (*v194 && !v206[24])
          goto LABEL_355;
        v207 = (void **)v194[1];
        if (v207 && !*((_BYTE *)v207 + 24))
        {
          if (v206 && !v206[24])
          {
LABEL_355:
            v207 = v194;
          }
          else
          {
            *((_BYTE *)v207 + 24) = 1;
            *((_BYTE *)v194 + 24) = 0;
            v213 = *v207;
            v194[1] = *v207;
            if (v213)
              v213[2] = v194;
            v207[2] = v194[2];
            *((_QWORD *)v194[2] + (*(_QWORD *)v194[2] != (_QWORD)v194)) = v207;
            *v207 = v194;
            v194[2] = v207;
            v206 = v194;
          }
          v210 = v207[2];
          *((_BYTE *)v207 + 24) = *((_BYTE *)v210 + 24);
          *((_BYTE *)v210 + 24) = 1;
          v206[24] = 1;
          v211 = *(uint64_t **)v210;
          v214 = *(_QWORD *)(*(_QWORD *)v210 + 8);
          *(_QWORD *)v210 = v214;
          if (v214)
            *(_QWORD *)(v214 + 16) = v210;
          v211[2] = *((_QWORD *)v210 + 2);
          *(_QWORD *)(*((_QWORD *)v210 + 2) + 8 * (**((_QWORD **)v210 + 2) != (_QWORD)v210)) = v211;
          v211[1] = (uint64_t)v210;
          goto LABEL_359;
        }
        *((_BYTE *)v194 + 24) = 0;
        v204 = (void **)v194[2];
        if (*((_BYTE *)v204 + 24))
          v208 = v204 == v179;
        else
          v208 = 1;
        if (v208)
          goto LABEL_340;
LABEL_337:
        v194 = (void **)*((_QWORD *)v204[2] + (*(_QWORD *)v204[2] == (_QWORD)v204));
      }
      if (!*((_BYTE *)v194 + 24))
      {
        *((_BYTE *)v194 + 24) = 1;
        *((_BYTE *)v199 + 24) = 0;
        v200 = (uint64_t *)v199[1];
        v201 = *v200;
        v199[1] = (void *)*v200;
        if (v201)
          *(_QWORD *)(v201 + 16) = v199;
        v200[2] = (uint64_t)v199[2];
        *((_QWORD *)v199[2] + (*(_QWORD *)v199[2] != (_QWORD)v199)) = v200;
        *v200 = (uint64_t)v199;
        v199[2] = v200;
        if (v179 == *v194)
          v179 = v194;
        v194 = (void **)*((_QWORD *)*v194 + 1);
      }
      v202 = *v194;
      if (!*v194 || v202[24])
      {
        v203 = (void **)v194[1];
        if (v203 && !*((_BYTE *)v203 + 24))
          goto LABEL_346;
        *((_BYTE *)v194 + 24) = 0;
        v204 = (void **)v194[2];
        if (v204 == v179)
        {
          v204 = v179;
LABEL_340:
          *((_BYTE *)v204 + 24) = 1;
          goto LABEL_360;
        }
        if (!*((_BYTE *)v204 + 24))
          goto LABEL_340;
        goto LABEL_337;
      }
      v203 = (void **)v194[1];
      if (v203 && !*((_BYTE *)v203 + 24))
      {
LABEL_346:
        v202 = v194;
      }
      else
      {
        v202[24] = 1;
        *((_BYTE *)v194 + 24) = 0;
        v209 = (_QWORD *)*((_QWORD *)v202 + 1);
        *v194 = v209;
        if (v209)
          v209[2] = v194;
        *((_QWORD *)v202 + 2) = v194[2];
        *((_QWORD *)v194[2] + (*(_QWORD *)v194[2] != (_QWORD)v194)) = v202;
        *((_QWORD *)v202 + 1) = v194;
        v194[2] = v202;
        v203 = v194;
      }
      v210 = (void *)*((_QWORD *)v202 + 2);
      v202[24] = *((_BYTE *)v210 + 24);
      *((_BYTE *)v210 + 24) = 1;
      *((_BYTE *)v203 + 24) = 1;
      v211 = (uint64_t *)*((_QWORD *)v210 + 1);
      v212 = *v211;
      *((_QWORD *)v210 + 1) = *v211;
      if (v212)
        *(_QWORD *)(v212 + 16) = v210;
      v211[2] = *((_QWORD *)v210 + 2);
      *(_QWORD *)(*((_QWORD *)v210 + 2) + 8 * (**((_QWORD **)v210 + 2) != (_QWORD)v210)) = v211;
      *v211 = (uint64_t)v210;
LABEL_359:
      *((_QWORD *)v210 + 2) = v211;
LABEL_360:
      if (*((char *)v180 + 55) < 0)
        operator delete(v180[4]);
      operator delete(v180);
LABEL_363:
      v177 = (Class)((char *)v177 + 24);
      if (v177 == v178)
      {
LABEL_364:
        std::__tree<std::string>::destroy((char *)__p[1]);
        v215 = 0;
        goto LABEL_408;
      }
    }
  }
LABEL_257:
  v173 = *((_QWORD *)v171 + 21);
  v174 = *((_QWORD *)v171 + 22);
  while (1)
  {
    if (v173 == v174)
    {
      v175 = *((_QWORD *)v171 + 24);
      v176 = *((_QWORD *)v171 + 25);
      while (v175 != v176)
      {
        if (*(_BYTE *)(v175 + 24)
          && !std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)__p, (_QWORD *)v175, v175))
        {
          get_adm_log_object();
          v225 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
            goto LABEL_403;
          if (*(char *)(v175 + 23) < 0)
            v175 = *(_QWORD *)v175;
          LODWORD(v307.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v307.__r_.__value_.__r.__words + 4) = v175;
LABEL_420:
          _os_log_error_impl(&dword_236C84000, v225, OS_LOG_TYPE_ERROR, "duplicate stream ID %s", (uint8_t *)&v307, 0xCu);
          goto LABEL_403;
        }
        v175 += 136;
      }
      v171 = (Class)((char *)v171 + 216);
      if (v171 == v172)
        goto LABEL_268;
      goto LABEL_257;
    }
    if (*(_BYTE *)(v173 + 24)
      && !std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)__p, (_QWORD *)v173, v173))
    {
      break;
    }
    v173 += 136;
  }
  get_adm_log_object();
  v225 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(v173 + 23) < 0)
      v173 = *(_QWORD *)v173;
    LODWORD(v307.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v307.__r_.__value_.__r.__words + 4) = v173;
    goto LABEL_420;
  }
LABEL_403:

LABEL_404:
  std::__tree<std::string>::destroy((char *)__p[1]);
  get_adm_log_object();
  v226 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v226, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_236C84000, v226, OS_LOG_TYPE_ERROR, "Inconsistent stream IDs in config change request dictionary!", (uint8_t *)__p, 2u);
  }

LABEL_407:
  v215 = 1;
LABEL_408:

  v219 = v215 == 0;
LABEL_373:

  return v219;
}

void sub_236CC36D0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  NSObject *v19;

  if (a2)
  {

    __cxa_begin_catch(a1);
    get_adm_log_object();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LOWORD(STACK[0x370]) = 0;
      _os_log_error_impl(&dword_236C84000, v19, OS_LOG_TYPE_ERROR, "Exception from converting the config change request dictionary!", (uint8_t *)&STACK[0x370], 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x236CC3224);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t v8;

  result = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    v6 = (uint64_t **)result;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a3;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v8, v6, (uint64_t *)v7);
  }
  return result;
}

void `anonymous namespace'::getASBDFormatFromDict(_anonymous_namespace_ *this, NSDictionary *a2)
{
  void *v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  NSDictionary *v20;

  v20 = a2;
  -[NSDictionary objectForKeyedSubscript:](v20, "objectForKeyedSubscript:", CFSTR("channels"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedIntValue");

  -[NSDictionary objectForKeyedSubscript:](v20, "objectForKeyedSubscript:", CFSTR("sample rate"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "doubleValue");
  v7 = v6;

  -[NSDictionary objectForKeyedSubscript:](v20, "objectForKeyedSubscript:", CFSTR("common pcm format"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v5) = objc_msgSend(v8, "unsignedIntValue");

  -[NSDictionary objectForKeyedSubscript:](v20, "objectForKeyedSubscript:", CFSTR("is interleaved"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v9, "BOOLValue");

  switch((int)v5)
  {
    case 1:
      v11 = v10 == 0;
      v12 = 41;
      v13 = 9;
      goto LABEL_5;
    case 2:
      if (v10)
        v12 = 12;
      else
        v12 = 44;
      v18 = 2 * v4;
      if (!v10)
        v18 = 2;
      v15 = v18 | 0x100000000;
      v16 = 16;
      goto LABEL_24;
    case 3:
      v11 = v10 == 0;
      v12 = 3116;
      v13 = 3084;
      goto LABEL_5;
    case 4:
      if (v10)
        v12 = 9;
      else
        v12 = 41;
      v19 = 8 * v4;
      if (!v10)
        v19 = 8;
      v15 = v19 | 0x100000000;
      v16 = 64;
      goto LABEL_24;
    case 5:
      v11 = v10 == 0;
      v12 = 44;
      v13 = 12;
LABEL_5:
      if (!v11)
        v12 = v13;
      v14 = 4 * v4;
      if (v11)
        v14 = 4;
      v15 = v14 | 0x100000000;
      v16 = 32;
LABEL_24:
      v17 = 1819304813;
      break;
    default:
      v17 = 0;
      v12 = 0;
      v4 = 0;
      v16 = 0;
      v15 = 0;
      v7 = 0;
      break;
  }
  *(_QWORD *)this = v7;
  *((_DWORD *)this + 2) = v17;
  *((_DWORD *)this + 3) = v12;
  *((_QWORD *)this + 2) = v15;
  *((_DWORD *)this + 6) = v15;
  *((_DWORD *)this + 7) = v4;
  *((_DWORD *)this + 8) = v16;
  *((_DWORD *)this + 9) = 0;

}

void sub_236CC40F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::getChannelLayoutFromDict(_anonymous_namespace_ *this, NSDictionary *a2)
{
  NSDictionary *v3;
  _OWORD *v4;
  const __CFDictionary *v5;
  const __CFNumber *Value;
  int v7;
  unint64_t v8;
  const __CFDictionary *v9;
  const __CFNumber *v10;
  unint64_t v11;
  int v12;
  const __CFDictionary *v13;
  const __CFArray *v14;
  CFTypeRef *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  CFTypeRef v20;
  std::runtime_error *exception;
  std::runtime_error *v22;
  std::runtime_error *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  _anonymous_namespace_ *v28;
  _BYTE *v29;
  char *v30;
  _anonymous_namespace_ *v31;
  _BYTE *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  size_t v37;
  void *v38;
  _BYTE *v39;
  _BYTE *v40;
  char v41;
  _anonymous_namespace_ *v42;
  char *v43;
  _anonymous_namespace_ *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  const __CFDictionary *v49;
  uint64_t v50;
  const __CFDictionary *v51;
  const __CFDictionary *v52;
  const void *v53;
  CFTypeID TypeID;
  CFIndex Count;
  int v56;
  float *v57;
  uint64_t v58;
  float *v59;
  CFIndex v60;
  float *v61;
  const __CFNumber *ValueAtIndex;
  CFTypeID v63;
  int v64;
  CFTypeID v65;
  float v66;
  uint64_t v67;
  int v68;
  float v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  float *v78;
  int v79;
  _DWORD *v80;
  _DWORD *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::logic_error *v85;
  NSDictionary *v86;
  uint64_t v87;
  _anonymous_namespace_ *v88;
  unint64_t v89;
  uint64_t v90;
  CFTypeRef cf[2];
  _QWORD *v92;
  __int128 v93;
  _QWORD *v94;
  CFTypeRef v95;
  int64x2_t key;
  uint64_t v97;
  char v98;
  int64x2_t *p_key;
  char v100;

  v3 = a2;
  CFRetain(v3);
  v86 = v3;
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v95, v3);

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = operator new(0x20uLL);
  *((_QWORD *)this + 1) = v4 + 2;
  *((_QWORD *)this + 2) = v4 + 2;
  *v4 = 0u;
  v4[1] = 0u;
  *(_QWORD *)this = v4;
  *(_QWORD *)v4 = 0;
  *((_DWORD *)v4 + 2) = 0;
  v5 = (const __CFDictionary *)v95;
  v88 = this;
  if (!v95)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "channel layout tag");
  Value = (const __CFNumber *)CFDictionaryGetValue(v5, (const void *)key.i64[0]);
  if (key.i64[0])
    CFRelease((CFTypeRef)key.i64[0]);
  v7 = -65536;
  if (Value)
  {
    v8 = applesauce::CF::convert_as<unsigned int,0>(Value);
    if (HIDWORD(v8))
      v7 = v8;
    else
      v7 = -65536;
  }
  *(_DWORD *)v4 = v7;
  v9 = (const __CFDictionary *)v95;
  if (!v95)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "channel bitmap");
  v10 = (const __CFNumber *)CFDictionaryGetValue(v9, (const void *)key.i64[0]);
  if (key.i64[0])
    CFRelease((CFTypeRef)key.i64[0]);
  if (v10)
  {
    v11 = applesauce::CF::convert_as<unsigned int,0>(v10);
    v12 = 0;
    if (v11 > 0x100000000)
      v12 = v11;
  }
  else
  {
    v12 = 0;
  }
  *((_DWORD *)v4 + 1) = v12;
  v13 = (const __CFDictionary *)v95;
  if (!v95)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  cf[0] = 0;
  cf[1] = 0;
  v92 = 0;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, "channel descriptions");
  v14 = (const __CFArray *)CFDictionaryGetValue(v13, (const void *)key.i64[0]);
  if (key.i64[0])
    CFRelease((CFTypeRef)key.i64[0]);
  if (!v14)
  {
    key.i8[0] = 0;
    v98 = 0;
    goto LABEL_35;
  }
  applesauce::CF::convert_as<std::vector<applesauce::CF::DictionaryRef>,0>(&key, v14);
  if (!v98)
  {
LABEL_35:
    v93 = *(_OWORD *)cf;
    v94 = v92;
    cf[1] = 0;
    v92 = 0;
    cf[0] = 0;
    goto LABEL_36;
  }
  v93 = 0uLL;
  v94 = 0;
  v16 = key.i64[1];
  v15 = (CFTypeRef *)key.i64[0];
  p_key = (int64x2_t *)&v93;
  v100 = 0;
  v17 = key.i64[1] - key.i64[0];
  if (key.i64[1] != key.i64[0])
  {
    if (v17 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v17 >> 3);
    *(_QWORD *)&v93 = v18;
    *((_QWORD *)&v93 + 1) = v18;
    v94 = &v18[v19];
    do
    {
      v20 = *v15;
      if (*v15)
        CFRetain(*v15);
      *v18++ = v20;
      ++v15;
    }
    while (v15 != (CFTypeRef *)v16);
    *((_QWORD *)&v93 + 1) = v18;
  }
  if (v98)
  {
    p_key = &key;
    std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_key);
  }
LABEL_36:
  key.i64[0] = (uint64_t)cf;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&key);
  v24 = *((_QWORD *)&v93 + 1) - v93;
  v25 = (*((_QWORD *)&v93 + 1) - (_QWORD)v93) >> 3;
  if (v25 <= 1)
    v26 = 1;
  else
    v26 = (*((_QWORD *)&v93 + 1) - (_QWORD)v93) >> 3;
  v27 = 20 * v26 + 12;
  v28 = this;
  v31 = this;
  v30 = *(char **)this;
  v29 = (_BYTE *)*((_QWORD *)v31 + 1);
  v32 = (_BYTE *)(v29 - v30);
  v33 = v27 - (v29 - v30);
  if (v27 <= v29 - v30)
  {
    if (v27 >= v29 - v30)
      goto LABEL_59;
    v43 = &v30[v27];
    goto LABEL_55;
  }
  v34 = *((_QWORD *)v28 + 2);
  if (v34 - (uint64_t)v29 >= v33)
  {
    v43 = &v30[v27];
    do
    {
      *v29++ = 0;
      --v33;
    }
    while (v33);
LABEL_55:
    *((_QWORD *)v88 + 1) = v43;
    goto LABEL_59;
  }
  v35 = v34 - (_QWORD)v30;
  v36 = 2 * v35;
  if (2 * v35 <= v27)
    v36 = v27;
  if (v35 >= 0x3FFFFFFFFFFFFFFFLL)
    v37 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v37 = v36;
  v38 = operator new(v37);
  v30 = &v32[(_QWORD)v38];
  v39 = &v32[(_QWORD)v38];
  do
  {
    *v39++ = 0;
    --v33;
  }
  while (v33);
  v40 = *(_BYTE **)v88;
  if (v29 == *(_BYTE **)v88)
  {
    v42 = v88;
  }
  else
  {
    do
    {
      v41 = *--v29;
      *--v30 = v41;
    }
    while (v29 != v40);
    v42 = v88;
    v29 = *(_BYTE **)v88;
  }
  *(_QWORD *)v42 = v30;
  *((_QWORD *)v42 + 1) = (char *)v38 + v27;
  *((_QWORD *)v42 + 2) = (char *)v38 + v37;
  if (v29)
    operator delete(v29);
LABEL_59:
  *((_DWORD *)v30 + 2) = v25;
  v44 = v88;
  if ((_DWORD)v25)
  {
    v45 = 0;
    v87 = (v24 >> 3);
    while (1)
    {
      v46 = *(_QWORD *)v44;
      v47 = *(unsigned int *)(*(_QWORD *)v44 + 8);
      if (v47 > (*((_QWORD *)v44 + 1) - *(_QWORD *)v44 - 12) / 0x14uLL)
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      if (v45 >= v47)
      {
        v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v85, "accessing a CA::ChannelLayout with an out-of-range index");
        v85->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
        __cxa_throw(v85, (struct type_info *)off_25083BA50, MEMORY[0x24BEDAB00]);
      }
      v48 = v93;
      v49 = *(const __CFDictionary **)(v93 + 8 * v45);
      if (!v49)
      {
        v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v82, "Could not construct");
        __cxa_throw(v82, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v50 = v46 + 12;
      key.i32[0] = -1;
      *(_DWORD *)(v46 + 12 + 20 * v45) = applesauce::CF::at_or<unsigned int,char const(&)[14]>(v49, "channel label", (unsigned int *)&key);
      v51 = *(const __CFDictionary **)(v48 + 8 * v45);
      if (!v51)
      {
        v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v83, "Could not construct");
        __cxa_throw(v83, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      key.i32[0] = 0;
      *(_DWORD *)(v50 + 20 * v45 + 4) = applesauce::CF::at_or<unsigned int,char const(&)[14]>(v51, "channel flags", (unsigned int *)&key);
      v52 = *(const __CFDictionary **)(v48 + 8 * v45);
      if (!v52)
      {
        v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v84, "Could not construct");
        __cxa_throw(v84, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, "coordinates");
      v53 = CFDictionaryGetValue(v52, cf[0]);
      if (cf[0])
        CFRelease(cf[0]);
      if (!v53)
        break;
      TypeID = CFArrayGetTypeID();
      if (TypeID != CFGetTypeID(v53))
        break;
      Count = CFArrayGetCount((CFArrayRef)v53);
      v56 = Count;
      if (Count << 32)
      {
        if (Count << 32 < 0)
LABEL_148:
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v57 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((int)Count);
        v59 = &v57[v58];
      }
      else
      {
        v59 = 0;
        v57 = 0;
      }
      if (v56 >= 1)
      {
        v60 = 0;
        v90 = v56;
        v61 = v57;
        while (1)
        {
          ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v53, v60);
          if (!ValueAtIndex)
            break;
          v63 = CFNumberGetTypeID();
          if (v63 == CFGetTypeID(ValueAtIndex))
          {
            switch(CFNumberGetType(ValueAtIndex))
            {
              case kCFNumberSInt8Type:
                LOBYTE(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt8Type, cf);
                goto LABEL_98;
              case kCFNumberSInt16Type:
                LOWORD(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt16Type, cf);
                goto LABEL_93;
              case kCFNumberSInt32Type:
                LODWORD(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, cf);
                goto LABEL_103;
              case kCFNumberSInt64Type:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberSInt64Type, cf);
                goto LABEL_101;
              case kCFNumberFloat32Type:
                LODWORD(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, cf);
                goto LABEL_85;
              case kCFNumberFloat64Type:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberFloat64Type, cf);
                goto LABEL_95;
              case kCFNumberCharType:
                LOBYTE(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberCharType, cf);
LABEL_98:
                v68 = SLOBYTE(cf[0]);
                goto LABEL_99;
              case kCFNumberShortType:
                LOWORD(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberShortType, cf);
LABEL_93:
                v68 = SLOWORD(cf[0]);
LABEL_99:
                v69 = (float)v68;
                goto LABEL_104;
              case kCFNumberIntType:
                LODWORD(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberIntType, cf);
LABEL_103:
                v69 = (float)SLODWORD(cf[0]);
                goto LABEL_104;
              case kCFNumberLongType:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberLongType, cf);
                goto LABEL_101;
              case kCFNumberLongLongType:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberLongLongType, cf);
                goto LABEL_101;
              case kCFNumberFloatType:
                LODWORD(cf[0]) = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, cf);
LABEL_85:
                v67 = LODWORD(cf[0]);
                goto LABEL_105;
              case kCFNumberDoubleType:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberDoubleType, cf);
                goto LABEL_95;
              case kCFNumberCFIndexType:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberCFIndexType, cf);
                goto LABEL_101;
              case kCFNumberNSIntegerType:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberNSIntegerType, cf);
LABEL_101:
                v69 = (float)(uint64_t)cf[0];
                goto LABEL_104;
              case kCFNumberCGFloatType:
                cf[0] = 0;
                v64 = CFNumberGetValue(ValueAtIndex, kCFNumberCGFloatType, cf);
LABEL_95:
                v69 = *(double *)cf;
LABEL_104:
                v67 = LODWORD(v69);
LABEL_105:
                v70 = v67 | 0x100000000;
                if (!v64)
                  v70 = 0;
                v71 = v70 & 0xFFFFFF00;
                v72 = v70 & 0x100000000;
                break;
              default:
                v71 = 0;
                v72 = 0;
                LOBYTE(v70) = 0;
                break;
            }
            if (!HIDWORD(v72))
              break;
            LODWORD(v66) = v72 | v71 & 0xFFFFFF00 | v70;
          }
          else
          {
            v65 = CFBooleanGetTypeID();
            if (v65 != CFGetTypeID(ValueAtIndex))
              break;
            v66 = (float)CFBooleanGetValue(ValueAtIndex);
          }
          if (v57 >= v59)
          {
            v74 = v57 - v61;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 62)
              goto LABEL_148;
            if (((char *)v59 - (char *)v61) >> 1 > v75)
              v75 = ((char *)v59 - (char *)v61) >> 1;
            if ((unint64_t)((char *)v59 - (char *)v61) >= 0x7FFFFFFFFFFFFFFCLL)
              v76 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            if (v76)
              v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v76);
            else
              v77 = 0;
            v78 = (float *)(v76 + 4 * v74);
            *v78 = v66;
            v73 = (uint64_t)(v78 + 1);
            while (v57 != v61)
            {
              v79 = *((_DWORD *)v57-- - 1);
              *((_DWORD *)v78-- - 1) = v79;
            }
            v59 = (float *)(v76 + 4 * v77);
            if (v61)
              operator delete(v61);
            v61 = v78;
          }
          else
          {
            *v57 = v66;
            v73 = (uint64_t)(v57 + 1);
          }
          ++v60;
          v57 = (float *)v73;
          if (v60 == v90)
            goto LABEL_134;
        }
        v89 &= 0xFFFFFFFFFFFFFF00;
        if (v61)
          operator delete(v61);
        goto LABEL_138;
      }
      v73 = (uint64_t)v57;
      v61 = v57;
LABEL_134:
      key = 0uLL;
      v97 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&key, v61, v73, (v73 - (uint64_t)v61) >> 2);
      if (v61)
        operator delete(v61);
      v80 = (_DWORD *)key.i64[0];
      v89 = (unint64_t)v61;
LABEL_139:
      if (key.i64[1] - (_QWORD)v80 == 12)
      {
        v81 = (_DWORD *)(v50 + 20 * v45);
        v81[2] = *v80;
        v81[3] = v80[1];
        v81[4] = v80[2];
        v44 = v88;
LABEL_142:
        operator delete(v80);
        goto LABEL_143;
      }
      v44 = v88;
      if (v80)
        goto LABEL_142;
LABEL_143:
      if (++v45 == v87)
        goto LABEL_144;
    }
    v89 &= 0xFFFFFFFFFFFFFF00;
LABEL_138:
    v80 = 0;
    key = 0uLL;
    v97 = 0;
    goto LABEL_139;
  }
LABEL_144:
  key.i64[0] = (uint64_t)&v93;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&key);
  if (v95)
    CFRelease(v95);

}

void sub_236CC4C14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char *cf)
{
  cf = &a19;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
  JUMPOUT(0x236CC4CF0);
}

uint64_t std::optional<CA::ChannelLayout>::operator=[abi:ne180100]<CA::ChannelLayout,void>(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<char const*,void>(std::string *a1, std::string::value_type *a2)
{
  std::string *result;

  if (a1[1].__r_.__value_.__s.__data_[0])
    return std::string::__assign_external(a1, a2);
  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, a2);
  result[1].__r_.__value_.__s.__data_[0] = 1;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a1);
}

void std::vector<adm::HardwareStreamDescription>::push_back[abi:ne180100](__int128 **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
    if (v8 + 1 > 0x1E1E1E1E1E1E1E1)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 > 0x1E1E1E1E1E1E1E1)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(136 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = (__int128 *)&v12[136 * v11];
    std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>((uint64_t)&v12[136 * v8], a2);
    v7 = (__int128 *)((char *)v14 + 136);
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v15 = (__int128 *)((char *)v15 - 136);
        std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>((uint64_t)v14 - 136, v15);
      }
      while (v15 != v16);
      v15 = *a1;
      v17 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
      while ((__int128 *)v17 != v15)
      {
        v17 -= 136;
        std::__destroy_at[abi:ne180100]<adm::HardwareStreamDescription,0>(v17);
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>(v4, a2);
    v7 = (__int128 *)(v6 + 136);
  }
  a1[1] = v7;
}

void std::vector<adm::DeviceDescription>::push_back[abi:ne180100](__int128 **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v8 = 0x84BDA12F684BDA13 * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
    if (v8 + 1 > 0x12F684BDA12F684)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v9 = 0x84BDA12F684BDA13 * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x97B425ED097B42)
      v11 = 0x12F684BDA12F684;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 > 0x12F684BDA12F684)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(216 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = (__int128 *)&v12[216 * v11];
    std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>((uint64_t)&v12[216 * v8], a2);
    v7 = (__int128 *)((char *)v14 + 216);
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
    }
    else
    {
      do
      {
        v15 = (__int128 *)((char *)v15 - 216);
        std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>((uint64_t)v14 - 216, v15);
      }
      while (v15 != v16);
      v15 = *a1;
      v17 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v7;
      a1[2] = v13;
      while ((__int128 *)v17 != v15)
      {
        v17 -= 216;
        std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(v17);
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>(v4, a2);
    v7 = (__int128 *)(v6 + 216);
  }
  a1[1] = v7;
}

void std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:ne180100]<adm::HardwareStreamDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  if (*v5)
    return 0;
  v7 = v5;
  v8 = (uint64_t *)operator new(0x38uLL);
  v9 = (std::string *)(v8 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[6] = *(_QWORD *)(a3 + 16);
  }
  std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>>>::__insert_node_at(a1, v10, v7, v8);
  return 1;
}

void sub_236CC51F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<adm::HardwareStreamDescription,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 56) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
}

__n128 std::construct_at[abi:ne180100]<adm::DeviceDescription,adm::DeviceDescription,adm::DeviceDescription*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *((_QWORD *)a2 + 12) = 0;
    *((_QWORD *)a2 + 13) = 0;
    *((_QWORD *)a2 + 14) = 0;
    *(_BYTE *)(a1 + 120) = 1;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*((_BYTE *)a2 + 152))
  {
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_OWORD *)(a1 + 128) = a2[8];
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
    *((_QWORD *)a2 + 16) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 18) = 0;
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 168) = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(a1 + 184) = *((_QWORD *)a2 + 23);
  *((_QWORD *)a2 + 21) = 0;
  *((_QWORD *)a2 + 22) = 0;
  *((_QWORD *)a2 + 23) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  result = (__n128)a2[12];
  *(__n128 *)(a1 + 192) = result;
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 24) = 0;
  *((_QWORD *)a2 + 25) = 0;
  *((_QWORD *)a2 + 26) = 0;
  return result;
}

void std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 192);
  std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 168);
  std::vector<adm::HardwareStreamDescription>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(_BYTE *)(a1 + 152))
  {
    v2 = *(void **)(a1 + 128);
    if (v2)
    {
      *(_QWORD *)(a1 + 136) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    v3 = *(void **)(a1 + 96);
    if (v3)
    {
      *(_QWORD *)(a1 + 104) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

__n128 std::construct_at[abi:ne180100]<adm::HardwareStreamDescription,adm::HardwareStreamDescription,adm::HardwareStreamDescription*>(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    v2 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    v3 = a2[2];
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v3;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  v4 = a2[5];
  v5 = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = a2[4];
  *(_OWORD *)(a1 + 80) = v4;
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  result = *(__n128 *)((char *)a2 + 104);
  *(__n128 *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
  return result;
}

__n128 std::vector<char>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

unint64_t applesauce::CF::at_or<unsigned int,char const(&)[14]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  const __CFNumber *Value;
  unint64_t result;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!Value)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(Value);
  if (HIDWORD(result))
    return result;
  else
    return *a3;
}

uint64_t adm::utility::convertFromDictionary(adm::utility *this, NSDictionary *a2, HostDescription *a3)
{
  adm::utility *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSDictionary *v9;
  __int128 v11;
  objc_class *v12;

  v4 = this;
  -[adm::utility objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("client bundle identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String"));
    if (SHIBYTE(a2[2].super.isa) < 0)
      operator delete(a2->super.isa);
    *(_OWORD *)&a2->super.isa = v11;
    a2[2].super.isa = v12;
  }

  -[adm::utility objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", CFSTR("client unique identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)objc_msgSend(objc_retainAutorelease(v7), "UTF8String"));
    v9 = a2 + 3;
    if (SHIBYTE(a2[5].super.isa) < 0)
      operator delete(v9->super.isa);
    *(_OWORD *)&v9->super.isa = v11;
    a2[5].super.isa = v12;
  }

  return 1;
}

void sub_236CC56D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  NSObject *v9;

  __cxa_begin_catch(a1);
  get_adm_log_object();
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    a9 = 0;
    _os_log_error_impl(&dword_236C84000, v9, OS_LOG_TYPE_ERROR, "Exception from converting the host description dictionary!", (uint8_t *)&a9, 2u);
  }

  __cxa_end_catch();
  JUMPOUT(0x236CC56BCLL);
}

id `anonymous namespace'::createFormatDictFromASBD(_anonymous_namespace_ *this, const StreamDescription *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  void *v12;
  uint64_t v14;
  int v15;
  BOOL v16;

  v3 = (void *)objc_opt_new();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", *(double *)this);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, CFSTR("sample rate"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *((unsigned int *)this + 7));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("channels"));

  v6 = 0;
  if (*((_DWORD *)this + 2) == 1819304813 && *((_DWORD *)this + 5) == 1)
  {
    v7 = *((_DWORD *)this + 6);
    if (v7 != *((_DWORD *)this + 4))
      goto LABEL_13;
    v8 = *((_DWORD *)this + 8);
    if (v7 < v8 >> 3)
      goto LABEL_13;
    v9 = *((_DWORD *)this + 7);
    if (!v9)
      goto LABEL_13;
    v10 = *((_DWORD *)this + 3);
    if ((v10 & 0x20) == 0)
    {
      v16 = v7 == v7 / v9 * v9;
      v7 /= v9;
      if (!v16)
        goto LABEL_13;
    }
    v6 = 0;
    if ((v10 & 2) == 0 && 8 * v7 == v8)
    {
      if ((v10 & 1) != 0)
      {
        if (v7 == 4)
          v14 = 1;
        else
          v14 = 4 * (v7 == 8);
        if ((v10 & 0x1F84) != 0)
          v6 = 0;
        else
          v6 = v14;
      }
      else
      {
        if ((v10 & 4) == 0)
        {
LABEL_13:
          v6 = 0;
          goto LABEL_14;
        }
        v15 = (v10 >> 7) & 0x3F;
        if (v15 == 24 && v7 == 4)
        {
          v6 = 3;
        }
        else if (v15 || v7 != 4)
        {
          v16 = v7 == 2 && v15 == 0;
          if (v16)
            v6 = 2;
          else
            v6 = 0;
        }
        else
        {
          v6 = 5;
        }
      }
    }
  }
LABEL_14:
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithInteger:", v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, CFSTR("common pcm format"));

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", (*((_DWORD *)this + 3) & 0x20) == 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v12, CFSTR("is interleaved"));

  return v3;
}

void sub_236CC592C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id adm::utility::convertToDictionary(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = (void *)objc_opt_new();
  if (*(_BYTE *)(a1 + 8))
  {
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLongLong:", *(_QWORD *)a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("dsp processing latency samples"));

  }
  return v2;
}

void sub_236CC59C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id adm::utility::convertToDictionary(adm::utility *this, const adm::NegotiateResponse *a2)
{
  void *v3;
  const StreamDescription *v4;
  void *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  void *v8;
  const StreamDescription *v9;
  void *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  void *v13;
  void *v14;
  __int128 v15;
  double *v16;
  uint64_t *v17;
  void *v18;
  uint64_t *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  char *v26;
  NSObject *v27;
  void **v28;
  void *v29;
  void *v30;
  void *v31;
  __int128 v33;
  id v34;
  void *v35;
  void *__p[2];
  char v37;
  uint8_t buf[4];
  unsigned int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)objc_opt_new();
  v34 = v3;
  v35 = (void *)objc_opt_new();
  v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  v6 = *(_anonymous_namespace_ **)this;
  v7 = (_anonymous_namespace_ *)*((_QWORD *)this + 1);
  while (v6 != v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "addObject:", v8);

    v6 = (_anonymous_namespace_ *)((char *)v6 + 40);
  }
  objc_msgSend(v35, "setObject:forKeyedSubscript:", v5, CFSTR("io context supported input formats"));

  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3));
  v11 = (_anonymous_namespace_ *)*((_QWORD *)this + 3);
  v12 = (_anonymous_namespace_ *)*((_QWORD *)this + 4);
  while (v11 != v12)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "addObject:", v13);

    v11 = (_anonymous_namespace_ *)((char *)v11 + 40);
  }
  objc_msgSend(v35, "setObject:forKeyedSubscript:", v10, CFSTR("io context supported output formats"));

  objc_msgSend(v3, "setObject:forKeyedSubscript:", v35, CFSTR("io context configuration"));
  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEB8]), "initWithCapacity:", 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3));
  v16 = (double *)*((_QWORD *)this + 6);
  v17 = (uint64_t *)*((_QWORD *)this + 7);
  if (v16 != (double *)v17)
  {
    *(_QWORD *)&v15 = 67109120;
    v33 = v15;
    do
    {
      v18 = (void *)objc_opt_new();
      v19 = (uint64_t *)v16;
      if (*((char *)v16 + 23) < 0)
        v19 = *(uint64_t **)v16;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v19, v33);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "setObject:forKeyedSubscript:", v20, CFSTR("device uid"));

      if (*((_BYTE *)v16 + 32))
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithDouble:", v16[3]);
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v21, CFSTR("sample rate"));

      }
      if (*((_BYTE *)v16 + 41))
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", *((unsigned __int8 *)v16 + 40));
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v22, CFSTR("reference stream enablement"));

      }
      if (*((_BYTE *)v16 + 48))
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *((unsigned int *)v16 + 11));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v23, CFSTR("reference stream channel count"));

      }
      if (*((_BYTE *)v16 + 53))
      {
        v24 = (void *)MEMORY[0x24BDD17C8];
        v25 = *((unsigned __int8 *)v16 + 52);
        if (v25 >= 4)
        {
          get_adm_log_object();
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = v33;
            v39 = v25;
            _os_log_error_impl(&dword_236C84000, v27, OS_LOG_TYPE_ERROR, "Unknown Bluetooth format %d - use Automatic instead", buf, 8u);
          }

          v26 = "automatic";
        }
        else
        {
          v26 = off_25083E8A8[*((unsigned __int8 *)v16 + 52)];
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v26);
        if (v37 >= 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        objc_msgSend(v24, "stringWithUTF8String:", v28);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v29, CFSTR("bluetooth format"));

        if (v37 < 0)
          operator delete(__p[0]);
      }
      if (*((_BYTE *)v16 + 60))
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *((unsigned int *)v16 + 14));
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v30, CFSTR("mic processing mode"));

      }
      if (*((_BYTE *)v16 + 68))
      {
        objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", *((unsigned int *)v16 + 16));
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "setObject:forKeyedSubscript:", v31, CFSTR("mic processing kind"));

      }
      objc_msgSend(v14, "addObject:", v18);

      v16 += 9;
    }
    while (v16 != (double *)v17);
  }
  objc_msgSend(v34, "setObject:forKeyedSubscript:", v14, CFSTR("device configurations"));

  return v34;
}

void sub_236CC5E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::ErrorCategory::~ErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x23B801508);
}

const char *`anonymous namespace'::ErrorCategory::name(_anonymous_namespace_::ErrorCategory *this)
{
  return "AudioDSPManagerError";
}

void `anonymous namespace'::ErrorCategory::message(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string __p;
  std::string v11;

  if (a1 <= 1969448550)
  {
    if (!a1)
    {
      v5 = "no error";
      goto LABEL_12;
    }
    if (a1 == 1651536493)
    {
      v5 = "bad parameter";
      goto LABEL_12;
    }
  }
  else
  {
    switch(a1)
    {
      case 1969448551:
        v5 = "unknown configuration";
        goto LABEL_12;
      case 1969843568:
        v5 = "unimplemented";
        goto LABEL_12;
      case 1970170734:
        v5 = "unknown error";
LABEL_12:
        std::string::basic_string[abi:ne180100]<0>(a2, v5);
        return;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "Invalid error code: ");
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_236CC6094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t adm::config_policy::getIOContextConfiguration(uint64_t this, const adm::ConfigurationChangeRequest *a2)
{
  uint64_t v2;
  adm::config_policy *v4;
  const DeviceDescription *v5;
  const adm::ConfigurationChangeRequest *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _BOOL4 v10;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint8x8_t v20;
  int v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  adm::config_policy *v31[2];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v2 = this;
  if (*(_BYTE *)a2)
  {
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    adm::config_policy::getPrimaryStreamInfo((adm::config_policy *)v31, a2);
    v4 = v31[1];
    if (adm::config_policy::isBuiltInMicrophoneDevice(v31[0], v5))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "voice isolation conferencing");
      v6 = (const adm::ConfigurationChangeRequest *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, __p);
      if (v30 < 0)
        operator delete(__p[0]);
      if ((const adm::ConfigurationChangeRequest *)((char *)a2 + 16) != v6)
      {
        v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
        v9 = &v7[40 * v8];
        this = std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>((uint64_t)v7, 1, 1, 0, *((double *)v4 + 8));
        *((_QWORD *)&v33 + 1) = this + 40;
        *(_QWORD *)&v34 = v9;
LABEL_26:
        *(_QWORD *)&v33 = this;
LABEL_32:
        v26 = v34;
        *(_OWORD *)v2 = v33;
        *(_OWORD *)(v2 + 16) = v26;
        *(_OWORD *)(v2 + 32) = v35;
        goto LABEL_33;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "spatial playback");
    if ((_QWORD *)((char *)a2 + 16) == std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, __p))
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "spatial channel virtualization only");
      v10 = (_QWORD *)((char *)a2 + 16) != std::__tree<std::string>::find<std::string>((uint64_t)a2 + 8, v27)
         && *((_BYTE *)a2 + 152) != 0;
      if (v28 < 0)
        operator delete(v27[0]);
    }
    else
    {
      v10 = *((_BYTE *)a2 + 152) != 0;
    }
    if (v30 < 0)
    {
      operator delete(__p[0]);
      if (v10)
        goto LABEL_20;
    }
    else if (v10)
    {
LABEL_20:
      v12 = (_DWORD *)*((_QWORD *)a2 + 16);
      if (*v12 == 0x10000)
      {
        v20 = (uint8x8_t)vcnt_s8((int8x8_t)v12[1]);
        v20.i16[0] = vaddlv_u8(v20);
        v13 = v20.i32[0];
      }
      else if (*v12)
      {
        v13 = (unsigned __int16)*v12;
      }
      else
      {
        v13 = v12[2];
      }
      v21 = *((_DWORD *)v4 + 19);
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
      v23 = (v21 & 0x20) == 0;
      v25 = &v22[40 * v24];
      this = std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,unsigned int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>((uint64_t)v22, v13, 1, v23, *((double *)v4 + 8));
      *(_QWORD *)&v35 = this + 40;
      *((_QWORD *)&v35 + 1) = v25;
      goto LABEL_31;
    }
    if (v32 == 1)
    {
      this = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
      v15 = *((_OWORD *)v4 + 4);
      v16 = *((_OWORD *)v4 + 5);
      *(_QWORD *)(this + 32) = *((_QWORD *)v4 + 12);
      *(_OWORD *)this = v15;
      *(_OWORD *)(this + 16) = v16;
      *((_QWORD *)&v33 + 1) = this + 40;
      *(_QWORD *)&v34 = this + 40 * v14;
      goto LABEL_26;
    }
    this = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
    v18 = *((_OWORD *)v4 + 4);
    v19 = *((_OWORD *)v4 + 5);
    *(_QWORD *)(this + 32) = *((_QWORD *)v4 + 12);
    *(_OWORD *)this = v18;
    *(_OWORD *)(this + 16) = v19;
    *(_QWORD *)&v35 = this + 40;
    *((_QWORD *)&v35 + 1) = this + 40 * v17;
LABEL_31:
    *((_QWORD *)&v34 + 1) = this;
    goto LABEL_32;
  }
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)this = 0u;
LABEL_33:
  *(_BYTE *)(v2 + 48) = 1;
  return this;
}

void sub_236CC6324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0)
    operator delete(__p);
  adm::IOContextConfiguration::~IOContextConfiguration((adm::IOContextConfiguration *)&a22);
  _Unwind_Resume(a1);
}

void adm::IOContextConfiguration::~IOContextConfiguration(adm::IOContextConfiguration *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

uint64_t std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,unsigned int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>(uint64_t result, int a2, int a3, char a4, double a5)
{
  BOOL v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  switch(a3)
  {
    case 1:
      v5 = a4 == 0;
      v6 = 9;
      v7 = 41;
      goto LABEL_18;
    case 2:
      if (a4)
        v6 = 12;
      else
        v6 = 44;
      v11 = 2 * a2;
      if (!a4)
        v11 = 2;
      v9 = v11 | 0x100000000;
      HIDWORD(v10) = 16;
      goto LABEL_23;
    case 3:
      v5 = a4 == 0;
      v6 = 3084;
      v7 = 3116;
      goto LABEL_18;
    case 4:
      if (a4)
        v6 = 9;
      else
        v6 = 41;
      v12 = 8 * a2;
      if (!a4)
        v12 = 8;
      v9 = v12 | 0x100000000;
      HIDWORD(v10) = 64;
      goto LABEL_23;
    case 5:
      v5 = a4 == 0;
      v6 = 12;
      v7 = 44;
LABEL_18:
      if (v5)
        v6 = v7;
      v13 = 4 * a2;
      if (v5)
        v13 = 4;
      v9 = v13 | 0x100000000;
      HIDWORD(v10) = 32;
LABEL_23:
      LODWORD(v10) = a2;
      v8 = 1819304813;
      break;
    default:
      v8 = 0;
      v6 = 0;
      v9 = 0;
      a5 = 0.0;
      v10 = 0;
      break;
  }
  *(double *)result = a5;
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v6;
  *(_QWORD *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = v9;
  *(_QWORD *)(result + 28) = v10;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t std::construct_at[abi:ne180100]<CA::StreamDescription,double const&,int,CA::CommonPCMFormat,BOOL,CA::StreamDescription*>(uint64_t result, int a2, int a3, char a4, double a5)
{
  BOOL v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  switch(a3)
  {
    case 1:
      v5 = a4 == 0;
      v6 = 9;
      v7 = 41;
      goto LABEL_18;
    case 2:
      if (a4)
        v6 = 12;
      else
        v6 = 44;
      v11 = 2 * a2;
      if (!a4)
        v11 = 2;
      v9 = v11 | 0x100000000;
      HIDWORD(v10) = 16;
      goto LABEL_23;
    case 3:
      v5 = a4 == 0;
      v6 = 3084;
      v7 = 3116;
      goto LABEL_18;
    case 4:
      if (a4)
        v6 = 9;
      else
        v6 = 41;
      v12 = 8 * a2;
      if (!a4)
        v12 = 8;
      v9 = v12 | 0x100000000;
      HIDWORD(v10) = 64;
      goto LABEL_23;
    case 5:
      v5 = a4 == 0;
      v6 = 12;
      v7 = 44;
LABEL_18:
      if (v5)
        v6 = v7;
      v13 = 4 * a2;
      if (v5)
        v13 = 4;
      v9 = v13 | 0x100000000;
      HIDWORD(v10) = 32;
LABEL_23:
      LODWORD(v10) = a2;
      v8 = 1819304813;
      break;
    default:
      v8 = 0;
      v6 = 0;
      v9 = 0;
      a5 = 0.0;
      v10 = 0;
      break;
  }
  *(double *)result = a5;
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v6;
  *(_QWORD *)(result + 16) = v9;
  *(_DWORD *)(result + 24) = v9;
  *(_QWORD *)(result + 28) = v10;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_236CC68AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location, id a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  MEMORY[0x23B801508](v21, 0x10B2C407DFF903CLL);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a11);

  _Unwind_Resume(a1);
}

void sub_236CC69FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DSPProcessor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_236CC7354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  uint64_t v47;
  uint64_t v48;
  const std::exception *v51;
  const std::exception *v52;
  const std::exception *v53;
  void *v54;
  adm *v55;
  const NSException *v56;

  if (a2)
  {
    *(_QWORD *)(v47 + 320) = v48;
    if (a10)
      caulk::__expected_detail::destroy<adm::IOContextConfiguration,(void *)0>((uint64_t)&a15);
    if (a25)
    {
      a33 = &a22;
      std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
    }
    adm::ConfigurationChangeRequest::~ConfigurationChangeRequest((adm::ConfigurationChangeRequest *)&a47);
    if (a31 < 0)
      operator delete(__p);
    if (a2 == 4)
    {
      v51 = (const std::exception *)__cxa_begin_catch(exception_object);
      adm::consume_exception_and_terminate(v51);
    }
    if (a2 == 3)
    {
      v52 = (const std::exception *)__cxa_begin_catch(exception_object);
      adm::consume_exception_and_terminate(v52, v53);
    }
    v54 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      v55 = v54;
      adm::consume_exception_and_terminate(v55, v56);
    }
    adm::consume_unknown_exception_and_terminate((adm *)v54);
  }
  _Unwind_Resume(exception_object);
}

void sub_236CC755C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_236CC7594(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_236CC7FF0()
{
  __break(1u);
}

void sub_236CC8164(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_236CC8404(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  const std::exception *v12;
  const std::exception *v13;
  const std::exception *v14;
  void *v15;
  adm *v16;
  const NSException *v17;

  applesauce::CF::DataRef::~DataRef((const void **)&a9);
  applesauce::CF::DataRef::~DataRef(&a10);
  if (a2 == 4)
  {
    v12 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v12);
  }
  if (a2 == 3)
  {
    v13 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v13, v14);
  }
  v15 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v16 = v15;
    adm::consume_exception_and_terminate(v16, v17);
  }
  adm::consume_unknown_exception_and_terminate((adm *)v15);
}

void sub_236CC848C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_236CC857C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  const std::exception *v11;
  const std::exception *v12;
  const std::exception *v13;
  void *v14;
  adm *v15;
  const NSException *v16;

  applesauce::CF::DataRef::~DataRef(&a9);
  if (a2 == 4)
  {
    v11 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v11);
  }
  if (a2 == 3)
  {
    v12 = (const std::exception *)__cxa_begin_catch(a1);
    adm::consume_exception_and_terminate(v12, v13);
  }
  v14 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v15 = v14;
    adm::consume_exception_and_terminate(v15, v16);
  }
  adm::consume_unknown_exception_and_terminate((adm *)v14);
}

void sub_236CC85EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_236CC87D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_236CC8A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_236CC8BF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<adm::ConfigurationChangeRequest,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v4;

  if (*(_BYTE *)(a1 + 216))
  {
    v4 = (void **)(a1 + 192);
    std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a1 + 168);
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(_BYTE *)(a1 + 152))
    {
      v2 = *(void **)(a1 + 128);
      if (v2)
      {
        *(_QWORD *)(a1 + 136) = v2;
        operator delete(v2);
      }
    }
    std::__tree<std::string>::destroy(*(char **)(a1 + 16));
  }
  return a1;
}

void std::default_delete<adm::CustomPropertyManager>::operator()[abi:ne180100](uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;

  std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(*(_QWORD **)(a1 + 64));
  MEMORY[0x23B801004](a1 + 40);
  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;

  v3 = *(_QWORD **)(a1 + 24);
  if (v3 == (_QWORD *)a1)
  {
    v4 = 4;
    v3 = (_QWORD *)a1;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  JUMPOUT(0x23B801508);
}

void std::default_delete<adm::graph::NodeManager>::operator()[abi:ne180100](uint64_t *a1)
{
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  std::unique_ptr<adm::vp::ProxyFactory>::reset[abi:ne180100](a1, 0);
  JUMPOUT(0x23B801508);
}

void std::default_delete<adm::graph::GraphBuilder>::operator()[abi:ne180100](void **this)
{
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  adm::SystemConfiguration::~SystemConfiguration(this);
  JUMPOUT(0x23B801508);
}

void std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 216;
        std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_236CC8F54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  return this;
}

void sub_236CC8FF4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t logConfigChangeRequestBasicInfo(const adm::ConfigurationChangeRequest *a1)
{
  const adm::ConfigurationChangeRequest *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  const adm::ConfigurationChangeRequest *v6;
  const adm::ConfigurationChangeRequest *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::string *p_buf;
  size_t v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  std::string *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _QWORD v35[10];
  char v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[10];
  char v40;
  uint64_t v41;
  uint8_t v42[4];
  unint64_t v43;
  __int16 v44;
  std::string *v45;
  std::string buf;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38);
  v2 = (const adm::ConfigurationChangeRequest *)*((_QWORD *)a1 + 1);
  if (v2 != (const adm::ConfigurationChangeRequest *)((char *)a1 + 16))
  {
    do
    {
      v3 = *((char *)v2 + 55);
      if (v3 >= 0)
        v4 = (uint64_t)v2 + 32;
      else
        v4 = *((_QWORD *)v2 + 4);
      if (v3 >= 0)
        v5 = *((unsigned __int8 *)v2 + 55);
      else
        v5 = *((_QWORD *)v2 + 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, v4, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)",", 1);
      v6 = (const adm::ConfigurationChangeRequest *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(const adm::ConfigurationChangeRequest **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const adm::ConfigurationChangeRequest *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != (const adm::ConfigurationChangeRequest *)((char *)a1 + 16));
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v34);
  adm::config_policy::getActiveStreamInfo((adm::config_policy *)&v32, (const ConfigurationChangeRequest *)a1);
  v31 = v32;
  if (v33 != v32)
  {
    v9 = 0;
    if ((unint64_t)((v33 - v32) / 24) <= 1)
      v10 = 1;
    else
      v10 = (v33 - v32) / 24;
    v11 = v32 + 8;
    do
    {
      if (v9)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)", ", 2);
      v12 = *(v11 - 1);
      v13 = *(char *)(v12 + 23);
      if (v13 >= 0)
        v14 = *(v11 - 1);
      else
        v14 = *(_QWORD *)v12;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v12 + 23);
      else
        v15 = *(_QWORD *)(v12 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)" [", 2);
      std::optional<std::string>::value_or[abi:ne180100]<char const(&)[8]>(&buf, *v11 + 32, (char *)&unk_236CE4E1D);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v17 = strlen((const char *)p_buf);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)p_buf, v17);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"]", 1);
      ++v9;
      v11 += 3;
    }
    while (v10 != v9);
  }
  get_adm_log_object();
  v18 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)a1)
      v19 = "Activation";
    else
      v19 = "Deactivation";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
    _os_log_impl(&dword_236C84000, v18, OS_LOG_TYPE_DEFAULT, "- %s", (uint8_t *)&buf, 0xCu);
  }

  get_adm_log_object();
  v20 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&buf, (uint64_t)v39);
    v21 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v42 = 136315138;
    v43 = (unint64_t)v21;
    _os_log_impl(&dword_236C84000, v20, OS_LOG_TYPE_DEFAULT, "- semantics = %s", v42, 0xCu);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }

  get_adm_log_object();
  v22 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v25 = (char *)a1 + 168;
    v23 = *((_QWORD *)a1 + 21);
    v24 = *((_QWORD *)v25 + 1);
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(&buf, (uint64_t)v35);
    v26 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    *(_DWORD *)v42 = 134218242;
    v43 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
    v44 = 2080;
    v45 = v26;
    _os_log_impl(&dword_236C84000, v22, OS_LOG_TYPE_DEFAULT, "- num stream IDs = %lu { %s }", v42, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }

  if (v31)
    operator delete(v31);
  v27 = *MEMORY[0x24BEDB800];
  v34 = v27;
  v28 = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  *(_QWORD *)((char *)&v35[-1] + *(_QWORD *)(v27 - 24)) = v28;
  v29 = MEMORY[0x24BEDB848] + 16;
  v35[0] = MEMORY[0x24BEDB848] + 16;
  if (v36 < 0)
    operator delete((void *)v35[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x23B801478](&v37);
  v38 = v27;
  *(_QWORD *)((char *)&v39[-1] + *(_QWORD *)(v27 - 24)) = v28;
  v39[0] = v29;
  if (v40 < 0)
    operator delete((void *)v39[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x23B801478](&v41);
}

void sub_236CC94A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  void *v46;

  if (__p)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a13);
  std::ostringstream::~ostringstream((uint64_t)&a46);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<void ()(unsigned int)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void adm::graph::NodeHandlers::~NodeHandlers(adm::graph::NodeHandlers *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  adm::graph::NodeHandlers *v5;
  uint64_t v6;
  adm::graph::NodeHandlers *v7;
  uint64_t v8;
  adm::graph::NodeHandlers *v9;
  uint64_t v10;
  adm::graph::NodeHandlers *v11;
  uint64_t v12;
  adm::graph::NodeHandlers *v13;
  uint64_t v14;
  adm::graph::NodeHandlers *v15;
  uint64_t v16;
  adm::graph::NodeHandlers *v17;
  uint64_t v18;
  adm::graph::NodeHandlers *v19;
  uint64_t v20;
  adm::graph::NodeHandlers *v21;
  uint64_t v22;

  v2 = (char *)this + 288;
  v3 = (char *)*((_QWORD *)this + 39);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 35);
  if (v5 == (adm::graph::NodeHandlers *)((char *)this + 256))
  {
    v6 = 4;
    v5 = (adm::graph::NodeHandlers *)((char *)this + 256);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 31);
  if (v7 == (adm::graph::NodeHandlers *)((char *)this + 224))
  {
    v8 = 4;
    v7 = (adm::graph::NodeHandlers *)((char *)this + 224);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 27);
  if (v9 == (adm::graph::NodeHandlers *)((char *)this + 192))
  {
    v10 = 4;
    v9 = (adm::graph::NodeHandlers *)((char *)this + 192);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 23);
  if (v11 == (adm::graph::NodeHandlers *)((char *)this + 160))
  {
    v12 = 4;
    v11 = (adm::graph::NodeHandlers *)((char *)this + 160);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 19);
  if (v13 == (adm::graph::NodeHandlers *)((char *)this + 128))
  {
    v14 = 4;
    v13 = (adm::graph::NodeHandlers *)((char *)this + 128);
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
LABEL_31:
  v15 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 15);
  if (v15 == (adm::graph::NodeHandlers *)((char *)this + 96))
  {
    v16 = 4;
    v15 = (adm::graph::NodeHandlers *)((char *)this + 96);
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_36:
  v17 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 11);
  if (v17 == (adm::graph::NodeHandlers *)((char *)this + 64))
  {
    v18 = 4;
    v17 = (adm::graph::NodeHandlers *)((char *)this + 64);
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_41:
  v19 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 7);
  if (v19 == (adm::graph::NodeHandlers *)((char *)this + 32))
  {
    v20 = 4;
    v19 = (adm::graph::NodeHandlers *)((char *)this + 32);
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_46:
  v21 = (adm::graph::NodeHandlers *)*((_QWORD *)this + 3);
  if (v21 == this)
  {
    v22 = 4;
    v21 = this;
  }
  else
  {
    if (!v21)
      return;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
}

void caulk::__expected_detail::destroy<adm::graph::GraphDescription,(void *)0>(uint64_t a1)
{
  void **v2;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<adm::graph::DSPGraphConfiguration,adm::vp::UplinkConfiguration,adm::graph::ExclaveNodeConfiguration>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 80);
  v2 = (void **)(a1 + 56);
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::optional<adm::ConfigurationChangeRequest>::operator=[abi:ne180100]<adm::ConfigurationChangeRequest,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void **v17;
  __n128 *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v4 = *(unsigned __int8 *)(a1 + 216);
  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 16);
    std::__tree<std::string>::destroy(*(char **)(a1 + 16));
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v6 = (_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 16);
    *v5 = v7;
    v8 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    if (v8)
    {
      *(_QWORD *)(v7 + 16) = v5;
      *(_QWORD *)(a2 + 8) = v6;
      *v6 = 0;
      *(_QWORD *)(a2 + 24) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v5;
    }
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    v14 = *(_OWORD *)(a2 + 64);
    v15 = *(_OWORD *)(a2 + 80);
    v16 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
    *(_OWORD *)(a1 + 80) = v15;
    *(_OWORD *)(a1 + 96) = v16;
    *(_OWORD *)(a1 + 64) = v14;
    v17 = (void **)(a1 + 128);
    v18 = (__n128 *)(a2 + 128);
    if (*(unsigned __int8 *)(a1 + 152) == *(unsigned __int8 *)(a2 + 152))
    {
      if (*(_BYTE *)(a1 + 152))
        std::vector<char>::__move_assign((uint64_t)v17, v18);
    }
    else if (*(_BYTE *)(a1 + 152))
    {
      v19 = *v17;
      if (v19)
      {
        *(_QWORD *)(a1 + 136) = v19;
        operator delete(v19);
      }
      *(_BYTE *)(a1 + 152) = 0;
    }
    else
    {
      *v17 = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      v18->n128_u64[0] = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
      *(_BYTE *)(a1 + 152) = 1;
    }
    v26 = *(_DWORD *)(a2 + 160);
    v28 = (void **)(a1 + 168);
    v27 = *(_QWORD *)(a1 + 168);
    *(_BYTE *)(a1 + 164) = *(_BYTE *)(a2 + 164);
    *(_DWORD *)(a1 + 160) = v26;
    if (v27)
    {
      std::vector<std::__fs::filesystem::path>::__clear[abi:ne180100]((uint64_t *)(a1 + 168));
      operator delete(*v28);
      *v28 = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
    }
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    v29 = (void **)(a1 + 192);
    v30 = *(_QWORD *)(a1 + 192);
    if (v30)
    {
      v31 = *(_QWORD *)(a1 + 200);
      v32 = *(void **)(a1 + 192);
      if (v31 != v30)
      {
        do
        {
          v31 -= 216;
          std::__destroy_at[abi:ne180100]<adm::DeviceDescription,0>(v31);
        }
        while (v31 != v30);
        v32 = *v29;
      }
      *(_QWORD *)(a1 + 200) = v30;
      operator delete(v32);
      *v29 = 0;
      *(_QWORD *)(a1 + 200) = 0;
      *(_QWORD *)(a1 + 208) = 0;
    }
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v9 = (_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    v11 = a1 + 16;
    v12 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 24) = v12;
    if (v12)
    {
      *(_QWORD *)(v10 + 16) = v11;
      *(_QWORD *)(a2 + 8) = v9;
      *v9 = 0;
      *(_QWORD *)(a2 + 24) = 0;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = v11;
    }
    v20 = *(_OWORD *)(a2 + 64);
    v21 = *(_OWORD *)(a2 + 80);
    v22 = *(_OWORD *)(a2 + 96);
    v23 = *(_OWORD *)(a2 + 105);
    v24 = *(_OWORD *)(a2 + 32);
    v25 = *(_OWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 128) = 0;
    *(_OWORD *)(a1 + 32) = v24;
    *(_OWORD *)(a1 + 48) = v25;
    *(_OWORD *)(a1 + 105) = v23;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v22;
    *(_OWORD *)(a1 + 64) = v20;
    *(_BYTE *)(a1 + 152) = 0;
    if (*(_BYTE *)(a2 + 152))
    {
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
      *(_BYTE *)(a1 + 152) = 1;
    }
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a2 + 192) = 0;
    *(_QWORD *)(a2 + 200) = 0;
    *(_QWORD *)(a2 + 208) = 0;
    *(_BYTE *)(a1 + 216) = 1;
  }
  return a1;
}

void std::__optional_destruct_base<adm::ConfigurationChangeRequest,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  void **v3;

  if (*(_BYTE *)(a1 + 216))
  {
    v3 = (void **)(a1 + 192);
    std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)(a1 + 168);
    std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(_BYTE *)(a1 + 152))
    {
      v2 = *(void **)(a1 + 128);
      if (v2)
      {
        *(_QWORD *)(a1 + 136) = v2;
        operator delete(v2);
      }
    }
    std::__tree<std::string>::destroy(*(char **)(a1 + 16));
    *(_BYTE *)(a1 + 216) = 0;
  }
}

void adm::ConfigurationChangeRequest::~ConfigurationChangeRequest(adm::ConfigurationChangeRequest *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 192);
  std::vector<adm::DeviceDescription>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 168);
  std::vector<std::__fs::filesystem::path>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((_BYTE *)this + 152))
  {
    v2 = (void *)*((_QWORD *)this + 16);
    if (v2)
    {
      *((_QWORD *)this + 17) = v2;
      operator delete(v2);
    }
  }
  std::__tree<std::string>::destroy(*((char **)this + 2));
}

void std::vector<adm::DeviceConfiguration>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<adm::DeviceConfiguration>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[DSPProcessor adaptToConfigurationChange:withCallbacks:error:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,adm::graph::DSPGraphConfiguration,std::__variant_detail::_Trait::vp::UplinkConfiguration,adm::ExclaveNodeConfiguration> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *cat;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  std::string __p;
  std::error_code v9;
  char v10;
  uint8_t buf[4];
  std::string *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  adm::graph::NodeManager::createNode((uint64_t)&v9, *(_QWORD *)(**(_QWORD **)*a1 + 296), *(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 8) + 56, a2);
  if (v10)
  {
    std::shared_ptr<adm::graph::DSPNode>::operator=[abi:ne180100](*(_QWORD **)(v2 + 16), *(uint64_t *)&v9.__val_, (uint64_t)v9.__cat_);
LABEL_5:
    cat = (std::__shared_weak_count *)v9.__cat_;
    if (v9.__cat_)
    {
      v5 = (unint64_t *)&v9.__cat_[1];
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
    return;
  }
  get_adm_log_object();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    std::error_code::message(&__p, &v9);
    v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v12 = v7;
    _os_log_error_impl(&dword_236C84000, v3, OS_LOG_TYPE_ERROR, "Failed to create node with error %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (v10)
    goto LABEL_5;
}

void sub_236CC9D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a14 && a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[DSPProcessor adaptToConfigurationChange:withCallbacks:error:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,adm::graph::DSPGraphConfiguration,std::__variant_detail::_Trait::vp::UplinkConfiguration,adm::ExclaveNodeConfiguration> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *cat;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  std::string __p;
  std::error_code v9;
  char v10;
  uint8_t buf[4];
  std::string *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  adm::graph::NodeManager::createNode((uint64_t)&v9, *(_QWORD *)(**(_QWORD **)*a1 + 296), *(void ***)(*a1 + 8), *(_QWORD *)(*a1 + 8) + 56, a2);
  if (v10)
  {
    std::shared_ptr<adm::graph::DSPNode>::operator=[abi:ne180100](*(_QWORD **)(v2 + 16), *(uint64_t *)&v9.__val_, (uint64_t)v9.__cat_);
LABEL_5:
    cat = (std::__shared_weak_count *)v9.__cat_;
    if (v9.__cat_)
    {
      v5 = (unint64_t *)&v9.__cat_[1];
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
    return;
  }
  get_adm_log_object();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    std::error_code::message(&__p, &v9);
    v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v12 = v7;
    _os_log_error_impl(&dword_236C84000, v3, OS_LOG_TYPE_ERROR, "Failed to create node with error %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (v10)
    goto LABEL_5;
}

void sub_236CC9EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a14 && a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[DSPProcessor adaptToConfigurationChange:withCallbacks:error:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,adm::graph::DSPGraphConfiguration,std::__variant_detail::_Trait::vp::UplinkConfiguration,adm::ExclaveNodeConfiguration> const&>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  NSObject *v3;
  std::__shared_weak_count *cat;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  std::string __p;
  std::error_code v9;
  char v10;
  uint8_t buf[4];
  std::string *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  adm::graph::NodeManager::createNode((uint64_t)&v9, *(_QWORD *)(**(_QWORD **)*a1 + 296), *(_QWORD *)(*a1 + 8), *(_QWORD *)(*a1 + 8) + 56, a2);
  if (v10)
  {
    std::shared_ptr<adm::graph::DSPNode>::operator=[abi:ne180100](*(_QWORD **)(v2 + 16), *(uint64_t *)&v9.__val_, (uint64_t)v9.__cat_);
LABEL_5:
    cat = (std::__shared_weak_count *)v9.__cat_;
    if (v9.__cat_)
    {
      v5 = (unint64_t *)&v9.__cat_[1];
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))cat->__on_zero_shared)(cat);
        std::__shared_weak_count::__release_weak(cat);
      }
    }
    return;
  }
  get_adm_log_object();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    std::error_code::message(&__p, &v9);
    v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v12 = v7;
    _os_log_error_impl(&dword_236C84000, v3, OS_LOG_TYPE_ERROR, "Failed to create node with error %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }

  if (v10)
    goto LABEL_5;
}

void sub_236CCA04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;

  if (a14 && a13)
  {
    p_shared_owners = (unint64_t *)&a13->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))a13->__on_zero_shared)(a13);
      std::__shared_weak_count::__release_weak(a13);
    }
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  size_t v9;

  if (a4)
  {
    v4 = result;
    if (a4 >= 0x666666666666667)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(a4);
    v7 = result;
    *v4 = result;
    v4[1] = result;
    v4[2] = &result[5 * v8];
    v9 = a3 - (_QWORD)a2;
    if (v9)
      result = memmove(result, a2, v9);
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_236CCA12C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void adm::NegotiateResponse::~NegotiateResponse(adm::NegotiateResponse *this)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)((char *)this + 48);
  std::vector<adm::DeviceConfiguration>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

void caulk::__expected_detail::destroy<adm::IOContextConfiguration,(void *)0>(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

char *std::vector<adm::DeviceConfiguration>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::DeviceConfiguration>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<adm::DeviceConfiguration>,adm::DeviceConfiguration*,adm::DeviceConfiguration*,adm::DeviceConfiguration*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  std::string *v14;
  std::string *v15;

  v4 = this;
  v14 = this;
  v15 = this;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v15;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v9 = *(__int128 *)((char *)v6 + 24);
      v10 = *(__int128 *)((char *)v6 + 40);
      *(_OWORD *)((char *)v4[2].__r_.__value_.__r.__words + 5) = *(__int128 *)((char *)v6 + 53);
      *(_OWORD *)&v4[1].__r_.__value_.__r.__words[2] = v10;
      *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v9;
      v6 = (__int128 *)((char *)v6 + 72);
      v4 = v8 + 3;
      v15 = v8 + 3;
    }
    while (v6 != a3);
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::DeviceConfiguration>,adm::DeviceConfiguration*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_236CCA2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::DeviceConfiguration>,adm::DeviceConfiguration*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<adm::DeviceConfiguration>,adm::DeviceConfiguration*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 49) < 0)
        operator delete(*(void **)(v3 - 72));
      v3 -= 72;
    }
  }
  return a1;
}

void sub_236CCA4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void adm::utility::getTemporaryPath(std::string *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  std::string *v7;

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "temporaryDirectory");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "path");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (id)objc_msgSend(v4, "mutableCopy");

  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  LODWORD(v4) = objc_msgSend(v5, "isWritableFileAtPath:", v6);

  if ((_DWORD)v4)
  {
    v7 = (std::string *)objc_msgSend(objc_retainAutorelease(v6), "UTF8String");
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(this, &v7);
  }
  else
  {
    this->__r_.__value_.__r.__words[0] = 0;
    this->__r_.__value_.__l.__size_ = 0;
    this->__r_.__value_.__r.__words[2] = 0;
    std::string::append[abi:ne180100]<char const*,0>(this, (std::string *)"/Library/Preferences/Audio/", (std::string *)"");
  }

}

void sub_236CCA5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;

  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);

  _Unwind_Resume(a1);
}

void *adm::utility::readDefaultsDebugDumpEnablement(adm::utility *this)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", CFSTR("com.apple.coreaudio"));
  objc_msgSend(v1, "objectForKey:", CFSTR("adm_enable_debug_dump"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    v2 = (void *)objc_msgSend(v1, "BOOLForKey:", CFSTR("adm_enable_debug_dump"));

  return v2;
}

void sub_236CCA6A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void adm::utility::writeNSObjectToDisk(adm::utility *this, objc_object *a2, NSString *a3)
{
  adm::utility *v4;
  objc_object *v5;
  void *v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  std::string *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  char v19;
  id v20;
  NSObject *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  id v25;
  id v26;
  uint8_t buf[4];
  std::string *v28;
  std::string v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = this;
  v5 = a2;
  if (v4)
  {
    v26 = 0;
    objc_msgSend(MEMORY[0x24BDD1608], "dataWithJSONObject:options:error:", v4, 1, &v26);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v26;
    if (!v6)
    {
      get_adm_log_object();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v29.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_error_impl(&dword_236C84000, v8, OS_LOG_TYPE_ERROR, "Failed to serialize the input NSObjct into json: %@", (uint8_t *)&v29, 0xCu);
      }
      goto LABEL_21;
    }
    v8 = objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithData:encoding:", v6, 4);
    v9 = (void *)objc_opt_new();
    objc_msgSend(v9, "setDateFormat:", CFSTR("yyyy_MM_dd_HH_mm_ss_SSS"));
    objc_msgSend(MEMORY[0x24BDBCE60], "date");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringFromDate:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    adm::utility::getTemporaryPath(&v29);
    get_adm_log_object();
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v23 = &v29;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v28 = v23;
      _os_log_debug_impl(&dword_236C84000, v12, OS_LOG_TYPE_DEBUG, "ADM temp debug directory is %s", buf, 0xCu);
    }

    v13 = (void *)MEMORY[0x24BDD17C8];
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v29;
    else
      v14 = (std::string *)v29.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "stringWithFormat:", CFSTR("%@/%@_%@.txt"), v15, v5, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "createFileAtPath:contents:attributes:", v16, 0, 0);

    if (v18)
    {
      v25 = v7;
      v19 = -[NSObject writeToFile:atomically:encoding:error:](v8, "writeToFile:atomically:encoding:error:", v16, 0, 4, &v25);
      v20 = v25;

      if ((v19 & 1) != 0)
      {
LABEL_18:

        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);

        v7 = v20;
LABEL_21:

        goto LABEL_22;
      }
      get_adm_log_object();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v22 = &v29;
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v28 = v22;
        _os_log_error_impl(&dword_236C84000, v21, OS_LOG_TYPE_ERROR, "ADM failed to write json file at temp debug directory %s", buf, 0xCu);
      }
    }
    else
    {
      get_adm_log_object();
      v21 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v24 = &v29;
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v24 = (std::string *)v29.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v28 = v24;
        _os_log_error_impl(&dword_236C84000, v21, OS_LOG_TYPE_ERROR, "ADM failed to create file at temp debug directory %s", buf, 0xCu);
      }
      v20 = v7;
    }

    goto LABEL_18;
  }
LABEL_22:

}

void sub_236CCAA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void adm::graph::Node::createRegisterClientHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createBeginProcessingHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createBeginCycleHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createClientIOHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createEndCycleHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createEndProcessingHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createUnregisterClientHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createGetLatencyHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createGetRequiredInputSamplesForOutputSamplesHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::Node::createGetExpectedOutputSamplesForInputSamplesHandler_(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = 0;
}

void adm::graph::HostNode::~HostNode(adm::graph::HostNode *this)
{
  void **v2;

  *(_QWORD *)this = &off_25083EB68;
  *((_QWORD *)this + 16) = &unk_25083EC18;
  v2 = (void **)((char *)this + 320);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 296);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 272);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 248);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 224);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 200);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 176);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 152);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  adm::graph::Node::~Node((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = &off_25083EB68;
  *((_QWORD *)this + 16) = &unk_25083EC18;
  v2 = (void **)((char *)this + 320);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 296);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 272);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 248);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 224);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 200);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 176);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 152);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  adm::graph::Node::~Node((void **)this);
  JUMPOUT(0x23B801508);
}

uint64_t adm::graph::HostNode::createRegisterClientHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *((_QWORD *)this + 17);
  if (result
    && ((v5 = *((_QWORD *)this + 19),
         v6 = *((_QWORD *)this + 20),
         result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (v7 = 1) : (v7 = result), (v7 & 1) != 0))
  {
    v9 = *((_QWORD *)this + 17);
    v8 = *((_QWORD *)this + 18);
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *a2 = &off_25083F2A8;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createBeginProcessingHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *((_QWORD *)this + 17);
  if (result
    && ((v5 = *((_QWORD *)this + 22),
         v6 = *((_QWORD *)this + 23),
         result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (v7 = 1) : (v7 = result), (v7 & 1) != 0))
  {
    v9 = *((_QWORD *)this + 17);
    v8 = *((_QWORD *)this + 18);
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *a2 = &off_25083F480;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createBeginCycleHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *((_QWORD *)this + 17);
  if (result
    && ((v5 = *((_QWORD *)this + 25),
         v6 = *((_QWORD *)this + 26),
         result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (v7 = 1) : (v7 = result), (v7 & 1) != 0))
  {
    v9 = *((_QWORD *)this + 17);
    v8 = *((_QWORD *)this + 18);
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *a2 = &off_25083F508;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createClientIOHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = *((_QWORD *)this + 17);
  if (result
    && (*((_QWORD *)this + 28) == *((_QWORD *)this + 29)
      ? (v5 = *((_QWORD *)this + 31) != *((_QWORD *)this + 32))
      : (v5 = 1),
        ((result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result), v5) || (result & 1) != 0)
     && ((result | v5) & 1) != 0))
  {
    v7 = *((_QWORD *)this + 17);
    v6 = *((_QWORD *)this + 18);
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 16);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *a2 = &off_25083F5A0;
    a2[1] = v7;
    a2[2] = v6;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createEndCycleHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *((_QWORD *)this + 17);
  if (result
    && ((v5 = *((_QWORD *)this + 34),
         v6 = *((_QWORD *)this + 35),
         result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (v7 = 1) : (v7 = result), (v7 & 1) != 0))
  {
    v9 = *((_QWORD *)this + 17);
    v8 = *((_QWORD *)this + 18);
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *a2 = &off_25083F628;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createEndProcessingHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *((_QWORD *)this + 17);
  if (result
    && ((v5 = *((_QWORD *)this + 37),
         v6 = *((_QWORD *)this + 38),
         result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (v7 = 1) : (v7 = result), (v7 & 1) != 0))
  {
    v9 = *((_QWORD *)this + 17);
    v8 = *((_QWORD *)this + 18);
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *a2 = &off_25083F6B0;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createUnregisterClientHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = *((_QWORD *)this + 17);
  if (result
    && ((v5 = *((_QWORD *)this + 40),
         v6 = *((_QWORD *)this + 41),
         result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result),
         v5 != v6)
     || (result & 1) != 0)
    && (v5 != v6 ? (v7 = 1) : (v7 = result), (v7 & 1) != 0))
  {
    v9 = *((_QWORD *)this + 17);
    v8 = *((_QWORD *)this + 18);
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *a2 = &off_25083F738;
    a2[1] = v9;
    a2[2] = v8;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createGetLatencyHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = *((_QWORD *)this + 17);
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result), (result & 1) != 0))
  {
    v6 = *((_QWORD *)this + 17);
    v5 = *((_QWORD *)this + 18);
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 16);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *a2 = &off_25083F7C0;
    a2[1] = v6;
    a2[2] = v5;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createGetRequiredInputSamplesForOutputSamplesHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = *((_QWORD *)this + 17);
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 160))(result), (result & 1) != 0))
  {
    v6 = *((_QWORD *)this + 17);
    v5 = *((_QWORD *)this + 18);
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 16);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *a2 = &off_25083F858;
    a2[1] = v6;
    a2[2] = v5;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::createGetExpectedOutputSamplesForInputSamplesHandler_@<X0>(adm::graph::HostNode *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = *((_QWORD *)this + 17);
  if (result && (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 176))(result), (result & 1) != 0))
  {
    v6 = *((_QWORD *)this + 17);
    v5 = *((_QWORD *)this + 18);
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 16);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    *a2 = &off_25083F8F0;
    a2[1] = v6;
    a2[2] = v5;
    a2[3] = a2;
  }
  else
  {
    a2[3] = 0;
  }
  return result;
}

uint64_t adm::graph::HostNode::kernelWillRegisterClient(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(this + 152);
  for (i = *(_QWORD *)(this + 160); v2 != i; v2 += 40)
  {
    v6 = a2;
    v5 = *(_QWORD *)(v2 + 32);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    this = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v6);
  }
  return this;
}

uint64_t adm::graph::HostNode::kernelWillBeginProcessing(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(this + 176);
  for (i = *(_QWORD *)(this + 184); v2 != i; v2 += 40)
  {
    v6 = a2;
    v5 = *(_QWORD *)(v2 + 32);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    this = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v6);
  }
  return this;
}

uint64_t adm::graph::HostNode::kernelWillBeginCycle(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(result + 200);
  for (i = *(_QWORD *)(result + 208); v3 != i; v3 += 40)
  {
    v8 = a2;
    v7 = *(_QWORD *)(v3 + 32);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v7 + 48))(v7, &v8, a3);
  }
  return result;
}

uint64_t adm::graph::HostNode::kernelWillPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t i;

  v7 = *(_QWORD *)(result + 224);
  for (i = *(_QWORD *)(result + 232); v7 != i; v7 += 40)
    result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(_QWORD *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t adm::graph::HostNode::kernelDidPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t i;

  v7 = *(_QWORD *)(result + 248);
  for (i = *(_QWORD *)(result + 256); v7 != i; v7 += 40)
    result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(_QWORD *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t adm::graph::HostNode::kernelDidEndCycle(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(result + 272);
  for (i = *(_QWORD *)(result + 280); v3 != i; v3 += 40)
  {
    v8 = a2;
    v7 = *(_QWORD *)(v3 + 32);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(_QWORD *)v7 + 48))(v7, &v8, a3);
  }
  return result;
}

uint64_t adm::graph::HostNode::kernelDidEndProcessing(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(this + 296);
  for (i = *(_QWORD *)(this + 304); v2 != i; v2 += 40)
  {
    v6 = a2;
    v5 = *(_QWORD *)(v2 + 32);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    this = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v6);
  }
  return this;
}

uint64_t adm::graph::HostNode::kernelDidUnregisterClient(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(this + 320);
  for (i = *(_QWORD *)(this + 328); v2 != i; v2 += 40)
  {
    v6 = a2;
    v5 = *(_QWORD *)(v2 + 32);
    if (!v5)
      std::__throw_bad_function_call[abi:ne180100]();
    this = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, &v6);
  }
  return this;
}

void `non-virtual thunk to'adm::graph::HostNode::~HostNode(adm::graph::HostNode *this)
{
  void **v2;
  char *v3;
  void **v4;

  *((_QWORD *)this - 16) = &off_25083EB68;
  v2 = (void **)((char *)this - 128);
  *(_QWORD *)this = &unk_25083EC18;
  v3 = (char *)this + 8;
  v4 = (void **)((char *)this + 192);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 168);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 144);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 120);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 96);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 24);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  adm::graph::Node::~Node(v2);
}

{
  void **v2;
  char *v3;
  void **v4;

  *((_QWORD *)this - 16) = &off_25083EB68;
  v2 = (void **)((char *)this - 128);
  *(_QWORD *)this = &unk_25083EC18;
  v3 = (char *)this + 8;
  v4 = (void **)((char *)this + 192);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 168);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 144);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 120);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 96);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 24);
  std::vector<std::tuple<unsigned int,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  adm::graph::Node::~Node(v2);
  JUMPOUT(0x23B801508);
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelWillRegisterClient(adm::graph::HostNode *this, int a2)
{
  return adm::graph::HostNode::kernelWillRegisterClient((uint64_t)this - 128, a2);
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelWillBeginProcessing(adm::graph::HostNode *this, int a2)
{
  return adm::graph::HostNode::kernelWillBeginProcessing((uint64_t)this - 128, a2);
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelWillBeginCycle(uint64_t a1, int a2, uint64_t a3)
{
  return adm::graph::HostNode::kernelWillBeginCycle(a1 - 128, a2, a3);
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelWillPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t i;

  v7 = *(_QWORD *)(result + 96);
  for (i = *(_QWORD *)(result + 104); v7 != i; v7 += 40)
    result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(_QWORD *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelDidPerformClientIO(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t i;

  v7 = *(_QWORD *)(result + 120);
  for (i = *(_QWORD *)(result + 128); v7 != i; v7 += 40)
    result = std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(*(_QWORD *)(v7 + 32), a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelDidEndCycle(uint64_t a1, int a2, uint64_t a3)
{
  return adm::graph::HostNode::kernelDidEndCycle(a1 - 128, a2, a3);
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelDidEndProcessing(adm::graph::HostNode *this, int a2)
{
  return adm::graph::HostNode::kernelDidEndProcessing((uint64_t)this - 128, a2);
}

uint64_t `non-virtual thunk to'adm::graph::HostNode::kernelDidUnregisterClient(adm::graph::HostNode *this, int a2)
{
  return adm::graph::HostNode::kernelDidUnregisterClient((uint64_t)this - 128, a2);
}

uint64_t std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v12 = a2;
  v11 = a4;
  v9 = a6;
  v10 = a5;
  v8 = a7;
  if (!a1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v12, a3, &v11, &v10, &v9, &v8);
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F8F0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F8F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F8F0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE7__cloneEPNS0_6__baseISH_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F8F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEEclEOySG_(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *adm_log_object;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::string *v17;
  __int128 v18;
  uint64_t i;
  _BYTE v20[8];
  uint64_t *v21;
  std::string v22;
  __int128 v23;
  std::string::size_type v24;
  _BYTE v25[8];
  uint64_t *v26[2];
  char v27;
  uint8_t buf[16];
  uint8_t *v29;
  char v30;
  _BYTE v31[16];
  uint64_t v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "handler_name");
    v29 = buf;
    v30 = 1;
    v32 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v31, &adm::graph::HandlerName<(adm::graph::HandlerType)9>);
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v25, (uint64_t)buf, 2);
    v26[1] = (uint64_t *)v25;
    v27 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v20, (uint64_t)v25, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v22, (uint64_t)v20, 4);
    v17 = std::string::insert(&v22, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v24 = v17->__r_.__value_.__r.__words[2];
    v23 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v20);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v21, v20[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v25);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v26, v25[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v31[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v31[i + 8], v31[i]);
    }
    _os_crash();
    __break(1u);
  }
  v9 = v8 + 1;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  atomic_load(v8 + 2);
  if ((*(unsigned int (**)(unint64_t *))(*v8 + 176))(v8))
  {
    v11 = (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t))(*v8 + 184))(v8, *a2, a3);
  }
  else
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "HandlerType::GetExpectedOutputSamplesForInputSamples is not supported", buf, 2u);
    }
    v11 = 0;
  }
  do
    v13 = __ldaxr(v9);
  while (__stlxr(v13 - 1, v9));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v11;
}

void sub_236CCBC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE9EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE9EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyRyEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE9EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

uint64_t nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>(uint64_t a1, char **a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)a1 = 3;
  *(_QWORD *)(a1 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::create<std::string,char const* const&>(*a2);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant(a1);
  return a1;
}

void adm::graph::demangle(adm::graph *this, unint64_t a2)
{
  char v2;
  void **v4;
  char *v5;
  char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v11;
  uint64_t __dst;
  _BYTE v13[15];
  char v14;
  size_t outlen;
  int status;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)(a2 & 0x7FFFFFFFFFFFFFFFLL));
  status = 0;
  outlen = 0;
  if (v11 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = __cxa_demangle((const char *)v4, 0, &outlen, &status);
  v6 = v5;
  v7 = status;
  if (status)
  {
    v8 = 0;
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  std::string::basic_string[abi:ne180100](&__dst, v5, outlen - 1);
  v8 = __dst;
  v17[0] = *(_QWORD *)v13;
  *(_QWORD *)((char *)v17 + 7) = *(_QWORD *)&v13[7];
  v2 = v14;
  if (v6)
LABEL_6:
    free(v6);
LABEL_7:
  if (v7)
  {
    std::string::basic_string[abi:ne180100]<0>(this, "???");
  }
  else
  {
    v9 = v17[0];
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = v9;
    *(_QWORD *)((char *)this + 15) = *(_QWORD *)((char *)v17 + 7);
    *((_BYTE *)this + 23) = v2;
  }
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_236CCC43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (v15)
    free(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F858;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F858;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F858;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F858;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEEclEOy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *adm_log_object;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string *v15;
  __int128 v16;
  uint64_t i;
  _BYTE v18[8];
  uint64_t *v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;
  _BYTE v23[8];
  uint64_t *v24[2];
  char v25;
  uint8_t buf[16];
  uint8_t *v27;
  char v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "handler_name");
    v27 = buf;
    v28 = 1;
    v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v29, &adm::graph::HandlerName<(adm::graph::HandlerType)8>);
    v31 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)buf, 2);
    v24[1] = (uint64_t *)v23;
    v25 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v18, (uint64_t)v23, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v20, (uint64_t)v18, 4);
    v15 = std::string::insert(&v20, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v22 = v15->__r_.__value_.__r.__words[2];
    v21 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v24, v23[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v29[i + 8], v29[i]);
    }
    _os_crash();
    __break(1u);
  }
  v7 = v6 + 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  atomic_load(v6 + 2);
  if ((*(unsigned int (**)(unint64_t *))(*v6 + 160))(v6))
  {
    v9 = (*(uint64_t (**)(unint64_t *, _QWORD))(*v6 + 168))(v6, *a2);
  }
  else
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "HandlerType::GetRequiredInputSamplesForOutputSamples is not supported", buf, 2u);
    }
    v9 = 0;
  }
  do
    v11 = __ldaxr(v7);
  while (__stlxr(v11 - 1, v7));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v9;
}

void sub_236CCC840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE8EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE8EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFyyEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE8EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F7C0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F7C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F7C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F7C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

uint64_t _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEEclEv(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *adm_log_object;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string *v13;
  __int128 v14;
  uint64_t i;
  _BYTE v16[8];
  uint64_t *v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  _BYTE v21[8];
  uint64_t *v22[2];
  char v23;
  uint8_t buf[16];
  uint8_t *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0 || (v4 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)buf, "handler_name");
    v25 = buf;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v27, &adm::graph::HandlerName<(adm::graph::HandlerType)7>);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)buf, 2);
    v22[1] = (uint64_t *)v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v21, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v18, (uint64_t)v16, 4);
    v13 = std::string::insert(&v18, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20 = v13->__r_.__value_.__r.__words[2];
    v19 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v22, v21[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[i + 8], v27[i]);
    }
    _os_crash();
    __break(1u);
  }
  v5 = v4 + 1;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  atomic_load(v4 + 2);
  if ((*(unsigned int (**)(unint64_t *))(*v4 + 144))(v4))
  {
    v7 = (*(uint64_t (**)(unint64_t *))(*v4 + 152))(v4);
  }
  else
  {
    adm_log_object = get_adm_log_object();
    if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "HandlerType::GetLatency is not supported", buf, 2u);
    }
    v7 = 0;
  }
  do
    v9 = __ldaxr(v5);
  while (__stlxr(v9 - 1, v5));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v7;
}

void sub_236CCD24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE7EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE7EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFxvEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE7EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F738;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F738;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F738;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F738;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t i;
  _BYTE v16[8];
  uint64_t *v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  _BYTE v21[8];
  uint64_t *v22[2];
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v24, "handler_name");
    v25 = v24;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v27, &adm::graph::HandlerName<(adm::graph::HandlerType)6>);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)v24, 2);
    v22[1] = (uint64_t *)v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v21, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v18, (uint64_t)v16, 4);
    v13 = std::string::insert(&v18, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20 = v13->__r_.__value_.__r.__words[2];
    v19 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v22, v21[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[i + 8], v27[i]);
    }
    _os_crash();
    __break(1u);
  }
  v7 = v6 + 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = atomic_load(v6 + 2);
  if ((*(unsigned int (**)(unint64_t *))(*v6 + 128))(v6))
    (*(void (**)(unint64_t *, _QWORD))(*v6 + 136))(v6, *a2);
  (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v9 + 72))(v9, *a2);
  do
    v10 = __ldaxr(v7);
  while (__stlxr(v10 - 1, v7));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_236CCDC28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE6EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE6EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE6EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F6B0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F6B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F6B0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F6B0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t i;
  _BYTE v16[8];
  uint64_t *v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  _BYTE v21[8];
  uint64_t *v22[2];
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v24, "handler_name");
    v25 = v24;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v27, &adm::graph::HandlerName<(adm::graph::HandlerType)5>);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)v24, 2);
    v22[1] = (uint64_t *)v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v21, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v18, (uint64_t)v16, 4);
    v13 = std::string::insert(&v18, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20 = v13->__r_.__value_.__r.__words[2];
    v19 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v22, v21[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[i + 8], v27[i]);
    }
    _os_crash();
    __break(1u);
  }
  v7 = v6 + 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = atomic_load(v6 + 2);
  if ((*(unsigned int (**)(unint64_t *))(*v6 + 112))(v6))
    (*(void (**)(unint64_t *, _QWORD))(*v6 + 120))(v6, *a2);
  (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v9 + 64))(v9, *a2);
  do
    v10 = __ldaxr(v7);
  while (__stlxr(v10 - 1, v7));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_236CCE5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE5EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE5EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE5EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F628;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F628;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F628;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F628;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEEclEOjSJ_(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  uint64_t i;
  _BYTE v18[8];
  uint64_t *v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;
  _BYTE v23[8];
  uint64_t *v24[2];
  char v25;
  _BYTE v26[16];
  _BYTE *v27;
  char v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v26, "handler_name");
    v27 = v26;
    v28 = 1;
    v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v29, &adm::graph::HandlerName<(adm::graph::HandlerType)4>);
    v31 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)v26, 2);
    v24[1] = (uint64_t *)v23;
    v25 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v18, (uint64_t)v23, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v20, (uint64_t)v18, 4);
    v15 = std::string::insert(&v20, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v22 = v15->__r_.__value_.__r.__words[2];
    v21 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v24, v23[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v29[i + 8], v29[i]);
    }
    _os_crash();
    __break(1u);
  }
  v9 = v8 + 1;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = atomic_load(v8 + 2);
  if ((*(unsigned int (**)(unint64_t *))(*v8 + 96))(v8))
    (*(void (**)(unint64_t *, _QWORD, uint64_t))(*v8 + 104))(v8, *a2, a3);
  (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 56))(v11, *a2, a3);
  do
    v12 = __ldaxr(v9);
  while (__stlxr(v12 - 1, v9));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_236CCEFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v47;

  if (a28 < 0)
    operator delete(__p);
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE4EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE4EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE4EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F5A0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F5A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F5A0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE7__cloneEPNS0_6__baseISM_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F5A0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EEclEOjSJ_OmOSL_SP_SQ_(uint64_t a1, unsigned int *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  uint64_t i;
  _BYTE v26[8];
  uint64_t *v27;
  std::string v28;
  __int128 v29;
  std::string::size_type v30;
  _BYTE v31[8];
  uint64_t *v32[2];
  char v33;
  _BYTE v34[16];
  _BYTE *v35;
  char v36;
  _BYTE v37[16];
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (v15 = std::__shared_weak_count::lock(v8)) == 0 || (v16 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v34, "handler_name");
    v35 = v34;
    v36 = 1;
    v38 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v37, &adm::graph::HandlerName<(adm::graph::HandlerType)3>);
    v39 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v31, (uint64_t)v34, 2);
    v32[1] = (uint64_t *)v31;
    v33 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v26, (uint64_t)v31, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v28, (uint64_t)v26, 4);
    v23 = std::string::insert(&v28, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v30 = v23->__r_.__value_.__r.__words[2];
    v29 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v26);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v27, v26[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v31);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v32, v31[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v37[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v37[i + 8], v37[i]);
    }
    _os_crash();
    __break(1u);
  }
  v17 = v16 + 1;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = atomic_load(v16 + 2);
  (*(void (**)(unint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v19 + 40))(v19, *a2, a3, *a4, *a5, *a6, *a7);
  if ((*(unsigned int (**)(unint64_t *))(*v16 + 80))(v16))
    (*(void (**)(unint64_t *, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*v16 + 88))(v16, *a2, a3, *a4, *a5, *a6, *a7);
  (*(void (**)(unint64_t, _QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v19 + 48))(v19, *a2, a3, *a4, *a5, *a6, *a7);
  do
    v20 = __ldaxr(v17);
  while (__stlxr(v20 - 1, v17));
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_236CCFA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v42;

  if (a25 < 0)
    operator delete(__p);
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_236CCFB04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,__int16 *a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,int a42,__int128 buf,__int128 *p_buf,uint64_t a45,uint64_t a46,int a47,uint64_t a48,char a49,__int128 a50)
{
  _QWORD *v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v54;
  _QWORD *v55;
  NSObject *adm_log_object;
  void *v57;
  NSObject *v58;
  _BOOL4 v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  int v63;
  int v64;
  uint64_t v65;
  void **p_p;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  if (a2)
  {
    do
      v54 = __ldaxr(v51);
    while (__stlxr(v54 - 1, v51));
    if (a2 == 3)
    {
      v55 = __cxa_begin_catch(a1);
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_FAULT))
      {
        v60 = (*(uint64_t (**)(_QWORD *))(*v55 + 16))(v55);
        v61 = v55 + 2;
        if (*((char *)v55 + 39) < 0)
          v61 = (_QWORD *)*v61;
        v62 = v55 + 6;
        if (*((char *)v55 + 71) < 0)
          v62 = (_QWORD *)*v62;
        v63 = *((_DWORD *)v55 + 10);
        v64 = *((_DWORD *)v55 + 2);
        LODWORD(buf) = 136316162;
        *(_QWORD *)((char *)&buf + 4) = v60;
        WORD6(buf) = 2080;
        *(_QWORD *)((char *)&buf + 14) = v61;
        HIWORD(p_buf) = 2080;
        a45 = (uint64_t)v62;
        LOWORD(a46) = 1024;
        *(_DWORD *)((char *)&a46 + 2) = v63;
        HIWORD(a46) = 1024;
        a47 = v64;
        _os_log_fault_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_FAULT, "DSPGraph exception: %s, file %s, function %s, line %d, osstatus %d", (uint8_t *)&buf, 0x2Cu);
      }
    }
    else
    {
      v57 = __cxa_begin_catch(a1);
      v58 = get_adm_log_object();
      v59 = os_log_type_enabled(v58, OS_LOG_TYPE_FAULT);
      if (a2 == 2)
      {
        if (v59)
        {
          v65 = (*(uint64_t (**)(void *))(*(_QWORD *)v57 + 16))(v57);
          LODWORD(buf) = 136315138;
          *(_QWORD *)((char *)&buf + 4) = v65;
          _os_log_fault_impl(&dword_236C84000, v58, OS_LOG_TYPE_FAULT, "exception in handler: %s", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v59)
      {
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)&a32, "handler_name");
        a36 = &a32;
        a37 = 1;
        a40 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)&a38, &adm::graph::HandlerName<(adm::graph::HandlerType)3>);
        a41 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&buf, (uint64_t)&a32, 2);
        p_buf = &buf;
        LOBYTE(a45) = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[19],char [19],0>((uint64_t)&a23, "internal_node_type");
        a25 = &a23;
        a26 = 1;
        adm::graph::demangle((adm::graph *)&a9, *(_QWORD *)(*(_QWORD *)(*v50 - 8) + 8));
        a29 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<std::string,std::string,0>((uint64_t)&a27, (uint64_t)&a9);
        a30 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a46, (uint64_t)&a23, 2);
        a48 = (uint64_t)&a46;
        a49 = 1;
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)&a15, (uint64_t)&buf, 2);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&__p, (uint64_t)&a15, 4);
        if (a22 >= 0)
          p_p = (void **)&__p;
        else
          p_p = __p;
        *(_DWORD *)(v52 - 128) = 136315138;
        *(_QWORD *)((char *)&a50 + 4) = p_p;
        _os_log_fault_impl(&dword_236C84000, v58, OS_LOG_TYPE_FAULT, "exception in handler: %s", (uint8_t *)(v52 - 128), 0xCu);
        if (a22 < 0)
          operator delete(__p);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a15);
        nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&a16, a15);
        for (i = 0; i != -64; i -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a46 + i);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a47 + i), *((unsigned __int8 *)&a46 + i));
        }
        for (j = 0; j != -64; j -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a27 + j);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a28 + j), *((unsigned __int8 *)&a27 + j));
        }
        if (a14 < 0)
          operator delete(a9);
        for (k = 0; k != -64; k -= 32)
        {
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a38 + k);
          nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a39 + k), *((unsigned __int8 *)&a38 + k));
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x236CCF860);
  }
  JUMPOUT(0x236CCFAFCLL);
}

void sub_236CCFE5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;
  uint64_t i;
  uint64_t j;
  uint64_t k;

  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a15);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(v36 + 8), a15);
  for (i = 0; i != -64; i -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)(&a36 + i + 32));
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)(&a36 + i + 40), *(&a36 + i + 32));
  }
  for (j = 0; j != -64; j -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a24 + j);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a25 + j), *((unsigned __int8 *)&a24 + j));
  }
  if (a14 < 0)
    operator delete(__p);
  for (k = 0; k != -64; k -= 32)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&a32 + k);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)((char *)&a33 + k), *((unsigned __int8 *)&a32 + k));
  }
  __cxa_end_catch();
  JUMPOUT(0x236CCFAC8);
}

void sub_236CCFFE0()
{
  JUMPOUT(0x236CCFACCLL);
}

void sub_236CCFFEC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x236CCFAFCLL);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE3EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE3EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEmPNSG_11Proc_StreamEmSL_EE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE3EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F508;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F508;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F508;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7__cloneEPNS0_6__baseISK_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F508;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEEclEOjSJ_(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  uint64_t i;
  _BYTE v18[8];
  uint64_t *v19;
  std::string v20;
  __int128 v21;
  std::string::size_type v22;
  _BYTE v23[8];
  uint64_t *v24[2];
  char v25;
  _BYTE v26[16];
  _BYTE *v27;
  char v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v7 = std::__shared_weak_count::lock(v4)) == 0 || (v8 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v26, "handler_name");
    v27 = v26;
    v28 = 1;
    v30 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v29, &adm::graph::HandlerName<(adm::graph::HandlerType)2>);
    v31 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v23, (uint64_t)v26, 2);
    v24[1] = (uint64_t *)v23;
    v25 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v18, (uint64_t)v23, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v20, (uint64_t)v18, 4);
    v15 = std::string::insert(&v20, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v22 = v15->__r_.__value_.__r.__words[2];
    v21 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v18);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v19, v18[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v23);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v24, v23[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v29[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v29[i + 8], v29[i]);
    }
    _os_crash();
    __break(1u);
  }
  v9 = v8 + 1;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = atomic_load(v8 + 2);
  (*(void (**)(unint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 32))(v11, *a2, a3);
  if (((*(uint64_t (**)(unint64_t *))(*v8 + 64))(v8) & 1) != 0)
    (*(void (**)(unint64_t *, _QWORD, uint64_t))(*v8 + 72))(v8, *a2, a3);
  do
    v12 = __ldaxr(v9);
  while (__stlxr(v12 - 1, v9));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_236CD03D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE2EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE2EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjRKN4AMCP15Proc_Cycle_InfoEEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE2EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F480;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F480;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F480;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F480;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t i;
  _BYTE v16[8];
  uint64_t *v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  _BYTE v21[8];
  uint64_t *v22[2];
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v24, "handler_name");
    v25 = v24;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v27, &adm::graph::HandlerName<(adm::graph::HandlerType)1>);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)v24, 2);
    v22[1] = (uint64_t *)v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v21, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v18, (uint64_t)v16, 4);
    v13 = std::string::insert(&v18, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20 = v13->__r_.__value_.__r.__words[2];
    v19 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v22, v21[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[i + 8], v27[i]);
    }
    _os_crash();
    __break(1u);
  }
  v7 = v6 + 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = atomic_load(v6 + 2);
  (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v9 + 24))(v9, *a2);
  if (((*(uint64_t (**)(unint64_t *))(*v6 + 48))(v6) & 1) != 0)
    (*(void (**)(unint64_t *, _QWORD))(*v6 + 56))(v6, *a2);
  do
    v10 = __ldaxr(v7);
  while (__stlxr(v10 - 1, v7));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_236CD0D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE1EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE1EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE1EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

_QWORD *_ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_25083F2A8;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_25083F2A8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x23B801508);
}

_QWORD *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_25083F2A8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_25083F2A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEEclEOj(uint64_t a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  __int128 v14;
  uint64_t i;
  _BYTE v16[8];
  uint64_t *v17;
  std::string v18;
  __int128 v19;
  std::string::size_type v20;
  _BYTE v21[8];
  uint64_t *v22[2];
  char v23;
  _BYTE v24[16];
  _BYTE *v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v5 = std::__shared_weak_count::lock(v3)) == 0 || (v6 = *(unint64_t **)(a1 + 8)) == 0)
  {
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const(&)[13],char [13],0>((uint64_t)v24, "handler_name");
    v25 = v24;
    v26 = 1;
    v28 = nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json<char const* const&,char const*,0>((uint64_t)v27, &adm::graph::HandlerName<(adm::graph::HandlerType)0>);
    v29 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v21, (uint64_t)v24, 2);
    v22[1] = (uint64_t *)v21;
    v23 = 1;
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::basic_json((uint64_t)v16, (uint64_t)v21, 1);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::dump(&v18, (uint64_t)v16, 4);
    v13 = std::string::insert(&v18, 0, "Audio_MCP invoked stale handler: ", 0x21uLL);
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20 = v13->__r_.__value_.__r.__words[2];
    v19 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v16);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v17, v16[0]);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)v21);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v22, v21[0]);
    for (i = 0; i != -64; i -= 32)
    {
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::assert_invariant((uint64_t)&v27[i]);
      nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v27[i + 8], v27[i]);
    }
    _os_crash();
    __break(1u);
  }
  v7 = v6 + 1;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  v9 = atomic_load(v6 + 2);
  (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, *a2);
  if (((*(uint64_t (**)(unint64_t *))(*v6 + 32))(v6) & 1) != 0)
    (*(void (**)(unint64_t *, _QWORD))(*v6 + 40))(v6, *a2);
  do
    v10 = __ldaxr(v7);
  while (__stlxr(v10 - 1, v7));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_236CD176C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v49;

  if (a30 < 0)
    operator delete(__p);
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v49 = __ldaxr(p_shared_owners);
    while (__stlxr(v49 - 1, p_shared_owners));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE0EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK3adm5graph8HostNode22createHandlerFunction_ILNS3_11HandlerTypeE0EEENS3_7HandlerIXT_EE8FunctionEvEUlDpOT_E_NS_9allocatorISD_EEFvjEE11target_typeEv()
{
  return &_ZTIZNK3adm5graph8HostNode22createHandlerFunction_ILNS0_11HandlerTypeE0EEENS0_7HandlerIXT_EE8FunctionEvEUlDpOT_E_;
}

void adm::graph::Node::getInputSemantics(adm::graph::Node *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 72);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        v10 = *(_QWORD **)this;
        v11 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        else
          v15 = 0;
        v16 = (_QWORD *)(v14 + 8 * v11);
        *v16 = v7;
        v9 = v16 + 1;
        if (v6 != v10)
        {
          do
          {
            v17 = *--v6;
            *--v16 = v17;
          }
          while (v6 != v10);
          v6 = *(_QWORD **)this;
        }
        *(_QWORD *)this = v16;
        *((_QWORD *)this + 1) = v9;
        *((_QWORD *)this + 2) = v14 + 8 * v15;
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = v7;
        v9 = v6 + 1;
      }
      *((_QWORD *)this + 1) = v9;
      v4 += 8;
      v6 = v9;
    }
    while (v4 != a3);
  }
}

void sub_236CD1ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::getOutputSemantics(adm::graph::Node *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != a3)
  {
    v4 = a2;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)v4 + 72);
      v8 = *((_QWORD *)this + 2);
      if ((unint64_t)v6 >= v8)
      {
        v10 = *(_QWORD **)this;
        v11 = ((uint64_t)v6 - *(_QWORD *)this) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        else
          v15 = 0;
        v16 = (_QWORD *)(v14 + 8 * v11);
        *v16 = v7;
        v9 = v16 + 1;
        if (v6 != v10)
        {
          do
          {
            v17 = *--v6;
            *--v16 = v17;
          }
          while (v6 != v10);
          v6 = *(_QWORD **)this;
        }
        *(_QWORD *)this = v16;
        *((_QWORD *)this + 1) = v9;
        *((_QWORD *)this + 2) = v14 + 8 * v15;
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v6 = v7;
        v9 = v6 + 1;
      }
      *((_QWORD *)this + 1) = v9;
      v4 += 8;
      v6 = v9;
    }
    while (v4 != a3);
  }
}

void sub_236CD200C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::getDescription(std::string *this, uint64_t a2)
{
  std::string *v4;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    *this = *(std::string *)(a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 32);
  v4 = (std::string *)((char *)this + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 40);
    this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 56);
  }
}

void sub_236CD20AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::getTerminalDescriptions(int64x2_t *this, uint64_t a2)
{
  char v3;
  uint64_t v4;
  __int128 ***v5;
  __int128 **v6;
  __int128 **v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int64x2_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  int64x2_t *v47;
  std::string v48;
  _OWORD v49[3];
  __int128 v50;
  int v51;
  std::string __p;
  char v53;
  char v54;
  unint64_t v55;
  int64x2_t v56;
  unint64_t v57;
  int64x2_t *v58;
  _QWORD v59[3];

  v3 = 0;
  v4 = 0;
  v59[1] = *MEMORY[0x24BDAC8D0];
  this->i64[0] = 0;
  this->i64[1] = 0;
  this[1].i64[0] = 0;
  v47 = this + 1;
  v45 = a2 + 64;
  v59[0] = 0x100000000;
  do
  {
    v46 = v3;
    v5 = (__int128 ***)(v45 + 24 * *((unsigned int *)v59 + v4));
    v7 = *v5;
    v6 = v5[1];
    while (v7 != v6)
    {
      v8 = *v7;
      if (*((char *)*v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v48.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v9;
      }
      LODWORD(v49[0]) = *((_DWORD *)v8 + 6);
      v11 = v8[2];
      v10 = v8[3];
      v12 = *((_QWORD *)v8 + 9);
      *((_QWORD *)&v49[2] + 1) = *((_QWORD *)v8 + 8);
      *(_OWORD *)((char *)v49 + 8) = v11;
      *(_OWORD *)((char *)&v49[1] + 8) = v10;
      *(_QWORD *)&v50 = v12;
      *(_QWORD *)&v10 = *((_QWORD *)v8 + 10);
      v51 = *((_DWORD *)v8 + 22);
      *((_QWORD *)&v50 + 1) = v10;
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, v8 + 6);
      v54 = *((_BYTE *)v8 + 128);
      v13 = this->u64[1];
      v14 = this[1].u64[0];
      if (v13 >= v14)
      {
        v21 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v13 - this->i64[0]) >> 3);
        v22 = v21 + 1;
        if (v21 + 1 > 0x1E1E1E1E1E1E1E1)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v23 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v14 - this->i64[0]) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0xF0F0F0F0F0F0F0)
          v24 = 0x1E1E1E1E1E1E1E1;
        else
          v24 = v22;
        v58 = v47;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<adm::graph::TerminalDescription>>(v24);
        else
          v25 = 0;
        v26 = v24 + 136 * v21;
        v55 = v24;
        v56.i64[0] = v26;
        v57 = v24 + 136 * v25;
        v27 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        *(_QWORD *)(v26 + 16) = *((_QWORD *)&v48.__r_.__value_.__l + 2);
        *(_OWORD *)v26 = v27;
        memset(&v48, 0, sizeof(v48));
        *(_OWORD *)(v26 + 24) = v49[0];
        v28 = v49[1];
        v29 = v49[2];
        v30 = v50;
        *(_DWORD *)(v26 + 88) = v51;
        *(_OWORD *)(v26 + 72) = v30;
        *(_OWORD *)(v26 + 56) = v29;
        *(_OWORD *)(v26 + 40) = v28;
        *(_BYTE *)(v26 + 96) = 0;
        *(_BYTE *)(v26 + 120) = 0;
        if (v53)
        {
          v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v26 + 112) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v26 + 96) = v31;
          memset(&__p, 0, sizeof(__p));
          *(_BYTE *)(v26 + 120) = 1;
        }
        *(_BYTE *)(v24 + 136 * v21 + 128) = v54;
        v20 = v26 + 136;
        v56.i64[1] = v26 + 136;
        v33 = this->i64[0];
        v32 = this->u64[1];
        v34 = v56.i64[0];
        if (v32 == this->i64[0])
        {
          v43 = vdupq_n_s64(v32);
        }
        else
        {
          v35 = 0;
          do
          {
            v36 = v34 + v35;
            v37 = v32 + v35;
            v38 = *(_OWORD *)(v32 + v35 - 136);
            *(_QWORD *)(v36 - 120) = *(_QWORD *)(v32 + v35 - 120);
            *(_OWORD *)(v36 - 136) = v38;
            *(_QWORD *)(v37 - 128) = 0;
            *(_QWORD *)(v37 - 120) = 0;
            *(_QWORD *)(v37 - 136) = 0;
            *(_OWORD *)(v36 - 112) = *(_OWORD *)(v32 + v35 - 112);
            v39 = *(_OWORD *)(v32 + v35 - 96);
            v40 = *(_OWORD *)(v32 + v35 - 80);
            v41 = *(_OWORD *)(v32 + v35 - 64);
            *(_DWORD *)(v36 - 48) = *(_DWORD *)(v32 + v35 - 48);
            *(_OWORD *)(v36 - 80) = v40;
            *(_OWORD *)(v36 - 64) = v41;
            *(_OWORD *)(v36 - 96) = v39;
            *(_BYTE *)(v34 + v35 - 40) = 0;
            *(_BYTE *)(v36 - 16) = 0;
            if (*(_BYTE *)(v32 + v35 - 16))
            {
              v42 = *(_OWORD *)(v37 - 40);
              *(_QWORD *)(v34 + v35 - 24) = *(_QWORD *)(v37 - 24);
              *(_OWORD *)(v34 + v35 - 40) = v42;
              *(_QWORD *)(v37 - 32) = 0;
              *(_QWORD *)(v37 - 24) = 0;
              *(_QWORD *)(v37 - 40) = 0;
              *(_BYTE *)(v36 - 16) = 1;
            }
            *(_BYTE *)(v36 - 8) = *(_BYTE *)(v37 - 8);
            v35 -= 136;
          }
          while (v32 + v35 != v33);
          v34 += v35;
          v43 = *this;
          v20 = v56.u64[1];
        }
        this->i64[0] = v34;
        this->i64[1] = v20;
        v56 = v43;
        v44 = this[1].u64[0];
        this[1].i64[0] = v57;
        v57 = v44;
        v55 = v43.i64[0];
        std::__split_buffer<adm::graph::TerminalDescription>::~__split_buffer((uint64_t)&v55);
      }
      else
      {
        v15 = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)&v48.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v15;
        memset(&v48, 0, sizeof(v48));
        *(_OWORD *)(v13 + 24) = v49[0];
        v17 = v49[2];
        v16 = v50;
        v18 = v51;
        *(_OWORD *)(v13 + 40) = v49[1];
        *(_DWORD *)(v13 + 88) = v18;
        *(_OWORD *)(v13 + 72) = v16;
        *(_OWORD *)(v13 + 56) = v17;
        *(_BYTE *)(v13 + 96) = 0;
        *(_BYTE *)(v13 + 120) = 0;
        if (v53)
        {
          v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 112) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)(v13 + 96) = v19;
          memset(&__p, 0, sizeof(__p));
          *(_BYTE *)(v13 + 120) = 1;
        }
        *(_BYTE *)(v13 + 128) = v54;
        v20 = v13 + 136;
      }
      this->i64[1] = v20;
      if (v53 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      ++v7;
    }
    v3 = 1;
    v4 = 1;
  }
  while ((v46 & 1) == 0);
}

void sub_236CD24B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  adm::graph::TerminalDescription::~TerminalDescription((void **)va);
  std::vector<adm::graph::TerminalDescription>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void adm::graph::Node::getIOFormats_(void **a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _OWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = a2 + 24 * a3;
  v4 = *(uint64_t **)(v3 + 64);
  v5 = *(uint64_t **)(v3 + 72);
  if (v4 != v5)
  {
    v7 = 0;
    do
    {
      v8 = *v4;
      v23 = *(_OWORD *)(*v4 + 32);
      v24 = *(_OWORD *)(*v4 + 48);
      v25 = *(_QWORD *)(*v4 + 64);
      v9 = a1[2];
      if (v7 >= (_OWORD *)v9)
      {
        v12 = *a1;
        v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
        v14 = v13 + 1;
        if (v13 + 1 > 0x666666666666666)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v15 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - (_BYTE *)v12) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x333333333333333)
          v16 = 0x666666666666666;
        else
          v16 = v14;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v16);
        else
          v17 = 0;
        v18 = v16 + 40 * v13;
        *(_OWORD *)v18 = v23;
        *(_OWORD *)(v18 + 16) = v24;
        *(_QWORD *)(v18 + 32) = v25;
        if (v7 == v12)
        {
          v22 = v16 + 40 * v13;
        }
        else
        {
          v19 = v16 + 40 * v13;
          do
          {
            v20 = *(_OWORD *)((char *)v7 - 40);
            v21 = *(_OWORD *)((char *)v7 - 24);
            v22 = v19 - 40;
            *(_QWORD *)(v19 - 8) = *((_QWORD *)v7 - 1);
            *(_OWORD *)(v19 - 24) = v21;
            *(_OWORD *)(v19 - 40) = v20;
            v7 = (_OWORD *)((char *)v7 - 40);
            v19 -= 40;
          }
          while (v7 != v12);
        }
        v7 = (_OWORD *)(v18 + 40);
        *a1 = (void *)v22;
        a1[1] = (void *)(v18 + 40);
        a1[2] = (void *)(v16 + 40 * v17);
        if (v12)
          operator delete(v12);
      }
      else
      {
        v10 = *(_OWORD *)(v8 + 32);
        v11 = *(_OWORD *)(v8 + 48);
        *((_QWORD *)v7 + 4) = *(_QWORD *)(v8 + 64);
        *v7 = v10;
        v7[1] = v11;
        v7 = (_OWORD *)((char *)v7 + 40);
      }
      a1[1] = v7;
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_236CD2680(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void adm::graph::Node::vendTerminal(adm::graph::Node *this, const adm::graph::TerminalDescription *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string *v8;
  __int128 v9;
  std::string::size_type v10;
  std::string::size_type v11;
  char *v12;
  char *v13;
  std::string **v14;
  _QWORD *v15;
  std::string **v16;
  unint64_t v17;
  char **v18;
  _QWORD *v19;
  char *v20;
  std::string **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  std::string **v27;
  char *v28;
  std::string *v29;
  std::string **v30;
  uint64_t v31;
  uint64_t v32;
  const std::exception *v33;
  void *exception;
  __n128 v35;
  const std::exception *v36;
  void *v37;
  __n128 v38;
  const std::exception *v39;
  void *v40;
  __int128 v41;
  uint64_t v42;
  std::string v43;
  uint64_t v44;
  std::string v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  std::string __p;
  const char *v51;
  const char *v52;
  int v53;
  std::runtime_error v54;

  v4 = *((_DWORD *)a2 + 20);
  if (v4 == -1)
  {
    std::operator+<char>();
    MEMORY[0x23B8011FC](&v54, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    adm::log_exception((adm *)&v54, v33);
    exception = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v45, &v54);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25083EDC0;
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_25083EDE8;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v45);
    v51 = "void adm::graph::Node::vendTerminal(const TerminalDescription &)";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Node.cpp";
    v53 = 85;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
    *(_OWORD *)&v43.__r_.__value_.__r.__words[1] = v41;
    v44 = v42;
    v41 = 0uLL;
    v42 = 0;
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)off_25083F080;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&__p, (uint64_t)&v43);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, (uint64_t)&__p);
  }
  if (v4 >= 0x40)
  {
    std::to_string(&v43, v4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v45, "Terminal index", &v43);
    v35 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, &v45, " exceeds the limit");
    MEMORY[0x23B8011FC](&v54, &__p, v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    adm::log_exception((adm *)&v54, v36);
    v37 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v45, &v54);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25083EDC0;
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_25083EDE8;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v45);
    v51 = "void adm::graph::Node::vendTerminal(const TerminalDescription &)";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Node.cpp";
    v53 = 90;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
    *(_OWORD *)&v43.__r_.__value_.__r.__words[1] = v41;
    v44 = v42;
    v41 = 0uLL;
    v42 = 0;
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)off_25083F080;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&__p, (uint64_t)&v43);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v37, (uint64_t)&__p);
  }
  v5 = *((unsigned int *)a2 + 6);
  v6 = *((_QWORD *)this + v5 + 14);
  if ((v6 & (1 << v4)) != 0)
  {
    std::to_string(&v43, v4);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v45, "a terminal at index ", &v43);
    v38 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, &v45, " already exists");
    MEMORY[0x23B8011FC](&v54, &__p, v38);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    adm::log_exception((adm *)&v54, v39);
    v40 = __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v45, &v54);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = -1;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25083EDC0;
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_25083EDE8;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v45);
    v51 = "void adm::graph::Node::vendTerminal(const TerminalDescription &)";
    v52 = "/Library/Caches/com.apple.xbs/Sources/AudioDSPManager/Source/graph/Node.cpp";
    v53 = 101;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
    *(_OWORD *)&v43.__r_.__value_.__r.__words[1] = v41;
    v44 = v42;
    v41 = 0uLL;
    v42 = 0;
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)off_25083F080;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>((uint64_t)&__p, (uint64_t)&v43);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v40, (uint64_t)&__p);
  }
  *((_QWORD *)this + v5 + 14) = v6 | (1 << v4);
  v7 = (std::string *)operator new();
  v8 = v7;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
  LODWORD(v8[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)&v8[1].__r_.__value_.__r.__words[1] = *((_OWORD *)a2 + 2);
  *(_OWORD *)&v8[2].__r_.__value_.__l.__data_ = v9;
  v10 = *((_QWORD *)a2 + 9);
  v8[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  v8[3].__r_.__value_.__r.__words[0] = v10;
  v11 = *((_QWORD *)a2 + 10);
  LODWORD(v8[3].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 22);
  v8[3].__r_.__value_.__l.__size_ = v11;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v8 + 4, (__int128 *)a2 + 6);
  v12 = (char *)this + 64;
  v8[5].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 128);
  v13 = (char *)this + 24 * v5 + 64;
  v16 = (std::string **)*((_QWORD *)v13 + 1);
  v15 = v13 + 8;
  v14 = v16;
  v18 = (char **)(v15 + 1);
  v17 = v15[1];
  if ((unint64_t)v16 >= v17)
  {
    v20 = &v12[24 * v5];
    v21 = *(std::string ***)v20;
    v22 = ((uint64_t)v14 - *(_QWORD *)v20) >> 3;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v24 = v17 - (_QWORD)v21;
    if (v24 >> 2 > v23)
      v23 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v25 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      if (v25 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v26 = (char *)operator new(8 * v25);
    }
    else
    {
      v26 = 0;
    }
    v27 = (std::string **)&v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v8;
    v19 = v27 + 1;
    if (v14 == v21)
    {
      *(_QWORD *)v20 = v27;
      *v15 = v19;
      *v18 = v28;
    }
    else
    {
      do
      {
        v29 = *--v14;
        *v14 = 0;
        *--v27 = v29;
      }
      while (v14 != v21);
      v14 = *(std::string ***)v20;
      v30 = (std::string **)*v15;
      *(_QWORD *)v20 = v27;
      *v15 = v19;
      *v18 = v28;
      while (v30 != v14)
      {
        v32 = (uint64_t)*--v30;
        v31 = v32;
        *v30 = 0;
        if (v32)
          std::default_delete<adm::graph::Terminal>::operator()[abi:ne180100](v31);
      }
    }
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v14 = v8;
    v19 = v14 + 1;
  }
  *v15 = v19;
}

void sub_236CD2C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *__p, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::runtime_error a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::runtime_error a25,void *a26,uint64_t a27)
{
  void *v27;
  int v28;
  uint64_t v29;

  if (__p)
    operator delete(__p);
  if (a9)
    operator delete(a9);
  a26 = &unk_25083EE08;
  if (a27 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a27 + 32))(a27))
    a27 = 0;
  std::runtime_error::~runtime_error(&a25);
  a20 = &unk_25083EE08;
  if (a21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a21 + 32))(a21))
    a21 = 0;
  std::runtime_error::~runtime_error(&a19);
  if (v28)
    __cxa_free_exception(v27);
  std::runtime_error::~runtime_error((std::runtime_error *)(v29 - 96));
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_25083ED90;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 16) = &unk_25083EE08;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_25083ECF0;
  *(_QWORD *)(a1 + 16) = &unk_25083ED28;
  *(_QWORD *)(a1 + 56) = &unk_25083ED60;
  boost::exception_detail::copy_boost_exception(a1 + 16, a2 + 16);
  return a1;
}

{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(a1 + 56) = &unk_25083ED90;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &unk_25083EE08;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)a1 = &off_25083ECF0;
  *(_QWORD *)(a1 + 16) = &unk_25083ED28;
  *(_QWORD *)(a1 + 56) = &unk_25083ED60;
  return a1;
}

void sub_236CD2F50(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)(boost::exception_detail::error_info_container_impl *__hidden, const char *);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;

  v4 = operator new();
  *(_QWORD *)v4 = off_25083F080;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(&v14, v4);
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
  {
    v5 = operator new();
    v6 = &off_25083F148;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = &off_25083F148;
    *(_QWORD *)(v5 + 8) = v5 + 16;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
      v6 = *(uint64_t (***)(boost::exception_detail::error_info_container_impl *__hidden, const char *))v5;
    }
    *(_QWORD *)(a1 + 24) = v5;
    ((void (*)(uint64_t))v6[3])(v5);
  }
  v12 = v14;
  v13 = v15;
  if (v15)
  {
    v8 = v15 + 2;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v5 + 16))(v5, &v12, &v11);
  boost::detail::shared_count::~shared_count(&v13);
  boost::detail::shared_count::~shared_count(&v15);
  return a1;
}

void sub_236CD30C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned int *a14)
{
  unsigned int **v14;

  boost::detail::shared_count::~shared_count(v14);
  boost::detail::shared_count::~shared_count(&a14);
  _Unwind_Resume(a1);
}

void sub_236CD316C(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x23B801508);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone(uint64_t a1)
{
  uint64_t v2;
  std::runtime_error *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new();
  *(_QWORD *)(v2 + 56) = &unk_25083ED90;
  v3 = std::runtime_error::runtime_error((std::runtime_error *)v2, (const std::runtime_error *)a1);
  v3[1].__vftable = (std::runtime_error_vtbl *)&unk_25083EE08;
  v4 = (uint64_t)&v3[1];
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v2 + 24) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  *(_OWORD *)(v2 + 32) = *(_OWORD *)(a1 + 32);
  *(_DWORD *)(v2 + 48) = *(_DWORD *)(a1 + 48);
  *(_QWORD *)v2 = &off_25083ECF0;
  *(_QWORD *)(v2 + 16) = &unk_25083ED28;
  *(_QWORD *)(v2 + 56) = &unk_25083ED60;
  boost::exception_detail::copy_boost_exception(v4, a1 + 16);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_236CD32C8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  MEMORY[0x23B801508]();
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_236CD3340(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(a1 - 16);
}

uint64_t `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone(_QWORD *a1)
{
  return boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone((uint64_t)a1 + *(_QWORD *)(*a1 - 24));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(_QWORD *a1)
{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow((uint64_t)a1 + *(_QWORD *)(*a1 - 32));
}

void `virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 40);
  *((_QWORD *)v1 + 2) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

{
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)a1 + *(_QWORD *)(*a1 - 40));
}

void boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x23B801508);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(_QWORD *a1)
{
  std::runtime_error *v1;

  v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_25083EE08;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error(v1);
}

void `non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(a1 - 16);
}

uint64_t adm::graph::Node::createHandlers(adm::graph::Node *this, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
}

void sub_236CD35DC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v11 = (_QWORD *)v1[35];
  if (v11 == v9)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
    v9 = (_QWORD *)v1[35];
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v12))(v9);
LABEL_6:
  v13 = (_QWORD *)v1[31];
  if (v13 == v8)
  {
    v14 = 4;
    v13 = v8;
  }
  else
  {
    if (!v13)
      goto LABEL_11;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_11:
  v15 = (_QWORD *)v1[27];
  if (v15 == v7)
  {
    v16 = 4;
    v15 = v7;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_16:
  v17 = (_QWORD *)v1[23];
  if (v17 == v6)
  {
    v18 = 4;
    v17 = v6;
  }
  else
  {
    if (!v17)
      goto LABEL_21;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_21:
  v19 = (_QWORD *)v1[19];
  if (v19 == v5)
  {
    v20 = 4;
    v19 = v5;
  }
  else
  {
    if (!v19)
      goto LABEL_26;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_26:
  v21 = (_QWORD *)v1[15];
  if (v21 == v4)
  {
    v22 = 4;
    v21 = v4;
  }
  else
  {
    if (!v21)
      goto LABEL_31;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_31:
  v23 = (_QWORD *)v1[11];
  if (v23 == v3)
  {
    v24 = 4;
    v23 = v3;
  }
  else
  {
    if (!v23)
      goto LABEL_36;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_36:
  v25 = (_QWORD *)v1[7];
  if (v25 == v2)
  {
    v26 = 4;
    v25 = v2;
  }
  else
  {
    if (!v25)
      goto LABEL_41;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_41:
  v27 = (_QWORD *)v1[3];
  if (v27 == v1)
  {
    v28 = 4;
  }
  else
  {
    if (!v27)
      goto LABEL_46;
    v28 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v28))(v1);
LABEL_46:
  _Unwind_Resume(exception_object);
}

void sub_236CD37A4()
{
  JUMPOUT(0x236CD3714);
}

void sub_236CD37AC()
{
  JUMPOUT(0x236CD3740);
}

void sub_236CD37B4()
{
  JUMPOUT(0x236CD376CLL);
}

_QWORD *std::shared_ptr<adm::graph::Kernel>::operator=[abi:ne180100]<adm::graph::Kernel,std::default_delete<adm::graph::Kernel>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &off_25083F210;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

unint64_t *adm::utility::synchronized_pointer<adm::graph::KernelHostInterface>::operator=(unint64_t *a1, unint64_t a2)
{
  atomic_store(a2, a1 + 1);
  while (atomic_load(a1))
    sched_yield();
  return a1;
}

void adm::graph::KernelConfiguration::~KernelConfiguration(adm::graph::KernelConfiguration *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v7 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
  }
}

void std::__shared_ptr_pointer<adm::graph::Kernel  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x23B801508);
}

uint64_t std::__shared_ptr_pointer<adm::graph::Kernel  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<adm::graph::Kernel  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN3adm5graph6KernelEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t adm::graph::VoiceProcessorKernelConfiguration<adm::vp::Proxy<adm::vp::UplinkConfiguration,adm::vp::detail::UplinkProxyImplementation>>::~VoiceProcessorKernelConfiguration(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  std::shared_ptr<nlohmann::detail::output_adapter_protocol<char>>::~shared_ptr[abi:ne180100](a1 + 144);
  v8 = (void **)(a1 + 120);
  std::vector<std::shared_ptr<adm::graph::KernelProperty>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void *adm::graph::DSPNode::getDSP(adm::graph::DSPNode *this)
{
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  v2 = (const void *)*((_QWORD *)this + 17);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

_QWORD *adm::graph::HostNode::addClientIOCallback(_QWORD *result, uint64_t a2, int a3)
{
  _QWORD *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  int *v8;
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int *v28;
  int *v29;
  unint64_t v30;
  int *v31;
  _DWORD *v32;
  unint64_t v33;
  _QWORD *v34;

  v4 = result;
  if (a3)
  {
    if (a3 == 1)
    {
      do
        v5 = __ldaxr((unsigned int *)&adm::graph::generateCallbackID(adm::graph::CallbackType)::gCallbackID);
      while (__stlxr(v5 + 256, (unsigned int *)&adm::graph::generateCallbackID(adm::graph::CallbackType)::gCallbackID));
      v6 = (v5 | 4) + 256;
      v8 = (int *)result[32];
      v7 = result[33];
      if ((unint64_t)v8 < v7)
      {
        *v8 = v6;
        v9 = v8 + 10;
        result = (_QWORD *)std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v8 + 2), a2);
LABEL_27:
        v4[32] = v9;
        return result;
      }
      v15 = result[31];
      v16 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v8 - v15) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 <= 0x666666666666666)
      {
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v15) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x333333333333333)
          v19 = 0x666666666666666;
        else
          v19 = v17;
        v34 = v4 + 33;
        if (v19)
          v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v19);
        else
          v20 = 0;
        v28 = (int *)(v19 + 40 * v16);
        v30 = v19;
        v31 = v28;
        v33 = v19 + 40 * v20;
        *v28 = v6;
        std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v28 + 2), a2);
        v32 = v28 + 10;
        std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__swap_out_circular_buffer(v4 + 31, &v30);
        v9 = (_DWORD *)v4[32];
        result = (_QWORD *)std::__split_buffer<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::~__split_buffer((uint64_t)&v30);
        goto LABEL_27;
      }
LABEL_32:
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    do
      v10 = __ldaxr((unsigned int *)&adm::graph::generateCallbackID(adm::graph::CallbackType)::gCallbackID);
    while (__stlxr(v10 + 256, (unsigned int *)&adm::graph::generateCallbackID(adm::graph::CallbackType)::gCallbackID));
    v11 = (v10 | 3) + 256;
    v12 = result[30];
    v13 = (int *)result[29];
    if ((unint64_t)v13 >= v12)
    {
      v21 = result + 28;
      v22 = result[28];
      v23 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v13 - v22) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0x666666666666666)
        goto LABEL_32;
      v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v22) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x333333333333333)
        v26 = 0x666666666666666;
      else
        v26 = v24;
      v34 = v4 + 30;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v26);
      else
        v27 = 0;
      v29 = (int *)(v26 + 40 * v23);
      v30 = v26;
      v31 = v29;
      v33 = v26 + 40 * v27;
      *v29 = v11;
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v29 + 2), a2);
      v32 = v29 + 10;
      std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__swap_out_circular_buffer(v21, &v30);
      v14 = (_DWORD *)v4[29];
      result = (_QWORD *)std::__split_buffer<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *v13 = v11;
      v14 = v13 + 10;
      result = (_QWORD *)std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)(v13 + 2), a2);
    }
    v4[29] = v14;
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t *std::vector<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v7 = *(_DWORD *)(v4 - 40);
    v4 -= 40;
    *(_DWORD *)(v6 - 40) = v7;
    v6 -= 40;
    result = (uint64_t *)std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100](v6 + 8, v4 + 8);
  }
  a2[1] = v6;
  v8 = *v3;
  *v3 = v6;
  a2[1] = v8;
  v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<unsigned int,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(_QWORD **)(v2 - 8);
    if (v4 == (_QWORD *)(v2 - 32))
    {
      v4 = (_QWORD *)(v2 - 32);
      v5 = 4;
LABEL_7:
      (*(void (**)(void))(*v4 + 8 * v5))();
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      if (v4)
      {
        v5 = 5;
        goto LABEL_7;
      }
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__value_func<void ()(CA::PropertyAddress)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t adm::CustomPropertyManager::CustomPropertyManager(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  dispatch_object_t object;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(CA::PropertyAddress)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  v3 = dispatch_queue_create("com.apple.coreaudio.ADMCustomPropertyManager", 0);
  object = v3;
  std::__function::__value_func<void ()(CA::PropertyAddress)>::__value_func[abi:ne180100](a1, (uint64_t)v9);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    dispatch_retain(v3);
  MEMORY[0x23B800FF8](a1 + 40, &object);
  v4 = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  do
  {
    atomic_store(HIDWORD(adm::CustomPropertyManager::kParameterMappings[v4 + 5]), (unsigned int *)std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 56), adm::CustomPropertyManager::kParameterMappings[v4 + 5], &adm::CustomPropertyManager::kParameterMappings[v4 + 5])+ 8);
    v4 += 6;
  }
  while (v4 != 24);
  if (object)
    dispatch_release(object);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
    goto LABEL_11;
  }
  if (v10)
  {
    v6 = 5;
LABEL_11:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

void sub_236CD40E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  _QWORD *v13;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;

  v15 = v13[4];
  if (v15)
    dispatch_release(v15);
  v16 = (_QWORD *)v13[3];
  if (v16 == v13)
  {
    v17 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_8;
    v17 = 5;
    v13 = (_QWORD *)v13[3];
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v17))(v13);
LABEL_8:
  if (object)
    dispatch_release(object);
  v18 = a13;
  if (a13 == &a10)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_15;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_15:
  _Unwind_Resume(exception_object);
}

uint64_t *adm::CustomPropertyManager::onGraphParameterUpdate(uint64_t a1, unsigned int *a2, float a3)
{
  uint64_t *result;
  float v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  result = std::map<unsigned int,std::atomic<float>>::at(*(uint64_t **)(a1 + 64), a2[10]);
  do
    v7 = COERCE_FLOAT(__ldaxr((unsigned int *)result));
  while (__stlxr(LODWORD(a3), (unsigned int *)result));
  if (v7 != a3 && *(_QWORD *)(a1 + 24))
  {
    v8 = a2[10];
    if (v8 == 1936748642)
    {
      kdebug_trace();
      v8 = a2[10];
    }
    v10 = **(_QWORD **)a2;
    v11 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 64, 8);
    *(_DWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = a1;
    *(_QWORD *)(v9 + 32) = v10;
    *(_DWORD *)(v9 + 40) = v11;
    *(_DWORD *)(v9 + 44) = v8;
    *(float *)(v9 + 48) = v7;
    *(float *)(v9 + 52) = a3;
    *(_QWORD *)v9 = &off_25083FC08;
    *(_QWORD *)(v9 + 8) = 0;
    return (uint64_t *)caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)(a1 + 40), (caulk::concurrent::message *)v9);
  }
  return result;
}

uint64_t *std::map<unsigned int,std::atomic<float>>::at(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = *((_DWORD *)a1 + 7);
      if (v2 <= a2)
        break;
      a1 = (uint64_t *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 4;
    a1 = (uint64_t *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

void caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x23B801508);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::perform(uint64_t a1)
{
  uint64_t v2;
  NSObject *adm_log_object;
  unsigned int v4;
  int v5;
  std::string *v6;
  double v7;
  double v8;
  int v9;
  uint64_t v10;
  caulk::concurrent::message *v12;
  std::string v13;
  _BYTE buf[12];
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v12 = (caulk::concurrent::message *)a1;
  v2 = *(_QWORD *)(a1 + 24);
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(a1 + 44);
    v5 = bswap32(v4);
    *(_DWORD *)&buf[1] = v5;
    if (((char)v5 - 32) > 0x5E
      || (((__int16)v5 >> 8) - 32) > 0x5E
      || ((v5 << 8 >> 24) - 32) > 0x5E
      || ((v5 >> 24) - 32) > 0x5E)
    {
      std::to_string(&v13, v4);
    }
    else
    {
      strcpy(&buf[5], "'");
      buf[0] = 39;
      std::string::basic_string[abi:ne180100]<0>(&v13, buf);
    }
    v6 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
    v7 = *(float *)(a1 + 48);
    v8 = *(float *)(a1 + 52);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v6;
    v15 = 2048;
    v16 = v7;
    v17 = 2048;
    v18 = v8;
    _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "AudioDSPManager parameterID [%s] value changed %f -> %f", buf, 0x20u);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  v9 = *(_DWORD *)(a1 + 40);
  *(_QWORD *)buf = *(_QWORD *)(a1 + 32);
  *(_DWORD *)&buf[8] = v9;
  v10 = *(_QWORD *)(v2 + 24);
  if (!v10)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 48))(v10, buf);
  return caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::rt_cleanup::~rt_cleanup(&v12);
}

void sub_236CD44A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<adm::CustomPropertyManager::onGraphParameterUpdate(adm::CustomPropertyManager::ParameterMapping const&,float)::$_0>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 64, 8);
  return a1;
}

void adm::CustomPropertyManager::attachToNode(uint64_t a1, adm::graph::DSPNode **a2, uint64_t a3)
{
  uint64_t v6;
  void *DSP;
  void *v8;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type v14;
  const void *v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int32 *v20;
  __int32 *v21;
  __int32 *v22;
  __int32 *v23;
  __int32 *v24;
  __int32 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *adm_log_object;
  unsigned int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  std::string *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  adm::graph::DSPNode *v45;
  std::string *v46;
  uint64_t v47;
  std::string *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  int data;
  uint64_t **v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  adm::graph::DSPNode *v66;
  std::string *v67;
  std::string *v68;
  uint64_t v69;
  adm::graph::DSPNode **v70;
  unint64_t v71;
  char *__p;
  unint64_t v73;
  char *v74;
  char *v75;
  void *v76;
  __int32 *v77;
  void *v78;
  __int32 *v79;
  std::string __dst;
  std::string *v81;
  _BYTE buf[12];
  uint64_t v83;

  v6 = 0;
  v83 = *MEMORY[0x24BDAC8D0];
  do
  {
    adm::CustomPropertyManager::onGraphParameterUpdate(a1, (unsigned int *)&adm::CustomPropertyManager::kParameterMappings[v6], *((float *)&adm::CustomPropertyManager::kParameterMappings[v6 + 5] + 1));
    v6 += 6;
  }
  while (v6 != 24);
  DSP = adm::graph::DSPNode::getDSP(*a2);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)DSP + 48))(&v78);
  v70 = a2;
  v8 = adm::graph::DSPNode::getDSP(*a2);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v8 + 56))(&v76);
  v9 = 0;
  v10 = 0;
  __p = 0;
  v73 = 0;
  v74 = 0;
  v71 = 0;
  v11 = adm::CustomPropertyManager::kParameterMappings;
  do
  {
    v75 = v9;
    v13 = v11[2];
    v12 = v11[3];
    while (1)
    {
      if (v13 == v12)
        goto LABEL_64;
      v14 = *(_QWORD *)(v13 + 8);
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = *(const void **)v13;
      if (v14 >= 0x17)
      {
        v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v17 = v14 | 7;
        v18 = v17 + 1;
        p_dst = (std::string *)operator new(v17 + 1);
        __dst.__r_.__value_.__l.__size_ = v14;
        __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_13:
        memmove(p_dst, v15, v14);
        goto LABEL_14;
      }
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *(_QWORD *)(v13 + 8);
      p_dst = &__dst;
      if (v14)
        goto LABEL_13;
LABEL_14:
      p_dst->__r_.__value_.__s.__data_[v14] = 0;
      v19 = std::__tree<std::string>::find<std::string>(a3, &__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if ((_QWORD *)(a3 + 8) != v19)
        break;
      v13 += 16;
    }
    v20 = v77;
    v21 = wmemchr((__int32 *)v76, *((_DWORD *)v11 + 10), ((char *)v77 - (_BYTE *)v76) >> 2);
    if (v21)
      v22 = v21;
    else
      v22 = v20;
    v9 = v75;
    if (v22 != v77)
    {
      if ((unint64_t)v10 < v73)
      {
        *(_DWORD *)v10 = *((_DWORD *)v11 + 10);
        v10 += 4;
        goto LABEL_65;
      }
      v26 = (v10 - v75) >> 2;
      v27 = v26 + 1;
      if (!((unint64_t)(v26 + 1) >> 62))
      {
        if ((uint64_t)(v73 - (_QWORD)v75) >> 1 > v27)
          v27 = (uint64_t)(v73 - (_QWORD)v75) >> 1;
        if (v73 - (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
          v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v28);
        else
          v29 = 0;
        v37 = (char *)(v28 + 4 * v26);
        *(_DWORD *)v37 = *((_DWORD *)v11 + 10);
        v38 = v37 + 4;
        while (v10 != v75)
        {
          v39 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v37 - 1) = v39;
          v37 -= 4;
        }
        v73 = v28 + 4 * v29;
        if (v75)
          operator delete(v75);
        v9 = v37;
        v10 = v38;
        goto LABEL_65;
      }
LABEL_119:
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    }
    v23 = v79;
    v24 = wmemchr((__int32 *)v78, *((_DWORD *)v11 + 10), ((char *)v79 - (_BYTE *)v78) >> 2);
    if (v24)
      v25 = v24;
    else
      v25 = v23;
    if (v25 == v79)
    {
      adm_log_object = get_adm_log_object();
      if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_DEFAULT))
      {
        v31 = *((_DWORD *)v11 + 10);
        v32 = bswap32(v31);
        *(_DWORD *)&buf[1] = v32;
        if (((char)v32 - 32) > 0x5E
          || (((__int16)v32 >> 8) - 32) > 0x5E
          || ((v32 << 8 >> 24) - 32) > 0x5E
          || ((v32 >> 24) - 32) > 0x5E)
        {
          std::to_string(&__dst, v31);
        }
        else
        {
          strcpy(&buf[5], "'");
          buf[0] = 39;
          std::string::basic_string[abi:ne180100]<0>(&__dst, buf);
        }
        v40 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v40;
        _os_log_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_DEFAULT, "warning: node missing expected parameter %s", buf, 0xCu);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
LABEL_64:
      v9 = v75;
    }
    else
    {
      if ((unint64_t)v74 < v71)
      {
        *(_DWORD *)v74 = *((_DWORD *)v11 + 10);
        v74 += 4;
        goto LABEL_65;
      }
      v33 = (v74 - __p) >> 2;
      v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 62)
        goto LABEL_119;
      if ((uint64_t)(v71 - (_QWORD)__p) >> 1 > v34)
        v34 = (uint64_t)(v71 - (_QWORD)__p) >> 1;
      if (v71 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL)
        v35 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      if (v35)
        v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v35);
      else
        v36 = 0;
      v41 = (char *)(v35 + 4 * v33);
      *(_DWORD *)v41 = *((_DWORD *)v11 + 10);
      v42 = v41 + 4;
      if (v74 == __p)
      {
        v44 = __p;
      }
      else
      {
        v43 = v74;
        v44 = __p;
        do
        {
          *((_DWORD *)v41 - 1) = *((_DWORD *)v43 - 1);
          v41 -= 4;
          v43 -= 4;
        }
        while (v43 != __p);
      }
      v71 = v35 + 4 * v36;
      if (v44)
        operator delete(v44);
      __p = v41;
      v74 = v42;
    }
LABEL_65:
    v11 += 6;
  }
  while (v11 != (uint64_t *)0x2542B4478);
  if (v9 == v10)
  {
    v50 = __p;
    v47 = a1;
    v49 = v74;
  }
  else
  {
    v45 = *v70;
    v81 = 0;
    v46 = (std::string *)operator new(0x30uLL);
    v47 = a1;
    v46->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25083FAF8;
    v46->__r_.__value_.__l.__size_ = a1;
    v46->__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    v46[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
    v46[1].__r_.__value_.__l.__size_ = v73;
    v46[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
    v81 = v46;
    adm::graph::HostNode::addClientIOCallback(v45, (uint64_t)&__dst, 1);
    v48 = v81;
    v49 = v74;
    if (v81 == &__dst)
    {
      v51 = 4;
      v48 = &__dst;
      v50 = __p;
LABEL_82:
      (*(void (**)(void))(v48->__r_.__value_.__r.__words[0] + 8 * v51))();
      v49 = v74;
    }
    else
    {
      v50 = __p;
      if (v81)
      {
        v51 = 5;
        goto LABEL_82;
      }
    }
    v9 = 0;
  }
  if (v50 != v49)
  {
    v52 = 0;
    v53 = v50;
    v54 = 0;
    v55 = 0;
    do
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(__dst.__r_.__value_.__l.__data_) = *(_DWORD *)v53;
      data = (int)__dst.__r_.__value_.__l.__data_;
      v57 = std::__tree<std::__value_type<unsigned int,std::atomic<float>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::atomic<float>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::atomic<float>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(v47 + 56), __dst.__r_.__value_.__l.__data_, &__dst)+ 4;
      if (v54 >= v52)
      {
        v58 = 0xAAAAAAAAAAAAAAABLL * ((v54 - v55) >> 3) + 1;
        if (v58 > 0xAAAAAAAAAAAAAAALL)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v52 - v55) >> 3) > v58)
          v58 = 0x5555555555555556 * ((v52 - v55) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v55) >> 3) >= 0x555555555555555)
          v59 = 0xAAAAAAAAAAAAAAALL;
        else
          v59 = v58;
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v59);
        v62 = &v60[8 * ((v54 - v55) >> 3)];
        *(_DWORD *)v62 = data;
        *((_QWORD *)v62 + 1) = v57;
        v62[16] = 0;
        v62[20] = 0;
        if (v54 == v55)
        {
          v64 = &v60[8 * ((v54 - v55) >> 3)];
        }
        else
        {
          v63 = &v60[8 * ((v54 - v55) >> 3)];
          do
          {
            v64 = v63 - 24;
            v65 = *(_OWORD *)(v54 - 24);
            *((_QWORD *)v63 - 1) = *((_QWORD *)v54 - 1);
            *(_OWORD *)(v63 - 24) = v65;
            v54 -= 24;
            v63 -= 24;
          }
          while (v54 != v55);
        }
        v52 = &v60[24 * v61];
        v54 = v62 + 24;
        if (v55)
          operator delete(v55);
        v55 = v64;
      }
      else
      {
        *(_DWORD *)v54 = data;
        *((_QWORD *)v54 + 1) = v57;
        v54[16] = 0;
        v54[20] = 0;
        v54 += 24;
      }
      v53 += 4;
    }
    while (v53 != v74);
    v66 = *v70;
    v81 = 0;
    v67 = (std::string *)operator new(0x30uLL);
    v67->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25083FB88;
    v67->__r_.__value_.__l.__size_ = a1;
    v67->__r_.__value_.__r.__words[2] = (std::string::size_type)v55;
    v67[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    v67[1].__r_.__value_.__l.__size_ = (std::string::size_type)v52;
    v67[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v66;
    v81 = v67;
    adm::graph::HostNode::addClientIOCallback(v66, (uint64_t)&__dst, 0);
    v68 = v81;
    if (v81 == &__dst)
    {
      v69 = 4;
      v68 = &__dst;
      v50 = __p;
LABEL_107:
      (*(void (**)(void))(v68->__r_.__value_.__r.__words[0] + 8 * v69))();
    }
    else
    {
      v50 = __p;
      if (v81)
      {
        v69 = 5;
        goto LABEL_107;
      }
    }
  }
  if (v50)
    operator delete(v50);
  if (v9)
    operator delete(v9);
  if (v76)
  {
    v77 = (__int32 *)v76;
    operator delete(v76);
  }
  if (v78)
  {
    v79 = (__int32 *)v78;
    operator delete(v78);
  }
}

void sub_236CD4C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_25083FB88;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_25083FB88;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B801508);
}

_QWORD *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x30uLL);
  *v2 = &off_25083FB88;
  std::__compressed_pair_elem<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_236CD4DF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25083FB88;
  return std::__compressed_pair_elem<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2 const&,0ul>(a2 + 1, (uint64_t *)(a1 + 8));
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t result)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t v3;
  float v4;
  int v5;
  float v6;
  BOOL v7;
  void *DSP;
  __n128 v9;

  v1 = *(unsigned int **)(result + 16);
  v2 = *(unsigned int **)(result + 24);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((float *)v1 + 4);
      v5 = *((unsigned __int8 *)v1 + 20);
      v6 = COERCE_FLOAT(atomic_load(*((unsigned int **)v1 + 1)));
      *((float *)v1 + 4) = v6;
      *((_BYTE *)v1 + 20) = 1;
      if (v5)
        v7 = v4 == v6;
      else
        v7 = 0;
      if (!v7)
      {
        DSP = adm::graph::DSPNode::getDSP(*(adm::graph::DSPNode **)(v3 + 40));
        if (*((_BYTE *)v1 + 20))
          v9.n128_u32[0] = v1[4];
        else
          v9.n128_u32[0] = 0;
        result = (*(uint64_t (**)(void *, _QWORD, __n128))(*(_QWORD *)DSP + 40))(DSP, *v1, v9);
      }
      v1 += 6;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN3adm21CustomPropertyManager12attachToNodeERKNSt3__110shared_ptrINS_5graph7DSPNodeEEERKNS1_3setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessISE_EENSC_ISE_EEEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

_QWORD *std::__compressed_pair_elem<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_2 const&,0ul>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;

  v4 = *a2;
  a1[1] = 0;
  *a1 = v4;
  a1[2] = 0;
  a1[3] = 0;
  v5 = (__int128 *)a2[1];
  v6 = (__int128 *)a2[2];
  if (v6 != v5)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__fs::filesystem::path>>(v7);
    a1[1] = v8;
    a1[2] = v8;
    a1[3] = &v8[3 * v9];
    do
    {
      v10 = *v5;
      v8[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)v8 = v10;
      v8 += 3;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != v6);
    a1[2] = v8;
  }
  a1[4] = a2[4];
  return a1;
}

void sub_236CD5004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_25083FAF8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func(_QWORD *a1)
{
  void *v2;

  *a1 = &off_25083FAF8;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x23B801508);
}

_QWORD *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new(0x30uLL);
  v4 = a1[1];
  v3 = (const void *)a1[2];
  *v2 = &off_25083FAF8;
  v2[1] = v4;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 2, v3, a1[3], (uint64_t)(a1[3] - (_QWORD)v3) >> 2);
  v2[5] = a1[5];
  return v2;
}

void sub_236CD5104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *a2 = &off_25083FAF8;
  a2[1] = v4;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2 + 2, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
  a2[5] = *(_QWORD *)(a1 + 40);
  return result;
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(_QWORD *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::destroy_deallocate(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t *result)
{
  unsigned int *v1;
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *DSP;
  float v7;
  uint64_t v8;

  v1 = (unsigned int *)result[2];
  v2 = (unsigned int *)result[3];
  if (v1 != v2)
  {
    v3 = result;
    v4 = result[1];
    do
    {
      v5 = *v1;
      DSP = adm::graph::DSPNode::getDSP((adm::graph::DSPNode *)v3[5]);
      result = (uint64_t *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)DSP + 32))(DSP, v5);
      v8 = 0;
      while (LODWORD(adm::CustomPropertyManager::kParameterMappings[v8 + 5]) != (_DWORD)v5)
      {
        v8 += 6;
        if (v8 == 24)
          goto LABEL_8;
      }
      result = adm::CustomPropertyManager::onGraphParameterUpdate(v4, (unsigned int *)&adm::CustomPropertyManager::kParameterMappings[v8], v7);
LABEL_8:
      ++v1;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN3adm21CustomPropertyManager12attachToNodeERKNSt3__110shared_ptrINS_5graph7DSPNodeEEERKNS1_3setINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_4lessISE_EENSC_ISE_EEEEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1,std::allocator<adm::CustomPropertyManager::attachToNode(std::shared_ptr<adm::graph::DSPNode> const&,std::set<std::string> const&)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

void adm::CustomPropertyManager::getCustomPropertyList(adm::CustomPropertyManager *this)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  CFDictionaryRef CFDictionaryRef;
  CFDictionaryRef v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  CFDictionaryRef *v16;
  unint64_t v17;
  _QWORD *v18;
  const __CFDictionary *v19;
  CFDictionaryRef v20;
  __int128 v21;
  unint64_t v22;
  uint64_t i;
  const void *v24;
  const void *v25;
  int64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  CFArrayRef v31;
  std::runtime_error *v32;
  std::runtime_error *exception;
  std::runtime_error *v34;
  std::runtime_error *v35;
  _QWORD v37[2];
  CFDictionaryRef v38;
  __int128 v39;
  unint64_t v40;
  CFTypeRef *p_valuePtr;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  _BYTE v52[8];
  uint64_t v53;
  CFTypeRef valuePtr;
  __int128 v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v39 = 0uLL;
  v40 = 0;
  v1 = "SdAvtpni";
  v2 = *MEMORY[0x24BDBD270];
  v3 = *MEMORY[0x24BDBD268];
  do
  {
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&p_valuePtr, "property selector");
    LODWORD(valuePtr) = *(_DWORD *)v1;
    v42 = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v42)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v43, "property scope");
    LODWORD(valuePtr) = *((_DWORD *)v1 + 1);
    if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
    {
      v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
      __cxa_throw(v34, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v45, "property element");
    LODWORD(valuePtr) = *((_DWORD *)v1 + 2);
    if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
    {
      v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
      __cxa_throw(v32, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v4 = (char *)*((_QWORD *)v1 + 2);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v47, "property data type");
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v48, v4);
    v5 = (char *)*((_QWORD *)v1 + 4);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v49, "property qualifier data type");
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v50, v5);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v51, "property is invariant");
    v51[1] = v3;
    LODWORD(v5) = *((unsigned __int8 *)v1 + 48);
    applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v52, "property is settable");
    if ((_DWORD)v5)
      v6 = v3;
    else
      v6 = v2;
    v53 = v6;
    v37[0] = &p_valuePtr;
    v37[1] = 7;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v37);
    v8 = CFDictionaryRef;
    v38 = CFDictionaryRef;
    v9 = (_QWORD *)*((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1) >= v40)
    {
      v10 = (_QWORD *)v39;
      v11 = (uint64_t)(*((_QWORD *)&v39 + 1) - v39) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
      v13 = v40 - v39;
      if ((uint64_t)(v40 - v39) >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      v57 = &v40;
      if (v14)
      {
        v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        v9 = (_QWORD *)*((_QWORD *)&v39 + 1);
        v10 = (_QWORD *)v39;
      }
      else
      {
        v15 = 0;
      }
      v16 = (CFDictionaryRef *)(v14 + 8 * v11);
      v17 = v14 + 8 * v15;
      v56 = v17;
      *v16 = v8;
      v18 = v16 + 1;
      v38 = 0;
      *((_QWORD *)&v55 + 1) = v16 + 1;
      if (v9 == v10)
      {
        v20 = 0;
      }
      else
      {
        do
        {
          v19 = (const __CFDictionary *)*--v9;
          *--v16 = v19;
          *v9 = 0;
        }
        while (v9 != v10);
        v18 = (_QWORD *)*((_QWORD *)&v55 + 1);
        v17 = v56;
        v20 = v38;
      }
      v21 = v39;
      *(_QWORD *)&v39 = v16;
      *((_QWORD *)&v39 + 1) = v18;
      v55 = v21;
      v22 = v40;
      v40 = v17;
      v56 = v22;
      valuePtr = (CFTypeRef)v21;
      std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&valuePtr);
      *((_QWORD *)&v39 + 1) = v18;
      if (v20)
        CFRelease(v20);
    }
    else
    {
      **((_QWORD **)&v39 + 1) = CFDictionaryRef;
      v38 = 0;
      *((_QWORD *)&v39 + 1) = v9 + 1;
    }
    for (i = 0; i != -112; i -= 16)
    {
      v24 = *(const void **)((char *)&v53 + i);
      if (v24)
        CFRelease(v24);
      v25 = *(const void **)&v52[i];
      if (v25)
        CFRelease(v25);
    }
    v1 += 56;
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&valuePtr, "custom property info array");
  v26 = *((_QWORD *)&v39 + 1) - v39;
  if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
  {
    v27 = 0;
    v28 = 0;
  }
  else
  {
    if (v26 < 0)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v26 >> 3);
    bzero(v27, v26);
    v28 = &v27[v26];
    v29 = v39;
    if ((_QWORD)v39 != *((_QWORD *)&v39 + 1))
    {
      v30 = 0;
      do
      {
        *(_QWORD *)&v27[v30] = *(_QWORD *)(v29 + v30);
        v30 += 8;
      }
      while ((_QWORD)v29 + v30 != *((_QWORD *)&v29 + 1));
    }
  }
  v31 = CFArrayCreate(0, (const void **)v27, (v28 - v27) >> 3, MEMORY[0x24BDBD690]);
  if (!v31)
  {
    v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v27)
    operator delete(v27);
  *(_QWORD *)&v55 = v31;
  p_valuePtr = &valuePtr;
  v42 = 1;
  *(_QWORD *)this = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&p_valuePtr);
  if ((_QWORD)v55)
    CFRelease((CFTypeRef)v55);
  if (valuePtr)
    CFRelease(valuePtr);
  p_valuePtr = (CFTypeRef *)&v39;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_valuePtr);
}

void sub_236CD5778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,__int16 *a25,CFTypeRef a26,uint64_t a27,CFTypeRef cf,uint64_t a29,CFTypeRef a30)
{
  void *v30;
  void *v31;
  uint64_t v32;

  __cxa_free_exception(v31);
  if (v30)
    operator delete(v30);
  applesauce::CF::TypeRef::~TypeRef((const void **)(v32 - 136));
  a25 = &a20;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_236CD5A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void **v26;
  void *v27;
  void **v28;
  void **v29;
  CFDictionaryRef v30;
  std::runtime_error *exception;
  void **values;
  void **v34;
  unint64_t v35;
  void **keys;
  void **v37;
  unint64_t v38;

  v2 = *(_QWORD *)(a1 + 8);
  keys = 0;
  v37 = 0;
  v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v34 = 0;
  v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void ***)a1;
    v5 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      v6 = *v4;
      v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        v9 = keys;
        v10 = v37 - keys;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v12 = v38 - (_QWORD)keys;
        if ((uint64_t)(v38 - (_QWORD)keys) >> 2 > v11)
          v11 = v12 >> 2;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
        else
          v14 = 0;
        v15 = (void **)(v13 + 8 * v10);
        *v15 = v6;
        v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            v16 = *--v7;
            *--v15 = v16;
          }
          while (v7 != v9);
          v7 = keys;
        }
        keys = v15;
        v38 = v13 + 8 * v14;
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v37 = v6;
        v8 = v7 + 1;
      }
      v37 = v8;
      v17 = v4[1];
      v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        v20 = values;
        v21 = v34 - values;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61)
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
        v23 = v35 - (_QWORD)values;
        if ((uint64_t)(v35 - (_QWORD)values) >> 2 > v22)
          v22 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
          v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v24);
        else
          v25 = 0;
        v26 = (void **)(v24 + 8 * v21);
        *v26 = v17;
        v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            v27 = *--v18;
            *--v26 = v27;
          }
          while (v18 != v20);
          v18 = values;
        }
        values = v26;
        v35 = v24 + 8 * v25;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v34 = v17;
        v19 = v18 + 1;
      }
      v34 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  v28 = keys;
  v29 = values;
  v30 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (v29)
    operator delete(v29);
  if (v28)
    operator delete(v28);
  return v30;
}

void sub_236CD5CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void adm::CustomPropertyManager::getCustomProperty(applesauce::CF::DataRef *a1, uint64_t a2, _DWORD *a3, const void *a4)
{
  unsigned int *ParameterMapping;
  float v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  CFDataRef v15;
  int v16;
  int v17;
  NSObject *adm_log_object;
  std::runtime_error *exception;
  unsigned int v21;
  CFDataRef v22;

  if (a4)
    CFRetain(a4);
  v22 = (CFDataRef)a4;
  ParameterMapping = (unsigned int *)adm::CustomPropertyManager::findParameterMapping(a3, &v22);
  if (a4)
    CFRelease(a4);
  if (!ParameterMapping)
    goto LABEL_19;
  v9 = COERCE_FLOAT(atomic_load((unsigned int *)std::map<unsigned int,std::atomic<float>>::at(*(uint64_t **)(a2 + 64), ParameterMapping[10])));
  v10 = *(int **)(*(_QWORD *)ParameterMapping + 16);
  v11 = *(_QWORD *)(*(_QWORD *)ParameterMapping + 24);
  if (v11 == 7)
  {
    v16 = *v10;
    v17 = *(int *)((char *)v10 + 3);
    if (v16 != 1634692166 || v17 != 842232929)
      goto LABEL_19;
    v21 = LODWORD(v9);
    v15 = CFDataCreate(0, (const UInt8 *)&v21, 4);
    if (!v15)
    {
LABEL_24:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
LABEL_23:
    applesauce::CF::DataRef::DataRef(a1, v15);
    return;
  }
  if (v11 == 6)
  {
    v12 = *v10;
    v13 = *((unsigned __int16 *)v10 + 2);
    if (v12 == 1953384789 && v13 == 12851)
    {
      v21 = v9;
      v15 = CFDataCreate(0, (const UInt8 *)&v21, 4);
      if (!v15)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
LABEL_19:
  adm_log_object = get_adm_log_object();
  if (os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v21) = 0;
    _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, "unsupported property address", (uint8_t *)&v21, 2u);
  }
  *(_QWORD *)a1 = 0;
}

void sub_236CD5FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t *adm::CustomPropertyManager::findParameterMapping(_DWORD *a1, CFDataRef *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v10;
  int v11;
  BOOL v12;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  BOOL v22;
  const UInt8 *BytePtr;
  std::runtime_error *exception;

  v4 = 0;
  while (1)
  {
    v5 = &adm::CustomPropertyManager::kParameterMappings[v4];
    v6 = adm::CustomPropertyManager::kParameterMappings[v4];
    v7 = *(_DWORD *)v6;
    if (*a1 != 707406378 && v7 != 707406378 && v7 != *a1)
      goto LABEL_37;
    v10 = *(_DWORD *)(v6 + 4);
    v11 = a1[1];
    v12 = v11 == 707406378 || v10 == 707406378;
    if (!v12 && v10 != v11)
      goto LABEL_37;
    v14 = *(_DWORD *)(v6 + 8);
    v15 = a1[2];
    v16 = v15 == -1 || v14 == -1;
    if (!v16 && v14 != v15)
      goto LABEL_37;
    v19 = *(int **)(v6 + 32);
    v18 = *(_QWORD *)(v6 + 40);
    if (v18 != 6)
      break;
    v20 = *v19;
    v21 = *((unsigned __int16 *)v19 + 2);
    v22 = v20 == 1953384789 && v21 == 12851;
    if (!v22 || !*a2 || CFDataGetLength(*a2) != 4)
      return 0;
    if (!*a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    BytePtr = CFDataGetBytePtr(*a2);
    if (BYTE4(adm::CustomPropertyManager::kParameterMappings[v4 + 1])
      && *(_DWORD *)BytePtr == LODWORD(adm::CustomPropertyManager::kParameterMappings[v4 + 1]))
    {
      return &adm::CustomPropertyManager::kParameterMappings[v4];
    }
LABEL_37:
    v4 += 6;
    if (v4 == 24)
      return 0;
  }
  if (v18 != 4 || *v19 != 1701736270)
    return 0;
  if (*a2 && CFDataGetLength(*a2))
    return 0;
  return v5;
}

void sub_236CD6158(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL adm::CustomPropertyManager::setCustomProperty(uint64_t a1, _DWORD *a2, CFDataRef *a3, const void *a4)
{
  uint64_t *ParameterMapping;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;
  float v14;
  NSObject *adm_log_object;
  _BOOL8 result;
  const char *v17;
  uint8_t *v18;
  int v19;
  int v20;
  BOOL v21;
  std::runtime_error *exception;
  __int16 v23;
  uint8_t buf[2];
  CFDataRef v25;

  if (a4)
    CFRetain(a4);
  v25 = (CFDataRef)a4;
  ParameterMapping = adm::CustomPropertyManager::findParameterMapping(a2, &v25);
  if (a4)
    CFRelease(a4);
  if (!ParameterMapping)
  {
    adm_log_object = get_adm_log_object();
    result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v23 = 0;
    v17 = "unsupported property address";
    v18 = (uint8_t *)&v23;
LABEL_31:
    _os_log_error_impl(&dword_236C84000, adm_log_object, OS_LOG_TYPE_ERROR, v17, v18, 2u);
    return 0;
  }
  v9 = *(int **)(*ParameterMapping + 16);
  v10 = *(_QWORD *)(*ParameterMapping + 24);
  if (v10 == 7)
  {
    v19 = *v9;
    v20 = *(int *)((char *)v9 + 3);
    v21 = v19 == 1634692166 && v20 == 842232929;
    if (v21 && *a3 && CFDataGetLength(*a3) == 4)
    {
      if (*a3)
      {
        v14 = *(float *)CFDataGetBytePtr(*a3);
        goto LABEL_29;
      }
LABEL_32:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  else if (v10 == 6)
  {
    v11 = *v9;
    v12 = *((unsigned __int16 *)v9 + 2);
    v13 = v11 == 1953384789 && v12 == 12851;
    if (v13 && *a3 && CFDataGetLength(*a3) == 4)
    {
      if (*a3)
      {
        v14 = (float)*(unsigned int *)CFDataGetBytePtr(*a3);
LABEL_29:
        adm::CustomPropertyManager::onGraphParameterUpdate(a1, (unsigned int *)ParameterMapping, v14);
        return 1;
      }
      goto LABEL_32;
    }
  }
  adm_log_object = get_adm_log_object();
  result = os_log_type_enabled(adm_log_object, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)buf = 0;
    v17 = "invalid property data";
    v18 = buf;
    goto LABEL_31;
  }
  return result;
}

void sub_236CD634C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_DSPGraphKernel_mm()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x23B8017A8]());
}

void __cxx_global_var_init()
{
  unsigned __int8 v0;
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t (**v10)();
  uint64_t v11;
  __int128 v12;
  int v13;
  std::bad_alloc v14[2];
  void (**v15)(boost::exception_detail::bad_alloc_ *__hidden);
  uint64_t v16;
  __int128 v17;
  int v18;
  std::bad_alloc v19;
  unsigned int *v20;

  {
    v16 = 0;
    v17 = 0uLL;
    v18 = -1;
    std::bad_alloc::bad_alloc(&v19);
    v19.__vftable = (std::bad_alloc_vtbl *)&unk_25083D310;
    v15 = &off_25083D2F0;
    v11 = 0;
    v12 = 0uLL;
    v13 = -1;
    v10 = &off_25083D378;
    v14[0].__vftable = (std::bad_alloc_vtbl *)&unk_25083D3A8;
    v14[1].__vftable = (std::bad_alloc_vtbl *)&unk_25083D3E8;
    boost::exception_detail::copy_boost_exception((uint64_t)&v10, (uint64_t)&v15);
    *(_QWORD *)&v12 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception"
                      "_detail::bad_alloc_]";
    *((_QWORD *)&v12 + 1) = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/us"
                            "r/local/include/boost/exception/detail/exception_ptr.hpp";
    v13 = 174;
    if ((v0 & 1) == 0
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 48) = &unk_25083ED90;
      v4 = v11;
      *(_QWORD *)v3 = &unk_25083EE08;
      *(_QWORD *)(v3 + 8) = v4;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      *(_OWORD *)(v3 + 16) = v12;
      *(_DWORD *)(v3 + 32) = v13;
      *(_QWORD *)v3 = &off_25083D378;
      *(_QWORD *)(v3 + 40) = &unk_25083D3A8;
      *(_QWORD *)(v3 + 48) = &unk_25083D3E8;
      v9 = 0;
      v20 = 0;
      v5 = operator new();
      *(_QWORD *)(v5 + 8) = 0x100000001;
      *(_QWORD *)v5 = &off_25083D450;
      *(_QWORD *)(v5 + 16) = v3;
      v6 = v9;
      v9 = (unsigned int *)v5;
      v20 = v6;
      boost::detail::shared_count::~shared_count(&v20);
      boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep = v3 + 48;
      unk_2542B43A0 = v9;
      if (v9)
      {
        v7 = v9 + 2;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      boost::detail::shared_count::~shared_count(&v9);
      __cxa_atexit((void (*)(void *))boost::exception_ptr::~exception_ptr, &boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep, &dword_236C84000);
    }
    boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_alloc_>(void)::ep;
    unk_2542B4360 = unk_2542B43A0;
    if (unk_2542B43A0)
    {
      v1 = (unsigned int *)(unk_2542B43A0 + 8);
      do
        v2 = __ldxr(v1);
      while (__stxr(v2 + 1, v1));
    }
    std::bad_alloc::~bad_alloc(v14);
    v10 = (uint64_t (**)())&unk_25083EE08;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    std::bad_alloc::~bad_alloc(&v19);
    v15 = (void (**)(boost::exception_detail::bad_alloc_ *__hidden))&unk_25083EE08;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    __cxa_atexit((void (*)(void *))boost::exception_ptr::~exception_ptr, &boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_alloc_>::e, &dword_236C84000);
  }
}

void sub_236CD6680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::bad_alloc *v19;
  std::bad_alloc *v20;
  uint64_t v21;

  MEMORY[0x23B801508](v21, 0x10F1C4085500448);
  std::bad_alloc::~bad_alloc(v20);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12);
  std::bad_alloc::~bad_alloc(v19);
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 32))(a19);
  _Unwind_Resume(a1);
}

void __cxx_global_var_init_1()
{
  unsigned __int8 v0;
  unsigned int *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t (**v10)();
  uint64_t v11;
  __int128 v12;
  int v13;
  std::bad_exception v14[2];
  void (**v15)(boost::exception_detail::bad_exception_ *__hidden);
  uint64_t v16;
  __int128 v17;
  int v18;
  std::bad_exception v19;
  unsigned int *v20;

  {
    v17 = 0uLL;
    v18 = -1;
    v15 = &off_25083D4B0;
    v16 = 0;
    v19.__vftable = (std::bad_exception_vtbl *)&unk_25083D4D0;
    v12 = 0uLL;
    v13 = -1;
    v10 = &off_25083D538;
    v11 = 0;
    v14[0].__vftable = (std::bad_exception_vtbl *)&unk_25083D568;
    v14[1].__vftable = (std::bad_exception_vtbl *)&unk_25083D5A8;
    boost::exception_detail::copy_boost_exception((uint64_t)&v10, (uint64_t)&v15);
    *(_QWORD *)&v12 = "exception_ptr boost::exception_detail::get_static_exception_object() [Exception = boost::exception"
                      "_detail::bad_exception_]";
    *((_QWORD *)&v12 + 1) = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.ap"
                            "p/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/us"
                            "r/local/include/boost/exception/detail/exception_ptr.hpp";
    v13 = 174;
    if ((v0 & 1) == 0
    {
      v3 = operator new();
      *(_QWORD *)(v3 + 48) = &unk_25083ED90;
      v4 = v11;
      *(_QWORD *)v3 = &unk_25083EE08;
      *(_QWORD *)(v3 + 8) = v4;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      *(_OWORD *)(v3 + 16) = v12;
      *(_DWORD *)(v3 + 32) = v13;
      *(_QWORD *)v3 = &off_25083D538;
      *(_QWORD *)(v3 + 40) = &unk_25083D568;
      *(_QWORD *)(v3 + 48) = &unk_25083D5A8;
      v9 = 0;
      v20 = 0;
      v5 = operator new();
      *(_QWORD *)(v5 + 8) = 0x100000001;
      *(_QWORD *)v5 = &off_25083D610;
      *(_QWORD *)(v5 + 16) = v3;
      v6 = v9;
      v9 = (unsigned int *)v5;
      v20 = v6;
      boost::detail::shared_count::~shared_count(&v20);
      boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep = v3 + 48;
      unk_2542B43B0 = v9;
      if (v9)
      {
        v7 = v9 + 2;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      boost::detail::shared_count::~shared_count(&v9);
      __cxa_atexit((void (*)(void *))boost::exception_ptr::~exception_ptr, &boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep, &dword_236C84000);
    }
    boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e = boost::exception_detail::get_static_exception_object<boost::exception_detail::bad_exception_>(void)::ep;
    unk_2542B4370 = unk_2542B43B0;
    if (unk_2542B43B0)
    {
      v1 = (unsigned int *)(unk_2542B43B0 + 8);
      do
        v2 = __ldxr(v1);
      while (__stxr(v2 + 1, v1));
    }
    std::bad_exception::~bad_exception(v14);
    v10 = (uint64_t (**)())&unk_25083EE08;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
    std::bad_exception::~bad_exception(&v19);
    v15 = (void (**)(boost::exception_detail::bad_exception_ *__hidden))&unk_25083EE08;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    __cxa_atexit((void (*)(void *))boost::exception_ptr::~exception_ptr, &boost::exception_detail::exception_ptr_static_exception_object<boost::exception_detail::bad_exception_>::e, &dword_236C84000);
  }
}

void sub_236CD6A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::bad_exception *v19;
  std::bad_exception *v20;
  uint64_t v21;

  MEMORY[0x23B801508](v21, 0x10F1C4085500448);
  std::bad_exception::~bad_exception(v20);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 32))(a12);
  std::bad_exception::~bad_exception(v19);
  if (a19)
    (*(void (**)(uint64_t))(*(_QWORD *)a19 + 32))(a19);
  _Unwind_Resume(a1);
}

void _GLOBAL__sub_I_DSPProcessor_mm()
{
  objc_autoreleasePoolPop((void *)MEMORY[0x23B8017A8]());
}

_QWORD *_GLOBAL__sub_I_CustomPropertyManager_cpp()
{
  _OWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *result;

  adm::CustomPropertyManager::kParameterMappings[0] = (uint64_t)"SdAvtpni";
  byte_2542B43C0 = 0;
  byte_2542B43C4 = 0;
  qword_2542B43D0 = 0;
  qword_2542B43D8 = 0;
  qword_2542B43C8 = 0;
  v0 = operator new(0x20uLL);
  *v0 = xmmword_25083F978;
  v0[1] = *(_OWORD *)&off_25083F988;
  qword_2542B43C8 = (uint64_t)v0;
  qword_2542B43D0 = (uint64_t)(v0 + 2);
  qword_2542B43D8 = (uint64_t)(v0 + 2);
  *(_QWORD *)&dword_2542B43E0 = 1936748642;
  qword_2542B43E8 = (uint64_t)"ROIUbolg";
  byte_2542B43F0 = 0;
  byte_2542B43F4 = 0;
  qword_2542B4400 = 0;
  qword_2542B4408 = 0;
  qword_2542B43F8 = 0;
  v1 = operator new(0x10uLL);
  *v1 = "isolated audio muted talker detection";
  v1[1] = 37;
  qword_2542B43F8 = (uint64_t)v1;
  qword_2542B4400 = (uint64_t)(v1 + 2);
  qword_2542B4408 = (uint64_t)(v1 + 2);
  unk_2542B4410 = 1969844082;
  dword_2542B4420 = 1651797616;
  byte_2542B4424 = 1;
  qword_2542B4430 = 0;
  unk_2542B4438 = 0;
  qword_2542B4428 = 0;
  v2 = operator new(0x10uLL);
  qword_2542B4430 = (uint64_t)(v2 + 2);
  unk_2542B4438 = v2 + 2;
  *v2 = "isolated audio siri";
  v2[1] = 19;
  qword_2542B4428 = (uint64_t)v2;
  dword_2542B4440 = 1651797616;
  unk_2542B4444 = 0;
  dword_2542B4450 = 1987339878;
  byte_2542B4454 = 1;
  qword_2542B4460 = 0;
  unk_2542B4468 = 0;
  qword_2542B4458 = 0;
  result = operator new(0x10uLL);
  qword_2542B4460 = (uint64_t)(result + 2);
  unk_2542B4468 = result + 2;
  *result = "isolated audio siri";
  result[1] = 19;
  qword_2542B4458 = (uint64_t)result;
  dword_2542B4470 = 1987339878;
  unk_2542B4474 = 0;
  return result;
}

void sub_236CD6C9C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t *v3;
  void *v4;

  v3 = &qword_2542B4448;
  while (1)
  {
    v4 = (void *)*(v3 - 4);
    if (v4)
    {
      *(v3 - 3) = (uint64_t)v4;
      operator delete(v4);
    }
    v3 -= 6;
    if (v3 == v1)
      _Unwind_Resume(exception_object);
  }
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x24BE0A6B0](inAudioConverter, *(_QWORD *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x24BE0A6B8](inAudioConverter);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x24BE0A6C0](inSourceFormat, inDestinationFormat, outAudioConverter);
}

uint64_t CARegisterUIOrientation()
{
  return MEMORY[0x24BDB6A80]();
}

uint64_t CAUnregisterUIOrientation()
{
  return MEMORY[0x24BDB6A90]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x24BDBBE10](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x24BDBC110](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1E8](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC540](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x24BDBC6B0](theString, suffix);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
  MEMORY[0x24BDBC738](theString, trimString);
}

uint64_t ExtendedAudioBufferList_CreateWithFormat()
{
  return MEMORY[0x24BE0A7F8]();
}

uint64_t ExtendedAudioBufferList_Destroy()
{
  return MEMORY[0x24BE0A800]();
}

uint64_t ExtendedAudioBufferList_Prepare()
{
  return MEMORY[0x24BE0A808]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x24BED8490]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x24BED84B0]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x24BED84D0]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t AUProcessingBlock_DSPGraph::AUProcessingBlock_DSPGraph()
{
  return MEMORY[0x24BE0A870]();
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
  MEMORY[0x24BEC6D98](this);
}

uint64_t caulk::concurrent::messenger::shared_logging_priority(caulk::concurrent::messenger *this)
{
  return MEMORY[0x24BEC6DA8](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x24BEC6DB8](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x24BEC6DC0]();
}

{
  return MEMORY[0x24BEC6DC8]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
  MEMORY[0x24BEC6DD0](this);
}

uint64_t DSPGraph::ABIVersion(DSPGraph *this)
{
  return MEMORY[0x24BE0A878](this);
}

uint64_t DSPGraph::Interpreter::compileFile()
{
  return MEMORY[0x24BE0A880]();
}

uint64_t DSPGraph::Interpreter::compileText()
{
  return MEMORY[0x24BE0A888]();
}

void DSPGraph::Interpreter::~Interpreter(DSPGraph::Interpreter *this)
{
  MEMORY[0x24BE0A890](this);
}

uint64_t DSPGraph::NewBoxRegistry::NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  return MEMORY[0x24BE0A898](this);
}

uint64_t DSPGraph::ThrowException()
{
  return MEMORY[0x24BE0A8A0]();
}

uint64_t DSPGraph::Box::selfLatencyInSeconds(DSPGraph::Box *this)
{
  return MEMORY[0x24BE0A8C0](this);
}

uint64_t DSPGraph::Box::totalLatencyInSamples(DSPGraph::Box *this)
{
  return MEMORY[0x24BE0A8C8](this);
}

uint64_t DSPGraph::Box::totalLatencyInSeconds(DSPGraph::Box *this)
{
  return MEMORY[0x24BE0A8D0](this);
}

uint64_t DSPGraph::Graph::setAUStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x24BE0A8F8](this, a2);
}

uint64_t DSPGraph::Graph::setSRCQuality(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A910](this);
}

uint64_t DSPGraph::Graph::processMultiple()
{
  return MEMORY[0x24BE0A920]();
}

uint64_t DSPGraph::Graph::setSRCAlgorithm(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A928](this);
}

uint64_t DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x24BE0A930](this, a2);
}

uint64_t DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2, const __CFString *a3)
{
  return MEMORY[0x24BE0A938](this, a2, a3);
}

uint64_t DSPGraph::Graph::setSliceDuration()
{
  return MEMORY[0x24BE0A940]();
}

uint64_t DSPGraph::Graph::setSRCMinimumPhase(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A948](this);
}

uint64_t DSPGraph::Graph::initializeWithFlags(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A950](this);
}

uint64_t DSPGraph::Graph::box()
{
  return MEMORY[0x24BE0A960]();
}

uint64_t DSPGraph::Graph::reset(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A968](this);
}

uint64_t DSPGraph::Graph::configure(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A988](this);
}

uint64_t DSPGraph::Graph::preflight()
{
  return MEMORY[0x24BE0A990]();
}

uint64_t DSPGraph::strprintf(DSPGraph *this, const char *a2, ...)
{
  return MEMORY[0x24BE0A9B0](this, a2);
}

uint64_t DSPGraph::Graph::numOutputs(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A9C0](this);
}

uint64_t DSPGraph::Graph::in(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A9D8](this);
}

uint64_t DSPGraph::Graph::out(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A9E0](this);
}

uint64_t DSPGraph::Graph::numInputs(DSPGraph::Graph *this)
{
  return MEMORY[0x24BE0A9E8](this);
}

uint64_t DSPGraph::Exception::print()
{
  return MEMORY[0x24BE0A9F0]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x24BEDA978](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x24BEDA988](retstr, this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA18](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

int std::__fs::filesystem::path::__compare(const std::__fs::filesystem::path *this, std::__fs::filesystem::path::__string_view a2)
{
  return MEMORY[0x24BEDAA48](this, a2.__data_, a2.__size_);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x24BEDAA88](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAA90](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAA98](this, a2);
}

void std::bad_exception::~bad_exception(std::bad_exception *this)
{
  MEMORY[0x24BEDAB10](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB60](this);
}

{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x24BEDAC78](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x24BEDACC0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec)
{
  return (std::system_error *)MEMORY[0x24BEDAD98](this, *(_QWORD *)&__ec.__val_, __ec.__cat_);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec, const char *__what_arg)
{
  return (std::system_error *)MEMORY[0x24BEDADA0](this, *(_QWORD *)&__ec.__val_, __ec.__cat_, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
  MEMORY[0x24BEDADC8](this);
}

{
  MEMORY[0x24BEDADD0](this);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF48]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

void std::error_category::~error_category(std::error_category *this)
{
  MEMORY[0x24BEDB028](this);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x24BEDB0B0]();
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB150](this);
}

BOOL std::__shared_mutex_base::try_lock_shared(std::__shared_mutex_base *this)
{
  return MEMORY[0x24BEDB158](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB160](this);
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
  MEMORY[0x24BEDB168](this);
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x24BEDB178](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x24BEDB2B0](a1, a2);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x24BEDB308](a1, __ec);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x24BEDB3B8]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x24BEDB438](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x24BEDB440](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x24BEDB600](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB618](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x24BEDB668](this);
}

void std::bad_alloc::~bad_alloc(std::bad_alloc *this)
{
  MEMORY[0x24BEDB678](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_25083BAF8(__p);
}

uint64_t operator delete()
{
  return off_25083BB00();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_25083BB08(__sz);
}

uint64_t operator new()
{
  return off_25083BB10();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x24BEDB920](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x24BEDB968](lpsrc, lpstype, lpdtype, s2d);
}

uint64_t _os_assert_log()
{
  return MEMORY[0x24BDACB40]();
}

uint64_t _os_crash()
{
  return MEMORY[0x24BDACB50]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x24BDAD010]();
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x24BDAD288](a1, *(_QWORD *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x24BDAD2A0](a1, *(_QWORD *)&a2);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x24BDADF20](object);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x24BDAE058](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x24BDAE068]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

uint64_t exclaves_inbound_buffer_copyin()
{
  return MEMORY[0x24BDAE200]();
}

uint64_t exclaves_inbound_buffer_create()
{
  return MEMORY[0x24BDAE208]();
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x24BDAEA90]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x24BDAEA98](a1);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x24BDAEBB0](*(_QWORD *)&task, *(_QWORD *)&name);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x24BEDCFB0](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x24BEDCFC0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x24BEDD0F8](to, from);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

int sched_yield(void)
{
  return MEMORY[0x24BDAFC68]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x24BDAFF28](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF30](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x24BDAFF38](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

uint64_t tb_client_connection_activate()
{
  return MEMORY[0x24BEB6F68]();
}

uint64_t tb_client_connection_create_with_endpoint()
{
  return MEMORY[0x24BEB6F80]();
}

uint64_t tb_client_connection_message_construct()
{
  return MEMORY[0x24BEB6F88]();
}

uint64_t tb_client_connection_message_destruct()
{
  return MEMORY[0x24BEB6F98]();
}

uint64_t tb_conclave_endpoint_for_service()
{
  return MEMORY[0x24BEB6FA8]();
}

uint64_t tb_connection_send_query()
{
  return MEMORY[0x24BEB6FC0]();
}

uint64_t tb_message_complete()
{
  return MEMORY[0x24BEB6FD8]();
}

uint64_t tb_message_decode_BOOL()
{
  return MEMORY[0x24BEB6FF0]();
}

uint64_t tb_message_decode_f32()
{
  return MEMORY[0x24BEB7000]();
}

uint64_t tb_message_decode_u64()
{
  return MEMORY[0x24BEB7028]();
}

uint64_t tb_message_decode_u8()
{
  return MEMORY[0x24BEB7040]();
}

uint64_t tb_message_encode_BOOL()
{
  return MEMORY[0x24BEB7050]();
}

uint64_t tb_message_encode_f32()
{
  return MEMORY[0x24BEB7060]();
}

uint64_t tb_message_encode_f64()
{
  return MEMORY[0x24BEB7068]();
}

uint64_t tb_message_encode_s64()
{
  return MEMORY[0x24BEB7078]();
}

uint64_t tb_message_encode_u32()
{
  return MEMORY[0x24BEB7090]();
}

uint64_t tb_message_encode_u64()
{
  return MEMORY[0x24BEB7098]();
}

uint64_t tb_message_encode_u8()
{
  return MEMORY[0x24BEB70A8]();
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

