void sub_20CC72BD8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x212B93F04](v2, 0x1090C406D3911BDLL);

  _Unwind_Resume(a1);
}

void sub_20CC72C00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

ft::HungarianMatcher *ft::HungarianMatcher::HungarianMatcher(ft::HungarianMatcher *this, unint64_t a2)
{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ft::HungarianMatcher::UpdateBuffers(this, a2);
  return this;
}

{
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ft::HungarianMatcher::UpdateBuffers(this, a2);
  return this;
}

void sub_20CC72C44(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 48);
  if (v3)
  {
    *(_QWORD *)(v1 + 56) = v3;
    operator delete(v3);
  }
  ft::HungarianMatcher::HungarianMatcher((void **)(v1 + 24), v1);
  _Unwind_Resume(a1);
}

void ft::HungarianMatcher::UpdateBuffers(ft::HungarianMatcher *this, unint64_t a2)
{
  std::vector<unsigned int> *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  std::vector<unsigned int>::size_type v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char v36;

  if (*((_QWORD *)this + 9) < a2)
  {
    v6 = *((_QWORD *)this + 3);
    v4 = (std::vector<unsigned int> *)((char *)this + 24);
    v5 = v6;
    v4[2].__begin_ = (std::vector<unsigned int>::pointer)a2;
    v7 = ((uint64_t)v4->__end_ - v6) >> 2;
    v8 = a2 >= v7;
    v9 = a2 > v7;
    v10 = a2 - v7;
    if (v9)
    {
      std::vector<unsigned int>::__append(v4, v10);
    }
    else if (!v8)
    {
      *((_QWORD *)this + 4) = v5 + 4 * a2;
    }
    v11 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
    if (a2 * a2 <= v11)
    {
      if (a2 * a2 < v11)
        *((_QWORD *)this + 1) = *(_QWORD *)this + 4 * a2 * a2;
    }
    else
    {
      std::vector<float>::__append((uint64_t)this, a2 * a2 - v11);
    }
    v12 = bmMunkresTempBytes(a2);
    v13 = v12;
    v15 = (char *)*((_QWORD *)this + 6);
    v14 = (char *)*((_QWORD *)this + 7);
    v16 = v14 - v15;
    v17 = v12 - (v14 - v15);
    if (v12 > (unint64_t)(v14 - v15))
    {
      v18 = *((_QWORD *)this + 8);
      if (v18 - (uint64_t)v14 >= v17)
      {
        bzero(*((void **)this + 7), v17);
        *((_QWORD *)this + 7) = &v14[v17];
        return;
      }
      v19 = v18 - (_QWORD)v15;
      v20 = 2 * v19;
      if (2 * v19 <= v12)
        v20 = v12;
      if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
        v21 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      v22 = (char *)operator new(v21);
      v23 = &v22[v16];
      v24 = &v22[v21];
      v25 = &v22[v13];
      bzero(&v22[v16], v17);
      if (v14 == v15)
        goto LABEL_38;
      if (v16 >= 8 && (unint64_t)(v15 - v22) >= 0x20)
      {
        if (v16 < 0x20)
        {
          v26 = 0;
          goto LABEL_30;
        }
        v26 = v16 & 0xFFFFFFFFFFFFFFE0;
        v27 = v14 - 16;
        v28 = &v22[v14 - 16 - v15];
        v29 = v16 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v30 = *(_OWORD *)v27;
          *((_OWORD *)v28 - 1) = *((_OWORD *)v27 - 1);
          *(_OWORD *)v28 = v30;
          v28 -= 32;
          v27 -= 32;
          v29 -= 32;
        }
        while (v29);
        if (v16 == v26)
          goto LABEL_37;
        if ((v16 & 0x18) != 0)
        {
LABEL_30:
          v23 -= v16 & 0xFFFFFFFFFFFFFFF8;
          v31 = &v14[-v26 - 8];
          v32 = (char *)(v31 - v15);
          v33 = v26 - (v16 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v34 = *(_QWORD *)v31;
            v31 -= 8;
            *(_QWORD *)&v32[(_QWORD)v22] = v34;
            v32 -= 8;
            v33 += 8;
          }
          while (v33);
          v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
          if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_37;
          goto LABEL_35;
        }
        v23 -= v26;
        v14 -= v26;
      }
LABEL_35:
      v35 = v23 - 1;
      do
      {
        v36 = *--v14;
        *v35-- = v36;
      }
      while (v14 != v15);
LABEL_37:
      v14 = v15;
      v23 = v22;
LABEL_38:
      *((_QWORD *)this + 6) = v23;
      *((_QWORD *)this + 7) = v25;
      *((_QWORD *)this + 8) = v24;
      if (v14)
        operator delete(v14);
      return;
    }
    if (v12 < (unint64_t)(v14 - v15))
      *((_QWORD *)this + 7) = &v15[v12];
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v6;
  std::vector<unsigned int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (unsigned int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (unsigned int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = (__int128 *)(end - 4);
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<float>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

uint64_t bmMunkresGetTempBuffers(int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  unsigned int v29;

  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&v28);
  if (v29)
    bmMunkresGetTempBuffers(v8, v9, v10);
  v11 = v28;
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&v28);
  if (v29)
    bmMunkresGetTempBuffers(v12, v13, v14);
  v15 = a1 * a1 + 12 * a1 + v11 + 6;
  v16 = 4 * a1 * a1;
  v17 = ((4 * a1) | 3) + v16 + 2 * (((4 * a1) | 3) + a1) + v15 + v28;
  result = (v17 + 3);
  v28 = v17 + 3;
  if (a2)
  {
    if (result > a3)
      bmMunkresGetTempBuffers();
    if (!a4)
      bmMunkresGetTempBuffers();
    v29 = a1 * a1 + 12 * a1 + v11 + 6;
    if (result < v15)
      rtcv::simImageChMean(result, v13, v14);
    *(_DWORD *)(a4 + 8) = v15;
    *(_QWORD *)a4 = a2;
    v19 = a2 + v15;
    v20 = a1 - a2;
    v29 = a1 - a2 + v19;
    if (result < v29)
      rtcv::simImageChMean(result, v13, v14);
    *(_QWORD *)(a4 + 16) = v19;
    v21 = a2 + (v20 + v19);
    v29 = v20 + v21;
    if (result < v20 + (int)v21)
      rtcv::simImageChMean(result, v13, v14);
    *(_QWORD *)(a4 + 24) = v21;
    v22 = (a2 + (v20 + v21) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v23 = 4 * a1 - a2;
    v29 = v22 + v23;
    if (result < (int)v22 + v23)
      rtcv::simImageChMean(result, v13, v14);
    *(_QWORD *)(a4 + 32) = v22;
    v24 = (a2 + (v22 + v23) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v29 = v24 + v23;
    if (result < (int)v24 + v23)
      rtcv::simImageChMean(result, v13, v14);
    *(_DWORD *)(a4 + 48) = 4 * a1;
    *(_QWORD *)(a4 + 40) = v24;
    v25 = (a2 + (v24 + v23) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v26 = v25 - a2 + v16;
    v29 = v26;
    if (result < v26)
      rtcv::simImageChMean(result, v13, v14);
    *(_QWORD *)(a4 + 56) = v25;
    v27 = (a2 + v26 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v29 = v27 + v23;
    if (result < (int)v27 + v23)
      rtcv::simImageChMean(result, v13, v14);
    *(_QWORD *)(a4 + 64) = v27;
  }
  return result;
}

void BmMixedBufSize::BmMixedBufSize(BmMixedBufSize *this)
{
  *(_QWORD *)this = 0;
}

{
  *(_QWORD *)this = 0;
}

uint64_t bmMunkresTempBytes(int a1)
{
  return bmMunkresGetTempBuffers(a1, 0, 0, 0);
}

float ft::KalmanTrack::KalmanTrack(ft::Track *a1, const uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  int32x2_t v6;
  unsigned __int32 v7;
  float v8;
  float result;

  ft::Track::Track(a1, a2);
  *(_QWORD *)v4 = &off_24C55E820;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 264) = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 280) = v5;
  *(_OWORD *)(v4 + 368) = xmmword_20CCA9A40;
  *(_OWORD *)(v4 + 384) = xmmword_20CCA9A50;
  *(_OWORD *)(v4 + 400) = xmmword_20CCA9A60;
  *(_OWORD *)(v4 + 416) = xmmword_20CCA9A70;
  *(_QWORD *)(v4 + 432) = 1065353216;
  *(_QWORD *)(v4 + 440) = 0x3F80000000000000;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 488) = 0;
  *(_OWORD *)(v4 + 496) = xmmword_20CCA9A40;
  *(_OWORD *)(v4 + 512) = xmmword_20CCA9A50;
  *(_OWORD *)(v4 + 528) = xmmword_20CCA9A60;
  *(_OWORD *)(v4 + 544) = xmmword_20CCA9A70;
  *(_QWORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 448) = 1065353216;
  *(_QWORD *)(v4 + 456) = 0x3F80000000000000;
  *(_OWORD *)(v4 + 304) = xmmword_20CCA9A40;
  *(_OWORD *)(v4 + 320) = xmmword_20CCA9A50;
  *(_OWORD *)(v4 + 336) = xmmword_20CCA9A80;
  *(_OWORD *)(v4 + 352) = xmmword_20CCA9A90;
  v6 = vdup_lane_s32((int32x2_t)COERCE_UNSIGNED_INT(*(float *)(a3 + 8) * *(float *)(a3 + 8)), 0);
  v7 = v6.i32[0];
  v6.i32[0] = 0;
  *(_QWORD *)(v4 + 432) = v7;
  *(int32x2_t *)(v4 + 440) = v6;
  v6.i32[0] = *(_DWORD *)(a3 + 12);
  v8 = *(float *)(a3 + 16);
  *(_OWORD *)(v4 + 400) = xmmword_20CCA9A60;
  *(_OWORD *)(v4 + 416) = xmmword_20CCA9A70;
  *(_OWORD *)(v4 + 368) = COERCE_UNSIGNED_INT(*(float *)v6.i32 * *(float *)v6.i32);
  *(_OWORD *)(v4 + 384) = xmmword_20CCA9A50;
  *(float *)(v4 + 388) = *(float *)v6.i32 * *(float *)v6.i32;
  result = v8 * v8;
  *(float *)(v4 + 408) = v8 * v8;
  *(float *)(v4 + 428) = v8 * v8;
  return result;
}

{
  uint64_t v4;
  __int128 v5;
  int32x2_t v6;
  unsigned __int32 v7;
  float v8;
  float result;

  ft::Track::Track(a1, a2);
  *(_QWORD *)v4 = &off_24C55E820;
  v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v4 + 264) = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 280) = v5;
  *(_OWORD *)(v4 + 368) = xmmword_20CCA9A40;
  *(_OWORD *)(v4 + 384) = xmmword_20CCA9A50;
  *(_OWORD *)(v4 + 400) = xmmword_20CCA9A60;
  *(_OWORD *)(v4 + 416) = xmmword_20CCA9A70;
  *(_QWORD *)(v4 + 432) = 1065353216;
  *(_QWORD *)(v4 + 440) = 0x3F80000000000000;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 488) = 0;
  *(_OWORD *)(v4 + 496) = xmmword_20CCA9A40;
  *(_OWORD *)(v4 + 512) = xmmword_20CCA9A50;
  *(_OWORD *)(v4 + 528) = xmmword_20CCA9A60;
  *(_OWORD *)(v4 + 544) = xmmword_20CCA9A70;
  *(_QWORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 448) = 1065353216;
  *(_QWORD *)(v4 + 456) = 0x3F80000000000000;
  *(_OWORD *)(v4 + 304) = xmmword_20CCA9A40;
  *(_OWORD *)(v4 + 320) = xmmword_20CCA9A50;
  *(_OWORD *)(v4 + 336) = xmmword_20CCA9A80;
  *(_OWORD *)(v4 + 352) = xmmword_20CCA9A90;
  v6 = vdup_lane_s32((int32x2_t)COERCE_UNSIGNED_INT(*(float *)(a3 + 8) * *(float *)(a3 + 8)), 0);
  v7 = v6.i32[0];
  v6.i32[0] = 0;
  *(_QWORD *)(v4 + 432) = v7;
  *(int32x2_t *)(v4 + 440) = v6;
  v6.i32[0] = *(_DWORD *)(a3 + 12);
  v8 = *(float *)(a3 + 16);
  *(_OWORD *)(v4 + 400) = xmmword_20CCA9A60;
  *(_OWORD *)(v4 + 416) = xmmword_20CCA9A70;
  *(_OWORD *)(v4 + 368) = COERCE_UNSIGNED_INT(*(float *)v6.i32 * *(float *)v6.i32);
  *(_OWORD *)(v4 + 384) = xmmword_20CCA9A50;
  *(float *)(v4 + 388) = *(float *)v6.i32 * *(float *)v6.i32;
  result = v8 * v8;
  *(float *)(v4 + 408) = v8 * v8;
  *(float *)(v4 + 428) = v8 * v8;
  return result;
}

void ft::KalmanTrack::~KalmanTrack(ft::KalmanTrack *this)
{
  ft::Track::~Track(this);
  JUMPOUT(0x212B93F04);
}

float64x2_t ft::KalmanTrack::SyncFromFilter(ft::KalmanTrack *this)
{
  float v2;
  double v3;
  float64x2_t result;

  v2 = 2.0
     / (expf((float)-sqrtf((float)((float)(*((float *)this + 124) + *((float *)this + 129)) + *((float *)this + 134))+ *((float *)this + 139))/ *((float *)this + 73))+ 1.0)+ -1.0;
  v3 = 1.0 - v2;
  *((double *)this + 31) = v3;
  *((_BYTE *)this + 240) = v3 < *((float *)this + 72);
  __asm { FMOV            V2.2D, #-0.5 }
  result = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 480)), vmulq_f64(*(float64x2_t *)((char *)this + 40), _Q2));
  *(float64x2_t *)((char *)this + 24) = result;
  return result;
}

__n128 ft::KalmanTrack::UpdateTimeDelta(ft::KalmanTrack *this, const Frame *a2)
{
  double v4;
  float v5;
  uint64_t v6;
  __n128 result;
  std::runtime_error *exception;
  CMTime v9;
  CMTime lhs;
  CMTime time;

  if ((*((_BYTE *)this + 572) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Prior time step not established.");
    goto LABEL_6;
  }
  if ((*((_BYTE *)a2 + 12) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Frame has invalid timestamp.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v4 = *((float *)this + 71);
  *(_OWORD *)&lhs.value = *(_OWORD *)a2;
  lhs.epoch = *((_QWORD *)a2 + 2);
  v9 = *(CMTime *)((char *)this + 560);
  CMTimeSubtract(&time, &lhs, &v9);
  v5 = CMTimeGetSeconds(&time) * v4;
  *((float *)this + 84) = v5;
  *((float *)this + 89) = v5;
  v6 = *((_QWORD *)a2 + 2);
  result = *(__n128 *)a2;
  *((_OWORD *)this + 35) = *(_OWORD *)a2;
  *((_QWORD *)this + 72) = v6;
  return result;
}

void sub_20CC73744(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CC73758(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float64x2_t ft::KalmanTrack::PredictState(ft::KalmanTrack *this, const Frame *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  float v19;
  double v20;
  float64x2_t result;
  float32x4_t v27;

  ft::KalmanTrack::UpdateTimeDelta(this, a2);
  v4 = *((float32x4_t *)this + 19);
  v3 = *((float32x4_t *)this + 20);
  v6 = *((float32x4_t *)this + 21);
  v5 = *((float32x4_t *)this + 22);
  v27 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*((_OWORD *)this + 30))), v3, *(float32x2_t *)((char *)this + 480), 1), v6, *((float32x4_t *)this + 30), 2), v5, *((float32x4_t *)this + 30), 3);
  v7 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*((_OWORD *)this + 31))), v3, *(float32x2_t *)((char *)this + 496), 1), v6, *((float32x4_t *)this + 31), 2), v5, *((float32x4_t *)this + 31), 3);
  v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*((_OWORD *)this + 32))), v3, *(float32x2_t *)((char *)this + 512), 1), v6, *((float32x4_t *)this + 32), 2), v5, *((float32x4_t *)this + 32), 3);
  v9 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*((_OWORD *)this + 33))), v3, *(float32x2_t *)((char *)this + 528), 1), v6, *((float32x4_t *)this + 33), 2), v5, *((float32x4_t *)this + 33), 3);
  v10 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*((_OWORD *)this + 34))), v3, *(float32x2_t *)((char *)this + 544), 1), v6, *((float32x4_t *)this + 34), 2), v5, *((float32x4_t *)this + 34), 3);
  v11 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v7, v4.f32[0]), v8, v3.f32[0]), v9, v6.f32[0]), v10, v5.f32[0]);
  v12 = vmlaq_lane_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v7, *(float32x2_t *)v4.f32, 1), v8, *(float32x2_t *)v3.f32, 1), v9, *(float32x2_t *)v6.f32, 1), v10, *(float32x2_t *)v5.f32, 1);
  v13 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v4, 2), v8, v3, 2), v9, v6, 2), v10, v5, 2);
  v14 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v7, v4, 3), v8, v3, 3), v9, v6, 3), v10, v5, 3);
  v15 = vaddq_f32(*((float32x4_t *)this + 23), v11);
  v16 = vaddq_f32(*((float32x4_t *)this + 24), v12);
  v17 = (int32x4_t)vaddq_f32(*((float32x4_t *)this + 25), v13);
  v18 = (int32x4_t)vaddq_f32(*((float32x4_t *)this + 26), v14);
  *((float32x4_t *)this + 30) = v27;
  *((float32x4_t *)this + 31) = v15;
  *((float32x4_t *)this + 32) = v16;
  *((int32x4_t *)this + 33) = v17;
  *((int32x4_t *)this + 34) = v18;
  v19 = 2.0
      / (expf((float)-sqrtf(vaddq_f32(vaddq_f32(vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)), (float32x4_t)vdupq_laneq_s32(v17, 2)), (float32x4_t)vdupq_laneq_s32(v18, 3)).f32[0])/ *((float *)this + 73))+ 1.0)+ -1.0;
  v20 = 1.0 - v19;
  *((double *)this + 31) = v20;
  *((_BYTE *)this + 240) = v20 < *((float *)this + 72);
  __asm { FMOV            V2.2D, #-0.5 }
  result = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v27.f32), vmulq_f64(*(float64x2_t *)((char *)this + 40), _Q2));
  *(float64x2_t *)((char *)this + 24) = result;
  return result;
}

float64x2_t ft::KalmanTrack::UpdateState(ft::KalmanTrack *this, uint64_t a2, float64x2_t *a3)
{
  float64x2_t v4;
  __int128 v5;
  float v6;
  double v7;
  float64x2_t result;
  float v14;
  float v15;
  float32x2_t v16;
  float32x2_t v17;

  v4 = *a3;
  *(float32x2_t *)&v5 = vcvt_f32_f64(vaddq_f64(*a3, vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(a3[1]), (float32x2_t)0x3F0000003F000000))));
  *(float64x2_t *)((char *)this + 40) = a3[1];
  *(float64x2_t *)((char *)this + 24) = v4;
  if (*((_BYTE *)this + 232))
  {
    v16 = (float32x2_t)v5;
    ft::KalmanTrack::UpdateTimeDelta(this, (const Frame *)a2);
    v17 = v16;
    ft::KalmanFilter<float,4ul,2ul>::Update((uint64_t)this + 304, &v17);
    v6 = 2.0
       / (expf((float)-sqrtf((float)((float)(*((float *)this + 124) + *((float *)this + 129)) + *((float *)this + 134))+ *((float *)this + 139))/ *((float *)this + 73))+ 1.0)+ -1.0;
    v7 = 1.0 - v6;
    *((double *)this + 31) = v7;
    *((_BYTE *)this + 240) = v7 < *((float *)this + 72);
    __asm { FMOV            V2.2D, #-0.5 }
    result = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)((char *)this + 480)), vmulq_f64(*(float64x2_t *)((char *)this + 40), _Q2));
    *(float64x2_t *)((char *)this + 24) = result;
  }
  else
  {
    *((_QWORD *)&v5 + 1) = vextq_s8(*((int8x16_t *)this + 30), *((int8x16_t *)this + 30), 8uLL).u64[0];
    v14 = *((float *)this + 66);
    v15 = *((float *)this + 67);
    *((_OWORD *)this + 32) = xmmword_20CCA9A50;
    *((_OWORD *)this + 33) = xmmword_20CCA9A60;
    *((_OWORD *)this + 34) = xmmword_20CCA9A70;
    *((_OWORD *)this + 30) = v5;
    *((_OWORD *)this + 31) = COERCE_UNSIGNED_INT(v14 * v14);
    *((float *)this + 129) = v14 * v14;
    *((float *)this + 134) = v15 * v15;
    *((float *)this + 139) = v15 * v15;
    result = *(float64x2_t *)a2;
    *((_QWORD *)this + 72) = *(_QWORD *)(a2 + 16);
    *((float64x2_t *)this + 35) = result;
  }
  return result;
}

uint64_t ft::KalmanFilter<float,4ul,2ul>::Update(uint64_t a1, float32x2_t *a2)
{
  float32x2_t v2;
  uint64_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x2_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x2_t v16;
  simd_float2x2 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  float32x2_t v42;
  float32x4_t v43;

  v2 = *a2;
  v3 = a1 + 176;
  v43 = *(float32x4_t *)(a1 + 176);
  v4 = *(float32x2_t *)(a1 + 144);
  v5 = *(float32x2_t *)(a1 + 152);
  v6 = *(float32x2_t *)(a1 + 160);
  v7 = *(float32x2_t *)(a1 + 168);
  v8 = *(float32x4_t *)(a1 + 192);
  v9 = *(float32x4_t *)(a1 + 208);
  v10 = *(float32x4_t *)(a1 + 224);
  v11 = *(float32x4_t *)(a1 + 240);
  v12 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v4, v8.f32[0]), v5, *(float32x2_t *)v8.f32, 1), v6, v8, 2), v7, v8, 3);
  v13 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v4, v9.f32[0]), v5, *(float32x2_t *)v9.f32, 1), v6, v9, 2), v7, v9, 3);
  v14 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v4, v10.f32[0]), v5, *(float32x2_t *)v10.f32, 1), v6, v10, 2), v7, v10, 3);
  v15 = vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v4, v11.f32[0]), v5, *(float32x2_t *)v11.f32, 1), v6, v11, 2), v7, v11, 3);
  v16 = vadd_f32(*(float32x2_t *)(a1 + 128), vmla_f32(vmla_f32(vmla_f32(vmul_n_f32(v12, v4.f32[0]), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v5, 0), v13), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v6, 0), v14), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v7, 0), v15));
  v39 = v4;
  v42 = v5;
  v40 = v7;
  v41 = v6;
  v37 = vmlaq_lane_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v8, v4, 1), v9, v5, 1), v10, v6, 1), v11, v7, 1);
  v38 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v4.f32[0]), v9, v5.f32[0]), v10, v6.f32[0]), v11, v7.f32[0]);
  *(float32x2_t *)v8.f32 = vadd_f32(*(float32x2_t *)(a1 + 136), vmla_f32(vmla_f32(vmla_f32(vmul_lane_f32(v12, v4, 1), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v5, 1), v13), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v6, 1), v14), (float32x2_t)*(_OWORD *)&vdupq_lane_s32((int32x2_t)v7, 1), v15));
  v17 = __invert_f2(*(simd_float2x2 *)((char *)&v8 - 8));
  v18 = vmlaq_lane_f32(vmulq_n_f32(v38, v17.columns[0].f32[0]), v37, (float32x2_t)v17.columns[0], 1);
  v19 = vmlaq_lane_f32(vmulq_n_f32(v38, v17.columns[1].f32[0]), v37, (float32x2_t)v17.columns[1], 1);
  v20 = vsub_f32(v2, vmla_laneq_f32(vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(v39, v43.f32[0]), v42, *(float32x2_t *)v43.f32, 1), v41, v43, 2), v40, v43, 3));
  v21 = vsubq_f32((float32x4_t)xmmword_20CCA9A40, vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_QWORD *)(v3 - 32))), v19, *(float32x2_t *)(v3 - 32), 1));
  v22 = vsubq_f32((float32x4_t)xmmword_20CCA9A50, vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_QWORD *)(v3 - 24))), v19, *(float32x2_t *)(v3 - 24), 1));
  v23 = vsubq_f32((float32x4_t)xmmword_20CCA9A60, vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_QWORD *)(v3 - 16))), v19, *(float32x2_t *)(v3 - 16), 1));
  v24 = vsubq_f32((float32x4_t)xmmword_20CCA9A70, vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_QWORD *)(v3 - 8))), v19, *(float32x2_t *)(v3 - 8), 1));
  v25 = vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_QWORD *)(v3 - 48))), v19, *(float32x2_t *)(v3 - 48), 1);
  v26 = vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(*(_QWORD *)(v3 - 40))), v19, *(float32x2_t *)(v3 - 40), 1);
  v27 = vmlaq_laneq_f32(vmulq_laneq_f32(v25, v18, 2), v26, v19, 2);
  v28 = vmlaq_laneq_f32(vmulq_laneq_f32(v25, v18, 3), v26, v19, 3);
  v29 = vaddq_f32(vmlaq_n_f32(vmulq_n_f32(v25, v18.f32[0]), v26, v19.f32[0]), (float32x4_t)0);
  v30 = vaddq_f32(vmlaq_lane_f32(vmulq_lane_f32(v25, *(float32x2_t *)v18.f32, 1), v26, *(float32x2_t *)v19.f32, 1), (float32x4_t)0);
  v31 = vaddq_f32(v28, (float32x4_t)0);
  v32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)(v3 + 16))), v22, *(float32x2_t *)(v3 + 16), 1), v23, *(float32x4_t *)(v3 + 16), 2), v24, *(float32x4_t *)(v3 + 16), 3);
  v33 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)(v3 + 32))), v22, *(float32x2_t *)(v3 + 32), 1), v23, *(float32x4_t *)(v3 + 32), 2), v24, *(float32x4_t *)(v3 + 32), 3);
  v34 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)(v3 + 48))), v22, *(float32x2_t *)(v3 + 48), 1), v23, *(float32x4_t *)(v3 + 48), 2), v24, *(float32x4_t *)(v3 + 48), 3);
  v35 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)(v3 + 64))), v22, *(float32x2_t *)(v3 + 64), 1), v23, *(float32x4_t *)(v3 + 64), 2), v24, *(float32x4_t *)(v3 + 64), 3);
  *(float32x4_t *)v3 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v20.f32[0]), v19, v20, 1), *(float32x4_t *)v3);
  *(float32x4_t *)(v3 + 16) = vaddq_f32(v29, vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v32, v21.f32[0]), v33, v22.f32[0]), v34, v23.f32[0]), v35, v24.f32[0]));
  *(float32x4_t *)(v3 + 32) = vaddq_f32(v30, vmlaq_lane_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32(v32, *(float32x2_t *)v21.f32, 1), v33, *(float32x2_t *)v22.f32, 1), v34, *(float32x2_t *)v23.f32, 1), v35, *(float32x2_t *)v24.f32, 1));
  *(float32x4_t *)(v3 + 48) = vaddq_f32(vaddq_f32(v27, (float32x4_t)0), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v32, v21, 2), v33, v22, 2), v34, v23, 2), v35, v24, 2));
  *(float32x4_t *)(v3 + 64) = vaddq_f32(v31, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v32, v21, 3), v33, v22, 3), v34, v23, 3), v35, v24, 3));
  return v3;
}

const char *ft::KalmanTrack::Kind(ft::KalmanTrack *this)
{
  return "kalman";
}

uint64_t AcAttrNode::AcAttrNode(uint64_t a1, _DWORD *a2)
{
  bzero((void *)a1, 0x31CuLL);
  *(_QWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *a2 = 1;
  return a1;
}

{
  bzero((void *)a1, 0x31CuLL);
  *(_QWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *a2 = 1;
  return a1;
}

void AcAttrNode::~AcAttrNode(AcAttrNode *this)
{
  AcAttrNode::releaseBuffers(this);
}

{
  AcAttrNode::releaseBuffers(this);
}

uint64_t AcAttrNode::releaseBuffers(AcAttrNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v2 = *((_QWORD *)this + 104);
  if (v2)
  {
    MEMORY[0x212B93EEC](v2, 0x1000C8052888210);
    *((_QWORD *)this + 104) = 0;
  }
  v3 = *((_QWORD *)this + 103);
  if (v3)
  {
    MEMORY[0x212B93EEC](v3, 0x1000C8052888210);
    *((_QWORD *)this + 103) = 0;
  }
  v4 = *((_QWORD *)this + 102);
  if (v4)
  {
    MEMORY[0x212B93EEC](v4, 0x1000C8052888210);
    *((_QWORD *)this + 102) = 0;
  }
  v5 = *((_QWORD *)this + 101);
  if (v5)
  {
    MEMORY[0x212B93EEC](v5, 0x1000C8052888210);
    *((_QWORD *)this + 101) = 0;
  }
  v6 = *((_QWORD *)this + 100);
  if (v6)
  {
    MEMORY[0x212B93EEC](v6, 0x1000C8052888210);
    *((_QWORD *)this + 100) = 0;
  }
  v7 = *((_QWORD *)this + 105);
  if (v7)
  {
    MEMORY[0x212B93EEC](v7, 0x1000C8052888210);
    *((_QWORD *)this + 105) = 0;
  }
  v8 = *((_QWORD *)this + 106);
  if (v8)
  {
    MEMORY[0x212B93EEC](v8, 0x1000C8052888210);
    *((_QWORD *)this + 106) = 0;
  }
  v9 = *((_QWORD *)this + 107);
  if (v9)
  {
    MEMORY[0x212B93EEC](v9, 0x1000C8052888210);
    *((_QWORD *)this + 107) = 0;
  }
  v10 = *((_QWORD *)this + 108);
  if (v10)
  {
    MEMORY[0x212B93EEC](v10, 0x1000C8052888210);
    *((_QWORD *)this + 108) = 0;
  }
  v11 = *((_QWORD *)this + 109);
  if (v11)
  {
    MEMORY[0x212B93EEC](v11, 0x1000C8052888210);
    *((_QWORD *)this + 109) = 0;
  }
  v12 = *((_QWORD *)this + 110);
  if (v12)
  {
    MEMORY[0x212B93EEC](v12, 0x1000C8052888210);
    *((_QWORD *)this + 110) = 0;
  }
  result = *((_QWORD *)this + 111);
  if (result)
  {
    result = MEMORY[0x212B93EEC](result, 0x1000C8052888210);
    *((_QWORD *)this + 111) = 0;
  }
  return result;
}

uint64_t AcAttrNode::init(uint64_t a1, const char *a2, _DWORD *a3)
{
  uint64_t result;
  void *v6;
  const char *v7;
  uint64_t v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  float32x4_t *v30;
  float32x4_t v31;
  __int128 v32;
  float v33;
  __int128 v34;
  float v35;
  __int128 v36;
  float *v37;
  float *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  float32x4_t *v47;
  float32x4_t v48;
  __int128 v49;
  float v50;
  __int128 v51;
  float v52;
  __int128 v53;
  float *v54;
  float *v55;
  uint64_t v56;
  float v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float v63;
  __int128 v64;
  __int128 v65;
  float v66;
  __int128 v67;
  __int128 v68;
  float32x4_t v69;
  float32x4_t v70;

  if (*a3 != 1)
    return 4294967289;
  AcAttrNode::releaseBuffers((AcAttrNode *)a1);
  if (a2)
  {
    v6 = (void *)a1;
    v7 = a2;
  }
  else
  {
    v7 = "1.7.3";
    v6 = (void *)a1;
  }
  memcpy(v6, v7, 0x31CuLL);
  v8 = *(unsigned int *)(a1 + 152);
  v9 = (float *)operator new[]();
  *(_QWORD *)(a1 + 808) = v9;
  if ((_DWORD)v8)
  {
    v10 = *(float *)(a1 + 36);
    v11 = (float)(*(float *)(a1 + 32) - v10) / (float)v8;
    v12 = v10 + (float)(v11 * 0.5);
    do
    {
      *v9++ = v12;
      v12 = v11 + v12;
      --v8;
    }
    while (v8);
  }
  v13 = *(unsigned int *)(a1 + 148);
  v14 = (float *)operator new[]();
  *(_QWORD *)(a1 + 800) = v14;
  if ((_DWORD)v13)
  {
    v15 = *(float *)(a1 + 52);
    v16 = (float)(*(float *)(a1 + 48) - v15) / (float)v13;
    v17 = v15 + (float)(v16 * 0.5);
    do
    {
      *v14++ = v17;
      v17 = v16 + v17;
      --v13;
    }
    while (v13);
  }
  v18 = *(unsigned int *)(a1 + 156);
  v19 = (float *)operator new[]();
  *(_QWORD *)(a1 + 816) = v19;
  if ((_DWORD)v18)
  {
    v20 = *(float *)(a1 + 44);
    v21 = (float)(*(float *)(a1 + 40) - v20) / (float)v18;
    v22 = v20 + (float)(v21 * 0.5);
    v23 = v18;
    do
    {
      *v19++ = v22;
      v22 = v21 + v22;
      --v23;
    }
    while (v23);
    v24 = operator new[]();
    v25 = v24;
    v26 = 0;
    *(_QWORD *)(a1 + 824) = v24;
    v27 = *(_QWORD *)(a1 + 816);
    if (v18 < 4)
      goto LABEL_21;
    if ((unint64_t)(v24 - v27) < 0x10)
      goto LABEL_21;
    v26 = v18 & 0xFFFFFFFC;
    v59 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
    v61 = (float32x4_t)vdupq_n_s32(0x43340000u);
    v28 = v26;
    v29 = (_OWORD *)v24;
    v30 = *(float32x4_t **)(a1 + 816);
    do
    {
      v31 = *v30++;
      v69 = vmulq_f32(vdivq_f32(v31, v61), v59);
      v63 = cosf(v69.f32[1]);
      *(float *)&v32 = cosf(v69.f32[0]);
      *((float *)&v32 + 1) = v63;
      v64 = v32;
      v33 = cosf(v69.f32[2]);
      v34 = v64;
      *((float *)&v34 + 2) = v33;
      v65 = v34;
      v35 = cosf(v69.f32[3]);
      v36 = v65;
      *((float *)&v36 + 3) = v35;
      *v29++ = v36;
      v28 -= 4;
    }
    while (v28);
    if (v26 != v18)
    {
LABEL_21:
      v37 = (float *)(v27 + 4 * v26);
      v38 = (float *)(v25 + 4 * v26);
      v39 = v18 - v26;
      do
      {
        v40 = *v37++;
        *v38++ = cosf((float)(v40 / 180.0) * 3.1416);
        --v39;
      }
      while (v39);
    }
    v41 = operator new[]();
    v42 = v41;
    v43 = 0;
    *(_QWORD *)(a1 + 832) = v41;
    v44 = *(_QWORD *)(a1 + 816);
    if (v18 < 4)
      goto LABEL_28;
    if ((unint64_t)(v41 - v44) < 0x10)
      goto LABEL_28;
    v43 = v18 & 0xFFFFFFFC;
    v60 = (float32x4_t)vdupq_n_s32(0x40490FDBu);
    v62 = (float32x4_t)vdupq_n_s32(0x43340000u);
    v45 = v43;
    v46 = (_OWORD *)v41;
    v47 = *(float32x4_t **)(a1 + 816);
    do
    {
      v48 = *v47++;
      v70 = vmulq_f32(vdivq_f32(v48, v62), v60);
      v66 = sinf(v70.f32[1]);
      *(float *)&v49 = sinf(v70.f32[0]);
      *((float *)&v49 + 1) = v66;
      v67 = v49;
      v50 = sinf(v70.f32[2]);
      v51 = v67;
      *((float *)&v51 + 2) = v50;
      v68 = v51;
      v52 = sinf(v70.f32[3]);
      v53 = v68;
      *((float *)&v53 + 3) = v52;
      *v46++ = v53;
      v45 -= 4;
    }
    while (v45);
    if (v43 != v18)
    {
LABEL_28:
      v54 = (float *)(v44 + 4 * v43);
      v55 = (float *)(v42 + 4 * v43);
      v56 = v18 - v43;
      do
      {
        v57 = *v54++;
        *v55++ = sinf((float)(v57 / 180.0) * 3.1416);
        --v56;
      }
      while (v56);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 824) = operator new[]();
    *(_QWORD *)(a1 + 832) = operator new[]();
  }
  *(_QWORD *)(a1 + 840) = operator new[]();
  *(_QWORD *)(a1 + 848) = operator new[]();
  *(_QWORD *)(a1 + 856) = operator new[]();
  *(_QWORD *)(a1 + 864) = operator new[]();
  *(_QWORD *)(a1 + 872) = operator new[]();
  *(_QWORD *)(a1 + 880) = operator new[]();
  v58 = operator new[]();
  result = 0;
  *(_QWORD *)(a1 + 888) = v58;
  return result;
}

void AcAttrNode::initBinCenters(AcAttrNode *this, float *a2, float a3, float a4, unsigned int a5)
{
  float v5;
  float v6;
  uint64_t v7;

  if (a5)
  {
    v5 = (float)(a3 - a4) / (float)a5;
    v6 = (float)(v5 * 0.5) + a4;
    v7 = a5;
    do
    {
      *a2++ = v6;
      v6 = v5 + v6;
      --v7;
    }
    while (v7);
  }
}

uint64_t AcAttrNode::preProcess(uint64_t a1, unsigned int a2, unsigned int a3, _DWORD *a4, float32x2_t *a5, unsigned int a6, _DWORD *a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10;
  _BYTE *v16;
  float32x2_t *v17;
  float32x2_t *v18;
  uint64_t v19;
  float32x2_t v20;
  float32x2_t v21;

  if (a6 >= 0xB)
    AcAttrNode::preProcess();
  LODWORD(v10) = a6;
  std::chrono::steady_clock::now();
  if (*a7 != 1)
    return 4294967289;
  *a9 = v10;
  if ((_DWORD)v10)
  {
    v16 = a7 + 2;
    v17 = a5 + 2;
    v18 = (float32x2_t *)(a9 + 101);
    v19 = (uint64_t)(a9 + 1);
    v10 = v10;
    do
    {
      v20 = vmul_n_f32(*v17, *(float *)(a1 + 64));
      v21 = vadd_f32(v17[-1], vmul_f32(vsub_f32(*v17, v20), (float32x2_t)0x3F0000003F000000));
      *v18 = v21;
      v18[1] = v20;
      v18 += 2;
      *v16++ = acCropResizeGenerateConfig(a2, a3, a4, *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), 1, v19, v21.f32[0], v21.f32[1], v20.f32[0], v20.f32[1]);
      v17 = (float32x2_t *)((char *)v17 + 92);
      v19 += 40;
      --v10;
    }
    while (v10);
  }
  return 0;
}

uint64_t AcAttrNode::postProcess(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, unsigned int a6, int8x8_t a7, double a8, float32x4_t a9, __n128 a10, float32x4_t a11)
{
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  _DWORD *v18;
  unint64_t *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  _DWORD *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int8x8_t v45;
  float32x4_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x8_t v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int32 *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int32 *v61;
  float32x4_t v62;
  uint64_t v63;
  uint64_t result;
  __n128 v65;
  __n128 v66;
  __n128 v67;
  int v68;
  float v69;
  int v70;
  _BOOL4 v71;
  float v72;
  float v73;
  _BOOL4 v74;
  int v75;
  float *v76;
  uint64_t v77;
  float32x2_t v78;
  float32x2_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  _QWORD v86[2];
  __int16 v87;
  float v88[2];
  float v89[2];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  if (*a4 != 1)
    return 4294967289;
  if ((_DWORD)a3 != 7)
    return 4294967292;
  if (!*((_BYTE *)a4 + a6 + 8))
  {
    result = 0;
    *(_WORD *)(a5 + 81) = 0;
    *(_BYTE *)(a5 + 83) = 0;
    return result;
  }
  v13 = 0;
  a7.i32[0] = 0;
  while (1)
  {
    v14 = (__int128 *)(a2 + 24 * v13);
    v15 = a1 + 24 * v13;
    v16 = *v14;
    *(_QWORD *)(v15 + 912) = *((_QWORD *)v14 + 2);
    *(_OWORD *)(v15 + 896) = v16;
    v18 = (_DWORD *)v14 + 5;
    v17 = *((_DWORD *)v14 + 5);
    if (v17 != 6)
      break;
LABEL_5:
    if (++v13 == 7)
    {
      *(_WORD *)(a5 + 81) = 257;
      *(_BYTE *)(a5 + 83) = 1;
      *(_DWORD *)(a5 + 36) = acAttrReduceSmile(a1 + 896, *(unsigned int *)(a1 + 20), a3);
      v87 = 0;
      *(_DWORD *)(a5 + 40) = acAttrReduceBlink(a1 + 920, *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28), (BOOL *)&v87 + 1, v65);
      *(_DWORD *)(a5 + 44) = acAttrReduceBlink(a1 + 944, *(unsigned int *)(a1 + 24), *(unsigned int *)(a1 + 28), (BOOL *)&v87, v66);
      v67.n128_f64[0] = acAttrReducePitch(a1 + 968, *(_QWORD *)(a1 + 800), *(unsigned int *)(a1 + 148));
      v69 = (float)v68;
      v70 = acAttrReduceYaw(a1 + 992, *(_QWORD *)(a1 + 808), *(unsigned int *)(a1 + 152), v67);
      v71 = (HIBYTE(v87) | v87) != 0;
      if (fabsf(v69) >= *(float *)(a1 + 60))
      {
        *(_QWORD *)(a5 + 40) = 0;
        *(_DWORD *)(a5 + 36) = 0;
      }
      else
      {
        v72 = fabsf((float)v70);
        v73 = *(float *)(a1 + 56);
        v74 = v72 >= v73 || (HIBYTE(v87) | v87) != 0;
        if (v74 && (*(_QWORD *)(a5 + 40) = 0, v72 >= v73))
        {
          *(_DWORD *)(a5 + 36) = 0;
        }
        else if (!v71)
        {
          if (!*(_DWORD *)(a1 + 1052)
            || (v75 = *(_DWORD *)(a1 + 1048)) == 0
            || (v76 = *(float **)(a1 + 1040), v88[0] = *v76, v75 == 1)
            || (v77 = *(unsigned int *)(a1 + 1056), v88[1] = *(float *)((char *)v76 + v77), v75 == 2)
            || (v89[0] = *(float *)((char *)v76 + (2 * v77)), v75 == 3))
          {
            AcAttrNode::postProcess();
          }
          v89[1] = *(float *)((char *)v76 + (3 * v77));
          v78 = *(float32x2_t *)(a5 + 16);
          v79 = vmul_n_f32(v78, *(float *)(a1 + 64));
          v86[0] = vadd_f32(*(float32x2_t *)(a5 + 8), vmul_f32(vsub_f32(v78, v79), (float32x2_t)0x3F0000003F000000));
          v86[1] = v79;
          *(float *)(a5 + 48) = acAttrEyeLoc(v89, (float *)v86);
          *(_DWORD *)(a5 + 52) = v80;
          *(_DWORD *)(a5 + 56) = v81;
          *(_DWORD *)(a5 + 60) = v82;
          *(float *)(a5 + 64) = acAttrEyeLoc(v88, (float *)v86);
          *(_DWORD *)(a5 + 68) = v83;
          *(_DWORD *)(a5 + 72) = v84;
          *(_DWORD *)(a5 + 76) = v85;
          return 0;
        }
      }
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      return 0;
    }
  }
  v19 = (unint64_t *)(v15 + 896);
  if (v17 == 1)
  {
    v29 = (unsigned int *)(a1 + 24 * v13);
    v29[229] = 6;
    v30 = v29[227];
    v31 = (4 * v30);
    v29[228] = v31;
    v32 = *(_QWORD *)(a1 + 8 * v13 + 840);
    *v19 = v32;
    if (*v18 != 1)
      AcAttrNode::postProcess();
    v33 = *(_DWORD *)(a2 + 24 * v13 + 8);
    if (v33 != *(_DWORD *)(a1 + 24 * v13 + 904))
      AcAttrNode::postProcess();
    if (*(_DWORD *)(a2 + 24 * v13 + 12) != (_DWORD)v30)
      AcAttrNode::postProcess();
    if (v33 && (_DWORD)v30)
    {
      LODWORD(v16) = *(_DWORD *)(a1 + 4 * v13 + 192);
      v34 = *(unsigned int *)(a2 + 24 * v13 + 16);
      v35 = *(_QWORD *)v14;
      if (v30 >= 8)
      {
        v55 = 0;
        a3 = v30 & 0xFFFFFFF8;
        a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v16, 0);
        v56 = (unsigned __int32 *)(v35 + 4);
        v57 = v32;
        v58 = v35;
        do
        {
          v59 = 0;
          if (v57 < v35 + v30 + v55 * v34 && v58 < v32 + 4 * v30 + v55 * v31)
            goto LABEL_100;
          v61 = v56;
          do
          {
            a10.n128_u32[0] = *(v61 - 1);
            a11.i32[0] = *v61;
            a11 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.f32)));
            v62 = vmlaq_f32((float32x4_t)0, vcvtq_f32_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8((uint8x8_t)a10.n128_u64[0]))), a9);
            a10 = (__n128)vmlaq_f32((float32x4_t)0, a11, a9);
            v63 = v57 + v59;
            *(float32x4_t *)v63 = v62;
            *(__n128 *)(v63 + 16) = a10;
            v61 += 2;
            v59 += 32;
          }
          while (((4 * v30) & 0x3FFFFFFE0) != v59);
          v59 = v30 & 0xFFFFFFF8;
          if (a3 != v30)
          {
LABEL_100:
            do
            {
              a10.n128_u8[0] = *(_BYTE *)(v58 + v59);
              a10.n128_f32[0] = (float)(*(float *)&v16 * (float)a10.n128_u32[0]) + 0.0;
              *(_DWORD *)(v57 + 4 * v59++) = a10.n128_u32[0];
            }
            while (v30 != v59);
          }
          v58 += v34;
          v57 += v31;
          ++v55;
          v56 = (unsigned __int32 *)((char *)v56 + v34);
        }
        while ((_DWORD)v55 != v33);
      }
      else
      {
        v36 = (unsigned __int8 *)(v35 + 3);
        v37 = (_DWORD *)(v32 + 12);
        do
        {
          a9.i8[0] = *(v36 - 3);
          a9.f32[0] = (float)(*(float *)&v16 * (float)a9.u32[0]) + 0.0;
          *(v37 - 3) = a9.i32[0];
          if ((_DWORD)v30 != 1)
          {
            a9.i8[0] = *(v36 - 2);
            a9.f32[0] = (float)(*(float *)&v16 * (float)a9.u32[0]) + 0.0;
            *(v37 - 2) = a9.i32[0];
            if ((_DWORD)v30 != 2)
            {
              a9.i8[0] = *(v36 - 1);
              a9.f32[0] = (float)(*(float *)&v16 * (float)a9.u32[0]) + 0.0;
              *(v37 - 1) = a9.i32[0];
              if ((_DWORD)v30 != 3)
              {
                a9.i8[0] = *v36;
                a9.f32[0] = (float)(*(float *)&v16 * (float)a9.u32[0]) + 0.0;
                *v37 = a9.i32[0];
                if ((_DWORD)v30 != 4)
                {
                  a9.i8[0] = v36[1];
                  a9.f32[0] = (float)(*(float *)&v16 * (float)a9.u32[0]) + 0.0;
                  v37[1] = a9.i32[0];
                  if ((_DWORD)v30 != 5)
                  {
                    a9.i8[0] = v36[2];
                    a9.f32[0] = (float)(*(float *)&v16 * (float)a9.u32[0]) + 0.0;
                    v37[2] = a9.i32[0];
                    if ((_DWORD)v30 != 6)
                    {
                      a9.i8[0] = v36[3];
                      a9.f32[0] = (float)(*(float *)&v16 * (float)a9.u32[0]) + 0.0;
                      v37[3] = a9.i32[0];
                    }
                  }
                }
              }
            }
          }
          v36 += v34;
          v37 = (_DWORD *)((char *)v37 + v31);
          --v33;
        }
        while (v33);
      }
    }
    goto LABEL_5;
  }
  if (!v17)
  {
    v20 = (unsigned int *)(a1 + 24 * v13);
    v20[229] = 6;
    v21 = v20[227];
    v22 = (4 * v21);
    v20[228] = v22;
    v23 = *(_QWORD *)(a1 + 8 * v13 + 840);
    *v19 = v23;
    if (*v18)
      AcAttrNode::postProcess();
    v24 = *(_DWORD *)(a2 + 24 * v13 + 8);
    if (v24 != *(_DWORD *)(a1 + 24 * v13 + 904))
      AcAttrNode::postProcess();
    if (*(_DWORD *)(a2 + 24 * v13 + 12) != (_DWORD)v21)
      AcAttrNode::postProcess();
    if (!v24 || !(_DWORD)v21)
      goto LABEL_5;
    LODWORD(v16) = *(_DWORD *)(a1 + 4 * v13 + 192);
    v25 = *(unsigned int *)(a2 + 24 * v13 + 16);
    v26 = *(_QWORD *)v14;
    if (v21 < 8)
    {
      v27 = (unsigned __int8 *)(v26 + 3);
      v28 = (_DWORD *)(v23 + 12);
      do
      {
        a9.i8[0] = *(v27 - 3);
        a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
        a9.f32[0] = (float)(*(float *)&v16 * (float)a9.i32[0]) + 0.0;
        *(v28 - 3) = a9.i32[0];
        if ((_DWORD)v21 != 1)
        {
          a9.i8[0] = *(v27 - 2);
          a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
          a9.f32[0] = (float)(*(float *)&v16 * (float)a9.i32[0]) + 0.0;
          *(v28 - 2) = a9.i32[0];
          if ((_DWORD)v21 != 2)
          {
            a9.i8[0] = *(v27 - 1);
            a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
            a9.f32[0] = (float)(*(float *)&v16 * (float)a9.i32[0]) + 0.0;
            *(v28 - 1) = a9.i32[0];
            if ((_DWORD)v21 != 3)
            {
              a9.i8[0] = *v27;
              a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
              a9.f32[0] = (float)(*(float *)&v16 * (float)a9.i32[0]) + 0.0;
              *v28 = a9.i32[0];
              if ((_DWORD)v21 != 4)
              {
                a9.i8[0] = v27[1];
                a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
                a9.f32[0] = (float)(*(float *)&v16 * (float)a9.i32[0]) + 0.0;
                v28[1] = a9.i32[0];
                if ((_DWORD)v21 != 5)
                {
                  a9.i8[0] = v27[2];
                  a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
                  a9.f32[0] = (float)(*(float *)&v16 * (float)a9.i32[0]) + 0.0;
                  v28[2] = a9.i32[0];
                  if ((_DWORD)v21 != 6)
                  {
                    a9.i8[0] = v27[3];
                    a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
                    a9.f32[0] = (float)(*(float *)&v16 * (float)a9.i32[0]) + 0.0;
                    v28[3] = a9.i32[0];
                  }
                }
              }
            }
          }
        }
        v27 += v25;
        v28 = (_DWORD *)((char *)v28 + v22);
        --v24;
      }
      while (v24);
      goto LABEL_5;
    }
    v38 = 0;
    a3 = v21 & 0xFFFFFFF0;
    a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v16, 0);
    v39 = v21 & 0xFFFFFFF8;
    v40 = v23;
    v41 = v26;
    while (1)
    {
      if (v40 >= v26 + v21 + v38 * v25 || v41 >= v23 + 4 * v21 + v38 * v22)
      {
        if (v21 < 0x10)
        {
          v43 = 0;
LABEL_48:
          v44 = 4 * v43;
          do
          {
            v45 = *(int8x8_t *)(v41 + v43);
            a11 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v45, a7), 8uLL), 8uLL)));
            v46 = vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v45, a7), 8uLL), 8uLL))), a9);
            a10 = (__n128)vmlaq_f32((float32x4_t)0, a11, a9);
            v47 = v40 + v44;
            *(float32x4_t *)v47 = v46;
            *(__n128 *)(v47 + 16) = a10;
            v43 += 8;
            v44 += 32;
          }
          while (v39 != v43);
          v48 = v21 & 0xFFFFFFF8;
          if (v39 == v21)
            goto LABEL_40;
          goto LABEL_51;
        }
        v49 = 0;
        v50 = (int8x16_t *)v41;
        do
        {
          v51 = *v50++;
          a11 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v51.i8, a7), 8uLL), 8uLL)));
          v52 = (int8x8_t)vextq_s8(v51, v51, 8uLL).u64[0];
          v53 = vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v52, a7), 8uLL), 8uLL))), a9);
          a10 = (__n128)vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v52, a7), 8uLL), 8uLL))), a9);
          v54 = v40 + v49;
          *(float32x4_t *)v54 = vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v51.i8, a7), 8uLL), 8uLL))), a9);
          *(float32x4_t *)(v54 + 16) = vmlaq_f32((float32x4_t)0, a11, a9);
          *(float32x4_t *)(v54 + 32) = v53;
          *(__n128 *)(v54 + 48) = a10;
          v49 += 64;
        }
        while (((4 * v21) & 0x3FFFFFFC0) != v49);
        if (a3 == v21)
          goto LABEL_40;
        v43 = v21 & 0xFFFFFFF0;
        v48 = v43;
        if ((v21 & 8) != 0)
          goto LABEL_48;
      }
      else
      {
        v48 = 0;
      }
      do
      {
LABEL_51:
        a10.n128_u8[0] = *(_BYTE *)(v41 + v48);
        a10.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a10.n128_u64[0])).u64[0];
        a10.n128_f32[0] = (float)(*(float *)&v16 * (float)a10.n128_i32[0]) + 0.0;
        *(_DWORD *)(v40 + 4 * v48++) = a10.n128_u32[0];
      }
      while (v21 != v48);
LABEL_40:
      v41 += v25;
      v40 += v22;
      if ((_DWORD)++v38 == v24)
        goto LABEL_5;
    }
  }
  return 4294967293;
}

uint64_t AcAttrNode::getParams(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (*a2 != 1)
    return 4294967289;
  v3 = *(_DWORD *)(a1 + 76);
  *(_QWORD *)&v4 = *(_QWORD *)(a1 + 20);
  *((_QWORD *)&v4 + 1) = *(_QWORD *)(a1 + 68);
  *(_OWORD *)a3 = v4;
  *(_DWORD *)(a3 + 16) = v3;
  *(_DWORD *)(a3 + 20) = 10 * ((v3 * DWORD2(v4) + 63) & 0xFFFFFFC0) * HIDWORD(v4);
  *(_DWORD *)(a3 + 24) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a3 + 52) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a3 + 80) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a3 + 28) = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a3 + 56) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a3 + 84) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a3 + 60) = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a3 + 88) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a3 + 36) = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a3 + 92) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a3 + 68) = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a3 + 96) = *(_DWORD *)(a1 + 152);
  *(_DWORD *)(a3 + 44) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a3 + 72) = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a3 + 100) = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a3 + 76) = *(_DWORD *)(a1 + 132);
  *(_QWORD *)(a3 + 104) = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(a3 + 112) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a3 + 116) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a3 + 120) = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a3 + 124) = *(_DWORD *)(a1 + 180);
  *(_DWORD *)(a3 + 128) = *(_DWORD *)(a1 + 184);
  *(_DWORD *)(a3 + 132) = *(_DWORD *)(a1 + 188);
  *(_DWORD *)(a3 + 136) = 0;
  v5 = *(int *)(a1 + 164);
  if (v5 >= 8)
    goto LABEL_18;
  if (((0xFBu >> v5) & 1) == 0)
    goto LABEL_18;
  v6 = *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 108) * ((dword_20CCA9AC4[v5] * *(_DWORD *)(a1 + 80) + 63) & 0xFFFFFFC0);
  *(_DWORD *)(a3 + 136) = v6;
  v7 = *(int *)(a1 + 168);
  if (v7 > 7)
    goto LABEL_18;
  if (((0xFBu >> v7) & 1) == 0)
    goto LABEL_18;
  v8 = v6
     + *(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 112) * ((dword_20CCA9AC4[v7] * *(_DWORD *)(a1 + 84) + 63) & 0xFFFFFFC0);
  *(_DWORD *)(a3 + 136) = v8;
  v9 = *(int *)(a1 + 172);
  if (v9 > 7)
    goto LABEL_18;
  if (((0xFBu >> v9) & 1) == 0)
    goto LABEL_18;
  v10 = v8
      + *(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 116) * ((dword_20CCA9AC4[v9] * *(_DWORD *)(a1 + 88) + 63) & 0xFFFFFFC0);
  *(_DWORD *)(a3 + 136) = v10;
  v11 = *(int *)(a1 + 176);
  if (v11 > 7)
    goto LABEL_18;
  if (((0xFBu >> v11) & 1) == 0)
    goto LABEL_18;
  v12 = v10
      + *(_DWORD *)(a1 + 148)
      * *(_DWORD *)(a1 + 120)
      * ((dword_20CCA9AC4[v11] * *(_DWORD *)(a1 + 92) + 63) & 0xFFFFFFC0);
  *(_DWORD *)(a3 + 136) = v12;
  v13 = *(int *)(a1 + 180);
  if (v13 > 7
    || ((0xFBu >> v13) & 1) == 0
    || (v14 = v12
            + *(_DWORD *)(a1 + 152)
            * *(_DWORD *)(a1 + 124)
            * ((dword_20CCA9AC4[v13] * *(_DWORD *)(a1 + 96) + 63) & 0xFFFFFFC0),
        *(_DWORD *)(a3 + 136) = v14,
        v15 = *(int *)(a1 + 184),
        v15 > 7)
    || ((0xFBu >> v15) & 1) == 0
    || (v16 = v14
            + *(_DWORD *)(a1 + 156)
            * *(_DWORD *)(a1 + 128)
            * ((dword_20CCA9AC4[v15] * *(_DWORD *)(a1 + 100) + 63) & 0xFFFFFFC0),
        *(_DWORD *)(a3 + 136) = v16,
        v17 = *(int *)(a1 + 188),
        v17 > 7)
    || ((0xFBu >> v17) & 1) == 0)
  {
LABEL_18:
    AcAttrNode::getParams(a1, (uint64_t)a2, a3);
  }
  *(_DWORD *)(a3 + 136) = 10
                        * (v16
                         + *(_DWORD *)(a1 + 160)
                         * *(_DWORD *)(a1 + 132)
                         * ((dword_20CCA9AC4[v17] * *(_DWORD *)(a1 + 104) + 63) & 0xFFFFFFC0));
  *(_DWORD *)(a3 + 140) = *(_DWORD *)(a1 + 192);
  v18 = *(_OWORD *)(a1 + 220);
  *(_OWORD *)(a3 + 184) = *(_OWORD *)(a1 + 236);
  *(_OWORD *)(a3 + 168) = v18;
  *(_DWORD *)(a3 + 144) = *(_DWORD *)(a1 + 196);
  v19 = *(_OWORD *)(a1 + 252);
  *(_OWORD *)(a3 + 216) = *(_OWORD *)(a1 + 268);
  *(_OWORD *)(a3 + 200) = v19;
  *(_DWORD *)(a3 + 148) = *(_DWORD *)(a1 + 200);
  v20 = *(_OWORD *)(a1 + 284);
  *(_OWORD *)(a3 + 248) = *(_OWORD *)(a1 + 300);
  *(_OWORD *)(a3 + 232) = v20;
  *(_DWORD *)(a3 + 152) = *(_DWORD *)(a1 + 204);
  v21 = *(_OWORD *)(a1 + 332);
  *(_OWORD *)(a3 + 264) = *(_OWORD *)(a1 + 316);
  *(_OWORD *)(a3 + 280) = v21;
  *(_DWORD *)(a3 + 156) = *(_DWORD *)(a1 + 208);
  v22 = *(_OWORD *)(a1 + 364);
  *(_OWORD *)(a3 + 296) = *(_OWORD *)(a1 + 348);
  *(_OWORD *)(a3 + 312) = v22;
  *(_DWORD *)(a3 + 160) = *(_DWORD *)(a1 + 212);
  v23 = *(_OWORD *)(a1 + 396);
  *(_OWORD *)(a3 + 328) = *(_OWORD *)(a1 + 380);
  *(_OWORD *)(a3 + 344) = v23;
  *(_DWORD *)(a3 + 164) = *(_DWORD *)(a1 + 216);
  v24 = *(_OWORD *)(a1 + 428);
  *(_OWORD *)(a3 + 360) = *(_OWORD *)(a1 + 412);
  *(_OWORD *)(a3 + 376) = v24;
  v25 = *(_OWORD *)(a1 + 460);
  *(_OWORD *)(a3 + 392) = *(_OWORD *)(a1 + 444);
  *(_OWORD *)(a3 + 408) = v25;
  v26 = *(_OWORD *)(a1 + 492);
  *(_OWORD *)(a3 + 424) = *(_OWORD *)(a1 + 476);
  *(_OWORD *)(a3 + 440) = v26;
  v27 = *(_OWORD *)(a1 + 524);
  *(_OWORD *)(a3 + 456) = *(_OWORD *)(a1 + 508);
  *(_OWORD *)(a3 + 472) = v27;
  v28 = *(_OWORD *)(a1 + 556);
  *(_OWORD *)(a3 + 488) = *(_OWORD *)(a1 + 540);
  *(_OWORD *)(a3 + 504) = v28;
  v29 = *(_OWORD *)(a1 + 588);
  *(_OWORD *)(a3 + 520) = *(_OWORD *)(a1 + 572);
  *(_OWORD *)(a3 + 536) = v29;
  v30 = *(_OWORD *)(a1 + 620);
  *(_OWORD *)(a3 + 552) = *(_OWORD *)(a1 + 604);
  *(_OWORD *)(a3 + 568) = v30;
  v31 = *(_OWORD *)(a1 + 652);
  *(_OWORD *)(a3 + 584) = *(_OWORD *)(a1 + 636);
  *(_OWORD *)(a3 + 600) = v31;
  v32 = *(_OWORD *)(a1 + 684);
  *(_OWORD *)(a3 + 616) = *(_OWORD *)(a1 + 668);
  *(_OWORD *)(a3 + 632) = v32;
  v33 = *(_OWORD *)(a1 + 716);
  *(_OWORD *)(a3 + 648) = *(_OWORD *)(a1 + 700);
  *(_OWORD *)(a3 + 664) = v33;
  v34 = *(_OWORD *)(a1 + 748);
  *(_OWORD *)(a3 + 680) = *(_OWORD *)(a1 + 732);
  *(_OWORD *)(a3 + 696) = v34;
  v35 = *(_OWORD *)(a1 + 780);
  *(_OWORD *)(a3 + 712) = *(_OWORD *)(a1 + 764);
  *(_OWORD *)(a3 + 728) = v35;
  return 0;
}

uint64_t AcAttrNode::setUpNetBuffers(uint64_t result, uint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *i;
  int v87;
  unsigned int v88;

  if (result > 0xA)
    return 4294967292;
  v4 = *(_QWORD *)(a2 + 4);
  if (!v4)
    return 4294967292;
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    return 4294967292;
  v6 = *(int *)(a2 + 12);
  if (v6 < a3[5])
    return 4294967292;
  v7 = *(int *)(a2 + 24);
  if (v7 < a3[34])
    return 4294967292;
  if ((_DWORD)result)
  {
    v8 = 0;
    v9 = a3[3];
    v10 = a3[4] * a3[2];
    v11 = (v10 + 63) & 0xFFFFFFC0;
    v12 = v11 * v9;
    v13 = result;
    v14 = a4 + 3;
    v15 = v13;
    while (1)
    {
      *(_QWORD *)(v14 - 3) = v4 + v8;
      *(v14 - 1) = v9;
      *v14 = v10;
      v14[1] = v11;
      v14[2] = 1;
      if (v12 + v8 > v6)
        return 4294967292;
      v14 += 6;
      v8 += v12;
      if (!--v15)
      {
        if (*(_DWORD *)a2 != 1)
        {
          v47 = v5 + *(unsigned int *)(a2 + 28);
          v48 = (int)a3[27];
          v49 = a4 + 65;
          v50 = v13;
          do
          {
            *(_QWORD *)(v49 - 5) = v47;
            v51 = a3[6];
            *(v49 - 2) = v51;
            v52 = a3[20] * a3[13];
            *(v49 - 3) = v52;
            *v49 = v48;
            if (v48 > 7 || ((0xFBu >> v48) & 1) == 0)
              goto LABEL_75;
            v53 = (dword_20CCA9AC4[v48] * v51 + 63) & 0xFFFFFFC0;
            *(v49 - 1) = v53;
            v47 += (v53 * v52);
            if (v47 - v5 > v7)
              return 4294967292;
            v49 += 42;
            --v50;
          }
          while (v50);
          v54 = v5 + *(unsigned int *)(a2 + 32);
          v55 = (int)a3[28];
          v56 = a4 + 71;
          v57 = v13;
          do
          {
            *(_QWORD *)(v56 - 5) = v54;
            v51 = a3[7];
            *(v56 - 2) = v51;
            v58 = a3[21] * a3[14];
            *(v56 - 3) = v58;
            *v56 = v55;
            if (v55 > 7 || ((0xFBu >> v55) & 1) == 0)
              goto LABEL_75;
            v59 = (dword_20CCA9AC4[v55] * v51 + 63) & 0xFFFFFFC0;
            *(v56 - 1) = v59;
            v54 += (v59 * v58);
            if (v54 - v5 > v7)
              return 4294967292;
            v56 += 42;
            --v57;
          }
          while (v57);
          v60 = v5 + *(unsigned int *)(a2 + 36);
          v61 = (int)a3[29];
          v62 = a4 + 77;
          v63 = v13;
          do
          {
            *(_QWORD *)(v62 - 5) = v60;
            v51 = a3[8];
            *(v62 - 2) = v51;
            v64 = a3[22] * a3[15];
            *(v62 - 3) = v64;
            *v62 = v61;
            if (v61 > 7 || ((0xFBu >> v61) & 1) == 0)
              goto LABEL_75;
            v65 = (dword_20CCA9AC4[v61] * v51 + 63) & 0xFFFFFFC0;
            *(v62 - 1) = v65;
            v60 += (v65 * v64);
            if (v60 - v5 > v7)
              return 4294967292;
            v62 += 42;
            --v63;
          }
          while (v63);
          v66 = v5 + *(unsigned int *)(a2 + 40);
          v67 = (int)a3[30];
          v68 = a4 + 83;
          v69 = v13;
          do
          {
            *(_QWORD *)(v68 - 5) = v66;
            v51 = a3[9];
            *(v68 - 2) = v51;
            v70 = a3[23] * a3[16];
            *(v68 - 3) = v70;
            *v68 = v67;
            if (v67 > 7 || ((0xFBu >> v67) & 1) == 0)
              goto LABEL_75;
            v71 = (dword_20CCA9AC4[v67] * v51 + 63) & 0xFFFFFFC0;
            *(v68 - 1) = v71;
            v66 += (v71 * v70);
            if (v66 - v5 > v7)
              return 4294967292;
            v68 += 42;
            --v69;
          }
          while (v69);
          v72 = v5 + *(unsigned int *)(a2 + 44);
          v73 = (int)a3[31];
          v74 = a4 + 89;
          v75 = v13;
          do
          {
            *(_QWORD *)(v74 - 5) = v72;
            v51 = a3[10];
            *(v74 - 2) = v51;
            v76 = a3[24] * a3[17];
            *(v74 - 3) = v76;
            *v74 = v73;
            if (v73 > 7 || ((0xFBu >> v73) & 1) == 0)
              goto LABEL_75;
            v77 = (dword_20CCA9AC4[v73] * v51 + 63) & 0xFFFFFFC0;
            *(v74 - 1) = v77;
            v72 += (v77 * v76);
            if (v72 - v5 > v7)
              return 4294967292;
            v74 += 42;
            --v75;
          }
          while (v75);
          v78 = v5 + *(unsigned int *)(a2 + 48);
          v79 = (int)a3[32];
          v80 = a4 + 95;
          v81 = v13;
          do
          {
            *(_QWORD *)(v80 - 5) = v78;
            v51 = a3[11];
            *(v80 - 2) = v51;
            v82 = a3[25] * a3[18];
            *(v80 - 3) = v82;
            *v80 = v79;
            if (v79 > 7 || ((0xFBu >> v79) & 1) == 0)
              goto LABEL_75;
            v83 = (dword_20CCA9AC4[v79] * v51 + 63) & 0xFFFFFFC0;
            *(v80 - 1) = v83;
            v78 += (v83 * v82);
            if (v78 - v5 > v7)
              return 4294967292;
            v80 += 42;
            --v81;
          }
          while (v81);
          v84 = v5 + *(unsigned int *)(a2 + 52);
          v85 = (int)a3[33];
          for (i = a4 + 101; ; i += 42)
          {
            *(_QWORD *)(i - 5) = v84;
            v87 = a3[12];
            *(i - 2) = v87;
            a2 = a3[26];
            v51 = (a2 * a3[19]);
            *(i - 3) = v51;
            *i = v85;
            if (v85 > 7 || ((0xFBu >> v85) & 1) == 0)
              break;
            v88 = (dword_20CCA9AC4[v85] * v87 + 63) & 0xFFFFFFC0;
            *(i - 1) = v88;
            v84 += v88 * v51;
            if (v84 - v5 > v7)
              return 4294967292;
            result = 0;
            if (!--v13)
              return result;
          }
LABEL_75:
          AcAttrNode::getParams(v51, a2, (uint64_t)a3);
        }
        v16 = (int)a3[27];
        v17 = (int)a3[28];
        v18 = (int)a3[29];
        v19 = (int)a3[30];
        v20 = (int)a3[31];
        v21 = (int)a3[32];
        v22 = (int)a3[33];
        v23 = a4 + 101;
        v24 = v5;
        while (1)
        {
          *(_QWORD *)(v23 - 41) = v24 + *(unsigned int *)(a2 + 28);
          v25 = a3[6];
          *(v23 - 38) = v25;
          v26 = a3[13];
          v27 = a3[20] * v26;
          *(v23 - 39) = v27;
          *(v23 - 36) = v16;
          if (v16 > 7 || ((0xFBu >> v16) & 1) == 0)
            goto LABEL_74;
          v26 = 63;
          v28 = (dword_20CCA9AC4[v16] * v25 + 63) & 0xFFFFFFC0;
          *(v23 - 37) = v28;
          if (v24 + *(unsigned int *)(a2 + 28) + v28 * v27 - v5 > v7)
            return 4294967292;
          *(_QWORD *)(v23 - 35) = v24 + *(unsigned int *)(a2 + 32);
          v29 = a3[7];
          *(v23 - 32) = v29;
          v30 = a3[21] * a3[14];
          *(v23 - 33) = v30;
          *(v23 - 30) = v17;
          if (v17 > 7 || ((0xFBu >> v17) & 1) == 0)
            goto LABEL_74;
          v31 = (dword_20CCA9AC4[v17] * v29 + 63) & 0xFFFFFFC0;
          *(v23 - 31) = v31;
          if (v24 + *(unsigned int *)(a2 + 32) + v31 * v30 - v5 > v7)
            return 4294967292;
          *(_QWORD *)(v23 - 29) = v24 + *(unsigned int *)(a2 + 36);
          v32 = a3[8];
          *(v23 - 26) = v32;
          v33 = a3[22] * a3[15];
          *(v23 - 27) = v33;
          *(v23 - 24) = v18;
          if (v18 > 7 || ((0xFBu >> v18) & 1) == 0)
            goto LABEL_74;
          v34 = (dword_20CCA9AC4[v18] * v32 + 63) & 0xFFFFFFC0;
          *(v23 - 25) = v34;
          if (v24 + *(unsigned int *)(a2 + 36) + v34 * v33 - v5 > v7)
            return 4294967292;
          *(_QWORD *)(v23 - 23) = v24 + *(unsigned int *)(a2 + 40);
          v35 = a3[9];
          *(v23 - 20) = v35;
          v36 = a3[23] * a3[16];
          *(v23 - 21) = v36;
          *(v23 - 18) = v19;
          if (v19 > 7 || ((0xFBu >> v19) & 1) == 0)
            goto LABEL_74;
          v37 = (dword_20CCA9AC4[v19] * v35 + 63) & 0xFFFFFFC0;
          *(v23 - 19) = v37;
          if (v24 + *(unsigned int *)(a2 + 40) + v37 * v36 - v5 > v7)
            return 4294967292;
          *(_QWORD *)(v23 - 17) = v24 + *(unsigned int *)(a2 + 44);
          v38 = a3[10];
          *(v23 - 14) = v38;
          v39 = a3[24] * a3[17];
          *(v23 - 15) = v39;
          *(v23 - 12) = v20;
          if (v20 > 7 || ((0xFBu >> v20) & 1) == 0)
            goto LABEL_74;
          v40 = (dword_20CCA9AC4[v20] * v38 + 63) & 0xFFFFFFC0;
          *(v23 - 13) = v40;
          if (v24 + *(unsigned int *)(a2 + 44) + v40 * v39 - v5 > v7)
            return 4294967292;
          *(_QWORD *)(v23 - 11) = v24 + *(unsigned int *)(a2 + 48);
          v41 = a3[11];
          *(v23 - 8) = v41;
          v42 = a3[25] * a3[18];
          *(v23 - 9) = v42;
          *(v23 - 6) = v21;
          if (v21 > 7 || ((0xFBu >> v21) & 1) == 0)
            goto LABEL_74;
          v43 = (dword_20CCA9AC4[v21] * v41 + 63) & 0xFFFFFFC0;
          *(v23 - 7) = v43;
          if (v24 + *(unsigned int *)(a2 + 48) + v43 * v42 - v5 > v7)
            return 4294967292;
          *(_QWORD *)(v23 - 5) = v24 + *(unsigned int *)(a2 + 52);
          v44 = a3[12];
          *(v23 - 2) = v44;
          v45 = a3[26] * a3[19];
          *(v23 - 3) = v45;
          *v23 = v22;
          if (v22 > 7 || ((0xFBu >> v22) & 1) == 0)
LABEL_74:
            AcAttrNode::getParams(v26, a2, (uint64_t)a3);
          v46 = (dword_20CCA9AC4[v22] * v44 + 63) & 0xFFFFFFC0;
          *(v23 - 1) = v46;
          v24 += *(unsigned int *)(a2 + 52) + (unint64_t)(v46 * v45);
          if (v24 - v5 > v7)
            return 4294967292;
          result = 0;
          v23 += 42;
          if (!--v13)
            return result;
        }
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_0(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 35, a4);
}

void ttDetRectOverlap(float *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;

  bmMaximum(0.0, a1[2] - *a1);
  bmMaximum(0.0, a1[3] - a1[1]);
  bmMaximum(0.0, a2[2] - *a2);
  bmMaximum(0.0, a2[3] - a2[1]);
  v4 = bmMaximum(*a1, *a2);
  v5 = bmMaximum(a1[1], a2[1]);
  v6 = bmMinimum(a1[2], a2[2]);
  v7 = bmMinimum(a1[3], a2[3]);
  bmMaximum(a1[6], a2[6]);
  bmMaximum(0.0, v6 - v4);
  bmMaximum(0.0, v7 - v5);
}

void ttDetRectOverlap2(float *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;

  bmMaximum(0.0, a1[2] - *a1);
  bmMaximum(0.0, a1[3] - a1[1]);
  bmMaximum(0.0, a2[2] - *a2);
  bmMaximum(0.0, a2[3] - a2[1]);
  v4 = bmMaximum(*a1, *a2);
  v5 = bmMaximum(a1[1], a2[1]);
  v6 = bmMinimum(a1[2], a2[2]);
  v7 = bmMinimum(a1[3], a2[3]);
  bmMaximum(a1[6], a2[6]);
  bmMaximum(0.0, v6 - v4);
  bmMaximum(0.0, v7 - v5);
}

void ttDetRectOverlapSmallbox(float *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v4 = bmMaximum(0.0, a1[2] - *a1);
  v5 = v4 * bmMaximum(0.0, a1[3] - a1[1]);
  v6 = bmMaximum(0.0, a2[2] - *a2);
  v7 = v6 * bmMaximum(0.0, a2[3] - a2[1]);
  v8 = bmMaximum(*a1, *a2);
  v9 = bmMaximum(a1[1], a2[1]);
  v10 = bmMinimum(a1[2], a2[2]);
  v11 = bmMinimum(a1[3], a2[3]);
  bmMaximum(a1[6], a2[6]);
  bmMaximum(0.0, v10 - v8);
  bmMaximum(0.0, v11 - v9);
  bmMinimum(v5, v7);
}

BOOL ttDetRectScoreCompare(float *a1, float *a2)
{
  return a1[6] < a2[6];
}

int32x2_t ttDetRectFromObject@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v2;
  float32x2_t v3;
  int v4;
  int32x2_t result;

  v2 = *(float32x2_t *)(a1 + 8);
  v3 = vadd_f32(v2, *(float32x2_t *)(a1 + 16));
  *(float32x2_t *)a2 = v2;
  *(float32x2_t *)(a2 + 8) = v3;
  v4 = *(_DWORD *)(a1 + 4);
  if (v4 >= 7)
    ttDetRectFromObject();
  *(_DWORD *)(a2 + 16) = v4 + 1;
  *(float *)(a2 + 24) = (float)*(unsigned int *)(a1 + 24) / 1000.0;
  result = vrev64_s32((int32x2_t)vcvt_f32_u32(*(uint32x2_t *)(a1 + 28)));
  *(int32x2_t *)(a2 + 28) = result;
  return result;
}

void sub_20CC75DA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 48);
  if (v3)
  {
    *(_QWORD *)(v1 + 56) = v3;
    operator delete(v3);
  }
  ft::HungarianMatcher::HungarianMatcher((void **)(v1 + 24), v1);
  _Unwind_Resume(a1);
}

void ft::HungarianMatcher::~HungarianMatcher(ft::HungarianMatcher *this)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void ft::HungarianMatcher::Match(ft::HungarianMatcher *this@<X0>, float *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v10;
  float *v11;
  uint64_t v12;
  float *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const float *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  _OWORD *v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  float *v27;
  size_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;

  if (a3 <= a4)
    v10 = a4;
  else
    v10 = a3;
  if (*((_QWORD *)this + 9) < v10)
    ft::HungarianMatcher::UpdateBuffers(this, v10);
  v11 = *(float **)this;
  if (a3 && a4)
  {
    v12 = 4 * v10;
    if (a4 < 8)
    {
      v13 = v11 + 3;
      v14 = a3;
      do
      {
        *(v13 - 3) = *a2;
        if (a4 == 1)
        {
          ++a2;
        }
        else
        {
          *(v13 - 2) = a2[1];
          if (a4 == 2)
          {
            a2 += 2;
          }
          else
          {
            *(v13 - 1) = a2[2];
            if (a4 == 3)
            {
              a2 += 3;
            }
            else
            {
              *v13 = a2[3];
              if (a4 == 4)
              {
                a2 += 4;
              }
              else
              {
                v13[1] = a2[4];
                if (a4 == 5)
                {
                  a2 += 5;
                }
                else
                {
                  v13[2] = a2[5];
                  if (a4 == 6)
                  {
                    a2 += 6;
                  }
                  else
                  {
                    v13[3] = a2[6];
                    a2 += 7;
                  }
                }
              }
            }
          }
        }
        v13 = (float *)((char *)v13 + v12);
        --v14;
      }
      while (v14);
      goto LABEL_33;
    }
    v15 = 0;
    v16 = *(_QWORD *)this;
    do
    {
      if ((unint64_t)((char *)v11 + v12 * v15 - (char *)a2) >= 0x20)
      {
        v19 = 0;
        v18 = &a2[a4 & 0xFFFFFFFFFFFFFFF8];
        v20 = a4 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v21 = *(_OWORD *)&a2[v19 + 4];
          v22 = (_OWORD *)(v16 + v19 * 4);
          *v22 = *(_OWORD *)&a2[v19];
          v22[1] = v21;
          v19 += 8;
          v20 -= 8;
        }
        while (v20);
        v17 = a4 & 0xFFFFFFFFFFFFFFF8;
        if ((a4 & 0xFFFFFFFFFFFFFFF8) == a4)
          goto LABEL_25;
      }
      else
      {
        v17 = 0;
        v18 = a2;
      }
      do
      {
        v23 = *v18++;
        *(float *)(v16 + 4 * v17++) = v23;
      }
      while (a4 != v17);
LABEL_25:
      ++v15;
      v16 += v12;
      a2 = (float *)v18;
    }
    while (v15 != a3);
  }
LABEL_33:
  if (a3 != a4)
  {
    v24 = a3 >= a4 ? 0 : a3;
    v25 = a3 >= a4 ? a4 : 0;
    v26 = v10 - v24;
    if (v10 > v24 && v10 != v25)
    {
      v27 = &v11[v24 * v10 + v25];
      v28 = 4 * (v10 - v25);
      do
      {
        bzero(v27, v28);
        v27 += v10;
        --v26;
      }
      while (v26);
    }
  }
  bmMunkres(v11, v10, *((unsigned __int8 **)this + 6), *((_DWORD *)this + 14) - *((_QWORD *)this + 6), *((unsigned int **)this + 3), v10, 0);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (!a3)
  {
    v29 = 0;
    if (!v10)
      return;
    goto LABEL_49;
  }
  if (a3 >> 61)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  v29 = (char *)operator new(8 * a3);
  *a5 = v29;
  a5[2] = &v29[8 * a3];
  bzero(v29, 8 * a3);
  a5[1] = &v29[8 * a3];
  if (v10)
  {
LABEL_49:
    v30 = 0;
    v31 = *((_QWORD *)this + 3);
    do
    {
      v32 = *(unsigned int *)(v31 + 4 * v30);
      if (v32 < a3)
      {
        if (v30 >= a4)
          v33 = -1;
        else
          v33 = v30;
        *(_QWORD *)&v29[8 * v32] = v33;
      }
      ++v30;
    }
    while (v10 != v30);
  }
}

void sub_20CC76134(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<long long>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C55E140, MEMORY[0x24BEDAAF0]);
}

void sub_20CC761A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void OUTLINED_FUNCTION_0_0(void *__p)
{
  operator delete(__p);
}

uint64_t acCropResizeGenerateConfig(unsigned int a1, unsigned int a2, _DWORD *a3, unsigned int a4, unsigned int a5, char a6, uint64_t a7, float a8, float a9, float a10, float a11)
{
  unsigned int v12;
  uint64_t result;
  __int16 v20;
  __int16 v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int v34;
  unsigned int v35;
  float v36;
  float v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  _DWORD *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  _DWORD *v52;
  unsigned int v53;
  unsigned __int16 v54;
  unsigned __int16 v55;
  float v57;
  float v58;

  if (((a5 | a4) & 1) != 0)
    acCropResizeGenerateConfig();
  v12 = a3[1];
  if (v12 >= 5)
    acCropResizeGenerateConfig();
  result = 0;
  *(_BYTE *)a7 = 0;
  if (a8 >= 0.0 && a9 >= 0.0 && !*a3 && v12)
  {
    v20 = a5;
    v21 = a4;
    v22 = (float)a1;
    v23 = (float)a2;
    v24 = (float)a4;
    v25 = (float)a5;
    v26 = bmMinimum((float)a3[2] / (float)a1, (float)a3[6] / (float)a2);
    v57 = a10;
    v58 = a11;
    v27 = v24 / bmMaximum(1.0, v26 * a10);
    v28 = bmMaximum(1.0, v26 * a11);
    v29 = bmMinimum(v27, v25 / v28);
    if (v29 > 4.0)
      return 0;
    v30 = 0.5;
    if (v29 >= 0.5)
    {
      v39 = 0;
LABEL_18:
      v31 = v57;
      a11 = v58;
      *(_BYTE *)(a7 + 1) = v39;
    }
    else
    {
      v31 = v57;
      if (a3[1] >= 2u)
      {
        v32 = 0;
        do
        {
          v33 = &a3[v32];
          v34 = v33[3];
          if (v34 > v33[2])
            acCropResizeGenerateConfig();
          v35 = v33[7];
          if (v35 > v33[6])
            acCropResizeGenerateConfig();
          v26 = bmMinimum((float)v34 / v22, (float)v35 / v23);
          v36 = v24 / bmMaximum(1.0, v26 * v31);
          v37 = bmMaximum(1.0, v26 * a11);
          v29 = bmMinimum(v36, v25 / v37);
          if (v29 > 4.0)
            return 0;
          v30 = 0.5;
          if (v29 >= 0.5)
          {
            v39 = v32 + 1;
            goto LABEL_18;
          }
          v38 = v32 + 2;
          ++v32;
          v31 = v57;
          a11 = v58;
        }
        while (v38 < a3[1]);
      }
    }
    if (v29 < v30)
      return 0;
    v40 = *(unsigned __int8 *)(a7 + 1);
    v41 = &a3[v40];
    v42 = v41 + 2;
    v43 = v41[2];
    if ((float)(v26 * a8) > (float)((float)v43 + -1.0))
      return 0;
    v45 = v41[6];
    v44 = v41 + 6;
    if ((float)(v26 * a9) > (float)((float)v45 + -1.0))
      return 0;
    *(_WORD *)(a7 + 20) = v21;
    *(_WORD *)(a7 + 22) = v20;
    v46 = llroundf((float)(v26 * a8) * 8.0);
    *(_WORD *)(a7 + 24) = v46;
    *(_WORD *)(a7 + 26) = v46 >> 1;
    v47 = llroundf((float)(v26 * a9) * 8.0);
    *(_WORD *)(a7 + 30) = v47 >> 1;
    v48 = llroundf(16384.0 / v29);
    *(_WORD *)(a7 + 28) = v47;
    *(_WORD *)(a7 + 32) = v48;
    *(_WORD *)(a7 + 36) = v48;
    v48 >>= 1;
    *(_WORD *)(a7 + 34) = v48;
    *(_WORD *)(a7 + 38) = v48;
    if ((a6 & 1) != 0)
    {
      v50 = (v46 >> 3) & 0x1FC0;
      v51 = (v47 >> 3) & 0x1FFE;
      v52 = &a3[2 * v40];
      *(_DWORD *)(a7 + 12) = v50 + v52[10] * v51;
      *(_DWORD *)(a7 + 16) = v50 + v52[11] * ((unsigned __int16)v47 >> 4);
      v53 = *v42;
      if (v53 <= v50)
        acCropResizeGenerateConfig();
      if (*v44 <= v51)
        acCropResizeGenerateConfig();
      *(_DWORD *)(a7 + 4) = bmMinimum(v53 - v50, (float)(v26 * v31) + 63);
      *(_DWORD *)(a7 + 8) = bmMinimum(a3[*(unsigned __int8 *)(a7 + 1) + 6] - v51, (float)(v26 * a11) + 1);
      v54 = *(_WORD *)(a7 + 24) - 8 * v50;
      *(_WORD *)(a7 + 24) = v54;
      v55 = *(_WORD *)(a7 + 28) - 8 * v51;
      *(_WORD *)(a7 + 28) = v55;
      *(_WORD *)(a7 + 26) = v54 >> 1;
      *(_WORD *)(a7 + 30) = v55 >> 1;
      result = 1;
      *(_BYTE *)a7 = 1;
    }
    else
    {
      *(_DWORD *)(a7 + 4) = v43;
      v49 = *v44;
      *(_DWORD *)(a7 + 12) = 0;
      *(_DWORD *)(a7 + 16) = 0;
      *(_DWORD *)(a7 + 8) = v49;
      return 1;
    }
  }
  return result;
}

uint64_t AcDetNode::AcDetNode(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_OWORD *)(a1 + 3308) = 0u;
  *(_OWORD *)(a1 + 3324) = 0u;
  v4 = (void *)(a1 + 2512);
  *(_OWORD *)(a1 + 3276) = 0u;
  *(_OWORD *)(a1 + 3292) = 0u;
  *(_OWORD *)(a1 + 3244) = 0u;
  *(_OWORD *)(a1 + 3260) = 0u;
  *(_OWORD *)(a1 + 3212) = 0u;
  *(_OWORD *)(a1 + 3228) = 0u;
  *(_OWORD *)(a1 + 3196) = 0u;
  *(_BYTE *)(a1 + 3412) = 0;
  bzero((void *)a1, 0x9A4uLL);
  bzero(v4, 0x294uLL);
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0xDE7C00000001;
  return a1;
}

{
  void *v4;

  *(_OWORD *)(a1 + 3308) = 0u;
  *(_OWORD *)(a1 + 3324) = 0u;
  v4 = (void *)(a1 + 2512);
  *(_OWORD *)(a1 + 3276) = 0u;
  *(_OWORD *)(a1 + 3292) = 0u;
  *(_OWORD *)(a1 + 3244) = 0u;
  *(_OWORD *)(a1 + 3260) = 0u;
  *(_OWORD *)(a1 + 3212) = 0u;
  *(_OWORD *)(a1 + 3228) = 0u;
  *(_OWORD *)(a1 + 3196) = 0u;
  *(_BYTE *)(a1 + 3412) = 0;
  bzero((void *)a1, 0x9A4uLL);
  bzero(v4, 0x294uLL);
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0xDE7C00000001;
  return a1;
}

void AcDetNode::~AcDetNode(AcDetNode *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 314);
  if (v2)
    MEMORY[0x212B93EEC](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 306);
  if (v3)
    MEMORY[0x212B93EEC](v3, 0x1000C8052888210);
  v4 = (_QWORD *)((char *)this + 3364);
  v5 = *((_QWORD *)this + 307);
  if (v5)
    MEMORY[0x212B93EEC](v5, 0x1000C8052888210);
  if (*v4)
    MEMORY[0x212B93EEC](*v4, 0x1000C8077774924);
  v6 = *(_QWORD *)((char *)this + 3388);
  if (v6)
    MEMORY[0x212B93EEC](v6, 0x1000C8077774924);
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 314);
  if (v2)
    MEMORY[0x212B93EEC](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 306);
  if (v3)
    MEMORY[0x212B93EEC](v3, 0x1000C8052888210);
  v4 = (_QWORD *)((char *)this + 3364);
  v5 = *((_QWORD *)this + 307);
  if (v5)
    MEMORY[0x212B93EEC](v5, 0x1000C8052888210);
  if (*v4)
    MEMORY[0x212B93EEC](*v4, 0x1000C8077774924);
  v6 = *(_QWORD *)((char *)this + 3388);
  if (v6)
    MEMORY[0x212B93EEC](v6, 0x1000C8077774924);
}

uint64_t AcDetNode::init(uint64_t a1, _DWORD *a2, _DWORD *a3, int a4)
{
  int v4;
  _DWORD *v6;
  unsigned int v7;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  int *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v38;
  unint64_t v39;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  _OWORD *v49;
  int v50;
  uint64_t v51;
  char *__src;

  if (*a3 != 1)
    return 4294967289;
  v4 = a3[1];
  if (v4 != 56956 && v4 != 56945)
    return 4294967292;
  v6 = &kAcODNodeConfigDefaultRawData;
  if (!a4)
    v6 = &kAcDetFaceNodeConfigDefaultRawData;
  if (!a2)
  {
    if (a4 == 1)
      return 4294967288;
    a2 = v6;
  }
  if (!a2[6])
    return 4294967292;
  if (!a2[5])
    return 4294967292;
  if (a2[11] < 2u)
    return 4294967292;
  if ((a2[12] - 11) < 0xFFFFFFF6)
    return 4294967292;
  v7 = a2[26];
  if (v7 - 7 < 0xFFFFFFFA)
    return 4294967292;
  if (a2[393] > v7)
    return 4294967292;
  if (a2[394] > 5u)
    return 4294967292;
  if (*((_BYTE *)a2 + 1706))
    return 4294967292;
  if (*((_BYTE *)a2 + 1738))
    return 4294967292;
  if (*((_BYTE *)a2 + 1770))
    return 4294967292;
  if (*((_BYTE *)a2 + 1802))
    return 4294967292;
  __src = (char *)a2;
  if (*((_BYTE *)a2 + 1834)
    || *((_BYTE *)a2 + 1866)
    || *((_BYTE *)a2 + 1898)
    || *((_BYTE *)a2 + 1930)
    || *((_BYTE *)a2 + 1962)
    || *((_BYTE *)a2 + 1994)
    || *((_BYTE *)a2 + 2026)
    || *((_BYTE *)a2 + 2058)
    || *((_BYTE *)a2 + 2090)
    || *((_BYTE *)a2 + 2122)
    || *((_BYTE *)a2 + 2154)
    || *((_BYTE *)a2 + 2186)
    || *((_BYTE *)a2 + 2218)
    || *((_BYTE *)a2 + 2250)
    || *((_BYTE *)a2 + 2282)
    || *((_BYTE *)a2 + 2314)
    || *((_BYTE *)a2 + 2346)
    || *((_BYTE *)a2 + 2378)
    || *((_BYTE *)a2 + 2410)
    || *((_BYTE *)a2 + 2442))
  {
    return 4294967292;
  }
  memcpy((void *)a1, a2, 0x990uLL);
  *(float *)(a1 + 2468) = logf(*(float *)(a1 + 1380) / (float)(1.0 - *(float *)(a1 + 1380)));
  *(float *)(a1 + 2472) = logf(*(float *)(a1 + 1384) / (float)(1.0 - *(float *)(a1 + 1384)));
  *(float *)(a1 + 2476) = logf(*(float *)(a1 + 1388) / (float)(1.0 - *(float *)(a1 + 1388)));
  *(float *)(a1 + 2480) = logf(*(float *)(a1 + 1392) / (float)(1.0 - *(float *)(a1 + 1392)));
  *(float *)(a1 + 2484) = logf(*(float *)(a1 + 1396) / (float)(1.0 - *(float *)(a1 + 1396)));
  *(float *)(a1 + 2488) = logf(*(float *)(a1 + 1400) / (float)(1.0 - *(float *)(a1 + 1400)));
  *(float *)(a1 + 2492) = logf(*(float *)(a1 + 1404) / (float)(1.0 - *(float *)(a1 + 1404)));
  *(float *)(a1 + 2496) = logf(*(float *)(a1 + 1408) / (float)(1.0 - *(float *)(a1 + 1408)));
  *(float *)(a1 + 2500) = logf(*(float *)(a1 + 1412) / (float)(1.0 - *(float *)(a1 + 1412)));
  *(float *)(a1 + 2504) = logf(*(float *)(a1 + 1416) / (float)(1.0 - *(float *)(a1 + 1416)));
  v11 = *(_QWORD *)(a1 + 2512);
  if (v11)
    MEMORY[0x212B93EEC](v11, 0x1000C8077774924);
  *(_DWORD *)(a1 + 2464) = 0;
  *(_DWORD *)(a1 + 2520) = 0;
  v12 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = 0;
    v15 = (_DWORD *)(a1 + 132);
    v16 = (int *)(__src + 228);
    do
    {
      v17 = *v15 * *(v15 - 6);
      if (!v17)
        AcDetNode::init();
      if (!v15[24])
        AcDetNode::init();
      ++v15;
      if (v17 > v14)
        v14 = v17;
      v18 = *v16++;
      v13 += v18;
      *(_DWORD *)(a1 + 2464) = v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a1 + 2520) = v14;
  *(_QWORD *)(a1 + 2512) = operator new[]();
  *(_QWORD *)(a1 + 2448) = operator new[]();
  v19 = operator new[]();
  *(_QWORD *)(a1 + 2456) = v19;
  v20 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = 0;
    v23 = a1;
    while (1)
    {
      v25 = *(unsigned int *)(a1 + 4 * v21 + 228);
      if ((_DWORD)v25)
        break;
      v24 = v22;
LABEL_60:
      ++v21;
      v23 += 80;
      v22 = v24;
      if (v21 == v20)
        goto LABEL_92;
    }
    v26 = *(_QWORD *)(a1 + 2448);
    if (v25 < 0x14 || __CFADD__((_DWORD)v22, v25 - 1))
    {
      v27 = 0;
    }
    else
    {
      v27 = 0;
      v30 = a1 + 80 * v21;
      v31 = v30 + 252;
      v32 = v30 + 732 + 4 * v25;
      v33 = 4 * v22;
      v34 = v26 + v33;
      v35 = 4 * v25 + v33;
      v36 = v19 + v33;
      v38 = v31 < v19 + v35 && v36 < v32;
      v39 = v26 + v35;
      v41 = v34 < v19 + v35 && v36 < v39;
      v42 = v34 >= v32 || v31 >= v39;
      if (v42 && !v38 && !v41)
      {
        v27 = v25 & 0xFFFFFFF8;
        v24 = v22 + (v25 & 0xFFFFFFF8);
        v43 = v27;
        v44 = v23;
        do
        {
          v45 = *(_OWORD *)(v44 + 268);
          v46 = 4 * v22;
          v47 = (_OWORD *)(v26 + v46);
          *v47 = *(_OWORD *)(v44 + 252);
          v47[1] = v45;
          v48 = *(_OWORD *)(v44 + 748);
          v49 = (_OWORD *)(v19 + v46);
          *v49 = *(_OWORD *)(v44 + 732);
          v49[1] = v48;
          v44 += 32;
          LODWORD(v22) = v22 + 8;
          v43 -= 8;
        }
        while (v43);
        if (v27 == v25)
          goto LABEL_60;
        goto LABEL_67;
      }
    }
    LODWORD(v24) = v22;
    do
    {
LABEL_67:
      v28 = v23 + 4 * v27;
      v29 = 4 * v24;
      *(_DWORD *)(v26 + v29) = *(_DWORD *)(v28 + 252);
      *(_DWORD *)(v19 + v29) = *(_DWORD *)(v28 + 732);
      ++v27;
      v24 = (v24 + 1);
    }
    while (v25 != v27);
    goto LABEL_60;
  }
LABEL_92:
  *(_QWORD *)(a3 + 1) = 0xDE70000DE71;
  *(_QWORD *)(a1 + 3364) = operator new[]();
  *(_DWORD *)(a1 + 3372) = 1;
  v50 = *(_DWORD *)(a1 + 1484);
  *(_DWORD *)(a1 + 3376) = v50;
  *(_DWORD *)(a1 + 3380) = 4 * v50;
  *(_DWORD *)(a1 + 3384) = 6;
  v51 = operator new[]();
  result = 0;
  *(_QWORD *)(a1 + 3388) = v51;
  *(_DWORD *)(a1 + 3396) = 1;
  LODWORD(v51) = *(_DWORD *)(a1 + 1536);
  *(_DWORD *)(a1 + 3400) = v51;
  *(_DWORD *)(a1 + 3404) = 4 * v51;
  *(_DWORD *)(a1 + 3408) = 6;
  return result;
}

uint64_t AcDetNode::postProcess(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t result;
  uint64_t v10;

  if (*a4 != 1)
    return 4294967289;
  result = 4294967292;
  if (a3 == 24 && a4[1] == 56945)
  {
    std::chrono::steady_clock::now();
    AcDetNode::postProcessDet(a1, a2, v10, (uint64_t)a4, a5);
    return 0;
  }
  return result;
}

uint64_t AcDetNode::postProcessDet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  __int128 *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 *v21;
  __int128 v22;
  uint64_t ClsBufferInds;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  __n128 v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  float32x2_t *v53;
  float32x4_t v54;
  int32x4_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  float32x2_t *v65;
  float32x2_t v66;
  int32x2_t v67;
  float32x2_t v68;
  int32x2_t v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  uint64_t v73;
  float32x2_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;

  v8 = *(_DWORD *)(a4 + 8);
  a5[54] = v8;
  *(_DWORD *)(a4 + 8) = v8 + 1;
  if (*(_DWORD *)(a1 + 104))
  {
    v9 = 0;
    v10 = a1 + 2524;
    v11 = (_DWORD *)(a1 + 2668);
    do
    {
      v81 = -1;
      v82 = -1;
      v80 = -1;
      ClsBufferInds = acDetBboxCoderGetClsBufferInds(*(unsigned int *)(a1 + 1572), v9, &v82, &v81, &v80);
      v26 = v82;
      if (v82 == -1)
      {
        v27 = v81;
        if (v81 == -1)
          AcDetNode::postProcessDet(ClsBufferInds, v24, v25);
        v26 = v80;
        if (v80 == -1)
          AcDetNode::postProcessDet(ClsBufferInds, v24, v25);
        v28 = (__int128 *)(a2 + 24 * v81);
        v29 = a1 + 24 * v81 + 2692;
        v30 = *v28;
        *(_QWORD *)(v29 + 16) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v29 = v30;
        *(_DWORD *)(a1 + 4 * v27 + 2980) = *(_DWORD *)(a1 + 4 * v27 + 1580);
      }
      v12 = (__int128 *)(a2 + 24 * v26);
      v13 = a1 + 24 * v26 + 2692;
      v14 = *v12;
      v15 = *((_QWORD *)v12 + 2);
      *(_OWORD *)v13 = v14;
      v16 = 4 * v26;
      LODWORD(v14) = *(_DWORD *)(a1 + 1580 + v16);
      *(_QWORD *)(v13 + 16) = v15;
      *(_DWORD *)(a1 + v16 + 2980) = v14;
      v17 = (__int128 *)(a2 + 24 * (v9 + 6));
      v18 = *v17;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v17 + 2);
      *(_OWORD *)v10 = v18;
      *v11 = *(_DWORD *)(a1 + 1580 + 4 * (v9 + 6));
      v19 = (__int128 *)(a2 + 24 * (v9 + 12));
      v20 = *v19;
      *(_QWORD *)(v10 + 520) = *((_QWORD *)v19 + 2);
      *(_OWORD *)(v10 + 504) = v20;
      v11[126] = *(_DWORD *)(a1 + 1580 + 4 * (v9 + 12));
      v21 = (__int128 *)(a2 + 24 * (v9 + 18));
      v22 = *v21;
      *(_QWORD *)(v10 + 688) = *((_QWORD *)v21 + 2);
      *(_OWORD *)(v10 + 672) = v22;
      v11[168] = *(_DWORD *)(a1 + 1580 + 4 * (v9++ + 18));
      v10 += 24;
      ++v11;
    }
    while (v9 < *(unsigned int *)(a1 + 104));
  }
  std::chrono::steady_clock::now();
  v34 = a1 + 2468;
  v35 = a1 + 2692;
  v36 = a1 + 2524;
  v37 = a1 + 3028;
  v38 = a1 + 3196;
  if (*(_DWORD *)(a2 + 20))
    v39 = acDetBboxCoderDecodeAllFloat((unsigned int *)a1, v34, v35, v36, v37, v38, *(_QWORD *)(a1 + 2448), *(_QWORD *)(a1 + 2456), *(_DWORD *)(a1 + 2464), *(_BYTE *)(a1 + 3412), *(_QWORD *)(a1 + 2512), *(_DWORD *)(a1 + 2520), a1 + 3364, a1 + 3388);
  else
    v39 = acDetBboxCoderDecodeAll((unsigned int *)a1, v34, v35, v36, v37, v38, a1 + 2980, a1 + 2668, v31, v32, v33, a1 + 3172, a1 + 3340, *(_QWORD *)(a1 + 2448), *(_QWORD *)(a1 + 2456), *(_DWORD *)(a1 + 2464), *(_BYTE *)(a1 + 3412), *(_QWORD *)(a1 + 2512), *(_DWORD *)(a1 + 2520),
            a1 + 3364,
            a1 + 3388);
  v40 = v39;
  bmHeapsort(*(_QWORD *)(a1 + 2512), v39, 0x24uLL, (int (*)(uint64_t, uint64_t))acDetBboxCoderRectDefDistCostCompare);
  acDetBboxCoderRectToDetRect(*(_QWORD *)(a1 + 2512), v40, *(_QWORD *)(a1 + 2512));
  v41 = *(_DWORD *)(a1 + 96);
  if (v41 >= v40 || *(float *)(*(_QWORD *)(a1 + 2512) + 36 * v41 + 24) < *(float *)(a1 + 100))
  {
    if (*(_BYTE *)(a1 + 2444))
    {
      std::chrono::steady_clock::now();
      v40 = acDetRectWeightedMerge(*(_QWORD *)(a1 + 2512), v40, *(float *)(a1 + 60), *(float *)(a1 + 64));
      bmHeapsort(*(_QWORD *)(a1 + 2512), v40, 0x24uLL, (int (*)(uint64_t, uint64_t))acDetRectScoreCompare);
    }
    std::chrono::steady_clock::now();
    v42 = acNonMaxSuppression(*(_QWORD *)(a1 + 2512), v40, *(float *)(a1 + 68));
    std::chrono::steady_clock::now();
    v43 = acCrossClassSuppression(*(_QWORD *)(a1 + 2512), 1, 2, v42, *(float *)(a1 + 72));
    bmHeapsort(*(_QWORD *)(a1 + 2512), v43, 0x24uLL, (int (*)(uint64_t, uint64_t))acDetRectScoreCompare);
    if (*(_BYTE *)(a1 + 2444))
    {
      std::chrono::steady_clock::now();
      v44 = acDetRectSmallRectSuppression(*(_QWORD *)(a1 + 2512), v43, *(float *)(a1 + 76), *(float *)(a1 + 80));
      bmHeapsort(*(_QWORD *)(a1 + 2512), v44, 0x24uLL, (int (*)(uint64_t, uint64_t))acDetRectSortIndexCompare);
      std::chrono::steady_clock::now();
      LODWORD(v43) = acDetRectLowMergeCountSuppression(*(_QWORD *)(a1 + 2512), v44, *(_DWORD *)(a1 + 88), *(_DWORD *)(a1 + 92), *(float *)(a1 + 84));
    }
    if (*(_BYTE *)(a1 + 3412))
      v45 = a1 + 1420;
    else
      v45 = a1 + 1380;
    v46 = acDetRectFilterByScore(*(_QWORD *)(a1 + 2512), v43, v45);
    v47 = bmMinimum(v46, *(_DWORD *)(a1 + 48));
    if (v47)
    {
      v48 = 0;
      v49 = 36 * v47;
      v50 = 1;
      do
      {
        v61 = *(_QWORD *)(a1 + 2512);
        v62 = v61 + v48;
        v63 = *(unsigned int *)(v61 + v48 + 16);
        if (v63 > 2)
        {
          v73 = a5[286];
          a5[8 * v73 + 287] = v50;
          if ((int)v63 >= 10)
            AcDetNode::postProcessDet();
          if (v63 <= 9)
            v51 = dword_20CCAA2E8[(int)v63];
          else
            v51 = 0;
          v52 = (uint64_t)&a5[8 * v73 + 287];
          *(_DWORD *)(v52 + 4) = v51;
          v53 = (float32x2_t *)(v61 + v48);
          *(float32x2_t *)v54.f32 = *v53;
          *(float32x2_t *)v55.i8 = vcvt_f32_u32(*(uint32x2_t *)(a1 + 20));
          v55.i64[1] = v55.i64[0];
          *(float32x2_t *)&v54.u32[2] = vsub_f32(v53[1], *v53);
          *(float32x4_t *)(v52 + 8) = vmulq_f32(v54, (float32x4_t)vrev64q_s32(v55));
          v56 = bmClamp((int)(float)((float)((float)((float)(v53[3].f32[0] - *(float *)(v45 + 4 * v63))/ (float)(1.0 - *(float *)(v45 + 4 * v63)))* 1000.0)+ 0.5), 1u, 1000);
          v57 = a5[286];
          v58 = (uint64_t)&a5[8 * v57 + 287];
          *(_DWORD *)(v58 + 24) = v56;
          v59 = (_DWORD *)(v58 + 28);
          v60 = a5 + 286;
        }
        else
        {
          v64 = a5[55];
          a5[23 * v64 + 56] = v50;
          if (!(_DWORD)v63)
            AcDetNode::postProcessDet();
          a5[23 * v64 + 57] = 0;
          v65 = (float32x2_t *)(v61 + v48);
          if ((_DWORD)v63 == 1)
          {
            v67 = (int32x2_t)*v65;
            v66 = v65[1];
            v68 = vsub_f32(v66, *v65);
            v69 = (int32x2_t)vcvt_f32_u32(*(uint32x2_t *)(a1 + 20));
            v70 = (float32x2_t)vrev64_s32(v69);
            v68.f32[0] = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v68, v70).i32[1]), *(float *)&v69.i32[1], v68.f32[0]) * 0.5;
            *(float *)v67.i32 = v68.f32[0] * 0.5;
            v71 = vsub_f32(vmul_f32(vmul_f32(vadd_f32(v66, *v65), (float32x2_t)0x3F0000003F000000), v70), (float32x2_t)vdup_lane_s32(v67, 0));
            v72 = (float32x2_t)vdup_lane_s32((int32x2_t)v68, 0);
          }
          else
          {
            v74 = (float32x2_t)vrev64_s32((int32x2_t)vcvt_f32_u32(*(uint32x2_t *)(a1 + 20)));
            v71 = vmul_f32(*v65, v74);
            v72 = vmul_f32(vsub_f32(v65[1], *v65), v74);
          }
          v75 = (uint64_t)&a5[23 * v64 + 56];
          *(float32x2_t *)(v75 + 8) = v71;
          *(float32x2_t *)(v75 + 16) = v72;
          v76 = v61 + v48;
          v77 = bmClamp((int)(float)((float)((float)((float)(*(float *)(v61 + v48 + 24) - *(float *)(v45 + 4 * v63))/ (float)(1.0 - *(float *)(v45 + 4 * v63)))* 1000.0)+ 0.5), 1u, 1000);
          LODWORD(v57) = a5[55];
          v78 = (uint64_t)&a5[23 * v57 + 56];
          *(_DWORD *)(v78 + 24) = v77;
          *(_BYTE *)(v78 + 80) = 1;
          *(int32x2_t *)(v78 + 28) = vrev64_s32(vcvt_s32_f32(*(float32x2_t *)(v76 + 28)));
          *(_BYTE *)(v78 + 84) = *(_DWORD *)(v62 + 16) == 1;
          v59 = (_DWORD *)(v78 + 88);
          v60 = a5 + 55;
        }
        *v59 = 0;
        *v60 = v57 + 1;
        v48 += 36;
        ++v50;
      }
      while (v49 != v48);
    }
  }
  return 0;
}

uint64_t AcDetNode::getClsBufferInds(AcDetNode *this, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = acDetBboxCoderGetClsBufferInds(*((unsigned int *)this + 393), a2, a3, a4, a5);
  if (*a3 == -1)
  {
    if (*a4 == -1)
      AcDetNode::postProcessDet(result, v9, v10);
    if (*a5 == -1)
      AcDetNode::postProcessDet(result, v9, v10);
  }
  return result;
}

BOOL acDetBboxCoderRectDefDistCostCompare(float *a1, float *a2)
{
  return a1[8] > a2[8];
}

BOOL acDetRectSortIndexCompare(_DWORD *a1, _DWORD *a2)
{
  return a1[5] < a2[5];
}

uint64_t AcDetNode::getParams(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t ClsBufferInds;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t i;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;

  if (*a2 != 1)
    return 4294967289;
  if (a2[1] != 56945)
    return 4294967292;
  v7 = a4;
  v8 = a3 + 24 * a4;
  v9 = *(_OWORD *)(a1 + 20);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(a1 + 36);
  *(_OWORD *)v8 = v9;
  if (*(_DWORD *)(a1 + 104))
  {
    v10 = 0;
    do
    {
      v44 = -1;
      v45 = -1;
      v43 = -1;
      ClsBufferInds = acDetBboxCoderGetClsBufferInds(*(unsigned int *)(a1 + 1572), v10, &v45, &v44, &v43);
      v15 = v45;
      if (v45 == -1)
      {
        v20 = v44;
        if (v44 == -1)
          AcDetNode::postProcessDet(ClsBufferInds, v13, v14);
        v15 = v43;
        if (v43 == -1)
          AcDetNode::postProcessDet(ClsBufferInds, v13, v14);
        v21 = (_DWORD *)(a1 + 4 * v10);
        v22 = a3 + 576 * v7 + 24 * v44;
        *(_DWORD *)(v22 + 76) = v21[27];
        *(_DWORD *)(v22 + 72) = v21[33];
        if (a2[1] != 56945)
          AcDetNode::getParams();
        v23 = a3 + 576 * v7 + 72;
        v24 = v23 + 24 * v20;
        *(_DWORD *)(v24 + 8) = v21[303] * v21[57];
        *(_DWORD *)(v24 + 12) = 0;
        v25 = (_DWORD *)(v23 + 24 * v15);
        v25[1] = v21[27];
        *v25 = v21[33];
        v18 = v21[57];
        v19 = *(_DWORD *)(a1 + 1576);
      }
      else
      {
        v16 = (_DWORD *)(a1 + 4 * v10);
        v17 = a3 + 576 * v7 + 24 * v45;
        *(_DWORD *)(v17 + 76) = v16[27];
        *(_DWORD *)(v17 + 72) = v16[33];
        if (a2[1] != 56945)
          AcDetNode::getParams();
        v18 = v16[57];
        v19 = *(_DWORD *)(a1 + 44);
      }
      *(_QWORD *)(a3 + 576 * v7 + 24 * v15 + 80) = (v19 * v18);
      ++v10;
      v11 = *(unsigned int *)(a1 + 104);
    }
    while (v10 < v11);
    if ((_DWORD)v11)
    {
      if (a2[1] != 56945)
        AcDetNode::getParams(a1, a3, v7);
      for (i = 0; i != v11; ++i)
      {
        v28 = (_DWORD *)(a1 + 4 * i);
        v29 = a3 + 576 * v7 + 24 * (i + 6);
        *(_DWORD *)(v29 + 76) = v28[27];
        *(_DWORD *)(v29 + 72) = v28[33];
        *(_QWORD *)(v29 + 80) = (4 * v28[57]);
      }
      if (a2[1] != 56945)
        AcDetNode::getParams(a1, a3, v7);
      v30 = 0;
      v31 = *(_DWORD *)(a1 + 1484);
      do
      {
        v32 = (_DWORD *)(a1 + 4 * v30);
        v33 = a3 + 576 * v7 + 24 * (v30 + 12);
        *(_DWORD *)(v33 + 76) = v32[27];
        *(_DWORD *)(v33 + 72) = v32[33];
        *(_QWORD *)(v33 + 80) = (v31 * v32[57]);
        ++v30;
      }
      while (v11 != v30);
      if (a2[1] != 56945)
        AcDetNode::getParams(a1, a3, v7);
      v34 = 0;
      v35 = *(_DWORD *)(a1 + 1536);
      do
      {
        v36 = (_DWORD *)(a1 + 4 * v34);
        v37 = a3 + 576 * v7 + 24 * (v34 + 18);
        *(_DWORD *)(v37 + 76) = v36[27];
        *(_DWORD *)(v37 + 72) = v36[33];
        *(_QWORD *)(v37 + 80) = (v35 * v36[57]);
        ++v34;
      }
      while (v11 != v34);
    }
  }
  v38 = 0;
  v39 = (int *)(a1 + 1580);
  v40 = (_DWORD *)(a3 + 576 * v7 + 92);
  v41 = a3 + 768 * v7 + 1800;
  do
  {
    v42 = *v39++;
    *(v40 - 1) = v42;
    *v40 = 0;
    v40 += 6;
    strncpy((char *)(v41 + v38), (const char *)(a1 + v38 + 1676), 0x20uLL);
    v38 += 32;
  }
  while (v38 != 768);
  return 0;
}

uint64_t AcDetNode::classBufChCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) != 56945)
    AcDetNode::getParams();
  return (*(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 4 * a2 + 228));
}

uint64_t AcDetNode::classPosBufChCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) != 56945)
    AcDetNode::getParams();
  return (*(_DWORD *)(a1 + 4 * a2 + 1212) * *(_DWORD *)(a1 + 4 * a2 + 228));
}

uint64_t AcDetNode::classNegBufChCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) != 56945)
    AcDetNode::classNegBufChCount();
  return (*(_DWORD *)(a1 + 1576) * *(_DWORD *)(a1 + 4 * a2 + 228));
}

uint64_t AcDetNode::bboxBufChCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) != 56945)
    AcDetNode::bboxBufChCount();
  return (4 * *(_DWORD *)(a1 + 4 * a2 + 228));
}

uint64_t AcDetNode::rollBufChCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) != 56945)
    AcDetNode::rollBufChCount();
  return (*(_DWORD *)(a1 + 1484) * *(_DWORD *)(a1 + 4 * a2 + 228));
}

uint64_t AcDetNode::yawBufChCount(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) != 56945)
    AcDetNode::yawBufChCount();
  return (*(_DWORD *)(a1 + 1536) * *(_DWORD *)(a1 + 4 * a2 + 228));
}

void AcDetNode::useLowThresholds(AcDetNode *this, char a2)
{
  float *v3;

  *((_BYTE *)this + 3412) = a2;
  if ((a2 & 1) != 0)
  {
    *((float *)this + 617) = logf(*((float *)this + 355) / (float)(1.0 - *((float *)this + 355)));
    *((float *)this + 618) = logf(*((float *)this + 356) / (float)(1.0 - *((float *)this + 356)));
    *((float *)this + 619) = logf(*((float *)this + 357) / (float)(1.0 - *((float *)this + 357)));
    *((float *)this + 620) = logf(*((float *)this + 358) / (float)(1.0 - *((float *)this + 358)));
    *((float *)this + 621) = logf(*((float *)this + 359) / (float)(1.0 - *((float *)this + 359)));
    *((float *)this + 622) = logf(*((float *)this + 360) / (float)(1.0 - *((float *)this + 360)));
    *((float *)this + 623) = logf(*((float *)this + 361) / (float)(1.0 - *((float *)this + 361)));
    *((float *)this + 624) = logf(*((float *)this + 362) / (float)(1.0 - *((float *)this + 362)));
    *((float *)this + 625) = logf(*((float *)this + 363) / (float)(1.0 - *((float *)this + 363)));
    v3 = (float *)((char *)this + 1456);
  }
  else
  {
    *((float *)this + 617) = logf(*((float *)this + 345) / (float)(1.0 - *((float *)this + 345)));
    *((float *)this + 618) = logf(*((float *)this + 346) / (float)(1.0 - *((float *)this + 346)));
    *((float *)this + 619) = logf(*((float *)this + 347) / (float)(1.0 - *((float *)this + 347)));
    *((float *)this + 620) = logf(*((float *)this + 348) / (float)(1.0 - *((float *)this + 348)));
    *((float *)this + 621) = logf(*((float *)this + 349) / (float)(1.0 - *((float *)this + 349)));
    *((float *)this + 622) = logf(*((float *)this + 350) / (float)(1.0 - *((float *)this + 350)));
    *((float *)this + 623) = logf(*((float *)this + 351) / (float)(1.0 - *((float *)this + 351)));
    *((float *)this + 624) = logf(*((float *)this + 352) / (float)(1.0 - *((float *)this + 352)));
    *((float *)this + 625) = logf(*((float *)this + 353) / (float)(1.0 - *((float *)this + 353)));
    v3 = (float *)((char *)this + 1416);
  }
  *((float *)this + 626) = logf(*v3 / (float)(1.0 - *v3));
}

void OUTLINED_FUNCTION_0_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 547, a4);
}

void OUTLINED_FUNCTION_1(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 546, a4);
}

uint64_t ttMemBlockCoalesce(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  if (a2 >= 2)
  {
    v4 = a2;
    bmHeapsort(a1, a2, 0xCuLL, (int (*)(uint64_t, uint64_t))ttMemBlockCompareAddress);
    v5 = 0;
    v6 = 0;
    v7 = (_DWORD *)(a1 + 20);
    v8 = 1;
    do
    {
      v9 = (_QWORD *)(a1 + 12 * v5);
      v12 = *v9;
      v10 = v9 + 1;
      v11 = v12;
      v13 = v7;
      v14 = v8;
      do
      {
        v15 = *v10;
        if (v11 + v15 == *((_QWORD *)v13 - 1))
        {
          *v10 = *v13 + v15;
          *v13 = 0;
          v6 = 1;
        }
        ++v14;
        v13 += 3;
      }
      while (v14 < v2);
      ++v8;
      ++v5;
      v7 += 3;
    }
    while (v5 != (_DWORD)v2 - 1);
    if ((v6 & 1) != 0)
    {
      v2 = 0;
      v16 = (_DWORD *)(a1 + 8);
      do
      {
        if (*v16)
        {
          v17 = a1 + 12 * v2;
          v18 = *((_QWORD *)v16 - 1);
          v2 = (v2 + 1);
          *(_DWORD *)(v17 + 8) = *v16;
          *(_QWORD *)v17 = v18;
        }
        v16 += 3;
        --v4;
      }
      while (v4);
    }
  }
  return v2;
}

BOOL ttMemBlockCompareAddress(_QWORD *a1, _QWORD *a2)
{
  return *a1 > *a2;
}

uint64_t ttMemBlockCoalesceNoSort(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 >= 2)
  {
    v2 = 0;
    v3 = 0;
    v4 = (_DWORD *)(a1 + 20);
    v5 = 1;
    v6 = a2;
    do
    {
      v7 = (_QWORD *)(a1 + 12 * v2);
      v10 = *v7;
      v8 = v7 + 1;
      v9 = v10;
      v11 = v4;
      v12 = v5;
      do
      {
        v13 = *v8;
        if (v9 + v13 == *((_QWORD *)v11 - 1))
        {
          *v8 = *v11 + v13;
          *v11 = 0;
          v3 = 1;
        }
        ++v12;
        v11 += 3;
      }
      while (v12 < a2);
      ++v5;
      ++v2;
      v4 += 3;
    }
    while (v2 != (_DWORD)a2 - 1);
    if ((v3 & 1) != 0)
    {
      a2 = 0;
      v14 = (_DWORD *)(a1 + 8);
      do
      {
        if (*v14)
        {
          v15 = a1 + 12 * a2;
          v16 = *((_QWORD *)v14 - 1);
          a2 = (a2 + 1);
          *(_DWORD *)(v15 + 8) = *v14;
          *(_QWORD *)v15 = v16;
        }
        v14 += 3;
        --v6;
      }
      while (v6);
    }
  }
  return a2;
}

uint64_t acAttrReduceSmile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  float v4;
  float v5;

  if (a2 >= 0x65)
    acAttrReduceSmile();
  if (!*(_DWORD *)(a1 + 12) || (v3 = *(_DWORD *)(a1 + 8)) == 0)
    acAttrReduceSmile(a1, a2, a3);
  if (v3 <= 1)
    acAttrReduceSmile(a1, a2, a3);
  v4 = (float)a2 / 100.0;
  v5 = bmSoftmax2(**(float **)a1, *(float *)(*(_QWORD *)a1 + *(unsigned int *)(a1 + 16)));
  if (v5 >= v4)
    return bmClamp((int)(float)((float)((float)((float)(v5 - v4) / (float)(1.0 - v4)) * 100.0) + 0.5), 1u, 100);
  else
    return 0xFFFFFFFFLL;
}

uint64_t acAttrReduceBlink(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, __n128 a5)
{
  unsigned int v5;
  float *v7;
  uint64_t v8;
  float v9;
  BOOL v10;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16[2];
  unsigned __int32 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 8) <= 2u)
    acAttrReduceBlink();
  v5 = a2;
  if (a2 >= 0x65)
    acAttrReduceBlink();
  if (a3 >= 0x65)
    acAttrReduceBlink();
  if (!*(_DWORD *)(a1 + 12))
    acAttrReduceSmile(a1, a2, a3);
  v7 = *(float **)a1;
  v8 = *(unsigned int *)(a1 + 16);
  v16[0] = **(float **)a1;
  v9 = (float)a3 / 100.0;
  v16[1] = *(float *)((char *)v7 + v8);
  v17 = *(_DWORD *)((char *)v7 + (2 * v8));
  a5.n128_u32[0] = v17;
  bmSoftmax((float32x4_t *)v16, &v13, 3u, a5);
  v10 = v15 <= v9;
  *a4 = v15 > v9;
  if (!v10)
    return 0;
  v12 = (float)v5 / 100.0;
  if (v14 >= v12)
    return bmClamp((int)(float)((float)((float)((float)(v14 - v12) / (float)(1.0 - v12)) * 100.0) + 0.5), 1u, 100);
  else
    return 0xFFFFFFFFLL;
}

uint64_t acAttrReduceYaw(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  float *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float32x4_t v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a3 >= 0xB)
    acAttrReduceYaw();
  if ((_DWORD)a3)
  {
    if (!*(_DWORD *)(a1 + 12))
LABEL_14:
      acAttrReduceSmile(a1, a2, a3);
    v4 = (float *)a2;
    v5 = 0;
    v6 = a3;
    v7 = *(unsigned int *)(a1 + 8);
    do
    {
      if (v7 == v5)
        goto LABEL_14;
      a4.n128_u32[0] = *(_DWORD *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 16) * v5));
      v15[0].i32[v5++] = a4.n128_u32[0];
    }
    while (a3 != v5);
    v8 = v15;
    bmSoftmax(v15, v15[0].f32, a3, a4);
    v9 = 0.0;
    do
    {
      v10 = v8->f32[0];
      v8 = (float32x4_t *)((char *)v8 + 4);
      v11 = v10;
      v12 = *v4++;
      v9 = v9 + (float)(v11 * v12);
      --v6;
    }
    while (v6);
  }
  else
  {
    bmSoftmax(v15, v15[0].f32, 0, a4);
    v9 = 0.0;
  }
  v13 = -0.5;
  if (v9 > 0.0)
    v13 = 0.5;
  return (int)(float)(v9 + v13);
}

uint64_t acAttrReduceRoll(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, __n128 a5)
{
  float *v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x4_t v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a4 >= 0xB)
    acAttrReduceRoll();
  if (a4)
  {
    if (!*(_DWORD *)(a1 + 12))
LABEL_14:
      acAttrReduceSmile(a1, a2, a3);
    v5 = (float *)a3;
    v6 = (float *)a2;
    v7 = 0;
    v8 = a4;
    v9 = *(unsigned int *)(a1 + 8);
    do
    {
      if (v9 == v7)
        goto LABEL_14;
      a5.n128_u32[0] = *(_DWORD *)(*(_QWORD *)a1 + (*(_DWORD *)(a1 + 16) * v7));
      v20[0].i32[v7++] = a5.n128_u32[0];
    }
    while (a4 != v7);
    v10 = v20;
    bmSoftmax(v20, v20[0].f32, a4, a5);
    v11 = 0.0;
    v12 = 0.0;
    do
    {
      v13 = v10->f32[0];
      v10 = (float32x4_t *)((char *)v10 + 4);
      v14 = v13;
      v15 = *v6++;
      v12 = v12 + (float)(v14 * v15);
      v16 = *v5++;
      v11 = v11 + (float)(v14 * v16);
      --v8;
    }
    while (v8);
  }
  else
  {
    bmSoftmax(v20, v20[0].f32, 0, a5);
    v12 = 0.0;
    v11 = 0.0;
  }
  v17 = (float)(atan2f(v12, v11) / 3.1416) * 180.0;
  v18 = -0.5;
  if (v17 > 0.0)
    v18 = 0.5;
  return (int)(float)(v17 + v18);
}

void OUTLINED_FUNCTION_0_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 70, a4);
}

double acDetRectNull@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

float acDetRectWidth(float *a1)
{
  return bmMaximum(0.0, a1[2] - *a1);
}

float acDetRectHeight(uint64_t a1)
{
  return bmMaximum(0.0, *(float *)(a1 + 12) - *(float *)(a1 + 4));
}

float acDetRectCenterX(float *a1)
{
  return (float)(*a1 + a1[2]) * 0.5;
}

float acDetRectCenterY(uint64_t a1)
{
  return (float)(*(float *)(a1 + 4) + *(float *)(a1 + 12)) * 0.5;
}

float acDetRectArea(float *a1)
{
  float v2;

  v2 = bmMaximum(0.0, a1[2] - *a1);
  return v2 * bmMaximum(0.0, a1[3] - a1[1]);
}

void acDetRectIntersect(float *a1@<X0>, float *a2@<X1>, float *a3@<X8>)
{
  *a3 = bmMaximum(*a1, *a2);
  a3[1] = bmMaximum(a1[1], a2[1]);
  a3[2] = bmMinimum(a1[2], a2[2]);
  a3[3] = bmMinimum(a1[3], a2[3]);
  a3[6] = bmMaximum(a1[6], a2[6]);
}

void acDetRectOverlap(float *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;

  bmMaximum(0.0, a1[2] - *a1);
  bmMaximum(0.0, a1[3] - a1[1]);
  bmMaximum(0.0, a2[2] - *a2);
  bmMaximum(0.0, a2[3] - a2[1]);
  v4 = bmMaximum(*a1, *a2);
  v5 = bmMaximum(a1[1], a2[1]);
  v6 = bmMinimum(a1[2], a2[2]);
  v7 = bmMinimum(a1[3], a2[3]);
  bmMaximum(a1[6], a2[6]);
  bmMaximum(0.0, v6 - v4);
  bmMaximum(0.0, v7 - v5);
}

void acDetRectOverlapSmallbox(float *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  v4 = bmMaximum(0.0, a1[2] - *a1);
  v5 = v4 * bmMaximum(0.0, a1[3] - a1[1]);
  v6 = bmMaximum(0.0, a2[2] - *a2);
  v7 = v6 * bmMaximum(0.0, a2[3] - a2[1]);
  v8 = bmMaximum(*a1, *a2);
  v9 = bmMaximum(a1[1], a2[1]);
  v10 = bmMinimum(a1[2], a2[2]);
  v11 = bmMinimum(a1[3], a2[3]);
  bmMaximum(a1[6], a2[6]);
  bmMaximum(0.0, v10 - v8);
  bmMaximum(0.0, v11 - v9);
  bmMinimum(v5, v7);
}

BOOL acDetRectScoreCompare(float *a1, float *a2)
{
  return a1[6] < a2[6];
}

BOOL acDetRectClassCompare(_DWORD *a1, _DWORD *a2)
{
  return a1[4] < a2[4];
}

uint64_t acDetRectFilterByScore(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v3 = 0;
  if (a2)
  {
    v4 = a1 + 24;
    v5 = a2;
    do
    {
      if (*(float *)v4 > *(float *)(a3 + 4 * *(unsigned int *)(v4 - 8)))
      {
        v6 = a1 + 36 * v3;
        v3 = (v3 + 1);
        v7 = *(_OWORD *)(v4 - 24);
        v8 = *(_OWORD *)(v4 - 8);
        *(_DWORD *)(v6 + 32) = *(_DWORD *)(v4 + 8);
        *(_OWORD *)v6 = v7;
        *(_OWORD *)(v6 + 16) = v8;
      }
      v4 += 36;
      --v5;
    }
    while (v5);
  }
  return v3;
}

unint64_t acDetRectSmallRectSuppression(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v4;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v30;
  unint64_t v31;
  __int128 *v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  float *v37;

  v4 = a2;
  if ((_DWORD)a2)
  {
    v8 = 0;
    v9 = (__int128 *)(a1 + 36);
    v10 = 1;
    do
    {
      v11 = v4;
      v31 = v10;
      v32 = v9;
      v30 = v8 + 1;
      if (v8 + 1 >= v4)
      {
        v4 = v8 + 1;
      }
      else
      {
        v12 = a1 + 36 * v8;
        v13 = (_DWORD *)(v12 + 16);
        v36 = (float *)(v12 + 4);
        v37 = (float *)(v12 + 24);
        v33 = (float *)v12;
        v34 = (float *)(v12 + 12);
        v35 = (float *)(v12 + 8);
        v4 = v8 + 1;
        do
        {
          if (*v37 < *((float *)v9 + 6))
            acDetRectSmallRectSuppression();
          if (*v13 != *((_DWORD *)v9 + 4))
            goto LABEL_15;
          v14 = bmMaximum(*v33, *(float *)v9);
          v15 = bmMaximum(*v36, *((float *)v9 + 1));
          v16 = bmMinimum(*v35, *((float *)v9 + 2));
          v17 = bmMinimum(*v34, *((float *)v9 + 3));
          bmMaximum(*v37, *((float *)v9 + 6));
          v18 = bmMaximum(0.0, v16 - v14);
          v19 = v18 * bmMaximum(0.0, v17 - v15);
          v20 = bmMaximum(0.0, *((float *)v9 + 2) - *(float *)v9);
          v21 = v20 * bmMaximum(0.0, *((float *)v9 + 3) - *((float *)v9 + 1));
          v22 = bmMaximum(0.0, *v35 - *v33);
          v23 = (float)(v22 * bmMaximum(0.0, *v34 - *v36)) * a4;
          if ((float)(v19 / v21) <= a3 || v21 > v23)
          {
LABEL_15:
            v25 = v4;
            if (v10 < v4)
              acDetRectSmallRectSuppression();
            v4 = (v4 + 1);
            v26 = a1 + 36 * v25;
            v27 = *v9;
            v28 = v9[1];
            *(_DWORD *)(v26 + 32) = *((_DWORD *)v9 + 8);
            *(_OWORD *)v26 = v27;
            *(_OWORD *)(v26 + 16) = v28;
          }
          ++v10;
          v9 = (__int128 *)((char *)v9 + 36);
        }
        while (v11 != (_DWORD)v10);
      }
      v10 = v31 + 1;
      v9 = (__int128 *)((char *)v32 + 36);
      v8 = v30;
    }
    while (v30 < v4);
  }
  return v4;
}

unint64_t acDetRectLowMergeCountSuppression(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, float a5)
{
  unint64_t v5;
  unint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v38;
  unint64_t v39;
  __int128 *v40;
  uint64_t v41;
  float *v43;
  float *v44;
  float *v45;
  float *v46;
  float *v47;

  v5 = a2;
  if ((_DWORD)a2)
  {
    v7 = 0;
    v8 = (__int128 *)(a1 + 36);
    v9 = 1;
    v41 = a1;
    do
    {
      v10 = a1 + 36 * v7;
      v11 = (unsigned int *)(v10 + 20);
      v12 = v7 + 1;
      v39 = v9;
      v40 = v8;
      v38 = v7 + 1;
      if (*(_DWORD *)(v10 + 20) > a4)
      {
        v13 = v5;
        if (v12 >= v5)
        {
          v5 = v7 + 1;
        }
        else
        {
          v14 = a1 + 36 * v7;
          v15 = (_DWORD *)(v14 + 16);
          v46 = (float *)(v14 + 12);
          v47 = (float *)(v14 + 8);
          v44 = (float *)v10;
          v45 = (float *)(v14 + 4);
          v43 = (float *)(v14 + 24);
          v5 = v12;
          do
          {
            if (*v15 != *((_DWORD *)v8 + 4))
              goto LABEL_19;
            v16 = bmMaximum(0.0, *v47 - *v44);
            v17 = v16 * bmMaximum(0.0, *v46 - *v45);
            v18 = bmMaximum(0.0, *((float *)v8 + 2) - *(float *)v8);
            v19 = v18 * bmMaximum(0.0, *((float *)v8 + 3) - *((float *)v8 + 1));
            v20 = bmMaximum(*v44, *(float *)v8);
            v21 = bmMaximum(*v45, *((float *)v8 + 1));
            v22 = bmMinimum(*v47, *((float *)v8 + 2));
            v23 = bmMinimum(*v46, *((float *)v8 + 3));
            bmMaximum(*v43, *((float *)v8 + 6));
            v24 = bmMaximum(0.0, v22 - v20);
            v25 = bmMaximum(0.0, v23 - v21);
            a1 = v41;
            v26 = v24 * v25;
            v27 = (float)(v17 + v19) - v26;
            v28 = v26 / v27;
            if (v27 < 0.00000011921)
              v28 = 0.0;
            v29 = *((_DWORD *)v8 + 5);
            v30 = v28 > a5 && *v11 >= v29;
            if (!v30 || *v11 - v29 <= a3)
            {
LABEL_19:
              v32 = v5;
              if (v9 < v5)
                acDetRectLowMergeCountSuppression();
              v5 = (v5 + 1);
              v33 = a1 + 36 * v32;
              v34 = *v8;
              v35 = v8[1];
              *(_DWORD *)(v33 + 32) = *((_DWORD *)v8 + 8);
              *(_OWORD *)v33 = v34;
              *(_OWORD *)(v33 + 16) = v35;
            }
            ++v9;
            v8 = (__int128 *)((char *)v8 + 36);
          }
          while (v13 != (_DWORD)v9);
        }
      }
      v9 = v39 + 1;
      v8 = (__int128 *)((char *)v40 + 36);
      v7 = v38;
    }
    while (v38 < v5);
  }
  return v5;
}

unint64_t acDetRectWeightedMerge(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v4;
  unint64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  float *v10;
  float v11;
  float *v12;
  float v13;
  float *v14;
  float v15;
  float *v16;
  float v17;
  unint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  unsigned int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 *v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;

  if (!a1)
    acDetRectWeightedMerge();
  v4 = a2;
  if ((_DWORD)a2)
  {
    v6 = 0;
    v7 = (__int128 *)(a1 + 36);
    v8 = 1;
    do
    {
      v9 = v6 + 1;
      v48 = v6;
      v10 = (float *)(a1 + 36 * v6);
      v11 = v10[6];
      v12 = v10 + 1;
      v13 = v10[1];
      v57 = v11 * *v10;
      v58 = v11 * v13;
      v14 = v10 + 3;
      v15 = bmMaximum(0.0, v10[3] - v13);
      v16 = v10 + 2;
      v17 = bmMaximum(0.0, v10[2] - *v10);
      v18 = v9;
      v55 = v15 * v10[6];
      v56 = v10[6];
      v54 = v17 * v56;
      v19 = v4;
      v49 = v8;
      v50 = v7;
      v47 = v18;
      if (v18 >= v4)
      {
        v53 = 1;
        v4 = v18;
      }
      else
      {
        v62 = (float)(*v12 + *v14) * 0.5;
        v63 = (float)(*v10 + *v16) * 0.5;
        v51 = v17;
        v52 = v15;
        v61 = fminf(v17, v15);
        v53 = 1;
        v4 = v18;
        do
        {
          while (1)
          {
            v65 = bmMaximum(0.0, *((float *)v7 + 3) - *((float *)v7 + 1));
            v64 = bmMaximum(0.0, *((float *)v7 + 2) - *(float *)v7);
            v21 = (float)(*(float *)v7 + *((float *)v7 + 2)) * 0.5;
            v22 = (float)(*((float *)v7 + 1) + *((float *)v7 + 3)) * 0.5;
            v23 = bmMaximum(0.0, *v16 - *v10);
            v24 = v23 * bmMaximum(0.0, *v14 - *v12);
            v25 = bmMaximum(0.0, *((float *)v7 + 2) - *(float *)v7);
            v26 = v25 * bmMaximum(0.0, *((float *)v7 + 3) - *((float *)v7 + 1));
            v27 = bmMaximum(*v10, *(float *)v7);
            v28 = bmMaximum(*v12, *((float *)v7 + 1));
            v29 = bmMinimum(*v16, *((float *)v7 + 2));
            v30 = bmMinimum(*v14, *((float *)v7 + 3));
            bmMaximum(v10[6], *((float *)v7 + 6));
            v31 = bmMaximum(0.0, v29 - v27);
            v32 = v31 * bmMaximum(0.0, v30 - v28);
            v33 = (float)(v24 + v26) - v32;
            v34 = v32 / v33;
            if (v33 < 0.00000011921)
              v34 = 0.0;
            v35 = (float)((float)(sqrtf((float)((float)(v62 - v22) * (float)(v62 - v22))+ (float)((float)(v63 - v21) * (float)(v63 - v21)))* a4)/ v61)+ (float)(1.0 - sqrtf(v34));
            if (v35 >= a3)
              break;
            v36 = *((float *)v7 + 1);
            v37 = 1.0 - v35;
            v38 = fmaxf(fminf(*((float *)v7 + 3), *v14) - fmaxf(v36, *v12), 0.0);
            v39 = v51 * v37;
            v40 = v52 * v37;
            if (fmaxf(fminf(*((float *)v7 + 2), *v16) - fmaxf(*(float *)v7, *v10), 0.0) < v39 || v38 < v40)
              break;
            v20 = *((float *)v7 + 6);
            v57 = v57 + (float)(v20 * *(float *)v7);
            v58 = v58 + (float)(v20 * v36);
            v54 = v54 + (float)(v20 * v64);
            v55 = v55 + (float)(v20 * v65);
            v56 = v56 + v20;
            ++v53;
            ++v8;
            v7 = (__int128 *)((char *)v7 + 36);
            if (v19 == (_DWORD)v8)
              goto LABEL_5;
          }
          v42 = v4;
          if (v8 < v4)
            acDetRectWeightedMerge();
          v4 = (v4 + 1);
          v43 = a1 + 36 * v42;
          v44 = *v7;
          v45 = v7[1];
          *(_DWORD *)(v43 + 32) = *((_DWORD *)v7 + 8);
          *(_OWORD *)v43 = v44;
          *(_OWORD *)(v43 + 16) = v45;
          ++v8;
          v7 = (__int128 *)((char *)v7 + 36);
        }
        while (v19 != (_DWORD)v8);
      }
LABEL_5:
      *v10 = v57 / v56;
      *v12 = v58 / v56;
      *v16 = (float)(v54 / v56) + (float)(v57 / v56);
      *v14 = (float)(v55 / v56) + (float)(v58 / v56);
      *(_DWORD *)(a1 + 36 * v48 + 20) = v53;
      v8 = v49 + 1;
      v7 = (__int128 *)((char *)v50 + 36);
      v6 = v47;
    }
    while (v47 < v4);
  }
  return v4;
}

int32x2_t acDetRectFromFace@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float32x2_t v2;
  float32x2_t v3;
  int v4;
  int32x2_t result;

  v2 = *(float32x2_t *)(a1 + 8);
  v3 = vadd_f32(v2, *(float32x2_t *)(a1 + 16));
  *(float32x2_t *)a2 = v2;
  *(float32x2_t *)(a2 + 8) = v3;
  v4 = *(_DWORD *)(a1 + 4);
  if (v4 >= 7)
    acDetRectFromFace();
  *(_DWORD *)(a2 + 16) = v4 + 1;
  *(float *)(a2 + 24) = (float)*(unsigned int *)(a1 + 24) / 1000.0;
  result = vrev64_s32((int32x2_t)vcvt_f32_s32(*(int32x2_t *)(a1 + 28)));
  *(int32x2_t *)(a2 + 28) = result;
  return result;
}

char *TtTrkRpnNode::TtTrkRpnNode(char *a1, _QWORD *a2)
{
  _OWORD *v4;

  v4 = a1 + 536;
  bzero(a1, 0x218uLL);
  *a2 = 0x721CC00000001;
  *v4 = 0u;
  return a1;
}

{
  _OWORD *v4;

  v4 = a1 + 536;
  bzero(a1, 0x218uLL);
  *a2 = 0x721CC00000001;
  *v4 = 0u;
  return a1;
}

void TtTrkRpnNode::~TtTrkRpnNode(TtTrkRpnNode *this)
{
  TtTrkRpnNode::releaseBuffers(this);
}

{
  TtTrkRpnNode::releaseBuffers(this);
}

uint64_t TtTrkRpnNode::releaseBuffers(TtTrkRpnNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *((_QWORD *)this + 55);
  if (v2)
    MEMORY[0x212B93EEC](v2, 0x1000C80451B5BE8);
  v3 = *((_QWORD *)this + 56);
  if (v3)
    MEMORY[0x212B93EEC](v3, 0x1000C80451B5BE8);
  v4 = *((_QWORD *)this + 57);
  if (v4)
    MEMORY[0x212B93EEC](v4, 0x1000C8052888210);
  v5 = *((_QWORD *)this + 58);
  if (v5)
    MEMORY[0x212B93EEC](v5, 0x1000C8052888210);
  v6 = *((_QWORD *)this + 59);
  if (v6)
    MEMORY[0x212B93EEC](v6, 0x1000C8052888210);
  v7 = *((_QWORD *)this + 60);
  if (v7)
    MEMORY[0x212B93EEC](v7, 0x1000C8052888210);
  v8 = *((_QWORD *)this + 67);
  if (v8)
    MEMORY[0x212B93EEC](v8, 0x1000C8052888210);
  result = *((_QWORD *)this + 68);
  if (result)
    JUMPOUT(0x212B93EECLL);
  return result;
}

uint64_t TtTrkRpnNode::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ft::UserDefaults *v6;
  ft *v7;
  NSObject *OsLog;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float32x2_t v17;
  int v18;
  double v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)a3 != 1)
    return 4294967289;
  if ((*(_DWORD *)(a3 + 4) - 467393) <= 0xB && ((1 << (*(_BYTE *)(a3 + 4) + 63)) & 0xB01) != 0)
  {
    v6 = (ft::UserDefaults *)TtTrkRpnNode::releaseBuffers((TtTrkRpnNode *)a1);
    *(_QWORD *)(a1 + 20) = 0x800000013;
    *(_QWORD *)(a1 + 28) = 0x4100000000000001;
    *(_DWORD *)(a1 + 52) = 5;
    *(_OWORD *)(a1 + 56) = xmmword_20CCAA340;
    *(_OWORD *)(a1 + 132) = xmmword_20CCAA350;
    *(_QWORD *)(a1 + 260) = 0x1400000013;
    *(_DWORD *)(a1 + 268) = 10;
    *(_OWORD *)(a1 + 148) = xmmword_20CCAA360;
    *(_OWORD *)(a1 + 164) = xmmword_20CCAA370;
    *(_DWORD *)(a1 + 336) = 6;
    *(_OWORD *)(a1 + 244) = xmmword_20CCAA380;
    *(_OWORD *)(a1 + 72) = xmmword_20CCAA390;
    *(_OWORD *)(a1 + 116) = xmmword_20CCAA3A0;
    *(_OWORD *)(a1 + 88) = xmmword_20CCAA3B0;
    *(_QWORD *)(a1 + 104) = 0x3E4CCCCD3BB60B61;
    *(_DWORD *)(a1 + 112) = 1069547520;
    v7 = (ft *)ft::UserDefaults::Get(v6);
    switch(*((_DWORD *)v7 + 1))
    {
      case 1:
        *(_DWORD *)(a1 + 92) = 1050924810;
        OsLog = ft::GetOsLog(v7);
        if (!os_log_type_enabled(OsLog, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        goto LABEL_15;
      case 2:
        *(_DWORD *)(a1 + 92) = 1053609165;
        OsLog = ft::GetOsLog(v7);
        if (!os_log_type_enabled(OsLog, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        goto LABEL_15;
      case 4:
        *(_DWORD *)(a1 + 92) = 1056964608;
        goto LABEL_14;
      case 5:
        *(_QWORD *)(a1 + 92) = 0x3F4CCCCD3F0F5C29;
        *(_DWORD *)(a1 + 100) = 1058642330;
        OsLog = ft::GetOsLog(v7);
        if (!os_log_type_enabled(OsLog, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        goto LABEL_15;
      default:
LABEL_14:
        OsLog = ft::GetOsLog(v7);
        if (os_log_type_enabled(OsLog, OS_LOG_TYPE_INFO))
        {
LABEL_15:
          v10 = *(float *)(a1 + 92);
          v18 = 134217984;
          v19 = v10;
          _os_log_impl(&dword_20CC71000, OsLog, OS_LOG_TYPE_INFO, "RPN score cutoff set to %0.4f", (uint8_t *)&v18, 0xCu);
        }
LABEL_16:
        *(_DWORD *)(a3 + 4) = 467393;
        *(_WORD *)(a3 + 1856) = 0;
        *(_DWORD *)(a3 + 1820) = 1065353216;
        *(_OWORD *)(a3 + 1836) = 0u;
        *(_WORD *)(a3 + 1861) = 0;
        *(_DWORD *)(a3 + 1852) = 0;
        *(_OWORD *)(a3 + 1572) = 0u;
        *(_OWORD *)(a3 + 1588) = 0u;
        *(_OWORD *)(a3 + 1604) = 0u;
        *(_OWORD *)(a3 + 1620) = 0u;
        *(_OWORD *)(a3 + 1636) = 0u;
        *(_OWORD *)(a3 + 1652) = 0u;
        *(_OWORD *)(a3 + 1668) = 0u;
        *(_OWORD *)(a3 + 1684) = 0u;
        *(_OWORD *)(a3 + 1700) = 0u;
        *(_OWORD *)(a3 + 1716) = 0u;
        *(_OWORD *)(a3 + 1732) = 0u;
        *(_OWORD *)(a3 + 1748) = 0u;
        *(_OWORD *)(a3 + 1764) = 0u;
        *(_OWORD *)(a3 + 1780) = 0u;
        *(_OWORD *)(a3 + 1796) = 0u;
        *(_DWORD *)(a1 + 436) = *(_DWORD *)(a1 + 20)
                              * *(_DWORD *)(a1 + 20)
                              * *(_DWORD *)(a1 + 28)
                              * *(_DWORD *)(a1 + 52);
        *(_QWORD *)(a1 + 440) = operator new[]();
        *(_QWORD *)(a1 + 448) = operator new[]();
        *(_QWORD *)(a1 + 456) = operator new[]();
        *(_QWORD *)(a1 + 464) = operator new[]();
        *(_QWORD *)(a1 + 472) = operator new[]();
        *(_QWORD *)(a1 + 480) = operator new[]();
        TtTrkRpnNode::PopulateAnchorBoxes(a1, v11, v12, v13, v14, v15, v16, v17);
        TtTrkRpnNode::PopulatePenaltyMatrix((TtTrkRpnNode *)a1);
    }
  }
  return 4294967292;
}

double TtTrkRpnNode::killTrackedObject(uint64_t a1, uint64_t a2)
{
  double result;

  *(_WORD *)(a2 + 1856) = 0;
  *(_DWORD *)(a2 + 1820) = 1065353216;
  result = 0.0;
  *(_OWORD *)(a2 + 1836) = 0u;
  *(_WORD *)(a2 + 1861) = 0;
  *(_DWORD *)(a2 + 1852) = 0;
  *(_OWORD *)(a2 + 1572) = 0u;
  *(_OWORD *)(a2 + 1588) = 0u;
  *(_OWORD *)(a2 + 1604) = 0u;
  *(_OWORD *)(a2 + 1620) = 0u;
  *(_OWORD *)(a2 + 1636) = 0u;
  *(_OWORD *)(a2 + 1652) = 0u;
  *(_OWORD *)(a2 + 1668) = 0u;
  *(_OWORD *)(a2 + 1684) = 0u;
  *(_OWORD *)(a2 + 1700) = 0u;
  *(_OWORD *)(a2 + 1716) = 0u;
  *(_OWORD *)(a2 + 1732) = 0u;
  *(_OWORD *)(a2 + 1748) = 0u;
  *(_OWORD *)(a2 + 1764) = 0u;
  *(_OWORD *)(a2 + 1780) = 0u;
  *(_OWORD *)(a2 + 1796) = 0u;
  return result;
}

uint64_t TtTrkRpnNode::PopulateAnchorBoxes(uint64_t this, double a2, double a3, double a4, double a5, double a6, double a7, float32x2_t a8)
{
  float32x2_t v8;
  int32x2_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  int v25;
  uint64_t v26;
  float32x2_t v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  float v31;
  float32x2_t *v32;
  float32x2_t *v33;
  float32x2_t *v34;
  float32x2_t *v35;
  float32x2_t *v36;
  float32x2_t *v37;
  float32x2_t *v38;
  uint64_t v39;
  unsigned int v40;
  int32x4_t v41;
  int32x4_t v42;
  unsigned int v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  int v47;
  int32x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  unsigned int v51;
  unsigned int v52;
  int32x4_t v53;
  unsigned int v54;
  int32x4_t v55;
  int32x4_t v56;
  float32x4_t v57;
  float *v58;
  float *v59;
  unsigned int v60;
  int v61;
  uint64_t v62;
  float32x4x4_t v63;

  v10 = *(unsigned int *)(this + 52);
  if (!(_DWORD)v10)
    return this;
  v11 = *(_DWORD *)(this + 20);
  v12 = *(unsigned int *)(this + 28);
  if (!(_DWORD)v12 || v11 == 0)
    return this;
  v14 = *(_DWORD *)(this + 24);
  v15 = v11 >> 1;
  *(float *)&a2 = (float)(v14 * v14);
  v16 = *(_QWORD *)(this + 440);
  if (v11 >= 8)
  {
    v39 = 0;
    v40 = 0;
    v41 = vdupq_n_s32(v15);
    v42 = vdupq_n_s32(v14);
    v43 = v11 & 0xFFFFFFF8;
    v44.i64[0] = 0x400000004;
    v44.i64[1] = 0x400000004;
    v45.i64[0] = 0x800000008;
    v45.i64[1] = 0x800000008;
    while (1)
    {
      v46 = 0;
      a8.i32[0] = *(_DWORD *)(this + 4 * v39 + 56);
      a8 = vcvt_f32_s32(vcvt_s32_f32(vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vdiv_f32(*(float32x2_t *)&a2, a8), (int32x2_t)vmul_f32(*(float32x2_t *)&a2, a8)))));
      do
      {
        v47 = 0;
        v48 = (int32x2_t)vcvt_f32_s32(vcvt_s32_f32(vmul_n_f32(a8, *(float *)(this + 4 * v46 + 32))));
        v49 = vdupq_lane_s32(v48, 0);
        v50 = vdupq_lane_s32(v48, 1);
        do
        {
          *(float *)v9.i32 = (float)(int)((v47 - v15) * v14);
          if (__CFADD__(v40, v11 - 1))
          {
            v51 = 0;
            v52 = v40;
LABEL_33:
            v60 = v11 - v51;
            v61 = v14 * (v51 - v15);
            v40 = v52;
            do
            {
              v62 = v16 + 16 * v40;
              *(float *)v62 = (float)v61;
              *(_DWORD *)(v62 + 4) = v9.i32[0];
              *(int32x2_t *)(v62 + 8) = v48;
              ++v40;
              v61 += v14;
              --v60;
            }
            while (v60);
            goto LABEL_27;
          }
          v52 = v40 + v43;
          v53 = vdupq_lane_s32(v9, 0);
          v54 = v11 & 0xFFFFFFF8;
          v55 = (int32x4_t)xmmword_20CCAA3C0;
          do
          {
            v56 = vsubq_s32(v55, v41);
            v57 = vcvtq_f32_s32(vmulq_s32(v56, v42));
            v63.val[0] = vcvtq_f32_s32(vmulq_s32(vaddq_s32(v56, v44), v42));
            v63.val[1] = (float32x4_t)v53;
            v63.val[2] = (float32x4_t)v49;
            v63.val[3] = (float32x4_t)v50;
            v58 = (float *)(v16 + 16 * v40);
            v59 = (float *)(v16 + 16 * (v40 + 4));
            vst4q_f32(v58, *(float32x4x4_t *)(&v49 - 2));
            vst4q_f32(v59, v63);
            v55 = vaddq_s32(v55, v45);
            v40 += 8;
            v54 -= 8;
          }
          while (v54);
          v51 = v11 & 0xFFFFFFF8;
          v40 = v52;
          if (v11 != v43)
            goto LABEL_33;
LABEL_27:
          ++v47;
        }
        while (v47 != v11);
        ++v46;
      }
      while (v46 != v12);
      if (++v39 == v10)
        return this;
    }
  }
  v17 = 0;
  v18 = 0;
  v19 = (float)(int)(v14 - v15 * v14);
  v20 = (float)(int)((2 - v15) * v14);
  v21 = (float)(int)((3 - v15) * v14);
  v22 = (float)(int)((4 - v15) * v14);
  v23 = (float)(int)((5 - v15) * v14);
  v24 = (float)(int)((6 - v15) * v14);
  v25 = -(v15 * v14);
  do
  {
    v26 = 0;
    v8.i32[0] = *(_DWORD *)(this + 4 * v17 + 56);
    v8 = vcvt_f32_s32(vcvt_s32_f32(vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vdiv_f32(*(float32x2_t *)&a2, v8), (int32x2_t)vmul_f32(*(float32x2_t *)&a2, v8)))));
    do
    {
      v27 = vcvt_f32_s32(vcvt_s32_f32(vmul_n_f32(v8, *(float *)(this + 4 * v26 + 32))));
      v28 = v25;
      v29 = v11;
      do
      {
        v30 = v18;
        v31 = (float)v28;
        v32 = (float32x2_t *)(v16 + 16 * v18);
        v32->f32[0] = (float)v25;
        v32->f32[1] = (float)v28;
        v32[1] = v27;
        v18 = v30 + 1;
        if (v11 != 1)
        {
          v33 = (float32x2_t *)(v16 + 16 * v18);
          v33->f32[0] = v19;
          v33->f32[1] = v31;
          v33[1] = v27;
          v18 = v30 + 2;
          if (v11 != 2)
          {
            v34 = (float32x2_t *)(v16 + 16 * v18);
            v34->f32[0] = v20;
            v34->f32[1] = v31;
            v34[1] = v27;
            v18 = v30 + 3;
            if (v11 != 3)
            {
              v35 = (float32x2_t *)(v16 + 16 * v18);
              v35->f32[0] = v21;
              v35->f32[1] = v31;
              v35[1] = v27;
              v18 = v30 + 4;
              if (v11 != 4)
              {
                v36 = (float32x2_t *)(v16 + 16 * v18);
                v36->f32[0] = v22;
                v36->f32[1] = v31;
                v36[1] = v27;
                v18 = v30 + 5;
                if (v11 != 5)
                {
                  v37 = (float32x2_t *)(v16 + 16 * v18);
                  v37->f32[0] = v23;
                  v37->f32[1] = v31;
                  v37[1] = v27;
                  v18 = v30 + 6;
                  if (v11 != 6)
                  {
                    v38 = (float32x2_t *)(v16 + 16 * v18);
                    v38->f32[0] = v24;
                    v38->f32[1] = v31;
                    v38[1] = v27;
                    v18 = v30 + 7;
                  }
                }
              }
            }
          }
        }
        v28 += v14;
        --v29;
      }
      while (v29);
      ++v26;
    }
    while (v26 != v12);
    ++v17;
  }
  while (v17 != v10);
  return this;
}

void TtTrkRpnNode::PopulatePenaltyMatrix(TtTrkRpnNode *this)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  char *v5;
  int32x2_t v6;
  uint64_t v7;
  float v8;
  uint32x4_t v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  int v20;
  uint64_t i;
  float v22;
  float *v23;
  int v24;
  uint64_t v25;
  float v26;
  unint64_t v27;
  int v28;
  uint64_t j;
  float v30;
  float *v31;
  int v32;
  uint64_t v33;
  float v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t *v45;
  int v46;
  float *v47;
  uint64_t v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;

  v2 = *((unsigned int *)this + 5);
  v3 = operator new[]();
  v4 = 4 * (v2 * v2);
  v5 = (char *)operator new[]();
  if (!(_DWORD)v2)
  {
LABEL_19:
    if (*((_DWORD *)this + 13) * *((_DWORD *)this + 7))
    {
      v35 = 0;
      v36 = 0;
      v37 = v2 * v2;
      do
      {
        memcpy((void *)(*((_QWORD *)this + 60) + 4 * v35), v5, v4);
        ++v36;
        v35 += v37;
      }
      while (v36 < (*((_DWORD *)this + 13) * *((_DWORD *)this + 7)));
    }
    MEMORY[0x212B93EEC](v3, 0x1000C8052888210);
    JUMPOUT(0x212B93EECLL);
  }
  if (v2 >= 4)
  {
    v7 = v2 & 0xFFFFFFFC;
    *(float *)v6.i32 = (float)v2 + -1.0;
    v51 = (float32x4_t)vdupq_lane_s32(v6, 0);
    v9 = (uint32x4_t)xmmword_20CCAA3C0;
    v50 = (float32x4_t)vdupq_n_s32(0x40C90FDBu);
    v10 = v7;
    v11 = (float32x4_t *)v3;
    do
    {
      v52 = (int32x4_t)v9;
      v56 = vdivq_f32(vmulq_f32(vcvtq_f32_u32(v9), v50), v51);
      v53 = cosf(v56.f32[1]);
      v12.f32[0] = cosf(v56.f32[0]);
      v12.f32[1] = v53;
      v54 = v12;
      v13 = cosf(v56.f32[2]);
      v14 = v54;
      v14.f32[2] = v13;
      v55 = v14;
      v15 = cosf(v56.f32[3]);
      v16 = v55;
      v16.f32[3] = v15;
      v17.i64[0] = 0x3F0000003F000000;
      v17.i64[1] = 0x3F0000003F000000;
      v18.i64[0] = 0xBF000000BF000000;
      v18.i64[1] = 0xBF000000BF000000;
      *v11++ = vmlaq_f32(v17, v18, v16);
      v18.i64[0] = 0x400000004;
      v18.i64[1] = 0x400000004;
      v9 = (uint32x4_t)vaddq_s32(v52, (int32x4_t)v18);
      v10 -= 4;
    }
    while (v10);
    v8 = (float)v2 + -1.0;
    if (v7 == v2)
      goto LABEL_8;
  }
  else
  {
    v7 = 0;
    v8 = (float)v2 + -1.0;
  }
  do
  {
    v19 = cosf((float)((float)v7 * 6.2832) / v8);
    v8 = (float)v2 + -1.0;
    *(float *)(v3 + 4 * v7++) = (float)(v19 * -0.5) + 0.5;
  }
  while (v2 != v7);
LABEL_8:
  if (v2 <= 7)
  {
    v20 = 0;
    for (i = 0; i != v2; ++i)
    {
      v22 = *(float *)(v3 + 4 * i);
      v23 = (float *)v3;
      v24 = v20;
      v25 = v2;
      do
      {
        v26 = *v23++;
        *(float *)&v5[4 * v24++] = v22 * v26;
        --v25;
      }
      while (v25);
      v20 += v2;
    }
    goto LABEL_19;
  }
  v27 = (unint64_t)(v2 - 1) >> 32;
  if (v27)
  {
    v28 = 0;
    for (j = 0; j != v2; ++j)
    {
      v30 = *(float *)(v3 + 4 * j);
      v31 = (float *)v3;
      v32 = v28;
      v33 = v2;
      do
      {
        v34 = *v31++;
        *(float *)&v5[4 * v32++] = v30 * v34;
        --v33;
      }
      while (v33);
      v28 += v2;
    }
    goto LABEL_19;
  }
  v38 = 0;
  while (1)
  {
    v39 = *(float *)(v3 + 4 * v38);
    if (__CFADD__(v2 * v38, v2 - 1))
    {
      v40 = 0;
    }
    else
    {
      v41 = v27;
      v42 = v2 & 0xFFFFFFF8;
      v43 = (float32x4_t *)(v3 + 16);
      do
      {
        v44 = vmulq_n_f32(*v43, v39);
        v45 = (float32x4_t *)&v5[4 * v41];
        *v45 = vmulq_n_f32(v43[-1], v39);
        v45[1] = v44;
        v43 += 2;
        v41 += 8;
        v42 -= 8;
      }
      while (v42);
      v40 = v2 & 0xFFFFFFF8;
      if (v40 == v2)
        goto LABEL_24;
    }
    v46 = v27 + v40;
    v47 = (float *)(v3 + 4 * v40);
    v48 = v2 - v40;
    do
    {
      v49 = *v47++;
      *(float *)&v5[4 * v46++] = v39 * v49;
      --v48;
    }
    while (v48);
LABEL_24:
    ++v38;
    LODWORD(v27) = v27 + v2;
    if (v38 == v2)
      goto LABEL_19;
  }
}

uint64_t TtTrkRpnNode::restart(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  if (*(_DWORD *)a2 != 1)
    return 4294967289;
  v2 = *(_DWORD *)(a2 + 4);
  if (v2 != 467402 && v2 != 467393)
    return 4294967289;
  result = 0;
  *(_DWORD *)(a2 + 1820) = 1065353216;
  *(_OWORD *)(a2 + 1836) = 0u;
  *(_WORD *)(a2 + 1861) = 0;
  *(_WORD *)(a2 + 1856) = 0;
  *(_DWORD *)(a2 + 1852) = 0;
  *(_OWORD *)(a2 + 1572) = 0u;
  *(_OWORD *)(a2 + 1588) = 0u;
  *(_OWORD *)(a2 + 1604) = 0u;
  *(_OWORD *)(a2 + 1620) = 0u;
  *(_OWORD *)(a2 + 1636) = 0u;
  *(_OWORD *)(a2 + 1652) = 0u;
  *(_OWORD *)(a2 + 1668) = 0u;
  *(_OWORD *)(a2 + 1684) = 0u;
  *(_OWORD *)(a2 + 1700) = 0u;
  *(_OWORD *)(a2 + 1716) = 0u;
  *(_OWORD *)(a2 + 1732) = 0u;
  *(_OWORD *)(a2 + 1748) = 0u;
  *(_OWORD *)(a2 + 1764) = 0u;
  *(_OWORD *)(a2 + 1780) = 0u;
  *(_OWORD *)(a2 + 1796) = 0u;
  return result;
}

uint64_t TtTrkRpnNode::exemplarPreProcess(uint64_t a1, uint64_t a2, __int128 *a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  float v16;
  uint64_t result;

  std::chrono::steady_clock::now();
  if (*(_DWORD *)a5 != 1 || *(_DWORD *)(a5 + 4) != 467393)
    return 4294967289;
  v11 = *a4;
  if (*a4)
  {
    v12 = *a3;
    *(_OWORD *)(a5 + 24) = a3[1];
    *(_OWORD *)(a5 + 8) = v12;
    v13 = a3[2];
    v14 = a3[3];
    v15 = a3[4];
    *(_QWORD *)(a5 + 88) = *((_QWORD *)a3 + 10);
    *(_OWORD *)(a5 + 72) = v15;
    *(_OWORD *)(a5 + 56) = v14;
    *(_OWORD *)(a5 + 40) = v13;
    LOBYTE(v11) = 1;
    *(_BYTE *)(a6 + 81) = 1;
    *(_QWORD *)&v15 = *(_QWORD *)(a5 + 24);
    v16 = vaddv_f32(*(float32x2_t *)&v15);
    *(float *)&v13 = roundf(sqrtf((float)(*(float *)&v15 + (float)(*(float *)(a1 + 88) * v16))* (float)(*((float *)&v15 + 1) + (float)(*(float *)(a1 + 88) * v16))));
    *(float32x2_t *)(a5 + 96) = vmla_n_f32(vmla_f32(*(float32x2_t *)(a5 + 16), (float32x2_t)0x3F0000003F000000, *(float32x2_t *)&v15), (float32x2_t)0xBF000000BF000000, *(float *)&v13);
    *(_DWORD *)(a5 + 104) = v13;
    *(_DWORD *)(a5 + 108) = v13;
  }
  result = 0;
  *(_BYTE *)(a5 + 1856) = v11;
  *(_DWORD *)(a5 + 4) = 467402;
  return result;
}

uint64_t TtTrkRpnNode::instancePreProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x2_t *a5, uint64_t a6)
{
  char v9;
  unsigned int v10;
  float32x2_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t result;

  std::chrono::steady_clock::now();
  if (a5->i32[0] != 1 || a5->i32[1] != 467393)
    return 4294967289;
  v9 = a5[232].i8[0];
  if (v9)
  {
    v9 = 1;
    *(_BYTE *)(a6 + 80) = 1;
    v10 = *(_DWORD *)(a1 + 144);
    v11 = a5[3];
    v12 = vaddv_f32(v11);
    v13 = a5[227].f32[1]
        * sqrtf((float)(v11.f32[0] + (float)(*(float *)(a1 + 88) * v12))* (float)(v11.f32[1] + (float)(*(float *)(a1 + 88) * v12)));
    v14 = (float)v10 / v13;
    v15 = v13 + (float)((float)((float)((float)(*(_DWORD *)(a1 + 132) - v10) * 0.5) / v14) * 2.0);
    a5[14] = vmla_n_f32(vmla_f32(a5[2], (float32x2_t)0x3F0000003F000000, v11), (float32x2_t)0xBF000000BF000000, v15);
    a5[15].f32[0] = v15;
    a5[15].f32[1] = v15;
    a5[228].f32[0] = v14;
    a5[3] = vmul_n_f32(v11, v14);
  }
  result = 0;
  a5[232].i8[1] = v9;
  a5->i32[1] = 467401;
  return result;
}

uint64_t TtTrkRpnNode::exemplarPostProcess(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;

  std::chrono::steady_clock::now();
  if (*a5 != 1 || a5[1] != 467402)
    return 4294967289;
  if (a3 > 2)
    return 4294967292;
  result = 0;
  a5[1] = 467393;
  return result;
}

uint64_t TtTrkRpnNode::instancePostProcess(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t result;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float *v46;
  float *v47;
  unsigned int v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float *v55;
  float v56;
  float v57;
  float v58;
  float v59;
  BOOL v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  float *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  char v71;
  BOOL v73;
  BOOL v75;
  unint64_t v76;
  char v78;
  BOOL v79;
  float *v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  const float *v86;
  float32x4_t v87;
  float v88;
  float32x4_t v89;
  float v90;
  float32x4_t v91;
  float32x4_t v92;
  float v93;
  float32x4_t v94;
  float v95;
  float32x4_t v96;
  float *v97;
  unsigned int v98;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v106;
  float *v107;
  float *v108;
  float v109;
  float v110;
  float v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  float *v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  float v129;
  float v130;
  uint64_t v131;
  float v132;
  float v133;
  float v134;
  float *v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  __int128 v144;
  uint64_t v145;
  float v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  float v150;
  __int128 v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  int v171;
  uint64_t v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unsigned int v179;
  _DWORD *v180;
  _DWORD *v181;
  unsigned int *v182;
  unsigned int v183;
  uint64_t v184;
  int v185;
  float *v186;
  float *v187;
  float *v188;
  float *v189;
  float v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  __int128 v195;
  __int128 v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205[3];
  int v206;
  uint64_t v207;
  const void *v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  float32x4x4_t v212;
  float32x4x4_t v213;

  std::chrono::steady_clock::now();
  if (*(_DWORD *)a5 != 1 || *(_DWORD *)(a5 + 4) != 467401)
    return 4294967289;
  if (a3 != 2)
    return 4294967292;
  if (*(_BYTE *)(a5 + 1857))
  {
    v14 = *(_DWORD *)(a2 + 20);
    if ((v14 & 0xFFFFFFFE) != 6)
      goto LABEL_150;
    v15 = a2;
    if (v14 == 7)
    {
      v15 = a1 + 488;
      bmBufferDequantizeHalf((uint64_t *)a2, (uint64_t *)(a1 + 488));
    }
    v16 = *(_DWORD *)(a2 + 44);
    if ((v16 & 0xFFFFFFFE) != 6)
LABEL_150:
      TtTrkRpnNode::instancePostProcess();
    v182 = a4;
    v17 = *(_QWORD *)v15;
    v19 = *(_DWORD *)(v15 + 8);
    v18 = *(_DWORD *)(v15 + 12);
    v20 = (uint64_t *)(a2 + 24);
    v185 = *(_DWORD *)(v15 + 16);
    if (v16 == 7)
    {
      bmBufferDequantizeHalf(v20, (uint64_t *)(a1 + 512));
      v21 = *(_DWORD *)(a1 + 528);
      v22 = *(_DWORD *)(a1 + 524);
      v23 = *(_DWORD *)(a1 + 520);
      v24 = *(_QWORD *)(a1 + 512);
      v25 = *(_DWORD *)(a1 + 436);
      if (!v25)
      {
LABEL_97:
        if (v25)
        {
          if (v22)
          {
            v102 = 0;
            while (1)
            {
              v103 = *(_DWORD *)(a1 + 20);
              v104 = v102 / v103 + *(_DWORD *)(a1 + 52) * v103 * *(_DWORD *)(a1 + 28);
              if (v23 <= v102 / v103 || v23 <= v104)
                break;
              v179 = v23;
              v106 = 0;
              v107 = (float *)(v24 + v21 * (v102 / v103));
              v177 = v24;
              v108 = (float *)(v24 + v21 * v104);
              do
              {
                v109 = *v107++;
                v110 = v109;
                v111 = *v108++;
                *(float *)(*(_QWORD *)(a1 + 456) + 4 * (v102 + v106++)) = bmSoftmax2(v110, v111);
                v112 = *(unsigned int *)(a1 + 20);
              }
              while (v106 < v112);
              v25 = *(_DWORD *)(a1 + 436);
              v23 = v179;
              v24 = v177;
              v102 += v112;
              if (v102 >= v25)
                goto LABEL_108;
            }
          }
          AcAttrNode::postProcess();
        }
LABEL_108:
        v181 = a7;
        v113 = *(_QWORD *)(a1 + 448);
        if (v25)
        {
          v163 = a6;
          v114 = 0;
          v115 = 0;
          v117 = *(_QWORD *)(a1 + 456);
          v116 = *(_QWORD *)(a1 + 464);
          v118 = v25;
          v119 = *(_QWORD *)(a1 + 472);
          v120 = *(_QWORD *)(a1 + 480);
          v204 = *(_QWORD *)(a1 + 448);
          v121 = (float *)(v113 + 12);
          v122 = -3.4028e38;
          do
          {
            v123 = *(v121 - 1);
            v124 = *(float *)(a5 + 24);
            v125 = *(float *)(a5 + 28);
            v126 = sqrtf((float)(v123 + (float)((float)(v123 + *v121) * 0.5))* (float)(*v121 + (float)((float)(v123 + *v121) * 0.5)))/ sqrtf((float)(v124 + (float)((float)(v124 + v125) * 0.5))* (float)(v125 + (float)((float)(v124 + v125) * 0.5)));
            v127 = expf(-(float)((float)((float)(fmaxf((float)(v124 / v125) / (float)(v123 / *v121), 1.0 / (float)((float)(v124 / v125) / (float)(v123 / *v121)))* fmaxf(v126, 1.0 / v126))+ -1.0)* *(float *)(a1 + 76)));
            v128 = 4 * v114;
            *(float *)(v119 + v128) = v127;
            v129 = *(float *)(v117 + 4 * v114) * v127;
            *(float *)(v116 + v128) = v129;
            v130 = (float)(*(float *)(a1 + 80) * *(float *)(v120 + 4 * v114))
                 + (float)(v129 * (float)(1.0 - *(float *)(a1 + 80)));
            *(float *)(v116 + v128) = v130;
            if (v130 > v122)
            {
              v115 = v114;
              v122 = v130;
            }
            ++v114;
            v121 += 4;
          }
          while (v118 != v114);
          a6 = v163;
          v113 = v204;
        }
        else
        {
          v115 = 0;
          v119 = *(_QWORD *)(a1 + 472);
          v117 = *(_QWORD *)(a1 + 456);
        }
        v131 = 4 * v115;
        v132 = *(float *)(a5 + 1824);
        v133 = *(float *)(a5 + 24) / v132;
        v134 = *(float *)(a5 + 28) / v132;
        v135 = (float *)(v113 + 16 * v115);
        v136 = (float)(*(float *)(v119 + v131) * *(float *)(v117 + v131)) * *(float *)(a1 + 84);
        v137 = (float)(*(float *)(a5 + 20) + (float)(v134 * 0.5)) + (float)(v135[1] / v132);
        v138 = (float)((float)(v135[2] / v132) * v136) + (float)(v133 * (float)(1.0 - v136));
        v139 = (float)((float)(v135[3] / v132) * v136) + (float)(v134 * (float)(1.0 - v136));
        v140 = bmClamp((float)(*(float *)(a5 + 16) + (float)(v133 * 0.5)) + (float)(*v135 / v132), 0.0, (float)*v182);
        v141 = bmClamp(v137, 0.0, (float)v182[1]);
        v142 = bmClamp(v138, 10.0, (float)*v182);
        v143 = bmClamp(v139, 10.0, (float)v182[1]);
        *(float *)(a5 + 16) = v140 - (float)(v142 * 0.5);
        *(float *)(a5 + 20) = v141 - (float)(v143 * 0.5);
        *(float *)(a5 + 24) = v142;
        *(float *)(a5 + 28) = v143;
        v211 = *(_OWORD *)(a6 + 8);
        v144 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)(a6 + 8) = v144;
        *v181 = 1;
        v145 = *(_QWORD *)(a1 + 456);
        v146 = *(float *)(v145 + v131);
        *(float *)&v144 = v146 * 1000.0;
        *(_DWORD *)(a6 + 24) = (float)(v146 * 1000.0);
        v147 = *(_DWORD *)(a1 + 20);
        v208 = (const void *)(v145 + 4 * v115 / (v147 * v147) * v147 * v147);
        LODWORD(v210) = 4 * v147;
        HIDWORD(v210) = 6;
        LODWORD(v209) = v147;
        HIDWORD(v209) = v147;
        ttTrkScoreNormalize((uint64_t)&v208, v148, v149, *(double *)&v144);
        v207 = 0;
        v206 = 0;
        ttTrkScoreFindMaxScore((uint64_t)&v208, (float *)&v207 + 1, &v207, (unsigned int *)&v206);
        if (!*(_BYTE *)(a5 + 1861))
        {
          *(_BYTE *)(a5 + 1861) = 1;
          memcpy((void *)(a5 + 128), v208, (v209 * v210));
          *(_DWORD *)(a5 + 1828) = v207;
          *(_DWORD *)(a5 + 1832) = v206;
        }
        v205[1] = v209;
        v205[2] = v210;
        v205[0] = a5 + 128;
        v150 = -1.0;
        if (*(float *)(a1 + 96) < 1.0 && *(float *)(a1 + 100) > 0.0)
          v150 = ttTrkComputeKL(v205, (uint64_t *)&v208, *(_DWORD *)(a5 + 1828), *(_DWORD *)(a5 + 1832), v207, v206);
        if (*(_BYTE *)(a5 + 1862))
        {
          v151 = v211;
          *(_OWORD *)(a5 + 16) = v211;
          *(_OWORD *)(a6 + 8) = v151;
          v152 = *(_DWORD *)(a5 + 1852);
          if (v152 >= *(_DWORD *)(a1 + 128))
          {
            *(_WORD *)(a5 + 1856) = 0;
            *(_DWORD *)(a5 + 1820) = 1065353216;
            *(_OWORD *)(a5 + 1836) = 0u;
            *(_WORD *)(a5 + 1861) = 0;
            *(_DWORD *)(a5 + 1852) = 0;
            *(_OWORD *)(a5 + 1572) = 0u;
            *(_OWORD *)(a5 + 1588) = 0u;
            *(_OWORD *)(a5 + 1604) = 0u;
            *(_OWORD *)(a5 + 1620) = 0u;
            *(_OWORD *)(a5 + 1636) = 0u;
            *(_OWORD *)(a5 + 1652) = 0u;
            *(_OWORD *)(a5 + 1668) = 0u;
            *(_OWORD *)(a5 + 1684) = 0u;
            *(_OWORD *)(a5 + 1700) = 0u;
            *(_OWORD *)(a5 + 1716) = 0u;
            *(_OWORD *)(a5 + 1732) = 0u;
            *(_OWORD *)(a5 + 1748) = 0u;
            *(_OWORD *)(a5 + 1764) = 0u;
            *(_OWORD *)(a5 + 1780) = 0u;
            *(_OWORD *)(a5 + 1796) = 0u;
            *v181 = 0;
            goto LABEL_147;
          }
          v153 = v152 + 1;
          *(_DWORD *)(a5 + 1852) = v153;
          if (*(float *)(a5 + 1812) < v146)
            v154 = *(_DWORD *)(a5 + 1848) + 1;
          else
            v154 = 0;
          *(_DWORD *)(a5 + 1848) = v154;
          if (v154 >= *(_DWORD *)(a1 + 116))
          {
            *(_BYTE *)(a5 + 1862) = 0;
            *(_DWORD *)(a5 + 1852) = 0;
            *(_DWORD *)(a5 + 1820) = 1065353216;
            *(_QWORD *)(a5 + 1840) = 0;
            *(_DWORD *)(a5 + 1836) = 0;
            *(_OWORD *)(a5 + 1572) = 0u;
            *(_OWORD *)(a5 + 1588) = 0u;
            *(_OWORD *)(a5 + 1604) = 0u;
            *(_OWORD *)(a5 + 1620) = 0u;
            *(_OWORD *)(a5 + 1636) = 0u;
            *(_OWORD *)(a5 + 1652) = 0u;
            *(_OWORD *)(a5 + 1668) = 0u;
            *(_OWORD *)(a5 + 1684) = 0u;
            *(_OWORD *)(a5 + 1700) = 0u;
            *(_OWORD *)(a5 + 1716) = 0u;
            *(_OWORD *)(a5 + 1732) = 0u;
            *(_OWORD *)(a5 + 1748) = 0u;
            *(_OWORD *)(a5 + 1764) = 0u;
            *(_OWORD *)(a5 + 1780) = 0u;
            *(_OWORD *)(a5 + 1796) = 0u;
          }
          else
          {
            *(float *)(a5 + 1820) = (float)(*(float *)(a1 + 104) * (float)v153) + 1.0;
          }
        }
        else
        {
          if (*(float *)(a1 + 92) > v146)
            v155 = *(_DWORD *)(a5 + 1840) + 1;
          else
            v155 = 0;
          *(_DWORD *)(a5 + 1840) = v155;
          if (*(float *)(a1 + 96) >= v150 || *(float *)(a1 + 100) <= v146)
          {
            v156 = 0;
            *(_DWORD *)(a5 + 1844) = 0;
          }
          else
          {
            v156 = *(_DWORD *)(a5 + 1844) + 1;
            *(_DWORD *)(a5 + 1844) = v156;
          }
          v157 = *(_DWORD *)(a1 + 120);
          if (v155 >= v157 || v156 >= v157)
          {
            *(_BYTE *)(a5 + 1862) = 1;
            TtTrkRpnNode::terminate(a1, a5, v150);
          }
          else
          {
            v158 = *(unsigned int *)(a5 + 1836);
            v159 = a5 + 4 * v158;
            *(float *)(v159 + 1572) = v146;
            *(float *)(v159 + 1692) = v150;
            if ((v158 + 1) < *(_DWORD *)(a1 + 124))
              v160 = v158 + 1;
            else
              v160 = 0;
            *(_DWORD *)(a5 + 1836) = v160;
          }
        }
        if (*(_BYTE *)(a5 + 1862))
        {
          v161 = 2;
LABEL_148:
          *(_DWORD *)(a6 + 84) = v161;
          goto LABEL_149;
        }
LABEL_147:
        v161 = 1;
        goto LABEL_148;
      }
    }
    else
    {
      v21 = *(_DWORD *)(a2 + 40);
      v22 = *(_DWORD *)(a2 + 36);
      v23 = *(_DWORD *)(a2 + 32);
      v24 = *v20;
      v25 = *(_DWORD *)(a1 + 436);
      if (!v25)
        goto LABEL_97;
    }
    if (v18)
    {
      v27 = *(unsigned int *)(a1 + 20);
      v28 = *(_DWORD *)(a1 + 52) * v27 * *(_DWORD *)(a1 + 28);
      if ((_DWORD)v27)
      {
        v29 = 0;
        v168 = v27 - 1;
        v30 = 16 * (v27 - 1);
        v166 = v27 & 0xFFFFFFFC;
        v167 = 4 * *(unsigned int *)(a1 + 20);
        v165 = v166;
        while (1)
        {
          v31 = v28 + v29 / v27;
          v32 = v28 + v31;
          v33 = v28 + v28 + v31;
          if (v19 <= v29 / v27 || v19 <= v31 || v19 <= v32 || v19 <= v33)
            goto LABEL_114;
          v37 = v185 * (v29 / v27);
          v38 = v185 * v31;
          v39 = v185 * v32;
          v40 = (float *)(v17 + v39);
          v41 = v185 * v33;
          v42 = (float *)(v17 + v41);
          v43 = *(_QWORD *)(a1 + 440);
          v44 = *(_QWORD *)(a1 + 448);
          v202 = v44;
          v203 = v43;
          v175 = a1;
          v176 = v24;
          v180 = a7;
          v178 = v23;
          v173 = v19;
          v174 = v25;
          v172 = v17;
          v170 = v28;
          v171 = v22;
          v183 = v29;
          v184 = v27;
          v169 = v30;
          if (v27 < 0xC)
            break;
          v189 = (float *)(v17 + v37);
          v45 = 0;
          v60 = __CFADD__(v29, v168);
          v61 = 16 * v29;
          v62 = v44 + v61;
          if (v44 + v61 + v30 < (unint64_t)(v44 + v61))
          {
            v46 = (float *)(v17 + v37);
            goto LABEL_31;
          }
          v188 = (float *)(v17 + v38);
          if (v62 + 4 + v30 < v62 + 4 || v62 + 12 + v30 < v62 + 12 || v62 + 8 + v30 < v62 + 8 || v60)
          {
            v47 = (float *)(v17 + v38);
            v46 = (float *)(v17 + v37);
          }
          else
          {
            v45 = 0;
            v63 = 16 * (v27 + v29);
            v64 = v44 + v63;
            v65 = (float *)(v17 + v39);
            v66 = v17 + v167 + v39;
            v67 = v17 + v167 + v38;
            v68 = v17 + v167 + v37;
            v69 = v43 + v63;
            v187 = v65;
            v70 = (unint64_t)v65 >= v64 || v62 >= v66;
            v71 = !v70;
            v73 = (unint64_t)v188 < v64 && v62 < v67;
            v75 = (unint64_t)v189 < v64 && v62 < v68;
            v70 = v62 >= v69;
            v76 = v17 + v167 + v41;
            v78 = !v70 && v43 + v61 < v64;
            v79 = v62 >= v76 || (unint64_t)v42 >= v64;
            if (!v79 || (v71 & 1) != 0)
            {
              v47 = v188;
              v46 = v189;
              v40 = v65;
            }
            else
            {
              v40 = v65;
              v80 = v188;
              v81 = v189;
              if (v73 || v75 || (v78 & 1) != 0)
              {
                v46 = v189;
                v47 = v188;
              }
              else
              {
                v164 = v21;
                v162 = a6;
                v82 = 0;
                v83 = v166;
                v46 = &v189[v165];
                v47 = &v188[v165];
                v40 = &v187[v165];
                v186 = v42;
                v42 = (float *)((char *)v42 + v165 * 4);
                v84 = v29;
                do
                {
                  v85 = 16 * v84;
                  v86 = (const float *)(v43 + v85);
                  v213 = vld4q_f32(v86);
                  v197 = vmlaq_f32(v213.val[0], v213.val[2], *(float32x4_t *)&v81[v82]);
                  v198 = vmlaq_f32(v213.val[1], v213.val[3], *(float32x4_t *)&v80[v82]);
                  v199 = v213.val[2];
                  v201 = v213.val[3];
                  v195 = *(_OWORD *)&v187[v82];
                  v190 = expf(COERCE_FLOAT(HIDWORD(*(_QWORD *)&v187[v82])));
                  v87.f32[0] = expf(*(float *)&v195);
                  v87.f32[1] = v190;
                  v191 = v87;
                  v88 = expf(*((float *)&v195 + 2));
                  v89 = v191;
                  v89.f32[2] = v88;
                  v192 = v89;
                  v90 = expf(*((float *)&v195 + 3));
                  v91 = v192;
                  v91.f32[3] = v90;
                  v200 = vmulq_f32(v199, v91);
                  v196 = *(_OWORD *)&v186[v82];
                  v43 = v203;
                  v192.i32[0] = expf(COERCE_FLOAT(HIDWORD(*(_QWORD *)&v186[v82])));
                  v92.f32[0] = expf(*(float *)&v196);
                  v92.i32[1] = v192.i32[0];
                  v193 = v92;
                  v93 = expf(*((float *)&v196 + 2));
                  v94 = v193;
                  v94.f32[2] = v93;
                  v194 = v94;
                  v95 = expf(*((float *)&v196 + 3));
                  v80 = v188;
                  v81 = v189;
                  v44 = v202;
                  v96 = v194;
                  v96.f32[3] = v95;
                  v212.val[0] = v197;
                  v212.val[1] = v198;
                  v212.val[2] = v200;
                  v212.val[3] = vmulq_f32(v201, v96);
                  v97 = (float *)(v202 + v85);
                  vst4q_f32(v97, v212);
                  v82 += 4;
                  v84 += 4;
                  v83 -= 4;
                }
                while (v83);
                v45 = v166;
                a6 = v162;
                v21 = v164;
                if (v166 == v184)
                  goto LABEL_34;
              }
            }
          }
LABEL_32:
          v48 = v183 + v45;
          v49 = v184 - v45;
          do
          {
            v50 = *v46++;
            v51 = 16 * v48;
            v52 = v43 + v51;
            v53 = *(float *)(v43 + v51 + 8);
            v54 = *(float *)(v43 + v51) + (float)(v50 * v53);
            v55 = (float *)(v44 + v51);
            *v55 = v54;
            v56 = *v47++;
            v57 = *(float *)(v52 + 12);
            v55[1] = *(float *)(v52 + 4) + (float)(v56 * v57);
            v58 = *v40++;
            v55[2] = v53 * expf(v58);
            v59 = *v42++;
            v55[3] = v57 * expf(v59);
            v44 = v202;
            v43 = v203;
            ++v48;
            --v49;
          }
          while (v49);
LABEL_34:
          v27 = v184;
          v29 = v183 + v184;
          v19 = v173;
          v25 = v174;
          a1 = v175;
          v24 = v176;
          a7 = v180;
          v23 = v178;
          v17 = v172;
          v28 = v170;
          v22 = v171;
          v30 = v169;
          if (v183 + v184 >= v174)
            goto LABEL_97;
        }
        v45 = 0;
        v46 = (float *)(v17 + v37);
LABEL_31:
        v47 = (float *)(v17 + v38);
        goto LABEL_32;
      }
      do
        v98 = v28 + 0 / 0u;
      while (v19 > 0 / 0u && v19 > v98 && v19 > v28 + v98 && v19 > v28 + v28 + v98);
    }
LABEL_114:
    AcAttrNode::postProcess();
  }
LABEL_149:
  result = 0;
  *(_DWORD *)(a5 + 4) = 467393;
  return result;
}

uint64_t *bmBufferDequantizeHalf(uint64_t *result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unsigned int v9;
  int v10;
  unsigned int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;

  if (*((_DWORD *)result + 5) != 7)
    bmBufferDequantizeHalf();
  if (*((_DWORD *)a2 + 5) != 6)
    bmBufferDequantizeHalf();
  v2 = *((_DWORD *)result + 2);
  if (v2 != *((_DWORD *)a2 + 2))
    bmBufferDequantizeHalf();
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3 != *((_DWORD *)a2 + 3))
    bmBufferDequantizeHalf();
  if (v2 && (_DWORD)v3)
  {
    v4 = 0;
    v5 = *((unsigned int *)result + 4);
    v6 = *((unsigned int *)a2 + 4);
    v7 = *result;
    result = (uint64_t *)*a2;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        while (1)
        {
          while (1)
          {
            v13 = *(__int16 *)(v7 + 2 * i);
            v14 = v13 & 0x80000000;
            v10 = (v13 >> 10) & 0x1F;
            v15 = *(unsigned __int16 *)(v7 + 2 * i) << 13;
            v11 = v15 & 0x7FE000;
            if (!v10)
              break;
            if (v10 != 31)
              goto LABEL_12;
            if (v11)
              v16 = 2143289344;
            else
              v16 = 2139095040;
            *((_DWORD *)result + i++) = v14 | v15 | v16;
            if (v3 == i)
              goto LABEL_8;
          }
          if (!v11)
            break;
          v9 = __clz(v11);
          v10 = 9 - v9;
          v11 = (v15 << (v9 - 8)) & 0x7FE000;
LABEL_12:
          *((_DWORD *)result + i++) = ((v11 | (v10 << 23)) + 939524096) | v14;
          if (v3 == i)
            goto LABEL_8;
        }
        if (v14)
          v12 = -0.0;
        else
          v12 = 0.0;
        *((float *)result + i) = v12;
      }
LABEL_8:
      v7 += v5;
      result = (uint64_t *)((char *)result + v6);
      ++v4;
    }
    while (v4 != v2);
  }
  return result;
}

BOOL TtTrkRpnNode::checkToReId(uint64_t a1, uint64_t a2, float a3)
{
  unsigned int v3;

  if (*(float *)(a2 + 1812) < a3)
    v3 = *(_DWORD *)(a2 + 1848) + 1;
  else
    v3 = 0;
  *(_DWORD *)(a2 + 1848) = v3;
  return v3 >= *(_DWORD *)(a1 + 116);
}

double TtTrkRpnNode::reId(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_QWORD *)(a2 + 1840) = 0;
  *(_DWORD *)(a2 + 1836) = 0;
  *(_OWORD *)(a2 + 1572) = 0u;
  *(_OWORD *)(a2 + 1588) = 0u;
  *(_OWORD *)(a2 + 1604) = 0u;
  *(_OWORD *)(a2 + 1620) = 0u;
  *(_OWORD *)(a2 + 1636) = 0u;
  *(_OWORD *)(a2 + 1652) = 0u;
  *(_OWORD *)(a2 + 1668) = 0u;
  *(_OWORD *)(a2 + 1684) = 0u;
  *(_OWORD *)(a2 + 1700) = 0u;
  *(_OWORD *)(a2 + 1716) = 0u;
  *(_OWORD *)(a2 + 1732) = 0u;
  *(_OWORD *)(a2 + 1748) = 0u;
  *(_OWORD *)(a2 + 1764) = 0u;
  *(_OWORD *)(a2 + 1780) = 0u;
  *(_OWORD *)(a2 + 1796) = 0u;
  return result;
}

BOOL TtTrkRpnNode::checkToTerminate(uint64_t a1, uint64_t a2, float a3, float a4)
{
  float v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v10;

  v4 = *(float *)(a1 + 96);
  if (*(float *)(a1 + 92) > a3)
    v5 = *(_DWORD *)(a2 + 1840) + 1;
  else
    v5 = 0;
  *(_DWORD *)(a2 + 1840) = v5;
  if (v4 >= a4 || *(float *)(a1 + 100) <= a3)
  {
    *(_DWORD *)(a2 + 1844) = 0;
    v10 = *(_DWORD *)(a1 + 120);
    return v5 >= v10 || v10 == 0;
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 1844) + 1;
    *(_DWORD *)(a2 + 1844) = v6;
    v7 = *(_DWORD *)(a1 + 120);
    return v5 >= v7 || v6 >= v7;
  }
}

float TtTrkRpnNode::terminate(uint64_t a1, uint64_t a2, float result)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  float v6;
  int32x4_t v7;
  int8x16_t v8;
  uint64_t v9;
  float32x4_t *v10;
  int32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v24;
  float32x4_t *v25;
  int32x4_t v26;
  int8x16_t v27;
  uint64_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int8x16_t v35;
  float *v36;
  uint64_t v37;
  float v38;
  float v39;
  BOOL v40;

  *(_DWORD *)(a2 + 1848) = 0;
  v3 = *(unsigned int *)(a1 + 124);
  if ((_DWORD)v3)
  {
    if (v3 >= 8)
    {
      v4 = v3 & 0xFFFFFFF8;
      v6 = 0.0;
      v7 = 0uLL;
      v8.i64[0] = 0x8000000080000000;
      v8.i64[1] = 0x8000000080000000;
      v9 = v4;
      v10 = (float32x4_t *)(a2 + 1572);
      v11 = 0uLL;
      do
      {
        v12 = *v10;
        v13 = v10[1];
        v10 += 2;
        v14 = vcgtzq_f32(v12);
        v15 = vbslq_s8((int8x16_t)v14, (int8x16_t)v12, v8);
        v16 = vcgtzq_f32(v13);
        v17 = vbslq_s8((int8x16_t)v16, (int8x16_t)v13, v8);
        v7 = vsubq_s32(v7, v14);
        v11 = vsubq_s32(v11, v16);
        v6 = (float)((float)((float)((float)((float)((float)((float)(v6 + *(float *)v15.i32) + *(float *)&v15.i32[1])
                                                   + *(float *)&v15.i32[2])
                                           + *(float *)&v15.i32[3])
                                   + *(float *)v17.i32)
                           + *(float *)&v17.i32[1])
                   + *(float *)&v17.i32[2])
           + *(float *)&v17.i32[3];
        v9 -= 8;
      }
      while (v9);
      v5 = vaddvq_s32(vaddq_s32(v11, v7));
      if (v4 == v3)
        goto LABEL_13;
    }
    else
    {
      v4 = 0;
      v5 = 0;
      v6 = 0.0;
    }
    v18 = (float *)(a2 + 4 * v4 + 1572);
    v19 = v3 - v4;
    do
    {
      v20 = *v18++;
      v21 = v20;
      v22 = v20 <= 0.0;
      if (v20 <= 0.0)
        v21 = -0.0;
      v6 = v6 + v21;
      if (!v22)
        ++v5;
      --v19;
    }
    while (v19);
LABEL_13:
    if (v5)
      *(float *)(a2 + 1812) = v6 / (float)v5;
    if (v3 >= 8)
    {
      v23 = v3 & 0xFFFFFFF8;
      v25 = (float32x4_t *)(a2 + 1692);
      result = 0.0;
      v26 = 0uLL;
      v27.i64[0] = 0x8000000080000000;
      v27.i64[1] = 0x8000000080000000;
      v28 = v23;
      v29 = 0uLL;
      do
      {
        v30 = *v25;
        v31 = v25[1];
        v25 += 2;
        v32 = vcgtzq_f32(v30);
        v33 = vbslq_s8((int8x16_t)v32, (int8x16_t)v30, v27);
        v34 = vcgtzq_f32(v31);
        v35 = vbslq_s8((int8x16_t)v34, (int8x16_t)v31, v27);
        v26 = vsubq_s32(v26, v32);
        v29 = vsubq_s32(v29, v34);
        result = (float)((float)((float)((float)((float)((float)((float)(result + *(float *)v33.i32)
                                                               + *(float *)&v33.i32[1])
                                                       + *(float *)&v33.i32[2])
                                               + *(float *)&v33.i32[3])
                                       + *(float *)v35.i32)
                               + *(float *)&v35.i32[1])
                       + *(float *)&v35.i32[2])
               + *(float *)&v35.i32[3];
        v28 -= 8;
      }
      while (v28);
      v24 = vaddvq_s32(vaddq_s32(v29, v26));
      if (v23 == v3)
      {
LABEL_26:
        if (v24)
        {
          result = result / (float)v24;
          *(float *)(a2 + 1816) = result;
        }
        return result;
      }
    }
    else
    {
      v23 = 0;
      v24 = 0;
      result = 0.0;
    }
    v36 = (float *)(a2 + 4 * v23 + 1692);
    v37 = v3 - v23;
    do
    {
      v38 = *v36++;
      v39 = v38;
      v40 = v38 <= 0.0;
      if (v38 <= 0.0)
        v39 = -0.0;
      result = result + v39;
      if (!v40)
        ++v24;
      --v37;
    }
    while (v37);
    goto LABEL_26;
  }
  return result;
}

uint64_t TtTrkRpnNode::getParams(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;

  if (*a2 != 1)
    return 4294967289;
  v3 = a2[1];
  if (v3 != 467402 && v3 != 467393)
    return 4294967289;
  v5 = (*(_DWORD *)(a1 + 152) * *(_DWORD *)(a1 + 144) + 63) & 0xFFFFFFC0;
  v6 = (*(_DWORD *)(a1 + 140) * *(_DWORD *)(a1 + 132) + 63) & 0xFFFFFFC0;
  *(_OWORD *)(a3 + 196) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)a3 = 0x100000001;
  v7 = *(_DWORD *)(a1 + 132);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a3 + 12) = v7;
  v8 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a3 + 16) = v8;
  v9 = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a3 + 24) = v8 * v6;
  *(_DWORD *)(a3 + 28) = v9;
  v10 = *(_QWORD *)(a1 + 148);
  *(_QWORD *)(a3 + 32) = v10;
  *(_DWORD *)(a3 + 40) = v10 * v5;
  v11 = *(_DWORD *)(a1 + 336);
  *(_DWORD *)(a3 + 44) = *(_DWORD *)(a1 + 248);
  *(_DWORD *)(a3 + 52) = *(_DWORD *)(a1 + 256);
  *(_DWORD *)(a3 + 60) = *(_DWORD *)(a1 + 264);
  if (v11 >= 8 || ((0xFBu >> v11) & 1) == 0)
    AcAttrNode::getParams(a1, (uint64_t)a2, a3);
  v12 = dword_20CCAA3D8[v11];
  v13 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)(a3 + 68) = v12 * *(_DWORD *)(a1 + 248) * *(_DWORD *)(a1 + 256) * *(_DWORD *)(a1 + 264);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(a1 + 252);
  *(_DWORD *)(a3 + 56) = *(_DWORD *)(a1 + 260);
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 268);
  *(_DWORD *)(a3 + 72) = v12 * *(_DWORD *)(a1 + 252) * *(_DWORD *)(a1 + 260) * *(_DWORD *)(a1 + 268);
  *(_DWORD *)(a3 + 76) = v11;
  *(_DWORD *)(a3 + 80) = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a3 + 88) = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a3 + 96) = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a3 + 104) = v12 * *(_DWORD *)(a1 + 156) * *(_DWORD *)(a1 + 164) * *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a3 + 84) = *(_DWORD *)(a1 + 160);
  *(_DWORD *)(a3 + 92) = *(_DWORD *)(a1 + 168);
  *(_DWORD *)(a3 + 100) = *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a3 + 108) = v12 * *(_DWORD *)(a1 + 160) * *(_DWORD *)(a1 + 168) * *(_DWORD *)(a1 + 176);
  *(_DWORD *)(a3 + 112) = v13;
  return 0;
}

uint64_t TtTrkRpnNode::setUpNetBuffers(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int64x2_t v4;
  unsigned int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  signed int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  signed int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;

  if (!*(_QWORD *)a1)
    return 4294967292;
  v3 = *(_QWORD *)(a1 + 12);
  v4.i64[0] = v3;
  v4.i64[1] = *(_QWORD *)(a1 + 32);
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v4), (int32x4_t)vceqzq_s64(*(int64x2_t *)(a1 + 48))))) & 1) != 0)
    return 4294967292;
  if (!*(_QWORD *)(a1 + 24))
    return 4294967292;
  v5 = a2[6];
  if (*(_DWORD *)(a1 + 8) < v5)
    return 4294967292;
  v6 = a2[10];
  if (*(_DWORD *)(a1 + 20) < v6)
    return 4294967292;
  *(_QWORD *)a3 = *(_QWORD *)a1;
  v8 = a2[4];
  v9 = a2[5] * a2[3];
  *(_DWORD *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 12) = v9;
  v10 = (v9 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = 1;
  if (v10 * v8 != v5)
    TtTrkRpnNode::setUpNetBuffers();
  *(_QWORD *)(a3 + 24) = v3;
  v11 = a2[8];
  v12 = a2[9] * a2[7];
  *(_DWORD *)(a3 + 32) = v11;
  *(_DWORD *)(a3 + 36) = v12;
  v13 = (v12 + 63) & 0xFFFFFFC0;
  *(_DWORD *)(a3 + 40) = v13;
  *(_DWORD *)(a3 + 44) = 1;
  if (v13 * v11 != v6)
    TtTrkRpnNode::setUpNetBuffers();
  v14 = a2[28];
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a3 + 48) = v15;
  v16 = a2[20];
  *(_DWORD *)(a3 + 60) = v16;
  v17 = a2[24] * a2[22];
  *(_DWORD *)(a3 + 56) = v17;
  *(_DWORD *)(a3 + 68) = v14;
  if (v14 >= 8 || ((0xFBu >> v14) & 1) == 0)
    AcAttrNode::getParams(a1, (uint64_t)a2, a3);
  v18 = dword_20CCAA3D8[v14] * v16;
  *(_DWORD *)(a3 + 64) = v18;
  if (v15 + (v18 * v17) - *(_QWORD *)(a1 + 24) != a2[26])
    goto LABEL_18;
  v19 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a3 + 72) = v19;
  v20 = a2[21];
  *(_DWORD *)(a3 + 84) = v20;
  v21 = a2[25] * a2[23];
  *(_DWORD *)(a3 + 80) = v21;
  v22 = dword_20CCAA3D8[v14] * v20;
  *(_DWORD *)(a3 + 88) = v22;
  *(_DWORD *)(a3 + 92) = v14;
  if (v19 + (v22 * v21) - *(_QWORD *)(a1 + 32) != a2[27])
LABEL_18:
    TtTrkRpnNode::setUpNetBuffers();
  v23 = a2[19];
  v24 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a3 + 96) = v24;
  v25 = a2[11];
  *(_DWORD *)(a3 + 108) = v25;
  v26 = a2[15] * a2[13];
  *(_DWORD *)(a3 + 104) = v26;
  *(_DWORD *)(a3 + 116) = v23;
  if (v23 >= 8 || ((0xFBu >> v23) & 1) == 0)
    AcAttrNode::getParams(a1, (uint64_t)a2, a3);
  v27 = dword_20CCAA3D8[v23] * v25;
  *(_DWORD *)(a3 + 112) = v27;
  if (v24 + (v27 * v26) - *(_QWORD *)(a1 + 48) != a2[17])
    goto LABEL_19;
  v28 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a3 + 120) = v28;
  v29 = a2[12];
  *(_DWORD *)(a3 + 132) = v29;
  v30 = a2[16] * a2[14];
  *(_DWORD *)(a3 + 128) = v30;
  v31 = dword_20CCAA3D8[v23] * v29;
  *(_DWORD *)(a3 + 136) = v31;
  *(_DWORD *)(a3 + 140) = v23;
  if (v28 + (v31 * v30) - *(_QWORD *)(a1 + 56) != a2[18])
LABEL_19:
    TtTrkRpnNode::setUpNetBuffers();
  return 0;
}

void sub_20CC7B240(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7B494(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC7B604(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7B7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_20CC7B7E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7B7F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7B980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7BAEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7BD28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC7BE34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C0A4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20CC7C2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v23 - 48);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void ReportException(std::exception *a1)
{
  NSObject *v2;

  ft::GetOsLog((ft *)a1);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    ReportException((uint64_t)a1);

}

{
  NSObject *v2;

  ft::GetOsLog((ft *)a1);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    -[FTCinematicTapToTrack initWithEspressoEngine:scalingBackend:commandQueue:].cold.1((uint64_t)a1);

}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_20CC7C810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C840(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C860(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7C924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7CA40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7CD00(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  __cxa_free_exception(v1);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void sub_20CC7CD1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_20CC7CD30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void sub_20CC7CEA8(_Unwind_Exception *a1)
{
  void *v1;
  std::recursive_mutex *v2;

  std::recursive_mutex::unlock(v2);

  _Unwind_Resume(a1);
}

void sub_20CC7CEC0()
{
  __cxa_end_catch();
  JUMPOUT(0x20CC7CEC8);
}

void AsEspressoBufferMap(uint64_t a1, void *a2)
{
  id v3;
  unint64_t prime;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  void *v13;
  void *v14;
  void *v15;
  const char *v16;
  size_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  void *__dst[2];
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void **v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v31 = v3;
  v32 = a1;
  *(_DWORD *)(a1 + 32) = 1065353216;
  prime = vcvtps_u32_f32((float)(unint64_t)objc_msgSend(v3, "count") / *(float *)(a1 + 32));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v5 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v5)
    goto LABEL_6;
  if (prime < *(_QWORD *)&v5)
  {
    v6 = vcvtps_u32_f32((float)*(unint64_t *)(v32 + 24) / *(float *)(v32 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v7 = (uint8x8_t)vcnt_s8(v5), v7.i16[0] = vaddlv_u8(v7), v7.u32[0] > 1uLL))
    {
      v6 = std::__next_prime(v6);
    }
    else
    {
      v8 = 1 << -(char)__clz(v6 - 1);
      if (v6 >= 2)
        v6 = v8;
    }
    if (prime <= v6)
      prime = v6;
    if (prime < *(_QWORD *)&v5)
LABEL_6:
      std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(v32, prime);
  }
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v9 = v31;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v47;
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v47 != v11)
          objc_enumerationMutation(v9);
        v13 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        objc_msgSend(v9, "objectForKeyedSubscript:", v13);
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v14)
        {
          objc_msgSend(v14, "buffer");
        }
        else
        {
          v45 = 0;
          v43 = 0u;
          v44 = 0u;
          v42 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v35 = 0u;
        }
        v16 = (const char *)objc_msgSend(objc_retainAutorelease(v13), "UTF8String");
        v17 = strlen(v16);
        if (v17 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v18 = (void *)v17;
        if (v17 >= 0x17)
        {
          v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v20 = v17 | 7;
          v21 = v20 + 1;
          v19 = (void **)operator new(v20 + 1);
          __dst[1] = v18;
          v34 = v21 | 0x8000000000000000;
          __dst[0] = v19;
LABEL_32:
          memmove(v19, v16, (size_t)v18);
          goto LABEL_33;
        }
        HIBYTE(v34) = v17;
        v19 = __dst;
        if (v17)
          goto LABEL_32;
LABEL_33:
        *((_BYTE *)v18 + (_QWORD)v19) = 0;
        v50 = __dst;
        v22 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v32, (uint64_t)__dst, (uint64_t)&std::piecewise_construct, (__int128 **)&v50);
        v24 = v40;
        v23 = v41;
        v25 = v39;
        *(_OWORD *)(v22 + 88) = v38;
        v26 = v45;
        v28 = v43;
        v27 = v44;
        *(_OWORD *)(v22 + 152) = v42;
        *(_OWORD *)(v22 + 168) = v28;
        *(_OWORD *)(v22 + 184) = v27;
        *((_QWORD *)v22 + 25) = v26;
        *(_OWORD *)(v22 + 104) = v25;
        *(_OWORD *)(v22 + 120) = v24;
        *(_OWORD *)(v22 + 136) = v23;
        v29 = v36;
        v30 = v37;
        *(_OWORD *)(v22 + 40) = v35;
        *(_OWORD *)(v22 + 56) = v29;
        *(_OWORD *)(v22 + 72) = v30;
        if (SHIBYTE(v34) < 0)
          operator delete(__dst[0]);

      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v46, v51, 16);
    }
    while (v10);
  }

}

void sub_20CC7D218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  std::unordered_map<std::string,espresso_buffer_t>::~unordered_map[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,espresso_buffer_t>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_20CC7D400(_Unwind_Exception *a1, int a2, uint64_t a3, ...)
{
  void *v3;
  std::recursive_mutex *v4;
  std::exception *v7;
  va_list va;

  va_start(va, a3);
  std::unordered_map<std::string,espresso_buffer_t>::~unordered_map[abi:ne180100]((uint64_t)va);
  if (a2 == 1)
  {
    v7 = (std::exception *)__cxa_begin_catch(a1);
    ReportException(v7);
    __cxa_end_catch();
    JUMPOUT(0x20CC7D39CLL);
  }
  std::recursive_mutex::unlock(v4);

  _Unwind_Resume(a1);
}

void sub_20CC7D468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ft::CinematicTracker::TerminateHighPriorityTrack(ft::CinematicTracker *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v3 = *((_QWORD *)this + 24);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    v15 = v2;
    v16 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    ft::TrackPool::RemoveTrack(v3, (uint64_t)&v15);
    v7 = v16;
    if (v16)
    {
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v13 = 0;
  v14 = 0;
  ft::CinematicTracker::SetHighPriorityTrack((uint64_t *)this, &v13);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20CC7D560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20CC7D574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20CC7D5C8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const __CFString *FTCinematicHighPriorityTrackerOpDescription(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("Unknown");
  else
    return off_24C55ED08[a1];
}

void sub_20CC7D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  void *v12;

  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void sub_20CC7D950(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7E0E8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  std::recursive_mutex *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  std::exception *v55;

  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a48);
  if (a2 == 1)
  {
    v55 = (std::exception *)__cxa_begin_catch(a1);
    ReportException(v55);
    __cxa_end_catch();
    JUMPOUT(0x20CC7DE48);
  }
  std::recursive_mutex::unlock(v48);
  _Unwind_Resume(a1);
}

void sub_20CC7E278(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ft::CinematicTracker::TerminateHighlyOverlappingDetectionlessTrack(ft::CinematicTracker *this)
{
  double *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  ft *ActiveTracks;
  double **v8;
  double **v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  float v23;
  float v24;
  float v25;
  float v26;
  NSObject *v27;
  int v28;
  double v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v1 = (double *)*((_QWORD *)this + 21);
  if (v1)
  {
    v3 = v1[3];
    v4 = v1[4];
    v5 = v1[5];
    v6 = v1[6];
    ActiveTracks = (ft *)ft::TrackPool::GetActiveTracks(*((ft::TrackPool **)this + 24));
    v8 = *(double ***)ActiveTracks;
    v9 = (double **)*((_QWORD *)ActiveTracks + 1);
    if (*(double ***)ActiveTracks != v9)
    {
      v10 = v3 + v5;
      v11 = v5 * v6;
      while (1)
      {
        v12 = *v8;
        if (*v8 != *((double **)this + 21))
        {
          v13 = v12[3];
          v14 = v12[4];
          if (v13 >= v3)
            v15 = v12[3];
          else
            v15 = v3;
          if (v14 >= v4)
            v16 = v12[4];
          else
            v16 = v4;
          v17 = v12[5];
          v18 = v12[6];
          v19 = v13 + v17;
          if (v10 < v19)
            v19 = v10;
          v20 = v14 + v18;
          if (v4 + v6 < v20)
            v20 = v4 + v6;
          v21 = v19 <= v15 ? 0.0 : v19 - v15;
          v22 = v20 <= v16 ? 0.0 : v20 - v16;
          v23 = v21 * v22;
          v24 = v11 + v17 * v18 - v23;
          v25 = v23 / v24;
          v26 = v24 >= 0.00000011921 ? v25 : 0.0;
          if (v26 > 0.4)
            break;
        }
        v8 += 2;
        if (v8 == v9)
          return;
      }
      ft::GetOsLog(ActiveTracks);
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        v28 = 134218240;
        v29 = v26;
        v30 = 2048;
        v31 = 0x3FD99999A0000000;
        _os_log_impl(&dword_20CC71000, v27, OS_LOG_TYPE_INFO, "Terminating detectionless track. IoU exceeded: %0.2f > %0.2f", (uint8_t *)&v28, 0x16u);
      }

      ft::CinematicTracker::TerminateDetectionlessTrack(this);
    }
  }
}

void sub_20CC7E598(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7EAA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20CC7EC84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  std::__shared_weak_count *v3;
  void *v5;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);

  _Unwind_Resume(a1);
}

void sub_20CC7ECA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC7ECB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC7F120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::recursive_mutex *a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  std::exception *v23;

  if (v16)
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a2 == 1)
  {
    v23 = (std::exception *)__cxa_begin_catch(a1);
    ReportException(v23);
    __cxa_end_catch();
    JUMPOUT(0x20CC7EDC8);
  }
  std::recursive_mutex::unlock(a10);

  _Unwind_Resume(a1);
}

void ft::CinematicTracker::Track(ft::TrackPool **this, const Frame *a2)
{
  uint64_t ActiveTracks;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void *__p[3];

  ActiveTracks = ft::TrackPool::GetActiveTracks(this[24]);
  v5 = *(uint64_t **)ActiveTracks;
  v6 = *(uint64_t **)(ActiveTracks + 8);
  if (*(uint64_t **)ActiveTracks != v6)
  {
    do
    {
      v7 = *v5;
      v5 += 2;
      ft::Track::Predict(v7, a2);
    }
    while (v5 != v6);
  }
  ft::TrackPool::UpdateForeignTracks((uint64_t)this[24], a2, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  ft::TrackPool::RetireLostTracks(this[24]);
  ft::CinematicTracker::ProcessTap((ft::CinematicTracker *)this, a2);
  ft::CinematicTracker::ManageHighPriorityTrack((ft::CinematicTracker *)this, a2);
}

void sub_20CC7F3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20CC7F5E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_20CC7F744(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0xD0uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *((_QWORD *)v15 + 25) = 0;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20CC7FD5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v27 + a3 + v26 + v23;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v24 + v27 + a3 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v36 + v25 + v28;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v58 + v49 + v47 + v48;
        v40 = __ROR8__(v58 + v49 + v47, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

uint64_t *ft::CinematicTracker::SetHighPriorityTrack(uint64_t *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *a2;
  if (*a2 != this[19])
  {
    v4 = this;
    if (this[21])
    {
      ft::CinematicTracker::TerminateDetectionlessTrack((ft::CinematicTracker *)this);
      v2 = *a2;
    }
    if (v2 && (*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      v5 = a2[1];
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 8);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      v8 = (std::__shared_weak_count *)v4[22];
      v4[21] = v2;
      v4[22] = v5;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v12 = *a2;
    v11 = a2[1];
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = (std::__shared_weak_count *)v4[20];
    v4[19] = v12;
    v4[20] = v11;
    if (!v15)
      return ft::SiameseRpnSession::Reset(v4 + 25);
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      return ft::SiameseRpnSession::Reset(v4 + 25);
    }
    else
    {
      return ft::SiameseRpnSession::Reset(v4 + 25);
    }
  }
  return this;
}

void ft::CinematicTracker::TerminateDetectionlessTrack(ft::CinematicTracker *this)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v2 = *((_QWORD *)this + 21);
  if (v2 != *((_QWORD *)this + 19))
  {
    ft::GetOsLog(this);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      ft::CinematicTracker::TerminateDetectionlessTrack();

    v2 = *((_QWORD *)this + 21);
  }
  v4 = *((_QWORD *)this + 24);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  v17 = v2;
  v18 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ft::TrackPool::RemoveTrack(v4, (uint64_t)&v17);
  v8 = v18;
  if (v18)
  {
    v9 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_20CC8049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ft::CinematicTracker::ProcessTap(ft::CinematicTracker *this, const Frame *a2)
{
  __int128 v4;
  _QWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  double v10;
  double v11;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int128 v27;
  __int128 v28;
  __int128 v29;

  if (!*((_BYTE *)a2 + 80))
    return;
  ft::TrackPool::GetTrackById(*((_QWORD *)this + 24), *((_QWORD *)a2 + 7), &v29);
  if (!(_QWORD)v29)
  {
    v10 = *((double *)a2 + 8);
    if (v10 > 1.0 || v10 < 0.0)
      goto LABEL_4;
    v11 = *((double *)a2 + 9);
    if (v11 < 0.0 || v11 > 1.0)
      goto LABEL_4;
    ft::TrackPool::CreateNewDetectionlessTrack(*((ft::TrackPool **)this + 24), (uint64_t)&v28);
    v13 = v28;
    v28 = 0uLL;
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    v29 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v29;
    *(_QWORD *)(v29 + 8) |= 1uLL;
    v27 = __PAIR128__(*((unint64_t *)&v29 + 1), v20);
    if (*((_QWORD *)&v29 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    ft::CinematicTracker::SetHighPriorityTrack((uint64_t *)this, (uint64_t *)&v27);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 2);
  *((_OWORD *)this + 1) = v4;
  v26 = *(_QWORD *)(v29 + 16);
  *(_QWORD *)&v28 = &v26;
  v5 = std::__hash_table<std::__hash_value_type<long long,CMTime>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,CMTime>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,CMTime>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,CMTime>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)this + 40, &v26, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28);
  v6 = *(_OWORD *)a2;
  v5[5] = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v5 + 3) = v6;
LABEL_4:
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20CC806C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20CC806E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20CC806F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ft::CinematicTracker::ManageHighPriorityTrack(ft::CinematicTracker *this, const Frame *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CMTime v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  CMTime time1;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v4 = *((_QWORD *)this + 19);
  if (!v4)
    goto LABEL_20;
  if (!*(_BYTE *)(v4 + 240))
    goto LABEL_20;
  v24 = 0;
  v25 = 0;
  ft::CinematicTracker::SetHighPriorityTrack((uint64_t *)this, &v24);
  v5 = v25;
  if (!v25)
    goto LABEL_20;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (objc_msgSend(*(id *)this, "allowTrackPromotion"))
      goto LABEL_8;
  }
  else
  {
LABEL_20:
    if (objc_msgSend(*(id *)this, "allowTrackPromotion"))
    {
LABEL_8:
      if (*((_BYTE *)a2 + 96))
        ft::CinematicTracker::PromoteTrackById(this, *((_QWORD *)a2 + 11));
      if (!*((_QWORD *)this + 19))
        ft::CinematicTracker::AutoPromoteExistingTrackToHighPriority((ft::TrackPool **)this);
      return;
    }
  }
  v8 = *((_QWORD *)this + 19);
  if (v8)
  {
    if (*(_BYTE *)(v8 + 232))
    {
      v9 = *(_OWORD *)(v8 + 168);
      v19 = *(_OWORD *)(v8 + 152);
      v20 = v9;
      v21 = *(_OWORD *)(v8 + 184);
      v22 = *(_QWORD *)(v8 + 200);
      v10 = *(_OWORD *)(v8 + 104);
      v16 = *(_OWORD *)(v8 + 88);
      v17 = v10;
      v11 = *(_OWORD *)(v8 + 136);
      *(_OWORD *)v18 = *(_OWORD *)(v8 + 120);
      *(_OWORD *)&v18[16] = v11;
      v12 = *(_OWORD *)(v8 + 72);
      v14 = *(_OWORD *)(v8 + 56);
      v15 = v12;
      time1 = *(CMTime *)&v18[4];
      v13 = *(CMTime *)a2;
      if (!CMTimeCompare(&time1, &v13))
        ft::SiameseRpnSession::Reset((uint64_t *)this + 25);
    }
  }
}

void sub_20CC8087C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ft::CinematicTracker::PromoteTrackById(ft::CinematicTracker *this, uint64_t a2)
{
  double v3;
  double v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  if (a2 != -1)
  {
    ft::TrackPool::GetTrackById(*((_QWORD *)this + 24), a2, &v15);
    if (v15)
    {
      if (*(_BYTE *)(v15 + 232))
      {
        v3 = *(double *)(v15 + 24);
        if (v3 >= 0.0)
        {
          v4 = *(double *)(v15 + 32);
          if (v4 >= 0.0 && v3 + *(double *)(v15 + 40) <= 1.0 && v4 + *(double *)(v15 + 48) <= 1.0)
          {
            v13 = v15;
            v14 = v16;
            if (v16)
            {
              p_shared_owners = (unint64_t *)&v16->__shared_owners_;
              do
                v6 = __ldxr(p_shared_owners);
              while (__stxr(v6 + 1, p_shared_owners));
            }
            ft::CinematicTracker::SetHighPriorityTrack((uint64_t *)this, &v13);
            v7 = v14;
            if (v14)
            {
              v8 = (unint64_t *)&v14->__shared_owners_;
              do
                v9 = __ldaxr(v8);
              while (__stlxr(v9 - 1, v8));
              if (!v9)
              {
                ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                std::__shared_weak_count::__release_weak(v7);
              }
            }
          }
        }
      }
    }
    v10 = v16;
    if (v16)
    {
      v11 = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_20CC809CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ft::CinematicTracker::AutoPromoteExistingTrackToHighPriority(ft::TrackPool **this)
{
  uint64_t ActiveTracks;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  double *v6;
  double v7;
  double v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  ActiveTracks = ft::TrackPool::GetActiveTracks(this[24]);
  v3 = *(uint64_t **)ActiveTracks;
  v4 = *(uint64_t **)(ActiveTracks + 8);
  if (*(uint64_t **)ActiveTracks != v4)
  {
    v5 = *(uint64_t **)ActiveTracks;
    while (1)
    {
      v6 = (double *)*v5;
      if (*(_BYTE *)(*v5 + 232))
      {
        v7 = v6[3];
        if (v7 >= 0.0)
        {
          v8 = v6[4];
          if (v8 >= 0.0 && v7 + v6[5] <= 1.0 && v8 + v6[6] <= 1.0)
            break;
        }
      }
      v5 += 2;
      if (v5 == v4)
        return;
    }
    v10 = *v3;
    v9 = (std::__shared_weak_count *)v3[1];
    v16 = v10;
    v17 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    ft::CinematicTracker::SetHighPriorityTrack((uint64_t *)this, &v16);
    v13 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_20CC80AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,CMTime>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,CMTime>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,CMTime>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,CMTime>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  float v17;
  float v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7)
                return v11;
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v11 = (_QWORD *)*v11;
            if (!v11)
              goto LABEL_23;
          }
        }
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x30uLL);
  *v15 = 0;
  v15[1] = v7;
  v16 = **a4;
  v15[4] = 0;
  v15[5] = 0;
  v15[2] = v16;
  v15[3] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (v8 && (float)(v18 * (float)v8) >= v17)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v20)
    {
LABEL_26:
      *v15 = *v20;
LABEL_61:
      *v20 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    v21 = 1;
    if (v8 >= 3)
      v21 = (v8 & (v8 - 1)) != 0;
    v22 = v21 | (2 * v8);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v8)
      goto LABEL_37;
    if (prime < v8)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < v8)
LABEL_37:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    v28 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        v4 = v7 % v8;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v7 % v8));
        if (v20)
          goto LABEL_26;
      }
      else
      {
        v4 = v7;
        v19 = *(_QWORD *)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v7);
        if (v20)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v28 & v7;
      v19 = *(_QWORD *)a1;
      v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v28 & v7));
      if (v20)
        goto LABEL_26;
    }
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v29 = *(_QWORD *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v29 >= v8)
        v29 %= v8;
    }
    else
    {
      v29 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20CC80E08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ft::CinematicTracker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EAF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ft::CinematicTracker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EAF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ft::CinematicTracker>::__on_zero_shared(uint64_t a1)
{
  ft::CinematicTracker::~CinematicTracker((ft::CinematicTracker *)(a1 + 24));
}

ft::CinematicTracker *ft::CinematicTracker::CinematicTracker(ft::CinematicTracker *this, FTCinematicConfig *a2)
{
  FTCinematicConfig *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 *v6;
  __n128 v8;
  uint64_t v9;

  v3 = a2;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = 0;
  v4 = *(_QWORD *)(MEMORY[0x24BDC0D40] + 16);
  *((_OWORD *)this + 1) = *MEMORY[0x24BDC0D40];
  *((_QWORD *)this + 4) = v4;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  MEMORY[0x212B93E68]((char *)this + 80);
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 22) = 0;
  *((_OWORD *)this + 10) = 0u;
  v8.n128_u64[0] = 10;
  v8.n128_u64[1] = 0x13E4CCCCDLL;
  v5 = operator new();
  ft::TrackMatcher::TrackMatcher(v5, v8.n128_u64);
  *((_QWORD *)this + 23) = v5;
  v8.n128_u8[0] = 0;
  v8.n128_u8[8] = 0;
  v9 = 0;
  v6 = (__n128 *)operator new();
  ft::TrackPool::TrackPool(v6, &v8);
  *((_QWORD *)this + 24) = v6;
  ft::SiameseRpnSession::SiameseRpnSession((_QWORD *)this + 25);

  return this;
}

void sub_20CC80F90(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;
  uint64_t v3;
  std::recursive_mutex *v4;
  ft::TrackPool **v5;
  uint64_t v6;

  std::unique_ptr<ft::TrackPool>::~unique_ptr[abi:ne180100](v5);
  std::unique_ptr<ft::TrackMatcher>::~unique_ptr[abi:ne180100]((ft::TrackMatcher **)(v6 + 40));
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v6 + 24);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v6 + 8);

  std::recursive_mutex::~recursive_mutex(v4);
  std::unordered_map<long long,CMTime>::~unordered_map[abi:ne180100](v3);

  _Unwind_Resume(a1);
}

void sub_20CC8103C()
{
  JUMPOUT(0x20CC81020);
}

ft::TrackPool **std::unique_ptr<ft::TrackPool>::~unique_ptr[abi:ne180100](ft::TrackPool **a1)
{
  ft::TrackPool *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ft::TrackPool::~TrackPool(v2);
    MEMORY[0x212B93F04]();
  }
  return a1;
}

ft::TrackMatcher **std::unique_ptr<ft::TrackMatcher>::~unique_ptr[abi:ne180100](ft::TrackMatcher **a1)
{
  ft::TrackMatcher *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ft::TrackMatcher::~TrackMatcher(v2);
    MEMORY[0x212B93F04]();
  }
  return a1;
}

uint64_t std::unordered_map<long long,CMTime>::~unordered_map[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void ft::CinematicTracker::~CinematicTracker(ft::CinematicTracker *this)
{
  ft::TrackPool *v2;
  ft::TrackMatcher *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;

  ft::SiameseRpnSession::~SiameseRpnSession((ft::CinematicTracker *)((char *)this + 200));
  v2 = (ft::TrackPool *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v2)
  {
    ft::TrackPool::~TrackPool(v2);
    MEMORY[0x212B93F04]();
  }
  v3 = (ft::TrackMatcher *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
  {
    ft::TrackMatcher::~TrackMatcher(v3);
    MEMORY[0x212B93F04]();
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 80));
  v10 = (_QWORD *)*((_QWORD *)this + 7);
  if (v10)
  {
    do
    {
      v11 = (_QWORD *)*v10;
      operator delete(v10);
      v10 = v11;
    }
    while (v11);
  }
  v12 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    operator delete(v12);

}

void std::__shared_ptr_emplace<ft::Frame>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ft::Frame>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ft::Frame>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t OUTLINED_FUNCTION_2(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t rtcv::bmBufferPixelFormatTypeFromString(uint64_t a1, _DWORD *a2)
{
  std::string *v3;
  std::string *v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  std::string::size_type v8;
  std::string *v9;
  uint64_t *v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  _BOOL4 v16;
  BOOL v17;
  uint64_t *v18;
  int v19;
  unint64_t v20;
  uint64_t *v21;
  size_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  std::string v35;
  void *v36[2];
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v35 = *(std::string *)a1;
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (std::string *)((char *)&v35 + HIBYTE(v35.__r_.__value_.__r.__words[2]));
  else
    v3 = (std::string *)(v35.__r_.__value_.__r.__words[0] + v35.__r_.__value_.__l.__size_);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v35;
  else
    v4 = (std::string *)v35.__r_.__value_.__r.__words[0];
  for (; v4 != v3; v4 = (std::string *)((char *)v4 + 1))
    v4->__r_.__value_.__s.__data_[0] = __tolower(v4->__r_.__value_.__s.__data_[0]);
  v5 = atomic_load((unsigned __int8 *)&_MergedGlobals);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals))
  {
    v34 = 0;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(v36, "int8", &v34);
    v33 = 1;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(&v38, "uint8", &v33);
    v32 = 2;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(&__p, "uint10", &v32);
    v31 = 3;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(&v42, "uint12", &v31);
    v30 = 4;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(&v44, "uint14", &v30);
    v29 = 5;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(&v46, "uint16", &v29);
    v28 = 6;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(&v48, "float", &v28);
    v27 = 7;
    std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(&v50, "half", &v27);
    std::map<std::string,BmBufferPixelFormatType>::map[abi:ne180100]((uint64_t)&unk_253EC4C00, (const void **)v36, 8);
    if (v51 < 0)
    {
      operator delete(v50);
      if ((v49 & 0x80000000) == 0)
      {
LABEL_60:
        if ((v47 & 0x80000000) == 0)
          goto LABEL_61;
        goto LABEL_69;
      }
    }
    else if ((v49 & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(v48);
    if ((v47 & 0x80000000) == 0)
    {
LABEL_61:
      if ((v45 & 0x80000000) == 0)
        goto LABEL_62;
      goto LABEL_70;
    }
LABEL_69:
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_62:
      if ((v43 & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_71;
    }
LABEL_70:
    operator delete(v44);
    if ((v43 & 0x80000000) == 0)
    {
LABEL_63:
      if ((v41 & 0x80000000) == 0)
        goto LABEL_64;
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v42);
    if ((v41 & 0x80000000) == 0)
    {
LABEL_64:
      if ((v39 & 0x80000000) == 0)
        goto LABEL_65;
      goto LABEL_73;
    }
LABEL_72:
    operator delete(__p);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_65:
      if ((v37 & 0x80000000) == 0)
      {
LABEL_66:
        __cxa_atexit((void (*)(void *))std::map<std::string,BmBufferPixelFormatType>::~map[abi:ne180100], &unk_253EC4C00, &dword_20CC71000);
        __cxa_guard_release(&_MergedGlobals);
        goto LABEL_13;
      }
LABEL_74:
      operator delete(v36[0]);
      goto LABEL_66;
    }
LABEL_73:
    operator delete(v38);
    if ((v37 & 0x80000000) == 0)
      goto LABEL_66;
    goto LABEL_74;
  }
LABEL_13:
  v6 = qword_253EC4C08;
  v7 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if (qword_253EC4C08)
  {
    v8 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v35.__r_.__value_.__r.__words[2])
       : v35.__r_.__value_.__l.__size_;
    v9 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v35
       : (std::string *)v35.__r_.__value_.__r.__words[0];
    v10 = &qword_253EC4C08;
    do
    {
      v11 = *(char *)(v6 + 55);
      if (v11 >= 0)
        v12 = *(unsigned __int8 *)(v6 + 55);
      else
        v12 = *(_QWORD *)(v6 + 40);
      if (v11 >= 0)
        v13 = (const void *)(v6 + 32);
      else
        v13 = *(const void **)(v6 + 32);
      if (v8 >= v12)
        v14 = v12;
      else
        v14 = v8;
      v15 = memcmp(v13, v9, v14);
      v16 = v12 < v8;
      if (v15)
        v16 = v15 < 0;
      v17 = !v16;
      if (v16)
        v18 = (uint64_t *)(v6 + 8);
      else
        v18 = (uint64_t *)v6;
      if (v17)
        v10 = (uint64_t *)v6;
      v6 = *v18;
    }
    while (*v18);
    if (v10 != &qword_253EC4C08)
    {
      v19 = *((char *)v10 + 55);
      v20 = v19 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      v21 = v19 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      v22 = v20 >= v8 ? v8 : v20;
      v23 = memcmp(v9, v21, v22);
      v24 = v8 < v20;
      if (v23)
        v24 = v23 < 0;
      if (!v24)
      {
        *a2 = *((_DWORD *)v10 + 14);
        v25 = 1;
        if ((v7 & 0x80) == 0)
          return v25;
        goto LABEL_53;
      }
    }
  }
  v25 = 0;
  if (v7 < 0)
LABEL_53:
    operator delete(v35.__r_.__value_.__l.__data_);
  return v25;
}

void sub_20CC81700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  char a68;
  char a72;
  void **v72;

  if (a72 < 0)
  {
    operator delete(v72[28]);
    if ((a68 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a68 & 0x80000000) == 0)
  {
LABEL_3:
    if (a61 < 0)
      goto LABEL_4;
    goto LABEL_12;
  }
  operator delete(v72[24]);
  if (a61 < 0)
  {
LABEL_4:
    operator delete(v72[20]);
    if ((a54 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  if ((a54 & 0x80000000) == 0)
  {
LABEL_5:
    if (a47 < 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(v72[16]);
  if (a47 < 0)
  {
LABEL_6:
    operator delete(v72[12]);
    if ((a40 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  if ((a40 & 0x80000000) == 0)
  {
LABEL_7:
    if (a33 < 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a35);
  if (a33 < 0)
  {
LABEL_8:
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_18:
      __cxa_guard_abort(&_MergedGlobals);
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
LABEL_17:
    operator delete(a21);
    goto LABEL_18;
  }
LABEL_16:
  if ((a26 & 0x80000000) == 0)
    goto LABEL_18;
  goto LABEL_17;
}

_DWORD *std::pair<std::string const,BmBufferPixelFormatType>::pair[abi:ne180100]<char const(&)[5],BmBufferPixelFormatType,0>(_DWORD *a1, char *__s, _DWORD *a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v6;
    v8 = a1;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v8, __s, v7);
LABEL_9:
  *((_BYTE *)v8 + v7) = 0;
  a1[6] = *a3;
  return a1;
}

uint64_t std::map<std::string,BmBufferPixelFormatType>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BmBufferPixelFormatType> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_20CC81978(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,BmBufferPixelFormatType>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void rtcv::bmBufferPixelFormatTypeToString(int a1@<W0>, std::string *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  int v5;
  __int128 v6;
  std::string *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  char v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  void *__p;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)&qword_253EC4BF8);
  if ((v3 & 1) == 0)
  {
    v7 = a2;
    v8 = __cxa_guard_acquire(&qword_253EC4BF8);
    a2 = v7;
    if (v8)
    {
      v16 = 0;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v17, &v16, "int8");
      v15 = 1;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v20, &v15, "uint8");
      v14 = 2;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v23, &v14, "uint10");
      v13 = 3;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v26, &v13, "uint12");
      v12 = 4;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v29, &v12, "uint14");
      v11 = 5;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v32, &v11, "uint16");
      v10 = 6;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v35, &v10, "float");
      v9 = 7;
      std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>((uint64_t)&v38, &v9, "half");
      std::map<BmBufferPixelFormatType,std::string>::map[abi:ne180100]((uint64_t)&unk_253EC4C18, &v17, 8);
      if (v40 < 0)
      {
        operator delete(__p);
        if ((v37 & 0x80000000) == 0)
        {
LABEL_15:
          if ((v34 & 0x80000000) == 0)
            goto LABEL_16;
          goto LABEL_24;
        }
      }
      else if ((v37 & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(v36);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_16:
        if ((v31 & 0x80000000) == 0)
          goto LABEL_17;
        goto LABEL_25;
      }
LABEL_24:
      operator delete(v33);
      if ((v31 & 0x80000000) == 0)
      {
LABEL_17:
        if ((v28 & 0x80000000) == 0)
          goto LABEL_18;
        goto LABEL_26;
      }
LABEL_25:
      operator delete(v30);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_18:
        if ((v25 & 0x80000000) == 0)
          goto LABEL_19;
        goto LABEL_27;
      }
LABEL_26:
      operator delete(v27);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_19:
        if ((v22 & 0x80000000) == 0)
          goto LABEL_20;
        goto LABEL_28;
      }
LABEL_27:
      operator delete(v24);
      if ((v22 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v19 & 0x80000000) == 0)
        {
LABEL_21:
          __cxa_atexit((void (*)(void *))std::map<BmBufferPixelFormatType,std::string>::~map[abi:ne180100], &unk_253EC4C18, &dword_20CC71000);
          __cxa_guard_release(&qword_253EC4BF8);
          a2 = v7;
          goto LABEL_2;
        }
LABEL_29:
        operator delete(v18);
        goto LABEL_21;
      }
LABEL_28:
      operator delete(v21);
      if ((v19 & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_29;
    }
  }
LABEL_2:
  v4 = qword_253EC4C20;
  if (!qword_253EC4C20)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v5 = *(_DWORD *)(v4 + 32);
      if (v5 <= a1)
        break;
      v4 = *(_QWORD *)v4;
      if (!v4)
        goto LABEL_8;
    }
    if (v5 >= a1)
      break;
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      goto LABEL_8;
  }
  if (*(char *)(v4 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v4 + 40), *(_QWORD *)(v4 + 48));
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 40);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 56);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_20CC81CB8(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  char *v55;
  _Unwind_Exception *v58;

  if (a55 < 0)
    operator delete(__p);
  rtcv::bmBufferPixelFormatTypeToString((uint64_t)&a21, a1, a2, (uint64_t)&a15, &a20);
  v58 = a15;
  if (&a21 != v55 && a20)
  {
    do
    {
      if (*(v55 - 1) < 0)
        operator delete(*((void **)v55 - 3));
      v55 -= 32;
    }
    while (v55 != &a21);
  }
  __cxa_guard_abort(&qword_253EC4BF8);
  _Unwind_Resume(v58);
}

uint64_t std::pair<BmBufferPixelFormatType const,std::string>::pair[abi:ne180100]<BmBufferPixelFormatType,char const(&)[5],0>(uint64_t a1, _DWORD *a2, char *__s)
{
  void *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a1 = *a2;
  v5 = (void *)(a1 + 8);
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v5 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    *(_BYTE *)(a1 + 31) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v5, __s, v7);
LABEL_9:
  *((_BYTE *)v5 + v7) = 0;
  return a1;
}

uint64_t std::map<BmBufferPixelFormatType,std::string>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::__emplace_hint_unique_key_args<BmBufferPixelFormatType,std::pair<BmBufferPixelFormatType const,std::string> const&>((_QWORD **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_20CC81E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<BmBufferPixelFormatType,std::string>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

char *std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,BmBufferPixelFormatType> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  std::string *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::__find_equal<std::string>(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x40uLL);
  v10 = (std::string *)(v9 + 32);
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    *((_QWORD *)v9 + 6) = *(_QWORD *)(a4 + 16);
  }
  *((_DWORD *)v9 + 14) = *(_DWORD *)(a4 + 24);
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (uint64_t *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v9;
}

void sub_20CC82038(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t **v38;
  _QWORD *v39;
  const void *v40;
  const void *v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  int v48;
  _BOOL4 v49;
  uint64_t *v50;
  int v51;
  size_t v52;
  uint64_t *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  _QWORD *v60;
  const void *v61;
  const void *v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  _BOOL4 v68;
  int v69;
  _BOOL4 v70;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_20;
  v10 = *((char *)a2 + 55);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a2 + 55);
  else
    v14 = a2[5];
  if (v10 >= 0)
    v15 = a2 + 4;
  else
    v15 = (const void *)a2[4];
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  if (v18)
  {
LABEL_20:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      v20 = (uint64_t *)*a2;
      do
      {
        v21 = v20;
        v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      v26 = a2;
      do
      {
        v21 = (uint64_t *)v26[2];
        v27 = *v21 == (_QWORD)v26;
        v26 = v21;
      }
      while (v27);
    }
    v28 = *((char *)a5 + 23);
    v29 = *((char *)v21 + 55);
    if (v29 >= 0)
      v30 = *((unsigned __int8 *)v21 + 55);
    else
      v30 = v21[5];
    if (v29 >= 0)
      v31 = v21 + 4;
    else
      v31 = (const void *)v21[4];
    if (v28 >= 0)
      v32 = *((unsigned __int8 *)a5 + 23);
    else
      v32 = (size_t)a5[1];
    if (v28 >= 0)
      v33 = a5;
    else
      v33 = *a5;
    if (v32 >= v30)
      v34 = v30;
    else
      v34 = v32;
    v35 = memcmp(v31, v33, v34);
    v36 = v30 < v32;
    if (v35)
      v36 = v35 < 0;
    if (v36)
      goto LABEL_53;
    v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          v38 = (uint64_t **)v37;
          v41 = (const void *)v37[4];
          v39 = v37 + 4;
          v40 = v41;
          v42 = *((char *)v39 + 23);
          if (v42 >= 0)
            v43 = *((unsigned __int8 *)v39 + 23);
          else
            v43 = v39[1];
          if (v42 >= 0)
            v44 = v39;
          else
            v44 = v40;
          if (v43 >= v32)
            v45 = v32;
          else
            v45 = v43;
          v46 = memcmp(v33, v44, v45);
          v47 = v32 < v43;
          if (v46)
            v47 = v46 < 0;
          if (!v47)
            break;
          v37 = *v38;
          v8 = v38;
          if (!*v38)
            goto LABEL_74;
        }
        v48 = memcmp(v44, v33, v45);
        v49 = v43 < v32;
        if (v48)
          v49 = v48 < 0;
        if (!v49)
          break;
        v8 = v38 + 1;
        v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  v22 = memcmp(v15, v13, v16);
  v23 = v14 < v12;
  if (v22)
    v23 = v22 < 0;
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v24 = a2[1];
  if (v24)
  {
    v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      v27 = *a4 == v50;
      v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    v51 = *((char *)a4 + 55);
    if (v51 >= 0)
      v52 = *((unsigned __int8 *)a4 + 55);
    else
      v52 = (size_t)a4[5];
    if (v51 >= 0)
      v53 = (uint64_t *)(a4 + 4);
    else
      v53 = a4[4];
    if (v52 >= v12)
      v54 = v12;
    else
      v54 = v52;
    v55 = memcmp(v13, v53, v54);
    v56 = v12 < v52;
    if (v55)
      v56 = v55 < 0;
    if (!v56)
    {
      v57 = *v8;
      if (*v8)
      {
        v58 = a3;
        do
        {
          while (1)
          {
            v59 = (uint64_t **)v57;
            v62 = (const void *)v57[4];
            v60 = v57 + 4;
            v61 = v62;
            v63 = *((char *)v60 + 23);
            if (v63 >= 0)
              v64 = *((unsigned __int8 *)v60 + 23);
            else
              v64 = v60[1];
            if (v63 >= 0)
              v65 = v60;
            else
              v65 = v61;
            if (v64 >= v12)
              v66 = v12;
            else
              v66 = v64;
            v67 = memcmp(v13, v65, v66);
            v68 = v12 < v64;
            if (v67)
              v68 = v67 < 0;
            if (!v68)
              break;
            v57 = *v59;
            v8 = v59;
            if (!*v59)
              goto LABEL_119;
          }
          v69 = memcmp(v65, v13, v66);
          v70 = v64 < v12;
          if (v69)
            v70 = v69 < 0;
          if (!v70)
            break;
          v8 = v59 + 1;
          v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        v59 = v8;
        v58 = a3;
      }
LABEL_119:
      *v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

void std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,BmBufferPixelFormatType>,std::__map_value_compare<std::string,std::__value_type<std::string,BmBufferPixelFormatType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BmBufferPixelFormatType>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

char *std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::__emplace_hint_unique_key_args<BmBufferPixelFormatType,std::pair<BmBufferPixelFormatType const,std::string> const&>(_QWORD **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  char *v9;
  std::string *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::__find_equal<BmBufferPixelFormatType>(a1, a2, &v15, &v14, a3);
  if (*v6)
    return (char *)*v6;
  v8 = v6;
  v9 = (char *)operator new(0x40uLL);
  *((_DWORD *)v9 + 8) = *(_DWORD *)a4;
  v10 = (std::string *)(v9 + 40);
  if (*(char *)(a4 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 8);
    *((_QWORD *)v9 + 7) = *(_QWORD *)(a4 + 24);
  }
  v11 = v15;
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = v11;
  *v8 = (uint64_t)v9;
  v12 = (_QWORD *)**a1;
  v13 = (uint64_t *)v9;
  if (v12)
  {
    *a1 = v12;
    v13 = (uint64_t *)*v8;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return v9;
}

void sub_20CC82744(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::__find_equal<BmBufferPixelFormatType>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 32);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 8))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 32);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

void std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<BmBufferPixelFormatType,std::string>,std::__map_value_compare<BmBufferPixelFormatType,std::__value_type<BmBufferPixelFormatType,std::string>,std::less<BmBufferPixelFormatType>,true>,std::allocator<std::__value_type<BmBufferPixelFormatType,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C55E148, MEMORY[0x24BEDAB00]);
}

void sub_20CC829A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

id ft::GetOsLog(ft *this)
{
  if (ft::GetOsLog(void)::token != -1)
    dispatch_once(&ft::GetOsLog(void)::token, &__block_literal_global);
  return (id)ft::GetOsLog(void)::os_log;
}

void ___ZN2ft8GetOsLogEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.FusionTracker", "default");
  v1 = (void *)ft::GetOsLog(void)::os_log;
  ft::GetOsLog(void)::os_log = (uint64_t)v0;

}

void *ft::UserDefaults::Get(ft::UserDefaults *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_253EC4C38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_253EC4C38))
    return &_MergedGlobals_0;
  ft::UserDefaults::UserDefaults((ft::UserDefaults *)&_MergedGlobals_0);
  __cxa_guard_release(&qword_253EC4C38);
  return &_MergedGlobals_0;
}

void sub_20CC82AC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253EC4C38);
  _Unwind_Resume(a1);
}

ft::UserDefaults *ft::UserDefaults::UserDefaults(ft::UserDefaults *this)
{
  void *v2;
  ft *v3;
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCF50]), "initWithSuiteName:", CFSTR("com.apple.coremedia"));
  *(_BYTE *)this = objc_msgSend(v2, "BOOLForKey:", CFSTR("enable_tap_to_track_overlap_with_isp_mitigation"));
  v3 = (ft *)objc_msgSend(v2, "integerForKey:", CFSTR("ttt_rpn_precision_level"));
  v4 = (int)v3;
  if (((_DWORD)v3 - 1) >= 5)
    v5 = 3;
  else
    v5 = (int)v3;
  *((_DWORD *)this + 1) = v5;
  ft::GetOsLog(v3);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v7 = *((_DWORD *)this + 1);
    v9[0] = 67109376;
    v9[1] = v7;
    v10 = 1024;
    v11 = v4;
    _os_log_impl(&dword_20CC71000, v6, OS_LOG_TYPE_INFO, "RPN Precision Level set to %d (defaults value: %d)", (uint8_t *)v9, 0xEu);
  }

  return this;
}

void sub_20CC82BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC82C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC82C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t simResizeVisPipeBinning(uint64_t a1, uint64_t a2, unint64_t a3, float a4, float a5, float a6, float a7)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  _WORD *v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  signed int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _WORD *v39;
  int v40;
  signed int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  uint16x8_t *v47;
  unsigned __int16 *v48;
  int32x4_t v49;
  unint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  uint16x8_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v68 = a2;
  if (a6 != 0.0 || a7 != 0.0)
    simResizeVisPipeBinning();
  v7 = vcvtas_u32_f32(1.0 / a4);
  v8 = (1 << v7) & 0x116;
  if (v7 > 8 || (_DWORD)v8 == 0)
    simResizeVisPipeBinning();
  LODWORD(v8) = vcvtas_u32_f32(1.0 / a5);
  if (v8 > 8 || ((1 << v8) & 0x116) == 0)
    simResizeVisPipeBinning();
  v11 = *(_DWORD *)(a1 + 12);
  LODWORD(v12) = (v11 / v7) & 0xFFFFFFFE;
  v13 = *(_DWORD *)(a2 + 8);
  v14 = *(_DWORD *)(a2 + 12);
  if (v14 >= v12)
    v12 = v12;
  else
    v12 = v14;
  LODWORD(v15) = *(_DWORD *)(a1 + 8) / v8;
  if (v13 >= v15)
    v15 = v15;
  else
    v15 = v13;
  v67 = v15;
  if ((_DWORD)v15)
  {
    if (v14)
    {
      if ((_DWORD)v12)
      {
        v66 = *(_QWORD *)a2;
        v65 = *(_DWORD *)(a2 + 16);
        v16 = v7 >> 1;
        v17 = v8 >> 1;
        v18 = v8 - 1;
        v19 = v7 - 1;
        if (v19 >= 0xF)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v36 = v19 + 1;
          a3 = (v19 + 1) & 0x1FFFFFFF0;
          while (v33 < *(unsigned int *)(v68 + 8))
          {
            v37 = 0;
            v38 = 0;
            v39 = (_WORD *)(v66 + (v65 * v33));
            v64 = v33;
            v40 = v33 * v8;
            do
            {
              if (v11 <= v38 * v7)
                goto LABEL_60;
              v42 = *(_DWORD *)(a1 + 8);
              if (v42 <= v34)
                v42 = v34;
              if (v35 + v42 <= v18)
LABEL_60:
                simResizeVisPipeBinning(a1, a2, a3);
              v43 = 0;
              v44 = 0;
              v45 = *(_DWORD *)(a1 + 16);
              v46 = v34 * v45;
              do
              {
                v47 = (uint16x8_t *)(*(_QWORD *)a1 + 2 * v37 + 16 + v46);
                v48 = (unsigned __int16 *)(*(_QWORD *)a1
                                         + 2 * v38 * v7
                                         + 2 * a3
                                         + (v45 * (v40 + v43)));
                v49 = 0uLL;
                v50 = a3;
                v51 = 0uLL;
                v52 = 0uLL;
                v53 = 0uLL;
                do
                {
                  v54 = v47[-1];
                  v51 = (int32x4_t)vaddw_high_u16((uint32x4_t)v51, v54);
                  v49 = (int32x4_t)vaddw_u16((uint32x4_t)v49, *(uint16x4_t *)v54.i8);
                  v53 = (int32x4_t)vaddw_high_u16((uint32x4_t)v53, *v47);
                  v52 = (int32x4_t)vaddw_u16((uint32x4_t)v52, *(uint16x4_t *)v47->i8);
                  v47 += 2;
                  v50 -= 16;
                }
                while (v50);
                v55 = vaddvq_s32(vaddq_s32(vaddq_s32(v52, v49), vaddq_s32(v53, v51)));
                if (v36 != a3)
                {
                  v56 = v7 - a3;
                  do
                  {
                    v57 = *v48++;
                    a2 = v57;
                    v55 += v57;
                    --v56;
                  }
                  while (v56);
                }
                v44 += (v55 + v16) / v7;
                ++v43;
                v46 += v45;
              }
              while (v43 != v8);
              v41 = (v44 + v17) / v8;
              if (v41 >= 0xFFFF)
                v41 = 0xFFFF;
              *v39++ = v41 & ~(unsigned __int16)(v41 >> 31);
              ++v38;
              v37 += v7;
            }
            while (v38 != v12);
            v33 = v64 + 1;
            v35 -= v8;
            v34 += v8;
            if (v64 + 1 == v67)
              return 1;
          }
        }
        else
        {
          a3 = 0;
          v20 = 0;
          v21 = 0;
          while (a3 < *(unsigned int *)(v68 + 8))
          {
            v22 = 0;
            v23 = (_WORD *)(v66 + (v65 * a3));
            do
            {
              if (v11 <= v22 * v7)
                goto LABEL_60;
              v24 = *(_DWORD *)(a1 + 8);
              if (v24 <= v20)
                v24 = v20;
              if (v21 + v24 <= v18)
                goto LABEL_60;
              v25 = 0;
              v26 = 0;
              do
              {
                v27 = 0;
                a2 = *(_QWORD *)a1
                   + 2 * v22 * v7
                   + (*(_DWORD *)(a1 + 16) * (a3 * v8 + v25));
                v28 = v7;
                do
                {
                  v29 = *(unsigned __int16 *)a2;
                  a2 += 2;
                  v27 += v29;
                  --v28;
                }
                while (v28);
                v26 += (v27 + v16) / v7;
                ++v25;
              }
              while (v25 != v8);
              v30 = (v26 + v17) / v8;
              if (v30 >= 0xFFFF)
                v30 = 0xFFFF;
              *v23++ = v30 & ~(unsigned __int16)(v30 >> 31);
              ++v22;
            }
            while (v22 != v12);
            ++a3;
            v21 -= v8;
            v20 += v8;
            if (a3 == v67)
              return 1;
          }
        }
      }
      else
      {
        v31 = v15 - 1;
        if ((int)v15 - 1 >= v13)
          v31 = *(_DWORD *)(a2 + 8);
        if (v31 > 0x1F)
        {
          v58 = v31 + 1;
          v59 = v58 & 0x1F;
          if ((v58 & 0x1F) == 0)
            v59 = 32;
          v32 = v58 - v59;
          v60 = v32;
          do
            v60 -= 32;
          while (v60);
        }
        else
        {
          v32 = 0;
        }
        v61 = v13 - v32;
        v62 = v15 - v32;
        while (v61)
        {
          --v61;
          if (!--v62)
            return 1;
        }
      }
    }
    simResizeVisPipeBinning(a1, a2, a3);
  }
  return 1;
}

uint64_t simResizeVisPipeArea(unint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  _WORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  _WORD *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  unsigned int v81;

  v9 = *(unsigned int *)(a2 + 12);
  v73 = *(unsigned int *)(a2 + 8);
  v74 = a2;
  v80 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v80)
    goto LABEL_48;
  v10 = *(_DWORD *)(a1 + 12);
  if (!v10)
    goto LABEL_97;
  if (!*(_DWORD *)(a3 + 12))
    goto LABEL_98;
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = vcvtas_u32_f32(65536.0 / a4);
    LODWORD(v7) = vcvtas_u32_f32(a4 * 65536.0);
    v8 = vcvtas_u32_f32(a6 * 8.0) << 13;
    v78 = *(_QWORD *)a1;
    v76 = *(_DWORD *)(a1 + 16);
    v75 = *(_QWORD *)a3;
    v13 = v10 - 1;
    v14 = *(_DWORD *)(a3 + 16);
    while (v11 < *(unsigned int *)(a1 + 8))
    {
      if (v11 >= *(unsigned int *)(a3 + 8))
        goto LABEL_98;
      v15 = 0;
      v16 = v78 + (v76 * v11);
      v17 = (_WORD *)(v75 + (v14 * v11));
      v18 = v8 + v12;
      v19 = v8;
      do
      {
        v25 = HIWORD(v19);
        v26 = HIWORD(v19) + 1;
        v27 = 0x10000 - (unsigned __int16)v19;
        v19 += v12;
        v28 = HIWORD(v19);
        if (v13 >= v25)
          v29 = v25;
        else
          v29 = v13;
        a2 = *(unsigned __int16 *)(v16 + 2 * v29);
        v30 = v27 * a2;
        if (v26 < v28)
        {
          v31 = ~v25;
          v32 = ~v25 + (((_DWORD)v8 + v12 + v15 * v12) >> 16);
          if (v32 < 2)
            goto LABEL_102;
          v33 = 0;
          LODWORD(a2) = (v31 + HIWORD(v18)) & 0xFFFFFFFE;
          v34 = v26;
          v26 += v32 & 0xFFFFFFFE;
          do
          {
            if (v13 >= v34)
              v35 = v34;
            else
              v35 = v13;
            if (v13 >= v34 + 1)
              v36 = v34 + 1;
            else
              v36 = v13;
            v30 += *(unsigned __int16 *)(v16 + 2 * v35) << 16;
            v33 += *(unsigned __int16 *)(v16 + 2 * v36) << 16;
            v34 += 2;
            a2 = (a2 - 2);
          }
          while ((_DWORD)a2);
          v30 += v33;
          if (v32 != (v32 & 0xFFFFFFFE))
          {
LABEL_102:
            do
            {
              if (v13 >= v26)
                v37 = v26;
              else
                v37 = v13;
              v30 += *(unsigned __int16 *)(v16 + 2 * v37) << 16;
              ++v26;
            }
            while (v26 < v28);
          }
        }
        if (v13 >= v28)
          v20 = HIWORD(v19);
        else
          v20 = v13;
        v21 = (v30 + (unsigned __int16)v19 * *(unsigned __int16 *)(v16 + 2 * v20)) * v7;
        v22 = v21 + (v21 >> 63);
        v23 = (unint64_t)(v22 + 0x80000000) >> 32;
        if (v22 >= 0xFFFE80000000)
          LOWORD(v23) = -1;
        if (v22 <= 0x7FFFFFFF)
          v24 = 0;
        else
          v24 = v23;
        *v17++ = v24;
        ++v15;
        v18 += v12;
      }
      while (v15 != (_DWORD)v9);
      if (++v11 == v80)
        goto LABEL_48;
    }
LABEL_97:
    simResizeVisPipeBinning(a1, a2, a3);
  }
  v38 = *(_DWORD *)(a3 + 8);
  if (v80 > v38)
  {
    if (v38 >= (int)v80 - 1)
      v39 = v80 - 1;
    else
      v39 = *(_DWORD *)(a3 + 8);
    if (v39 >= v80)
      v40 = *(_DWORD *)(a1 + 8);
    else
      v40 = v39;
    if (v80 <= v39)
      goto LABEL_97;
    if (v38 != v40)
    {
      if ((_DWORD)v80 - 1 != v40)
      {
        while (1)
          ;
      }
      goto LABEL_48;
    }
LABEL_98:
    simResizeVisPipeBinning(a1, a2, a3);
  }
LABEL_48:
  if ((_DWORD)v73)
  {
    if ((_DWORD)v9)
    {
      v41 = 0;
      v42 = 0;
      v43 = vcvtas_u32_f32(65536.0 / a5);
      LODWORD(v8) = vcvtas_u32_f32(a5 * 65536.0);
      v44 = vcvtas_u32_f32(a7 * 8.0) << 13;
      v77 = *(_QWORD *)v74;
      v79 = *(_DWORD *)(v74 + 16);
      v45 = v80 - 1;
      a1 = *(unsigned int *)(a3 + 12);
      v46 = v43 + v44;
      v81 = v43;
      while (1)
      {
        v47 = HIWORD(v44);
        if (HIWORD(v44) >= v45)
          a2 = v45;
        else
          a2 = v47;
        v48 = HIWORD(v46);
        if (HIWORD(v46) >= v45)
          v48 = v45;
        if (v42 >= *(unsigned int *)(v74 + 8))
          break;
        v49 = v44 + v43;
        v50 = (v44 + v43) >> 16;
        v51 = 0x10000 - (unsigned __int16)v44;
        v52 = (unsigned __int16)(v44 + v43);
        if (v45 >= v47)
          v53 = HIWORD(v44);
        else
          v53 = v45;
        v54 = *(_QWORD *)a3;
        v55 = *(_DWORD *)(a3 + 16);
        if (v45 >= v50)
          v56 = HIWORD(v49);
        else
          v56 = v45;
        if (v47 + 1 < v50)
        {
          v57 = 0;
          v58 = (_WORD *)(v77 + (v79 * v42));
          while (v57 < a1)
          {
            v59 = *(_DWORD *)(a3 + 8);
            if (v59 <= v53)
              break;
            a2 = v51 * *(unsigned __int16 *)(v54 + v55 * v53 + 2 * v57);
            v60 = v47 + 1;
            do
            {
              if (v45 >= v60)
                v61 = v60;
              else
                v61 = v45;
              if (v59 <= v61)
                simResizeVisPipeBinning(a1, a2, a3);
              a2 = a2 + (*(unsigned __int16 *)(v54 + 2 * v57 + v61 * v55) << 16);
              ++v60;
            }
            while (v60 < v50);
            if (v59 <= v56)
              goto LABEL_96;
            v62 = (int)(a2 + v52 * *(unsigned __int16 *)(v54 + v55 * v56 + 2 * v57)) * v8;
            v63 = v62 + (v62 >> 63);
            v64 = (unint64_t)(v63 + 0x80000000) >> 32;
            if (v63 >= 0xFFFE80000000)
              LOWORD(v64) = -1;
            if (v63 <= 0x7FFFFFFF)
              v65 = 0;
            else
              v65 = v64;
            *v58++ = v65;
            if (++v57 == v9)
              goto LABEL_52;
          }
LABEL_95:
          simResizeVisPipeBinning(a1, a2, a3);
        }
        v66 = 0;
        v67 = v54 + (v55 * a2);
        v68 = v54 + v55 * v48;
        do
        {
          if (v66 >= a1)
            goto LABEL_95;
          v69 = *(_DWORD *)(a3 + 8);
          if (v69 <= v53)
            goto LABEL_95;
          if (v69 <= v56)
LABEL_96:
            simResizeVisPipeBinning(a1, a2, a3);
          v70 = v8
              * (unint64_t)(v51 * *(unsigned __int16 *)(v67 + 2 * v66)
                                 + v52 * *(unsigned __int16 *)(v68 + 2 * v66));
          v71 = (v70 + 0x80000000) >> 32;
          if (v70 >= 0xFFFE80000000)
            LOWORD(v71) = -1;
          if (!(v70 >> 31))
            LOWORD(v71) = 0;
          *(_WORD *)(v77 + v41 + 2 * v66++) = v71;
        }
        while (v9 != v66);
LABEL_52:
        ++v42;
        v43 = v81;
        v46 += v81;
        v41 += v79;
        v44 = v49;
        if (v42 == v73)
          return 1;
      }
    }
    simResizeVisPipeBinning(a1, a2, a3);
  }
  return 1;
}

uint64_t simResizeVisPipeBilinear(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5, float a6, float a7)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  __int16 v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = *(_DWORD *)(a1 + 12);
    if (v8)
    {
      v9 = *(_DWORD *)(a2 + 12);
      v10 = vcvtas_u32_f32(a7 * 8.0) << 13;
      v11 = *(_DWORD *)(a1 + 8);
      v12 = v11 - 1;
      if (v9)
      {
        v13 = 0;
        v14 = vcvtas_u32_f32(65536.0 / a4);
        v15 = vcvtas_u32_f32(65536.0 / a5);
        v16 = vcvtas_u32_f32(a6 * 8.0) << 13;
        v17 = *(_QWORD *)a1;
        v18 = *(_DWORD *)(a1 + 16);
        a3 = *(_QWORD *)a2;
        v19 = *(_DWORD *)(a2 + 16);
        v20 = v8 - 1;
        while (1)
        {
          v21 = HIWORD(v10);
          v22 = v12 >= HIWORD(v10) ? HIWORD(v10) : v12;
          v23 = *(_DWORD *)(a1 + 8);
          if (v23 <= v22)
            break;
          if (v12 >= v21 + 1)
            v24 = v21 + 1;
          else
            v24 = v12;
          if (v23 <= v24)
            goto LABEL_37;
          if (v13 >= *(unsigned int *)(a2 + 8))
            goto LABEL_35;
          v25 = v17 + v18 * v22;
          v26 = v17 + v18 * v24;
          v27 = (_WORD *)(a3 + (v19 * v13));
          v28 = v9;
          v29 = v16;
          do
          {
            if (v20 >= HIWORD(v29))
              v30 = HIWORD(v29);
            else
              v30 = v20;
            if (v20 >= HIWORD(v29) + 1)
              v31 = HIWORD(v29) + 1;
            else
              v31 = v20;
            v32 = 2 * v31;
            v33 = 2 * v30;
            v34 = (*(unsigned __int16 *)(v25 + v32) - *(unsigned __int16 *)(v25 + v33)) * (unsigned __int16)v29
                + (*(unsigned __int16 *)(v25 + v33) << 16);
            LODWORD(v32) = (*(unsigned __int16 *)(v26 + v32) - *(unsigned __int16 *)(v26 + v33)) * (unsigned __int16)v29
                         + (*(unsigned __int16 *)(v26 + v33) << 16);
            LODWORD(v32) = ((v34 + (v34 >> 31) + 0x8000) & 0xFFFF0000)
                         + ((((int)v32 + ((int)v32 >> 31) + 0x8000) >> 16) - ((v34 + (v34 >> 31) + 0x8000) >> 16))
                         * (unsigned __int16)v10;
            v35 = v32 + ((int)v32 >> 31) + 0x8000;
            if (v35 < 0x10000)
              v36 = 0;
            else
              v36 = HIWORD(v35);
            *v27++ = v36;
            v29 += v14;
            --v28;
          }
          while (v28);
          ++v13;
          v10 += v15;
          if (v13 == v7)
            return 1;
        }
      }
      else
      {
        v38 = HIWORD(v10);
        if (v12 >= HIWORD(v10))
          v39 = HIWORD(v10);
        else
          v39 = v11 - 1;
        if (v11 > v39)
        {
          if (v12 >= v38 + 1)
            v40 = v38 + 1;
          else
            v40 = v11 - 1;
          if (v11 > v40)
LABEL_35:
            simResizeVisPipeBinning(a1, a2, a3);
LABEL_37:
          simResizeVisPipeBinning(a1, a2, a3);
        }
      }
    }
    simResizeVisPipeBinning(a1, a2, a3);
  }
  return 1;
}

uint64_t simResizeVisPipe(__int128 *a1, uint64_t a2, unint64_t a3, int a4, unsigned int a5, float a6, float a7, float a8, float a9)
{
  unsigned int v17;
  unsigned int v18;
  __int128 *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v26;
  void *v27;
  _WORD *v28;
  int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint32x4_t v39;
  uint64_t v40;
  unsigned __int128 *v41;
  unsigned __int128 v42;
  const char *v44;
  int v45;
  unsigned int v46;
  int v47;
  int16x8_t *v48;
  uint64_t v49;
  uint64_t v50;
  int16x8_t *v51;
  unint64_t v52;
  int16x8_t *v53;
  uint64_t v54;
  uint32x4_t v55;
  int16x8_t *v56;
  unint64_t v57;
  uint16x8_t v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;

  if (a6 > 4.0 || a7 > 4.0)
    simResizeVisPipe();
  if (a6 < 0.0625 || a7 < 0.0625)
    simResizeVisPipe();
  if ((a7 > 1.0 || a6 > 1.0) && a4 == 0)
    simResizeVisPipe();
  v17 = *(_DWORD *)(a2 + 12);
  if (v17 >= 0x901)
    simResizeVisPipe();
  v18 = *(_DWORD *)(a2 + 8);
  if (v18 > 0x2000)
    simResizeVisPipe();
  v19 = a1;
  v20 = *((unsigned int *)a1 + 3);
  if (!(_DWORD)v20)
    return 0;
  v21 = *((_DWORD *)a1 + 2);
  if (!v21)
    return 0;
  v22 = 1;
  if (v17 && v18)
  {
    if (!a5)
    {
      v28 = 0;
      goto LABEL_46;
    }
    v59 = a3;
    v26 = *((_DWORD *)a1 + 4);
    if (v26 * v21)
    {
      v27 = operator new((v26 * v21));
      bzero(v27, (v26 * v21));
      v28 = v27;
      v60 = *v19;
      v61 = *((_QWORD *)v19 + 2);
      *(_QWORD *)&v60 = v27;
      if ((v26 & 1) == 0)
        goto LABEL_25;
    }
    else
    {
      v28 = 0;
      v60 = *a1;
      v61 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v60 = 0;
      if ((v26 & 1) == 0)
      {
LABEL_25:
        if (v26 == (_DWORD)v61)
        {
          if ((_DWORD)v20 == HIDWORD(v60))
          {
            if (v21 == DWORD2(v60))
            {
              v29 = *((_DWORD *)v19 + 5);
              if (v29 == HIDWORD(v61))
              {
                if (v29 == 5)
                {
                  v30 = *(unsigned __int16 **)v19;
                  v31 = ((v21 - 1) * v26);
                  v32 = (unsigned __int16 *)(*(_QWORD *)v19 + 2 * v20 + v31);
                  if (*(unsigned __int16 **)v19 == v32)
                  {
                    v19 = &v60;
                    a3 = v59;
                    goto LABEL_46;
                  }
                  v33 = 2 * v20 + v31 - 2;
                  if (v33 < 0x1E)
                  {
                    v34 = v28;
                    a3 = v59;
                  }
                  else
                  {
                    v34 = v28;
                    a3 = v59;
                    if ((unint64_t)((char *)v28 - (char *)v30) >= 0x20)
                    {
                      v35 = 0;
                      v36 = (v33 >> 1) + 1;
                      v37 = v36 & 0x7FFFFFFFFFFFFFF0;
                      v34 = &v28[v37];
                      v38 = &v30[v37];
                      v39 = (uint32x4_t)vnegq_s32(vdupq_n_s32(a5));
                      v40 = v36 & 0x7FFFFFFFFFFFFFF0;
                      do
                      {
                        v41 = (unsigned __int128 *)&v28[v35];
                        v42 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v30[v35 + 8]), v39), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v30[v35 + 8]), v39)) & __PAIR128__(0xFFF0FFF0FFF0FFFLL, 0xFFF0FFF0FFF0FFFLL);
                        *v41 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)&v30[v35]), v39), (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)&v30[v35]), v39)) & __PAIR128__(0xFFF0FFF0FFF0FFFLL, 0xFFF0FFF0FFF0FFFLL);
                        v41[1] = v42;
                        v35 += 16;
                        v40 -= 16;
                      }
                      while (v40);
                      v30 = v38;
                      if (v36 == (v36 & 0x7FFFFFFFFFFFFFF0))
                        goto LABEL_45;
                    }
                  }
                  do
                  {
                    v46 = *v30++;
                    *v34++ = (v46 >> a5) & 0xFFF;
                  }
                  while (v30 != v32);
LABEL_45:
                  v19 = &v60;
LABEL_46:
                  if (a4 == 2)
                  {
                    simResizeVisPipeBinning((uint64_t)v19, a2, a3, a6, a7, a8, a9);
                  }
                  else if (a4 == 1)
                  {
                    simResizeVisPipeBilinear((uint64_t)v19, a2, a3, a6, a7, a8, a9);
                  }
                  else
                  {
                    if (a4)
                    {
                      v22 = 0;
                      if (!a5)
                        goto LABEL_62;
                      goto LABEL_55;
                    }
                    simResizeVisPipeArea((unint64_t)v19, a2, a3, a6, a7, a8, a9);
                  }
                  v22 = 1;
                  if (!a5)
                  {
LABEL_62:
                    if (v28)
                      operator delete(v28);
                    return v22;
                  }
LABEL_55:
                  v47 = *(_DWORD *)(a2 + 16);
                  if ((v47 & 1) != 0)
                    __assert_rtn("outputHandler", "simresizevispipe.cpp", 234, "output.rowBytes % sizeof(uint16_t) == 0");
                  v48 = *(int16x8_t **)a2;
                  v49 = ((*(_DWORD *)(a2 + 8) - 1) * v47);
                  v50 = 2 * *(unsigned int *)(a2 + 12);
                  v51 = (int16x8_t *)(*(_QWORD *)a2 + v50 + v49);
                  if (*(int16x8_t **)a2 != v51)
                  {
                    v52 = v50 + v49 - 2;
                    v53 = *(int16x8_t **)a2;
                    if (v52 < 0x1E)
                      goto LABEL_78;
                    v54 = (v52 >> 1) + 1;
                    v53 = (int16x8_t *)((char *)v48 + 2 * (v54 & 0xFFFFFFFFFFFFFFF0));
                    v55 = (uint32x4_t)vdupq_n_s32(a5);
                    v56 = v48 + 1;
                    v57 = v54 & 0xFFFFFFFFFFFFFFF0;
                    do
                    {
                      v58.i32[0] = *(_OWORD *)v56 & 0xFFF0FFF;
                      v58.i16[2] = HIDWORD(v56->i64[0]) & 0xFFF;
                      v58.i16[3] = v58.i16[2];
                      v58.i32[2] = v56->i64[1] & 0xFFF0FFF;
                      v58.i16[6] = v58.i16[2];
                      v58.i16[7] = v58.i16[2];
                      v56[-1] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16((uint16x4_t)(v56[-1].i64[0] & 0xFFF0FFF0FFF0FFFLL)), v55), (int16x8_t)vshlq_u32(vmovl_high_u16((uint16x8_t)(*(_OWORD *)&v56[-1] & __PAIR128__(0xFFF0FFF0FFF0FFFLL, 0xFFF0FFF0FFF0FFFLL))), v55));
                      *v56 = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v58.i8), v55), (int16x8_t)vshlq_u32(vmovl_high_u16(v58), v55));
                      v56 += 2;
                      v57 -= 16;
                    }
                    while (v57);
                    if (v54 != (v54 & 0xFFFFFFFFFFFFFFF0))
                    {
LABEL_78:
                      do
                      {
                        v53->i16[0] = (v53->i16[0] & 0xFFF) << a5;
                        v53 = (int16x8_t *)((char *)v53 + 2);
                      }
                      while (v53 != v51);
                    }
                  }
                  goto LABEL_62;
                }
                v44 = "input.pixelFormat == kBmBufferPixelFormatType_UInt16";
                v45 = 221;
              }
              else
              {
                v44 = "input.pixelFormat == shiftedInput.pixelFormat";
                v45 = 220;
              }
            }
            else
            {
              v44 = "input.height == shiftedInput.height";
              v45 = 219;
            }
          }
          else
          {
            v44 = "input.width == shiftedInput.width";
            v45 = 218;
          }
        }
        else
        {
          v44 = "input.rowBytes == shiftedInput.rowBytes";
          v45 = 217;
        }
LABEL_75:
        __assert_rtn("inputHandler", "simresizevispipe.cpp", v45, v44);
      }
    }
    v44 = "input.rowBytes % sizeof(uint16_t) == 0";
    v45 = 216;
    goto LABEL_75;
  }
  return v22;
}

void sub_20CC83B10(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void OUTLINED_FUNCTION_0_4(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 63, a4);
}

uint64_t AcDetCreate(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  AcDetNode *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _DWORD *v11;
  AcSaliencyNode *v12;

  v3 = 4294967292;
  if (!a1 || !a2)
    return v3;
  v6 = operator new();
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (AcDetNode *)operator new();
  AcDetNode::AcDetNode((uint64_t)v7, (uint64_t)a3);
  *(_QWORD *)v6 = v7;
  v8 = AcDetNode::init((uint64_t)v7, 0, a3, 0);
  if ((_DWORD)v8)
  {
    v3 = v8;
    AcDetNode::~AcDetNode(v7);
    goto LABEL_5;
  }
  v10 = operator new();
  v11 = a3 + 3;
  AcSaliencyNode::AcSaliencyNode(v10, (uint64_t)v11);
  *(_QWORD *)(v6 + 8) = v10;
  result = AcSaliencyNode::init(v10, 0, v11);
  v3 = result;
  if ((_DWORD)result)
  {
    if (*(_QWORD *)v6)
    {
      AcDetNode::~AcDetNode(*(AcDetNode **)v6);
      MEMORY[0x212B93F04]();
    }
    v12 = *(AcSaliencyNode **)(v6 + 8);
    if (!v12)
      goto LABEL_6;
    AcSaliencyNode::~AcSaliencyNode(v12);
LABEL_5:
    MEMORY[0x212B93F04]();
LABEL_6:
    MEMORY[0x212B93F04](v6, 0x20C40A4A59CD2);
    return v3;
  }
  *a1 = v6;
  return result;
}

void sub_20CC83CAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212B93F04](v1, 0x1010C404B47ADB7);
  _Unwind_Resume(a1);
}

void sub_20CC83CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212B93F04](v1, 0x1090C408B5E7112);
  _Unwind_Resume(a1);
}

uint64_t AcDetDestroy(AcDetNode **a1)
{
  AcDetNode *v2;
  AcSaliencyNode *v3;

  if (!a1)
    return 4294967292;
  v2 = *a1;
  if (!v2)
    return 4294967292;
  AcDetNode::~AcDetNode(v2);
  MEMORY[0x212B93F04]();
  v3 = a1[1];
  if (v3)
  {
    AcSaliencyNode::~AcSaliencyNode(v3);
    MEMORY[0x212B93F04]();
  }
  MEMORY[0x212B93F04](a1, 0x20C40A4A59CD2);
  return 0;
}

uint64_t AcDetStart(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t AcDetStop(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t AcDetGetParams(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  if (!a1)
    return 4294967292;
  v4 = *a1;
  if (!*a1)
    return 4294967292;
  result = 4294967292;
  if (a2 && a3)
  {
    result = AcDetNode::getParams(v4, a2, a3, 0);
    if (!(_DWORD)result)
      return AcSaliencyNode::getParams(a1[1], a2 + 3, a3);
  }
  return result;
}

uint64_t AcDetPreProcessRef(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t result;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _DWORD v14[1018];

  if (!a1)
    return 4294967292;
  v5 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  if (!*v5)
    return 4294967292;
  result = 4294967292;
  if (!v1)
    return result;
  v7 = v3;
  if (!v3)
    return result;
  v8 = v4;
  if (!v4)
    return result;
  v9 = v2;
  if (!*v2)
    return result;
  if (!*v4)
    return result;
  result = AcDetNode::getParams(*v5, v3, (uint64_t)v14, 0);
  if ((_DWORD)result)
    return result;
  result = AcSaliencyNode::getParams(v5[1], v7 + 3, (uint64_t)v14);
  if ((_DWORD)result)
    return result;
  v10 = *((_DWORD *)v9 + 3);
  if ((v10 & 3) != 0)
    return 4294967292;
  v11 = *((_DWORD *)v8 + 3);
  if (v11 != 4 * v14[1])
    return 4294967292;
  v12 = *((_DWORD *)v8 + 2);
  if (v12 != v14[0])
    return 4294967292;
  v13 = *((_DWORD *)v8 + 4);
  result = 4294967292;
  if (v13 >= v11 && (v13 & 0x3F) == 0)
  {
    if (rtcv::simResize((void *)*v9, v10 >> 2, *((_DWORD *)v9 + 2), *((_DWORD *)v9 + 4), 0, 0, 0, (void *)*v8, v11 >> 2, v12, v13))
    {
      return 0;
    }
    else
    {
      return 4294967288;
    }
  }
  return result;
}

void AcDetPostProcessMultiNetOutputs(uint64_t a1)
{
  unsigned int *v1;
  uint64_t *v2;
  int *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  unsigned int *v8;
  __n128 *v9;
  int *v10;
  uint64_t *v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  float *v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  int v26;
  int v27;
  unint64_t v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  const char *v36;
  unsigned __int8 v37;
  char *v38;
  __int128 v39;
  float v40;
  float v41;
  float v42;
  float v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;

  if (a1)
  {
    v6 = (uint64_t *)MEMORY[0x24BDAC7A8]();
    if (*v6)
    {
      v7 = v4;
      if (v4)
      {
        v8 = v1;
        if (v1)
        {
          v9 = (__n128 *)v5;
          if (v5)
          {
            if (*v1)
            {
              if (v1[1])
              {
                v10 = v3;
                v11 = v2;
                if (*v3 == 24 || !*v3)
                {
                  v12 = v3[1];
                  if ((v12 == 24 || !v12) && v3[2] <= 1)
                  {
                    *(_QWORD *)(v5 + 205) = 0;
                    *(_OWORD *)(v5 + 176) = 0u;
                    *(_OWORD *)(v5 + 192) = 0u;
                    *(_OWORD *)(v5 + 144) = 0u;
                    *(_OWORD *)(v5 + 160) = 0u;
                    *(_OWORD *)(v5 + 112) = 0u;
                    *(_OWORD *)(v5 + 128) = 0u;
                    *(_OWORD *)(v5 + 80) = 0u;
                    *(_OWORD *)(v5 + 96) = 0u;
                    *(_OWORD *)(v5 + 48) = 0u;
                    *(_OWORD *)(v5 + 64) = 0u;
                    *(_OWORD *)(v5 + 16) = 0u;
                    *(_OWORD *)(v5 + 32) = 0u;
                    *(_OWORD *)v5 = 0u;
                    if (*v6)
                    {
                      if (!AcDetNode::getParams(*v6, v4, (uint64_t)&v45, 0))
                      {
                        v13 = v7 + 3;
                        if (!AcSaliencyNode::getParams(v6[1], v7 + 3, (uint64_t)&v45))
                        {
                          if (*v10)
                          {
                            if (AcDetNode::postProcess(*v6, *v11, *v10, v7, v9))
                              return;
                            if (v9[13].n128_u32[3])
                            {
                              v14 = 0;
                              v15 = &v9[15].n128_f32[1];
                              do
                              {
                                v16 = *(v15 - 3);
                                *(float *)&v44 = *(v15 - 2);
                                *((float *)&v44 + 1) = v16;
                                v17 = v16 + *(v15 - 1);
                                v42 = *(float *)&v44 + *v15;
                                v43 = v17;
                                bmBufferResizeCoordConvertReversed(*v8, v8[1], v46, v45, 1, (float *)&v44 + 1, (float *)&v44, v16, *(float *)&v44);
                                bmBufferResizeCoordConvertReversed(*v8, v8[1], v46, v45, 1, &v43, &v42, v43, v42);
                                v18 = v44;
                                *(v15 - 3) = *((float *)&v44 + 1);
                                *((_DWORD *)v15 - 2) = v18;
                                v19 = v42 - *(float *)&v18;
                                *(v15 - 1) = v43 - *((float *)&v18 + 1);
                                *v15 = v19;
                                ++v14;
                                v15 += 23;
                              }
                              while (v14 < v9[13].n128_u32[3]);
                            }
                            if (v9[71].n128_u32[2])
                            {
                              v20 = 0;
                              v21 = (float *)&v9[73];
                              do
                              {
                                v22 = *(v21 - 3);
                                *(float *)&v44 = *(v21 - 2);
                                *((float *)&v44 + 1) = v22;
                                v23 = v22 + *(v21 - 1);
                                v42 = *(float *)&v44 + *v21;
                                v43 = v23;
                                bmBufferResizeCoordConvertReversed(*v8, v8[1], v46, v45, 1, (float *)&v44 + 1, (float *)&v44, v22, *(float *)&v44);
                                bmBufferResizeCoordConvertReversed(*v8, v8[1], v46, v45, 1, &v43, &v42, v43, v42);
                                v24 = v44;
                                *(v21 - 3) = *((float *)&v44 + 1);
                                *((_DWORD *)v21 - 2) = v24;
                                v25 = v42 - *(float *)&v24;
                                *(v21 - 1) = v43 - *((float *)&v24 + 1);
                                *v21 = v25;
                                ++v20;
                                v21 += 8;
                              }
                              while (v20 < v9[71].n128_u32[2]);
                            }
                          }
                          v26 = v10[2];
                          if (v26)
                          {
                            AcSaliencyNode::postProcess(v6[1], v11[2], v26, v13, v9);
                            if (v27)
                              return;
                            v44 = 0;
                            bmBufferResizeCoordConvert(*v8, v8[1], v9[374].n128_u16[0], v9[374].n128_u16[1], 1, (float *)&v44 + 1, (float *)&v44, (float)(*v8 - 1), (float)(v8[1] - 1));
                            v9[374].n128_u16[0] = (int)(float)(*((float *)&v44 + 1) + 1.0);
                            v9[374].n128_u16[1] = (int)(float)(*(float *)&v44 + 1.0);
                            if (v9[91].n128_u32[3])
                            {
                              v28 = 0;
                              v29 = &v9[93].n128_f32[1];
                              do
                              {
                                v30 = *(v29 - 3);
                                v42 = *(v29 - 2);
                                v43 = v30;
                                v31 = v30 + *(v29 - 1);
                                v40 = v42 + *v29;
                                v41 = v31;
                                bmBufferResizeCoordConvertReversed(*v8, v8[1], v9[374].n128_u16[0], v9[374].n128_u16[1], 1, &v43, &v42, v30, v42);
                                bmBufferResizeCoordConvertReversed(*v8, v8[1], v9[374].n128_u16[0], v9[374].n128_u16[1], 1, &v41, &v40, v41, v40);
                                v33 = v42;
                                v32 = v43;
                                *(v29 - 3) = v43;
                                *(v29 - 2) = v33;
                                v34 = v41 - v32;
                                v35 = v40 - v33;
                                *(v29 - 1) = v34;
                                *v29 = v35;
                                ++v28;
                                v29 += 8;
                              }
                              while (v28 < v9[91].n128_u32[3]);
                            }
                          }
                          if (!v9->n128_u8[0])
                          {
                            v36 = AcCommitHash();
                            strncpy(&v9->n128_i8[1], v36, 0x14uLL);
                            v37 = v9->n128_u8[0];
                            v38 = (char *)v9 + 20 * v9->n128_u8[0];
                            *(_DWORD *)(v38 + 37) = 0;
                            *(_OWORD *)(v38 + 21) = xmmword_20CCAAE48;
                            v39 = *(_OWORD *)*v6;
                            *(_DWORD *)(v38 + 117) = *(_DWORD *)(*v6 + 16);
                            *(_OWORD *)(v38 + 101) = v39;
                            v9->n128_u8[0] = v37 + 1;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void AcDetPostProcess()
{
  uint64_t *v0;
  uint64_t *v1;
  _DWORD *v2;
  void *v3;
  void *v4;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int v17;
  _BYTE *v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int *v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BYTE *v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int *v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  unsigned int v43;
  _BYTE *v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  _BYTE *v49;
  _BYTE v50[660];
  int v51;
  _BYTE v52[2876];
  _BYTE *v53;
  _BYTE *v54;
  int v55;
  int v56;
  int v57;
  _BYTE v58[1176];
  uint64_t v59;

  v0 = (uint64_t *)MEMORY[0x24BDAC7A8]();
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = (uint64_t)v0;
  v59 = *MEMORY[0x24BDAC8D0];
  if (*v1 && *(uint64_t *)((char *)v1 + 36))
  {
    v8 = *((_DWORD *)v1 + 15);
    if (v8 != 24 && v8 != 0)
      return;
  }
  else if (*((_DWORD *)v1 + 6) || *((_DWORD *)v1 + 15))
  {
    return;
  }
  if (v1[1] && *(uint64_t *)((char *)v1 + 44))
  {
    v10 = *((_DWORD *)v1 + 16);
    if (v10 != 24 && v10)
      return;
  }
  else if (*((_DWORD *)v1 + 7) || *((_DWORD *)v1 + 16))
  {
    return;
  }
  if (v1[2] && *(uint64_t *)((char *)v1 + 52))
  {
    if (*((_DWORD *)v1 + 17) > 1u)
      return;
  }
  else if (*((_DWORD *)v1 + 8) || *((_DWORD *)v1 + 17))
  {
    return;
  }
  if (!v0
    || !v2
    || !*v0
    || AcDetNode::getParams(*v0, v2, (uint64_t)v50, 0)
    || AcSaliencyNode::getParams(*(_QWORD *)(v7 + 8), v5 + 3, (uint64_t)v50))
  {
    return;
  }
  v54 = 0;
  v53 = 0;
  v11 = *v6;
  if (!*v6)
  {
    v13 = 0;
    LODWORD(v12) = 0;
LABEL_36:
    *(_QWORD *)&v52[2868] = v13;
    v55 = v12;
    v23 = v6[1];
    if (v23)
    {
      v24 = *((_DWORD *)v6 + 16);
      v25 = v12;
      if (v24)
      {
        v26 = *(unsigned int **)((char *)v6 + 44);
        v27 = &v51;
        v28 = *((unsigned int *)v6 + 7);
        v29 = *((unsigned int *)v6 + 16);
        v25 = v12;
        do
        {
          v30 = *v26++;
          v31 = &v58[24 * v25];
          *(_QWORD *)v31 = v23 + v30;
          v32 = *(v27 - 2);
          v33 = *(v27 - 1) * *(v27 - 3);
          *((_DWORD *)v31 + 2) = v33;
          *((_DWORD *)v31 + 3) = v32;
          v34 = (v32 + 63) & 0xFFFFFFC0;
          v35 = *v27;
          *((_DWORD *)v31 + 4) = v34;
          *((_DWORD *)v31 + 5) = v35;
          if (v30 + (unint64_t)(v33 * v34) > v28)
            return;
          v27 += 6;
          ++v25;
        }
        while (--v29);
      }
      v53 = &v58[24 * v12];
      v56 = v24;
      v36 = v24 + v12;
      LODWORD(v12) = v25;
    }
    else
    {
      v53 = 0;
      v56 = 0;
      v36 = v12;
    }
    v37 = v6[2];
    if (v37)
    {
      v38 = *((_DWORD *)v6 + 17);
      if (v38)
      {
        v39 = *(unsigned int **)((char *)v6 + 52);
        v40 = *((unsigned int *)v6 + 8);
        v41 = (int *)v52;
        v42 = *((unsigned int *)v6 + 17);
        do
        {
          v43 = *v39++;
          v44 = &v58[24 * v12];
          *(_QWORD *)v44 = v37 + v43;
          v45 = *(v41 - 2);
          v46 = *(v41 - 1) * *(v41 - 3);
          *((_DWORD *)v44 + 2) = v46;
          *((_DWORD *)v44 + 3) = v45;
          v47 = (v45 + 63) & 0xFFFFFFC0;
          v48 = *v41;
          *((_DWORD *)v44 + 4) = v47;
          *((_DWORD *)v44 + 5) = v48;
          if (v43 + (unint64_t)(v46 * v47) > v40)
            return;
          v41 += 6;
          LODWORD(v12) = v12 + 1;
        }
        while (--v42);
      }
      v49 = &v58[24 * v36];
    }
    else
    {
      v49 = 0;
      v38 = 0;
    }
    v54 = v49;
    v57 = v38;
    bzero(v4, 0x1768uLL);
    AcDetPostProcessMultiNetOutputs(v7);
    return;
  }
  v12 = *((unsigned int *)v6 + 15);
  v13 = v58;
  if (!(_DWORD)v12)
    goto LABEL_36;
  v14 = 0;
  v15 = *(unsigned int **)((char *)v6 + 36);
  v16 = *((unsigned int *)v6 + 6);
  while (1)
  {
    v17 = *v15++;
    v18 = &v58[v14];
    *(_QWORD *)v18 = v11 + v17;
    v19 = *(_DWORD *)&v50[v14 + 76];
    v20 = *(_DWORD *)&v50[v14 + 84];
    v21 = *(_DWORD *)&v50[v14 + 80] * *(_DWORD *)&v50[v14 + 72];
    *((_DWORD *)v18 + 2) = v21;
    *((_DWORD *)v18 + 3) = v19;
    v22 = (v19 + 63) & 0xFFFFFFC0;
    *((_DWORD *)v18 + 4) = v22;
    *((_DWORD *)v18 + 5) = v20;
    if (v17 + (unint64_t)(v21 * v22) > v16)
      break;
    v14 += 24;
    if (24 * v12 == v14)
    {
      v13 = v58;
      goto LABEL_36;
    }
  }
}

uint64_t AcDetUseLowThresholds(AcDetNode **a1, int a2)
{
  AcDetNode *v2;

  if (!a1)
    return 4294967292;
  v2 = *a1;
  if (!v2)
    return 4294967292;
  AcDetNode::useLowThresholds(v2, a2 != 0);
  return 0;
}

unint64_t acNonMaxSuppression(uint64_t a1, unint64_t a2, float a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (!a1)
    acNonMaxSuppression();
  v3 = a2;
  if ((_DWORD)a2)
  {
    bmHeapsort(a1, a2, 0x24uLL, (int (*)(uint64_t, uint64_t))acDetRectScoreCompare);
    v6 = 0;
    v7 = a1 + 36;
    v8 = 1;
    do
    {
      v9 = v6 + 1;
      v10 = v3;
      if (v6 + 1 >= v3)
      {
        v3 = v6 + 1;
      }
      else
      {
        v11 = a1 + 36 * v6;
        v12 = v7;
        v13 = v8;
        v3 = v6 + 1;
        do
        {
          if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v12 + 16)
            || (acDetRectOverlap((float *)v11, (float *)v12), v14 <= a3))
          {
            v15 = v3;
            if (v13 < v3)
              acNonMaxSuppression();
            v3 = (v3 + 1);
            v16 = a1 + 36 * v15;
            v17 = *(_OWORD *)v12;
            v18 = *(_OWORD *)(v12 + 16);
            *(_DWORD *)(v16 + 32) = *(_DWORD *)(v12 + 32);
            *(_OWORD *)v16 = v17;
            *(_OWORD *)(v16 + 16) = v18;
          }
          ++v13;
          v12 += 36;
        }
        while (v10 != (_DWORD)v13);
      }
      ++v8;
      v7 += 36;
      v6 = v9;
    }
    while (v9 < v3);
  }
  return v3;
}

unint64_t acCrossClassSuppression(uint64_t a1, int a2, int a3, unint64_t a4, float a5)
{
  unint64_t v5;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;

  if (!a1)
    acCrossClassSuppression();
  v5 = a4;
  if ((_DWORD)a4)
  {
    bmHeapsort(a1, a4, 0x24uLL, (int (*)(uint64_t, uint64_t))acDetRectClassCompare);
    v10 = 0;
    v11 = a1 + 36;
    v12 = 1;
    do
    {
      v13 = v5;
      v22 = v12;
      v23 = v11;
      v21 = v10 + 1;
      if (v10 + 1 >= v5)
      {
        v5 = v10 + 1;
      }
      else
      {
        v14 = a1 + 36 * v10;
        v5 = v10 + 1;
        do
        {
          if (*(_DWORD *)(v14 + 16) != a2
            || *(_DWORD *)(v11 + 16) != a3
            || (acDetRectOverlap((float *)v14, (float *)v11), v15 <= a5))
          {
            v16 = v5;
            if (v12 < v5)
              acCrossClassSuppression();
            v5 = (v5 + 1);
            v17 = a1 + 36 * v16;
            v18 = *(_OWORD *)v11;
            v19 = *(_OWORD *)(v11 + 16);
            *(_DWORD *)(v17 + 32) = *(_DWORD *)(v11 + 32);
            *(_OWORD *)v17 = v18;
            *(_OWORD *)(v17 + 16) = v19;
          }
          ++v12;
          v11 += 36;
        }
        while (v13 != (_DWORD)v12);
      }
      v12 = v22 + 1;
      v11 = v23 + 36;
      v10 = v21;
    }
    while (v21 < v5);
  }
  return v5;
}

unint64_t acNonMaxSuppressionSmallbox(uint64_t a1, unint64_t a2, float a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (!a1)
    acNonMaxSuppressionSmallbox();
  v3 = a2;
  if ((_DWORD)a2)
  {
    bmHeapsort(a1, a2, 0x24uLL, (int (*)(uint64_t, uint64_t))acDetRectScoreCompare);
    v6 = 0;
    v7 = a1 + 36;
    v8 = 1;
    do
    {
      v9 = v6 + 1;
      v10 = v3;
      if (v6 + 1 >= v3)
      {
        v3 = v6 + 1;
      }
      else
      {
        v11 = a1 + 36 * v6;
        v12 = v7;
        v13 = v8;
        v3 = v6 + 1;
        do
        {
          if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v12 + 16)
            || (acDetRectOverlapSmallbox((float *)v11, (float *)v12), v14 <= a3))
          {
            v15 = v3;
            if (v13 < v3)
              acNonMaxSuppressionSmallbox();
            v3 = (v3 + 1);
            v16 = a1 + 36 * v15;
            v17 = *(_OWORD *)v12;
            v18 = *(_OWORD *)(v12 + 16);
            *(_DWORD *)(v16 + 32) = *(_DWORD *)(v12 + 32);
            *(_OWORD *)v16 = v17;
            *(_OWORD *)(v16 + 16) = v18;
          }
          ++v13;
          v12 += 36;
        }
        while (v10 != (_DWORD)v13);
      }
      ++v8;
      v7 += 36;
      v6 = v9;
    }
    while (v9 < v3);
  }
  return v3;
}

uint64_t acRemoveOverlapBoxes(__int128 *a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, float a5)
{
  unsigned __int8 *v5;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t result;
  __int128 *v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  if (a2 > a4)
    acRemoveOverlapBoxes();
  if (!a2)
    return 0;
  v5 = a3;
  v7 = a2;
  bzero(a3, a2);
  v8 = 0;
  v9 = (float *)a1 + 9;
  v10 = 1;
  do
  {
    v11 = v8 + 1;
    if (v8 + 1 < v7)
    {
      v12 = (float *)a1 + 9 * v8;
      v13 = v9;
      v14 = v10;
      do
      {
        acDetRectOverlap(v12, v13);
        if (v15 > a5)
        {
          if (v12[6] <= v13[6])
            v16 = v8;
          else
            v16 = v14;
          v5[v16] = 1;
        }
        ++v14;
        v13 += 9;
      }
      while ((_DWORD)v7 != (_DWORD)v14);
    }
    ++v10;
    v9 += 9;
    ++v8;
  }
  while (v11 != v7);
  result = 0;
  v18 = a1;
  do
  {
    if (!*v5++)
    {
      v20 = (uint64_t)a1 + 36 * result;
      v21 = *v18;
      v22 = v18[1];
      *(_DWORD *)(v20 + 32) = *((_DWORD *)v18 + 8);
      *(_OWORD *)v20 = v21;
      *(_OWORD *)(v20 + 16) = v22;
      result = (result + 1);
    }
    v18 = (__int128 *)((char *)v18 + 36);
    --v7;
  }
  while (v7);
  return result;
}

BOOL acCheckOverlapBox(float *a1, unsigned int a2, float *a3, float a4)
{
  float v8;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;

  if (!a2)
    return 0;
  acDetRectOverlap(a1, a3);
  if (v8 > a4)
    return 1;
  v10 = a1 + 9;
  v11 = 1;
  do
  {
    v12 = v11;
    if (a2 == v11)
      break;
    acDetRectOverlap(v10, a3);
    v11 = v12 + 1;
    v10 += 9;
  }
  while (v13 <= a4);
  return v12 < a2;
}

uint64_t ft::Detector::Detector(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  ft::DetectorInternals *v6;
  _QWORD *v7;
  void **v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  void *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  std::runtime_error *exception;
  void *v30[2];
  int v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  char v39;
  char v40;
  void *v41[2];
  void *v42[2];
  int v43;
  void *__p;
  char v45;
  void *v46[2];
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int16 v51;
  char v52;
  void *v53[2];
  char *v54;
  char *v55[2];
  uint64_t v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66[24];
  char v67[24];
  char v68[24];
  char v69[24];
  char v70[24];
  char v71[15];
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 32) = &unk_24C55E920;
  *(_DWORD *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v6 = (ft::DetectorInternals *)operator new();
  ft::DetectorInternals::DetectorInternals(v6);
  *(_QWORD *)(a1 + 88) = v6;
  HIBYTE(v54) = 8;
  strcpy((char *)v53, "logits_0");
  HIBYTE(v56) = 8;
  strcpy((char *)v55, "logits_1");
  v58 = 8;
  strcpy((char *)v57, "logits_2");
  v60 = 8;
  strcpy((char *)v59, "logits_3");
  v62 = 8;
  strcpy((char *)v61, "logits_4");
  v64 = 8;
  strcpy((char *)v63, "logits_5");
  strcpy(v66, "\toffsets_1");
  strcpy((char *)v65, "offsets_0");
  strcpy(v67, "\toffsets_2");
  strcpy(v68, "\toffsets_3");
  strcpy(v69, "\toffsets_4");
  strcpy(v70, "\toffsets_5");
  strcpy(v71, "\tlogits_roll_0");
  v72 = 13;
  v74 = 13;
  strcpy((char *)v73, "logits_roll_1");
  v76 = 13;
  strcpy((char *)v75, "logits_roll_2");
  v78 = 13;
  strcpy((char *)v77, "logits_roll_3");
  v80 = 13;
  strcpy((char *)v79, "logits_roll_4");
  v82 = 13;
  strcpy((char *)v81, "logits_roll_5");
  v84 = 12;
  strcpy((char *)v83, "logits_yaw_0");
  v86 = 12;
  strcpy((char *)v85, "logits_yaw_1");
  v88 = 12;
  strcpy((char *)v87, "logits_yaw_2");
  v90 = 12;
  strcpy((char *)v89, "logits_yaw_3");
  v92 = 12;
  strcpy((char *)v91, "logits_yaw_4");
  v94 = 12;
  strcpy((char *)v93, "logits_yaw_5");
  std::vector<std::string>::vector[abi:ne180100](v30, (uint64_t)v53, 0x18uLL);
  v33 = 0;
  v34 = 0;
  v35 = -4294901744;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v48 = 0;
  v49 = 0x3B80808100000000;
  v51 = 0;
  v52 = 0;
  v46[0] = (void *)0x6567616D69;
  v47 = 5;
  v50 = 1;
  *(_OWORD *)v41 = 0u;
  *(_OWORD *)v42 = 0u;
  v43 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,espresso_simple_image_preprocessing_params_t> const&>((uint64_t)v41, (uint64_t)v46, (uint64_t)v46);
  v45 = 0;
  LOBYTE(__p) = 0;
  *(_QWORD *)(a1 + 96) = &unk_24C55E8B8;
  v7 = operator new(0x128uLL);
  v7[2] = 0;
  *v7 = &unk_24C55EB60;
  v7[1] = 0;
  *(_QWORD *)(a1 + 104) = ik::core::EspressoNetState::EspressoNetState((uint64_t)(v7 + 3), a2, (ik::EspressoConfig *)v30);
  *(_QWORD *)(a1 + 112) = v7;
  if (v45 < 0)
    operator delete(__p);
  v8 = (void **)v42[0];
  if (v42[0])
  {
    do
    {
      v13 = (void **)*v8;
      if (*((char *)v8 + 39) < 0)
        operator delete(v8[2]);
      operator delete(v8);
      v8 = v13;
    }
    while (v13);
  }
  v9 = v41[0];
  v41[0] = 0;
  if (v9)
    operator delete(v9);
  v10 = (void **)v30[0];
  if (v30[0])
  {
    v11 = (void **)v30[1];
    v12 = v30[0];
    if (v30[1] != v30[0])
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = v30[0];
    }
    v30[1] = v10;
    operator delete(v12);
  }
  if (v47 < 0)
  {
    operator delete(v46[0]);
    if ((v94 & 0x80000000) == 0)
    {
LABEL_24:
      if ((v92 & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_69;
    }
  }
  else if ((v94 & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v93[0]);
  if ((v92 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v90 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v91[0]);
  if ((v90 & 0x80000000) == 0)
  {
LABEL_26:
    if ((v88 & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_71;
  }
LABEL_70:
  operator delete(v89[0]);
  if ((v88 & 0x80000000) == 0)
  {
LABEL_27:
    if ((v86 & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_72;
  }
LABEL_71:
  operator delete(v87[0]);
  if ((v86 & 0x80000000) == 0)
  {
LABEL_28:
    if ((v84 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(v85[0]);
  if ((v84 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v82 & 0x80000000) == 0)
      goto LABEL_30;
    goto LABEL_74;
  }
LABEL_73:
  operator delete(v83[0]);
  if ((v82 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v80 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_75;
  }
LABEL_74:
  operator delete(v81[0]);
  if ((v80 & 0x80000000) == 0)
  {
LABEL_31:
    if ((v78 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_76;
  }
LABEL_75:
  operator delete(v79[0]);
  if ((v78 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v76 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_77;
  }
LABEL_76:
  operator delete(v77[0]);
  if ((v76 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v74 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_78;
  }
LABEL_77:
  operator delete(v75[0]);
  if ((v74 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v72 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_79;
  }
LABEL_78:
  operator delete(v73[0]);
  if ((v72 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v71[0] & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_80;
  }
LABEL_79:
  operator delete(*(void **)&v71[1]);
  if ((v71[0] & 0x80000000) == 0)
  {
LABEL_36:
    if ((v70[0] & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_81;
  }
LABEL_80:
  operator delete(*(void **)&v70[1]);
  if ((v70[0] & 0x80000000) == 0)
  {
LABEL_37:
    if ((v69[0] & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(*(void **)&v69[1]);
  if ((v69[0] & 0x80000000) == 0)
  {
LABEL_38:
    if ((v68[0] & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(*(void **)&v68[1]);
  if ((v68[0] & 0x80000000) == 0)
  {
LABEL_39:
    if ((v67[0] & 0x80000000) == 0)
      goto LABEL_40;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(*(void **)&v67[1]);
  if ((v67[0] & 0x80000000) == 0)
  {
LABEL_40:
    if ((v66[0] & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_85;
  }
LABEL_84:
  operator delete(*(void **)&v66[1]);
  if ((v66[0] & 0x80000000) == 0)
  {
LABEL_41:
    if ((v64 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_86;
  }
LABEL_85:
  operator delete(v65[0]);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v62 & 0x80000000) == 0)
      goto LABEL_43;
    goto LABEL_87;
  }
LABEL_86:
  operator delete(v63[0]);
  if ((v62 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v60 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v61[0]);
  if ((v60 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v58 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_89;
  }
LABEL_88:
  operator delete(v59[0]);
  if ((v58 & 0x80000000) == 0)
  {
LABEL_45:
    if ((SHIBYTE(v56) & 0x80000000) == 0)
      goto LABEL_46;
LABEL_90:
    operator delete(v55[0]);
    if ((SHIBYTE(v54) & 0x80000000) == 0)
      goto LABEL_47;
    goto LABEL_91;
  }
LABEL_89:
  operator delete(v57[0]);
  if (SHIBYTE(v56) < 0)
    goto LABEL_90;
LABEL_46:
  if ((SHIBYTE(v54) & 0x80000000) == 0)
    goto LABEL_47;
LABEL_91:
  operator delete(v53[0]);
LABEL_47:
  v14 = *(_QWORD *)(a1 + 88);
  *(_DWORD *)(v14 + 40) = 0;
  v15 = *(_QWORD *)(v14 + 44);
  v16.i64[0] = v15;
  v16.i64[1] = HIDWORD(v15);
  *(int8x16_t *)v30 = vextq_s8(v16, v16, 8uLL);
  v31 = 1111970369;
  v32 = 1;
  v33 = 0;
  LOBYTE(v35) = 0;
  ik::PixelBufferTensor::PixelBufferTensor((ik::PixelBufferTensor *)v53, (uint64_t)v30);
  *(_DWORD *)(a1 + 40) = v53[1];
  if ((void **)(a1 + 32) != v53)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 48), v54, v55[0], (v55[0] - v54) >> 3);
  v18 = v56;
  v17 = v57[0];
  if (v57[0])
  {
    v19 = (unint64_t *)((char *)v57[0] + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(std::__shared_weak_count **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = v18;
  *(_QWORD *)(a1 + 80) = v17;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v53[0] = &unk_24C55EA38;
  v24 = (std::__shared_weak_count *)v57[0];
  if (v57[0])
  {
    v25 = (unint64_t *)((char *)v57[0] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v54)
  {
    v55[0] = v54;
    operator delete(v54);
  }
  v27 = *(void **)(*(_QWORD *)(a1 + 72) + 8);
  v53[1] = v27;
  v54 = 0;
  if (CVPixelBufferLockBaseAddress((CVPixelBufferRef)v27, 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
    goto LABEL_94;
  }
  v53[0] = &unk_24C55E940;
  FTFillPixelBufferWithColor(*(__CVBuffer **)(*(_QWORD *)(a1 + 72) + 8), 0);
  if (CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v27, 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
LABEL_94:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return a1;
}

void sub_20CC85698(_Unwind_Exception *a1)
{
  _QWORD *v1;
  ik::PixelBufferTensor *v2;
  AcDetNode ****v3;
  ik::EspressoNet *v4;
  void *v5;
  _QWORD *v7;

  __cxa_free_exception(v5);
  ik::EspressoNet::~EspressoNet(v4);
  std::unique_ptr<ft::DetectorInternals>::~unique_ptr[abi:ne180100](v3);
  ik::PixelBufferTensor::~PixelBufferTensor(v2);
  v7 = (_QWORD *)v1[3];
  if (v7 == v1)
  {
    (*(void (**)(_QWORD *))(*v1 + 32))(v1);
    _Unwind_Resume(a1);
  }
  if (!v7)
    _Unwind_Resume(a1);
  (*(void (**)(_QWORD))(*v7 + 40))(v1[3]);
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

ik::PixelBufferTensor *ik::PixelBufferTensor::PixelBufferTensor(ik::PixelBufferTensor *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v6;
  const void *v7;
  CFNumberRef v8;
  CVReturn v9;
  __CVBuffer *v10;
  std::runtime_error *exception;
  std::runtime_error *v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  std::string v17;
  __CFDictionary *v18;
  CVPixelBufferRef pixelBufferOut;

  if (!*(_QWORD *)a2 || !*(_QWORD *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid dimensions requested for CVPixelBuffer creation.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  pixelBufferOut = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v18 = Mutable;
  if (*(_BYTE *)(a2 + 20))
  {
    v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v7 = (const void *)*MEMORY[0x24BDC5668];
    v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    CFDictionarySetValue(Mutable, v7, v6);
    if (v6)
      CFRelease(v6);
  }
  if (*(_BYTE *)(a2 + 32))
  {
    v8 = CFNumberCreate(v4, kCFNumberSInt32Type, (const void *)(a2 + 24));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BDC55D0], v8);
    CFRelease(v8);
  }
  v9 = CVPixelBufferCreate(v4, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), Mutable, &pixelBufferOut);
  if (v9)
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, v9);
    v14 = std::string::insert(&v16, 0, "Failed to create CVPixelBuffer. Status = ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v13, &v17);
    __cxa_throw(v13, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v10 = pixelBufferOut;
  if (Mutable)
    CFRelease(Mutable);
  ik::PixelBufferTensor::PixelBufferTensor(a1, v10);
  CVPixelBufferRelease(*(CVPixelBufferRef *)(*((_QWORD *)a1 + 5) + 8));
  return a1;
}

void sub_20CC85CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,const void *a23)
{
  void *v23;
  int v24;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      ik::Dict::~Dict(&a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  ik::Dict::~Dict(&a23);
  _Unwind_Resume(a1);
}

void ik::PixelBufferTensor::~PixelBufferTensor(ik::PixelBufferTensor *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_24C55EA38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      return;
  }
  *((_QWORD *)this + 3) = v5;
  operator delete(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_24C55EA38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_9;
  }
  *((_QWORD *)this + 3) = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x212B93F04);
}

void ik::PixelBufferScopeLock::~PixelBufferScopeLock(ik::PixelBufferScopeLock *this)
{
  std::runtime_error *exception;

  *(_QWORD *)this = &unk_24C55EA18;
  if (CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 1), *((_QWORD *)this + 2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

{
  std::runtime_error *exception;

  *(_QWORD *)this = &unk_24C55EA18;
  if (CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 1), *((_QWORD *)this + 2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  JUMPOUT(0x212B93F04);
}

void sub_20CC85E74(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ik::EspressoNet::~EspressoNet(ik::EspressoNet *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_24C55E8B8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_24C55E8B8;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x212B93F04);
}

AcDetNode ****std::unique_ptr<ft::DetectorInternals>::~unique_ptr[abi:ne180100](AcDetNode ****a1)
{
  AcDetNode ***v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*v2)
      AcDetDestroy(*v2);
    MEMORY[0x212B93F04](v2, 0x1020C405B838537);
  }
  return a1;
}

void ft::Detector::~Detector(ft::Detector *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  AcDetNode ***v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  ft::Detector *v10;
  uint64_t v11;

  *((_QWORD *)this + 12) = &unk_24C55E8B8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (AcDetNode ***)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (AcDetNode ***)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (!v5)
      goto LABEL_9;
  }
  if (*v5)
    AcDetDestroy(*v5);
  MEMORY[0x212B93F04](v5, 0x1020C405B838537);
LABEL_9:
  *((_QWORD *)this + 4) = &unk_24C55EA38;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (void *)*((_QWORD *)this + 6);
  if (v9)
  {
    *((_QWORD *)this + 7) = v9;
    operator delete(v9);
  }
  v10 = (ft::Detector *)*((_QWORD *)this + 3);
  if (v10 == this)
  {
    v11 = 4;
    v10 = this;
  }
  else
  {
    if (!v10)
      return;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
}

uint64_t ft::Detector::Detect@<X0>(ft::Detector *this@<X0>, CVPixelBufferRef pixelBuffer@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  size_t Width;
  size_t Height;
  uint64_t v9;
  double v10;
  double v11;
  uint64x2_t v12;
  float64x2_t v13;
  double v14;
  BOOL v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 **v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  void **v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  float *v41;
  unsigned int *v42;
  unsigned int v43;
  std::runtime_error *exception;
  float64x2_t v46;
  int v47;
  void *v48[4];
  int v49;
  void *__p[2];
  __int128 v51;
  int v52;
  uint64_t v53;
  int v54;
  void *v55[2];
  double v56;
  double v57;
  void *v58;
  void *v59;
  std::__shared_weak_count *v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 11);
  *(_DWORD *)(v6 + 4368) = 0;
  *(_DWORD *)(v6 + 5292) = 0;
  *(_DWORD *)(v6 + 5616) = 0;
  *(_BYTE *)(v6 + 4148) = 0;
  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  v9 = *((_QWORD *)this + 11);
  *(_DWORD *)(v9 + 32) = Width;
  *(_DWORD *)(v9 + 36) = Height;
  v10 = (float)CVPixelBufferGetWidth(*(CVPixelBufferRef *)(*((_QWORD *)this + 9) + 8));
  v11 = (float)CVPixelBufferGetHeight(*(CVPixelBufferRef *)(*((_QWORD *)this + 9) + 8));
  v12.i64[0] = Width;
  v12.i64[1] = Height;
  v13 = vcvtq_f64_u64(v12);
  v14 = vmuld_lane_f64(v10, v13, 1);
  v15 = v11 * v13.f64[0] > v14;
  v46 = v13;
  v16 = round(v14 / v13.f64[0]);
  v17 = round(v11 * v13.f64[0] / v13.f64[1]);
  if (v15)
  {
    v11 = v16;
    v17 = v10;
  }
  v18 = *(_QWORD *)(*((_QWORD *)this + 9) + 8);
  v55[0] = 0;
  v55[1] = 0;
  v56 = v17;
  v57 = v11;
  __p[0] = pixelBuffer;
  *(_QWORD *)&v61 = v18;
  v19 = *((_QWORD *)this + 3);
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **, __int128 *, void **))(*(_QWORD *)v19 + 48))(v19, __p, &v61, v55);
  *(_OWORD *)__p = 0u;
  v51 = 0u;
  v52 = 1065353216;
  std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<char const(&)[6],ik::PixelBufferTensor &,0>((uint64_t)v55, "image", (uint64_t)this + 32);
  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::Tensor> const&>((uint64_t)v48, (uint64_t)v55, (__int128 *)v55);
  v20 = *((_QWORD *)this + 13);
  v22 = *(_QWORD *)(v20 + 56);
  v23 = *(_QWORD *)(v20 + 64);
  v21 = (__int128 **)(v20 + 56);
  if (v22 == v23)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Model has no pre-declared outputs.");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24C55E8F8;
  }
  ik::EspressoNet::Predict((uint64_t)this + 96, (uint64_t)v48, v21, (uint64_t)&v61);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::clear(__p);
  v24 = (void *)v61;
  *(_QWORD *)&v61 = 0;
  v25 = __p[0];
  __p[0] = v24;
  if (v25)
    operator delete(v25);
  v26 = *((_QWORD *)&v61 + 1);
  *((_QWORD *)&v61 + 1) = 0;
  v52 = v63;
  __p[1] = (void *)v26;
  v51 = v62;
  if (*((_QWORD *)&v62 + 1))
  {
    v27 = *(_QWORD *)(v62 + 8);
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v27 >= v26)
        v27 %= v26;
    }
    else
    {
      v27 &= v26 - 1;
    }
    *((_QWORD *)__p[0] + v27) = &v51;
    v62 = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)&v61);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)v48);
  v57 = COERCE_DOUBLE(&unk_24C55EA38);
  v28 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  v31 = 0;
  v32 = *((_QWORD *)this + 13);
  do
  {
    v33 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(__p, *(_QWORD *)(v32 + 56) + v31 * 8);
    if (!v33)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    ft::BmBufferFromTensor<float>((uint64_t)(v33 + 5), (uint64_t)&v61);
    v34 = &v55[v31];
    *(_OWORD *)v34 = v61;
    v34[2] = (void *)v62;
    v31 += 3;
  }
  while (v31 != 72);
  *(_QWORD *)&v61 = v55;
  *(_QWORD *)&v62 = 0;
  *((_QWORD *)&v61 + 1) = 0;
  v54 = 0;
  v53 = 24;
  v35 = *((_QWORD *)this + 11);
  v48[0] = operator new(0x20uLL);
  *(_OWORD *)&v48[1] = xmmword_20CCAAE70;
  strcpy((char *)v48[0], "Detector post processing");
  AcDetPostProcessMultiNetOutputs(*(_QWORD *)v35);
  v47 = v36;
  ft::EnsureOK((uint64_t)v48, &v47);
  if (SHIBYTE(v48[2]) < 0)
  {
    operator delete(v48[0]);
    v37 = *(unsigned int *)(v35 + 4368);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (!(_DWORD)v37)
      return std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)__p);
  }
  else
  {
    v37 = *(unsigned int *)(v35 + 4368);
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    if (!(_DWORD)v37)
      return std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)__p);
  }
  v38 = (char *)operator new(48 * v37);
  *a3 = v38;
  a3[1] = v38;
  v39 = &v38[48 * v37];
  a3[2] = v39;
  v40 = v38;
  do
  {
    *(_DWORD *)v40 = 1;
    *(_OWORD *)(v40 + 4) = 0uLL;
    *(_OWORD *)(v40 + 20) = 0uLL;
    *(_QWORD *)(v40 + 36) = 0xBF80000000000000;
    v40 += 48;
  }
  while (v40 != v39);
  a3[1] = v39;
  v41 = (float *)(v38 + 40);
  v42 = (unsigned int *)(v35 + 4396);
  do
  {
    *((float64x2_t *)v41 - 2) = vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(v42 - 4)), v46);
    *((float64x2_t *)v41 - 1) = vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)(v42 - 2)), v46);
    v43 = *v42;
    v42 += 23;
    *v41 = (float)v43;
    v41 += 12;
    --v37;
  }
  while (v37);
  return std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)__p);
}

void sub_20CC8652C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;

  __cxa_free_exception(v27);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)&a13);
  std::pair<std::string const,ik::Tensor>::~pair((uint64_t)&a27);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_20CC86574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0)
  {
    operator delete(__p);
    std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20CC865A0);
}

void sub_20CC86598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,ik::Tensor>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)(a1 + 24) = &unk_24C55EA38;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(void **)(a1 + 40);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
LABEL_6:
    *(_QWORD *)(a1 + 48) = v5;
    operator delete(v5);
  }
LABEL_7:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ft::BmBufferFromTensor<float>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  std::runtime_error *exception;

  if (*(_DWORD *)(a1 + 8) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    goto LABEL_6;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
  v5 = *(_DWORD **)(a1 + 16);
  if (*(_QWORD *)(a1 + 24) - (_QWORD)v5 != 32)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Expected a rank 4 NCHW tensor.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v6 = v5[2];
  v7 = v5[4];
  v8 = v5[6];
  *(_QWORD *)a2 = result;
  *(_DWORD *)(a2 + 8) = v7 * v6;
  *(_DWORD *)(a2 + 12) = v8;
  *(_DWORD *)(a2 + 16) = 4 * v8;
  *(_DWORD *)(a2 + 20) = 6;
  return result;
}

void sub_20CC86710(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CC86724(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ft::EnsureOK(uint64_t a1, int *a2)
{
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v4 = std::string::append(&v11, " / internal code = ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v10, *a2);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v10;
    else
      v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v12, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

{
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v4 = std::string::append(&v11, " / internal code = ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v10, *a2);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v10;
    else
      v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v12, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

void sub_20CC86830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
  {
    operator delete(*(void **)(v28 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if (a20 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    __cxa_free_exception(v26);
    goto LABEL_12;
  }
LABEL_10:
  if (!v27)
    goto LABEL_12;
  goto LABEL_11;
}

uint64_t ft::Detector::GetEspressoPlan(ft::Detector *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 13) + 24);
}

void ik::Tensor::~Tensor(ik::Tensor *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_24C55EA38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      return;
  }
  *((_QWORD *)this + 3) = v5;
  operator delete(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_24C55EA38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_9;
  }
  *((_QWORD *)this + 3) = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ik::core::EspressoNetState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ik::core::EspressoNetState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EB60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ik::core::EspressoNetState>::__on_zero_shared(uint64_t a1)
{
  ik::core::EspressoNetState::~EspressoNetState((ik::core::EspressoNetState *)(a1 + 24));
}

uint64_t ik::core::EspressoNetState::EspressoNetState(uint64_t a1, __int128 *a2, ik::EspressoConfig *a3)
{
  uint64_t *v6;
  __int128 v7;
  uint64_t context;
  uint64_t plan;
  int v10;
  std::string::size_type v11;
  int v12;
  size_t size;
  unint64_t v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  std::string *p_p;
  const std::string::value_type *v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *i;
  std::runtime_error *exception;
  int v28;
  std::string __dst;
  std::string __p;
  __int128 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
  }
  ik::EspressoConfig::EspressoConfig((ik::EspressoConfig *)(a1 + 56), a3);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  if (!*((_BYTE *)a3 + 28) && qword_253EC4C48 != -1)
    dispatch_once(&qword_253EC4C48, &__block_literal_global_0);
  context = espresso_create_context();
  *v6 = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso context.");
    goto LABEL_63;
  }
  plan = espresso_create_plan();
  *(_QWORD *)(a1 + 24) = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso plan.");
LABEL_63:
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24C55E8F8;
  }
  if (*((_BYTE *)a3 + 48)
    && (LODWORD(__dst.__r_.__value_.__l.__data_) = espresso_plan_set_priority(),
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20,
        strcpy((char *)&__p, "Setting plan priorty"),
        ik::VerifyEspressoStatus((int *)&__dst, (uint64_t *)&__p),
        SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_12:
    __p = *(std::string *)a2;
    goto LABEL_15;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_15:
  v10 = *((char *)a3 + 135);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)a3 + 135);
  else
    v11 = *((_QWORD *)a3 + 15);
  if (!v11)
    goto LABEL_40;
  v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v14 = size + 1;
  if (size + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = size + 1;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_29;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 1;
  if (size)
  {
LABEL_29:
    if (v12 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(p_dst, p_p, size);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + size) = 58;
  if (v10 >= 0)
    v19 = (char *)a3 + 112;
  else
    v19 = (const std::string::value_type *)*((_QWORD *)a3 + 14);
  v20 = std::string::append(&__dst, v19, v11);
  v21 = v20->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v31 = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v21;
  __p.__r_.__value_.__l.__size_ = v31;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v31 + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_40:
  LODWORD(v31) = espresso_plan_add_network();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_20CCAAE70;
  strcpy(__dst.__r_.__value_.__l.__data_, "Loading espresso Network");
  ik::VerifyEspressoStatus((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*((_BYTE *)a3 + 64))
      goto LABEL_45;
  }
  else if (!*((_BYTE *)a3 + 64))
  {
    goto LABEL_45;
  }
  LODWORD(v31) = espresso_plan_share_intermediate_buffer();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_20CCAAE80;
  strcpy(__dst.__r_.__value_.__l.__data_, "Sharing intermediate buffer");
  ik::VerifyEspressoStatus((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v24 = *(_QWORD *)a3;
    v23 = *((_QWORD *)a3 + 1);
    if (*(_QWORD *)a3 == v23)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_45:
  v24 = *(_QWORD *)a3;
  v23 = *((_QWORD *)a3 + 1);
  if (*(_QWORD *)a3 == v23)
    goto LABEL_51;
  do
  {
LABEL_48:
    LODWORD(v31) = espresso_network_declare_output();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_20CCAAE70;
    strcpy(__dst.__r_.__value_.__l.__data_, "Declaring network output");
    ik::VerifyEspressoStatus((int *)&v31, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v24 += 24;
  }
  while (v24 != v23);
LABEL_51:
  for (i = (uint64_t *)*((_QWORD *)a3 + 11); i; i = (uint64_t *)*i)
  {
    v31 = *(_OWORD *)(i + 5);
    v32 = *((_DWORD *)i + 14);
    v28 = espresso_set_image_preprocessing_params();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_20CCAAE90;
    strcpy(__dst.__r_.__value_.__l.__data_, "Setting preprocessing params");
    ik::VerifyEspressoStatus(&v28, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  LODWORD(v31) = espresso_plan_build();
  strcpy((char *)&__dst, "Building espresso plan");
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 22;
  ik::VerifyEspressoStatus((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return a1;
LABEL_60:
    operator delete(__p.__r_.__value_.__l.__data_);
    return a1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_60;
  return a1;
}

void sub_20CC871AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  void **v31;

  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table(v30);
  ik::EspressoConfig::~EspressoConfig(a12);
  if (*(char *)(v29 + 55) < 0)
    operator delete(*v31);
  _Unwind_Resume(a1);
}

ik::EspressoConfig *ik::EspressoConfig::EspressoConfig(ik::EspressoConfig *this, const ik::EspressoConfig *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v4 = *(_OWORD *)((char *)a2 + 24);
  v5 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 49) = *(_OWORD *)((char *)a2 + 49);
  *(_OWORD *)((char *)this + 40) = v5;
  *(_OWORD *)((char *)this + 24) = v4;
  std::unordered_map<std::string,espresso_simple_image_preprocessing_params_t>::unordered_map((uint64_t)this + 72, (uint64_t)a2 + 72);
  v6 = (std::string *)((char *)this + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_20CC87358(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void *v8;

  v4 = (void **)v1[11];
  if (v4)
    ft::Detector::Detector(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    v6 = (void **)*v1;
    if (!*v1)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = (void **)*v1;
    if (!*v1)
      goto LABEL_5;
  }
  v7 = (void **)v1[1];
  v8 = v6;
  if (v7 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0)
        operator delete(*(v7 - 3));
      v7 -= 3;
    }
    while (v7 != v6);
    v8 = *v1;
  }
  v1[1] = v6;
  operator delete(v8);
  _Unwind_Resume(exception_object);
}

uint64_t ik::VerifyEspressoStatus(int *a1, uint64_t *a2)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  result = *a1;
  if ((_DWORD)result)
  {
    ik::LogEspressoError(result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v5 = std::string::append(&v14, " [espresso error: ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, *a1);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v13;
    else
      v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v15, (const std::string::value_type *)v7, size);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v16, "]");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24C55E8F8;
  }
  return result;
}

void sub_20CC87520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (std::string *)&v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_20CC876EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_20CC87700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t std::unordered_map<std::string,espresso_simple_image_preprocessing_params_t>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,espresso_simple_image_preprocessing_params_t> const&>(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_20CC878E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,espresso_buffer_t>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_20CC878FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<std::string,espresso_buffer_t>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_simple_image_preprocessing_params_t>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,espresso_simple_image_preprocessing_params_t> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x40uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = (std::string *)(v25 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *((_DWORD *)v25 + 14) = *(_DWORD *)(a3 + 40);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20CC87D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20CC87D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,espresso_buffer_t>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2ikL28IsAppleNeuralEngineAvailableEv_block_invoke()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  _MergedGlobals_1 = result;
  return result;
}

void ik::InferenceError::~InferenceError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212B93F04);
}

void ik::LogEspressoError(uint64_t a1, uint64_t *a2)
{
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ik::LogEspressoError(a2);
}

{
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    ik::LogEspressoError(a2);
}

void ik::core::EspressoNetState::~EspressoNetState(ik::core::EspressoNetState *this)
{
  if (*((_QWORD *)this + 3))
    espresso_plan_destroy();
  if (*((_QWORD *)this + 2))
    espresso_context_destroy();
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)this + 232);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)this + 192);
  ik::EspressoConfig::~EspressoConfig((void **)this + 7);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

void ik::EspressoConfig::~EspressoConfig(void **this)
{
  void **v2;
  void *v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;

  if (*((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    v2 = (void **)this[11];
    if (!v2)
      goto LABEL_5;
  }
  else
  {
    v2 = (void **)this[11];
    if (!v2)
      goto LABEL_5;
  }
  do
  {
    v7 = (void **)*v2;
    if (*((char *)v2 + 39) < 0)
      operator delete(v2[2]);
    operator delete(v2);
    v2 = v7;
  }
  while (v7);
LABEL_5:
  v3 = this[9];
  this[9] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void **)*this;
  if (*this)
  {
    v5 = (void **)this[1];
    v6 = *this;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *this;
    }
    this[1] = v4;
    operator delete(v6);
  }
}

void ik::Dict::~Dict(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

ik::PixelBufferTensor *ik::PixelBufferTensor::PixelBufferTensor(ik::PixelBufferTensor *this, __CVBuffer *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  __CVBuffer *v5;
  int v6;
  __CVBuffer *v7;
  size_t Height;
  size_t Width;
  __CVBuffer *v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  char *v14;
  char *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  CVPixelBufferRef pixelBuffer;

  pixelBuffer = a2;
  std::allocate_shared[abi:ne180100]<ik::core::PixelBufferStorage,std::allocator<ik::core::PixelBufferStorage>,__CVBuffer *&,void>(&pixelBuffer, &v26);
  v4 = v26;
  v3 = v27;
  v28 = v26;
  v29 = v27;
  v26 = 0;
  v27 = 0;
  v6 = ik::core::DataTypeFromPixelBuffer(pixelBuffer, v5);
  v7 = pixelBuffer;
  Height = CVPixelBufferGetHeight(pixelBuffer);
  Width = CVPixelBufferGetWidth(v7);
  v11 = ik::core::ChannelCountFromPixelBuffer(v7, v10);
  ik::TensorShape::TensorShape<unsigned long,unsigned long,unsigned long>(&v24, Height, Width, v11);
  *(_QWORD *)this = &unk_24C55EA38;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v12 = v24;
  v13 = v25 - v24;
  if (v25 != v24)
  {
    if (v13 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v25 - v24);
    *((_QWORD *)this + 2) = v14;
    *((_QWORD *)this + 3) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *((_QWORD *)this + 4) = v15;
    memcpy(v14, v12, v13);
    *((_QWORD *)this + 3) = v15;
  }
  *((_QWORD *)this + 5) = v4;
  *((_QWORD *)this + 6) = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (v12)
  {
    v25 = v12;
    operator delete(v12);
  }
  if (v3)
  {
    v18 = (unint64_t *)&v3->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)this = &unk_24C55E920;
  return this;
}

void sub_20CC8813C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t ik::core::DataTypeFromPixelBuffer(ik::core *this, __CVBuffer *a2)
{
  signed int PixelFormatType;
  int v3;
  unsigned int v5;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        v3 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369)
      return 0;
    v3 = 1278226488;
LABEL_10:
    if (PixelFormatType == v3)
      return 0;
LABEL_15:
    v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v9, v5);
    v7 = std::string::insert(&v9, 0, "Unsupported CVPixelBuffer type: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      goto LABEL_15;
  }
  else if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
    goto LABEL_10;
  }
  return 1;
}

{
  signed int PixelFormatType;
  int v3;
  unsigned int v5;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        v3 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369)
      return 0;
    v3 = 1278226488;
LABEL_10:
    if (PixelFormatType == v3)
      return 0;
LABEL_15:
    v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v9, v5);
    v7 = std::string::insert(&v9, 0, "Unsupported CVPixelBuffer type: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      goto LABEL_15;
  }
  else if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
    goto LABEL_10;
  }
  return 1;
}

{
  signed int PixelFormatType;
  int v3;
  unsigned int v5;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        v3 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369)
      return 0;
    v3 = 1278226488;
LABEL_10:
    if (PixelFormatType == v3)
      return 0;
LABEL_15:
    v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v9, v5);
    v7 = std::string::insert(&v9, 0, "Unsupported CVPixelBuffer type: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      goto LABEL_15;
  }
  else if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
    goto LABEL_10;
  }
  return 1;
}

{
  signed int PixelFormatType;
  int v3;
  unsigned int v5;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        v3 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369)
      return 0;
    v3 = 1278226488;
LABEL_10:
    if (PixelFormatType == v3)
      return 0;
LABEL_15:
    v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v9, v5);
    v7 = std::string::insert(&v9, 0, "Unsupported CVPixelBuffer type: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      goto LABEL_15;
  }
  else if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
    goto LABEL_10;
  }
  return 1;
}

void sub_20CC88320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

CVPixelBufferRef std::allocate_shared[abi:ne180100]<ik::core::PixelBufferStorage,std::allocator<ik::core::PixelBufferStorage>,__CVBuffer *&,void>@<X0>(__CVBuffer **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __CVBuffer *v5;
  CVPixelBufferRef result;
  std::runtime_error *exception;

  v4 = operator new(0x28uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &unk_24C55EB98;
  v4[3] = &unk_24C55E998;
  v5 = *a1;
  v4[4] = *a1;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null CVPixelBuffer encountered.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  result = CVPixelBufferRetain(v5);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20CC88424(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_20CC88444(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EB98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EB98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::__on_zero_shared(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

void ik::core::PixelBufferStorage::~PixelBufferStorage(CVPixelBufferRef *this)
{
  CVPixelBufferRelease(this[1]);
}

{
  CVPixelBufferRelease(this[1]);
  JUMPOUT(0x212B93F04);
}

uint64_t ik::core::PixelBufferStorage::Bind(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

void *ik::core::PixelBufferStorage::Data(CVPixelBufferRef *this)
{
  void *BaseAddress;
  void *v3;
  std::runtime_error *exception;

  BaseAddress = CVPixelBufferGetBaseAddress(this[1]);
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get CVPixelBuffer's data. Ensure the buffer was locked.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v3 = BaseAddress;
  CVPixelBufferGetDataSize(this[1]);
  return v3;
}

void sub_20CC885B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *ik::core::PixelBufferStorage::Strides@<X0>(ik::core **this@<X0>, __CVBuffer *a2@<X1>, _QWORD *a3@<X8>)
{
  int v5;
  size_t BytesPerRow;
  __CVBuffer *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;

  v5 = ik::core::DataTypeFromPixelBuffer(this[1], a2);
  BytesPerRow = CVPixelBufferGetBytesPerRow(this[1]);
  v8 = ik::core::ChannelCountFromPixelBuffer(this[1], v7);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = operator new(0x18uLL);
  a3[1] = result + 3;
  a3[2] = result + 3;
  *result = BytesPerRow;
  result[1] = v8 << (2 * (v5 != 0));
  if (v5)
    v10 = 4;
  else
    v10 = 1;
  result[2] = v10;
  *a3 = result;
  return result;
}

uint64_t ik::core::PixelBufferStorage::CopyData@<X0>(ik::core::PixelBufferStorage *this@<X0>, uint64_t a2@<X8>)
{
  __CVBuffer *v4;
  const void *v5;
  size_t v6;
  size_t v7;
  uint64_t result;
  std::runtime_error *exception;
  void *__p[3];

  v4 = (__CVBuffer *)*((_QWORD *)this + 1);
  if (CVPixelBufferLockBaseAddress(v4, 1uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
    goto LABEL_8;
  }
  v5 = (const void *)(*(uint64_t (**)(ik::core::PixelBufferStorage *))(*(_QWORD *)this + 24))(this);
  v7 = v6;
  (*(void (**)(void **__return_ptr, ik::core::PixelBufferStorage *))(*(_QWORD *)this + 32))(__p, this);
  ik::StridedArray::StridedArray(a2, v5, v7, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  result = CVPixelBufferUnlockBaseAddress(v4, 1uLL);
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_20CC8875C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CC88770(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CC88784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock((ik::core::CorePixelBufferScopeLock *)&a9);
  _Unwind_Resume(a1);
}

void ik::TensorStorage::CopyData(ik::TensorStorage *this@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  size_t v5;
  size_t v6;
  void *__p[3];

  v4 = (const void *)(*(uint64_t (**)(ik::TensorStorage *))(*(_QWORD *)this + 24))(this);
  v6 = v5;
  (*(void (**)(void **__return_ptr, ik::TensorStorage *))(*(_QWORD *)this + 32))(__p, this);
  ik::StridedArray::StridedArray(a2, v4, v6, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20CC88830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ik::StridedArray::StridedArray(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v8 = operator new[]();
  *(_QWORD *)a1 = v8;
  v9 = (_QWORD *)operator new();
  *v9 = &unk_24C55EC40;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(const void **)a4;
  v11 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v11)
  {
    if (v11 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  memcpy(*(void **)a1, a2, a3);
  return a1;
}

void sub_20CC88938(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212B93F04](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

void sub_20CC8895C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x212B93EECLL);
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020CCAB051)
    return a1 + 24;
  if (((v3 & 0x800000020CCAB051 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020CCAB051))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CCAB051 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ik::core::ChannelCountFromPixelBuffer(ik::core *this, __CVBuffer *a2)
{
  signed int PixelFormatType;
  int v3;
  int v5;
  unsigned int v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32)
        return 4;
      v3 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369)
      return 4;
    v5 = 1278226488;
LABEL_14:
    if (PixelFormatType != v5)
      goto LABEL_16;
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      return 1;
    v5 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
LABEL_8:
    if (PixelFormatType == v3)
      return 4;
LABEL_16:
    v6 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v6);
    v8 = std::string::insert(&v10, 0, "Unsupported CVPixelBuffer type: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return 1;
}

{
  signed int PixelFormatType;
  int v3;
  int v5;
  unsigned int v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32)
        return 4;
      v3 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369)
      return 4;
    v5 = 1278226488;
LABEL_14:
    if (PixelFormatType != v5)
      goto LABEL_16;
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      return 1;
    v5 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
LABEL_8:
    if (PixelFormatType == v3)
      return 4;
LABEL_16:
    v6 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v6);
    v8 = std::string::insert(&v10, 0, "Unsupported CVPixelBuffer type: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return 1;
}

{
  signed int PixelFormatType;
  int v3;
  int v5;
  unsigned int v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32)
        return 4;
      v3 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369)
      return 4;
    v5 = 1278226488;
LABEL_14:
    if (PixelFormatType != v5)
      goto LABEL_16;
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      return 1;
    v5 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
LABEL_8:
    if (PixelFormatType == v3)
      return 4;
LABEL_16:
    v6 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v6);
    v8 = std::string::insert(&v10, 0, "Unsupported CVPixelBuffer type: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return 1;
}

{
  signed int PixelFormatType;
  int v3;
  int v5;
  unsigned int v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32)
        return 4;
      v3 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369)
      return 4;
    v5 = 1278226488;
LABEL_14:
    if (PixelFormatType != v5)
      goto LABEL_16;
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      return 1;
    v5 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    v3 = 1380401729;
LABEL_8:
    if (PixelFormatType == v3)
      return 4;
LABEL_16:
    v6 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v6);
    v8 = std::string::insert(&v10, 0, "Unsupported CVPixelBuffer type: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return 1;
}

void sub_20CC88BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock(ik::core::CorePixelBufferScopeLock *this)
{
  std::runtime_error *exception;

  *(_QWORD *)this = &unk_24C55EA18;
  if (CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 1), *((_QWORD *)this + 2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

{
  std::runtime_error *exception;

  *(_QWORD *)this = &unk_24C55EA18;
  if (CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 1), *((_QWORD *)this + 2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  JUMPOUT(0x212B93F04);
}

void sub_20CC88C80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CC88D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x212B93F04](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

char **ik::TensorShape::TensorShape<unsigned long,unsigned long,unsigned long>(char **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = (char *)operator new(8uLL);
  *(_QWORD *)v8 = a2;
  a1[1] = v8 + 8;
  a1[2] = v8 + 8;
  *a1 = v8;
  v9 = (char *)operator new(0x10uLL);
  v10 = v9 + 16;
  *(_QWORD *)v9 = *(_QWORD *)v8;
  *((_QWORD *)v9 + 1) = a3;
  *a1 = v9;
  a1[1] = v9 + 16;
  a1[2] = v9 + 16;
  operator delete(v8);
  v11 = (unint64_t)a1[2];
  a1[1] = v9 + 16;
  if ((unint64_t)(v9 + 16) < v11)
  {
    *((_QWORD *)v9 + 2) = a4;
    v12 = (uint64_t)(v9 + 24);
    goto LABEL_21;
  }
  v13 = *a1;
  v14 = (v10 - *a1) >> 3;
  v15 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  v16 = v11 - (_QWORD)v13;
  if (v16 >> 2 > v15)
    v15 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
  {
    if (v17 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v18 = (char *)operator new(8 * v17);
    v19 = &v18[8 * v14];
    v20 = &v18[8 * v17];
    *(_QWORD *)v19 = a4;
    v12 = (uint64_t)(v19 + 8);
    if (v10 == v13)
      goto LABEL_19;
    goto LABEL_14;
  }
  v18 = 0;
  v19 = (char *)(8 * v14);
  v20 = 0;
  *(_QWORD *)(8 * v14) = a4;
  v12 = 8 * v14 + 8;
  if (v10 != v13)
  {
LABEL_14:
    v21 = v9 - v13 + 8;
    if (v21 < 0x18)
      goto LABEL_26;
    v22 = (v21 >> 3) + 1;
    v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
    v10 -= v23;
    v19 -= v23;
    v24 = &v18[8 * v14 - 16];
    v25 = v22 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *(_OWORD *)v9;
      *((_OWORD *)v24 - 1) = *((_OWORD *)v9 - 1);
      *(_OWORD *)v24 = v26;
      v24 -= 32;
      v9 -= 32;
      v25 -= 4;
    }
    while (v25);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_26:
      do
      {
        v27 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v19 - 1) = v27;
        v19 -= 8;
      }
      while (v10 != v13);
    }
  }
LABEL_19:
  *a1 = v19;
  a1[1] = (char *)v12;
  a1[2] = v20;
  if (v13)
    operator delete(v13);
LABEL_21:
  a1[1] = (char *)v12;
  return a1;
}

void sub_20CC88F14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_20CC89100(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x212B93F04](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

uint64_t ik::EspressoNet::Predict@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v6;
  uint64_t *i;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  _QWORD *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  void *v18;
  char *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  _OWORD *v38;
  void *v39;
  int v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 *v46[3];
  int v47;
  _BYTE v48[24];
  uint64_t v49;
  __int128 v50;

  v6 = *(_OWORD **)(a1 + 8);
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    *(_QWORD *)v48 = &unk_24C55E960;
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v48[8], (const std::string::value_type *)i[2], i[3]);
    }
    else
    {
      v8 = *((_OWORD *)i + 1);
      v49 = i[4];
      *(_OWORD *)&v48[8] = v8;
    }
    v50 = *v6;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)i[10] + 16))(i[10], v48);
    if (SHIBYTE(v49) < 0)
      operator delete(*(void **)&v48[8]);
  }
  v37 = a4;
  v38 = v6;
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    v11 = v6 + 12;
    v12 = &unk_24C55EA38;
    while (!std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(v11, (uint64_t)v9))
    {
      v47 = espresso_network_bind_buffer();
      HIBYTE(v46[2]) = 21;
      strcpy((char *)v46, "Binding output buffer");
      ik::VerifyEspressoStatus(&v47, (uint64_t *)v46);
      if (SHIBYTE(v46[2]) < 0)
        operator delete(v46[0]);
      LOWORD(v46[0]) = 0;
      ik::EspressoTensor::EspressoTensor((uint64_t)&v39, (uint64_t)v48, v46);
      v46[0] = v9;
      v24 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (uint64_t)v9, (uint64_t)&std::piecewise_construct, v46);
      v25 = v24;
      *((_DWORD *)v24 + 12) = v40;
      if (v24 + 5 != (uint64_t *)&v39)
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v24 + 7, (char *)v41, v42, (v42 - (_BYTE *)v41) >> 3);
      v27 = v44;
      v26 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      v30 = (std::__shared_weak_count *)v25[11];
      v25[10] = v27;
      v25[11] = (uint64_t)v26;
      if (!v30)
        goto LABEL_32;
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (v32)
        goto LABEL_32;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = v45;
      v39 = v12;
      if (v45)
      {
LABEL_33:
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
LABEL_38:
      if (v41)
      {
        v42 = (char *)v41;
        operator delete(v41);
      }
      v9 = (__int128 *)((char *)v9 + 24);
      if (v9 == v10)
        goto LABEL_42;
    }
    v13 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(v11, (uint64_t)v9);
    if (!v13)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v14 = v13;
    v39 = &unk_24C55EA38;
    v40 = *((_DWORD *)v13 + 12);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v16 = (_BYTE *)v13[7];
    v15 = (_BYTE *)v13[8];
    v17 = v15 - v16;
    if (v15 != v16)
    {
      if (v17 < 0)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v18 = v12;
      v19 = (char *)operator new(v15 - v16);
      v20 = &v19[8 * (v17 >> 3)];
      v41 = v19;
      v43 = v20;
      memcpy(v19, v16, v17);
      v42 = v20;
      v12 = v18;
    }
    v21 = (std::__shared_weak_count *)v14[11];
    v44 = v14[10];
    v45 = v21;
    if (!v21)
    {
      v39 = &unk_24C55EA38;
      goto LABEL_38;
    }
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
LABEL_32:
    v33 = v45;
    v39 = v12;
    if (v45)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_42:
  LODWORD(v46[0]) = espresso_plan_execute_sync();
  v48[23] = 14;
  strcpy(v48, "Executing plan");
  ik::VerifyEspressoStatus((int *)v46, (uint64_t *)v48);
  if ((v48[23] & 0x80000000) != 0)
    operator delete(*(void **)v48);
  return std::unordered_map<std::string,ik::EspressoTensor>::unordered_map(v37, (uint64_t)(v38 + 12));
}

void sub_20CC894F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ik::core::EspressoBinder::~EspressoBinder(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x212B93F04);
}

void ik::EspressoTensor::~EspressoTensor(ik::EspressoTensor *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_24C55EA38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      return;
  }
  *((_QWORD *)this + 3) = v5;
  operator delete(v5);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)this = &unk_24C55EA38;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)*((_QWORD *)this + 2);
    if (!v5)
      goto LABEL_9;
  }
  *((_QWORD *)this + 3) = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x212B93F04);
}

void ik::core::EspressoBinder::Bind(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::runtime_error *exception;
  char __p[22];
  char v9;
  __int128 v10;
  __int128 v11;
  int v12;

  switch(*a3)
  {
    case 0:
      v3 = a2[1];
      v10 = *a2;
      v11 = v3;
      v12 = espresso_network_bind_input_vimagebuffer_bgra8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      ik::VerifyEspressoStatus(&v12, (uint64_t *)__p);
      break;
    case 1:
      v5 = a2[1];
      v10 = *a2;
      v11 = v5;
      v12 = espresso_network_bind_input_vimagebuffer_rgba8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      ik::VerifyEspressoStatus(&v12, (uint64_t *)__p);
      break;
    case 2:
      v4 = a2[1];
      v10 = *a2;
      v11 = v4;
      v12 = espresso_network_bind_input_vimagebuffer_argb8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      ik::VerifyEspressoStatus(&v12, (uint64_t *)__p);
      break;
    case 3:
      v6 = a2[1];
      v10 = *a2;
      v11 = v6;
      v12 = espresso_network_bind_input_vimagebuffer_planar8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      ik::VerifyEspressoStatus(&v12, (uint64_t *)__p);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported image buffer type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (v9 < 0)
    operator delete(*(void **)__p);
}

void sub_20CC898A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CC898B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ik::core::EspressoBinder::Bind(ik::core::EspressoBinder *this, __CVBuffer *a2)
{
  char __p[22];
  char v3;
  int v4;

  v4 = espresso_network_bind_cvpixelbuffer();
  v3 = 21;
  strcpy(__p, "Binding CVPixelBuffer");
  ik::VerifyEspressoStatus(&v4, (uint64_t *)__p);
  if (v3 < 0)
    operator delete(*(void **)__p);
}

void sub_20CC8997C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ik::core::EspressoBinder::Bind()
{
  void *__p;
  __int128 v1;
  int v2;

  v2 = espresso_network_bind_buffer();
  __p = operator new(0x20uLL);
  v1 = xmmword_20CCAAEA0;
  strcpy((char *)__p, "Binding espresso_buffer_t");
  ik::VerifyEspressoStatus(&v2, (uint64_t *)&__p);
  if (SHIBYTE(v1) < 0)
    operator delete(__p);
}

void sub_20CC89A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t ik::EspressoTensor::EspressoTensor(uint64_t a1, uint64_t a2, _WORD *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  __int128 v8;
  __int128 v9;
  std::__shared_count v10;
  std::__shared_count v11;
  __int128 v12;
  int v13;
  int v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  std::runtime_error *exception;
  void *__p[3];
  _BYTE v26[12];
  char __src[80];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EBD0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55E9D8;
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v6[6].__shared_weak_owners_ = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v6[7].__shared_owners_ = v8;
  v6[8].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 80);
  v6[4].std::__shared_count = *(std::__shared_count *)(a2 + 64);
  *(_OWORD *)&v6[4].__shared_weak_owners_ = v9;
  v10 = *(std::__shared_count *)(a2 + 112);
  *(_OWORD *)&v6[5].__shared_owners_ = *(_OWORD *)(a2 + 96);
  v6[6].std::__shared_count = v10;
  v11 = *(std::__shared_count *)(a2 + 16);
  *(_OWORD *)&v6[1].__shared_owners_ = *(_OWORD *)a2;
  v6[2].std::__shared_count = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v6[2].__shared_weak_owners_ = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v6[3].__shared_owners_ = v12;
  LOWORD(v6[8].__shared_owners_) = *a3;
  v13 = *(_DWORD *)(a2 + 160);
  if (v13 == 262152)
  {
    v14 = 0;
  }
  else
  {
    if (v13 != 65568)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported espresso type encountered.");
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v14 = 1;
  }
  *(_DWORD *)&v26[8] = 0;
  *(_QWORD *)v26 = espresso_buffer_unpack_tensor_shape();
  strcpy((char *)__p, "Unpacking tensor shape");
  HIBYTE(__p[2]) = 22;
  ik::VerifyEspressoStatus((int *)v26, (uint64_t *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v15 = *(_QWORD *)&v26[4];
    memset(__p, 0, sizeof(__p));
    if (*(_QWORD *)&v26[4])
      goto LABEL_7;
LABEL_11:
    v17 = 0;
    goto LABEL_12;
  }
  v15 = *(_QWORD *)&v26[4];
  memset(__p, 0, sizeof(__p));
  if (!*(_QWORD *)&v26[4])
    goto LABEL_11;
LABEL_7:
  if (v15 >> 61)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  v16 = 8 * v15;
  if (((8 * v15) & 0x8000000000000000) != 0)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  v17 = (char *)operator new(8 * v15);
  v15 = (unint64_t)&v17[8 * ((uint64_t)(8 * v15) >> 3)];
  memcpy(v17, __src, v16);
LABEL_12:
  *(_QWORD *)a1 = &unk_24C55EA38;
  *(_DWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v18 = v15 - (_QWORD)v17;
  if ((char *)v15 != v17)
  {
    if (v18 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(v15 - (_QWORD)v17);
    *(_QWORD *)(a1 + 16) = v19;
    v20 = &v19[8 * (v18 >> 3)];
    *(_QWORD *)(a1 + 32) = v20;
    memcpy(v19, v17, v15 - (_QWORD)v17);
    *(_QWORD *)(a1 + 24) = v20;
  }
  *(_QWORD *)(a1 + 40) = v6 + 1;
  *(_QWORD *)(a1 + 48) = v6;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  if (v17)
    operator delete(v17);
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_QWORD *)a1 = &unk_24C55E8D8;
  return a1;
}

void sub_20CC8A054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20CC8A0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v5 + 24) = v9;
    operator delete(v9);
  }
  if (v6)
    JUMPOUT(0x20CC8A0DCLL);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20CC8A0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ik::core::EspressoBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ik::core::EspressoBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ik::core::EspressoBufferStorage>::__on_zero_shared(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 201))
    free(*(void **)(a1 + 32));
}

void ik::core::EspressoBufferStorage::~EspressoBufferStorage(void **this)
{
  if (*((_BYTE *)this + 177))
    free(this[1]);
}

{
  if (*((_BYTE *)this + 177))
    free(this[1]);
  JUMPOUT(0x212B93F04);
}

uint64_t ik::core::EspressoBufferStorage::Bind(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 8);
}

uint64_t ik::core::EspressoBufferStorage::Data(ik::core::EspressoBufferStorage *this)
{
  return *((_QWORD *)this + 1);
}

unint64_t ik::core::EspressoBufferStorage::Strides@<X0>(ik::core::EspressoBufferStorage *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  __int8 *v11;
  char *v12;
  std::runtime_error *exception;
  std::string *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  std::string v19;

  result = espresso_buffer_get_rank();
  v5 = result;
  if (result >= 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, v5);
    v14 = std::string::insert(&v19, 0, "Unsupported tensor rank: ");
    v15 = *(int8x16_t *)&v14->__r_.__value_.__l.__data_;
    v17.i64[0] = v14->__r_.__value_.__r.__words[2];
    v16 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v16);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v6 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)this + 152), 2uLL);
  v7 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)this + 136), 2uLL);
  v16 = vextq_s8(v6, v6, 8uLL);
  v17 = vextq_s8(v7, v7, 8uLL);
  v18 = 4 * *((_QWORD *)this + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (result)
  {
    v8 = 8 * (5 - result);
    v9 = 40 - v8;
    v10 = (char *)operator new(40 - v8);
    v11 = &v16.i8[v8];
    *a2 = v10;
    v12 = &v10[8 * ((unint64_t)(40 - v8) >> 3)];
    a2[2] = v12;
    result = (unint64_t)memcpy(v10, v11, v9);
    a2[1] = v12;
  }
  return result;
}

void sub_20CC8A354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x60uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = (std::string *)(v26 + 16);
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_DWORD *)v26 + 12) = 1;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((_QWORD *)v26 + 11) = 0;
  *((_QWORD *)v26 + 5) = &unk_24C55E8D8;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20CC8A83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20CC8A850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v2 + 40) = &unk_24C55EA38;
      v3 = *(std::__shared_weak_count **)(v2 + 88);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = *(void **)(v2 + 56);
      if (v6)
      {
        *(_QWORD *)(v2 + 64) = v6;
        operator delete(v6);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,ik::EspressoTensor>::unordered_map(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::EspressoTensor> const&>(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_20CC8AA2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void sub_20CC8AA40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::EspressoTensor> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100]((std::string *)(v25 + 16), a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20CC8AE78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20CC8AE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  void *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C55EA38;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v9 = operator new(v6 - v7);
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v10 = (std::string::size_type)v9 + 8 * (v8 >> 3);
    this[2].__r_.__value_.__l.__size_ = v10;
    memcpy(v9, v7, v8);
    this[2].__r_.__value_.__r.__words[0] = v10;
  }
  v11 = *((_QWORD *)a2 + 9);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  this[3].__r_.__value_.__r.__words[0] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C55E8D8;
  return this;
}

void sub_20CC8AF98(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v2[5] = &unk_24C55EA38;
      v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
          break;
      }
      v7 = (void *)v2[7];
      if (v7)
        goto LABEL_9;
LABEL_10:
      if (*((char *)v2 + 39) < 0)
        operator delete((void *)v2[2]);
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_14;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (void *)v2[7];
    if (!v7)
      goto LABEL_10;
LABEL_9:
    v2[8] = v7;
    operator delete(v7);
    goto LABEL_10;
  }
LABEL_14:
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

uint64_t std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<char const(&)[6],ik::PixelBufferTensor &,0>(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C55EA38;
  *(_DWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = *(_BYTE **)(a3 + 16);
  v12 = *(_BYTE **)(a3 + 24);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 48) = v16;
  }
  v17 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void sub_20CC8B1D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = (std::string *)&v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_20CC8B4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_20CC8B50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

ft::DetectorInternals *ft::DetectorInternals::DetectorInternals(ft::DetectorInternals *this)
{
  _DWORD *v2;
  char *v3;
  int Params;
  char __p[20];
  char v7;
  char v8;

  v2 = (_DWORD *)((char *)this + 8);
  v3 = (char *)this + 4364;
  bzero(this, 0x1109uLL);
  bzero(v3, 0x1690uLL);
  v8 = 0;
  v7 = 15;
  strcpy(__p, "Create detector");
  Params = AcDetCreate((uint64_t *)this, (uint64_t)&v8, v2);
  ft::EnsureOK((uint64_t)__p, &Params);
  if (v7 < 0)
    operator delete(*(void **)__p);
  v7 = 14;
  strcpy(__p, "Start detector");
  Params = AcDetStart(*(_QWORD **)this);
  ft::EnsureOK((uint64_t)__p, &Params);
  if (v7 < 0)
    operator delete(*(void **)__p);
  v7 = 19;
  strcpy(__p, "Get detector params");
  Params = AcDetGetParams(*(uint64_t **)this, v2, (uint64_t)this + 44);
  ft::EnsureOK((uint64_t)__p, &Params);
  if (v7 < 0)
    operator delete(*(void **)__p);
  return this;
}

void sub_20CC8B6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x212B93F04);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::Tensor> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]((std::string *)(v25 + 16), a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20CC8BB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20CC8BB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::Tensor>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  void *v9;
  std::string::size_type v10;
  std::string::size_type v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C55EA38;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = v5;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v9 = operator new(v6 - v7);
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    v10 = (std::string::size_type)v9 + 8 * (v8 >> 3);
    this[2].__r_.__value_.__l.__size_ = v10;
    memcpy(v9, v7, v8);
    this[2].__r_.__value_.__r.__words[0] = v10;
  }
  v11 = *((_QWORD *)a2 + 9);
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  this[3].__r_.__value_.__r.__words[0] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return this;
}

void sub_20CC8BC68(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::clear(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t i;

  if (a1[3])
  {
    v2 = (_QWORD *)a1[2];
    if (v2)
    {
      while (1)
      {
        v3 = (_QWORD *)*v2;
        v2[5] = &unk_24C55EA38;
        v4 = (std::__shared_weak_count *)v2[11];
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
            break;
        }
        v7 = (void *)v2[7];
        if (v7)
          goto LABEL_10;
LABEL_11:
        if (*((char *)v2 + 39) < 0)
          operator delete((void *)v2[2]);
        operator delete(v2);
        v2 = v3;
        if (!v3)
          goto LABEL_15;
      }
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v7 = (void *)v2[7];
      if (!v7)
        goto LABEL_11;
LABEL_10:
      v2[8] = v7;
      operator delete(v7);
      goto LABEL_11;
    }
LABEL_15:
    a1[2] = 0;
    v8 = a1[1];
    if (v8)
    {
      for (i = 0; i != v8; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void OUTLINED_FUNCTION_0_5(void **a1)
{
  operator delete(*a1);
}

uint64_t bmBufferResizeCHW(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;

  if ((_DWORD)a2)
    bmBufferResizeCHW();
  v4 = *(_DWORD *)(a4 + 20);
  if (v4 != *(_DWORD *)(result + 20))
    bmBufferResizeCHW();
  if (v4)
    bmBufferResizeCHW();
  v5 = *(_DWORD *)(result + 8);
  v6 = v5 / a3;
  if (v5 / a3 * (_DWORD)a3 != v5)
    bmBufferResizeCHW();
  v7 = *(_DWORD *)(a4 + 8);
  v8 = v7 / a3;
  if (v7 / a3 * (_DWORD)a3 != v7)
    bmBufferResizeCHW();
  v9 = *(_DWORD *)(result + 12);
  v10 = *(_DWORD *)(a4 + 12);
  v12 = v7 < a3 || v10 == 0;
  v57 = v12;
  if (v5 < a3)
  {
    if (!v5 || !v9)
      goto LABEL_73;
    if (v7 && v10)
      bmBufferResizeCHW();
LABEL_74:
    bmBufferResizeCHW(result, a2, a3);
  }
  v13 = 2 * v9;
  if (v10 != 2 * v9)
  {
    if (!v9)
      goto LABEL_73;
    if (v7 && v10)
      bmBufferResizeCHW();
    goto LABEL_74;
  }
  v51 = *(_DWORD *)(a4 + 12);
  if (v8 != 2 * v6)
  {
    if (v9)
    {
      if (v7 && v10)
        bmBufferResizeCHW();
      goto LABEL_74;
    }
LABEL_73:
    bmBufferResizeCHW(result, a2, a3);
  }
  v14 = 0;
  v15 = *(_DWORD *)(result + 16);
  v16 = *(_DWORD *)(a4 + 16);
  v17 = (v13 - 1);
  v18 = (v13 - 2);
  a2 = v6 - 1;
  v52 = (v15 * a2);
  v19 = v8 - 1;
  v56 = a4;
  v55 = a3;
  v54 = result;
  v53 = v8;
  do
  {
    v20 = v14 * v6;
    if (*(_DWORD *)(result + 12))
      v21 = *(_DWORD *)(result + 8) > v20;
    else
      v21 = 0;
    if (!v21)
      goto LABEL_73;
    if (!*(_DWORD *)(a4 + 12) || *(_DWORD *)(a4 + 8) <= v14 * v8)
      goto LABEL_74;
    v22 = *(_QWORD *)result + *(_DWORD *)(result + 16) * v20;
    v23 = *(_QWORD *)a4 + *(_DWORD *)(a4 + 16) * v14 * v8;
    if (v8 > 1)
    {
      if (!v51)
        bmBufferResizeCHW(1, a2, a3);
      if (v9)
      {
        v24 = 0;
        v25 = 1;
        while (1)
        {
          v26 = v24 >> 1;
          if (v6 <= v24 >> 1)
            break;
          v27 = 0;
          v28 = v24 + 1;
          v29 = v23 + (v16 * v24);
          if (v26 + 1 >= v6)
            v30 = v24 >> 1;
          else
            v30 = v26 + 1;
          v31 = v22 + v26 * v15;
          v32 = v22 + v30 * v15;
          if ((v24 & 1) != 0)
            v33 = 1;
          else
            v33 = 2;
          v34 = 2 - v33;
          do
          {
            v35 = v27 + 1;
            v36 = (int)((_DWORD)v27 << 31) >> 31;
            v37 = v27 >> 1;
            if ((int)v37 + 1 >= v9)
              v38 = v37;
            else
              v38 = (v37 + 1);
            a3 = v36 & v33;
            a2 = ((*(char *)(v31 + v37) << (((v27 + 1) & 1) + (v25 & 1)))
                              + a3 * *(char *)(v31 + v38)
                              + (v34 << ((v27 + 1) & 1)) * *(char *)(v32 + v37));
            v39 = a2 + (v36 & v34) * *(char *)(v32 + v38);
            v40 = v39 + 2;
            v41 = v39 + 5;
            if (v40 >= 0)
              v41 = v40;
            *(_BYTE *)(v29 + v27++) = v41 >> 2;
          }
          while (v17 != v35);
          *(_BYTE *)(v29 + v17) = *(_BYTE *)(v29 + v18);
          ++v25;
          v24 = v28;
          if (v28 == v19)
            goto LABEL_42;
        }
      }
      bmBufferResizeCHW(1, a2, a3);
    }
LABEL_42:
    if (!v9)
      bmBufferResizeCHW(1, a2, a3);
    if (v57)
      bmBufferResizeCHW(1, a2, a3);
    v42 = 0;
    v43 = v22 + v52;
    v44 = v23 + (v16 * v19);
    do
    {
      v45 = v42 + 1;
      v46 = v42 >> 1;
      if ((int)v46 + 1 >= v9)
        v47 = v42 >> 1;
      else
        v47 = v46 + 1;
      a2 = ((int)((_DWORD)v42 << 31) >> 31) & (2 * *(char *)(v43 + v47));
      v48 = ((2 * *(char *)(v43 + v46)) << ((v42 + 1) & 1)) + a2;
      v49 = v48 + 2;
      v50 = v48 + 5;
      if (v49 >= 0)
        v50 = v49;
      *(_BYTE *)(v44 + v42++) = v50 >> 2;
    }
    while (v17 != v45);
    *(_BYTE *)(v44 + v17) = *(_BYTE *)(v44 + v18);
    ++v14;
    a3 = v55;
    a4 = v56;
    result = v54;
    v8 = v53;
  }
  while (v14 != v55);
  return result;
}

void bmBufferPartialResizeCHW(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, _DWORD *a8)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  size_t v18;
  int v20;
  float v21;
  uint64_t v22;
  float v23;
  float v24;
  unsigned int v25;
  uint64_t v27;
  float v28;
  signed int v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t v54;
  float v55;
  signed int v56;
  float v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  int v73;
  BOOL v74;
  unsigned int v75;
  BOOL v76;
  size_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  char *v86;
  uint64_t v87;
  signed int v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  float v92;
  float v93;
  signed int v94;
  uint64_t v96;
  char *v97;
  uint64_t v98;

  if ((_DWORD)a2 != 1)
    bmBufferPartialResizeCHW();
  v8 = a3;
  v9 = a1;
  v10 = *(_DWORD *)(a1 + 8);
  v11 = v10 / a3;
  if (v10 / a3 * (_DWORD)a3 != v10)
    bmBufferPartialResizeCHW();
  v12 = a8;
  v13 = a8[2];
  v14 = v13 / a3;
  if (v13 / a3 * (_DWORD)a3 != v13)
    bmBufferPartialResizeCHW();
  v15 = a8[3];
  v16 = *(_DWORD *)(a1 + 12);
  if (v16)
    v17 = v10 >= a3;
  else
    v17 = 0;
  if (!v17)
  {
    if (v10 && v16)
    {
      if (v13)
      {
        if (v15)
          bmBufferPartialResizeCHW();
      }
      goto LABEL_83;
    }
LABEL_82:
    acAttrReduceSmile(a1, a2, a3);
  }
  if (v15 < v16)
  {
    if (!v10 || !v16)
      goto LABEL_82;
    if (v13 && v15)
      bmBufferPartialResizeCHW();
LABEL_83:
    acAttrReduceSmile(a1, a2, a3);
  }
  if (v14 < v11)
  {
    if (!v10 || !v16)
      goto LABEL_82;
    if (v13 && v15)
      bmBufferPartialResizeCHW();
    goto LABEL_83;
  }
  if (*(_DWORD *)(a1 + 20) != 6)
  {
    if (!v10 || !v16)
      goto LABEL_82;
    if (v13 && v15)
      bmBufferPartialResizeCHW();
    goto LABEL_83;
  }
  if (a8[5] != 6)
  {
    if (!v10 || !v16)
      goto LABEL_82;
    if (v13 && v15)
      bmBufferPartialResizeCHW();
    goto LABEL_83;
  }
  v85 = a8[4];
  v18 = v85 * v14;
  if (a4 < a5)
  {
    v20 = 0;
    v84 = *(_DWORD *)(a1 + 16);
    v94 = v11 - 1;
    v92 = (float)(v11 - 1);
    v93 = (float)(v14 - 1);
    v21 = (float)(v15 - 1);
    v82 = a4;
    v89 = a5;
    if (a4 <= v14)
      v22 = v14;
    else
      v22 = a4;
    v91 = v22;
    v80 = a3;
    v79 = a1;
    v90 = v11;
    v78 = v13 / a3;
    v77 = v85 * v14;
    v88 = v16 - 1;
    v23 = (float)(v16 - 1);
    v24 = v21;
    while (1)
    {
      v25 = v20 * v11;
      if (!*(_DWORD *)(v9 + 12) || *(_DWORD *)(v9 + 8) <= v25)
        goto LABEL_82;
      if (!v12[3] || v12[2] <= v20 * v14)
        goto LABEL_83;
      v83 = v20;
      v87 = *(_QWORD *)v9 + *(_DWORD *)(v9 + 16) * v25;
      v86 = (char *)(*(_QWORD *)v12 + v12[4] * v20 * v14);
      bzero(v86, v18);
      v27 = v82;
      do
      {
        v28 = (float)((float)v27 / v93) * v92;
        v29 = vcvtms_s32_f32(v28);
        v30 = bmClamp(v28 - (float)(int)floorf(v28), 0.0, 1.0);
        v31 = bmClamp(v29 - 1, 0, v94);
        if (v11 <= v31)
          acAttrReduceSmile(v31, v32, v33);
        v34 = v31;
        v35 = bmClamp(v29, 0, v94);
        if (v11 <= v35)
          acAttrReduceSmile(v35, v36, v37);
        v38 = v35;
        v39 = bmClamp(v29 + 1, 0, v94);
        if (v11 <= v39)
          acAttrReduceSmile(v39, v40, v41);
        v42 = v39;
        a1 = bmClamp(v29 + 2, 0, v94);
        if (v11 <= a1)
          acAttrReduceSmile(a1, a2, a3);
        if (v27 == v91)
          acAttrReduceSmile(a1, a2, a3);
        v96 = v27;
        if (a6 < a7)
        {
          v98 = v87 + (v34 * v84);
          v43 = v87 + (v38 * v84);
          v44 = v87 + (v42 * v84);
          v45 = v87 + (a1 * v84);
          v97 = &v86[(v85 * v27)];
          v46 = vabds_f32(-1.0, v30);
          v47 = (float)((float)((float)(v46 * (float)(v46 * 3.75)) + (float)((float)(v46 * (float)(v46 * -0.75)) * v46))
                      + (float)(v46 * -6.0))
              + 3.0;
          v48 = fabsf(v30);
          v49 = (float)((float)(v48 * (float)(v48 * -2.25)) + (float)((float)(v48 * (float)(v48 * 1.25)) * v48)) + 1.0;
          v50 = vabds_f32(1.0, v30);
          v51 = (float)((float)(v50 * (float)(v50 * -2.25)) + (float)((float)(v50 * (float)(v50 * 1.25)) * v50)) + 1.0;
          v52 = vabds_f32(2.0, v30);
          v53 = (float)((float)((float)(v52 * (float)(v52 * 3.75)) + (float)((float)(v52 * (float)(v52 * -0.75)) * v52))
                      + (float)(v52 * -6.0))
              + 3.0;
          v54 = a6;
          do
          {
            v55 = (float)((float)v54 / v24) * v23;
            v56 = vcvtms_s32_f32(v55);
            v57 = bmClamp(v55 - (float)(int)floorf(v55), 0.0, 1.0);
            v58 = bmClamp(v56 - 1, 0, v88);
            v59 = bmClamp(v56, 0, v88);
            v60 = bmClamp(v56 + 1, 0, v88);
            a1 = bmClamp(v56 + 2, 0, v88);
            v61 = 4 * v58;
            v62 = 4 * v59;
            v63 = 4 * v60;
            v64 = 4 * a1;
            v65 = vabds_f32(-1.0, v57);
            v66 = fabsf(v57);
            v67 = (float)((float)(v66 * (float)(v66 * -2.25)) + (float)((float)(v66 * (float)(v66 * 1.25)) * v66)) + 1.0;
            v68 = vabds_f32(1.0, v57);
            v69 = (float)((float)(v68 * (float)(v68 * -2.25)) + (float)((float)(v68 * (float)(v68 * 1.25)) * v68)) + 1.0;
            v70 = vabds_f32(2.0, v57);
            v71 = (float)((float)((float)(v65 * (float)(v65 * 3.75)) + (float)((float)(v65 * (float)(v65 * -0.75)) * v65))
                        + (float)(v65 * -6.0))
                + 3.0;
            v72 = (float)((float)((float)(v70 * (float)(v70 * 3.75)) + (float)((float)(v70 * (float)(v70 * -0.75)) * v70))
                        + (float)(v70 * -6.0))
                + 3.0;
            *(float *)&v97[4 * v54++] = (float)((float)((float)(v49
                                                              * (float)((float)((float)((float)(v67
                                                                                              * *(float *)(v43 + v62))
                                                                                      + (float)(v71
                                                                                              * *(float *)(v43 + v61)))
                                                                              + (float)(v69 * *(float *)(v43 + v63)))
                                                                      + (float)(v72 * *(float *)(v43 + v64))))
                                                      + (float)(v47
                                                              * (float)((float)((float)((float)(v67
                                                                                              * *(float *)(v98 + v62))
                                                                                      + (float)(v71
                                                                                              * *(float *)(v98 + v61)))
                                                                              + (float)(v69 * *(float *)(v98 + v63)))
                                                                      + (float)(v72 * *(float *)(v98 + v64)))))
                                              + (float)(v51
                                                      * (float)((float)((float)((float)(v67 * *(float *)(v44 + v62))
                                                                              + (float)(v71 * *(float *)(v44 + v61)))
                                                                      + (float)(v69 * *(float *)(v44 + v63)))
                                                              + (float)(v72 * *(float *)(v44 + v64)))))
                                      + (float)(v53
                                              * (float)((float)((float)((float)(v67 * *(float *)(v45 + v62))
                                                                      + (float)(v71 * *(float *)(v45 + v61)))
                                                              + (float)(v69 * *(float *)(v45 + v63)))
                                                      + (float)(v72 * *(float *)(v45 + v64))));
          }
          while (a7 != (_DWORD)v54);
        }
        v27 = v96 + 1;
        v11 = v90;
      }
      while (v96 + 1 != v89);
      v20 = v83 + 1;
      v12 = a8;
      v9 = v79;
      v14 = v78;
      v18 = v77;
      if (v83 + 1 == v80)
        return;
    }
  }
  v73 = 0;
  do
  {
    if (*(_DWORD *)(v9 + 12))
      v74 = *(_DWORD *)(v9 + 8) > v73 * v11;
    else
      v74 = 0;
    if (!v74)
      goto LABEL_82;
    v75 = v73 * v14;
    if (v12[3])
      v76 = v12[2] > v75;
    else
      v76 = 0;
    if (!v76)
      goto LABEL_83;
    bzero((void *)(*(_QWORD *)v12 + v12[4] * v75), v18);
    ++v73;
    --v8;
  }
  while (v8);
}

void bmBufferResizeCoordConvert(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, float *a6, float *a7, float a8, float a9)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  if (a5 >= 3)
    bmBufferResizeCoordConvert();
  if (!a4 || !a1 || !a2 || !a3)
    bmBufferResizeCoordConvert();
  if (a5)
  {
    v14 = (float)a3;
    v15 = (float)a1;
    v16 = (float)a4;
    v17 = (float)a2;
    v18 = bmMinimum((float)a3 / (float)a1, (float)a4 / (float)a2);
    *a6 = v18 * a8;
    *a7 = v18 * a9;
    if (a5 != 2)
      return;
    *a6 = (float)((float)(v14 - (float)(v18 * v15)) * 0.5) + *a6;
    v19 = (float)((float)(v16 - (float)(v18 * v17)) * 0.5) + *a7;
  }
  else
  {
    *a6 = (float)(a8 / (float)a1) * (float)a3;
    v19 = (float)(a9 / (float)a2) * (float)a4;
  }
  *a7 = v19;
}

float bmBufferResizeCoordConvertReversed(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, float *a6, float *a7, float a8, float a9)
{
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float result;

  if (a5 >= 3)
    bmBufferResizeCoordConvertReversed();
  if (!a4 || !a1 || !a2 || !a3)
    bmBufferResizeCoordConvertReversed();
  v14 = (float)a3;
  if (a5)
  {
    v15 = (float)a1;
    v16 = (float)a4;
    v17 = (float)a2;
    v18 = bmMinimum(v14 / (float)a1, (float)a4 / (float)a2);
    v19 = 0.0;
    v20 = (float)(v14 - (float)(v18 * v15)) * 0.5;
    if (a5 == 2)
      v19 = (float)(v16 - (float)(v18 * v17)) * 0.5;
    else
      v20 = 0.0;
    v21 = 1.0 / v18;
    *a6 = v21 * (float)(a8 - v20);
    v22 = a9 - v19;
  }
  else
  {
    *a6 = (float)(a8 / v14) * (float)a1;
    v21 = a9 / (float)a4;
    v22 = (float)a2;
  }
  result = v21 * v22;
  *a7 = result;
  return result;
}

void OUTLINED_FUNCTION_1_2(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 49, a4);
}

uint64_t TtTrkRpnCreate(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _OWORD *v6;
  char *v7;
  uint64_t v8;
  TtTrkRpnNode *v9;
  uint64_t result;

  v3 = 4294967292;
  if (!a1 || !a2 || !a3)
    return v3;
  v6 = (_OWORD *)operator new();
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[9] = 0u;
  v6[10] = 0u;
  v6[11] = 0u;
  v6[12] = 0u;
  v6[13] = 0u;
  v6[14] = 0u;
  v6[15] = 0u;
  v6[16] = 0u;
  v6[17] = 0u;
  v6[18] = 0u;
  v6[19] = 0u;
  v6[20] = 0u;
  v6[21] = 0u;
  v6[22] = 0u;
  v7 = (char *)operator new();
  TtTrkRpnNode::TtTrkRpnNode(v7, a3);
  *(_QWORD *)v6 = v7;
  v8 = TtTrkRpnNode::init((uint64_t)v7, 0, (uint64_t)a3);
  if ((_DWORD)v8)
  {
    v3 = v8;
    v9 = (TtTrkRpnNode *)v7;
LABEL_6:
    TtTrkRpnNode::~TtTrkRpnNode(v9);
    MEMORY[0x212B93F04]();
LABEL_7:
    MEMORY[0x212B93F04](v6, 0x10A0C40FC37F48CLL);
    return v3;
  }
  result = TtTrkRpnNode::getParams((uint64_t)v7, a3, (uint64_t)v6 + 8);
  v3 = result;
  if ((_DWORD)result)
  {
    v9 = *(TtTrkRpnNode **)v6;
    if (!*(_QWORD *)v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  *a1 = v6;
  return result;
}

void sub_20CC8CA78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212B93F04](v1, 0x10A0C4007650D25);
  _Unwind_Resume(a1);
}

uint64_t TtTrkRpnDestroy(TtTrkRpnNode **a1)
{
  TtTrkRpnNode *v2;

  if (!a1)
    return 4294967292;
  v2 = *a1;
  if (!v2)
    return 4294967292;
  TtTrkRpnNode::~TtTrkRpnNode(v2);
  MEMORY[0x212B93F04]();
  MEMORY[0x212B93F04](a1, 0x10A0C40FC37F48CLL);
  return 0;
}

uint64_t TtTrkRpnStart(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (a1 && a2 && (v2 = *a1) != 0)
    return TtTrkRpnNode::restart(v2, a2);
  else
    return 4294967292;
}

uint64_t TtTrkRpnStop(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t TtTrkRpnGetParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!a1 || !*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      result = 0;
      v5 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)a3 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a3 + 16) = v5;
      v6 = *(_OWORD *)(a1 + 40);
      v7 = *(_OWORD *)(a1 + 56);
      v8 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 72);
      *(_OWORD *)(a3 + 80) = v8;
      *(_OWORD *)(a3 + 32) = v6;
      *(_OWORD *)(a3 + 48) = v7;
      v9 = *(_OWORD *)(a1 + 104);
      v10 = *(_OWORD *)(a1 + 120);
      v11 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 136);
      *(_OWORD *)(a3 + 144) = v11;
      *(_OWORD *)(a3 + 96) = v9;
      *(_OWORD *)(a3 + 112) = v10;
      v12 = *(_OWORD *)(a1 + 168);
      v13 = *(_OWORD *)(a1 + 184);
      v14 = *(_OWORD *)(a1 + 200);
      *(_DWORD *)(a3 + 208) = *(_DWORD *)(a1 + 216);
      *(_OWORD *)(a3 + 176) = v13;
      *(_OWORD *)(a3 + 192) = v14;
      *(_OWORD *)(a3 + 160) = v12;
    }
  }
  return result;
}

uint64_t TtTrkRpnGetExtState(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;

  if (!a1)
    return 4294967292;
  if (!*a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        v6 = *(_QWORD *)(a3 + 12);
        if (v6)
        {
          v7 = *(_DWORD *)(a3 + 20);
          if (v7)
          {
            if (*(_QWORD *)(a3 + 24) && *(_QWORD *)(a3 + 32) && *(_DWORD *)(a3 + 40))
            {
              if (*(_DWORD *)(a3 + 44))
              {
                *(_DWORD *)a4 = 4;
                *(_QWORD *)(a4 + 4) = a2;
                *(_DWORD *)(a4 + 12) = 1864;
                *(_QWORD *)(a4 + 16) = v6;
                *(_DWORD *)(a4 + 24) = v7;
                *(_QWORD *)(a4 + 28) = *(_QWORD *)(a3 + 24);
                *(_DWORD *)(a4 + 36) = *(_DWORD *)(a3 + 40);
                *(_QWORD *)(a4 + 28) = *(_QWORD *)(a3 + 32);
                *(_DWORD *)(a4 + 36) = *(_DWORD *)(a3 + 44);
                v8 = ttMemBlockCoalesceNoSort(a4 + 4, 4);
                result = 0;
                *(_DWORD *)a4 = v8;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TtTrkRpnExemplarPreProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (a7)
            {
              result = TtTrkRpnNode::setUpNetBuffers(a5, (_DWORD *)(a1 + 8), a7);
              if (!(_DWORD)result)
              {
                if (!*(_BYTE *)(a2 + 8))
                  return TtTrkRpnNode::exemplarPreProcess(*(_QWORD *)a1, a2, (__int128 *)(a3 + 184), (int *)(a3 + 180), a4, a6);
                result = TtTrkRpnNode::restart(*(_QWORD *)a1, a4);
                if (!(_DWORD)result)
                  return TtTrkRpnNode::exemplarPreProcess(*(_QWORD *)a1, a2, (__int128 *)(a3 + 184), (int *)(a3 + 180), a4, a6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TtTrkRpnInstancePreProcess(uint64_t a1, uint64_t a2, uint64_t a3, float32x2_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            if (a7)
            {
              result = TtTrkRpnNode::setUpNetBuffers(a5, (_DWORD *)(a1 + 8), a7);
              if (!(_DWORD)result)
              {
                if (*(_BYTE *)(a2 + 8))
                  return 4294967294;
                else
                  return TtTrkRpnNode::instancePreProcess(*(_QWORD *)a1, a2, a3 + 184, a3 + 180, a4, a6);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TtTrkRpnPreProcessCropResizeTempBytes(rtcv *a1, int a2, _DWORD *a3)
{
  *a3 = rtcv::simImageChMeanTempBytes(a1, a2);
  return 0;
}

uint64_t TtTrkRpnPreProcessCropResizeRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  void **v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;

  if (!a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (*(_QWORD *)a1)
    {
      if (a4)
      {
        if (a6)
        {
          if (*(_QWORD *)a3)
          {
            if ((*(_BYTE *)(a3 + 12) & 3) == 0)
            {
              v13 = (void **)(a1 + 220);
              result = TtTrkRpnNode::setUpNetBuffers(a7, (_DWORD *)(a1 + 8), a1 + 220);
              if (!(_DWORD)result)
              {
                if (*(_BYTE *)(a4 + 80))
                {
                  *(_BYTE *)(a4 + 80) = 0;
                  if (!*v13)
                    return 4294967292;
                  v14 = *(_DWORD *)(a1 + 232);
                  if (v14 != *(_DWORD *)(a1 + 28) * *(_DWORD *)(a1 + 20))
                    return 4294967292;
                  v15 = *(_DWORD *)(a1 + 228);
                  if (v15 != *(_DWORD *)(a1 + 24))
                    return 4294967292;
                  v16 = *(_DWORD *)(a1 + 236);
                  result = 4294967292;
                  if (v16 < v14 || (v16 & 0x3F) != 0)
                    return result;
                  if (!rtcv::simCropResizeExtendMean(*(void **)a3, *(_DWORD *)(a3 + 12) >> 2, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), 0, 0, 0, *v13, *(float *)(a6 + 112), *(float *)(a6 + 116), (float)v15 / fmaxf(*(float *)(a6 + 124), 1.0), v14 >> 2, v15, v16, a6 + 1858))return 4294967288;
                }
                if (!*(_BYTE *)(a4 + 81))
                  return 0;
                *(_BYTE *)(a4 + 81) = 0;
                if (*(_QWORD *)(a1 + 244))
                {
                  v17 = *(_DWORD *)(a1 + 256);
                  if (v17 == *(_DWORD *)(a1 + 44) * *(_DWORD *)(a1 + 36)
                    && *(_DWORD *)(a1 + 252) == *(_DWORD *)(a1 + 40))
                  {
                    v18 = *(_DWORD *)(a1 + 260);
                    result = 4294967292;
                    if (v18 < v17)
                      return result;
                    if ((v18 & 0x3F) != 0)
                      return result;
                    rtcv::simImageChMean(*(const unsigned __int8 **)a3, *(_DWORD *)(a3 + 12) >> 2, *(_DWORD *)(a3 + 8), 0, *(float **)a5, *(_DWORD *)(a5 + 8), (_BYTE *)(a6 + 1858));
                    v19 = rtcv::simCropResizeExtendMean(*(void **)a3, *(_DWORD *)(a3 + 12) >> 2, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), 0, 0, 0, *(void **)(a1 + 244), *(float *)(a6 + 96), *(float *)(a6 + 100), (float)*(unsigned int *)(a1 + 252) / fmaxf(*(float *)(a6 + 108), 1.0), *(_DWORD *)(a1 + 256) >> 2, *(_DWORD *)(a1 + 252), *(_DWORD *)(a1 + 260), a6 + 1858);
                    result = 0;
                    if (v19)
                      return result;
                    return 4294967288;
                  }
                }
                return 4294967292;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 TtTrkRpnGetExemplarCrop(__n128 *a1, __n128 *a2)
{
  __n128 result;

  if (a2)
  {
    if (a1[116].n128_u8[0])
    {
      result = a1[6];
      *a2 = result;
    }
  }
  return result;
}

__n128 TtTrkRpnGetInstanceCrop(__n128 *a1, __n128 *a2)
{
  __n128 result;

  if (a2)
  {
    if (a1[116].n128_u8[1])
    {
      result = a1[7];
      *a2 = result;
    }
  }
  return result;
}

__n128 TtTrkRpnExemplarPostProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, _BYTE *a6)
{
  __n128 result;
  _BYTE *v11;
  __n128 *v12;

  if (a1
    && *(_QWORD *)a1
    && a2
    && a3
    && a5
    && a6
    && !TtTrkRpnNode::setUpNetBuffers(a3, (_DWORD *)(a1 + 8), a1 + 220)
    && !TtTrkRpnNode::exemplarPostProcess(*(_QWORD *)a1, a1 + 268, 2u, a2, a5)
    && *a6 <= 2uLL)
  {
    v11 = &a6[20 * *a6];
    *(_OWORD *)(v11 + 21) = xmmword_20CCAB1A1;
    *(_DWORD *)(v11 + 37) = 0;
    v12 = (__n128 *)TtTrkRpnNode::config(*(TtTrkRpnNode **)a1);
    result = *v12;
    *(_DWORD *)(v11 + 97) = v12[1].n128_u32[0];
    *(__n128 *)(v11 + 81) = result;
    ++*a6;
  }
  return result;
}

uint64_t TtTrkRpnInstancePostProcess(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t result;
  unsigned int v11;

  if (!a1)
    return 4294967292;
  if (!*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        if (a6)
        {
          result = TtTrkRpnNode::setUpNetBuffers(a3, (_DWORD *)(a1 + 8), a1 + 220);
          if (!(_DWORD)result)
          {
            result = TtTrkRpnNode::instancePostProcess(*(_QWORD *)a1, a1 + 316, 2, a2, a5, (uint64_t)(a6 + 184), (_DWORD *)a6 + 45);
            if (!(_DWORD)result)
            {
              v11 = *a6;
              if (v11 <= 2)
              {
                result = 0;
                *a6 = v11 + 1;
                return result;
              }
              return 4294967292;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bmQsort(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  _QWORD v8[6];

  if (a2 >= 2 && a3)
  {
    v8[4] = v4;
    v8[5] = v5;
    v6 = a3 >> 2;
    if ((a3 & 3) != 0)
      v6 = a3;
    v8[0] = a3;
    v8[1] = v6;
    if ((a3 & 3) != 0)
      v7 = swap8;
    else
      v7 = swap32;
    v8[2] = a4;
    v8[3] = v7;
    return qsort_internal(result, a2, (uint64_t)v8);
  }
  return result;
}

uint64_t swap32(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;

  v4 = a4[1];
  if ((_DWORD)v4)
  {
    v5 = result + *a4 * a3;
    v6 = result + *a4 * a2;
    if (a4[1] < 8uLL
      || ((v7 = ((4 * v4 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4, v5 + v7 > v6) ? (v8 = v6 + v7 > v5) : (v8 = 0), v8))
    {
      v11 = (int *)(result + *a4 * a3);
      v12 = (int *)(result + *a4 * a2);
    }
    else
    {
      v9 = a4[1] & 7;
      v10 = a4[1] - v9;
      LODWORD(v4) = v4 & 7;
      v11 = (int *)(v5 + 4 * v10);
      v12 = (int *)(v6 + 4 * v10);
      v13 = (__int128 *)(v6 + 16);
      v14 = (__int128 *)(v5 + 16);
      do
      {
        v15 = *(v13 - 1);
        v16 = *v13;
        v17 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v17;
        *(v14 - 1) = v15;
        *v14 = v16;
        v13 += 2;
        v14 += 2;
        v10 -= 8;
      }
      while (v10);
      if (!v9)
        return result;
    }
    do
    {
      v18 = *v12;
      *v12++ = *v11;
      *v11++ = v18;
      LODWORD(v4) = v4 - 1;
    }
    while ((_DWORD)v4);
  }
  return result;
}

double swap8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char v13;
  __int128 *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;

  v4 = a4[1];
  if ((_DWORD)v4)
  {
    v5 = a1 + *a4 * a3;
    v6 = a1 + *a4 * a2;
    v7 = a4[1];
    if (v7 < 8 || ((v8 = (v4 - 1) + 1, v5 + v8 > v6) ? (v9 = v6 + v8 > v5) : (v9 = 0), v9))
    {
      v11 = (char *)(a1 + *a4 * a3);
      v12 = (char *)(a1 + *a4 * a2);
      goto LABEL_10;
    }
    if (v7 < 0x20)
    {
      v10 = 0;
      goto LABEL_17;
    }
    v10 = v7 - (a4[1] & 0x1FLL);
    v14 = (__int128 *)(v6 + 16);
    v15 = (__int128 *)(v5 + 16);
    v16 = v10;
    do
    {
      v17 = *(v14 - 1);
      v18 = *v14;
      v19 = *v15;
      *(v14 - 1) = *(v15 - 1);
      *v14 = v19;
      *(v15 - 1) = v17;
      *v15 = v18;
      v14 += 2;
      v15 += 2;
      v16 -= 32;
    }
    while (v16);
    if ((v4 & 0x1F) != 0)
    {
      if ((v4 & 0x1Fu) < 8uLL)
      {
        v12 = (char *)(v6 + v10);
        v11 = (char *)(v5 + v10);
        LODWORD(v4) = v4 - v10;
        goto LABEL_10;
      }
LABEL_17:
      v20 = v4 & 7;
      LODWORD(v4) = v4 - (v7 - v20);
      v11 = (char *)(v5 + v7 - v20);
      v12 = (char *)(v6 + v7 - v20);
      v21 = (_QWORD *)(v6 + v10);
      v22 = (_QWORD *)(v5 + v10);
      v23 = v10 + v20 - v7;
      do
      {
        *(_QWORD *)&v17 = *v21;
        *v21++ = *v22;
        *v22++ = v17;
        v23 += 8;
      }
      while (v23);
      if (!v20)
        return *(double *)&v17;
      do
      {
LABEL_10:
        v13 = *v12;
        *v12++ = *v11;
        *v11++ = v13;
        LODWORD(v4) = v4 - 1;
      }
      while ((_DWORD)v4);
    }
  }
  return *(double *)&v17;
}

uint64_t qsort_internal(uint64_t result, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  v5 = result;
  if (a2 >= 7)
  {
    do
    {
      v7 = 0;
      v8 = 0;
      v9 = v4 - 1;
      do
      {
        if ((*(int (**)(unint64_t, uint64_t))(a3 + 16))(v5 + *(_QWORD *)a3 * v9, v5 + *(_QWORD *)a3 * v8) >= 1)(*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24))(v5, v7++, v8, a3);
        ++v8;
      }
      while (v9 != v8);
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a3 + 24))(v5, v4 - 1, v7, a3);
      result = qsort_internal(v5, v7, a3);
      v5 += *(_QWORD *)a3 + *(_QWORD *)a3 * v7;
      v4 += ~v7;
    }
    while (v4 > 6);
  }
  if (v4 >= 2)
  {
    for (i = 1; i != v4; ++i)
    {
      v10 = i;
      do
      {
        v11 = v10 - 1;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(v5 + *(_QWORD *)a3 * (v10 - 1), v5 + *(_QWORD *)a3 * v10);
        if ((int)result < 1)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24))(v5, v10 - 1, v10, a3);
        --v10;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t bmHeapsort(uint64_t a1, unint64_t a2, unint64_t a3, int (*a4)(uint64_t, uint64_t))
{
  unint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, _QWORD *);
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  int (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t, uint64_t, uint64_t, _QWORD *);

  if (!a3)
    return 0xFFFFFFFFLL;
  v6 = a3 >> 2;
  if ((a3 & 3) != 0)
    v6 = a3;
  v26[0] = a3;
  v26[1] = v6;
  if ((a3 & 3) != 0)
    v7 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD *))swap8;
  else
    v7 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD *))swap32;
  v27 = a4;
  v28 = v7;
  if (a2 < 7)
  {
    if (a2 >= 2)
    {
      if (v27(a1, v26[0] + a1) >= 1)
        v28(a1, 0, 1, v26);
      if (a2 != 2)
      {
        v17 = 2 - a2;
        v18 = -3;
        do
        {
          if (v27(a1 + v26[0] * (v18 + 4), a1 + v26[0] * (v18 + 5)) >= 1)
          {
            v28(a1, v18 + 4, v18 + 5, v26);
            if (v27(a1 + v26[0] * (v18 + 3), a1 + v26[0] * (v18 + 4)) >= 1)
            {
              v28(a1, v18 + 3, v18 + 4, v26);
              if (v18 != -3 && v27(a1 + v26[0] * (v18 + 2), a1 + v26[0] * (v18 + 3)) >= 1)
              {
                v28(a1, v18 + 2, v18 + 3, v26);
                if (v18 != -2 && v27(a1 + v26[0] * (v18 + 1), a1 + v26[0] * (v18 + 2)) >= 1)
                {
                  v28(a1, v18 + 1, v18 + 2, v26);
                  if (v18 != -1 && v27(a1 + v26[0] * v18, a1 + v26[0] * (v18 + 1)) >= 1)
                    v28(a1, v18, v18 + 1, v26);
                }
              }
            }
          }
          ++v18;
        }
        while (v17 + v18 != -3);
      }
    }
  }
  else
  {
    v8 = a2 - 1;
    if ((int)a2 >= 1)
    {
      if ((int)a2 >= 2)
        v8 = a2 - 2;
      v9 = (v8 >> 1);
      v10 = a2 - 1;
      do
      {
        v12 = (2 * v9) | 1;
        if (v12 <= v10)
        {
          v13 = 2 * v9;
          v14 = v9;
          do
          {
            if (v27(a1 + v26[0] * v12, a1 + v26[0] * v14) <= 0)
              v15 = v14;
            else
              v15 = v12;
            if (v13 + 2 <= v10 && v27(a1 + v26[0] * (v13 + 2), a1 + v26[0] * v15) > 0)
              v15 = v13 + 2;
            if (v15 == v14)
              break;
            v28(a1, v14, v15, v26);
            v13 = 2 * v15;
            v12 = (2 * v15) | 1;
            v14 = v15;
          }
          while (v12 <= v10);
        }
        v11 = (int)v9-- <= 0;
      }
      while (!v11);
      if ((int)a2 >= 2)
      {
        v19 = a2;
        do
        {
          v28(a1, 0, (v19 - 1), v26);
          v20 = (v19 - 2);
          if ((_DWORD)v19 != 2)
          {
            v21 = 0;
            v22 = 0;
            v23 = 1;
            do
            {
              if (v27(a1 + v26[0] * v23, a1 + v26[0] * v22) <= 0)
                v24 = v22;
              else
                v24 = v23;
              v25 = v21 + 2;
              if (v25 <= v20 && v27(a1 + v26[0] * v25, a1 + v26[0] * v24) > 0)
                v24 = v25;
              if (v24 == v22)
                break;
              v28(a1, v22, v24, v26);
              v21 = 2 * v24;
              v23 = (2 * v24) | 1;
              v22 = v24;
            }
            while (v23 <= v20);
          }
          v11 = v19-- <= 2;
        }
        while (!v11);
      }
    }
  }
  return 0;
}

uint64_t isort_internal(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;

  if (a2 >= 2)
  {
    v5 = result;
    for (i = 1; i != a2; ++i)
    {
      v7 = i;
      do
      {
        v8 = v7 - 1;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(v5 + *(_QWORD *)a3 * (v7 - 1), v5 + *(_QWORD *)a3 * v7);
        if ((int)result < 1)
          break;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 24))(v5, v7 - 1, v7, a3);
        --v7;
      }
      while (v8);
    }
  }
  return result;
}

void sub_20CC8DB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  ft *v11;
  NSObject *v12;

  if (a2 == 1)
  {
    v11 = (ft *)__cxa_begin_catch(exception_object);
    ft::GetOsLog(v11);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      -[FTBipartiteMatcher computeMatchingForCostMatrix:withRowCount:columnCount:].cold.1((uint64_t)v11, v12);

    __cxa_end_catch();
    JUMPOUT(0x20CC8DB44);
  }
  _Unwind_Resume(exception_object);
}

float bmMinimum(float result, float a2)
{
  if (result >= a2)
    return a2;
  return result;
}

uint64_t bmMinimum(uint64_t result, unsigned int a2)
{
  if (result >= a2)
    return a2;
  else
    return result;
}

uint64_t bmMinimum(uint64_t result, int a2)
{
  if ((int)result >= a2)
    return a2;
  else
    return result;
}

float bmMaximum(float result, float a2)
{
  if (result < a2)
    return a2;
  return result;
}

uint64_t bmMaximum(uint64_t result, unsigned int a2)
{
  if (result <= a2)
    return a2;
  else
    return result;
}

uint64_t bmMaximum(uint64_t result, int a2)
{
  if ((int)result <= a2)
    return a2;
  else
    return result;
}

uint64_t bmClamp(signed int a1, unsigned int a2, signed int a3)
{
  unsigned int v3;

  if (a3 >= a1)
    v3 = a1;
  else
    v3 = a3;
  if (a1 >= (int)a2)
    return v3;
  else
    return a2;
}

float bmClamp(float a1, float a2, float a3)
{
  if (a3 >= a1)
    a3 = a1;
  if (a1 >= a2)
    return a3;
  else
    return a2;
}

float bmSoftmax2(float a1, float a2)
{
  float v3;
  float v4;
  float v5;

  if (a1 >= a2)
    v3 = a1;
  else
    v3 = a2;
  v4 = expf(a1 - v3);
  v5 = expf(a2 - v3);
  return v5 / (float)(v4 + v5);
}

void bmSoftmax(float32x4_t *a1, float *a2, unsigned int a3, __n128 a4)
{
  float *v5;
  float *v6;
  float v7;
  float v8;
  uint64_t v9;
  float32x4_t v11;
  float32x4_t *v12;
  float *v13;
  uint64_t v14;
  float32x4_t v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  float v27;
  float v28;
  __n128 v29;
  uint64_t v30;
  float *v31;
  float32x2_t v32;
  uint64_t v33;
  float32x2_t v34;
  int v35;
  float v36;
  float v37;
  float v38;
  __n128 v39;
  float v40;

  v5 = a2;
  a4.n128_u32[0] = a1->i32[0];
  if (a3 >= 2)
  {
    v6 = &a1->f32[1];
    do
    {
      v7 = *v6++;
      v8 = v7;
      if (a4.n128_f32[0] < v7)
        a4.n128_f32[0] = v8;
    }
    while (v6 < &a1->f32[a3]);
  }
  if (!a3)
    return;
  v9 = 0;
  if (a3 < 8)
    goto LABEL_12;
  if ((unint64_t)((char *)a2 - (char *)a1) < 0x20)
    goto LABEL_12;
  v9 = a3 & 0xFFFFFFF8;
  v11 = (float32x4_t)vdupq_lane_s32((int32x2_t)a4.n128_u64[0], 0);
  v12 = a1 + 1;
  v13 = a2 + 4;
  v14 = v9;
  do
  {
    v15 = vsubq_f32(*v12, v11);
    *((float32x4_t *)v13 - 1) = vsubq_f32(v12[-1], v11);
    *(float32x4_t *)v13 = v15;
    v12 += 2;
    v13 += 8;
    v14 -= 8;
  }
  while (v14);
  if (v9 != a3)
  {
LABEL_12:
    v16 = &a1->f32[v9];
    v17 = &a2[v9];
    v18 = a3 - v9;
    do
    {
      v19 = *v16++;
      *v17++ = v19 - a4.n128_f32[0];
      --v18;
    }
    while (v18);
  }
  if (a3 == 1)
  {
    LODWORD(v20) = 0;
    a4.n128_u32[0] = 0;
    v21 = a2;
  }
  else
  {
    v20 = a3 & 0xFFFFFFFE;
    v21 = &a2[v20];
    v22 = a2 + 1;
    a4.n128_u32[0] = 0;
    v23 = v20;
    do
    {
      v38 = a4.n128_f32[0];
      v24 = *v22;
      v25 = expf(*(v22 - 1));
      a4.n128_f32[0] = (float)(v38 + v25) + expf(v24);
      v22 += 2;
      v23 -= 2;
    }
    while (v23);
    if (v20 == a3)
      goto LABEL_21;
  }
  v26 = a3 - v20;
  do
  {
    v39 = a4;
    v27 = *v21++;
    v28 = expf(v27);
    v29 = v39;
    v29.n128_f32[0] = v39.n128_f32[0] + v28;
    a4 = v29;
    --v26;
  }
  while (v26);
LABEL_21:
  v40 = a4.n128_f32[0];
  if (a3 == 1)
  {
    LODWORD(v30) = 0;
    v31 = v5;
LABEL_26:
    v35 = a3 - v30;
    do
    {
      *v31 = expf(*v31) / v40;
      ++v31;
      --v35;
    }
    while (v35);
    return;
  }
  v30 = a3 & 0xFFFFFFFE;
  v31 = &v5[v30];
  v32 = (float32x2_t)vdup_lane_s32((int32x2_t)a4.n128_u64[0], 0);
  v33 = v30;
  do
  {
    LODWORD(v36) = *(_QWORD *)v5;
    v37 = expf(COERCE_FLOAT(HIDWORD(*(_QWORD *)v5)));
    v34.f32[0] = expf(v36);
    v34.f32[1] = v37;
    *(float32x2_t *)v5 = vdiv_f32(v34, v32);
    v5 += 2;
    v33 -= 2;
  }
  while (v33);
  if (v30 != a3)
    goto LABEL_26;
}

void bmSoftmax(float32x4_t *a1, float *a2, unsigned int a3, unsigned int a4, double a5)
{
  unsigned int v5;
  float *v6;
  unint64_t v7;
  const float *v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  float *v12;
  uint64_t v13;
  float32x4_t v14;
  int v15;
  uint64_t v16;
  float v17;
  float *v18;
  unsigned int v19;

  v5 = a3;
  v6 = a2;
  LODWORD(a5) = a1->i32[0];
  v7 = 4 * a4;
  if (a4 * a3 > a4)
  {
    v8 = &a1->f32[v7 / 4];
    do
    {
      if (*(float *)&a5 < *v8)
        *(float *)&a5 = *v8;
      v8 = (const float *)((char *)v8 + v7);
    }
    while (v8 < &a1->f32[a4 * a3]);
  }
  if (a3)
  {
    v9 = 0;
    if (a3 < 8)
      goto LABEL_13;
    if (a4 != 1)
      goto LABEL_13;
    if ((unint64_t)((char *)a2 - (char *)a1) < 0x20)
      goto LABEL_13;
    v9 = a3 & 0xFFFFFFF8;
    v10 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v11 = a1 + 1;
    v12 = a2 + 4;
    v13 = v9;
    do
    {
      v14 = vsubq_f32(*v11, v10);
      *((float32x4_t *)v12 - 1) = vsubq_f32(v11[-1], v10);
      *(float32x4_t *)v12 = v14;
      v11 += 2;
      v12 += 8;
      v13 -= 8;
    }
    while (v13);
    if (v9 != a3)
    {
LABEL_13:
      v15 = a4 * v9;
      v16 = a3 - v9;
      do
      {
        a2[v15] = a1->f32[v15] - *(float *)&a5;
        v15 += a4;
        --v16;
      }
      while (v16);
    }
    v17 = 0.0;
    v18 = a2;
    v19 = a3;
    do
    {
      v17 = v17 + expf(*v18);
      v18 = (float *)((char *)v18 + v7);
      --v19;
    }
    while (v19);
    do
    {
      *v6 = expf(*v6) / v17;
      v6 = (float *)((char *)v6 + v7);
      --v5;
    }
    while (v5);
  }
}

uint64_t bmArgMax(signed __int8 *a1, int a2, int a3)
{
  uint64_t v3;
  signed __int8 v4;
  unsigned int v5;
  int v6;

  if (a2 == 1)
    return 0;
  if (!a2)
    bmArgMax();
  LODWORD(v3) = 0;
  v4 = *a1;
  v5 = 1;
  v6 = a3;
  do
  {
    if (a1[v6] <= v4)
    {
      v3 = v3;
    }
    else
    {
      v4 = a1[v6];
      v3 = v5;
    }
    ++v5;
    v6 += a3;
  }
  while (a2 != v5);
  return v3;
}

__n128 ft::TrackPool::TrackPool(__n128 *a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  result = *a2;
  v3 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  return result;
}

{
  __n128 result;
  unint64_t v3;

  result = *a2;
  v3 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[2].n128_u64[1] = 0;
  return result;
}

void ft::TrackPool::~TrackPool(ft::TrackPool *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
}

void **std::vector<std::shared_ptr<ft::Track>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t ft::TrackPool::GetActiveTracks(ft::TrackPool *this)
{
  return (uint64_t)this + 24;
}

uint64_t ft::TrackPool::GetTrackById@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(_QWORD **)(this + 24);
  v4 = *(_QWORD **)(this + 32);
  if (v3 == v4)
  {
LABEL_4:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      v5 = *v3;
      if (*(_QWORD *)(*v3 + 16) == a2)
        break;
      v3 += 2;
      if (v3 == v4)
        goto LABEL_4;
    }
    v6 = v3[1];
    *a3 = v5;
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return this;
}

void ft::TrackPool::MaybeCreateNewTrack(uint64_t a1@<X0>, int **a2@<X1>, _QWORD *a3@<X8>)
{
  _BYTE v3[16];

  if (*(_BYTE *)(a1 + 8)
    && *(_QWORD *)a1 <= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v3[0] = 0;
    v3[8] = 0;
    ft::TrackPool::CreateNewTrack(a1, a2, 1, (uint64_t)v3, (uint64_t)a3);
  }
}

void ft::TrackPool::CreateNewTrack(uint64_t a1@<X0>, int **a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int *v8;
  int *v9;
  int v10;
  int v11;
  _QWORD *v13;
  __n128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _OWORD *v30;
  std::runtime_error *exception;
  std::string *v33;
  __int128 v34;
  std::string __dst;
  _BYTE v36[32];
  uint64_t v37;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v37 = 0;
  if (*(_BYTE *)(a4 + 8))
  {
    v37 = *(_QWORD *)a4;
    v8 = *a2;
    v9 = a2[1];
    if (v9 != (int *)5)
    {
LABEL_3:
      if (v9 != (int *)6)
        goto LABEL_35;
      v10 = *v8;
      v11 = *((unsigned __int16 *)v8 + 2);
      if (v10 != 1835819371 || v11 != 28257)
        goto LABEL_35;
      *(_OWORD *)v36 = xmmword_20CCAB240;
      *(_OWORD *)&v36[16] = xmmword_20CCAB250;
      v13 = operator new(0x270uLL);
      v13[2] = 0;
      *v13 = &unk_24C55EAB8;
      v13[1] = 0;
      v14.n128_f32[0] = ft::KalmanTrack::KalmanTrack((ft::Track *)(v13 + 4), &v37, (uint64_t)v36);
      v15 = *(std::__shared_weak_count **)(a5 + 8);
      *(_QWORD *)a5 = v16;
      *(_QWORD *)(a5 + 8) = v13;
      if (!v15)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      goto LABEL_23;
    }
  }
  else
  {
    do
      v19 = __ldaxr(&ft::ReserveNewTrackId(void)::track_id_ctr);
    while (__stlxr(v19 + 1, &ft::ReserveNewTrackId(void)::track_id_ctr));
    v37 = v19 | 0x100000000;
    v8 = *a2;
    v9 = a2[1];
    if (v9 != (int *)5)
      goto LABEL_3;
  }
  v20 = *v8;
  v21 = *((unsigned __int8 *)v8 + 4);
  if (v20 != 2020569712 || v21 != 121)
  {
LABEL_35:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string<std::string_view,0>(&__dst, (uint64_t)a2);
    v33 = std::string::insert(&__dst, 0, "Unknown track type encountered: ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    *(_QWORD *)&v36[16] = *((_QWORD *)&v33->__r_.__value_.__l + 2);
    *(_OWORD *)v36 = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)v36);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v23 = operator new(0x120uLL);
  v23[2] = 0;
  *v23 = &unk_24C55EA80;
  v23[1] = 0;
  ft::ProxyTrack::ProxyTrack((ft::ProxyTrack *)(v23 + 3), &v37);
  v15 = *(std::__shared_weak_count **)(a5 + 8);
  *(_QWORD *)a5 = v24;
  *(_QWORD *)(a5 + 8) = v23;
  if (!v15)
    goto LABEL_24;
  v25 = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldaxr(v25);
  while (__stlxr(v18 - 1, v25));
LABEL_23:
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v14);
    std::__shared_weak_count::__release_weak(v15);
    if (!a3)
      return;
    goto LABEL_25;
  }
LABEL_24:
  if (!a3)
    return;
LABEL_25:
  v26 = *(_QWORD **)(a1 + 32);
  if ((unint64_t)v26 >= *(_QWORD *)(a1 + 40))
  {
    v30 = std::vector<std::shared_ptr<ft::Track>>::__emplace_back_slow_path<std::shared_ptr<ft::Track>&>(a1 + 24, (__int128 *)a5);
  }
  else
  {
    *v26 = *(_QWORD *)a5;
    v27 = *(_QWORD *)(a5 + 8);
    v26[1] = v27;
    if (v27)
    {
      v28 = (unint64_t *)(v27 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = v26 + 2;
  }
  *(_QWORD *)(a1 + 32) = v30;
}

void sub_20CC8E5B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_20CC8E5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<ft::Track>::~shared_ptr[abi:ne180100](v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

_QWORD *std::string::basic_string<std::string_view,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v3;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((_BYTE *)v5 + v3) = 0;
  return __dst;
}

void ft::TrackPool::CreateNewDetectionlessTrack(ft::TrackPool *this@<X0>, uint64_t a2@<X8>)
{
  _BYTE v2[16];

  v2[0] = 0;
  v2[8] = 0;
  ft::TrackPool::CreateNewTrack((uint64_t)this, (int **)&ft::ProxyTrack::KIND, 1, (uint64_t)v2, a2);
}

__int128 *ft::TrackPool::RetireLostTracks(ft::TrackPool *this)
{
  __int128 *v1;
  char *v2;
  __int128 *v3;
  __int128 *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v1 = (__int128 *)*((_QWORD *)this + 3);
  v3 = (__int128 *)*((_QWORD *)this + 4);
  v2 = (char *)this + 24;
  if (v1 == v3)
  {
    v3 = (__int128 *)*((_QWORD *)this + 3);
LABEL_6:
    v5 = v1;
    return std::vector<std::shared_ptr<ft::Track>>::erase((uint64_t)v2, v5, v3);
  }
  while (!*(_BYTE *)(*(_QWORD *)v1 + 240))
  {
    if (++v1 == v3)
    {
      v5 = (__int128 *)*((_QWORD *)this + 4);
      return std::vector<std::shared_ptr<ft::Track>>::erase((uint64_t)v2, v5, v3);
    }
  }
  if (v1 == v3)
    goto LABEL_6;
  v6 = v1 + 1;
  if (v1 + 1 == v3)
    goto LABEL_6;
  v5 = v1;
  do
  {
    v7 = v6;
    v8 = *v6;
    if (!*(_BYTE *)(v8 + 240))
    {
      v9 = *((_QWORD *)v1 + 3);
      *v7 = 0;
      v7[1] = 0;
      v10 = (std::__shared_weak_count *)*((_QWORD *)v5 + 1);
      *(_QWORD *)v5 = v8;
      *((_QWORD *)v5 + 1) = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v5;
    }
    v6 = v7 + 2;
    v1 = (__int128 *)v7;
  }
  while (v7 + 2 != (_QWORD *)v3);
  v3 = (__int128 *)*((_QWORD *)this + 4);
  return std::vector<std::shared_ptr<ft::Track>>::erase((uint64_t)v2, v5, v3);
}

__int128 *std::vector<std::shared_ptr<ft::Track>>::erase(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  if (a2 != a3)
  {
    v5 = a3;
    v6 = *(__int128 **)(a1 + 8);
    v7 = a2;
    if (a3 != v6)
    {
      do
      {
        v8 = *v5;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
        v9 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
        *v7 = v8;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        ++v5;
        ++v7;
      }
      while (v5 != v6);
      v5 = *(__int128 **)(a1 + 8);
    }
    while (v5 != v7)
    {
      v12 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      --v5;
    }
    *(_QWORD *)(a1 + 8) = v7;
  }
  return a2;
}

BOOL ft::TrackPool::RemoveTrack(uint64_t a1, uint64_t a2)
{
  __int128 *v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  _BOOL8 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (*(_QWORD *)a2)
  {
    v3 = *(__int128 **)(a1 + 24);
    v5 = *(__int128 **)(a1 + 32);
    v4 = a1 + 24;
    if (v3 == v5)
    {
      v5 = *(__int128 **)(a1 + 24);
    }
    else
    {
      v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
      while (*(_QWORD *)(*(_QWORD *)v3 + 16) != v6)
      {
        if (++v3 == v5)
        {
          v7 = *(__int128 **)(a1 + 32);
          goto LABEL_22;
        }
      }
      if (v3 != v5)
      {
        v9 = v3 + 1;
        if (v3 + 1 != v5)
        {
          v7 = v3;
          do
          {
            v10 = v9;
            v11 = *v9;
            if (*(_QWORD *)(v11 + 16) != v6)
            {
              v12 = *((_QWORD *)v3 + 3);
              *v10 = 0;
              v10[1] = 0;
              v13 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
              *(_QWORD *)v7 = v11;
              *((_QWORD *)v7 + 1) = v12;
              if (v13)
              {
                p_shared_owners = (unint64_t *)&v13->__shared_owners_;
                do
                  v15 = __ldaxr(p_shared_owners);
                while (__stlxr(v15 - 1, p_shared_owners));
                if (!v15)
                {
                  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                  std::__shared_weak_count::__release_weak(v13);
                }
              }
              ++v7;
            }
            v9 = v10 + 2;
            v3 = (__int128 *)v10;
          }
          while (v10 + 2 != (_QWORD *)v5);
          v5 = *(__int128 **)(a1 + 32);
          goto LABEL_22;
        }
      }
    }
    v7 = v3;
LABEL_22:
    v8 = v7 != v5;
    std::vector<std::shared_ptr<ft::Track>>::erase(v4, v7, v5);
    return v8;
  }
  return 0;
}

BOOL ft::TrackPool::RemoveTrackById(ft::TrackPool *this, uint64_t a2)
{
  __int128 *v2;
  char *v3;
  __int128 *v4;
  __int128 *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = (__int128 *)*((_QWORD *)this + 3);
  v4 = (__int128 *)*((_QWORD *)this + 4);
  v3 = (char *)this + 24;
  if (v2 == v4)
  {
    v4 = (__int128 *)*((_QWORD *)this + 3);
LABEL_6:
    v7 = v2;
    goto LABEL_19;
  }
  while (*(_QWORD *)(*(_QWORD *)v2 + 16) != a2)
  {
    if (++v2 == v4)
    {
      v7 = (__int128 *)*((_QWORD *)this + 4);
      goto LABEL_19;
    }
  }
  if (v2 == v4)
    goto LABEL_6;
  v8 = v2 + 1;
  if (v2 + 1 == v4)
    goto LABEL_6;
  v7 = v2;
  do
  {
    v9 = v8;
    v10 = *v8;
    if (*(_QWORD *)(v10 + 16) != a2)
    {
      v11 = *((_QWORD *)v2 + 3);
      *v9 = 0;
      v9[1] = 0;
      v12 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
      *(_QWORD *)v7 = v10;
      *((_QWORD *)v7 + 1) = v11;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      ++v7;
    }
    v8 = v9 + 2;
    v2 = (__int128 *)v9;
  }
  while (v9 + 2 != (_QWORD *)v4);
  v4 = (__int128 *)*((_QWORD *)this + 4);
LABEL_19:
  std::vector<std::shared_ptr<ft::Track>>::erase((uint64_t)v3, v7, v4);
  return v7 != v4;
}

void ft::TrackPool::Reset(ft::TrackPool *this)
{
  uint64_t v2;
  uint64_t i;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v2; i -= 16)
  {
    v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  *((_QWORD *)this + 4) = v2;
}

void ft::TrackPool::ReincarnateTrack(uint64_t a1@<X0>, uint64_t a2@<X1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  char v21;

  v8 = *(__int128 **)(a1 + 24);
  v10 = *(__int128 **)(a1 + 32);
  v9 = a1 + 24;
  if (v8 == v10)
  {
    v10 = *(__int128 **)(a1 + 24);
LABEL_7:
    v12 = v8;
    goto LABEL_20;
  }
  v11 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  while (*(_QWORD *)(*(_QWORD *)v8 + 16) != v11)
  {
    if (++v8 == v10)
    {
      v12 = *(__int128 **)(a1 + 32);
      goto LABEL_20;
    }
  }
  if (v8 == v10)
    goto LABEL_7;
  v13 = v8 + 1;
  if (v8 + 1 == v10)
    goto LABEL_7;
  v12 = v8;
  do
  {
    v14 = v13;
    v15 = *v13;
    if (*(_QWORD *)(v15 + 16) != v11)
    {
      v16 = *((_QWORD *)v8 + 3);
      *v14 = 0;
      v14[1] = 0;
      v17 = (std::__shared_weak_count *)*((_QWORD *)v12 + 1);
      *(_QWORD *)v12 = v15;
      *((_QWORD *)v12 + 1) = v16;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      ++v12;
    }
    v13 = v14 + 2;
    v8 = (__int128 *)v14;
  }
  while (v14 + 2 != (_QWORD *)v10);
  v10 = *(__int128 **)(a1 + 32);
LABEL_20:
  std::vector<std::shared_ptr<ft::Track>>::erase(v9, v12, v10);
  v20 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v21 = 1;
  ft::TrackPool::CreateNewTrack(a1, a3, v12 != v10, (uint64_t)&v20, a4);
}

void ft::TrackPool::UpdateForeignTracks(uint64_t this@<X0>, const Frame *a2@<X1>, void **a3@<X8>)
{
  ft::TrackPool *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  unint64_t v21;
  uint8x8_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *OsLog;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  NSObject *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  __int128 *v79;
  __int128 *v80;
  __int128 *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  _QWORD *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t v97;
  char v98;
  __int128 v99;
  uint8_t v100;
  char v101[7];
  unint64_t v102;
  void *v103[2];
  void *__p[2];
  int v105;
  uint8_t buf[16];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  char v116;
  char v117;
  uint64_t v118;
  uint64_t v119;

  v3 = (ft::TrackPool *)this;
  v119 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(_OWORD *)v103 = 0u;
  *(_OWORD *)__p = 0u;
  v105 = 1065353216;
  v5 = *((_QWORD *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  if (v5 != v6)
  {
    __asm { FMOV            V8.2S, #-1.0 }
    do
    {
      if (*(_BYTE *)(v5 + 104))
      {
        v21 = *(_QWORD *)(v5 + 96);
        v102 = v21;
        if ((v21 & 0x100000000) != 0)
        {
          OsLog = ft::GetOsLog((ft *)this);
          this = os_log_type_enabled(OsLog, OS_LOG_TYPE_ERROR);
          if ((_DWORD)this)
            ft::TrackPool::UpdateForeignTracks(&v100, v101, OsLog);
        }
        else
        {
          if (v103[1])
          {
            v22 = (uint8x8_t)vcnt_s8((int8x8_t)v103[1]);
            v22.i16[0] = vaddlv_u8(v22);
            if (v22.u32[0] > 1uLL)
            {
              v23 = v21;
              if ((void *)v21 >= v103[1])
                v23 = v21 % (unint64_t)v103[1];
            }
            else
            {
              v23 = ((unint64_t)v103[1] - 1) & v21;
            }
            v32 = (_QWORD *)*((_QWORD *)v103[0] + v23);
            if (v32)
            {
              v33 = (_QWORD *)*v32;
              if (v33)
              {
                if (v22.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    v35 = v33[1];
                    if (v21 == v35)
                    {
                      if (v33[2] == v21)
                        goto LABEL_59;
                    }
                    else if ((v35 & ((uint64_t)v103[1] - 1)) != v23)
                    {
                      goto LABEL_40;
                    }
                    v33 = (_QWORD *)*v33;
                    if (!v33)
                      goto LABEL_40;
                  }
                }
                do
                {
                  v34 = v33[1];
                  if (v21 == v34)
                  {
                    if (v33[2] == v21)
                    {
LABEL_59:
                      v69 = ft::GetOsLog((ft *)this);
                      this = os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
                      if ((_DWORD)this)
                      {
                        *(_DWORD *)buf = 134217984;
                        *(_QWORD *)&buf[4] = v102;
                        _os_log_error_impl(&dword_20CC71000, v69, OS_LOG_TYPE_ERROR, "Duplicate track ID provided in observation: %lld", buf, 0xCu);
                      }
                      goto LABEL_5;
                    }
                  }
                  else
                  {
                    if ((void *)v34 >= v103[1])
                      v34 %= (unint64_t)v103[1];
                    if (v34 != v23)
                      break;
                  }
                  v33 = (_QWORD *)*v33;
                }
                while (v33);
              }
            }
          }
LABEL_40:
          std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>((uint64_t)v103, &v102, &v102);
          v36 = (uint64_t *)*((_QWORD *)v3 + 3);
          v37 = (uint64_t *)*((_QWORD *)v3 + 4);
          if (v36 == v37)
          {
LABEL_43:
            v99 = 0uLL;
            v97 = v102;
            v98 = 1;
            ft::TrackPool::CreateNewTrack((uint64_t)v3, (int **)&ft::ProxyTrack::KIND, 1, (uint64_t)&v97, (uint64_t)buf);
            v39 = *(_OWORD *)buf;
            memset(buf, 0, sizeof(buf));
            v99 = v39;
            v38 = v39;
          }
          else
          {
            while (1)
            {
              v38 = *v36;
              if (*(_QWORD *)(*v36 + 16) == v102)
                break;
              v36 += 2;
              if (v36 == v37)
                goto LABEL_43;
            }
            *(_QWORD *)&v99 = *v36;
            v40 = v36[1];
            *((_QWORD *)&v99 + 1) = v40;
            if (v40)
            {
              v41 = (unint64_t *)(v40 + 8);
              do
                v42 = __ldxr(v41);
              while (__stxr(v42 + 1, v41));
            }
          }
          v43 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)buf = *(_OWORD *)v5;
          v107 = v43;
          v44 = *(_OWORD *)(v5 + 32);
          v45 = *(_OWORD *)(v5 + 48);
          v46 = *(_OWORD *)(v5 + 80);
          v110 = *(_OWORD *)(v5 + 64);
          v111 = v46;
          v108 = v44;
          v109 = v45;
          v47 = *(_OWORD *)(v5 + 96);
          v48 = *(_OWORD *)(v5 + 112);
          v49 = *(_OWORD *)(v5 + 128);
          v115 = *(_QWORD *)(v5 + 144);
          v113 = v48;
          v114 = v49;
          v112 = v47;
          v116 = 0;
          v117 = 0;
          v118 = _D8;
          this = ft::Track::Update(v38, (uint64_t)a2, buf);
          v50 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
          if (*((_QWORD *)&v99 + 1))
          {
            v51 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
      }
      else
      {
        v25 = (char *)a3[1];
        v24 = (unint64_t)a3[2];
        if ((unint64_t)v25 < v24)
        {
          v13 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)v25 = *(_OWORD *)v5;
          *((_OWORD *)v25 + 1) = v13;
          v14 = *(_OWORD *)(v5 + 32);
          v15 = *(_OWORD *)(v5 + 48);
          v16 = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v25 + 4) = *(_OWORD *)(v5 + 64);
          *((_OWORD *)v25 + 5) = v16;
          *((_OWORD *)v25 + 2) = v14;
          *((_OWORD *)v25 + 3) = v15;
          v17 = *(_OWORD *)(v5 + 96);
          v18 = *(_OWORD *)(v5 + 112);
          v19 = *(_OWORD *)(v5 + 128);
          *((_QWORD *)v25 + 18) = *(_QWORD *)(v5 + 144);
          *((_OWORD *)v25 + 7) = v18;
          *((_OWORD *)v25 + 8) = v19;
          *((_OWORD *)v25 + 6) = v17;
          v20 = v25 + 152;
        }
        else
        {
          v26 = (char *)*a3;
          v27 = 0x86BCA1AF286BCA1BLL * ((v25 - (_BYTE *)*a3) >> 3);
          v28 = v27 + 1;
          if (v27 + 1 > 0x1AF286BCA1AF286)
            std::vector<long long>::__throw_length_error[abi:ne180100]();
          v29 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0xD79435E50D7943)
            v30 = 0x1AF286BCA1AF286;
          else
            v30 = v28;
          if (v30)
          {
            if (v30 > 0x1AF286BCA1AF286)
              std::__throw_bad_array_new_length[abi:ne180100]();
            this = (uint64_t)operator new(152 * v30);
          }
          else
          {
            this = 0;
          }
          v53 = (char *)(this + 152 * v27);
          v54 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)v53 = *(_OWORD *)v5;
          *((_OWORD *)v53 + 1) = v54;
          v55 = *(_OWORD *)(v5 + 32);
          v56 = *(_OWORD *)(v5 + 48);
          v57 = *(_OWORD *)(v5 + 80);
          *((_OWORD *)v53 + 4) = *(_OWORD *)(v5 + 64);
          *((_OWORD *)v53 + 5) = v57;
          *((_OWORD *)v53 + 2) = v55;
          *((_OWORD *)v53 + 3) = v56;
          v58 = *(_OWORD *)(v5 + 96);
          v59 = *(_OWORD *)(v5 + 112);
          v60 = *(_OWORD *)(v5 + 128);
          *((_QWORD *)v53 + 18) = *(_QWORD *)(v5 + 144);
          *((_OWORD *)v53 + 7) = v59;
          *((_OWORD *)v53 + 8) = v60;
          *((_OWORD *)v53 + 6) = v58;
          v61 = v53;
          if (v25 != v26)
          {
            do
            {
              v62 = *(_OWORD *)(v25 - 152);
              *(_OWORD *)(v61 - 136) = *(_OWORD *)(v25 - 136);
              *(_OWORD *)(v61 - 152) = v62;
              v63 = *(_OWORD *)(v25 - 120);
              v64 = *(_OWORD *)(v25 - 104);
              v65 = *(_OWORD *)(v25 - 88);
              *(_OWORD *)(v61 - 72) = *(_OWORD *)(v25 - 72);
              *(_OWORD *)(v61 - 88) = v65;
              *(_OWORD *)(v61 - 104) = v64;
              *(_OWORD *)(v61 - 120) = v63;
              v66 = *(_OWORD *)(v25 - 56);
              v67 = *(_OWORD *)(v25 - 40);
              v68 = *(_OWORD *)(v25 - 24);
              *((_QWORD *)v61 - 1) = *((_QWORD *)v25 - 1);
              *(_OWORD *)(v61 - 24) = v68;
              *(_OWORD *)(v61 - 40) = v67;
              *(_OWORD *)(v61 - 56) = v66;
              v61 -= 152;
              v25 -= 152;
            }
            while (v25 != v26);
            v25 = v26;
          }
          v20 = v53 + 152;
          *a3 = v61;
          a3[1] = v53 + 152;
          a3[2] = (void *)(this + 152 * v30);
          if (v25)
            operator delete(v25);
        }
        a3[1] = v20;
      }
LABEL_5:
      v5 += 152;
    }
    while (v5 != v6);
  }
  std::vector<std::shared_ptr<ft::Track>>::vector(buf, (uint64_t)v3 + 24);
  v70 = *(_QWORD **)buf;
  v71 = *(_QWORD **)&buf[8];
  if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
  {
    if (!*(_QWORD *)buf)
      goto LABEL_103;
LABEL_63:
    v72 = *(_QWORD **)&buf[8];
    if (*(_QWORD **)&buf[8] == v70)
    {
      *(_QWORD *)&buf[8] = v70;
      operator delete(v70);
      v73 = __p[0];
      if (!__p[0])
        goto LABEL_105;
    }
    else
    {
      do
      {
        v91 = (std::__shared_weak_count *)*(v72 - 1);
        if (v91)
        {
          p_shared_owners = (unint64_t *)&v91->__shared_owners_;
          do
            v93 = __ldaxr(p_shared_owners);
          while (__stlxr(v93 - 1, p_shared_owners));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v72 -= 2;
      }
      while (v72 != v70);
      *(_QWORD *)&buf[8] = v70;
      operator delete(*(void **)buf);
      v73 = __p[0];
      if (!__p[0])
        goto LABEL_105;
    }
    do
    {
LABEL_104:
      v94 = (_QWORD *)*v73;
      operator delete(v73);
      v73 = v94;
    }
    while (v94);
    goto LABEL_105;
  }
  do
  {
    v74 = *v70;
    v75 = *(_QWORD *)(*v70 + 16);
    if ((v75 & 0x100000000) != 0 || *(_QWORD *)(v74 + 256) <= *((_QWORD *)v3 + 2))
      goto LABEL_66;
    v76 = (std::__shared_weak_count *)v70[1];
    v96 = v76;
    if (v76)
    {
      v77 = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldxr(v77);
      while (__stxr(v78 + 1, v77));
      v75 = *(_QWORD *)(v74 + 16);
    }
    v79 = (__int128 *)*((_QWORD *)v3 + 3);
    v80 = (__int128 *)*((_QWORD *)v3 + 4);
    if (v79 == v80)
    {
      v80 = (__int128 *)*((_QWORD *)v3 + 3);
    }
    else
    {
      while (*(_QWORD *)(*(_QWORD *)v79 + 16) != v75)
      {
        if (++v79 == v80)
        {
          v81 = (__int128 *)*((_QWORD *)v3 + 4);
          goto LABEL_91;
        }
      }
      if (v79 != v80)
      {
        v82 = v79 + 1;
        if (v79 + 1 != v80)
        {
          v81 = v79;
          do
          {
            v83 = v82;
            v84 = *v82;
            if (*(_QWORD *)(v84 + 16) != v75)
            {
              v85 = *((_QWORD *)v79 + 3);
              *v83 = 0;
              v83[1] = 0;
              v86 = (std::__shared_weak_count *)*((_QWORD *)v81 + 1);
              *(_QWORD *)v81 = v84;
              *((_QWORD *)v81 + 1) = v85;
              if (v86)
              {
                v87 = (unint64_t *)&v86->__shared_owners_;
                do
                  v88 = __ldaxr(v87);
                while (__stlxr(v88 - 1, v87));
                if (!v88)
                {
                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                  std::__shared_weak_count::__release_weak(v86);
                }
              }
              ++v81;
            }
            v82 = v83 + 2;
            v79 = (__int128 *)v83;
          }
          while (v83 + 2 != (_QWORD *)v80);
          v80 = (__int128 *)*((_QWORD *)v3 + 4);
          goto LABEL_91;
        }
      }
    }
    v81 = v79;
LABEL_91:
    std::vector<std::shared_ptr<ft::Track>>::erase((uint64_t)v3 + 24, v81, v80);
    if (v96)
    {
      v89 = (unint64_t *)&v96->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
LABEL_66:
    v70 += 2;
  }
  while (v70 != v71);
  v70 = *(_QWORD **)buf;
  if (*(_QWORD *)buf)
    goto LABEL_63;
LABEL_103:
  v73 = __p[0];
  if (__p[0])
    goto LABEL_104;
LABEL_105:
  v95 = v103[0];
  v103[0] = 0;
  if (v95)
    operator delete(v95);
}

void sub_20CC8F51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  void *v13;
  va_list va;

  va_start(va, a11);
  std::unordered_map<long long,CMTime>::~unordered_map[abi:ne180100]((uint64_t)va);
  v13 = *(void **)v11;
  if (!*(_QWORD *)v11)
    _Unwind_Resume(a1);
  *(_QWORD *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ft::KalmanTrack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ft::KalmanTrack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ft::KalmanTrack>::__on_zero_shared(uint64_t a1)
{
  ft::KalmanTrack::~KalmanTrack((ft::KalmanTrack *)(a1 + 32));
}

void std::__shared_ptr_emplace<ft::ProxyTrack>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ft::ProxyTrack>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EA80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

void std::__shared_ptr_emplace<ft::ProxyTrack>::__on_zero_shared(uint64_t a1)
{
  ft::ProxyTrack::~ProxyTrack((ft::ProxyTrack *)(a1 + 24));
}

_OWORD *std::vector<std::shared_ptr<ft::Track>>::__emplace_back_slow_path<std::shared_ptr<ft::Track>&>(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

_QWORD *std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::__emplace_unique_key_args<long long,long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  float v15;
  float v16;
  uint64_t v17;
  _QWORD *v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  unint64_t v23;
  uint8x8_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v6;
  v14[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    v17 = *(_QWORD *)a1;
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *v14 = *v18;
LABEL_61:
      *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    v19 = 1;
    if (v7 >= 3)
      v19 = (v7 & (v7 - 1)) != 0;
    v20 = v19 | (2 * v7);
    v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        v23 = std::__next_prime(v23);
      }
      else
      {
        v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2)
          v23 = v25;
      }
      if (prime <= v23)
        prime = v23;
      if (prime < v7)
LABEL_37:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v7 = *(_QWORD *)(a1 + 8);
    v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        v3 = v6 % v7;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v18)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v17 = *(_QWORD *)a1;
        v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v18)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = v26 & v6;
      v17 = *(_QWORD *)a1;
      v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v26 & v6));
      if (v18)
        goto LABEL_26;
    }
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v27 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7)
        v27 %= v7;
    }
    else
    {
      v27 &= v7 - 1;
    }
    v18 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20CC8FAA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::shared_ptr<ft::Track>>::vector(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_20CC8FB54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    std::vector<std::shared_ptr<ft::Track>>::vector((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20CC8FBEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC8FBFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC8FD6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC8FDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC8FE0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const __CFString *FTGetChipIdentifier()
{
  uint64_t v0;
  int v1;
  const __CFString *result;
  NSObject *v3;

  v0 = MGGetSInt64Answer();
  v1 = v0;
  if (v0 < 0x8000)
  {
    switch(v0)
    {
      case 24608:
      case 24609:
      case 24610:
LABEL_8:
        result = CFSTR("H14");
        break;
      case 24611:
      case 24612:
      case 24613:
      case 24614:
      case 24615:
      case 24616:
      case 24617:
      case 24618:
      case 24619:
      case 24620:
      case 24621:
      case 24622:
      case 24623:
      case 24628:
      case 24629:
      case 24630:
      case 24631:
      case 24632:
      case 24633:
      case 24634:
      case 24635:
      case 24636:
      case 24637:
      case 24638:
      case 24639:
      case 24643:
      case 24644:
      case 24645:
      case 24646:
      case 24647:
      case 24648:
      case 24649:
      case 24650:
      case 24651:
      case 24652:
      case 24653:
      case 24654:
      case 24655:
        goto LABEL_17;
      case 24624:
      case 24625:
      case 24626:
      case 24627:
LABEL_5:
        result = CFSTR("H15");
        break;
      case 24640:
      case 24641:
      case 24642:
LABEL_9:
        result = CFSTR("H16");
        break;
      case 24656:
      case 24657:
      case 24658:
LABEL_10:
        result = CFSTR("H17");
        break;
      default:
        if ((unint64_t)(v0 - 28672) >= 2)
        {
LABEL_17:
          ft::GetOsLog((ft *)v0);
          v3 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
            FTGetChipIdentifier_cold_1(v1, v3);

          result = 0;
        }
        else
        {
          result = CFSTR("H7");
        }
        break;
    }
  }
  else
  {
    switch(v0)
    {
      case 33025:
      case 33027:
        result = CFSTR("H13");
        break;
      case 33026:
      case 33028:
      case 33029:
      case 33030:
      case 33031:
      case 33032:
      case 33033:
      case 33034:
      case 33035:
      case 33036:
      case 33037:
      case 33038:
      case 33039:
      case 33041:
      case 33043:
      case 33044:
      case 33045:
      case 33046:
      case 33047:
      case 33048:
      case 33049:
      case 33050:
      case 33051:
      case 33052:
      case 33053:
      case 33054:
      case 33055:
      case 33057:
      case 33059:
      case 33060:
      case 33061:
      case 33062:
      case 33063:
      case 33064:
      case 33065:
      case 33066:
      case 33067:
      case 33068:
      case 33069:
      case 33070:
      case 33071:
      case 33073:
      case 33075:
      case 33076:
      case 33077:
      case 33078:
      case 33079:
      case 33080:
      case 33081:
      case 33082:
      case 33083:
      case 33084:
      case 33085:
      case 33086:
      case 33087:
      case 33089:
        goto LABEL_17;
      case 33040:
      case 33042:
        goto LABEL_8;
      case 33056:
      case 33058:
        goto LABEL_5;
      case 33072:
      case 33074:
        goto LABEL_9;
      case 33088:
      case 33090:
        goto LABEL_10;
      default:
        switch(v0)
        {
          case 32768:
          case 32769:
          case 32771:
            result = CFSTR("H8");
            break;
          case 32784:
          case 32785:
            result = CFSTR("H9");
            break;
          case 32789:
            result = CFSTR("H10");
            break;
          case 32800:
          case 32807:
            result = CFSTR("H11");
            break;
          case 32816:
            result = CFSTR("H12");
            break;
          default:
            goto LABEL_17;
        }
        break;
    }
  }
  return result;
}

id FTResolveEspressoNetPath(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  NSBundle *v14;
  void *v15;
  NSBundle *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = a1;
  objc_msgSend(MEMORY[0x24BDD1580], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "contentsOfDirectoryAtPath:error:", CFSTR("/System/Library/ImagingNetworks"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(MEMORY[0x24BDBCEB8], "array");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v5 = v3;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v19;
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v19 != v7)
            objc_enumerationMutation(v5);
          v9 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * i);
          if (objc_msgSend(v9, "hasSuffix:", CFSTR(".espresso.net"), (_QWORD)v18))
          {
            objc_msgSend(CFSTR("/System/Library/ImagingNetworks"), "stringByAppendingPathComponent:", v9);
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v4, "addObject:", v10);

          }
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      }
      while (v6);
    }

    SearchForEspressoNetInPaths(v4, v1);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v11 = 0;
  }

  if (v11)
  {
    v12 = v11;
    v13 = v12;
  }
  else
  {
    objc_msgSend(MEMORY[0x24BDD1488], "bundleWithIdentifier:", CFSTR("com.apple.Celestial"));
    v14 = (NSBundle *)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      objc_msgSend(MEMORY[0x24BDD1488], "bundleWithPath:", CFSTR("/System/Library/PrivateFrameworks/Celestial.framework"));
      v14 = (NSBundle *)objc_claimAutoreleasedReturnValue();
    }
    SearchForEspressoNetInBundle(v14, CFSTR("classifiers"), (NSString *)v1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v15;
    if (v15)
    {
      v13 = v15;
    }
    else
    {
      objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
      v16 = (NSBundle *)objc_claimAutoreleasedReturnValue();
      SearchForEspressoNetInBundle(v16, CFSTR("."), (NSString *)v1);
      v13 = (id)objc_claimAutoreleasedReturnValue();

    }
  }

  return v13;
}

void sub_20CC903B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id SearchForEspressoNetInBundle(NSBundle *a1, NSString *a2, NSString *a3)
{
  NSBundle *v5;
  NSString *v6;
  NSString *v7;
  void *v8;
  void *v9;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    -[NSBundle pathsForResourcesOfType:inDirectory:](v5, "pathsForResourcesOfType:inDirectory:", CFSTR(".net"), v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    SearchForEspressoNetInPaths(v8, v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_20CC904CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20CC904E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id SearchForEspressoNetInPaths(void *a1, void *a2)
{
  id v2;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  const char *v23;
  size_t v24;
  size_t v25;
  __int128 *p_dst;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  void **v31;
  void *v32;
  void **v33;
  void **v34;
  void *v35;
  void **v36;
  unint64_t v37;
  id v39;
  id v40;
  void *v41;
  _QWORD v42[4];
  id v43;
  _QWORD v44[4];
  id v45;
  void *v46;
  void **v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  char v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  int v59;
  void *__p;
  char v61;
  __int128 __dst;
  unint64_t v63;
  _OWORD v64[4];
  char v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v4 = a1;
  v5 = a2;
  objc_msgSend(v5, "stringByAppendingString:", CFSTR("."));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x24BDD1758];
  v8 = MEMORY[0x24BDAC760];
  v42[0] = MEMORY[0x24BDAC760];
  v42[1] = 3221225472;
  v42[2] = ___ZL27SearchForEspressoNetInPathsP7NSArrayIP8NSStringES1__block_invoke;
  v42[3] = &unk_24C55ED80;
  v9 = v6;
  v43 = v9;
  objc_msgSend(v7, "predicateWithBlock:", v42);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "filteredArrayUsingPredicate:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v11, "count"))
  {
    v2 = 0;
    goto LABEL_46;
  }
  if (objc_msgSend(v11, "count") != 1)
  {
    v12 = v11;
    FTGetChipIdentifier();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    if (v41)
    {
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR(".%@."), v41);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = (void *)MEMORY[0x24BDD1758];
      v44[0] = v8;
      v44[1] = 3221225472;
      v44[2] = ___ZL32SelectBestEspressoNetForPlatformP7NSArrayIP8NSStringE_block_invoke;
      v44[3] = &unk_24C55ED80;
      v15 = v13;
      v45 = v15;
      objc_msgSend(v14, "predicateWithBlock:", v44);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "filteredArrayUsingPredicate:", v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v18 = objc_msgSend(v17, "count");
      if (v18 == 1)
      {
        objc_msgSend(v17, "firstObject");
        v2 = (id)objc_claimAutoreleasedReturnValue();
      }

      if (v18 == 1)
        goto LABEL_45;
    }
    v19 = v12;
    objc_msgSend(v19, "sortedArrayUsingComparator:", &__block_literal_global_1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    memset(v64, 0, sizeof(v64));
    v21 = v20;
    if (!objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", v64, v65, 16))
    {
      v2 = 0;
LABEL_44:

LABEL_45:
      goto LABEL_46;
    }
    v40 = v12;
    v39 = v19;
    v22 = objc_retainAutorelease(**((id **)&v64[0] + 1));
    v23 = (const char *)objc_msgSend(v22, "UTF8String");
    v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v25 = v24;
    if (v24 >= 0x17)
    {
      v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v27 = v24 | 7;
      v28 = v27 + 1;
      p_dst = (__int128 *)operator new(v27 + 1);
      *((_QWORD *)&__dst + 1) = v25;
      v63 = v28 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v63) = v24;
      p_dst = &__dst;
      if (!v24)
      {
LABEL_18:
        *((_BYTE *)p_dst + v25) = 0;
        v50 = 0;
        v47 = 0;
        v48 = 0;
        v46 = 0;
        v49 = 0;
        v51 = -4294901744;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0u;
        v58 = 0u;
        v59 = 1065353216;
        v61 = 0;
        LOBYTE(__p) = 0;
        v29 = (std::__shared_weak_count *)operator new(0x128uLL);
        v29->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        v29->__shared_weak_owners_ = 0;
        v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C55EB60;
        ik::core::EspressoNetState::EspressoNetState((uint64_t)&v29[1], &__dst, (ik::EspressoConfig *)&v46);
        if (v61 < 0)
          operator delete(__p);
        v31 = (void **)v58;
        if ((_QWORD)v58)
        {
          do
          {
            v36 = (void **)*v31;
            if (*((char *)v31 + 39) < 0)
              operator delete(v31[2]);
            operator delete(v31);
            v31 = v36;
          }
          while (v36);
        }
        v32 = (void *)v57;
        *(_QWORD *)&v57 = 0;
        if (v32)
          operator delete(v32);
        v33 = (void **)v46;
        if (v46)
        {
          v34 = v47;
          v35 = v46;
          if (v47 != v46)
          {
            do
            {
              if (*((char *)v34 - 1) < 0)
                operator delete(*(v34 - 3));
              v34 -= 3;
            }
            while (v34 != v33);
            v35 = v46;
          }
          v47 = v33;
          operator delete(v35);
        }
        if (SHIBYTE(v63) < 0)
          operator delete((void *)__dst);
        v2 = v22;
        v12 = v40;
        do
          v37 = __ldaxr(p_shared_owners);
        while (__stlxr(v37 - 1, p_shared_owners));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        v19 = v39;
        goto LABEL_44;
      }
    }
    memmove(p_dst, v23, v25);
    goto LABEL_18;
  }
  objc_msgSend(v11, "firstObject");
  v2 = (id)objc_claimAutoreleasedReturnValue();
LABEL_46:

  return v2;
}

void sub_20CC90A68()
{
  JUMPOUT(0x20CC90A98);
}

void sub_20CC90AB4()
{
  void *v0;

  JUMPOUT(0x20CC90ABCLL);
}

void sub_20CC90AE0()
{
  void *v0;

  JUMPOUT(0x20CC90B04);
}

void sub_20CC90AEC()
{
  JUMPOUT(0x20CC90B04);
}

void sub_20CC90AF4()
{
  JUMPOUT(0x20CC90B10);
}

uint64_t ___ZL27SearchForEspressoNetInPathsP7NSArrayIP8NSStringES1__block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  objc_msgSend(a2, "lastPathComponent");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "hasPrefix:", *(_QWORD *)(a1 + 32));

  return v4;
}

void sub_20CC90B68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32SelectBestEspressoNetForPlatformP7NSArrayIP8NSStringE_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "containsString:", *(_QWORD *)(a1 + 32));
}

uint64_t ___ZL39SearchForPlatformCompatibleNetByLoadingP7NSArrayIP8NSStringE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "compare:options:", a2, 64);
}

int *ik::VerifyEspressoStatus(int *result, uint64_t *a2)
{
  int *v2;
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  if (*result)
  {
    v2 = result;
    ik::LogEspressoError((uint64_t)result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v4 = std::string::append(&v13, " [espresso error: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v12, *v2);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v12;
    else
      v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v14, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v15, "]");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v16);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24C55E8F8;
  }
  return result;
}

{
  int *v2;
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  if (*result)
  {
    v2 = result;
    ik::LogEspressoError((uint64_t)result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v4 = std::string::append(&v13, " [espresso error: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v12, *v2);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v12;
    else
      v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v14, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v15, "]");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v16);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24C55E8F8;
  }
  return result;
}

{
  int *v2;
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  if (*result)
  {
    v2 = result;
    ik::LogEspressoError((uint64_t)result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v4 = std::string::append(&v13, " [espresso error: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v12, *v2);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v12;
    else
      v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
    else
      size = v12.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v14, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v15, "]");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v16);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24C55E8F8;
  }
  return result;
}

void sub_20CC90CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t ___ZN2ikL28IsAppleNeuralEngineAvailableEv_block_invoke_0()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  _MergedGlobals_2 = result;
  return result;
}

double ft::Track::Track(ft::Track *this, const uint64_t *a2)
{
  double result;

  *(_QWORD *)this = off_24C55E880;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = *a2;
  *((_BYTE *)this + 232) = 0;
  *((_BYTE *)this + 240) = 0;
  *((_BYTE *)this + 56) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  return result;
}

uint64_t ft::Track::Predict(uint64_t this, const Frame *a2)
{
  std::runtime_error *exception;

  if (!*(_BYTE *)(this + 232))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Predict called before initialization");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (!*(_BYTE *)(this + 240))
  {
    ++*(_QWORD *)(this + 256);
    return (*(uint64_t (**)(uint64_t, const Frame *))(*(_QWORD *)this + 24))(this, a2);
  }
  return this;
}

void sub_20CC90EDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ft::Track::Update(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t result;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)(a1 + 248) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 256) = 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v6 = *(unsigned __int8 *)(a1 + 232);
  v8 = a3[1];
  v7 = a3[2];
  *(_OWORD *)(a1 + 56) = *a3;
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 88) = v7;
  v9 = a3[5];
  v10 = a3[6];
  v11 = a3[4];
  *(_OWORD *)(a1 + 104) = a3[3];
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v11;
  v12 = a3[9];
  v13 = a3[10];
  v14 = a3[8];
  *(_OWORD *)(a1 + 168) = a3[7];
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v14;
  if (!v6)
    *(_BYTE *)(a1 + 232) = 1;
  return result;
}

_QWORD *ft::CreateIOSurfaceBackedPixelBuffer@<X0>(ft *this@<X0>, size_t a2@<X1>, OSType a3@<W2>, _QWORD *a4@<X8>)
{
  const __CFDictionary *v8;
  CVPixelBufferRef v9;
  _QWORD *result;
  uint64_t (*v11)(_QWORD);
  std::runtime_error *exception;
  CVPixelBufferRef v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v13 = 0;
  v14 = *MEMORY[0x24BDC5668];
  v15[0] = MEMORY[0x24BDBD1B8];
  v8 = (const __CFDictionary *)objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], (size_t)this, a2, a3, v8, &v13))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create IOSurface-backed CVPixelBuffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v9 = v13;
  *a4 = v13;
  result = (_QWORD *)operator new();
  *result = &unk_24C55EC08;
  result[1] = 0;
  v11 = MEMORY[0x24BDC5398];
  result[2] = 0;
  result[3] = v9;
  result[4] = v11;
  a4[1] = result;
  return result;
}

void sub_20CC913CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CC913E0(_Unwind_Exception *exception_object, int a2)
{
  __CVBuffer *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    CVPixelBufferRelease(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_20CC91400(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20CC9140C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

CVPixelBufferPoolRef *ft::PixelBufferPool::PixelBufferPool(CVPixelBufferPoolRef *poolOut, const __CFDictionary *a2, const __CFDictionary *a3)
{
  CVReturn v4;
  int v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  *poolOut = 0;
  v4 = CVPixelBufferPoolCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, poolOut);
  if (v4)
  {
    v6 = v4;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v6);
    v8 = std::string::insert(&v10, 0, "Failed to create pixel buffer pool. Status = ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return poolOut;
}

void sub_20CC914EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

CVPixelBufferPoolRef *ft::PixelBufferPool::PixelBufferPool(CVPixelBufferPoolRef *a1, uint64_t a2, const __CFDictionary *a3)
{
  const __CFDictionary *v5;

  v5 = (const __CFDictionary *)ft::AsPoolAttribsDict(a2);
  return ft::PixelBufferPool::PixelBufferPool(a1, v5, a3);
}

{
  const __CFDictionary *v5;

  v5 = (const __CFDictionary *)ft::AsPoolAttribsDict(a2);
  return ft::PixelBufferPool::PixelBufferPool(a1, v5, a3);
}

void *ft::AsPoolAttribsDict(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void *v7;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *(_QWORD *)a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v3, *MEMORY[0x24BDC56F0]);

  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v4, *MEMORY[0x24BDC56E0]);

  v5 = (_QWORD *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(_QWORD *)(a1 + 24))
      goto LABEL_3;
    v5 = (_QWORD *)*v5;
  }
  else if (!*(_BYTE *)(a1 + 39))
  {
LABEL_3:

    return v2;
  }
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setValue:forKey:", v7, *MEMORY[0x24BDC56F8]);

  return v2;
}

void sub_20CC9168C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC916A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CVBuffer *ft::PixelBufferPool::NewPixelBuffer@<X0>(CVPixelBufferPoolRef *this@<X0>, CVPixelBufferRef *a2@<X8>)
{
  CVReturn v3;
  CVPixelBufferRef v4;
  __CVBuffer *result;
  int v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  CVPixelBufferRef pixelBufferOut;

  pixelBufferOut = 0;
  v3 = CVPixelBufferPoolCreatePixelBuffer((CFAllocatorRef)*MEMORY[0x24BDBD240], *this, &pixelBufferOut);
  if (v3)
  {
    v6 = v3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v6);
    v8 = std::string::insert(&v10, 0, "Failed to create pixel buffer. Status = ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v4 = pixelBufferOut;
  *a2 = pixelBufferOut;
  result = (__CVBuffer *)operator new();
  *(_QWORD *)result = &unk_24C55EC08;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = v4;
  *((_QWORD *)result + 4) = MEMORY[0x24BDC5398];
  a2[1] = result;
  return result;
}

void sub_20CC917F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __break(1u);
}

void sub_20CC9186C()
{
  __cxa_end_catch();
  JUMPOUT(0x20CC91874);
}

void ft::PixelBufferPool::~PixelBufferPool(__CVPixelBufferPool **this)
{
  __CVPixelBufferPool *v1;

  v1 = *this;
  if (v1)
    CVPixelBufferPoolRelease(v1);
}

{
  __CVPixelBufferPool *v1;

  v1 = *this;
  if (v1)
    CVPixelBufferPoolRelease(v1);
}

void std::__shared_ptr_pointer<__CVBuffer *,void (*)(__CVBuffer *),std::allocator<__CVBuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212B93F04);
}

uint64_t std::__shared_ptr_pointer<__CVBuffer *,void (*)(__CVBuffer *),std::allocator<__CVBuffer>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<__CVBuffer *,void (*)(__CVBuffer *),std::allocator<__CVBuffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020CCAB728)
    return a1 + 32;
  if (((v3 & 0x800000020CCAB728 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020CCAB728))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CCAB728 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 32;
  return 0;
}

unint64_t ttNonMaxSuppression(uint64_t a1, unint64_t a2, float a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  float v17;
  unsigned int v18;

  if (!a1)
    ttNonMaxSuppression();
  v3 = a2;
  if ((_DWORD)a2)
  {
    bmHeapsort(a1, a2, 0x24uLL, (int (*)(uint64_t, uint64_t))ttDetRectScoreCompare);
    v6 = 0;
    v7 = a1 + 36;
    v8 = 1;
    do
    {
      v9 = v6 + 1;
      v10 = v3;
      if (v6 + 1 >= v3)
      {
        v3 = v6 + 1;
      }
      else
      {
        v11 = (float *)(a1 + 36 * v6);
        v12 = v7;
        v13 = v8;
        v3 = v6 + 1;
        do
        {
          ttDetRectOverlap(v11, (float *)v12);
          if (v17 <= a3)
          {
            v18 = v3;
            if (v13 < v3)
              ttNonMaxSuppression();
            v3 = (v3 + 1);
            v14 = a1 + 36 * v18;
            v15 = *(_OWORD *)v12;
            v16 = *(_OWORD *)(v12 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v12 + 32);
            *(_OWORD *)v14 = v15;
            *(_OWORD *)(v14 + 16) = v16;
          }
          ++v13;
          v12 += 36;
        }
        while (v10 != (_DWORD)v13);
      }
      ++v8;
      v7 += 36;
      v6 = v9;
    }
    while (v9 < v3);
  }
  return v3;
}

unint64_t ttNonMaxSuppression2(uint64_t a1, unint64_t a2, float a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  float v17;
  unsigned int v18;

  if (!a1)
    ttNonMaxSuppression2();
  v3 = a2;
  if ((_DWORD)a2)
  {
    bmHeapsort(a1, a2, 0x24uLL, (int (*)(uint64_t, uint64_t))ttDetRectScoreCompare);
    v6 = 0;
    v7 = a1 + 36;
    v8 = 1;
    do
    {
      v9 = v6 + 1;
      v10 = v3;
      if (v6 + 1 >= v3)
      {
        v3 = v6 + 1;
      }
      else
      {
        v11 = (float *)(a1 + 36 * v6);
        v12 = v7;
        v13 = v8;
        v3 = v6 + 1;
        do
        {
          ttDetRectOverlap2(v11, (float *)v12);
          if (v17 <= a3)
          {
            v18 = v3;
            if (v13 < v3)
              ttNonMaxSuppression2();
            v3 = (v3 + 1);
            v14 = a1 + 36 * v18;
            v15 = *(_OWORD *)v12;
            v16 = *(_OWORD *)(v12 + 16);
            *(_DWORD *)(v14 + 32) = *(_DWORD *)(v12 + 32);
            *(_OWORD *)v14 = v15;
            *(_OWORD *)(v14 + 16) = v16;
          }
          ++v13;
          v12 += 36;
        }
        while (v10 != (_DWORD)v13);
      }
      ++v8;
      v7 += 36;
      v6 = v9;
    }
    while (v9 < v3);
  }
  return v3;
}

unint64_t ttNonMaxSuppressionSmallbox(uint64_t a1, unint64_t a2, float a3)
{
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (!a1)
    ttNonMaxSuppressionSmallbox();
  v3 = a2;
  if ((_DWORD)a2)
  {
    bmHeapsort(a1, a2, 0x24uLL, (int (*)(uint64_t, uint64_t))ttDetRectScoreCompare);
    v6 = 0;
    v7 = a1 + 36;
    v8 = 1;
    do
    {
      v9 = v6 + 1;
      v10 = v3;
      if (v6 + 1 >= v3)
      {
        v3 = v6 + 1;
      }
      else
      {
        v11 = a1 + 36 * v6;
        v12 = v7;
        v13 = v8;
        v3 = v6 + 1;
        do
        {
          if (*(_DWORD *)(v11 + 16) != *(_DWORD *)(v12 + 16)
            || (ttDetRectOverlapSmallbox((float *)v11, (float *)v12), v14 <= a3))
          {
            v15 = v3;
            if (v13 < v3)
              ttNonMaxSuppressionSmallbox();
            v3 = (v3 + 1);
            v16 = a1 + 36 * v15;
            v17 = *(_OWORD *)v12;
            v18 = *(_OWORD *)(v12 + 16);
            *(_DWORD *)(v16 + 32) = *(_DWORD *)(v12 + 32);
            *(_OWORD *)v16 = v17;
            *(_OWORD *)(v16 + 16) = v18;
          }
          ++v13;
          v12 += 36;
        }
        while (v10 != (_DWORD)v13);
      }
      ++v8;
      v7 += 36;
      v6 = v9;
    }
    while (v9 < v3);
  }
  return v3;
}

uint64_t ttRemoveOverlapBoxes(__int128 *a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, float a5)
{
  unsigned __int8 *v5;
  unint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t result;
  __int128 *v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  if (a2 > a4)
    ttRemoveOverlapBoxes();
  if (!a2)
    return 0;
  v5 = a3;
  v7 = a2;
  bzero(a3, a2);
  v8 = 0;
  v9 = (float *)a1 + 9;
  v10 = 1;
  do
  {
    v11 = v8 + 1;
    if (v8 + 1 < v7)
    {
      v12 = (float *)a1 + 9 * v8;
      v13 = v9;
      v14 = v10;
      do
      {
        ttDetRectOverlap(v12, v13);
        if (v15 > a5)
        {
          if (v12[6] <= v13[6])
            v16 = v8;
          else
            v16 = v14;
          v5[v16] = 1;
        }
        ++v14;
        v13 += 9;
      }
      while ((_DWORD)v7 != (_DWORD)v14);
    }
    ++v10;
    v9 += 9;
    ++v8;
  }
  while (v11 != v7);
  result = 0;
  v18 = a1;
  do
  {
    if (!*v5++)
    {
      v20 = (uint64_t)a1 + 36 * result;
      v21 = *v18;
      v22 = v18[1];
      *(_DWORD *)(v20 + 32) = *((_DWORD *)v18 + 8);
      *(_OWORD *)v20 = v21;
      *(_OWORD *)(v20 + 16) = v22;
      result = (result + 1);
    }
    v18 = (__int128 *)((char *)v18 + 36);
    --v7;
  }
  while (v7);
  return result;
}

BOOL ttCheckOverlapBox(float *a1, unsigned int a2, float *a3, float a4)
{
  float v8;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  float v13;

  if (!a2)
    return 0;
  ttDetRectOverlap(a1, a3);
  if (v8 > a4)
    return 1;
  v10 = a1 + 9;
  v11 = 1;
  do
  {
    v12 = v11;
    if (a2 == v11)
      break;
    ttDetRectOverlap(v10, a3);
    v11 = v12 + 1;
    v10 += 9;
  }
  while (v13 <= a4);
  return v12 < a2;
}

uint64_t rtcv::simResize(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, uint64_t a7, int a8, float a9, float a10, float a11, float a12, int a13, int a14)
{
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  if (a5 != 1)
    return 0;
  *(_QWORD *)&v32 = a1;
  *((_QWORD *)&v32 + 1) = __PAIR64__(a2, a3);
  v33 = a4 | 0x500000000;
  v30 = v32;
  v31 = v33;
  v21 = a4 * a3;
  if ((_DWORD)v21)
  {
    v22 = operator new(a4 * a3);
    bzero(v22, v21);
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)&v30 = v22;
  v25 = a7;
  v26 = a13;
  v27 = a8;
  v28 = a14;
  v29 = 5;
  if ((a6 - 1) <= 2)
  {
    v23 = simResizeVisPipe(&v32, (uint64_t)&v25, (unint64_t)&v30, dword_20CCAB73C[a6 - 1], 2u, a9, a10, a11, a12);
    if (!v22)
      return v23;
    goto LABEL_10;
  }
  v23 = 0;
  if (v22)
LABEL_10:
    operator delete(v22);
  return v23;
}

void sub_20CC92004(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

BOOL rtcv::simResize(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, void *a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  unsigned int v18;
  unsigned int v19;
  vImage_Buffer v20;
  vImage_Buffer src;

  if (a6 | a5)
    return 0;
  v18 = a10;
  v19 = a9;
  bzero(a8, a11 * a10);
  if (!a7)
  {
    if (a10 * a2 <= a9 * a3)
    {
      v19 = vcvtas_u32_f32((float)(a10 * a2) / (float)a3);
      if (v19 > a9)
        rtcv::simResize();
    }
    else
    {
      v18 = vcvtas_u32_f32((float)(a9 * a3) / (float)a2);
      if (v18 > a10)
        rtcv::simResize();
    }
  }
  src.data = a1;
  src.height = a3;
  src.width = a2;
  src.rowBytes = a4;
  v20.data = a8;
  v20.height = v18;
  v20.width = v19;
  v20.rowBytes = a11;
  return vImageScale_ARGB8888(&src, &v20, 0, 0) == 0;
}

BOOL rtcv::simCropResize(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, void *a8, float a9, float a10, float a11, unsigned int a12, unsigned int a13, unsigned int a14)
{
  uint64_t v14;
  uint64_t v15;
  vImage_AffineTransform transform;
  vImage_Buffer dest;
  vImage_Buffer v19;
  uint64_t v20;
  uint64_t v21;

  if (a6 | a5 | a7)
    return 0;
  v20 = v14;
  v21 = v15;
  v19.data = a1;
  v19.height = a3;
  v19.width = a2;
  v19.rowBytes = a4;
  dest.data = a8;
  dest.height = a13;
  dest.width = a12;
  dest.rowBytes = a14;
  transform.a = a11;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = a11;
  transform.tx = -(float)(a11 * a9);
  transform.ty = (float)a13 - (float)(a11 * (float)((float)a3 - a10));
  return vImageAffineWarp_ARGB8888(&v19, &dest, 0, &transform, 0, 8u) == 0;
}

BOOL rtcv::simCropResizeExtendMean(void *a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5, int a6, int a7, void *a8, float a9, float a10, float a11, unsigned int a12, unsigned int a13, unsigned int a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  vImage_AffineTransform transform;
  uint8_t backColor;
  __int16 v20;
  char v21;
  vImage_Buffer dest;
  vImage_Buffer v23;
  uint64_t v24;
  uint64_t v25;

  if (a6 | a5 | a7)
    return 0;
  v24 = v15;
  v25 = v16;
  v23.data = a1;
  v23.height = a3;
  v23.width = a2;
  v23.rowBytes = a4;
  dest.data = a8;
  dest.height = a13;
  dest.width = a12;
  dest.rowBytes = a14;
  backColor = *(_BYTE *)a15;
  v20 = *(_WORD *)(a15 + 1);
  v21 = -1;
  transform.a = a11;
  *(_QWORD *)&transform.b = 0;
  transform.d = a11;
  transform.tx = -(float)(a11 * a9);
  transform.ty = (float)a13 - (float)(a11 * (float)((float)a3 - a10));
  return vImageAffineWarp_ARGB8888(&v23, &dest, 0, &transform, &backColor, 4u) == 0;
}

uint64_t rtcv::simImageChMeanTempBytes(rtcv *this, int a2)
{
  int v3;
  _DWORD v5[2];

  v3 = (int)this;
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)v5);
  if (v5[1])
    rtcv::simImageChMeanTempBytes();
  return (v5[0] + 12 * v3 * a2 + 9);
}

float rtcv::simImageChMean(const unsigned __int8 *a1, int a2, int a3, int a4, float *a5, unsigned int a6, _BYTE *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float *v17;
  int v18;
  float *v19;
  uint64_t v20;
  vDSP_Length v21;
  float v22;
  float result;
  uint64_t __C;
  float v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&__C);
    if (HIDWORD(__C))
      rtcv::simImageChMeanTempBytes();
    v16 = __C + 12 * a2 * a3 + 9;
    LODWORD(__C) = v16;
    if (a5)
    {
      if (v16 > a6)
        rtcv::simImageChMean();
      v17 = (float *)(((unint64_t)a5 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      v18 = 4 * a2 * a3 - (_DWORD)a5;
      HIDWORD(__C) = (_DWORD)v17 + v18;
      if (v16 < (int)v17 + v18)
        rtcv::simImageChMean(v13, v14, v15);
      v19 = (float *)(((unint64_t)a5 + ((_DWORD)v17 + v18) + 3) & 0xFFFFFFFFFFFFFFFCLL);
      HIDWORD(__C) = (_DWORD)v19 + v18;
      if (v16 < (int)v19 + v18)
        rtcv::simImageChMean(v13, v14, v15);
      v20 = (uint64_t)a5 + ((_DWORD)v19 + v18) + 3;
      a5 = (float *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
      HIDWORD(__C) = (v20 & 0xFFFFFFFC) + v18;
      if (v16 < HIDWORD(__C))
        rtcv::simImageChMean(v13, v14, v15);
    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    v21 = (a3 * a2);
    v25 = 0.0;
    __C = 0;
    vDSP_vfltu8(a1, 4, a5, 1, v21);
    vDSP_vfltu8(a1 + 1, 4, v19, 1, v21);
    vDSP_vfltu8(a1 + 2, 4, v17, 1, v21);
    vDSP_meanv(a5, 1, (float *)&__C, v21);
    vDSP_meanv(v19, 1, (float *)&__C + 1, v21);
    vDSP_meanv(v17, 1, &v25, v21);
    v22 = *((float *)&__C + 1);
    *a7 = (int)(float)(*(float *)&__C + 0.5);
    a7[1] = (int)(float)(v22 + 0.5);
    result = v25 + 0.5;
    a7[2] = (int)(float)(v25 + 0.5);
  }
  return result;
}

void OUTLINED_FUNCTION_0_6(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 71, a4);
}

uint64_t acMemBlockCoalesce(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a2;
  if (a2 >= 2)
  {
    v4 = a2;
    bmHeapsort(a1, a2, 0xCuLL, (int (*)(uint64_t, uint64_t))acMemBlockCompareAddress);
    v5 = 0;
    v6 = 0;
    v7 = (_DWORD *)(a1 + 20);
    v8 = 1;
    do
    {
      v9 = (_QWORD *)(a1 + 12 * v5);
      v12 = *v9;
      v10 = v9 + 1;
      v11 = v12;
      v13 = v7;
      v14 = v8;
      do
      {
        v15 = *v10;
        if (v11 + v15 == *((_QWORD *)v13 - 1))
        {
          *v10 = *v13 + v15;
          *v13 = 0;
          v6 = 1;
        }
        ++v14;
        v13 += 3;
      }
      while (v14 < v2);
      ++v8;
      ++v5;
      v7 += 3;
    }
    while (v5 != (_DWORD)v2 - 1);
    if ((v6 & 1) != 0)
    {
      v2 = 0;
      v16 = (_DWORD *)(a1 + 8);
      do
      {
        if (*v16)
        {
          v17 = a1 + 12 * v2;
          v18 = *((_QWORD *)v16 - 1);
          v2 = (v2 + 1);
          *(_DWORD *)(v17 + 8) = *v16;
          *(_QWORD *)v17 = v18;
        }
        v16 += 3;
        --v4;
      }
      while (v4);
    }
  }
  return v2;
}

BOOL acMemBlockCompareAddress(_QWORD *a1, _QWORD *a2)
{
  return *a1 > *a2;
}

uint64_t acMemBlockCoalesceNoSort(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 >= 2)
  {
    v2 = 0;
    v3 = 0;
    v4 = (_DWORD *)(a1 + 20);
    v5 = 1;
    v6 = a2;
    do
    {
      v7 = (_QWORD *)(a1 + 12 * v2);
      v10 = *v7;
      v8 = v7 + 1;
      v9 = v10;
      v11 = v4;
      v12 = v5;
      do
      {
        v13 = *v8;
        if (v9 + v13 == *((_QWORD *)v11 - 1))
        {
          *v8 = *v11 + v13;
          *v11 = 0;
          v3 = 1;
        }
        ++v12;
        v11 += 3;
      }
      while (v12 < a2);
      ++v5;
      ++v2;
      v4 += 3;
    }
    while (v2 != (_DWORD)a2 - 1);
    if ((v3 & 1) != 0)
    {
      a2 = 0;
      v14 = (_DWORD *)(a1 + 8);
      do
      {
        if (*v14)
        {
          v15 = a1 + 12 * a2;
          v16 = *((_QWORD *)v14 - 1);
          a2 = (a2 + 1);
          *(_DWORD *)(v15 + 8) = *v14;
          *(_QWORD *)v15 = v16;
        }
        v14 += 3;
        --v6;
      }
      while (v6);
    }
  }
  return a2;
}

void ft::ProxyTrack::ProxyTrack(ft::ProxyTrack *this, const uint64_t *a2)
{
  _QWORD *v2;

  ft::Track::Track(this, a2);
  *v2 = &off_24C55E7E8;
}

{
  _QWORD *v2;

  ft::Track::Track(this, a2);
  *v2 = &off_24C55E7E8;
}

void ft::ProxyTrack::~ProxyTrack(ft::ProxyTrack *this)
{
  ft::Track::~Track(this);
  JUMPOUT(0x212B93F04);
}

double ft::ProxyTrack::UpdateState(uint64_t a1, uint64_t a2, float *a3)
{
  __int128 v3;
  double result;

  v3 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 40) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 24) = v3;
  result = a3[10];
  *(double *)(a1 + 248) = result;
  return result;
}

uint64_t ft::ProxyTrack::SetLost(uint64_t this, char a2)
{
  *(_BYTE *)(this + 240) = a2;
  return this;
}

const char *ft::ProxyTrack::Kind(ft::ProxyTrack *this)
{
  return "proxy";
}

uint64_t ttTrkScoreFindMaxScore(uint64_t result, float *a2, _DWORD *a3, unsigned int *a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  float v8;
  uint64_t v10;
  uint64_t v11;
  float v12;

  v4 = *(_DWORD *)(result + 8);
  v5 = *(unsigned int *)(result + 12);
  *a2 = -3.4028e38;
  *a3 = 0;
  *a4 = 0;
  if (v4)
  {
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)result;
      v8 = -3.4028e38;
      while (*(_DWORD *)(result + 12) && *(_DWORD *)(result + 8) > v6)
      {
        v10 = 0;
        v11 = v7 + *(_DWORD *)(result + 16) * v6;
        do
        {
          v12 = *(float *)(v11 + 4 * v10);
          if (v12 > v8)
          {
            *a2 = v12;
            *a3 = v10;
            v8 = v12;
            *a4 = v6;
          }
          ++v10;
        }
        while (v5 != v10);
        if (++v6 == v4)
          return result;
      }
LABEL_17:
      acAttrReduceSmile(result, (uint64_t)a2, (uint64_t)a3);
    }
    if (!*(_DWORD *)(result + 12) || *(_DWORD *)(result + 8) <= (v4 - 1))
      goto LABEL_17;
  }
  return result;
}

uint64_t ttTrkScoreNormalize(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  float *v15;
  uint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  float32x4_t *v21;
  uint64_t v22;
  float32x4_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  float32x4_t *v29;
  float32x4_t v30;
  unint64_t v31;

  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4)
  {
    v5 = *(unsigned int *)(result + 12);
    if (!(_DWORD)v5)
      acAttrReduceSmile(result, a2, a3);
    v6 = 0;
    v7 = 0;
    LODWORD(a4) = 0;
    do
    {
      v8 = (float *)(*(_QWORD *)result + v6);
      v9 = *(unsigned int *)(result + 12);
      do
      {
        v10 = *v8++;
        *(float *)&a4 = *(float *)&a4 + v10;
        --v9;
      }
      while (v9);
      ++v7;
      v6 += *(_DWORD *)(result + 16);
    }
    while (v7 != v4);
    if (*(float *)&a4 > 0.0000001)
    {
      v11 = *(_QWORD *)result;
      v12 = *(_DWORD *)(result + 16);
      if (v5 > 7)
      {
        v16 = v5 & 0xFFFFFFF8;
        v17 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        v18 = v5 - v16;
        if (v5 == v16)
        {
          v19 = 0;
          v20 = v11 + 16;
          while (v18 < *(unsigned int *)(result + 8))
          {
            v21 = (float32x4_t *)(v20 + v19);
            v22 = v16;
            do
            {
              v23 = vdivq_f32(*v21, v17);
              v21[-1] = vdivq_f32(v21[-1], v17);
              *v21 = v23;
              v21 += 2;
              v22 -= 8;
            }
            while (v22);
            ++v18;
            v19 += v12;
            if (v18 == v4)
              return result;
          }
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = v11 + 16;
          v27 = v11 + ((4 * v5) & 0x3FFFFFFE0);
          while (v25 < *(unsigned int *)(result + 8))
          {
            v28 = (float *)(v27 + v24);
            v29 = (float32x4_t *)(v26 + v24);
            a2 = v16;
            do
            {
              v30 = vdivq_f32(*v29, v17);
              v29[-1] = vdivq_f32(v29[-1], v17);
              *v29 = v30;
              v29 += 2;
              a2 -= 8;
            }
            while (a2);
            v31 = v18;
            do
            {
              *v28 = *v28 / *(float *)&a4;
              ++v28;
              --v31;
            }
            while (v31);
            ++v25;
            v24 += v12;
            if (v25 == v4)
              return result;
          }
        }
      }
      else
      {
        v13 = 0;
        v14 = 0;
        while (v14 < *(unsigned int *)(result + 8))
        {
          v15 = (float *)(v11 + v13);
          *v15 = *v15 / *(float *)&a4;
          if ((_DWORD)v5 != 1)
          {
            v15[1] = v15[1] / *(float *)&a4;
            if ((_DWORD)v5 != 2)
            {
              v15[2] = v15[2] / *(float *)&a4;
              if ((_DWORD)v5 != 3)
              {
                v15[3] = v15[3] / *(float *)&a4;
                if ((_DWORD)v5 != 4)
                {
                  v15[4] = v15[4] / *(float *)&a4;
                  if ((_DWORD)v5 != 5)
                  {
                    v15[5] = v15[5] / *(float *)&a4;
                    if ((_DWORD)v5 != 6)
                      v15[6] = v15[6] / *(float *)&a4;
                  }
                }
              }
            }
          }
          ++v14;
          v13 += v12;
          if (v4 == v14)
            return result;
        }
      }
      acAttrReduceSmile(result, a2, a3);
    }
  }
  return result;
}

float ttTrkComputeKL(uint64_t *a1, uint64_t *a2, int a3, int a4, int a5, int a6)
{
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  float v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v32;
  int v33;
  uint64_t v34;
  int v35;

  v7 = *((_DWORD *)a2 + 2);
  v29 = *((_DWORD *)a2 + 3);
  v8 = *((_DWORD *)a1 + 2);
  v9 = *((_DWORD *)a1 + 3);
  v10 = *((_DWORD *)a1 + 4);
  v27 = *a2;
  v28 = *a1;
  v11 = *((_DWORD *)a2 + 4);
  v25 = v11 * (a6 - 9);
  v26 = v10 * (a4 - 9);
  v12 = 0.0;
  v13 = -9;
  v32 = a6;
  v33 = v11;
  do
  {
    v14 = v13 + a5;
    v35 = v13;
    if (v13 + a5 >= 0)
    {
      v15 = v13 + a3;
      if (((v13 + a3) & 0x80000000) == 0 && (int)v14 < v29)
      {
        v16 = -9;
        v18 = v25;
        v17 = v26;
        v19 = v27 + 4 * v14;
        v34 = v19;
        do
        {
          if (a6 + v16 >= 0 && a6 + v16 < v7 && (int)v15 < v9 && ((a4 + v16) & 0x80000000) == 0 && a4 + v16 < v8)
          {
            v20 = *(float *)(v28 + 4 * v15 + v17);
            v21 = *(float *)(v19 + v18);
            if (v21 >= 0.000001 && v20 >= 0.000001)
            {
              v23 = logf(v20 / v21);
              v19 = v34;
              a6 = v32;
              v11 = v33;
              v12 = v12 + (float)(v20 * v23);
            }
          }
          ++v16;
          v17 += v10;
          v18 += v11;
        }
        while (v16 != 10);
      }
    }
    v13 = v35 + 1;
  }
  while (v35 != 9);
  return fmaxf(v12, 0.0);
}

_QWORD *ft::SiameseRpnSession::SiameseRpnSession(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

void ft::SiameseRpnSession::~SiameseRpnSession(ft::SiameseRpnSession *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    TtTrkRpnStop(*(_QWORD **)(v1 + 536));
    TtTrkRpnDestroy(*(TtTrkRpnNode ***)(v1 + 536));
    MEMORY[0x212B93F04](v1, 0x10A0C40C54048FFLL);
  }
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    TtTrkRpnStop(*(_QWORD **)(v1 + 536));
    TtTrkRpnDestroy(*(TtTrkRpnNode ***)(v1 + 536));
    MEMORY[0x212B93F04](v1, 0x10A0C40C54048FFLL);
  }
}

double ft::SiameseRpnSession::ComputeExemplarInputRect(uint64_t *a1, float64x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;
  __n128 v9;
  void *__p[4];
  _BYTE v11[180];
  int v12;
  float32x4_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  ft::SiameseRpnSession::EnsureAtStage((uint64_t)a1, 0);
  v4 = operator new();
  ft::SiameseRpnCore::SiameseRpnCore((ft::SiameseRpnCore *)v4);
  v5 = *a1;
  *a1 = v4;
  if (v5)
  {
    TtTrkRpnStop(*(_QWORD **)(v5 + 536));
    TtTrkRpnDestroy(*(TtTrkRpnNode ***)(v5 + 536));
    MEMORY[0x212B93F04](v5, 0x10A0C40C54048FFLL);
    v4 = *a1;
  }
  *(_QWORD *)(v4 + 544) = 0x43800000780;
  bzero(v11, 0x218uLL);
  v13 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(*a2, (float64x2_t)xmmword_20CCAB770)), vmulq_f64(a2[1], (float64x2_t)xmmword_20CCAB770));
  v12 = 1;
  *(_BYTE *)(v4 + 552) = 1;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20CCAB780;
  strcpy((char *)__p[0], "Exemplar pre-processing");
  v9.n128_u32[0] = TtTrkRpnExemplarPreProcess(*(_QWORD *)(v4 + 536), v4 + 544, (uint64_t)v11, v4 + 557, v4 + 2636, v4 + 2708, v4 + 2792);
  ft::EnsureOK((uint64_t)__p, (int *)&v9);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v9 = 0uLL;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "Fetching exemplar ROI");
  TtTrkRpnGetExemplarCrop((__n128 *)(*a1 + 557), &v9);
  v8 = v6;
  ft::EnsureOK((uint64_t)__p, &v8);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  a1[1] = 1;
  return v9.n128_f32[0] / 1920.0;
}

void sub_20CC92E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212B93F04](v1, 0x10A0C40C54048FFLL);
  _Unwind_Resume(a1);
}

void sub_20CC92EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ft::SiameseRpnSession::EnsureAtStage(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (*(_QWORD *)(result + 8) != a2)
  {
    v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v14, a2);
    v5 = std::string::insert(&v14, 0, "Expected to be in stage ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v15, ". Curent stage instead: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, *(_QWORD *)(v2 + 8));
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v16, (const std::string::value_type *)v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_24C55E858;
  }
  return result;
}

void sub_20CC9300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_20CC931F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
  {
    operator delete(*(void **)(v28 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if (a20 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    __cxa_free_exception(v26);
    goto LABEL_12;
  }
LABEL_10:
  if (!v27)
    goto LABEL_12;
  goto LABEL_11;
}

void ft::SiameseRpnSession::PostProcessExemplarOutputs(ft::SiameseRpnSession *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t *v7;
  int v8;
  _BYTE *v9;
  int v10;
  void *__p[4];

  ft::SiameseRpnSession::EnsureAtStage((uint64_t)a1, 1uLL);
  v4 = *(_QWORD *)a1;
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "net_exempler_reg");
  v5 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(a2, (uint64_t)__p);
  if (!v5)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6 = (_QWORD *)(v4 + 2660);
  *v6 = v5[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "net_exempler_cls");
  v7 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(a2, (uint64_t)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v6[1] = v7[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20CCAAE70;
  strcpy((char *)__p[0], "Exemplar post-processing");
  TtTrkRpnExemplarPostProcess(*(_QWORD *)(*(_QWORD *)a1 + 536), *(_QWORD *)a1 + 544, *(_QWORD *)a1 + 2636, *(_QWORD *)a1 + 2708, (_DWORD *)(*(_QWORD *)a1 + 557), *(_BYTE **)a1);
  v10 = v8;
  ft::EnsureOK((uint64_t)__p, &v10);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v9 = *(_BYTE **)a1;
  v9[552] = 0;
  *v9 = 0;
  *((_QWORD *)a1 + 1) = 2;
  ft::SiameseRpnSession::PrepareNextInstanceInputRect(a1);
}

void sub_20CC93424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ft::SiameseRpnSession::PrepareNextInstanceInputRect(ft::SiameseRpnSession *this)
{
  int v2;
  void *__p;
  __int128 v4;

  ft::SiameseRpnSession::EnsureAtStage((uint64_t)this, 2uLL);
  __p = operator new(0x19uLL);
  v4 = xmmword_20CCAB780;
  strcpy((char *)__p, "Instance pre-processing");
  v2 = TtTrkRpnInstancePreProcess(*(_QWORD *)(*(_QWORD *)this + 536), *(_QWORD *)this + 544, *(_QWORD *)this, (float32x2_t *)(*(_QWORD *)this + 557), *(_QWORD *)this + 2636, *(_QWORD *)this + 2708, *(_QWORD *)this + 2792);
  ft::EnsureOK((uint64_t)&__p, &v2);
  if (SHIBYTE(v4) < 0)
    operator delete(__p);
}

void sub_20CC934F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ft::SiameseRpnSession::PutativeSize(ft::SiameseRpnSession *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 544);
}

double ft::SiameseRpnSession::ComputeInstanceInputRect(ft::SiameseRpnSession *this)
{
  int v2;
  unint64_t v3;
  int v5;
  char __p[22];
  char v7;
  __n128 v8;

  ft::SiameseRpnSession::EnsureAtStage((uint64_t)this, 2uLL);
  v8 = 0uLL;
  v7 = 21;
  strcpy(__p, "Fetching instance ROI");
  TtTrkRpnGetInstanceCrop((__n128 *)(*(_QWORD *)this + 557), &v8);
  v5 = v2;
  ft::EnsureOK((uint64_t)__p, &v5);
  if (v7 < 0)
    operator delete(*(void **)__p);
  LODWORD(v3) = *(_DWORD *)(*(_QWORD *)this + 544);
  return v8.n128_f32[0] / (double)v3;
}

void sub_20CC935E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float ft::SiameseRpnSession::PostProcessInstanceOutputs@<S0>(unsigned __int8 **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  float result;
  unsigned __int8 *v11;
  int v12;
  unint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  int v21;
  void *__p[4];

  v6 = *a1;
  HIBYTE(__p[2]) = 14;
  strcpy((char *)__p, "regress_adjust");
  v7 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(a2, (uint64_t)__p);
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8 = v6 + 2684;
  *v8 = v7[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "classification_x_corr");
  v9 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(a2, (uint64_t)__p);
  if (!v9)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v8[1] = v9[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20CCAAE70;
  strcpy((char *)__p[0], "Instance post-processing");
  v21 = TtTrkRpnInstancePostProcess(*((_QWORD *)*a1 + 67), (unsigned int *)*a1 + 136, (uint64_t)(*a1 + 2636), (uint64_t)(*a1 + 2708), (uint64_t)(*a1 + 557), *a1);
  ft::EnsureOK((uint64_t)__p, &v21);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v11 = *a1;
    *v11 = 0;
    v12 = *((_DWORD *)v11 + 45);
    if (!v12)
    {
LABEL_13:
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 40) = v12;
      return result;
    }
  }
  else
  {
    v11 = *a1;
    *v11 = 0;
    v12 = *((_DWORD *)v11 + 45);
    if (!v12)
      goto LABEL_13;
  }
  if (*((_DWORD *)v11 + 67) == 2)
  {
    LOBYTE(v12) = 0;
    a1[1] = (unsigned __int8 *)3;
    goto LABEL_13;
  }
  ft::SiameseRpnSession::PrepareNextInstanceInputRect((ft::SiameseRpnSession *)a1);
  LODWORD(v13) = *((_DWORD *)*a1 + 136);
  v14 = (double)v13;
  v15 = *((float *)v11 + 48) / v14;
  LODWORD(v16) = *((_DWORD *)*a1 + 137);
  v17 = (double)v16;
  v18 = *((float *)v11 + 49) / v17;
  v19 = *((float *)v11 + 50) / v14;
  v20 = *((float *)v11 + 51) / v17;
  *(float *)&v14 = (float)*((unsigned int *)v11 + 52);
  *(double *)a3 = v15;
  *(double *)(a3 + 8) = v18;
  *(double *)(a3 + 16) = v19;
  *(double *)(a3 + 24) = v20;
  result = *(float *)&v14 / 1000.0;
  *(float *)(a3 + 32) = *(float *)&v14 / 1000.0;
  *(_BYTE *)(a3 + 40) = 1;
  return result;
}

void sub_20CC93824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ft::SiameseRpnSession::CurrentStage(ft::SiameseRpnSession *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t *ft::SiameseRpnSession::Reset(uint64_t *this)
{
  uint64_t v1;

  v1 = *this;
  *this = 0;
  this[1] = 0;
  if (v1)
  {
    TtTrkRpnStop(*(_QWORD **)(v1 + 536));
    TtTrkRpnDestroy(*(TtTrkRpnNode ***)(v1 + 536));
    JUMPOUT(0x212B93F04);
  }
  return this;
}

void ft::SiameseRpnStageError::~SiameseRpnStageError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212B93F04);
}

ft::SiameseRpnCore *ft::SiameseRpnCore::SiameseRpnCore(ft::SiameseRpnCore *this)
{
  uint64_t *v2;
  char *v3;
  _QWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  int Params;
  void *__p[4];

  *(_OWORD *)((char *)this + 157) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = (uint64_t *)((char *)this + 536);
  v3 = (char *)this + 556;
  v4 = (_QWORD *)((char *)this + 557);
  v5 = (_OWORD *)((char *)this + 2424);
  v6 = (_OWORD *)((char *)this + 2792);
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *(_OWORD *)((char *)this + 537) = 0u;
  bzero((char *)this + 556, 0x749uLL);
  *(_OWORD *)((char *)this + 2774) = 0u;
  v5[20] = 0u;
  v5[21] = 0u;
  v5[18] = 0u;
  v5[19] = 0u;
  v5[16] = 0u;
  v5[17] = 0u;
  v5[14] = 0u;
  v5[15] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[10] = 0u;
  v5[11] = 0u;
  v5[8] = 0u;
  v5[9] = 0u;
  v5[6] = 0u;
  v5[7] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[2] = 0u;
  v5[3] = 0u;
  *v5 = 0u;
  v5[1] = 0u;
  v6[7] = 0u;
  v6[8] = 0u;
  v6[5] = 0u;
  v6[6] = 0u;
  v6[3] = 0u;
  v6[4] = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  *v6 = 0u;
  __p[0] = operator new(0x19uLL);
  *(_OWORD *)&__p[1] = xmmword_20CCAB780;
  strcpy((char *)__p[0], "Tracker handle creation");
  Params = TtTrkRpnCreate(v2, (uint64_t)v3, v4);
  ft::EnsureOK((uint64_t)__p, &Params);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 18;
  strcpy((char *)__p, "Get tracker params");
  Params = TtTrkRpnGetParams(*v2, (uint64_t)v4, (uint64_t)v5);
  ft::EnsureOK((uint64_t)__p, &Params);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 9;
  strcpy((char *)__p, "RPN start");
  Params = TtTrkRpnStart((uint64_t *)*v2, (uint64_t)v4);
  ft::EnsureOK((uint64_t)__p, &Params);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)this + 2676) = *((_QWORD *)this + 316);
  *((_DWORD *)this + 675) = *((_DWORD *)this + 623);
  *((_DWORD *)this + 676) = *((_DWORD *)this + 624);
  *((_DWORD *)this + 664) = *((_DWORD *)this + 616);
  *((_DWORD *)this + 661) = *((_DWORD *)this + 612);
  *((_QWORD *)this + 331) = 195948557;
  *(_QWORD *)((char *)this + 2636) = 195948557;
  *(_QWORD *)((char *)this + 2684) = 195948557;
  *(_QWORD *)((char *)this + 2692) = 195948557;
  *(_QWORD *)((char *)this + 2660) = 195948557;
  *(_QWORD *)((char *)this + 2668) = 195948557;
  return this;
}

void sub_20CC93B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AcAttrCreate(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  AcAttrNode *v9;
  uint64_t result;

  v3 = 4294967292;
  if (!a1 || !a2 || !a3)
    return v3;
  v6 = (_QWORD *)operator new();
  bzero(v6, 0xA70uLL);
  v7 = operator new();
  AcAttrNode::AcAttrNode(v7, a3);
  *v6 = v7;
  v8 = AcAttrNode::init(v7, 0, a3);
  if ((_DWORD)v8)
  {
    v3 = v8;
    v9 = (AcAttrNode *)v7;
LABEL_6:
    AcAttrNode::~AcAttrNode(v9);
    MEMORY[0x212B93F04]();
LABEL_7:
    MEMORY[0x212B93F04](v6, 0x10A0C40947D6BA8);
    return v3;
  }
  result = AcAttrNode::getParams(v7, a3, (uint64_t)(v6 + 1));
  v3 = result;
  if ((_DWORD)result)
  {
    v9 = (AcAttrNode *)*v6;
    if (!*v6)
      goto LABEL_7;
    goto LABEL_6;
  }
  *a1 = v6;
  return result;
}

void sub_20CC93C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212B93F04](v1, 0x1080C401E4740B3);
  _Unwind_Resume(a1);
}

uint64_t AcAttrDestroy(AcAttrNode **a1)
{
  AcAttrNode *v2;

  if (!a1)
    return 4294967292;
  v2 = *a1;
  if (!v2)
    return 4294967292;
  AcAttrNode::~AcAttrNode(v2);
  MEMORY[0x212B93F04]();
  MEMORY[0x212B93F04](a1, 0x10A0C40947D6BA8);
  return 0;
}

uint64_t AcAttrStart(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t AcAttrStop(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t AcAttrGetParams(_QWORD *a1, uint64_t a2, void *__dst)
{
  uint64_t result;

  if (!a1)
    return 4294967292;
  if (!*a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (__dst)
    {
      memcpy(__dst, a1 + 1, 0x2E8uLL);
      return 0;
    }
  }
  return result;
}

uint64_t AcAttrPreProcess(uint64_t a1, unsigned int *a2, float32x2_t *a3, _DWORD *a4, uint64_t a5, _DWORD *a6, int *a7)
{
  uint64_t result;

  if (!a1 || !*(_QWORD *)a1)
    return 4294967292;
  result = 4294967292;
  if (a2 && a3 && a4 && a5 && a6 && a7)
  {
    result = AcAttrNode::setUpNetBuffers(a3[27].u32[1], a5, (_DWORD *)(a1 + 8), a7);
    if (!(_DWORD)result)
      return AcAttrNode::preProcess(*(_QWORD *)a1, *a2, a2[1], a2 + 2, a3 + 28, a3[27].u32[1], a4, (uint64_t)a7, a6);
  }
  return result;
}

uint64_t AcAttrPreProcessCropResizeRef(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  _BYTE *v13;
  float *v14;
  void *v15;

  if (!a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (*(_QWORD *)a1)
    {
      if (a6)
      {
        if (a4)
        {
          if (a5)
          {
            if (*(_QWORD *)a3)
            {
              if ((*(_BYTE *)(a3 + 12) & 3) == 0)
              {
                result = AcAttrNode::setUpNetBuffers(*a4, a6, (_DWORD *)(a1 + 8), (int *)(a1 + 752));
                if (!(_DWORD)result)
                {
                  v10 = *a4;
                  if (!(_DWORD)v10)
                    return 0;
                  v11 = 0;
                  v12 = (unsigned int *)(a1 + 768);
                  v13 = a4 + 1;
                  v14 = (float *)(a4 + 104);
                  do
                  {
                    v15 = (void *)*((_QWORD *)v12 - 2);
                    if (!v15)
                      return 4294967292;
                    if (*v13)
                    {
                      if (!rtcv::simCropResize(*(void **)a3, *(_DWORD *)(a3 + 12) >> 2, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), 0, 0, 0, v15, *(v14 - 3), *(v14 - 2), (float)*(v12 - 2) / fmaxf(*v14, 1.0), *(v12 - 1) >> 2, *(v12 - 2), *v12))return 4294967288;
                      v10 = *a4;
                    }
                    result = 0;
                    ++v11;
                    v12 += 6;
                    v13 += 40;
                    v14 += 4;
                  }
                  while (v11 < v10);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 AcAttrPostProcess(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char *a5, __n128 result)
{
  double v9;
  float32x4_t v10;
  __n128 v11;
  float32x4_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unsigned __int8 *v17;
  __n128 *v18;

  if (a1
    && *(_QWORD *)a1
    && a2
    && a3
    && a4
    && a5
    && !AcAttrNode::setUpNetBuffers(*((unsigned int *)a5 + 55), a3, (_DWORD *)(a1 + 8), (int *)(a1 + 752)))
  {
    std::chrono::steady_clock::now();
    if (*((_DWORD *)a5 + 55))
    {
      v13 = 0;
      v14 = a1 + 992;
      v15 = (uint64_t)(a5 + 224);
      while (!AcAttrNode::postProcess(*(_QWORD *)a1, v14, 7, a4, v15, v13, (int8x8_t)result.n128_u64[0], v9, v10, v11, v12))
      {
        ++v13;
        v14 += 168;
        v15 += 92;
        if (v13 >= *((unsigned int *)a5 + 55))
          goto LABEL_14;
      }
    }
    else
    {
LABEL_14:
      if (*a5 <= 3u)
      {
        v16 = AcCommitHash();
        strncpy(a5 + 1, v16, 0x14uLL);
        v17 = (unsigned __int8 *)&a5[20 * *a5];
        *(_DWORD *)(v17 + 37) = 0;
        *(_OWORD *)(v17 + 21) = *(_OWORD *)"attr";
        v18 = (__n128 *)AcAttrNode::config(*(AcAttrNode **)a1);
        result = *v18;
        *(_DWORD *)(v17 + 117) = v18[1].n128_u32[0];
        *(__n128 *)(v17 + 101) = result;
        ++*a5;
      }
    }
  }
  return result;
}

void sub_20CC948D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<ik::EspressoNet,char const*,ik::EspressoConfig>(const char **a1@<X0>, ik::EspressoConfig *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  const char *v7;
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 __dst;
  unint64_t v15;

  v6 = (_QWORD *)operator new();
  v7 = *a1;
  v8 = strlen(*a1);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v15 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v15) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_8:
    memmove(p_dst, v7, v9);
  *((_BYTE *)p_dst + v9) = 0;
  *v6 = &unk_24C55E8B8;
  v13 = operator new(0x128uLL);
  v13[2] = 0;
  *v13 = &unk_24C55EB60;
  v13[1] = 0;
  v6[1] = ik::core::EspressoNetState::EspressoNetState((uint64_t)(v13 + 3), &__dst, a2);
  v6[2] = v13;
  *a3 = v6;
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__dst);
}

void sub_20CC94B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v18;

  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x212B93F04](v15, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void sub_20CC94D70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC94D80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);

  _Unwind_Resume(a1);
}

void sub_20CC94D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC94DA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC94F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC94F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC94F28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC94F3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC94F4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC94F5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC950B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20CC95308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ik::PixelBufferScopeLock::~PixelBufferScopeLock((ik::PixelBufferScopeLock *)va);
  _Unwind_Resume(a1);
}

void sub_20CC95488(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC95498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC954A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC954B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC954C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC9593C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20CC95B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<char const*,ik::PixelBufferTensor &,0>(uint64_t a1, const char **a2, uint64_t a3)
{
  const char *v5;
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, v5, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C55EA38;
  *(_DWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = *(_BYTE **)(a3 + 16);
  v12 = *(_BYTE **)(a3 + 24);
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 40) = v15;
    *(_QWORD *)(a1 + 48) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 56) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 48) = v16;
  }
  v17 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  return a1;
}

void sub_20CC95CA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

void ik::core::GetOutput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char __p[22];
  char v27;
  int v28;
  char v29[168];

  v5 = (_QWORD *)(a2 + 192);
  if (std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>((_QWORD *)(a2 + 192), a3))
  {
    v6 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(v5, a3);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v7 = v6;
    *(_QWORD *)a1 = &unk_24C55EA38;
    v8 = *((_DWORD *)v6 + 12);
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v10 = (_BYTE *)v6[7];
    v9 = (_BYTE *)v6[8];
    v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 < 0)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v12 = (char *)operator new(v9 - v10);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v12;
      v13 = &v12[8 * (v11 >> 3)];
      *(_QWORD *)(a1 + 32) = v13;
      memcpy(v12, v10, v11);
      *(_QWORD *)(a1 + 24) = v13;
    }
    *(_QWORD *)(a1 + 40) = v7[10];
    v14 = v7[11];
    *(_QWORD *)(a1 + 48) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)a1 = &unk_24C55E8D8;
  }
  else
  {
    v28 = espresso_network_bind_buffer();
    v27 = 21;
    strcpy(__p, "Binding output buffer");
    ik::VerifyEspressoStatus(&v28, (uint64_t *)__p);
    if (v27 < 0)
      operator delete(*(void **)__p);
    *(_WORD *)__p = 0;
    ik::EspressoTensor::EspressoTensor(a1, (uint64_t)v29, __p);
    *(_QWORD *)__p = a3;
    v17 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, a3, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v18 = v17;
    *((_DWORD *)v17 + 12) = *(_DWORD *)(a1 + 8);
    if (v17 + 5 != (uint64_t *)a1)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v17 + 7, *(char **)(a1 + 16), *(char **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
    v20 = *(_QWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 48);
    if (v19)
    {
      v21 = (unint64_t *)(v19 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (std::__shared_weak_count *)v18[11];
    v18[10] = v20;
    v18[11] = v19;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  char __p[22];
  char v27;
  int v28;
  char v29[168];

  v5 = (_QWORD *)(a2 + 192);
  if (std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>((_QWORD *)(a2 + 192), a3))
  {
    v6 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::find<std::string>(v5, a3);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v7 = v6;
    *(_QWORD *)a1 = &unk_24C55EA38;
    v8 = *((_DWORD *)v6 + 12);
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v10 = (_BYTE *)v6[7];
    v9 = (_BYTE *)v6[8];
    v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 < 0)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v12 = (char *)operator new(v9 - v10);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v12;
      v13 = &v12[8 * (v11 >> 3)];
      *(_QWORD *)(a1 + 32) = v13;
      memcpy(v12, v10, v11);
      *(_QWORD *)(a1 + 24) = v13;
    }
    *(_QWORD *)(a1 + 40) = v7[10];
    v14 = v7[11];
    *(_QWORD *)(a1 + 48) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)a1 = &unk_24C55E8D8;
  }
  else
  {
    v28 = espresso_network_bind_buffer();
    v27 = 21;
    strcpy(__p, "Binding output buffer");
    ik::VerifyEspressoStatus(&v28, (uint64_t *)__p);
    if (v27 < 0)
      operator delete(*(void **)__p);
    *(_WORD *)__p = 0;
    ik::EspressoTensor::EspressoTensor(a1, (uint64_t)v29, __p);
    *(_QWORD *)__p = a3;
    v17 = std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v5, a3, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    v18 = v17;
    *((_DWORD *)v17 + 12) = *(_DWORD *)(a1 + 8);
    if (v17 + 5 != (uint64_t *)a1)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v17 + 7, *(char **)(a1 + 16), *(char **)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
    v20 = *(_QWORD *)(a1 + 40);
    v19 = *(_QWORD *)(a1 + 48);
    if (v19)
    {
      v21 = (unint64_t *)(v19 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = (std::__shared_weak_count *)v18[11];
    v18[10] = v20;
    v18[11] = v19;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_20CC95F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20CC96088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t ___ZN2ikL28IsAppleNeuralEngineAvailableEv_block_invoke_1()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  _MergedGlobals_3 = result;
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__assign_unique<std::pair<std::string const,ik::Tensor> const*>(_QWORD *a1, std::string *__str, std::string *a3)
{
  std::string *v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  _QWORD *v10;
  std::string::pointer data;
  std::string::size_type v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;

  v4 = __str;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (!v8 || __str == a3)
    {
      v10 = (_QWORD *)v8;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v8 + 16), v4);
        *(_DWORD *)(v8 + 48) = v4[1].__r_.__value_.__r.__words[1];
        if ((std::string *)(v8 + 16) != v4)
          std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(v8 + 56), (char *)v4[1].__r_.__value_.__r.__words[2], v4[2].__r_.__value_.__l.__data_, (uint64_t)(v4[2].__r_.__value_.__r.__words[0] - v4[1].__r_.__value_.__r.__words[2]) >> 3);
        v12 = v4[2].__r_.__value_.__r.__words[2];
        data = v4[3].__r_.__value_.__l.__data_;
        if (data)
        {
          v13 = (unint64_t *)(data + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = *(std::__shared_weak_count **)(v8 + 88);
        *(_QWORD *)(v8 + 80) = v12;
        *(_QWORD *)(v8 + 88) = data;
        if (v15)
        {
          p_shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(p_shared_owners);
          while (__stlxr(v17 - 1, p_shared_owners));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v10 = *(_QWORD **)v8;
        std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__node_insert_unique(a1, v8);
        v4 = (std::string *)((char *)v4 + 80);
        if (!v10)
          break;
        v8 = (uint64_t)v10;
      }
      while (v4 != a3);
    }
    if (v10)
    {
      while (1)
      {
        v18 = (_QWORD *)*v10;
        v10[5] = &unk_24C55EA38;
        v19 = (std::__shared_weak_count *)v10[11];
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
            break;
        }
        v22 = (void *)v10[7];
        if (v22)
          goto LABEL_30;
LABEL_31:
        if (*((char *)v10 + 39) < 0)
          operator delete((void *)v10[2]);
        operator delete(v10);
        v10 = v18;
        if (!v18)
          goto LABEL_36;
      }
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = (void *)v10[7];
      if (!v22)
        goto LABEL_31;
LABEL_30:
      v10[8] = v22;
      operator delete(v22);
      goto LABEL_31;
    }
  }
LABEL_36:
  while (v4 != a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::Tensor> const&>((uint64_t)a1, (uint64_t)v4, (__int128 *)v4);
    v4 = (std::string *)((char *)v4 + 80);
  }
}

void sub_20CC96370(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_20CC9638C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__node_insert_unique(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *result;
  int8x8_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD *v14;
  unint64_t v15;
  char v16;

  v4 = (unsigned __int8 **)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 39);
  v6 = *(_QWORD *)(a2 + 24);
  if ((v5 & 0x80u) == 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  if ((v5 & 0x80u) == 0)
    v8 = v5;
  else
    v8 = v6;
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v16, v7, v8);
  *(_QWORD *)(a2 + 8) = v9;
  result = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v9, v4);
  if (!result)
  {
    v11 = (int8x8_t)a1[1];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(_QWORD *)&v11)
        v12 %= *(_QWORD *)&v11;
    }
    else
    {
      v12 &= *(_QWORD *)&v11 - 1;
    }
    v14 = *(_QWORD **)(*a1 + 8 * v12);
    if (v14)
    {
      *(_QWORD *)a2 = *v14;
    }
    else
    {
      *(_QWORD *)a2 = a1[2];
      a1[2] = a2;
      *(_QWORD *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(_QWORD *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(_QWORD *)&v11)
          v15 %= *(_QWORD *)&v11;
      }
      else
      {
        v15 &= *(_QWORD *)&v11 - 1;
      }
      v14 = (_QWORD *)(*a1 + 8 * v15);
    }
    *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  if (__p)
  {
    v2 = __p;
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v2[5] = &unk_24C55EA38;
      v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
          break;
      }
      v7 = (void *)v2[7];
      if (v7)
        goto LABEL_9;
LABEL_10:
      if (*((char *)v2 + 39) < 0)
        operator delete((void *)v2[2]);
      operator delete(v2);
      v2 = v3;
      if (!v3)
        return;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (void *)v2[7];
    if (!v7)
      goto LABEL_10;
LABEL_9:
    v2[8] = v7;
    operator delete(v7);
    goto LABEL_10;
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  size_t v27;
  uint8x8_t v28;
  uint64_t v29;
  size_t v30;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_50;
  v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2)
      v7 = a2 % v4;
    else
      v7 = a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  else
  {
    v7 = (v4 - 1) & a2;
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v7);
    if (!v8)
      goto LABEL_50;
  }
  v9 = *v8;
  if (*v8)
  {
    v10 = *((_BYTE *)a3 + 23);
    if (v10 >= 0)
      v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v11 = a3[1];
    if (v10 >= 0)
      v12 = (unsigned __int8 *)a3;
    else
      v12 = *a3;
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        v17 = v9[1];
        if (v17 == a2)
        {
          v18 = *((unsigned __int8 *)v9 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          else
            v19 = (unsigned __int8 *)v9[3];
          if (v19 == v11)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v9[2], v12, v9[3]))
                return v9;
            }
            else
            {
              if (!*((_BYTE *)v9 + 39))
                return v9;
              v20 = 0;
              while (*((unsigned __int8 *)v9 + v20 + 16) == v12[v20])
              {
                if (v18 == ++v20)
                  return v9;
              }
            }
          }
        }
        else if ((v17 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        v9 = (uint64_t *)*v9;
        if (!v9)
          goto LABEL_50;
      }
    }
    do
    {
      v13 = v9[1];
      if (v13 == a2)
      {
        v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0)
          v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        else
          v15 = (unsigned __int8 *)v9[3];
        if (v15 == v11)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp((const void *)v9[2], v12, v9[3]))
              return v9;
          }
          else
          {
            if (!*((_BYTE *)v9 + 39))
              return v9;
            v16 = 0;
            while (*((unsigned __int8 *)v9 + v16 + 16) == v12[v16])
            {
              if (v14 == ++v16)
                return v9;
            }
          }
        }
      }
      else
      {
        if (v13 >= v4)
          v13 %= v4;
        if (v13 != v7)
          break;
      }
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (v4 && (float)(v22 * (float)v4) >= v21)
    return 0;
  v23 = 1;
  if (v4 >= 3)
    v23 = (v4 & (v4 - 1)) != 0;
  v24 = v23 | (2 * v4);
  v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25)
    prime = v25;
  else
    prime = v24;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v4 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v4)
    goto LABEL_74;
  if (prime < v4)
  {
    v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      v30 = std::__next_prime(v27);
      if (prime <= v30)
        prime = v30;
      if (prime >= v4)
        return 0;
    }
    else
    {
      v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2)
        v27 = v29;
      if (prime <= v27)
        prime = v27;
      if (prime >= v4)
        return 0;
    }
LABEL_74:
    std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
  }
  return 0;
}

__n128 swap(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  int v4;
  __n128 result;
  __int128 v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v3 = *a1 + 36 * a2;
  v4 = *(_DWORD *)(v3 + 32);
  v6 = *(_OWORD *)v3;
  result = *(__n128 *)(v3 + 16);
  v7 = *a1 + 36 * a3;
  v8 = *(_DWORD *)(v7 + 32);
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v7;
  *(_OWORD *)(v3 + 16) = v9;
  *(_DWORD *)(v3 + 32) = v8;
  v10 = *a1 + 36 * a3;
  *(_OWORD *)v10 = v6;
  *(__n128 *)(v10 + 16) = result;
  *(_DWORD *)(v10 + 32) = v4;
  return result;
}

__n128 percolateUp(uint64_t *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  int (*v6)(_OWORD *, _OWORD *);
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  _OWORD v24[2];
  int v25;
  _OWORD v26[2];
  int v27;
  uint64_t v28;
  uint64_t v29;

  if (a2 >= 2)
  {
    v28 = v2;
    v29 = v3;
    v5 = a2;
    do
    {
      v6 = (int (*)(_OWORD *, _OWORD *))a1[2];
      v7 = *a1;
      v8 = *a1 + 36 * v5;
      v9 = *(_DWORD *)(v8 + 32);
      v10 = *(_OWORD *)(v8 + 16);
      v26[0] = *(_OWORD *)v8;
      v26[1] = v10;
      v27 = v9;
      v11 = v5 >> 1;
      v12 = (__int128 *)(v7 + 36 * (v5 >> 1));
      v14 = *v12;
      v13 = v12[1];
      v25 = *((_DWORD *)v12 + 8);
      v24[0] = v14;
      v24[1] = v13;
      if (v6(v26, v24) < 1)
        break;
      v16 = *a1 + 36 * v5;
      v17 = *(_DWORD *)(v16 + 32);
      v18 = *(_OWORD *)v16;
      result = *(__n128 *)(v16 + 16);
      v19 = *a1 + 36 * v11;
      v20 = *(_DWORD *)(v19 + 32);
      v21 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)v16 = *(_OWORD *)v19;
      *(_OWORD *)(v16 + 16) = v21;
      *(_DWORD *)(v16 + 32) = v20;
      v22 = *a1 + 36 * v11;
      *(_OWORD *)v22 = v18;
      *(__n128 *)(v22 + 16) = result;
      *(_DWORD *)(v22 + 32) = v17;
      v23 = v5 > 3;
      v5 >>= 1;
    }
    while (v23);
  }
  return result;
}

__n128 percolateDown(uint64_t *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int (*v6)(_OWORD *, _OWORD *);
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  unsigned int (*v15)(_OWORD *, _OWORD *);
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __n128 result;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  int v33;
  _OWORD v34[2];
  int v35;
  _OWORD v36[2];
  int v37;
  _OWORD v38[2];
  int v39;

  v2 = 2 * a2;
  v3 = *((_DWORD *)a1 + 2);
  if (2 * a2 <= v3)
  {
    v4 = a2;
    do
    {
      if (v2 >= v3)
      {
        v8 = v2;
      }
      else
      {
        v6 = (int (*)(_OWORD *, _OWORD *))a1[2];
        v7 = *a1;
        v8 = v2 | 1;
        v9 = *a1 + 36 * (v2 | 1);
        v10 = *(_DWORD *)(v9 + 32);
        v11 = *(_OWORD *)(v9 + 16);
        v38[0] = *(_OWORD *)v9;
        v38[1] = v11;
        v39 = v10;
        v12 = (__int128 *)(v7 + 36 * v2);
        v14 = *v12;
        v13 = v12[1];
        v37 = *((_DWORD *)v12 + 8);
        v36[0] = v14;
        v36[1] = v13;
        if (v6(v38, v36) <= 0)
          v8 = v2;
      }
      v15 = (unsigned int (*)(_OWORD *, _OWORD *))a1[2];
      v16 = *a1;
      v17 = *a1 + 36 * v4;
      v18 = *(_DWORD *)(v17 + 32);
      v19 = *(_OWORD *)(v17 + 16);
      v34[0] = *(_OWORD *)v17;
      v34[1] = v19;
      v35 = v18;
      v20 = (__int128 *)(v16 + 36 * v8);
      v22 = *v20;
      v21 = v20[1];
      v33 = *((_DWORD *)v20 + 8);
      v32[0] = v22;
      v32[1] = v21;
      if (v15(v34, v32))
        break;
      v24 = *a1 + 36 * v4;
      v25 = *(_DWORD *)(v24 + 32);
      v26 = *(_OWORD *)v24;
      result = *(__n128 *)(v24 + 16);
      v27 = 36 * v8;
      v28 = *a1 + v27;
      v29 = *(_DWORD *)(v28 + 32);
      v30 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v28;
      *(_OWORD *)(v24 + 16) = v30;
      *(_DWORD *)(v24 + 32) = v29;
      v31 = *a1 + v27;
      *(_OWORD *)v31 = v26;
      *(__n128 *)(v31 + 16) = result;
      *(_DWORD *)(v31 + 32) = v25;
      v2 = 2 * v8;
      v3 = *((_DWORD *)a1 + 2);
      v4 = v8;
    }
    while (2 * v8 <= v3);
  }
  return result;
}

uint64_t initHeap(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a3;
  *(_QWORD *)(result + 16) = a4;
  *(_DWORD *)(result + 24) = 305419896;
  return result;
}

__n128 addToHeap(uint64_t *a1, uint64_t a2)
{
  int v4;
  unsigned int (*v5)(_OWORD *, _OWORD *);
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  __int128 v13;
  unint64_t v14;
  int (*v15)(_OWORD *, _OWORD *);
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  _OWORD v32[2];
  int v33;
  _OWORD v34[2];
  int v35;
  _OWORD v36[2];
  int v37;
  _OWORD v38[2];
  int v39;

  if (*((_DWORD *)a1 + 6) != 305419896)
    addToHeap();
  v4 = *((_DWORD *)a1 + 2);
  if (v4 == *((_DWORD *)a1 + 3) - 1)
  {
    v5 = (unsigned int (*)(_OWORD *, _OWORD *))a1[2];
    v6 = *a1;
    v7 = *(_OWORD *)(*a1 + 52);
    v34[0] = *(_OWORD *)(*a1 + 36);
    v34[1] = v7;
    v35 = *(_DWORD *)(v6 + 68);
    v8 = *(_OWORD *)(a2 + 16);
    v32[0] = *(_OWORD *)a2;
    v32[1] = v8;
    v33 = *(_DWORD *)(a2 + 32);
    if (!v5(v34, v32))
      return result;
    removeFromHeap(a1, (uint64_t)v38);
    v4 = *((_DWORD *)a1 + 2);
  }
  v10 = *a1;
  v11 = v4 + 1;
  *((_DWORD *)a1 + 2) = v11;
  v12 = v10 + 36 * v11;
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(v12 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)v12 = result;
  *(_OWORD *)(v12 + 16) = v13;
  v14 = *((unsigned int *)a1 + 2);
  if (v14 >= 2)
  {
    do
    {
      v15 = (int (*)(_OWORD *, _OWORD *))a1[2];
      v16 = *a1;
      v17 = *a1 + 36 * v14;
      v18 = *(_DWORD *)(v17 + 32);
      v19 = *(_OWORD *)(v17 + 16);
      v38[0] = *(_OWORD *)v17;
      v38[1] = v19;
      v39 = v18;
      v20 = v14 >> 1;
      v21 = v16 + 36 * (v14 >> 1);
      v23 = *(_OWORD *)v21;
      v22 = *(_OWORD *)(v21 + 16);
      v37 = *(_DWORD *)(v21 + 32);
      v36[0] = v23;
      v36[1] = v22;
      if (v15(v38, v36) < 1)
        break;
      v24 = *a1 + 36 * v14;
      v25 = *(_DWORD *)(v24 + 32);
      v26 = *(_OWORD *)v24;
      result = *(__n128 *)(v24 + 16);
      v27 = *a1 + 36 * v20;
      v28 = *(_DWORD *)(v27 + 32);
      v29 = *(_OWORD *)(v27 + 16);
      *(_OWORD *)v24 = *(_OWORD *)v27;
      *(_OWORD *)(v24 + 16) = v29;
      *(_DWORD *)(v24 + 32) = v28;
      v30 = *a1 + 36 * v20;
      *(_OWORD *)v30 = v26;
      *(__n128 *)(v30 + 16) = result;
      *(_DWORD *)(v30 + 32) = v25;
      v31 = v14 > 3;
      v14 >>= 1;
    }
    while (v31);
  }
  return result;
}

uint64_t removeFromHeap(uint64_t *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int (*v17)(_OWORD *, _OWORD *);
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  unsigned int (*v26)(_OWORD *, _OWORD *);
  uint64_t v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  uint64_t v42;
  _OWORD v44[2];
  int v45;
  _OWORD v46[2];
  int v47;
  _OWORD v48[2];
  int v49;
  _OWORD v50[2];
  int v51;

  if (*((_DWORD *)a1 + 6) != 305419896)
    removeFromHeap();
  if (!*((_DWORD *)a1 + 2))
    return 4294967290;
  v3 = *(_OWORD *)(*a1 + 36);
  v4 = *(_OWORD *)(*a1 + 52);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(*a1 + 68);
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v5 = *((unsigned int *)a1 + 2);
  *((_DWORD *)a1 + 2) = v5 - 1;
  v6 = *a1;
  v7 = *(_DWORD *)(*a1 + 68);
  v8 = *(_OWORD *)(*a1 + 52);
  v9 = *(_OWORD *)(*a1 + 36);
  v5 *= 36;
  v10 = *a1 + v5;
  v11 = *(_DWORD *)(v10 + 32);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v6 + 36) = *(_OWORD *)v10;
  *(_OWORD *)(v6 + 52) = v12;
  *(_DWORD *)(v6 + 68) = v11;
  v13 = *a1 + v5;
  *(_OWORD *)v13 = v9;
  *(_OWORD *)(v13 + 16) = v8;
  *(_DWORD *)(v13 + 32) = v7;
  v14 = *((_DWORD *)a1 + 2);
  if (v14 >= 2)
  {
    v15 = 1;
    v16 = 2;
    do
    {
      if (v16 >= v14)
      {
        v19 = v16;
      }
      else
      {
        v17 = (int (*)(_OWORD *, _OWORD *))a1[2];
        v18 = *a1;
        v19 = v16 | 1;
        v20 = *a1 + 36 * (v16 | 1);
        v21 = *(_DWORD *)(v20 + 32);
        v22 = *(_OWORD *)(v20 + 16);
        v50[0] = *(_OWORD *)v20;
        v50[1] = v22;
        v51 = v21;
        v23 = (__int128 *)(v18 + 36 * v16);
        v25 = *v23;
        v24 = v23[1];
        v49 = *((_DWORD *)v23 + 8);
        v48[0] = v25;
        v48[1] = v24;
        if (v17(v50, v48) <= 0)
          v19 = v16;
      }
      v26 = (unsigned int (*)(_OWORD *, _OWORD *))a1[2];
      v27 = *a1;
      v28 = *a1 + 36 * v15;
      v29 = *(_DWORD *)(v28 + 32);
      v30 = *(_OWORD *)(v28 + 16);
      v46[0] = *(_OWORD *)v28;
      v46[1] = v30;
      v47 = v29;
      v31 = (__int128 *)(v27 + 36 * v19);
      v33 = *v31;
      v32 = v31[1];
      v45 = *((_DWORD *)v31 + 8);
      v44[0] = v33;
      v44[1] = v32;
      if (v26(v46, v44))
        break;
      v34 = *a1 + 36 * v15;
      v35 = *(_DWORD *)(v34 + 32);
      v37 = *(_OWORD *)v34;
      v36 = *(_OWORD *)(v34 + 16);
      v38 = 36 * v19;
      v39 = *a1 + v38;
      v40 = *(_DWORD *)(v39 + 32);
      v41 = *(_OWORD *)(v39 + 16);
      *(_OWORD *)v34 = *(_OWORD *)v39;
      *(_OWORD *)(v34 + 16) = v41;
      *(_DWORD *)(v34 + 32) = v40;
      v42 = *a1 + v38;
      *(_OWORD *)v42 = v37;
      *(_OWORD *)(v42 + 16) = v36;
      *(_DWORD *)(v42 + 32) = v35;
      v16 = 2 * v19;
      v14 = *((_DWORD *)a1 + 2);
      v15 = v19;
    }
    while (2 * v19 <= v14);
  }
  return 0;
}

void sub_20CC96F48(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  MEMORY[0x212B93F04](v4, 0x1020C40F15AEE48);
  MEMORY[0x212B93F04](v2, 0x20C4093837F09);

  _Unwind_Resume(a1);
}

void sub_20CC96F94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC97260(_Unwind_Exception *a1)
{
  uint64_t v1;

  ik::PixelBufferScopeLock::~PixelBufferScopeLock((ik::PixelBufferScopeLock *)(v1 - 160));
  ik::PixelBufferScopeLock::~PixelBufferScopeLock((ik::PixelBufferScopeLock *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_20CC97584(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20CC975BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20CC97628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)FTVTScaler;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20CC97A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC97A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC97A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC97A60(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ik::core::msr::MSR::Resample(unint64_t *a1, __CVBuffer *a2, __CVBuffer *a3, uint64_t a4)
{
  double Width;
  double Height;
  double v10;
  double v11;
  double v12;
  double v13;
  float v14;
  float v15;
  float v16;
  float v17;
  double v18;
  double v19;
  double v20;
  CGFloat v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  OSType PixelFormatType;
  __CVBuffer *v27;
  uint64_t v28;
  CGSize v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  CGFloat v34;
  const __CFAllocator *v35;
  __CFDictionary *Mutable;
  int v37;
  int v38;
  int v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  int v46;
  int Histogram;
  CGRect **v48;
  unint64_t v49;
  CGRect *v50;
  CGRect *v51;
  CGRect *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  CGRect *v58;
  CGSize size;
  CGSize v60;
  CGPoint origin;
  CGSize v62;
  CGSize v63;
  std::runtime_error *exception;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  const std::string::value_type *v69;
  std::string::size_type v70;
  std::string *v71;
  CGPoint v72;
  std::runtime_error *v73;
  std::runtime_error *v74;
  std::runtime_error *v75;
  float64x2_t v76;
  CGRect valuePtr;
  _BYTE v78[40];
  char v79;
  uint64_t v80;
  char v81;
  char v82;
  uint64_t v83;
  char v84;
  char v85;
  std::string v86;
  unint64_t v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  _QWORD v92[2];
  unsigned __int8 v93;
  std::string v94;
  std::string v95;
  CGRect v96;
  CGRect v97;
  CGSize v98;
  CGRect v99;
  CGRect v100;

  if (*(_BYTE *)(a4 + 32))
  {
    Width = *(double *)(a4 + 16);
    Height = *(double *)(a4 + 24);
    v76 = *(float64x2_t *)a4;
    v96.origin = *(CGPoint *)a4;
    v96.size.width = Width;
    v96.size.height = Height;
    if (*(_BYTE *)(a4 + 72))
    {
LABEL_3:
      v11 = *(double *)(a4 + 40);
      v10 = *(double *)(a4 + 48);
      v12 = *(double *)(a4 + 56);
      v13 = *(double *)(a4 + 64);
      goto LABEL_6;
    }
  }
  else
  {
    Width = (double)CVPixelBufferGetWidth(a2);
    Height = (double)CVPixelBufferGetHeight(a2);
    v76 = 0u;
    v96.origin = 0u;
    v96.size.width = Width;
    v96.size.height = Height;
    if (*(_BYTE *)(a4 + 72))
      goto LABEL_3;
  }
  v12 = (double)CVPixelBufferGetWidth(a3);
  v13 = (double)CVPixelBufferGetHeight(a3);
  v10 = 0.0;
  v11 = 0.0;
LABEL_6:
  v97.origin.x = v11;
  v97.origin.y = v10;
  v97.size.width = v12;
  v97.size.height = v13;
  v14 = v12 / Width;
  v15 = v13 / Height;
  if (v15 >= v14)
    v16 = v12 / Width;
  else
    v16 = v13 / Height;
  if (v16 < 0.25 || (v14 >= v15 ? (v17 = v12 / Width) : (v17 = v13 / Height), v17 > 4.0))
  {
    if (!*(_BYTE *)a1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      ik::core::msr::DescribeRect((ik::core::msr *)&v94, &v96);
      v65 = std::string::insert(&v94, 0, "Requested MSR rescaling cannot proceed in a single pass.\nsrc:");
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v95.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = std::string::append(&v95, "\ndst:");
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      ik::core::msr::DescribeRect((ik::core::msr *)v92, &v97);
      if ((v93 & 0x80u) == 0)
        v69 = (const std::string::value_type *)v92;
      else
        v69 = (const std::string::value_type *)v92[0];
      if ((v93 & 0x80u) == 0)
        v70 = v93;
      else
        v70 = v92[1];
      v71 = std::string::append(&v86, v69, v70);
      v72 = *(CGPoint *)&v71->__r_.__value_.__l.__data_;
      *(_QWORD *)&valuePtr.size.width = v71->__r_.__value_.__r.__words[2];
      valuePtr.origin = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)&valuePtr);
      __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    v18 = fmax(fmin(v15, 4.0), 0.25);
    v19 = ceil(Height * v18);
    v20 = floor(Height * v18);
    if (v18 >= 1.0)
      v21 = v20;
    else
      v21 = v19;
    v22 = fmax(fmin(v14, 4.0), 0.25);
    v23 = ceil(Width * v22);
    v24 = floor(Width * v22);
    if (v22 >= 1.0)
      v25 = v24;
    else
      v25 = v23;
    PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
    v98.width = v25;
    v98.height = v21;
    ik::core::msr::MSR::GetIntermediateTensor((ik::core::msr::MSR *)a1, v98, PixelFormatType, a1[1], (uint64_t)&v86);
    v27 = *(__CVBuffer **)(v90 + 8);
    *(_OWORD *)&v95.__r_.__value_.__r.__words[1] = (unint64_t)v27;
    if (CVPixelBufferLockBaseAddress(v27, 0))
    {
      v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v73, "Failed to lock pixel buffer.");
    }
    else
    {
      v95.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C55E940;
      v28 = *(_QWORD *)(v90 + 8);
      v29 = *(CGSize *)(a4 + 16);
      valuePtr.origin = *(CGPoint *)a4;
      valuePtr.size = v29;
      v78[0] = *(_BYTE *)(a4 + 32);
      v78[8] = 0;
      v79 = 0;
      LOBYTE(v80) = 0;
      v81 = 0;
      v82 = 0;
      v83 = *(_QWORD *)(a4 + 96);
      v84 = 0;
      v85 = 0;
      ik::core::msr::MSR::Resample(a1, a2, v28, &valuePtr);
      v30 = *(_OWORD *)(a4 + 56);
      *(_OWORD *)&v78[8] = *(_OWORD *)(a4 + 40);
      LOBYTE(valuePtr.origin.x) = 0;
      v78[0] = 0;
      *(_OWORD *)&v78[24] = v30;
      v79 = *(_BYTE *)(a4 + 72);
      v80 = *(_QWORD *)(a4 + 80);
      v81 = *(_BYTE *)(a4 + 88);
      v82 = *(_BYTE *)(a4 + 92);
      v83 = *(_QWORD *)(a4 + 96);
      v84 = 0;
      v85 = 0;
      ik::core::msr::MSR::Resample(a1, v28, a3, &valuePtr);
      if (!CVPixelBufferUnlockBaseAddress(v27, 0))
      {
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C55EA38;
        v31 = v91;
        if (v91)
        {
          p_shared_owners = (unint64_t *)&v91->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v86.__r_.__value_.__r.__words[2])
        {
          v87 = v86.__r_.__value_.__r.__words[2];
          operator delete((void *)v86.__r_.__value_.__r.__words[2]);
        }
        return;
      }
      v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v73, "Failed to unlock pixel buffer.");
    }
    __cxa_throw(v73, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  if (!CVPixelBufferGetIOSurface(a2) || !CVPixelBufferGetIOSurface(a3))
  {
    v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, "Pixel buffer is not backed by an IOSurface.");
    goto LABEL_90;
  }
  if (IOSurfaceGetCompressionTypeOfPlane())
  {
    v34 = (double)CVPixelBufferGetWidth(a3);
    v99.size.height = (double)CVPixelBufferGetHeight(a3);
    v99.origin.x = 0.0;
    v99.origin.y = 0.0;
    v99.size.width = v34;
    v100.origin.x = v11;
    v100.origin.y = v10;
    v100.size.width = v12;
    v100.size.height = v13;
    if (!CGRectEqualToRect(v99, v100))
    {
      v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Destination ROI must be the entire bounds for compressed pixel formats.");
LABEL_90:
      __cxa_throw(v74, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
  }
  v86.__r_.__value_.__r.__words[2] = vcvtd_n_u64_f64(Width, 0x10uLL);
  v87 = vcvtd_n_u64_f64(Height, 0x10uLL);
  v88 = v11;
  v89 = v10;
  *(uint64x2_t *)&v86.__r_.__value_.__l.__data_ = vcvtq_n_u64_f64(v76, 0x10uLL);
  LODWORD(v90) = v12;
  HIDWORD(v90) = v13;
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = xmmword_24C55EDE0;
  v95.__r_.__value_.__r.__words[2] = 0;
  v35 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  v94.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE517C0], (const void *)*MEMORY[0x24BDBD268]);
  if (!*(_BYTE *)(a4 + 88))
    goto LABEL_45;
  v37 = 2 * *(unsigned __int8 *)(a4 + 80);
  LODWORD(valuePtr.origin.x) = v37;
  if (*(_BYTE *)(a4 + 81))
  {
    v37 |= 1u;
    LODWORD(valuePtr.origin.x) = v37;
  }
  v38 = *(_DWORD *)(a4 + 84);
  switch(v38)
  {
    case 3:
      v39 = v37 ^ 7;
      goto LABEL_43;
    case 2:
      v39 = v37 ^ 3;
      goto LABEL_43;
    case 1:
      v39 = v37 ^ 4;
LABEL_43:
      LODWORD(valuePtr.origin.x) = v39;
      break;
  }
  v40 = CFNumberCreate(v35, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE517B8], v40);
  CFRelease(v40);
LABEL_45:
  if (*(_BYTE *)(a4 + 144))
  {
    if (!*(_QWORD *)(a4 + 104))
    {
      v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v75, "Output histogram pointer is null.");
      __cxa_throw(v75, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
    }
    LODWORD(valuePtr.origin.x) = 1;
    v41 = CFNumberCreate(v35, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE51778], v41);
    CFRelease(v41);
    v42 = CFNumberCreate(v35, kCFNumberCGFloatType, (const void *)(a4 + 112));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE51788], v42);
    CFRelease(v42);
    v43 = CFNumberCreate(v35, kCFNumberCGFloatType, (const void *)(a4 + 120));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE51790], v43);
    CFRelease(v43);
    v44 = CFNumberCreate(v35, kCFNumberCGFloatType, (const void *)(a4 + 128));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE51798], v44);
    CFRelease(v44);
    v45 = CFNumberCreate(v35, kCFNumberCGFloatType, (const void *)(a4 + 136));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x24BE51780], v45);
    CFRelease(v45);
  }
  *(_QWORD *)&valuePtr.origin.x = operator new(0x28uLL);
  *(_OWORD *)&valuePtr.origin.y = xmmword_20CCAB7E0;
  strcpy(*(char **)&valuePtr.origin.x, "IOSurfaceAcceleratorTransformSurface");
  v46 = IOSurfaceAcceleratorTransformSurface();
  ik::core::msr::Ensure<0,int>((uint64_t)&valuePtr, v46);
  if (SHIBYTE(valuePtr.size.width) < 0)
  {
    operator delete(*(void **)&valuePtr.origin.x);
    if (!*(_BYTE *)(a4 + 144))
      goto LABEL_53;
  }
  else if (!*(_BYTE *)(a4 + 144))
  {
    goto LABEL_53;
  }
  *(_QWORD *)&valuePtr.origin.x = operator new(0x28uLL);
  *(_OWORD *)&valuePtr.origin.y = xmmword_20CCAB7F0;
  strcpy(*(char **)&valuePtr.origin.x, "IOSurfaceAcceleratorGetHistogram");
  Histogram = IOSurfaceAcceleratorGetHistogram();
  ik::core::msr::Ensure<0,int>((uint64_t)&valuePtr, Histogram);
  if (SHIBYTE(valuePtr.size.width) < 0)
  {
    operator delete(*(void **)&valuePtr.origin.x);
    v48 = *(CGRect ***)(a4 + 96);
    if (v48)
      goto LABEL_54;
    goto LABEL_74;
  }
LABEL_53:
  v48 = *(CGRect ***)(a4 + 96);
  if (v48)
  {
LABEL_54:
    valuePtr = v96;
    *(CGRect *)v78 = v97;
    v50 = v48[1];
    v49 = (unint64_t)v48[2];
    if ((unint64_t)v50 >= v49)
    {
      v52 = *v48;
      v53 = ((char *)v50 - (char *)*v48) >> 6;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 58)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v55 = v49 - (_QWORD)v52;
      if (v55 >> 5 > v54)
        v54 = v55 >> 5;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFC0)
        v56 = 0x3FFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
      {
        if (v56 >> 58)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v57 = (char *)operator new(v56 << 6);
      }
      else
      {
        v57 = 0;
      }
      v58 = (CGRect *)&v57[64 * v53];
      size = valuePtr.size;
      v58->origin = valuePtr.origin;
      v58->size = size;
      v60 = *(CGSize *)&v78[16];
      v58[1].origin = *(CGPoint *)v78;
      v58[1].size = v60;
      v51 = v58 + 2;
      if (v50 != v52)
      {
        do
        {
          origin = v50[-2].origin;
          v62 = v50[-2].size;
          v63 = v50[-1].size;
          v58[-1].origin = v50[-1].origin;
          v58[-1].size = v63;
          v58[-2].origin = origin;
          v58[-2].size = v62;
          v58 -= 2;
          v50 -= 2;
        }
        while (v50 != v52);
        v50 = *v48;
      }
      *v48 = v58;
      v48[1] = v51;
      v48[2] = (CGRect *)&v57[64 * v56];
      if (v50)
        operator delete(v50);
    }
    else
    {
      *v50 = valuePtr;
      v50[1].origin = *(CGPoint *)v78;
      v50[1].size = *(CGSize *)&v78[16];
      v51 = v50 + 2;
    }
    v48[1] = v51;
  }
LABEL_74:
  if (Mutable)
    CFRelease(Mutable);
}

void sub_20CC98444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  void *v56;
  int v57;
  uint64_t v58;

  if (a16 < 0)
  {
    operator delete(a11);
    if ((a50 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a39 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a50 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a45);
  if ((a39 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v58 - 217) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a34);
  if ((*(char *)(v58 - 217) & 0x80000000) == 0)
  {
LABEL_5:
    if (a56 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(v58 - 240));
  if (a56 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v57 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v56);
    _Unwind_Resume(a1);
  }
LABEL_12:
  if (!v57)
    goto LABEL_14;
  goto LABEL_13;
}

void ik::core::msr::DescribeRect(ik::core::msr *this, const CGRect *a2)
{
  char *v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  ik::core::msr *v17;
  std::runtime_error *exception;

  v4 = (char *)operator new(0x20uLL);
  strcpy(v4, "(x:%g, y:%g, w:%g, h:%g)");
  x = a2->origin.x;
  y = a2->origin.y;
  width = a2->size.width;
  height = a2->size.height;
  v9 = snprintf(0, 0, v4, *(_QWORD *)&a2->origin.x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
  if (v9 < 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "String formmating failed.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  v10 = (v9 + 1);
  v11 = (void *)operator new[]();
  bzero(v11, v10);
  snprintf((char *)v11, v10, v4, *(_QWORD *)&x, *(_QWORD *)&y, *(_QWORD *)&width, *(_QWORD *)&height);
  v12 = (uint64_t)v11 + v10 - 1;
  v13 = v10 - 1;
  if (v10 - 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 > 0x16)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v17 = (ik::core::msr *)operator new(v15 + 1);
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)this = v17;
    this = v17;
    if (v11 != (void *)v12)
      goto LABEL_5;
  }
  else
  {
    *((_BYTE *)this + 23) = v13;
    if (v11 != (void *)v12)
    {
LABEL_5:
      v14 = v10 - 1;
      memcpy(this, v11, v14);
      this = (ik::core::msr *)((char *)this + v14);
    }
  }
  *(_BYTE *)this = 0;
  MEMORY[0x212B93EEC](v11, 0x1000C8077774924);
  operator delete(v4);
}

void sub_20CC987DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_free_exception(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20CC987F8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x212B93EEC](v2, 0x1000C8077774924);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20CC98824(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ik::core::msr::MSR::GetIntermediateTensor(ik::core::msr::MSR *this@<X0>, CGSize a2@<0:D0, 8:D1>, unsigned int a3@<W1>, unint64_t a4@<X2>, uint64_t a5@<X8>)
{
  uint64_t *v8;
  uint64_t *v9;
  double v10;
  double v11;
  BOOL v13;
  unsigned int v14;
  double v15;
  double v16;
  BOOL v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  int v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _OWORD *v38[2];
  unsigned int v39;
  char v40;
  char v41;
  char v42;
  CGSize v43;
  unsigned int v44;

  v43 = a2;
  v44 = a3;
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  if (v8)
  {
    v9 = (uint64_t *)*((_QWORD *)this + 4);
    do
    {
      v10 = *((double *)v9 + 4);
      if (a2.width < v10)
        goto LABEL_4;
      v11 = *((double *)v9 + 5);
      if (a2.width == v10 && a2.height < v11)
        goto LABEL_4;
      v13 = a2.width == v10;
      if (v11 >= a2.height)
        v13 = 0;
      if (v10 >= a2.width && !v13)
      {
        v14 = *((_DWORD *)v9 + 12);
        if (v14 > a3)
          goto LABEL_4;
        if (v14 >= a3)
        {
          while (1)
          {
            v15 = *((double *)v8 + 4);
            if (a2.width < v15)
              goto LABEL_17;
            v16 = *((double *)v8 + 5);
            if (a2.width == v15 && a2.height < v16)
              goto LABEL_17;
            v18 = a2.width == v15;
            if (v16 >= a2.height)
              v18 = 0;
            if (v15 < a2.width || v18)
              goto LABEL_29;
            v19 = *((_DWORD *)v8 + 12);
            if (v19 > a3)
            {
LABEL_17:
              v8 = (uint64_t *)*v8;
              if (!v8)
                goto LABEL_30;
            }
            else
            {
              if (v19 >= a3)
              {
                *(_QWORD *)a5 = &unk_24C55EA38;
                v29 = *((_DWORD *)v8 + 16);
                *(_QWORD *)(a5 + 16) = 0;
                *(_DWORD *)(a5 + 8) = v29;
                *(_QWORD *)(a5 + 24) = 0;
                *(_QWORD *)(a5 + 32) = 0;
                v31 = (_BYTE *)v8[9];
                v30 = (_BYTE *)v8[10];
                v32 = v30 - v31;
                if (v30 != v31)
                {
                  if (v32 < 0)
                    std::vector<long long>::__throw_length_error[abi:ne180100]();
                  v33 = (char *)operator new(v30 - v31);
                  *(_QWORD *)(a5 + 16) = v33;
                  *(_QWORD *)(a5 + 24) = v33;
                  v34 = &v33[8 * (v32 >> 3)];
                  *(_QWORD *)(a5 + 32) = v34;
                  memcpy(v33, v31, v32);
                  *(_QWORD *)(a5 + 24) = v34;
                }
                *(_QWORD *)(a5 + 40) = v8[12];
                v35 = v8[13];
                *(_QWORD *)(a5 + 48) = v35;
                if (v35)
                {
                  v36 = (unint64_t *)(v35 + 8);
                  do
                    v37 = __ldxr(v36);
                  while (__stxr(v37 + 1, v36));
                }
                *(_QWORD *)a5 = &unk_24C55E920;
                return;
              }
LABEL_29:
              v8 = (uint64_t *)v8[1];
              if (!v8)
LABEL_30:
                std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
            }
          }
        }
      }
      ++v9;
LABEL_4:
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  v38[0] = (_OWORD *)a2.width;
  v38[1] = (_OWORD *)a2.height;
  v39 = a3;
  v40 = 1;
  v41 = 0;
  v42 = 0;
  ik::PixelBufferTensor::PixelBufferTensor((ik::PixelBufferTensor *)a5, (uint64_t)v38);
  if (a4)
  {
    while (*((_QWORD *)this + 5) >= a4)
      std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::erase((uint64_t **)this + 3, *((uint64_t **)this + 3));
    v38[0] = &v43;
    v20 = std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::__emplace_unique_key_args<std::pair<CGSize,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<CGSize,unsigned int> const&>,std::tuple<>>((uint64_t **)this + 3, (uint64_t)&v43, (uint64_t)&std::piecewise_construct, v38);
    v21 = v20;
    *((_DWORD *)v20 + 16) = *(_DWORD *)(a5 + 8);
    if (v20 + 7 != (uint64_t *)a5)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v20 + 9, *(char **)(a5 + 16), *(char **)(a5 + 24), (uint64_t)(*(_QWORD *)(a5 + 24) - *(_QWORD *)(a5 + 16)) >> 3);
    v23 = *(_QWORD *)(a5 + 40);
    v22 = *(_QWORD *)(a5 + 48);
    if (v22)
    {
      v24 = (unint64_t *)(v22 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v26 = (std::__shared_weak_count *)v21[13];
    v21[12] = v23;
    v21[13] = v22;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
}

void sub_20CC98B08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_20CC98B24(_Unwind_Exception *a1)
{
  ik::PixelBufferTensor *v1;

  ik::PixelBufferTensor::~PixelBufferTensor(v1);
  _Unwind_Resume(a1);
}

void sub_20CC98B38(_Unwind_Exception *a1)
{
  ik::PixelBufferTensor *v1;

  ik::PixelBufferTensor::~PixelBufferTensor(v1);
  _Unwind_Resume(a1);
}

void ik::core::msr::Ensure<0,int>(uint64_t a1, int a2)
{
  std::runtime_error *exception;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;

  if (a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v4 = std::string::append(&v11, " / status = ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v10, a2);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v10;
    else
      v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    else
      size = v10.__r_.__value_.__l.__size_;
    v8 = std::string::append(&v12, (const std::string::value_type *)v6, size);
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v13);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
}

void sub_20CC98C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
  {
    operator delete(*(void **)(v28 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if (a20 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_11:
    __cxa_free_exception(v26);
    goto LABEL_12;
  }
LABEL_10:
  if (!v27)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_20CC98E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20CC99034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t *std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;

  v3 = (uint64_t *)a2[1];
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = a2;
    do
    {
      v4 = (uint64_t *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, a2);
  a2[7] = (uint64_t)&unk_24C55EA38;
  v8 = (std::__shared_weak_count *)a2[13];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = (void *)a2[9];
      if (!v11)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  v11 = (void *)a2[9];
  if (v11)
  {
LABEL_14:
    a2[10] = (uint64_t)v11;
    operator delete(v11);
  }
LABEL_15:
  operator delete(a2);
  return v4;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 == v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v17 = v14[1];
      v18 = (uint64_t *)*v17;
      v14[1] = (uint64_t *)*v17;
      if (v18)
        v18[2] = (uint64_t)v14;
      v17[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
      *v17 = (uint64_t)v14;
      v14[2] = v17;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
      v15 = (_QWORD *)*v7;
      if (!*v7)
        goto LABEL_38;
    }
    if (!*((_BYTE *)v15 + 24))
    {
      v19 = (uint64_t *)v7[1];
      if (!v19)
        goto LABEL_64;
LABEL_63:
      if (*((_BYTE *)v19 + 24))
      {
LABEL_64:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v23 = v15[1];
        *v7 = v23;
        if (v23)
          *(_QWORD *)(v23 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v19 = v7;
      }
      else
      {
        v15 = v7;
      }
      v27 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v27 + 24);
      *(_BYTE *)(v27 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v28 = *(uint64_t **)(v27 + 8);
      v29 = *v28;
      *(_QWORD *)(v27 + 8) = *v28;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      v28[2] = *(_QWORD *)(v27 + 16);
      *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * (**(_QWORD **)(v27 + 16) != v27)) = v28;
      *v28 = v27;
      *(_QWORD *)(v27 + 16) = v28;
      return result;
    }
LABEL_38:
    v19 = (uint64_t *)v7[1];
    if (v19 && !*((_BYTE *)v19 + 24))
      goto LABEL_63;
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (v12 == result)
    {
      v12 = result;
LABEL_61:
      *((_BYTE *)v12 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v12 + 24))
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v16 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_49;
LABEL_48:
    if (!*((_BYTE *)v16 + 24))
      goto LABEL_67;
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v20 = (uint64_t *)v7[1];
    *v14 = v20;
    if (v20)
      v20[2] = (uint64_t)v14;
    v7[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
    v7[1] = (uint64_t)v14;
    v14[2] = v7;
    if (result == (uint64_t *)v14)
      result = v7;
    v7 = *v14;
    v16 = (_QWORD *)**v14;
    if (v16)
      goto LABEL_48;
  }
LABEL_49:
  v21 = (uint64_t *)v7[1];
  if (!v21 || *((_BYTE *)v21 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
    goto LABEL_24;
  }
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_67:
    v21 = v7;
  }
  else
  {
    *((_BYTE *)v21 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = *v21;
    v7[1] = *v21;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v21[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
    *v21 = (uint64_t)v7;
    v7[2] = (uint64_t)v21;
    v16 = v7;
  }
  v24 = (uint64_t *)v21[2];
  *((_BYTE *)v21 + 24) = *((_BYTE *)v24 + 24);
  *((_BYTE *)v24 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v25 = *v24;
  v26 = *(_QWORD *)(*v24 + 8);
  *v24 = v26;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  *(_QWORD *)(v25 + 16) = v24[2];
  *(_QWORD *)(v24[2] + 8 * (*(_QWORD *)v24[2] != (_QWORD)v24)) = v25;
  *(_QWORD *)(v25 + 8) = v24;
  v24[2] = v25;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::__emplace_unique_key_args<std::pair<CGSize,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<CGSize,unsigned int> const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  double v8;
  double v9;
  unsigned int v10;
  uint64_t *v11;
  double v12;
  double v13;
  BOOL v15;
  unsigned int v16;
  uint64_t *v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *(double *)a2;
    v9 = *(double *)(a2 + 8);
    v10 = *(_DWORD *)(a2 + 16);
    while (1)
    {
      v11 = v6;
      v12 = *((double *)v6 + 4);
      if (v8 < v12)
        goto LABEL_3;
      v13 = *((double *)v6 + 5);
      if (v8 == v12 && v9 < v13)
        goto LABEL_3;
      v15 = v8 == v12;
      if (v13 >= v9)
        v15 = 0;
      if (v12 < v8 || v15)
        goto LABEL_15;
      v16 = *((_DWORD *)v11 + 12);
      if (v10 < v16)
      {
LABEL_3:
        v6 = (uint64_t *)*v11;
        v7 = (uint64_t **)v11;
        if (!*v11)
          goto LABEL_18;
      }
      else
      {
        if (v16 >= v10)
          return v11;
LABEL_15:
        v6 = (uint64_t *)v11[1];
        if (!v6)
        {
          v7 = (uint64_t **)(v11 + 1);
          goto LABEL_18;
        }
      }
    }
  }
  v11 = (uint64_t *)(a1 + 1);
LABEL_18:
  v17 = v11;
  v18 = operator new(0x70uLL);
  v19 = *((_QWORD *)*a4 + 2);
  v18[2] = **a4;
  *((_DWORD *)v18 + 16) = 1;
  *(_OWORD *)((char *)v18 + 72) = 0u;
  *(_OWORD *)((char *)v18 + 88) = 0u;
  *((_QWORD *)v18 + 13) = 0;
  *((_QWORD *)v18 + 6) = v19;
  *((_QWORD *)v18 + 7) = &unk_24C55E920;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = v17;
  *v7 = (uint64_t *)v18;
  v20 = (uint64_t *)**a1;
  v21 = (uint64_t *)v18;
  if (v20)
  {
    *a1 = v20;
    v21 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v21);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v18;
}

uint64_t ik::core::msr::MSR::MSR(uint64_t a1, _OWORD *a2)
{
  char *v3;
  int v4;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;

  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "IOSurfaceAccelerator creation");
  v4 = IOSurfaceAcceleratorCreate();
  if (v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = std::string::append(&v14, " / status = ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, v4);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v15, (const std::string::value_type *)v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v16);
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  operator delete(v3);
  return a1;
}

void sub_20CC99818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  void *v34;
  int v35;
  _QWORD **v36;
  uint64_t v37;

  if (*(char *)(v37 - 57) < 0)
  {
    operator delete(*(void **)(v37 - 80));
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if (a27 < 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if (a27 < 0)
  {
LABEL_5:
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_12:
      if (a15 < 0)
      {
        operator delete(a10);
        std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::destroy(v33, *v36);
        _Unwind_Resume(a1);
      }
      std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::destroy(v33, *v36);
      _Unwind_Resume(a1);
    }
LABEL_11:
    __cxa_free_exception(v34);
    goto LABEL_12;
  }
LABEL_10:
  if (!v35)
    goto LABEL_12;
  goto LABEL_11;
}

void std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::__map_value_compare<std::pair<CGSize,unsigned int>,std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>,std::less<std::pair<CGSize,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<CGSize,unsigned int>,ik::PixelBufferTensor>>>::destroy(a1, a2[1]);
    a2[7] = &unk_24C55EA38;
    v4 = (std::__shared_weak_count *)a2[13];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (void *)a2[9];
    if (v7)
    {
      a2[10] = v7;
      operator delete(v7);
    }
    operator delete(a2);
  }
}

double AcSaliencyNode::AcSaliencyNode(uint64_t a1, uint64_t a2)
{
  double result;

  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)&result = 0xDE7C00000001;
  *(_QWORD *)a2 = 0xDE7C00000001;
  return result;
}

{
  double result;

  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)&result = 0xDE7C00000001;
  *(_QWORD *)a2 = 0xDE7C00000001;
  return result;
}

void AcSaliencyNode::~AcSaliencyNode(AcSaliencyNode *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    MEMORY[0x212B93EEC](v1, 0x1000C8077774924);
}

{
  uint64_t v1;

  v1 = *((_QWORD *)this + 15);
  if (v1)
    MEMORY[0x212B93EEC](v1, 0x1000C8077774924);
}

uint64_t AcSaliencyNode::init(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v4;
  uint64_t result;
  _DWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (*a3 != 1)
    return 4294967289;
  v4 = a3[1];
  if (v4 != 56956 && v4 != 56945)
    return 4294967292;
  v8 = &kAcSaliencyNodeConfigDefaultRawData;
  if (a2)
    v8 = a2;
  if (!v8[6] || !v8[5])
    return 4294967292;
  v9 = *(_OWORD *)v8;
  v10 = *((_OWORD *)v8 + 1);
  v11 = *((_OWORD *)v8 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)v8 + 2);
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)a1 = v9;
  *(_OWORD *)(a1 + 16) = v10;
  v12 = *((_OWORD *)v8 + 4);
  v13 = *((_OWORD *)v8 + 5);
  v14 = *((_OWORD *)v8 + 6);
  *(_DWORD *)(a1 + 112) = v8[28];
  *(_OWORD *)(a1 + 80) = v13;
  *(_OWORD *)(a1 + 96) = v14;
  *(_OWORD *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 128) = 4 * *(_DWORD *)(a1 + 44) + 4 + (4 * *(_DWORD *)(a1 + 44) + 4) * *(_DWORD *)(a1 + 48);
  v15 = operator new[]();
  result = 0;
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a3 + 1) = 0xDE70000DE71;
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  return result;
}

void AcSaliencyNode::postProcess(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, __n128 *a5)
{
  int v8;
  int v9;
  double v10;
  double v11;

  if (*a4 == 1 && a3 == 1 && a4[1] == 56945)
  {
    v8 = *(_DWORD *)(a1 + 48);
    a5[374].n128_u16[1] = *(_DWORD *)(a1 + 44);
    a5[374].n128_u16[0] = v8;
    std::chrono::steady_clock::now();
    AcSaliencyNode::postProcessSaliency(a1, a2, 1, v9, a5, v10, v11);
  }
}

__n128 AcSaliencyNode::postProcessSaliency(uint64_t a1, uint64_t a2, int a3, int a4, __n128 *a5, double a6, double a7)
{
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  __n128 *v14;
  unint64_t v15;
  unint64_t v16;
  __n128 *v17;
  unint64_t v18;
  _OWORD *v19;
  __n128 *v20;
  int8x8_t v21;
  int8x8_t v22;
  int v23;
  unint64_t v24;
  unsigned __int8 v25;
  unint64_t v26;
  float v27;
  unint64_t v28;
  float v29;
  unint64_t v30;
  float v31;
  float v32;
  int v33;
  BOOL v35;
  __n128 result;
  __n128 v37;
  __n128 *v38;
  int v39;
  int v40;
  uint64_t v41;

  a5[91].n128_u32[3] = 0;
  if (a3
    && (v9 = *(_DWORD *)(a2 + 12), v10 = a5[374].n128_u16[0], v9 == v10)
    && (v11 = *(unsigned int *)(a2 + 8), v12 = a5[374].n128_u16[1], v11 == v12))
  {
    v14 = a5 + 94;
    if (*(_DWORD *)(a2 + 8) && v9)
    {
      v15 = 0;
      LODWORD(v16) = 1;
      v17 = a5 + 94;
      do
      {
        if ((_DWORD)v16)
        {
          v18 = 0;
          do
          {
            LOBYTE(a7) = *(_BYTE *)(*(_QWORD *)a2 + (v18 + v15 * *(_DWORD *)(a2 + 16)));
            *(_QWORD *)&a7 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a7)).u64[0];
            *(float *)&a7 = (float)((float)(*(float *)(a1 + 68) * (float)SLODWORD(a7)) + 1.0) * 255.0;
            v17->n128_u8[v18++] = (int)*(float *)&a7;
            v16 = *(unsigned int *)(a2 + 12);
          }
          while (v18 < v16);
          v11 = *(unsigned int *)(a2 + 8);
        }
        ++v15;
        v17 += 5;
      }
      while (v15 < v11);
      v10 = a5[374].n128_u16[0];
      LODWORD(v12) = a5[374].n128_u16[1];
    }
    v19 = (_OWORD *)((char *)&a5[91].n128_f64[1] + 4);
    a5[374].n128_u8[6] = 1;
    a5[374].n128_u16[2] = 80;
    v38 = a5 + 94;
    v39 = v12;
    v40 = v10;
    v41 = 0x100000050;
    v20 = (__n128 *)(a1 + 132);
    convertSaliencyMapToBoundingBoxes((uint64_t)&v38, (uint64_t)a5, *(char **)(a1 + 120), *(_DWORD *)(a1 + 128), a1 + 132, 50, *(float *)(a1 + 104), *(float *)(a1 + 108));
    if (!*(_DWORD *)(a2 + 8) || !*(_DWORD *)(a2 + 12))
      goto LABEL_41;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    LODWORD(v26) = 1;
    do
    {
      if ((_DWORD)v26)
      {
        *(float *)v21.i32 = (float)v24;
        v27 = a5[92].n128_f32[3];
        if (v27 <= (float)v24)
        {
          v30 = 0;
          v31 = a5[92].n128_f32[2];
          do
          {
            v22.i8[0] = *(_BYTE *)(*(_QWORD *)a2 + (v30 + v23 * *(_DWORD *)(a2 + 16)));
            v22 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v22)).u64[0];
            v32 = (float)((float)(*(float *)(a1 + 68) * (float)v22.i32[0]) - *(float *)(a1 + 112))
                / (float)(1.0 - *(float *)(a1 + 112));
            v22.i32[0] = 0;
            if (v32 >= 0.0)
            {
              *(float *)v22.i32 = v32;
              if (v32 > 1.0)
                v22.i32[0] = 1.0;
            }
            v33 = (int)(float)(*(float *)v22.i32 * 255.0);
            *(float *)v22.i32 = (float)v30;
            if (v31 <= (float)v30 && (float)(v31 + a5[93].n128_f32[0]) > *(float *)v22.i32)
            {
              *(float *)v22.i32 = v27 + a5[93].n128_f32[1];
              v35 = *(float *)v22.i32 > *(float *)v21.i32 && v33 != 0;
              v25 |= v35;
            }
            v14->n128_u8[v30++] = v33;
          }
          while (v30 < *(unsigned int *)(a2 + 12));
          LODWORD(v26) = *(_DWORD *)(a2 + 12);
        }
        else
        {
          v28 = 0;
          do
          {
            v21.i8[0] = *(_BYTE *)(*(_QWORD *)a2 + (v28 + v23 * *(_DWORD *)(a2 + 16)));
            v21 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v21)).u64[0];
            v29 = (float)((float)(*(float *)(a1 + 68) * (float)v21.i32[0]) - *(float *)(a1 + 112))
                / (float)(1.0 - *(float *)(a1 + 112));
            v21.i32[0] = 0;
            if (v29 >= 0.0)
            {
              *(float *)v21.i32 = v29;
              if (v29 > 1.0)
                v21.i32[0] = 1.0;
            }
            *(float *)v21.i32 = *(float *)v21.i32 * 255.0;
            v14->n128_u8[v28++] = (int)*(float *)v21.i32;
            v26 = *(unsigned int *)(a2 + 12);
          }
          while (v28 < v26);
        }
      }
      ++v24;
      v14 += 5;
      ++v23;
    }
    while (v24 < *(unsigned int *)(a2 + 8));
    if (((*(_DWORD *)v19 != 0) & v25) == 0)
    {
LABEL_41:
      a5[93].n128_u32[3] = 0;
      *v19 = 0u;
      *(__n128 *)((char *)&a5[92] + 12) = 0u;
    }
    result = a5[92];
    v37 = a5[93];
    *v20 = result;
    *(__n128 *)(a1 + 148) = v37;
  }
  else
  {
    a5[374].n128_u8[6] = 0;
  }
  return result;
}

uint64_t AcSaliencyNode::getParams(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;

  if (*a2 != 1)
    return 4294967289;
  if (a2[1] != 56945)
    return 4294967292;
  v3 = *(_OWORD *)(a1 + 20);
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a1 + 36);
  *(_OWORD *)(a3 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 44);
  *(_QWORD *)(a3 + 1240) = *(_QWORD *)(a1 + 60);
  *(_OWORD *)(a3 + 1224) = v4;
  strncpy((char *)(a3 + 3336), (const char *)(a1 + 72), 0x20uLL);
  return 0;
}

uint64_t acDetBboxCoderDecodeAll(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned int a16, char a17, uint64_t a18, unsigned int a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  int v44;
  unsigned int v45;
  float v46;
  int v47;
  unsigned int v48;
  unsigned int *v49;
  uint64_t v50;
  __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  float v68;
  uint64_t v69;
  int v70;
  float v71;
  float v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  float v76;
  unsigned int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  int8x8_t v82;
  float v83;
  float v84;
  int8x8_t v85;
  int8x8_t v86;
  float v87;
  uint64_t v88;
  float v89;
  float32x4_t *v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  unsigned int v99;
  uint64_t v100;
  float v101;
  uint64_t v102;
  uint64_t v103;
  unsigned __int8 *v104;
  float v105;
  float32x4_t *v106;
  uint64_t v107;
  uint64_t v108;
  float32x4_t *v109;
  unsigned __int8 *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v126;
  int v127;
  uint64_t v128;
  _DWORD *v129;
  _DWORD *v130;
  _DWORD *v131;
  float v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  unsigned int v141;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  float v148;
  float v149;
  unsigned int *v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  float v158;
  float v159;
  float v160;
  float v161;
  float v162;
  unsigned int *v163;
  uint64_t v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int *v167;
  uint64_t v168;
  unsigned int *v169;
  uint64_t v170;
  __int8 *v171;
  unsigned int v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  unint64_t v175;

  v169 = a1 + 11;
  if ((a1[11] | 2) != 7)
    acDetBboxCoderDecodeAll();
  v22 = 355;
  if (!a17)
    v22 = 345;
  v23 = a1[26];
  if ((_DWORD)v23)
  {
    v24 = a2;
    v25 = 0;
    v26 = 0;
    v147 = 0;
    v163 = &a1[v22];
    v150 = a1 + 385;
    v151 = a1 + 372;
    while (1)
    {
      v27 = a1[393];
      if (v25 >= v27)
      {
        v28 = v25 - v27 + 2 * v27;
        v30 = a1[v25 + 57];
        v31 = a3;
        if (v28 != -1)
        {
          v32 = 0;
          v33 = *(float *)(a7 + 4 * v28);
          v162 = v33;
          v34 = v169;
          goto LABEL_13;
        }
        v29 = -1;
      }
      else
      {
        v28 = 2 * v25;
        v29 = (2 * v25) | 1;
        v30 = a1[v25 + 57];
        v31 = a3;
      }
      v33 = *(float *)(a7 + 4 * v28);
      v32 = v31 + 24 * v29;
      v162 = *(float *)(a7 + 4 * v29);
      v34 = &a1[v25 + 303];
LABEL_13:
      v35 = &a1[v25];
      if (!v35[303])
        acDetBboxCoderDecodeAll();
      if (*(_DWORD *)(v31 + 24 * v28 + 20))
        acDetBboxCoderDecodeAll();
      v36 = *v34;
      if (v32 && *(_DWORD *)(v32 + 20))
        acDetBboxCoderDecodeAll();
      v146 = a4 + 24 * v25;
      if (*(_DWORD *)(v146 + 20))
        acDetBboxCoderDecodeAll();
      v145 = a5 + 24 * v25;
      if (*(_DWORD *)(v145 + 20))
        acDetBboxCoderDecodeAll();
      v144 = a6 + 24 * v25;
      if (*(_DWORD *)(v144 + 20))
        acDetBboxCoderDecodeAll();
      v37 = v36 * v30;
      v38 = v31 + 24 * v28;
      v39 = *(_DWORD *)(v38 + 8);
      v40 = v39 / (v36 * v30);
      if (v40 * v37 != v39)
        acDetBboxCoderDecodeAll();
      v170 = *(unsigned int *)(v38 + 12);
      if ((_DWORD)v170 != *(_DWORD *)(a4 + 24 * v25 + 12))
        acDetBboxCoderDecodeAll();
      if (*(_DWORD *)(a4 + 24 * v25 + 8) != 4 * v30 * v40)
        acDetBboxCoderDecodeAll();
      if (!v32)
      {
        v165 = 0;
        if (!v30)
          goto LABEL_6;
LABEL_27:
        if (v37 > v39)
        {
          v118 = a16 - v147;
          if (a16 < v147)
            v118 = 0;
          v119 = v30 - 1;
          v147 += v30;
          while (v118 > v119)
          {
            if (!--v30)
              goto LABEL_6;
          }
        }
        else
        {
          if (a16 >= v147)
            v41 = a16 - v147;
          else
            v41 = 0;
          if ((_DWORD)v170)
          {
            v42 = 0;
            v133 = v31 + 24 * v28;
            v167 = v35 + 303;
            v159 = *(float *)(a8 + 4 * v25);
            v43 = (float *)&a1[v25];
            v161 = v43[51];
            v158 = v43[39];
            v132 = v43[45];
            v44 = *(_DWORD *)(v133 + 16) * v40;
            v130 = (_DWORD *)(a5 + 24 * v25 + 16);
            v131 = (_DWORD *)(a4 + 24 * v25 + 16);
            v129 = (_DWORD *)(a6 + 24 * v25 + 16);
            v153 = *v130 * v40;
            v45 = *v131 * v40;
            v124 = 4 * v45;
            v152 = *v129 * v40;
            v46 = -v162;
            v157 = v45;
            v156 = 2 * v45;
            v155 = 3 * v45;
            v122 = v30;
            if (v40 <= 1)
              v47 = 1;
            else
              v47 = v40;
            v127 = v47;
            v175 = v25;
            v166 = v32;
            v128 = v41;
            v148 = *(float *)(a13 + 4 * v25);
            v149 = *(float *)(a12 + 4 * v25);
LABEL_36:
            if (v42 == v41)
              goto LABEL_146;
            v48 = 0;
            v137 = (v124 * v42);
            v136 = v44 * v42;
            v126 = v165 * v42;
            v123 = v42;
            v134 = v152 * v42;
            v135 = v153 * v42;
            while (2)
            {
              if (v32)
              {
                v164 = *(_QWORD *)v32 + v126 * a1[394] + *(_DWORD *)(v32 + 16) * v48;
                v49 = v167;
              }
              else
              {
                v164 = 0;
                v49 = v169;
              }
              v50 = 0;
              v51 = (__int8 *)(*(_QWORD *)v146 + v137 + *v131 * v48);
              v168 = *(_QWORD *)v133 + v136 * *v49 + *(_DWORD *)(v133 + 16) * v48;
              v52 = (unsigned __int8 *)(*(_QWORD *)v145 + v135 * a1[371] + *v130 * v48);
              v53 = (unsigned __int8 *)(*(_QWORD *)v144 + v134 * a1[384] + *v129 * v48);
              v141 = v48;
              *(float *)&a10 = v161;
              *(float *)&a11 = v132;
              v160 = v132 + (float)((float)v48 * v161);
LABEL_45:
              v54 = v168 + v50;
              v55 = *v169;
              if (v32)
              {
                v56 = *v167;
                if ((_DWORD)v56)
                {
                  v57 = 0;
                  v58 = -INFINITY;
                  do
                  {
                    LOBYTE(a10) = *(_BYTE *)(v54 + (v44 * v57));
                    *(_QWORD *)&a10 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a10)).u64[0];
                    *(float *)&a10 = (float)SLODWORD(a10);
                    if (v58 < *(float *)&a10)
                    {
                      LODWORD(v55) = v57;
                      v58 = *(float *)&a10;
                    }
                    ++v57;
                  }
                  while (v56 != v57);
                }
                else
                {
                  v58 = -INFINITY;
                }
                v63 = v164 + v50;
                v64 = *(_BYTE *)(v164 + v50);
                v65 = a1[394] * v165;
                if (v165 < v65)
                {
                  v66 = v63 + v65;
                  v67 = (char *)(v63 + v165);
                  do
                  {
                    if (*v67 > v64)
                      v64 = *v67;
                    v67 += v165;
                  }
                  while ((unint64_t)v67 < v66);
                }
                v68 = (float)v64;
                a9.n128_f32[0] = (float)(v33 * v58) + (float)(v46 * v68);
                v69 = a1[v55 + 365];
                LODWORD(a10) = *(_DWORD *)(v24 + 4 * v69);
                if (a9.n128_f32[0] >= *(float *)&a10)
                {
                  v172 = v26;
                  v171 = v51;
                  v173 = v53;
                  v174 = v52;
                  if ((_DWORD)v56)
                  {
                    v70 = 0;
                    v55 = v55;
                    v71 = 0.0;
                    v72 = -INFINITY;
                    do
                    {
                      a9.n128_u8[0] = *(_BYTE *)(v54 + (v44 * v70));
                      a9.n128_f32[0] = expf(v33* (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a9.n128_u64[0])).i32[0]);
                      if (!v55)
                        v72 = a9.n128_f32[0];
                      v71 = v71 + a9.n128_f32[0];
                      ++v70;
                      --v55;
                      --v56;
                    }
                    while (v56);
                  }
                  else
                  {
                    v71 = 0.0;
                    v72 = -INFINITY;
                  }
                  v76 = expf(v162 * v68) + v71;
                  goto LABEL_96;
                }
                v25 = v175;
              }
              else
              {
                if ((_DWORD)v55)
                {
                  v59 = 0;
                  v60 = 0;
                  v61 = 0;
                  LODWORD(a10) = -8388608;
                  a9.n128_u32[0] = -8388608;
                  v62 = *v169;
                  do
                  {
                    LOBYTE(a11) = *(_BYTE *)(v54 + (v44 * v59));
                    *(_QWORD *)&a11 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a11)).u64[0];
                    *(float *)&a11 = v33 * (float)SLODWORD(a11);
                    if (v60 < *v167 && v59 == a1[6 * v25 + 309 + v60])
                    {
                      if (*(float *)&a11 > a9.n128_f32[0])
                      {
                        v61 = (float)(*(float *)&a11 - *(float *)&a10) < *(float *)(v24 + 4 * a1[v60 + 365]);
                        v62 = v60;
                        a9.n128_u32[0] = LODWORD(a11);
                      }
                      ++v60;
                    }
                    else if (*(float *)&a11 > *(float *)&a10)
                    {
                      if (v62 == (_DWORD)v55)
                        v62 = *v169;
                      else
                        v61 = (float)(a9.n128_f32[0] - *(float *)&a11) < *(float *)(v24 + 4 * a1[v62 + 365]);
                      LODWORD(a10) = LODWORD(a11);
                    }
                    ++v59;
                  }
                  while (v55 != v59);
                  if (v61)
                    goto LABEL_44;
                  v173 = v53;
                  v174 = v52;
                  v171 = v51;
                  v172 = v26;
                  v73 = 0;
                  v74 = 0;
                  v75 = *v167;
                  v76 = 0.0;
                  v72 = -INFINITY;
                  do
                  {
                    while (1)
                    {
                      a9.n128_u8[0] = *(_BYTE *)(v54 + (v44 * v73));
                      a9.n128_f32[0] = expf(v33* (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a9.n128_u64[0])).i32[0]);
                      if (v74 < v75)
                        break;
                      v76 = v76 + a9.n128_f32[0];
                      if (v55 == ++v73)
                        goto LABEL_93;
                    }
                    if (a9.n128_f32[0] <= v72)
                      v77 = v62;
                    else
                      v77 = v74;
                    if (a9.n128_f32[0] <= v72)
                      *(float *)&a10 = v72;
                    else
                      *(float *)&a10 = a9.n128_f32[0];
                    if (v73 == a1[6 * v175 + 309 + v74])
                    {
                      v62 = v77;
                      v72 = *(float *)&a10;
                      ++v74;
                    }
                    v76 = v76 + a9.n128_f32[0];
                    ++v73;
                  }
                  while (v55 != v73);
                }
                else
                {
                  v173 = v53;
                  v174 = v52;
                  v171 = v51;
                  v172 = v26;
                  v62 = 0;
                  v76 = 0.0;
                  v72 = -INFINITY;
                }
LABEL_93:
                v69 = a1[v62 + 365];
                v24 = a2;
LABEL_96:
                v78 = v72 / v76;
                v26 = v172;
                v52 = v174;
                v25 = v175;
                v32 = v166;
                v51 = v171;
                v53 = v173;
                if (v78 > *(float *)&v163[v69])
                {
                  if (v172 >= a19)
                    acDetBboxCoderDecodeAll();
                  a9.n128_u32[0] = *(_DWORD *)(a15 + 4 * v147);
                  v79 = (float)a1[5];
                  v80 = a9.n128_f32[0] / v79;
                  a9.n128_u8[0] = v171[v155];
                  v81 = v80
                      * expf(v159 * (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a9.n128_u64[0])).i32[0]);
                  v82.i32[0] = *(_DWORD *)(a14 + 4 * v147);
                  v83 = (float)a1[6];
                  v84 = *(float *)v82.i32 / v83;
                  v82.i8[0] = v171[v156];
                  a9.n128_f32[0] = v84 * expf(v159 * (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v82)).i32[0]);
                  v85.i8[0] = v171[v157];
                  *(_QWORD *)&a10 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v85)).u64[0];
                  v86.i8[0] = *v171;
                  v87 = (float)(v158 + (float)((float)v50 * v161)) / v83;
                  *(float *)v86.i32 = (float)(v87
                                            + (float)((float)(v159
                                                            * (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v86)).i32[0])
                                                    * v84))
                                    + (float)(a9.n128_f32[0] * -0.5);
                  v88 = a18 + 36 * v172;
                  a9.n128_f32[0] = a9.n128_f32[0] + *(float *)v86.i32;
                  *(float *)&a10 = (float)((float)(v160 / v79) + (float)((float)(v159 * (float)SLODWORD(a10)) * v80))
                                 + (float)(v81 * -0.5);
                  *(_DWORD *)v88 = v86.i32[0];
                  *(_DWORD *)(v88 + 4) = LODWORD(a10);
                  *(_DWORD *)(v88 + 8) = a9.n128_u32[0];
                  *(float *)(v88 + 12) = v81 + *(float *)&a10;
                  *(_DWORD *)(v88 + 16) = v69;
                  *(float *)(v88 + 20) = v78;
                  v89 = v87 + (float)(v84 * -0.5);
                  *(float *)&a11 = (float)(v160 / v79) + (float)(v80 * -0.5);
                  a9.n128_f32[0] = (float)((float)(v89 + (float)(v84 + v89)) * -0.5)
                                 + (float)((float)(*(float *)v86.i32 + a9.n128_f32[0]) * 0.5);
                  *(float *)&a10 = (float)((float)(*(float *)&a11 + (float)(v80 + *(float *)&a11)) * -0.5)
                                 + (float)((float)(*(float *)&a10 + (float)(v81 + *(float *)&a10)) * 0.5);
                  *(float *)&a11 = (float)(v80 + *(float *)&a11) - *(float *)&a11;
                  a9.n128_f32[0] = sqrtf((float)((float)(*(float *)&a10 / *(float *)&a11)* (float)(*(float *)&a10 / *(float *)&a11))+ (float)((float)(a9.n128_f32[0] / (float)((float)(v84 + v89) - v89))* (float)(a9.n128_f32[0] / (float)((float)(v84 + v89) - v89))));
                  *(float *)&a10 = 1.0 - v78;
                  a9.n128_f32[0] = (float)(1.0 - v78) + a9.n128_f32[0];
                  *(_DWORD *)(v88 + 32) = a9.n128_u32[0];
                  if ((_DWORD)v69 == 1)
                  {
                    v90 = *(float32x4_t **)a20;
                    v91 = a1[371];
                    v92 = v91;
                    v93 = *(float32x4_t **)a20;
                    v94 = v174;
                    v46 = -v162;
                    if ((_DWORD)v91)
                    {
                      do
                      {
                        a9.n128_u8[0] = *v94;
                        a9 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a9.n128_u64[0]));
                        a9.n128_f32[0] = v149 * (float)a9.n128_i32[0];
                        v93->i32[0] = a9.n128_u32[0];
                        v93 = (float32x4_t *)((char *)v93 + 4);
                        v94 += v153;
                        --v92;
                      }
                      while (v92);
                    }
                    bmSoftmax(v90, v90->f32, v91, a9);
                    v99 = a1[371];
                    if (*(_DWORD *)(a20 + 12) != v99)
                      acDetBboxCoderDecodeAll(v95, v96, v97);
                    if (v99 < 2)
                    {
                      v100 = 0;
                      v103 = v152;
                      v104 = v173;
                    }
                    else
                    {
                      LODWORD(v100) = 0;
                      v101 = **(float **)a20;
                      v102 = 1;
                      v103 = v152;
                      v104 = v173;
                      do
                      {
                        v105 = *(float *)(*(_QWORD *)a20 + 4 * v102);
                        if (v105 <= v101)
                          v100 = v100;
                        else
                          v100 = v102;
                        if (v105 > v101)
                          v101 = *(float *)(*(_QWORD *)a20 + 4 * v102);
                        ++v102;
                      }
                      while (v99 != (_DWORD)v102);
                    }
                    v98.n128_f32[0] = (float)(int)v151[v100];
                    *(_DWORD *)(a18 + 36 * v172 + 24) = v98.n128_u32[0];
                    v106 = *(float32x4_t **)a21;
                    v107 = a1[384];
                    v108 = v107;
                    v109 = *(float32x4_t **)a21;
                    v110 = v104;
                    if ((_DWORD)v107)
                    {
                      do
                      {
                        v98.n128_u8[0] = *v110;
                        v98 = (__n128)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)v98.n128_u64[0]));
                        v98.n128_f32[0] = v148 * (float)v98.n128_i32[0];
                        v109->i32[0] = v98.n128_u32[0];
                        v109 = (float32x4_t *)((char *)v109 + 4);
                        v110 += v103;
                        --v108;
                      }
                      while (v108);
                    }
                    bmSoftmax(v106, v106->f32, v107, v98);
                    v114 = a1[384];
                    if (*(_DWORD *)(a21 + 12) != v114)
                      acDetBboxCoderDecodeAll(v111, v112, v113);
                    if (v114 < 2)
                    {
                      v115 = 0;
                      v32 = v166;
                      v51 = v171;
                      v53 = v173;
                      v52 = v174;
                    }
                    else
                    {
                      LODWORD(v115) = 0;
                      v116 = **(float **)a21;
                      v117 = 1;
                      v32 = v166;
                      v51 = v171;
                      v53 = v173;
                      v52 = v174;
                      do
                      {
                        LODWORD(a10) = *(_DWORD *)(*(_QWORD *)a21 + 4 * v117);
                        if (*(float *)&a10 <= v116)
                          v115 = v115;
                        else
                          v115 = v117;
                        if (*(float *)&a10 > v116)
                          v116 = *(float *)(*(_QWORD *)a21 + 4 * v117);
                        ++v117;
                      }
                      while (v114 != (_DWORD)v117);
                    }
                    *(float *)(a18 + 36 * v172 + 28) = (float)(int)v150[v115];
                    v26 = v172 + 1;
                    if (v26 >= a19)
                      return v26;
                  }
                  else
                  {
                    v51 = v171;
                    *(_DWORD *)(a18 + 36 * v172 + 24) = 0;
                    v32 = v166;
                    v46 = -v162;
                    v53 = v173;
                    v52 = v174;
                    *(_DWORD *)(a18 + 36 * v172 + 28) = 0;
                    v26 = v172 + 1;
                    if (v26 >= a19)
                      return v26;
                  }
                }
              }
LABEL_44:
              ++v51;
              ++v52;
              ++v53;
              if (++v50 == v170)
              {
                v48 = v141 + 1;
                v41 = v128;
                if (v141 + 1 != v127)
                  continue;
                v42 = v123 + 1;
                ++v147;
                if (v123 + 1 == v122)
                {
                  v23 = a1[26];
                  goto LABEL_6;
                }
                goto LABEL_36;
              }
              goto LABEL_45;
            }
          }
          v120 = v30 - 1;
          v147 += v30;
          if (v32)
          {
            while (v41 > v120)
            {
              if (!--v30)
                goto LABEL_6;
            }
          }
          else
          {
            while (v41 > v120)
            {
              if (!--v30)
                goto LABEL_6;
            }
          }
        }
LABEL_146:
        acDetBboxCoderDecodeAll();
      }
      v165 = *(_DWORD *)(v32 + 16) * v40;
      if (v30)
        goto LABEL_27;
LABEL_6:
      if (++v25 >= v23)
        return v26;
    }
  }
  return 0;
}

uint64_t acDetBboxCoderGetClsBufferInds(uint64_t result, unsigned int a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5;
  int v6;
  int v7;

  v5 = a2 - result + 2 * result;
  v6 = 2 * a2;
  if (a2 >= result)
    v6 = -1;
  else
    v5 = -1;
  *a3 = v5;
  if (a2 < result)
    v7 = (2 * a2) | 1;
  else
    v7 = -1;
  *a4 = v6;
  *a5 = v7;
  return result;
}

uint64_t acDetBboxCoderDecodeAllFloat(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, char a10, uint64_t a11, unsigned int a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  float *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float *v52;
  float *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  float v59;
  float v60;
  unsigned int v61;
  float v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  int v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  float *v75;
  float v76;
  unsigned int v77;
  float *v78;
  float *v79;
  int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  __n128 v96;
  float32x4_t *v97;
  uint64_t v98;
  uint64_t v99;
  float32x4_t *v100;
  unsigned __int32 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __n128 v105;
  unsigned int v106;
  uint64_t v107;
  float v108;
  uint64_t v109;
  uint64_t v110;
  float v111;
  float v112;
  float32x4_t *v113;
  uint64_t v114;
  uint64_t v115;
  float32x4_t *v116;
  unsigned __int32 *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  float v123;
  uint64_t v124;
  float v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  _DWORD *v140;
  float v141;
  _QWORD *v142;
  _DWORD *v143;
  int v144;
  int v145;
  int v146;
  uint64_t v147;
  unsigned int v150;
  uint64_t v153;
  unsigned int *v154;
  unsigned int *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float v163;
  float v166;
  unsigned int v168;
  unsigned int *v169;
  uint64_t v170;
  unsigned int *v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  int v175;
  float *v176;
  unsigned int v177;
  float *v178;

  v174 = a1 + 11;
  if ((a1[11] | 2) != 7)
    acDetBboxCoderDecodeAllFloat();
  v15 = 355;
  if (!a10)
    v15 = 345;
  v16 = a1[26];
  if (v16)
  {
    v17 = a2;
    v18 = 0;
    v153 = 0;
    v169 = &a1[v15];
    v155 = a1 + 372;
    v154 = a1 + 385;
    while (1)
    {
      v19 = a1[393];
      v20 = HIDWORD(v153);
      v21 = HIDWORD(v153) >= v19;
      if (HIDWORD(v153) < v19)
        v22 = -1;
      else
        v22 = HIDWORD(v153) - v19 + 2 * v19;
      if (HIDWORD(v153) < v19)
        v23 = 2 * HIDWORD(v153);
      else
        v23 = -1;
      if (v21)
        v24 = -1;
      else
        v24 = (2 * HIDWORD(v153)) | 1;
      v25 = &a1[HIDWORD(v153)];
      v26 = (int *)v174;
      v171 = v25 + 303;
      if (v22 == -1)
      {
        v26 = (int *)(v25 + 303);
        v27 = a3 + 24 * v24;
      }
      else
      {
        v27 = 0;
      }
      v175 = v22;
      if (v22 != -1)
        v23 = v22;
      if (!v25[303])
        acDetBboxCoderDecodeAllFloat();
      if (*(_DWORD *)(a3 + 24 * v23 + 20) != 6)
        acDetBboxCoderDecodeAllFloat();
      v28 = v25[57];
      v29 = *v26;
      if (v22 == -1 && *(_DWORD *)(a3 + 24 * v24 + 20) != 6)
        acDetBboxCoderDecodeAllFloat();
      v30 = HIDWORD(v153);
      if (*(_DWORD *)(a4 + 24 * HIDWORD(v153) + 20) != 6)
        acDetBboxCoderDecodeAllFloat();
      if (*(_DWORD *)(a5 + 24 * HIDWORD(v153) + 20) != 6)
        acDetBboxCoderDecodeAllFloat();
      if (*(_DWORD *)(a6 + 24 * HIDWORD(v153) + 20) != 6)
        acDetBboxCoderDecodeAllFloat();
      v31 = v29 * v28;
      v32 = a3 + 24 * v23;
      v33 = *(_DWORD *)(v32 + 8);
      v34 = v33 / (v29 * (int)v28);
      if (v34 * v31 != v33)
        acDetBboxCoderDecodeAllFloat();
      v173 = *(unsigned int *)(v32 + 12);
      if ((_DWORD)v173 != *(_DWORD *)(a4 + 24 * HIDWORD(v153) + 12))
        acDetBboxCoderDecodeAllFloat();
      if (*(_DWORD *)(a4 + 24 * HIDWORD(v153) + 8) != 4 * (_DWORD)v28 * v34)
        acDetBboxCoderDecodeAllFloat();
      v35 = a3 + 24 * v23;
      v37 = *(_DWORD *)(v35 + 16);
      v36 = (_DWORD *)(v35 + 16);
      v38 = v37 * v34;
      if (((v37 * v34) & 3) != 0)
        acDetBboxCoderDecodeAllFloat();
      if (v175 == -1)
        break;
      v168 = 0;
      v39 = v153;
      if ((_DWORD)v28)
        goto LABEL_36;
LABEL_6:
      HIDWORD(v153) = v20 + 1;
      if (v20 + 1 >= v16)
        return v18;
    }
    v168 = (*(_DWORD *)(a3 + 24 * v24 + 16) * v34) >> 2;
    v39 = v153;
    if (!(_DWORD)v28)
      goto LABEL_6;
LABEL_36:
    if (v31 > v33)
    {
      v126 = a9 - v39;
      if (a9 < v39)
        v126 = 0;
      v127 = v28 - 1;
      LODWORD(v153) = v39 + v28;
      while (v126 > v127)
      {
        LODWORD(v28) = v28 - 1;
        if (!(_DWORD)v28)
          goto LABEL_6;
      }
    }
    else
    {
      if (a9 >= v39)
        v40 = a9 - v39;
      else
        v40 = 0;
      if ((_DWORD)v173)
      {
        v143 = v36;
        v132 = v27;
        v133 = (_QWORD *)(a3 + 24 * v24);
        v142 = (_QWORD *)(a3 + 24 * v23);
        v41 = (float *)&a1[HIDWORD(v153)];
        v166 = v41[51];
        v163 = v41[39];
        v141 = v41[45];
        v42 = v38 >> 2;
        v140 = (_DWORD *)(a5 + 24 * HIDWORD(v153) + 16);
        v157 = (*v140 * v34) >> 2;
        v43 = 0;
        v138 = (_DWORD *)(a6 + 24 * HIDWORD(v153) + 16);
        v139 = (_DWORD *)(a4 + 24 * HIDWORD(v153) + 16);
        v156 = (*v138 * v34) >> 2;
        LODWORD(v41) = *v139 * v34;
        v131 = v41 & 0xFFFFFFFC;
        v161 = 2 * (v41 >> 2);
        v162 = v41 >> 2;
        v160 = 3 * (v41 >> 2);
        if (v34 <= 1)
          v44 = 1;
        else
          v44 = v34;
        v135 = v44;
        v45 = 4 * v168;
        v137 = v28;
        v136 = v40;
LABEL_45:
        if (v43 == v40)
          goto LABEL_155;
        v46 = 0;
        v147 = v131 * v43;
        v146 = v42 * v43;
        v134 = v168 * v43;
        v130 = v43;
        v144 = v156 * v43;
        v145 = v157 * v43;
LABEL_48:
        if (v175 == -1)
        {
          v47 = *v133 + 4 * v134 * a1[394] + ((*(_DWORD *)(v132 + 16) * v46) & 0xFFFFFFFC);
          v48 = v171;
        }
        else
        {
          v47 = 0;
          v48 = v174;
        }
        v49 = 0;
        v50 = *(_QWORD *)(a4 + 24 * HIDWORD(v153)) + 4 * v147 + ((*v139 * v46) & 0xFFFFFFFC);
        v172 = *v142 + 4 * v146 * *v48 + 4 * ((*v143 * v46) >> 2);
        v159 = *(_QWORD *)(a5 + 24 * HIDWORD(v153)) + 4 * v145 * a1[371] + 4 * *v140 * v46;
        v158 = *(_QWORD *)(a6 + 24 * HIDWORD(v153)) + 4 * v144 * a1[384] + 4 * *v138 * v46;
        v150 = v46;
        v51 = v141 + (float)((float)v46 * v166);
        v52 = (float *)(v47 + v45);
        v170 = v47;
        while (1)
        {
          v178 = (float *)v50;
          v54 = v172 + 4 * v49;
          v55 = *v174;
          if (v175 == -1)
          {
            v177 = v18;
            v71 = *v171;
            if ((_DWORD)v71)
            {
              v72 = 0;
              v73 = -INFINITY;
              do
              {
                if (*(float *)(v54 + 4 * v42 * v72) > v73)
                {
                  LODWORD(v55) = v72;
                  v73 = *(float *)(v54 + 4 * v42 * v72);
                }
                ++v72;
              }
              while (v71 != v72);
            }
            else
            {
              v73 = -INFINITY;
            }
            v75 = (float *)(v47 + 4 * v49);
            v76 = *v75;
            v77 = a1[394] * v168;
            if (v168 < v77)
            {
              v78 = &v75[v77];
              v79 = v52;
              do
              {
                if (*v79 > v76)
                  v76 = *v79;
                v79 = (float *)((char *)v79 + v45);
              }
              while (v79 < v78);
            }
            v74 = a1[v55 + 365];
            if ((float)(v73 - v76) >= *(float *)(v17 + 4 * v74))
            {
              v176 = v52;
              if ((_DWORD)v71)
              {
                v80 = 0;
                v55 = v55;
                v81 = 0.0;
                v67 = -INFINITY;
                do
                {
                  v82 = expf(*(float *)(v54 + 4 * v42 * v80));
                  if (!v55)
                    v67 = v82;
                  v81 = v81 + v82;
                  ++v80;
                  --v55;
                  --v71;
                }
                while (v71);
              }
              else
              {
                v81 = 0.0;
                v67 = -INFINITY;
              }
              v66 = expf(v76) + v81;
LABEL_105:
              v53 = v178;
              v30 = HIDWORD(v153);
              v83 = v67 / v66;
              v45 = 4 * v168;
              v18 = v177;
              v47 = v170;
              v52 = v176;
              if (v83 > *(float *)&v169[v74])
              {
                if (v177 >= a12)
                  acDetBboxCoderDecodeAllFloat();
                v84 = (float)a1[5];
                v85 = *(float *)(a8 + 4 * v153) / v84;
                v86 = v85 * expf(v178[v160]);
                v87 = (float)a1[6];
                v88 = *(float *)(a7 + 4 * v153) / v87;
                v96.n128_f32[0] = v88 * expf(v178[v161]);
                v89 = (float)(v163 + (float)((float)v49 * v166)) / v87;
                v90 = (float)(v89 + (float)(*v178 * v88)) + (float)(v96.n128_f32[0] * -0.5);
                v91 = a11 + 36 * v177;
                v96.n128_f32[0] = v96.n128_f32[0] + v90;
                v92 = (float)((float)(v51 / v84) + (float)(v178[v162] * v85)) + (float)(v86 * -0.5);
                *(float *)v91 = v90;
                *(float *)(v91 + 4) = v92;
                *(_DWORD *)(v91 + 8) = v96.n128_u32[0];
                *(float *)(v91 + 12) = v86 + v92;
                *(_DWORD *)(v91 + 16) = v74;
                *(float *)(v91 + 20) = v83;
                v93 = v89 + (float)(v88 * -0.5);
                v94 = (float)(v51 / v84) + (float)(v85 * -0.5);
                v96.n128_f32[0] = (float)((float)(v93 + (float)(v88 + v93)) * -0.5)
                                + (float)((float)(v90 + v96.n128_f32[0]) * 0.5);
                v95 = (float)((float)(v94 + (float)(v85 + v94)) * -0.5)
                    + (float)((float)(v92 + (float)(v86 + v92)) * 0.5);
                v96.n128_f32[0] = (float)(1.0 - v83)
                                + sqrtf((float)((float)(v95 / (float)((float)(v85 + v94) - v94))* (float)(v95 / (float)((float)(v85 + v94) - v94)))+ (float)((float)(v96.n128_f32[0] / (float)((float)(v88 + v93) - v93))* (float)(v96.n128_f32[0] / (float)((float)(v88 + v93) - v93))));
                *(_DWORD *)(v91 + 32) = v96.n128_u32[0];
                if ((_DWORD)v74 == 1)
                {
                  v97 = *(float32x4_t **)a13;
                  v98 = a1[371];
                  v99 = v98;
                  v100 = *(float32x4_t **)a13;
                  v101 = (unsigned __int32 *)v159;
                  if ((_DWORD)v98)
                  {
                    do
                    {
                      v96.n128_u32[0] = *v101;
                      v100->i32[0] = *v101;
                      v100 = (float32x4_t *)((char *)v100 + 4);
                      v101 += v157;
                      --v99;
                    }
                    while (v99);
                  }
                  bmSoftmax(v97, v97->f32, v98, v96);
                  v106 = a1[371];
                  if (*(_DWORD *)(a13 + 12) != v106)
                    acDetBboxCoderDecodeAll(v102, v103, v104);
                  if (v106 < 2)
                  {
                    v107 = 0;
                    v110 = v156;
                  }
                  else
                  {
                    LODWORD(v107) = 0;
                    v108 = **(float **)a13;
                    v109 = 1;
                    v110 = v156;
                    do
                    {
                      v111 = *(float *)(*(_QWORD *)a13 + 4 * v109);
                      if (v111 <= v108)
                        v107 = v107;
                      else
                        v107 = v109;
                      if (v111 > v108)
                        v108 = *(float *)(*(_QWORD *)a13 + 4 * v109);
                      ++v109;
                    }
                    while (v106 != (_DWORD)v109);
                  }
                  v105.n128_f32[0] = (float)(int)v155[v107];
                  *(_DWORD *)(a11 + 36 * v177 + 24) = v105.n128_u32[0];
                  v113 = *(float32x4_t **)a14;
                  v114 = a1[384];
                  v115 = v114;
                  v116 = *(float32x4_t **)a14;
                  v117 = (unsigned __int32 *)v158;
                  if ((_DWORD)v114)
                  {
                    do
                    {
                      v105.n128_u32[0] = *v117;
                      v116->i32[0] = *v117;
                      v116 = (float32x4_t *)((char *)v116 + 4);
                      v117 += v110;
                      --v115;
                    }
                    while (v115);
                  }
                  bmSoftmax(v113, v113->f32, v114, v105);
                  v121 = a1[384];
                  if (*(_DWORD *)(a14 + 12) != v121)
                    acDetBboxCoderDecodeAll(v118, v119, v120);
                  if (v121 < 2)
                  {
                    v122 = 0;
                    v45 = 4 * v168;
                    v47 = v170;
                  }
                  else
                  {
                    LODWORD(v122) = 0;
                    v123 = **(float **)a14;
                    v124 = 1;
                    v45 = 4 * v168;
                    v47 = v170;
                    do
                    {
                      v125 = *(float *)(*(_QWORD *)a14 + 4 * v124);
                      if (v125 <= v123)
                        v122 = v122;
                      else
                        v122 = v124;
                      if (v125 > v123)
                        v123 = *(float *)(*(_QWORD *)a14 + 4 * v124);
                      ++v124;
                    }
                    while (v121 != (_DWORD)v124);
                  }
                  v112 = (float)(int)v154[v122];
                }
                else
                {
                  *(_DWORD *)(a11 + 36 * v177 + 24) = 0;
                  v112 = 0.0;
                  v45 = 4 * v168;
                  v47 = v170;
                }
                *(float *)(a11 + 36 * v177 + 28) = v112;
                v18 = v177 + 1;
                v30 = HIDWORD(v153);
                if (v18 >= a12)
                  return v18;
              }
              goto LABEL_54;
            }
            v18 = v177;
          }
          else
          {
            if (!(_DWORD)v55)
            {
              v176 = v52;
              v177 = v18;
              v61 = 0;
              v66 = 0.0;
              v67 = -INFINITY;
LABEL_89:
              v74 = a1[v61 + 365];
              v17 = a2;
              goto LABEL_105;
            }
            v56 = 0;
            v57 = 0;
            v58 = 0;
            v59 = -INFINITY;
            v60 = -INFINITY;
            v61 = *v174;
            do
            {
              v62 = *(float *)(v54 + 4 * v42 * v56);
              if (v57 < *v171 && v56 == a1[6 * v30 + 309 + v57])
              {
                if (v62 > v60)
                {
                  v58 = (float)(v62 - v59) < *(float *)(v17 + 4 * a1[v57 + 365]);
                  v61 = v57;
                  v60 = *(float *)(v54 + 4 * v42 * v56);
                }
                ++v57;
              }
              else if (v62 > v59)
              {
                if (v61 == (_DWORD)v55)
                  v61 = *v174;
                else
                  v58 = (float)(v60 - v62) < *(float *)(v17 + 4 * a1[v61 + 365]);
                v59 = *(float *)(v54 + 4 * v42 * v56);
              }
              ++v56;
            }
            while (v55 != v56);
            if (!v58)
            {
              v176 = v52;
              v177 = v18;
              v63 = 0;
              v64 = 0;
              v65 = *v171;
              v66 = 0.0;
              v67 = -INFINITY;
              do
              {
                v68 = expf(*(float *)(v54 + 4 * v42 * v63));
                if (v64 < v65)
                {
                  v69 = v68 <= v67 ? v61 : v64;
                  v70 = v68 <= v67 ? v67 : v68;
                  if (v63 == a1[6 * HIDWORD(v153) + 309 + v64])
                  {
                    v61 = v69;
                    v67 = v70;
                    ++v64;
                  }
                }
                v66 = v66 + v68;
                ++v63;
              }
              while (v55 != v63);
              goto LABEL_89;
            }
          }
          v53 = v178;
LABEL_54:
          v50 = (uint64_t)(v53 + 1);
          ++v49;
          ++v52;
          if (v49 == v173)
          {
            v46 = v150 + 1;
            v20 = HIDWORD(v153);
            v40 = v136;
            if (v150 + 1 != v135)
              goto LABEL_48;
            LODWORD(v153) = v153 + 1;
            v43 = v130 + 1;
            if (v130 + 1 == v137)
            {
              v16 = a1[26];
              goto LABEL_6;
            }
            goto LABEL_45;
          }
        }
      }
      v128 = v28 - 1;
      LODWORD(v153) = v39 + v28;
      if (v175 == -1)
      {
        while (v40 > v128)
        {
          LODWORD(v28) = v28 - 1;
          if (!(_DWORD)v28)
            goto LABEL_6;
        }
      }
      else
      {
        while (v40 > v128)
        {
          LODWORD(v28) = v28 - 1;
          if (!(_DWORD)v28)
            goto LABEL_6;
        }
      }
    }
LABEL_155:
    acDetBboxCoderDecodeAllFloat();
  }
  return 0;
}

float acDetBboxCoderRectToDetRect(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float result;
  __int128 v6;
  uint64_t v7;

  if (a2)
  {
    v3 = 0;
    do
    {
      v4 = a3 + v3;
      result = *(float *)(a1 + v3 + 28);
      v6 = *(_OWORD *)(a1 + v3);
      *(_DWORD *)(v4 + 16) = *(_DWORD *)(a1 + v3 + 16);
      v7 = *(_QWORD *)(a1 + v3 + 20);
      *(_OWORD *)v4 = v6;
      *(_QWORD *)(v4 + 24) = v7;
      *(float *)(v4 + 32) = result;
      v3 += 36;
    }
    while (a1 + v3 < a1 + 36 * (unint64_t)a2);
  }
  return result;
}

void OUTLINED_FUNCTION_0_7(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 36, a4);
}

__n128 acObjectFromFace@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a1 + 88);
  return result;
}

__n128 acObjectToFace@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 60) = 0u;
  *(_OWORD *)(a2 + 44) = 0u;
  *(_OWORD *)(a2 + 28) = 0u;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 28);
  return result;
}

float bmActivationSigmoid(float a1)
{
  return 1.0 / (float)(expf(-a1) + 1.0);
}

float bmActivationTanh(float a1)
{
  float v1;

  v1 = expf(a1 + a1);
  if (v1 == INFINITY)
    return 1.0;
  else
    return (float)(v1 + -1.0) / (float)(v1 + 1.0);
}

void bmActivationSigmoid(unint64_t a1, unsigned int a2, int a3, int a4)
{
  int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v14;
  unint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  uint64_t v25;
  float32x4_t v26;
  float v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  if (a3)
  {
    v4 = a3;
    if (a2)
    {
      v6 = 0;
      v7 = a4 - 4 * a2;
      v8 = 4 * a2;
      __asm { FMOV            V0.4S, #1.0 }
      v26 = _Q0;
      v25 = a2;
      do
      {
        v14 = (float *)(v8 + a1);
        if (v8 + a1 <= a1 + 4)
          v14 = (float *)(a1 + 4);
        v15 = (unint64_t)v14 + ~a1;
        v16 = (float *)a1;
        if (v15 < 0xC)
          goto LABEL_16;
        v17 = (v15 >> 2) + 1;
        v16 = (float *)(a1 + 4 * (v17 & 0x7FFFFFFFFFFFFFFCLL));
        v18 = v17 & 0x7FFFFFFFFFFFFFFCLL;
        v19 = (float32x4_t *)a1;
        do
        {
          v30 = vnegq_f32(*v19);
          v27 = expf(v30.f32[1]);
          v20.f32[0] = expf(v30.f32[0]);
          v20.f32[1] = v27;
          v28 = v20;
          v21 = expf(v30.f32[2]);
          v22 = v28;
          v22.f32[2] = v21;
          v29 = v22;
          v23 = expf(v30.f32[3]);
          v24 = v29;
          v24.f32[3] = v23;
          *v19++ = vdivq_f32(v26, vaddq_f32(v24, v26));
          v18 -= 4;
        }
        while (v18);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          do
          {
            *v16 = 1.0 / (float)(expf(-*v16) + 1.0);
            ++v16;
          }
          while ((unint64_t)v16 < a1 + 4 * v25);
        }
        a1 = (unint64_t)v16 + v7;
        ++v6;
      }
      while (v6 != v4);
    }
    else
    {
      do
        --v4;
      while (v4);
    }
  }
}

void bmActivationSigmoid(const signed __int8 *a1, unsigned int a2, int a3, int a4, float a5, unsigned __int8 *a6, int a7)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const signed __int8 *v16;
  int v17;
  float v18;

  if (a3)
  {
    v12 = 0;
    v13 = a7 - a2;
    v14 = a4 - a2;
    v15 = a2;
    do
    {
      if (a2)
      {
        v16 = &a1[v15];
        do
        {
          v17 = *a1++;
          v18 = expf(-(float)((float)v17 * a5));
          *a6++ = (int)bmClamp((float)((float)(1.0 / (float)(v18 + 1.0)) * 255.0) + 0.5, 0.0, 255.0);
        }
        while (a1 < v16);
      }
      a1 += v14;
      a6 += v13;
      ++v12;
    }
    while (v12 != a3);
  }
}

void bmActivationTanh(unint64_t a1, unsigned int a2, int a3, int a4)
{
  int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;

  if (a3)
  {
    v4 = a3;
    if (a2)
    {
      v6 = 0;
      v7 = 4 * a2;
      v8 = a4 - 4 * a2;
      __asm { FMOV            V0.4S, #-1.0 }
      v31 = _Q0;
      v32 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      __asm { FMOV            V0.4S, #1.0 }
      v30 = _Q0;
      v28 = v8;
      v29 = a2;
      do
      {
        v15 = (float *)(v7 + a1);
        if (v7 + a1 <= a1 + 4)
          v15 = (float *)(a1 + 4);
        v16 = (unint64_t)v15 + ~a1;
        v17 = (float *)a1;
        if (v16 < 0xC)
          goto LABEL_18;
        v18 = (v16 >> 2) + 1;
        v17 = (float *)(a1 + 4 * (v18 & 0x7FFFFFFFFFFFFFFCLL));
        v19 = v18 & 0x7FFFFFFFFFFFFFFCLL;
        v20 = (float32x4_t *)a1;
        do
        {
          v36 = vaddq_f32(*v20, *v20);
          v33 = expf(v36.f32[1]);
          v21.f32[0] = expf(v36.f32[0]);
          v21.f32[1] = v33;
          v34 = v21;
          v22 = expf(v36.f32[2]);
          v23 = v34;
          v23.f32[2] = v22;
          v35 = v23;
          v24 = expf(v36.f32[3]);
          v25 = v35;
          v25.f32[3] = v24;
          *(int8x16_t *)v20++ = vbslq_s8((int8x16_t)vceqq_f32(v25, v32), (int8x16_t)v30, (int8x16_t)vdivq_f32(vaddq_f32(v25, v31), vaddq_f32(v25, v30)));
          v19 -= 4;
        }
        while (v19);
        v8 = v28;
        if (v18 != (v18 & 0x7FFFFFFFFFFFFFFCLL))
        {
LABEL_18:
          do
          {
            v26 = expf(*v17 + *v17);
            v27 = 1.0;
            if (v26 != INFINITY)
              v27 = (float)(v26 + -1.0) / (float)(v26 + 1.0);
            *v17++ = v27;
          }
          while ((unint64_t)v17 < a1 + 4 * v29);
        }
        a1 = (unint64_t)v17 + v8;
        ++v6;
      }
      while (v6 != v4);
    }
    else
    {
      do
        --v4;
      while (v4);
    }
  }
}

void bmMunkres(float *a1, unsigned int a2, unsigned __int8 *a3, unsigned int a4, unsigned int *a5, unsigned int a6, unsigned int *a7)
{
  uint64_t TempBuffers;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  float *v18;
  float v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  float *v35;
  char *v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  unsigned int v53;
  int8x8_t *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  char *v60;
  int8x8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int *v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  char *v70;
  _DWORD *v71;
  uint64_t v72;
  float *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char v96;
  int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int8x16_t *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int8x8_t v107;
  char v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  unsigned int *v113;
  char v114;
  int v115;
  int v116;
  uint64_t v118;
  BOOL v119;
  unsigned int v120;
  uint64_t v121;
  int8x16_t *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  int32x4_t v129;
  int32x4_t v130;
  int8x16_t *v131;
  int8x16_t *v132;
  uint64_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int8x8_t *v148;
  int8x8_t *v149;
  uint64_t v150;
  int8x8_t v151;
  int8x8_t v152;
  uint16x8_t v153;
  uint64_t v154;
  BOOL *v155;
  char *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int8x16_t *v163;
  int8x16_t *v164;
  uint64_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  uint8x16_t v174;
  uint16x8_t v175;
  uint16x8_t v176;
  uint8x16_t v177;
  uint16x8_t v178;
  uint16x8_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int8x8_t *v182;
  int8x8_t *v183;
  uint64_t v184;
  int8x8_t v185;
  uint16x8_t v186;
  uint64_t v187;
  __int8 *v188;
  char *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  unsigned int *v193;
  char *v194;
  unsigned int *v196;
  uint64_t v197;
  int8x8_t v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  float v202;
  float *v203;
  unsigned __int8 *v204;
  uint64_t v205;
  int v206;
  unsigned int v208;
  uint64_t v209;
  float *v210;
  unsigned __int8 *v211;
  uint64_t v212;
  float v214;
  unint64_t v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  uint32x2_t v224;
  uint32x2_t *v225;
  _DWORD *v226;
  uint64_t v227;
  uint32x2_t v228;
  uint32x2_t v229;
  uint32x2_t v230;
  uint64_t v231;
  unsigned int v232;
  void *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  unint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int *v243;
  uint64_t v244;
  uint64_t v245;
  unsigned int *v246;
  unsigned int v247;
  unsigned int *v248;
  _DWORD *v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int *v252;
  size_t v253;
  int32x4_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  int8x16_t *v262;
  int8x16_t *v263;
  uint64_t v264;
  uint64_t v265;
  float *v266;
  int8x8_t *v267;
  unsigned __int8 *v268;
  char *v269;
  unsigned int v270;
  int v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  unsigned int *v276;
  int v277;
  unsigned int v278;

  if (!a2)
    bmMunkres();
  if (a6 < a2)
    bmMunkres();
  if (a2 == 1
    || (v276 = 0,
        v274 = 0u,
        v275 = 0u,
        v272 = 0u,
        v273 = 0u,
        TempBuffers = bmMunkresGetTempBuffers(a2, (uint64_t)a3, a4, (uint64_t)&v272),
        !(_QWORD)v274))
  {
    *a5 = 0;
    return;
  }
  v15 = 0;
  v16 = 4 * a2;
  do
  {
    v17 = 0;
    v18 = &a1[v15];
    v19 = 3.4028e38;
    v20 = a2;
    v21 = a2;
    do
    {
      if (*(float *)((char *)v18 + v17) < v19)
      {
        v19 = *(float *)((char *)v18 + v17);
        v21 = v15;
      }
      v17 += v16;
      --v20;
    }
    while (v20);
    if (v19 < 0.0)
      bmMunkres();
    if (v21 >= a2)
      bmMunkres();
    if (v19 > 0.0)
    {
      v22 = 0;
      v23 = a2;
      do
      {
        *(float *)((char *)v18 + v22) = *(float *)((char *)v18 + v22) - v19;
        v22 += v16;
        --v23;
      }
      while (v23);
    }
    ++v15;
  }
  while (v15 != a2);
  v24 = 0;
  v25 = 0;
  do
  {
    v26 = 0;
    v27 = (float32x4_t *)((char *)a1 + v24 + 16);
    v14.i32[0] = 2139095039;
    v29 = a2;
    do
    {
      v28 = (char *)a1 + v24;
      if (*(float *)&v28[4 * v26] < *(float *)v14.i32)
      {
        v14.i32[0] = *(_DWORD *)&v28[4 * v26];
        v29 = v26;
      }
      ++v26;
    }
    while (a2 != v26);
    if (*(float *)v14.i32 < 0.0)
      bmMunkres();
    if (v29 >= a2)
      bmMunkres(TempBuffers, v12, v13);
    if (*(float *)v14.i32 > 0.0)
    {
      if (a2 < 8)
      {
        v30 = 0;
LABEL_33:
        v34 = a2 - v30;
        v35 = (float *)((char *)&a1[v30] + v24);
        do
        {
          *v35 = *v35 - *(float *)v14.i32;
          ++v35;
          --v34;
        }
        while (v34);
        goto LABEL_20;
      }
      v31 = (float32x4_t)vdupq_lane_s32(v14, 0);
      v32 = a2 & 0xFFFFFFF8;
      do
      {
        v33 = vsubq_f32(*v27, v31);
        v27[-1] = vsubq_f32(v27[-1], v31);
        *v27 = v33;
        v27 += 2;
        v32 -= 8;
      }
      while (v32);
      v30 = a2 & 0xFFFFFFF8;
      if (v30 != a2)
        goto LABEL_33;
    }
LABEL_20:
    ++v25;
    v24 += v16;
  }
  while (v25 != a2);
  v265 = a2 & 0xFFFFFFF8;
  v252 = a7;
  v36 = (char *)v272;
  if (!(_QWORD)v272)
LABEL_293:
    bmMunkres();
  v37 = (int8x16_t *)*((_QWORD *)&v273 + 1);
  v38 = (int8x16_t *)v273;
  v255 = a2 * a2 + 8 * a2 + v16 + 6;
  v253 = 4 * a2;
  v254 = vdupq_n_s32(a2);
  v39 = DWORD2(v272);
  v266 = a1;
  v271 = 4 * a2;
LABEL_39:
  v263 = v37;
  v269 = v36;
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&v277);
  if (v278)
    bmMunkresGetTempBuffers(v40, v41, v42);
  v43 = (v255 + v277);
  v277 = v43;
  if (v43 > v39)
    bmMunkres();
  v262 = v38;
  v44 = (unint64_t)(v269 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v45 = v44 + v16 - (_DWORD)v269;
  v278 = v45;
  if (v43 < v45)
    rtcv::simImageChMean((uint64_t)v269, v43, v42);
  v46 = (unint64_t)&v269[v45 + 3] & 0xFFFFFFFFFFFFFFFCLL;
  v47 = v46 + v16 - (_DWORD)v269;
  v278 = v47;
  if (v43 < v47)
    rtcv::simImageChMean((uint64_t)v269, v43, v42);
  v48 = (v46 + v16 - (_DWORD)v269);
  v49 = &v269[v48];
  v50 = a2 * a2 + v47;
  v278 = v50;
  if (v43 < v50)
    rtcv::simImageChMean((uint64_t)v269, v43, v42);
  v51 = v50;
  v52 = &v269[v50];
  v53 = a2 - (_DWORD)v269;
  v278 = a2 - (_DWORD)v269 + (_DWORD)v52;
  if (v43 < v278)
    rtcv::simImageChMean((uint64_t)v269, v43, v42);
  v54 = (int8x8_t *)&v269[a2 - v269 + v52];
  v55 = v53 + a2 + (_DWORD)v52;
  v278 = v55;
  if (v43 < v55)
    rtcv::simImageChMean((uint64_t)v269, v43, v42);
  v56 = a2 + a2 + (_DWORD)v52;
  v278 = a2 + v55;
  if (v43 < a2 + v55)
    rtcv::simImageChMean((uint64_t)v269, v43, v42);
  v256 = v53 + v56;
  v278 = a2 + a2 + v53 + a2 + (_DWORD)v52;
  if (v43 < v278)
    rtcv::simImageChMean((uint64_t)v269, v43, v42);
  v264 = v48;
  v257 = a2 - v269 + v52;
  v258 = &v269[v53 + a2 + (_DWORD)v52];
  v259 = v53 + a2 + (_DWORD)v52;
  v260 = v52;
  v261 = v51;
  v267 = (int8x8_t *)&v269[v53 + v56];
  bzero(v269, v43);
  if (a2 < 8)
  {
    v57 = 0;
    v58.i64[0] = 0x100000001;
    v58.i64[1] = 0x100000001;
    v59.i64[0] = 0x101010101010101;
    v59.i64[1] = 0x101010101010101;
    v61 = v267;
    v60 = v269;
    v62 = v264;
    goto LABEL_53;
  }
  v62 = v264;
  v63 = a2 & 0xFFFFFFF8;
  v64 = a5 + 4;
  v58.i64[0] = 0x100000001;
  v58.i64[1] = 0x100000001;
  v59.i64[0] = 0x101010101010101;
  v59.i64[1] = 0x101010101010101;
  do
  {
    *((int32x4_t *)v64 - 1) = v254;
    *(int32x4_t *)v64 = v254;
    v64 += 8;
    v63 -= 8;
  }
  while (v63);
  v57 = a2 & 0xFFFFFFF8;
  v61 = v267;
  v60 = v269;
  if (v265 != a2)
  {
LABEL_53:
    v65 = a2 - v57;
    v66 = &a5[v57];
    do
    {
      *v66++ = a2;
      --v65;
    }
    while (v65);
  }
  v67 = 0;
  v68 = 0;
  v69 = 0;
  do
  {
    v70 = &v60[v62 + v68];
    v71 = (_DWORD *)v46;
    v72 = a2;
    v73 = (float *)((char *)a1 + v67);
    do
    {
      while (*v73 > 0.000001)
      {
        *v70++ = 1;
        ++v71;
        ++v73;
        if (!--v72)
          goto LABEL_56;
      }
      if (*v73 < 0.0)
        bmMunkres();
      ++*v71++;
      ++*(_DWORD *)(v44 + 4 * v69);
      ++v70;
      ++v73;
      --v72;
    }
    while (v72);
LABEL_56:
    ++v69;
    v68 += a2;
    v67 += v271;
  }
  while (v69 != a2);
  v74 = 0;
  v75 = 0;
  while (1)
  {
    if (*(_DWORD *)(v44 + 4 * v75) == 1)
    {
      v76 = 0;
      v77 = &v49[v75 * a2];
      do
      {
        v78 = v77[v76];
        if (!v77[v76])
        {
          v54->i8[v75] = 1;
          v77[v76] = 2;
          v79 = v76;
          a5[v79] = v75;
          --*(_DWORD *)(v44 + 4 * v75);
          *(_DWORD *)(v46 + v79 * 4) = *(_DWORD *)(v46 + 4 * v76) - 1;
          v80 = &v49[v76];
          v81 = v75;
          v82 = a2;
          v83 = (_DWORD *)((unint64_t)(v269 + 3) & 0xFFFFFFFFFFFFFFFCLL);
          do
          {
            if (v81 && !v80[v78])
            {
              v80[v78] = 3;
              --*(_DWORD *)(v46 + 4 * v76);
              --*v83;
            }
            ++v83;
            v78 += a2;
            --v81;
            --v82;
          }
          while (v82);
          v74 = 1;
        }
        ++v76;
      }
      while (v76 != a2);
    }
    if (++v75 == a2)
    {
      v84 = 0;
      v85 = v74;
      do
      {
        if (*(_DWORD *)(v46 + 4 * v84) == 1)
        {
          v86 = 0;
          v87 = 0;
          do
          {
            v88 = &v49[v87 * a2];
            if (!v88[v84])
            {
              v89 = 0;
              v54->i8[v87] = 1;
              v88[v84] = 2;
              v90 = v84;
              a5[v90] = v87;
              --*(_DWORD *)(v44 + 4 * v87);
              v91 = &v60[v62 + v86];
              *(_DWORD *)(v46 + v90 * 4) = *(_DWORD *)(v46 + 4 * v84) - 1;
              do
              {
                if (v84 != v89 && !v91[v89])
                {
                  v91[v89] = 3;
                  --*(_DWORD *)(v44 + 4 * v87);
                  --*(_DWORD *)(v46 + 4 * v89);
                }
                ++v89;
              }
              while (a2 != v89);
              v85 = 1;
            }
            ++v87;
            v86 += a2;
          }
          while (v87 != a2);
        }
        ++v84;
      }
      while (v84 != a2);
      v74 = 0;
      v75 = 0;
      if ((v85 & 1) == 0)
        break;
    }
  }
  v92 = 0;
  v93 = 0;
  do
  {
    if (*(_DWORD *)(v44 + 4 * v93))
    {
      v94 = 0;
      v95 = &v49[v93 * a2];
      v96 = 1;
      do
      {
        if (!v95[v94])
        {
          if ((v96 & 1) != 0)
          {
            v97 = 0;
            v98 = 0;
            v54->i8[v93] = 1;
            v95[v94] = 2;
            a5[v94] = v93;
            v61->i8[v94] = 1;
            --*(_DWORD *)(v44 + 4 * v93);
            --*(_DWORD *)(v46 + 4 * v94);
            v99 = &v49[v94];
            do
            {
              if (v93 != v98 && !v99[v97])
              {
                v99[v97] = 3;
                --*(_DWORD *)(v46 + 4 * v94);
                --*(_DWORD *)(v44 + 4 * v98);
              }
              ++v98;
              v97 += a2;
            }
            while (a2 != v98);
            v96 = 0;
            v92 = 1;
          }
          else
          {
            v96 = 0;
            v95[v94] = 3;
            --*(_DWORD *)(v44 + 4 * v93);
            --*(_DWORD *)(v46 + 4 * v94);
          }
        }
        ++v94;
      }
      while (v94 != a2);
    }
    ++v93;
  }
  while (v93 != a2);
  v100 = 0;
  if (a2 < 8)
  {
    v103 = v262;
    v101 = v259;
    v104 = v260;
    v102 = v258;
  }
  else
  {
    v102 = v258;
    v101 = v259;
    v103 = v262;
    v104 = v260;
    if ((unint64_t)(v258 - (char *)v54) >= 8)
    {
      v105 = &v60[v259 + 3];
      v106 = a2 & 0xFFFFFFF8;
      while (1)
      {
        v107 = vceqz_s8(*v54);
        if ((v107.i8[0] & 1) != 0)
        {
          *(v105 - 3) = 1;
          if ((v107.i8[1] & 1) == 0)
            goto LABEL_108;
        }
        else if ((v107.i8[1] & 1) == 0)
        {
LABEL_108:
          if ((v107.i8[2] & 1) != 0)
            goto LABEL_109;
          goto LABEL_117;
        }
        *(v105 - 2) = 1;
        if ((v107.i8[2] & 1) != 0)
        {
LABEL_109:
          *(v105 - 1) = 1;
          if ((v107.i8[3] & 1) == 0)
            goto LABEL_110;
          goto LABEL_118;
        }
LABEL_117:
        if ((v107.i8[3] & 1) == 0)
        {
LABEL_110:
          if ((v107.i8[4] & 1) != 0)
            goto LABEL_111;
          goto LABEL_119;
        }
LABEL_118:
        *v105 = 1;
        if ((v107.i8[4] & 1) != 0)
        {
LABEL_111:
          v105[1] = 1;
          if ((v107.i8[5] & 1) == 0)
            goto LABEL_112;
          goto LABEL_120;
        }
LABEL_119:
        if ((v107.i8[5] & 1) == 0)
        {
LABEL_112:
          if ((v107.i8[6] & 1) != 0)
            goto LABEL_113;
          goto LABEL_121;
        }
LABEL_120:
        v105[2] = 1;
        if ((v107.i8[6] & 1) != 0)
        {
LABEL_113:
          v105[3] = 1;
          if ((v107.i8[7] & 1) != 0)
            goto LABEL_122;
          goto LABEL_105;
        }
LABEL_121:
        if ((v107.i8[7] & 1) != 0)
LABEL_122:
          v105[4] = 1;
LABEL_105:
        ++v54;
        v105 += 8;
        v106 -= 8;
        if (!v106)
        {
          v100 = a2 & 0xFFFFFFF8;
          if (v265 == a2)
            goto LABEL_124;
          break;
        }
      }
    }
  }
  v125 = &v60[v100 + v101];
  v126 = a2 - v100;
  v127 = &v60[v100 + v257];
  do
  {
    if (!*v127++)
      *v125 = 1;
    ++v125;
    --v126;
  }
  while (v126);
LABEL_124:
  v108 = 0;
  v109 = 0;
  do
  {
    if (v102[v109])
    {
      v110 = &v49[v109 * a2];
      v111 = v104;
      v112 = a2;
      v113 = a5;
      v114 = v108;
      do
      {
        v116 = *v110++;
        v115 = v116;
        if ((v116 == 3 || v115 == 0) && !*v111)
        {
          v114 = 1;
          *v111 = 1;
          v118 = *v113;
          if (v118 < a2 && !v102[v118])
            v102[v118] = 1;
        }
        ++v113;
        ++v111;
        --v112;
      }
      while (v112);
    }
    else
    {
      v114 = v108;
    }
    v119 = v109 + 1 == a2;
    v108 = (v109 + 1 != a2) & v114;
    if (v109 + 1 == a2)
      v109 = 0;
    else
      ++v109;
  }
  while (!v119 || (v114 & 1) != 0);
  v120 = 0;
  v121 = 0;
  if (a2 < 8)
  {
    v123 = a2 & 0xFFFFFFE0;
    v122 = v263;
    goto LABEL_161;
  }
  v122 = v263;
  v123 = a2 & 0xFFFFFFE0;
  if ((unint64_t)((char *)v263 - v102) < 0x20)
  {
LABEL_161:
    v154 = a2 - v121;
    v155 = (BOOL *)&v122->i8[v121];
    v156 = &v60[v121 + v101];
    do
    {
      v157 = *v156++;
      *v155++ = v157 == 0;
      if (!v157)
        ++v120;
      --v154;
    }
    while (v154);
  }
  else if (a2 >= 0x20)
  {
    v129 = 0uLL;
    v130 = 0uLL;
    v131 = (int8x16_t *)&v60[v101 + 16];
    v132 = v263 + 1;
    v133 = a2 & 0xFFFFFFE0;
    v134 = 0uLL;
    v135 = 0uLL;
    v136 = 0uLL;
    v137 = 0uLL;
    v138 = 0uLL;
    v139 = 0uLL;
    do
    {
      v140 = vceqzq_s8(v131[-1]);
      v141 = vceqzq_s8(*v131);
      v132[-1] = vandq_s8(v140, v59);
      *v132 = vandq_s8(v141, v59);
      v142 = vmovl_u8(*(uint8x8_t *)v140.i8);
      v143 = vmovl_high_u8((uint8x16_t)v140);
      v144 = vmovl_u8(*(uint8x8_t *)v141.i8);
      v145 = vmovl_high_u8((uint8x16_t)v141);
      v135 = vaddq_s32(v135, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v143), v58));
      v134 = vaddq_s32(v134, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v143.i8), v58));
      v130 = vaddq_s32(v130, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v142), v58));
      v129 = vaddq_s32(v129, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v142.i8), v58));
      v139 = vaddq_s32(v139, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v145), v58));
      v138 = vaddq_s32(v138, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v145.i8), v58));
      v137 = vaddq_s32(v137, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v144), v58));
      v136 = vaddq_s32(v136, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v144.i8), v58));
      v131 += 2;
      v132 += 2;
      v133 -= 32;
    }
    while (v133);
    v120 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v136, v129), vaddq_s32(v138, v134)), vaddq_s32(vaddq_s32(v137, v130), vaddq_s32(v139, v135))));
    if ((a2 & 0xFFFFFFE0) != (unint64_t)a2)
    {
      v124 = a2 & 0xFFFFFFE0;
      v121 = v124;
      if ((a2 & 0x18) != 0)
        goto LABEL_158;
      goto LABEL_161;
    }
  }
  else
  {
    v120 = 0;
    v124 = 0;
LABEL_158:
    v146 = 0uLL;
    v147 = (int32x4_t)v120;
    v148 = (int8x8_t *)&v60[v124 + v101];
    v149 = (int8x8_t *)&v263->i8[v124];
    v150 = v124 - (a2 & 0xFFFFFFF8);
    do
    {
      v151 = *v148++;
      v152 = vceqz_s8(v151);
      *v149++ = vand_s8(v152, (int8x8_t)0x101010101010101);
      v153 = vmovl_u8((uint8x8_t)v152);
      v146 = vaddq_s32(v146, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v153), v58));
      v147 = vaddq_s32(v147, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v153.i8), v58));
      v150 += 8;
    }
    while (v150);
    v120 = vaddvq_s32(vaddq_s32(v147, v146));
    v121 = a2 & 0xFFFFFFF8;
    if (v265 != a2)
      goto LABEL_161;
  }
  v158 = 0;
  if (a2 < 8)
  {
    v159 = v261;
    goto LABEL_177;
  }
  v159 = v261;
  if ((unint64_t)((char *)v103 - v104) < 0x20)
  {
LABEL_177:
    v187 = a2 - v158;
    v188 = &v103->i8[v158];
    v189 = &v60[v158 + v159];
    do
    {
      v190 = *v189++;
      *v188++ = v190;
      if (v190)
        ++v120;
      --v187;
    }
    while (v187);
  }
  else if (a2 >= 0x20)
  {
    v161 = 0uLL;
    v162 = (int32x4_t)v120;
    v163 = (int8x16_t *)&v60[v261 + 16];
    v164 = v103 + 1;
    v165 = v123;
    v166 = 0uLL;
    v167 = 0uLL;
    v168 = 0uLL;
    v169 = 0uLL;
    v170 = 0uLL;
    v171 = 0uLL;
    do
    {
      v172 = v163[-1];
      v173 = *v163;
      v164[-1] = v172;
      *v164 = v173;
      v174 = (uint8x16_t)vtstq_s8(v172, v172);
      v175 = vmovl_u8(*(uint8x8_t *)v174.i8);
      v176 = vmovl_high_u8(v174);
      v177 = (uint8x16_t)vtstq_s8(v173, v173);
      v178 = vmovl_u8(*(uint8x8_t *)v177.i8);
      v179 = vmovl_high_u8(v177);
      v167 = vaddq_s32(v167, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v176), v58));
      v166 = vaddq_s32(v166, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v176.i8), v58));
      v161 = vaddq_s32(v161, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v175), v58));
      v162 = vaddq_s32(v162, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v175.i8), v58));
      v171 = vaddq_s32(v171, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v179), v58));
      v170 = vaddq_s32(v170, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v179.i8), v58));
      v169 = vaddq_s32(v169, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v178), v58));
      v168 = vaddq_s32(v168, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v178.i8), v58));
      v163 += 2;
      v164 += 2;
      v165 -= 32;
    }
    while (v165);
    v120 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v168, v162), vaddq_s32(v170, v166)), vaddq_s32(vaddq_s32(v169, v161), vaddq_s32(v171, v167))));
    if (v123 != a2)
    {
      v160 = v123;
      v158 = v123;
      if ((a2 & 0x18) != 0)
        goto LABEL_174;
      goto LABEL_177;
    }
  }
  else
  {
    v160 = 0;
LABEL_174:
    v180 = 0uLL;
    v181 = (int32x4_t)v120;
    v182 = (int8x8_t *)&v60[v160 + v261];
    v183 = (int8x8_t *)&v103->i8[v160];
    v184 = v160 - (a2 & 0xFFFFFFF8);
    do
    {
      v185 = *v182++;
      *v183++ = v185;
      v186 = vmovl_u8((uint8x8_t)vtst_s8(v185, v185));
      v180 = vaddq_s32(v180, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v186), v58));
      v181 = vaddq_s32(v181, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v186.i8), v58));
      v184 += 8;
    }
    while (v184);
    v120 = vaddvq_s32(vaddq_s32(v181, v180));
    v158 = a2 & 0xFFFFFFF8;
    if (v265 != a2)
      goto LABEL_177;
  }
  if (((v120 == a2) & v92) != 1)
    goto LABEL_210;
  if (a2 >= 8 && (&v60[a2 + v256] <= (char *)a5 || v61 >= (int8x8_t *)&a5[a2]))
  {
    v196 = a5 + 4;
    v197 = a2 & 0xFFFFFFF8;
    while (1)
    {
      v198 = vtst_s8(*v61, *v61);
      if ((v198.i8[0] & 1) != 0)
      {
        *(v196 - 4) = a2;
        if ((v198.i8[1] & 1) == 0)
          goto LABEL_194;
      }
      else if ((v198.i8[1] & 1) == 0)
      {
LABEL_194:
        if ((v198.i8[2] & 1) != 0)
          goto LABEL_195;
        goto LABEL_203;
      }
      *(v196 - 3) = a2;
      if ((v198.i8[2] & 1) != 0)
      {
LABEL_195:
        *(v196 - 2) = a2;
        if ((v198.i8[3] & 1) == 0)
          goto LABEL_196;
        goto LABEL_204;
      }
LABEL_203:
      if ((v198.i8[3] & 1) == 0)
      {
LABEL_196:
        if ((v198.i8[4] & 1) != 0)
          goto LABEL_197;
        goto LABEL_205;
      }
LABEL_204:
      *(v196 - 1) = a2;
      if ((v198.i8[4] & 1) != 0)
      {
LABEL_197:
        *v196 = a2;
        if ((v198.i8[5] & 1) == 0)
          goto LABEL_198;
        goto LABEL_206;
      }
LABEL_205:
      if ((v198.i8[5] & 1) == 0)
      {
LABEL_198:
        if ((v198.i8[6] & 1) != 0)
          goto LABEL_199;
        goto LABEL_207;
      }
LABEL_206:
      v196[1] = a2;
      if ((v198.i8[6] & 1) != 0)
      {
LABEL_199:
        v196[2] = a2;
        if ((v198.i8[7] & 1) != 0)
          goto LABEL_208;
        goto LABEL_191;
      }
LABEL_207:
      if ((v198.i8[7] & 1) != 0)
LABEL_208:
        v196[3] = a2;
LABEL_191:
      ++v61;
      v196 += 8;
      v197 -= 8;
      if (!v197)
      {
        v191 = a2 & 0xFFFFFFF8;
        if (v265 == a2)
          goto LABEL_210;
        goto LABEL_186;
      }
    }
  }
  v191 = 0;
LABEL_186:
  v192 = a2 - v191;
  v193 = &a5[v191];
  v194 = &v60[v191 + v256];
  do
  {
    if (*v194++)
      *v193 = a2;
    ++v193;
    --v192;
  }
  while (v192);
LABEL_210:
  if (v120 != a2)
  {
    if (!(_QWORD)v273)
      bmMunkres();
    v199 = *((_QWORD *)&v273 + 1);
    if (!*((_QWORD *)&v273 + 1))
      bmMunkres();
    v200 = 0;
    v201 = 0;
    v202 = 3.4028e38;
    do
    {
      v203 = (float *)((char *)a1 + v200);
      v204 = (unsigned __int8 *)v273;
      v205 = a2;
      do
      {
        v206 = *v204++;
        if (!v206 && !*(_BYTE *)(*((_QWORD *)&v273 + 1) + v201) && *v203 < v202 && *v203 > 0.000001)
          v202 = *v203;
        ++v203;
        --v205;
      }
      while (v205);
      ++v201;
      v200 += v271;
    }
    while (v201 != a2);
    v268 = (unsigned __int8 *)v273;
    v208 = 0;
    v209 = 0;
LABEL_227:
    v270 = v208;
    v210 = (float *)((char *)a1 + v208);
    v211 = v268;
    v212 = a2;
    while (1)
    {
      if (*v211++)
      {
        if (!*(_BYTE *)(v199 + v209))
          goto LABEL_229;
        v214 = v202 + *v210;
      }
      else
      {
        if (*(_BYTE *)(v199 + v209))
          goto LABEL_229;
        v214 = bmMaximum(0.0, *v210 - v202);
      }
      *v210 = v214;
LABEL_229:
      ++v210;
      if (!--v212)
      {
        a1 = v266;
        v16 = 4 * a2;
        ++v209;
        v208 = v270 + 4 * a2;
        if (v209 != a2)
          goto LABEL_227;
        v36 = (char *)v272;
        v39 = DWORD2(v272);
        v37 = (int8x16_t *)*((_QWORD *)&v273 + 1);
        v38 = (int8x16_t *)v273;
        if (!(_QWORD)v272)
          goto LABEL_293;
        goto LABEL_39;
      }
    }
  }
  v215 = 0;
  while (a5[v215 / 4] != a2)
  {
    v215 += 4;
    if (v253 == v215)
      return;
  }
  memcpy(*((void **)&v274 + 1), a5, v275);
  bzero((void *)v274, v253);
  v216 = 0;
  v217 = 0;
  do
  {
    v218 = 0;
    v219 = 0;
    v220 = *((_QWORD *)&v275 + 1);
    v221 = v274;
    do
    {
      if (*(float *)((char *)&a1[v219] + v216) <= 0.000001)
        *(_DWORD *)(v220 + 4 * (v218 + (*(_DWORD *)(v221 + 4 * v219))++)) = v217;
      ++v219;
      v218 += a2;
    }
    while (a2 != v219);
    ++v217;
    v216 += v271;
  }
  while (v217 != a2);
  v222 = 0;
  v223 = v274;
  if (a2 < 4 || (_QWORD)v274 - *((_QWORD *)&v274 + 1) < 0x10uLL)
  {
LABEL_283:
    v248 = (unsigned int *)(*((_QWORD *)&v223 + 1) + 4 * v222);
    v249 = (_DWORD *)(v223 + 4 * v222);
    v250 = a2 - v222;
    do
    {
      v251 = *v248++;
      if (v251 < a2)
        *v249 = 1;
      ++v249;
      --v250;
    }
    while (v250);
    goto LABEL_260;
  }
  v222 = a2 & 0xFFFFFFFC;
  v224 = (uint32x2_t)vdup_n_s32(a2);
  v225 = (uint32x2_t *)(*((_QWORD *)&v274 + 1) + 8);
  v226 = (_DWORD *)(v274 + 8);
  v227 = v222;
  while (2)
  {
    v228 = *v225;
    v229 = vcgt_u32(v224, v225[-1]);
    if ((v229.i8[0] & 1) != 0)
    {
      *(v226 - 2) = 1;
      if ((v229.i8[4] & 1) == 0)
        goto LABEL_252;
LABEL_256:
      *(v226 - 1) = 1;
      v230 = vcgt_u32(v224, v228);
      if ((v230.i8[0] & 1) == 0)
        goto LABEL_257;
LABEL_253:
      *v226 = 1;
      if ((v230.i8[4] & 1) != 0)
        goto LABEL_258;
    }
    else
    {
      if ((v229.i8[4] & 1) != 0)
        goto LABEL_256;
LABEL_252:
      v230 = vcgt_u32(v224, v228);
      if ((v230.i8[0] & 1) != 0)
        goto LABEL_253;
LABEL_257:
      if ((v230.i8[4] & 1) != 0)
LABEL_258:
        v226[1] = 1;
    }
    v225 += 2;
    v226 += 4;
    v227 -= 4;
    if (v227)
      continue;
    break;
  }
  if (v222 != a2)
    goto LABEL_283;
LABEL_260:
  bzero(v276, v253);
  v231 = 0;
  v232 = 0;
  v233 = (void *)*((_QWORD *)&v273 + 1);
  do
  {
    bzero(v233, a2);
    v234 = 0;
    do
    {
      v235 = *(unsigned int *)(*((_QWORD *)&v274 + 1) + 4 * v234);
      if (v235 < a2)
        *((_BYTE *)v233 + v235) = 1;
      ++v234;
    }
    while (a2 != v234);
    v236 = 0;
    v237 = 0;
    while (1)
    {
      LODWORD(v238) = *(_DWORD *)(*((_QWORD *)&v274 + 1) + 4 * v237);
      if (v238 >= a2)
        break;
LABEL_269:
      a5[v237++] = v238;
      v236 += a2;
      if (v237 >= a2)
      {
        if (v252)
          *v252 = v232;
        return;
      }
    }
    v239 = v276[v237];
    v240 = *(unsigned int *)(v274 + 4 * v237);
    if (v239 < v240)
    {
      v241 = v232 + 1;
      v242 = v276[v237];
      do
      {
        v238 = *(unsigned int *)(*((_QWORD *)&v275 + 1) + 4 * (v236 + v242));
        if (!*((_BYTE *)v233 + v238))
        {
          *((_BYTE *)v233 + v238) = 1;
          v276[v237] = v242;
          v232 = v241;
          goto LABEL_269;
        }
        ++v242;
        ++v241;
      }
      while (v240 != v242);
      v232 = v232 + v240 - v239;
    }
    v243 = v276;
    v244 = v237;
    if (v237 < a2)
    {
      bzero(&v276[v237], 4 * (~(_DWORD)v237 + a2) + 4);
      v243 = v276;
    }
    v245 = v274 - 4;
    v246 = v243 - 1;
    while ((int)v244 >= 1)
    {
      v247 = v246[v244] + 1;
      if (v247 < *(_DWORD *)(v245 + 4 * v244))
      {
        v243[v244 - 1] = v247;
        break;
      }
      v246[v244--] = 0;
      if (!v244)
        bmMunkres();
    }
    ++v231;
  }
  while (v231 != 5);
}

void OUTLINED_FUNCTION_1_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 58, a4);
}

void sub_20CC9D03C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC9D3A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20CC9D3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_20CC9D3CC()
{
  JUMPOUT(0x20CC9D3D4);
}

void sub_20CC9DB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  ik::PixelBufferTensor::~PixelBufferTensor((ik::PixelBufferTensor *)&a18);

  _Unwind_Resume(a1);
}

void sub_20CC9DDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  int v23;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_20CC9E12C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  void *v16;

  ik::EspressoConfig::~EspressoConfig(v15);
  _Unwind_Resume(a1);
}

void sub_20CC9E410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  int v24;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);

  _Unwind_Resume(a1);
}

void sub_20CC9E688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;
  int v24;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);

    if ((v24 & 1) == 0)
      goto LABEL_8;
  }
  else
  {

    if (!v24)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v22);

  _Unwind_Resume(a1);
}

void sub_20CC9EB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  __cxa_free_exception(v34);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)&a21);

  _Unwind_Resume(a1);
}

void AsString(NSString *a1, void *a2)
{
  const char *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v9 = objc_retainAutorelease(a2);
  v3 = (const char *)objc_msgSend(v9, "UTF8String");
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = (NSString)(v7 | 0x8000000000000000);
    *a1 = v8;
    a1 = (NSString *)v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(a1, v3, (size_t)v5);
LABEL_9:
  *((_BYTE *)v5 + (_QWORD)a1) = 0;

}

void sub_20CC9ED28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id AsEspressoBufferDictionary(uint64_t a1)
{
  void *v2;
  uint64_t *i;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  _OWORD v17[10];
  uint64_t v18;

  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", *(_QWORD *)(a1 + 24));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  for (i = *(uint64_t **)(a1 + 16); i; i = (uint64_t *)*i)
  {
    v4 = i[10];
    v5 = *(_OWORD *)(v4 + 40);
    v6 = *(_OWORD *)(v4 + 24);
    v17[0] = *(_OWORD *)(v4 + 8);
    v17[1] = v6;
    v17[2] = v5;
    v7 = *(_OWORD *)(v4 + 72);
    v8 = *(_OWORD *)(v4 + 104);
    v9 = *(_OWORD *)(v4 + 56);
    v17[5] = *(_OWORD *)(v4 + 88);
    v17[6] = v8;
    v17[3] = v9;
    v17[4] = v7;
    v10 = *(_OWORD *)(v4 + 120);
    v11 = *(_OWORD *)(v4 + 136);
    v12 = *(_OWORD *)(v4 + 152);
    v18 = *(_QWORD *)(v4 + 168);
    v17[8] = v11;
    v17[9] = v12;
    v17[7] = v10;
    +[FTEspressoBuffer bufferWithEspressoBuffer:](FTEspressoBuffer, "bufferWithEspressoBuffer:", v17);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = i + 2;
    if (*((char *)i + 39) < 0)
      v14 = (_QWORD *)*v14;
    objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, v15);

  }
  return v2;
}

void sub_20CC9EE3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20CC9EE60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20CC9F4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  void *v46;

  __cxa_free_exception(v46);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,ik::EspressoTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::EspressoTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::EspressoTensor>>>::~__hash_table((uint64_t)&a46);

  _Unwind_Resume(a1);
}

void sub_20CC9F688(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20CC9FA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20CC9FC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_20CC9FEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20CCA002C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<std::string,ik::PixelBufferTensor &,0>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v5 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v6 = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &unk_24C55EA38;
  *(_DWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = *(_BYTE **)(a3 + 16);
  v7 = *(_BYTE **)(a3 + 24);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 56) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 48) = v11;
  }
  v12 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void sub_20CCA01EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100]((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2ikL28IsAppleNeuralEngineAvailableEv_block_invoke_2()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  _MergedGlobals_4 = result;
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  __int128 v28;
  float v29;
  float v30;
  uint64_t v31;
  _QWORD *v32;
  _BOOL8 v33;
  unint64_t v34;
  unint64_t v35;
  size_t prime;
  int8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD v44[2];
  char v45;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v44, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = *((_QWORD *)v15 + 1);
            if (v22 == v11)
            {
              v23 = v15[39];
              if ((v23 & 0x80u) == 0)
                v24 = v15[39];
              else
                v24 = *((_QWORD *)v15 + 3);
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                    return v15;
                }
                else
                {
                  if (!v15[39])
                    return v15;
                  v25 = 0;
                  while (v15[v25 + 16] == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = *(unsigned __int8 **)v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v11)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v6, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x60uLL);
  v44[0] = v15;
  v44[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v27 = *a4;
  v28 = **a4;
  *((_QWORD *)v15 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v15 + 1) = v28;
  *((_QWORD *)v27 + 1) = 0;
  *((_QWORD *)v27 + 2) = 0;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v15 + 5) = &unk_24C55EA38;
  *((_DWORD *)v15 + 12) = 1;
  *((_QWORD *)v15 + 11) = 0;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  v45 = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v12 && (float)(v30 * (float)v12) >= v29)
  {
    v31 = *(_QWORD *)a1;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v32)
    {
LABEL_54:
      *(_QWORD *)v15 = *v32;
LABEL_89:
      *v32 = v15;
      goto LABEL_90;
    }
  }
  else
  {
    v33 = 1;
    if (v12 >= 3)
      v33 = (v12 & (v12 - 1)) != 0;
    v34 = v33 | (2 * v12);
    v35 = vcvtps_u32_f32(v29 / v30);
    if (v34 <= v35)
      prime = v35;
    else
      prime = v34;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v37 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v37)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v37)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v37 < 3uLL || (v39 = (uint8x8_t)vcnt_s8(v37), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (prime <= v38)
        prime = v38;
      if (prime < *(_QWORD *)&v37)
LABEL_65:
        std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__do_rehash<true>(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        if (v32)
          goto LABEL_54;
      }
      else
      {
        v4 = v11;
        v31 = *(_QWORD *)a1;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        if (v32)
          goto LABEL_54;
      }
    }
    else
    {
      v4 = v41 & v11;
      v31 = *(_QWORD *)a1;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
      if (v32)
        goto LABEL_54;
    }
  }
  *(_QWORD *)v15 = *v26;
  *v26 = v15;
  *(_QWORD *)(v31 + 8 * v4) = v26;
  if (*(_QWORD *)v15)
  {
    v42 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v42 >= v12)
        v42 %= v12;
    }
    else
    {
      v42 &= v12 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v42);
    goto LABEL_89;
  }
LABEL_90:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20CCA07CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::EspressoTensor>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

float acAttrEyeLoc(float *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v4 = bmClamp(*a1, 0.0, 1.0);
  v5 = bmClamp(a1[1], 0.0, 1.0);
  v6 = a2[2];
  v7 = a2[3];
  v8 = *a2 + (float)(v4 * v6);
  v9 = a2[1] + (float)(v5 * v7);
  v10 = v7 * 0.2;
  v11 = (float)(v6 * 0.2) * 0.5;
  v12 = bmMaximum(v8 - v11, *a2);
  bmMaximum(v9 - (float)(v10 * 0.5), a2[1]);
  bmMinimum(v8 + v11, *a2 + a2[2]);
  bmMinimum(v9 + (float)(v10 * 0.5), a2[1] + a2[3]);
  return v12;
}

uint64_t ft::TrackMatcher::TrackMatcher(uint64_t a1, unint64_t *a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  ft::HungarianMatcher::HungarianMatcher((ft::HungarianMatcher *)(a1 + 16), *a2);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  ft::HungarianMatcher::HungarianMatcher((ft::HungarianMatcher *)(a1 + 16), *a2);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

void ft::TrackMatcher::~TrackMatcher(ft::TrackMatcher *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  ft::HungarianMatcher::~HungarianMatcher((ft::TrackMatcher *)((char *)this + 16));
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  ft::HungarianMatcher::~HungarianMatcher((ft::TrackMatcher *)((char *)this + 16));
}

void ft::TrackMatcher::Match(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  float v17;
  void *__p[3];

  v6 = *a2;
  v5 = a2[1];
  v7 = 0x86BCA1AF286BCA1BLL * ((v5 - *a2) >> 3);
  v8 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4;
  if (v8 * v7)
  {
    ft::TrackMatcher::ComputeCostMatrix(a1, a2, (uint64_t **)a3);
    ft::HungarianMatcher::Match((ft::HungarianMatcher *)(a1 + 16), *(float **)(a1 + 96), v8, v7, __p);
    v10 = *(_QWORD *)(a1 + 96);
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    if (v5 != v6)
    {
      if (v7 >= 0x555555555555556)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v11 = (char *)operator new(48 * v7);
      *a4 = v11;
      a4[2] = &v11[48 * v7];
      bzero(v11, 48 * ((48 * v7 - 48) / 0x30) + 48);
      v12 = 0;
      a4[1] = &v11[48 * ((48 * v7 - 48) / 0x30) + 48];
      v13 = __p[0];
      if (v7 <= 1)
        v14 = 1;
      else
        v14 = v7;
      v15 = v11 + 24;
      while (1)
      {
        *((_QWORD *)v15 - 3) = v12;
        v16 = v13[v12];
        if (v16 < v8)
        {
          v17 = *(float *)(v10 + 4 * (v12 + v16 * v7));
          if (v15[8])
          {
            *(_QWORD *)v15 = v16;
            *((float *)v15 + 4) = v17;
            v15[20] = 1;
            if (v17 < *(float *)(a1 + 8))
              goto LABEL_15;
          }
          else
          {
            v15[8] = 1;
            *(_QWORD *)v15 = v16;
            *((float *)v15 + 4) = v17;
            v15[20] = 1;
            if (v17 < *(float *)(a1 + 8))
            {
LABEL_15:
              if (!*(v15 - 8))
                *(v15 - 8) = 1;
              *((_QWORD *)v15 - 2) = v16;
            }
          }
        }
        ++v12;
        v15 += 48;
        if (v14 == v12)
          goto LABEL_19;
      }
    }
    v13 = __p[0];
    if (__p[0])
    {
LABEL_19:
      __p[1] = v13;
      operator delete(v13);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_20CCA0B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
  ft::TrackMatcher::Match((uint64_t)va);
  _Unwind_Resume(a1);
}

void ft::TrackMatcher::ComputeCostMatrix(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v6;
  float **v7;
  float *v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x2_t v20;
  float32x2_t v21;
  float32x2_t *v22;
  float32x2_t *v23;
  float32x2_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  char *v33;
  char *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  float32x2_t v44;
  float32x2_t *v45;
  float32x2_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  float32x2_t *v52;
  float32x2_t *v53;
  float32x2_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  float64x2_t *v62;
  uint64_t *v63;
  uint64_t v64;
  float v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  float32x2_t *v78;
  uint64_t *v79;
  uint64_t v80;
  float32x2_t v81;
  float32x2_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  float32x2_t *__p;
  float32x2_t *v87;
  float32x2_t *v88;
  float32x2_t *v89;
  float32x2_t *v90;

  v6 = 0x86BCA1AF286BCA1BLL * ((a2[1] - *a2) >> 3) * (((char *)a3[1] - (char *)*a3) >> 4);
  v8 = *(float **)(a1 + 96);
  v7 = (float **)(a1 + 96);
  v9 = (uint64_t)(*(_QWORD *)(a1 + 104) - (_QWORD)v8) >> 2;
  if (v6 > v9)
  {
    std::vector<float>::__append(a1 + 96, v6 - v9);
    v8 = *v7;
  }
  v10 = *(_DWORD *)(a1 + 12);
  if (v10 == 1)
  {
    __p = 0;
    v38 = *a3;
    v37 = a3[1];
    v39 = (char *)v37 - (char *)*a3;
    if (v37 == *a3)
      goto LABEL_86;
    if (v39 < 0)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v85 = a2;
    __p = (float32x2_t *)operator new((unint64_t)v39 >> 1);
    v88 = __p;
    v90 = &__p[v39 >> 4];
    while (1)
    {
      v40 = *v38;
      v41 = (std::__shared_weak_count *)v38[1];
      if (v41)
      {
        p_shared_owners = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldxr(p_shared_owners);
        while (__stxr(v43 + 1, p_shared_owners));
      }
      v44 = vcvt_f32_f64(vaddq_f64(*(float64x2_t *)(v40 + 24), vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*(float64x2_t *)(v40 + 40)), (float32x2_t)0x3F0000003F000000))));
      v45 = v88;
      if (v88 < v90)
      {
        *v88 = v44;
        v46 = v88 + 1;
        goto LABEL_60;
      }
      v47 = v88 - __p;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<long long>::__throw_length_error[abi:ne180100]();
      v49 = (char *)v90 - (char *)__p;
      if (((char *)v90 - (char *)__p) >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v51 = (char *)operator new(8 * v50);
        v52 = (float32x2_t *)&v51[8 * v47];
        *v52 = v44;
        v46 = v52 + 1;
        if (v88 == __p)
        {
LABEL_58:
          __p = v52;
          v90 = (float32x2_t *)&v51[8 * v50];
          if (!v88)
            goto LABEL_60;
          goto LABEL_59;
        }
      }
      else
      {
        v51 = 0;
        v52 = (float32x2_t *)(8 * v47);
        v53 = (float32x2_t *)(8 * v47);
        *v53 = v44;
        v46 = v53 + 1;
        if (v88 == __p)
          goto LABEL_58;
      }
      do
      {
        v54 = v45[-1];
        --v45;
        v52[-1] = v54;
        --v52;
      }
      while (v45 != __p);
      v45 = __p;
      __p = v52;
      v90 = (float32x2_t *)&v51[8 * v50];
      if (!v45)
        goto LABEL_60;
LABEL_59:
      operator delete(v45);
LABEL_60:
      v88 = v46;
      if (v41)
      {
        v55 = (unint64_t *)&v41->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      v38 += 2;
      if (v38 == v37)
      {
        v73 = *v85;
        v74 = v85[1];
        if (*v85 == v74)
          goto LABEL_86;
        v75 = *a3;
        v76 = v39 >> 4;
        if ((unint64_t)(v39 >> 4) <= 1)
          v76 = 1;
        while (1)
        {
          v77 = *(_QWORD *)(v73 + 32);
          v78 = __p;
          v79 = v75;
          v80 = v76;
          do
          {
            while (*(_QWORD *)(*v79 + 88) == v77)
            {
              v81 = *v78++;
              v82 = vsub_f32(v81, vcvt_f32_f64(vaddq_f64(*(float64x2_t *)v73, vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*(float64x2_t *)(v73 + 16)), (float32x2_t)0x3F0000003F000000)))));
              *v8++ = sqrtf(vaddv_f32(vmul_f32(v82, v82)));
              v79 += 2;
              if (!--v80)
                goto LABEL_80;
            }
            *v8++ = 10000000.0;
            ++v78;
            v79 += 2;
            --v80;
          }
          while (v80);
LABEL_80:
          v73 += 152;
          if (v73 == v74)
            goto LABEL_86;
        }
      }
    }
  }
  if (v10)
    return;
  __p = 0;
  v12 = *a3;
  v11 = a3[1];
  v13 = (char *)v11 - (char *)*a3;
  if (v11 == *a3)
    goto LABEL_86;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF1)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  v84 = a2;
  v83 = v13 >> 4;
  __p = (float32x2_t *)operator new(2 * v13);
  v87 = __p;
  v89 = &__p[4 * (v13 >> 4)];
  do
  {
    v14 = (_QWORD *)*v12;
    v15 = (std::__shared_weak_count *)v12[1];
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v19 = (float32x2_t)v14[3];
    v18 = (float32x2_t)v14[4];
    v21 = (float32x2_t)v14[5];
    v20 = (float32x2_t)v14[6];
    v22 = v87;
    if (v87 < v89)
    {
      *v87 = v19;
      v87[1] = v18;
      v23 = v87 + 4;
      v87[2] = v21;
      v87[3] = v20;
      goto LABEL_30;
    }
    v24 = __p;
    v25 = ((char *)v87 - (char *)__p) >> 5;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59)
      std::vector<long long>::__throw_length_error[abi:ne180100]();
    v27 = (char *)v89 - (char *)__p;
    if (((char *)v89 - (char *)__p) >> 4 > v26)
      v26 = v27 >> 4;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
      v28 = 0x7FFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = (char *)operator new(32 * v28);
      v30 = &v29[32 * v25];
      *(float32x2_t *)v30 = v19;
      *((float32x2_t *)v30 + 1) = v18;
      *((float32x2_t *)v30 + 2) = v21;
      *((float32x2_t *)v30 + 3) = v20;
      v31 = (uint64_t)v30;
      if (v87 == __p)
      {
LABEL_28:
        v34 = &v29[32 * v28];
        v23 = (float32x2_t *)(v30 + 32);
        __p = (float32x2_t *)v31;
        v89 = (float32x2_t *)v34;
        if (v87)
          goto LABEL_29;
        goto LABEL_30;
      }
    }
    else
    {
      v29 = 0;
      v30 = (char *)(32 * v25);
      *(float32x2_t *)v30 = v19;
      *((float32x2_t *)v30 + 1) = v18;
      *((float32x2_t *)v30 + 2) = v21;
      *((float32x2_t *)v30 + 3) = v20;
      v31 = 32 * v25;
      if (v87 == __p)
        goto LABEL_28;
    }
    do
    {
      v32 = *(_OWORD *)v22[-2].f32;
      *(_OWORD *)(v31 - 32) = *(_OWORD *)v22[-4].f32;
      *(_OWORD *)(v31 - 16) = v32;
      v31 -= 32;
      v22 -= 4;
    }
    while (v22 != __p);
    v22 = __p;
    v33 = &v29[32 * v28];
    v23 = (float32x2_t *)(v30 + 32);
    __p = (float32x2_t *)v31;
    v89 = (float32x2_t *)v33;
    if (v24)
LABEL_29:
      operator delete(v22);
LABEL_30:
    v87 = v23;
    if (v15)
    {
      v35 = (unint64_t *)&v15->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 += 2;
  }
  while (v12 != v11);
  v57 = *v84;
  v58 = v84[1];
  if (*v84 != v58)
  {
    v59 = *a3;
    v60 = v83;
    if (v83 <= 1)
      v60 = 1;
    do
    {
      v61 = *(_QWORD *)(v57 + 32);
      v62 = (float64x2_t *)&__p[2];
      v63 = v59;
      v64 = v60;
      do
      {
        v65 = 10.0;
        if (*(_QWORD *)(*v63 + 88) == v61)
        {
          v66 = v62[-1];
          v67 = *(float64x2_t *)(v57 + 16);
          v68 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*(float64x2_t *)v57, v66), *(int8x16_t *)v57, (int8x16_t)v66);
          v69 = vaddq_f64(v66, *v62);
          v70 = vaddq_f64(*(float64x2_t *)v57, v67);
          v71 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v69, v70), (int8x16_t)v70, (int8x16_t)v69);
          v72 = (float64x2_t)vandq_s8((int8x16_t)vsubq_f64(v71, v68), (int8x16_t)vcgtq_f64(v71, v68));
          *(float *)v72.f64 = vmulq_laneq_f64(v72, v72, 1).f64[0];
          *(float *)v70.f64 = vaddvq_f64(vmulq_f64((float64x2_t)vzip1q_s64(*(int64x2_t *)v62, (int64x2_t)v67), (float64x2_t)vzip2q_s64(*(int64x2_t *)v62, (int64x2_t)v67)))- *(float *)v72.f64;
          v65 = 1.0 - (float)(*(float *)v72.f64 / *(float *)v70.f64);
          if (*(float *)v70.f64 < 0.00000011921)
            v65 = 1.0;
        }
        *v8++ = v65;
        v62 += 2;
        v63 += 2;
        --v64;
      }
      while (v64);
      v57 += 152;
    }
    while (v57 != v58);
  }
LABEL_86:
  if (__p)
    operator delete(__p);
}

void sub_20CCA116C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *AcCommitHash()
{
  return "0000000";
}

uint64_t TtDetNode::TtDetNode(uint64_t a1, uint64_t a2)
{
  bzero((void *)a1, 0x530uLL);
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0xDE7C00000001;
  return a1;
}

{
  bzero((void *)a1, 0x530uLL);
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = 0xDE7C00000001;
  return a1;
}

void TtDetNode::~TtDetNode(TtDetNode *this)
{
  TtDetNode::releaseBuffers(this);
}

{
  TtDetNode::releaseBuffers(this);
}

uint64_t TtDetNode::releaseBuffers(TtDetNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 167);
  if (v2)
    MEMORY[0x212B93EEC](v2, 0x1000C80451B5BE8);
  v3 = *((_QWORD *)this + 168);
  if (v3)
    MEMORY[0x212B93EEC](v3, 0x1000C80451B5BE8);
  v4 = *((_QWORD *)this + 169);
  if (v4)
    MEMORY[0x212B93EEC](v4, 0x1000C80451B5BE8);
  v5 = *((_QWORD *)this + 171);
  if (v5)
    MEMORY[0x212B93EEC](v5, 0x1000C808AA14F5FLL);
  v6 = *((_QWORD *)this + 172);
  if (v6)
    MEMORY[0x212B93EEC](v6, 0x1000C808AA14F5FLL);
  v7 = *((_QWORD *)this + 173);
  if (v7)
  {
    MEMORY[0x212B93EEC](v7, 0x1000C8052888210);
    *((_QWORD *)this + 173) = 0;
  }
  v8 = *((_QWORD *)this + 174);
  if (v8)
  {
    MEMORY[0x212B93EEC](v8, 0x1000C8052888210);
    *((_QWORD *)this + 174) = 0;
  }
  v9 = *((_QWORD *)this + 175);
  if (v9)
  {
    MEMORY[0x212B93EEC](v9, 0x1000C8052888210);
    *((_QWORD *)this + 175) = 0;
  }
  v10 = *((_QWORD *)this + 176);
  if (v10)
  {
    MEMORY[0x212B93EEC](v10, 0x1000C8052888210);
    *((_QWORD *)this + 176) = 0;
  }
  v11 = *((_QWORD *)this + 177);
  if (v11)
  {
    MEMORY[0x212B93EEC](v11, 0x1000C8052888210);
    *((_QWORD *)this + 177) = 0;
  }
  v12 = *((_QWORD *)this + 178);
  if (v12)
  {
    MEMORY[0x212B93EEC](v12, 0x1000C8052888210);
    *((_QWORD *)this + 178) = 0;
  }
  v13 = *((_QWORD *)this + 179);
  if (v13)
  {
    MEMORY[0x212B93EEC](v13, 0x1000C8052888210);
    *((_QWORD *)this + 179) = 0;
  }
  v14 = *((_QWORD *)this + 180);
  if (v14)
  {
    MEMORY[0x212B93EEC](v14, 0x1000C8052888210);
    *((_QWORD *)this + 180) = 0;
  }
  v15 = *((_QWORD *)this + 181);
  if (v15)
  {
    MEMORY[0x212B93EEC](v15, 0x1000C8052888210);
    *((_QWORD *)this + 181) = 0;
  }
  v16 = *((_QWORD *)this + 182);
  if (v16)
  {
    MEMORY[0x212B93EEC](v16, 0x1000C8052888210);
    *((_QWORD *)this + 182) = 0;
  }
  v17 = *((_QWORD *)this + 183);
  if (v17)
  {
    MEMORY[0x212B93EEC](v17, 0x1000C8052888210);
    *((_QWORD *)this + 183) = 0;
  }
  v18 = *((_QWORD *)this + 184);
  if (v18)
  {
    MEMORY[0x212B93EEC](v18, 0x1000C8052888210);
    *((_QWORD *)this + 184) = 0;
  }
  result = *((_QWORD *)this + 170);
  if (result)
    JUMPOUT(0x212B93EECLL);
  return result;
}

uint64_t TtDetNode::init(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v4;
  float32x4_t *v7;
  uint64_t v8;
  int32x2_t v9;
  int32x2_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  float v18;
  float v19;
  unsigned int i;
  unsigned int j;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float *v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  float32x4_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float *v56;
  float v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float *v65;
  uint64_t v66;
  uint64_t result;
  float32x4x4_t v68;

  if (*a3 != 1)
    return 4294967289;
  v4 = a3[1];
  if (v4 != 56956 && v4 != 56945)
    return 4294967292;
  TtDetNode::releaseBuffers((TtDetNode *)a1);
  strcpy((char *)a1, "Tap-to-track det");
  *(int32x2_t *)(a1 + 20) = vdup_n_s32(0x12Cu);
  *(_QWORD *)(a1 + 36) = 0x400000004;
  *(_QWORD *)(a1 + 44) = 0x3F19999A3E99999ALL;
  *(_OWORD *)(a1 + 896) = xmmword_20CCAB830;
  *(_OWORD *)(a1 + 912) = xmmword_20CCAB840;
  *(_OWORD *)(a1 + 928) = xmmword_20CCAB850;
  strcpy((char *)(a1 + 944), "BoxEncoding_0/Conv2D/q");
  strcpy((char *)(a1 + 976), "BoxEncoding_1/Conv2D/q");
  strcpy((char *)(a1 + 1008), "BoxEncoding_2/Conv2D/q");
  strcpy((char *)(a1 + 1040), "BoxEncoding_3/Conv2D/q");
  strcpy((char *)(a1 + 1072), "BoxEncoding_4/Conv2D/q");
  strcpy((char *)(a1 + 1104), "BoxEncoding_5/Conv2D/q");
  strcpy((char *)(a1 + 1136), "ClassPredictor_0/Conv2D/q");
  strcpy((char *)(a1 + 1168), "ClassPredictor_1/Conv2D/q");
  strcpy((char *)(a1 + 1200), "ClassPredictor_2/Conv2D/q");
  strcpy((char *)(a1 + 1232), "ClassPredictor_3/Conv2D/q");
  strcpy((char *)(a1 + 1264), "ClassPredictor_4/Conv2D/q");
  strcpy((char *)(a1 + 1296), "ClassPredictor_5/Conv2D/q");
  *(_QWORD *)(a1 + 768) = 0x100000002;
  *(_OWORD *)(a1 + 752) = xmmword_20CCAB9F0;
  *(_QWORD *)(a1 + 792) = 0x100000002;
  *(_OWORD *)(a1 + 776) = xmmword_20CCAB9F0;
  *(_DWORD *)(a1 + 824) = 19;
  *(_DWORD *)(a1 + 848) = 12;
  *(_DWORD *)(a1 + 872) = 273;
  *(_DWORD *)(a1 + 828) = 10;
  *(_DWORD *)(a1 + 852) = 24;
  *(_DWORD *)(a1 + 876) = 546;
  *(_DWORD *)(a1 + 832) = 5;
  *(_DWORD *)(a1 + 856) = 24;
  *(_DWORD *)(a1 + 880) = 546;
  *(_OWORD *)(a1 + 800) = xmmword_20CCAB860;
  *(_DWORD *)(a1 + 836) = 3;
  *(_DWORD *)(a1 + 860) = 24;
  *(_DWORD *)(a1 + 884) = 546;
  *(_QWORD *)(a1 + 816) = 0x100000002;
  *(_QWORD *)(a1 + 840) = 0x100000002;
  *(_QWORD *)(a1 + 864) = 0x1800000018;
  *(int32x2_t *)(a1 + 888) = vdup_n_s32(0x222u);
  *(_QWORD *)(a1 + 432) = 0x100000002;
  *(_OWORD *)(a1 + 416) = xmmword_20CCAB9F0;
  *(_OWORD *)(a1 + 472) = xmmword_20CCABA28;
  *(_OWORD *)(a1 + 488) = unk_20CCABA38;
  *(_OWORD *)(a1 + 440) = xmmword_20CCABA08;
  *(_OWORD *)(a1 + 456) = *(_OWORD *)algn_20CCABA18;
  *(_OWORD *)(a1 + 552) = xmmword_20CCABA78;
  *(_OWORD *)(a1 + 568) = unk_20CCABA88;
  *(_OWORD *)(a1 + 520) = unk_20CCABA58;
  *(_OWORD *)(a1 + 536) = xmmword_20CCABA68;
  *(_OWORD *)(a1 + 504) = xmmword_20CCABA48;
  v7 = (float32x4_t *)(a1 + 584);
  *(_OWORD *)(a1 + 680) = xmmword_20CCABAF8;
  *(_OWORD *)(a1 + 696) = unk_20CCABB08;
  *(_OWORD *)(a1 + 712) = xmmword_20CCABB18;
  *(_OWORD *)(a1 + 616) = xmmword_20CCABAB8;
  *(_OWORD *)(a1 + 632) = unk_20CCABAC8;
  *(_OWORD *)(a1 + 648) = xmmword_20CCABAD8;
  *(_OWORD *)(a1 + 664) = unk_20CCABAE8;
  *(_OWORD *)(a1 + 584) = xmmword_20CCABA98;
  *(_OWORD *)(a1 + 600) = unk_20CCABAA8;
  *(_QWORD *)(a1 + 744) = 0x600000006;
  *(_DWORD *)(a1 + 28) = 4;
  *(_DWORD *)(a1 + 32) = 80;
  *(_OWORD *)(a1 + 728) = xmmword_20CCABB28;
  memcpy((void *)(a1 + 52), &unk_20CCABB40, 0x16CuLL);
  *(_QWORD *)(a3 + 1) = 0xDE70000DE71;
  a3[3] = 1;
  *(_DWORD *)(a1 + 1328) = 1917;
  *(_QWORD *)(a1 + 1336) = operator new[]();
  *(_QWORD *)(a1 + 1344) = operator new[]();
  *(_QWORD *)(a1 + 1352) = operator new[]();
  *(_QWORD *)(a1 + 1368) = operator new[]();
  *(_QWORD *)(a1 + 1376) = operator new[]();
  v8 = operator new[]();
  v11 = 0;
  v12 = 0;
  *(_QWORD *)(a1 + 1360) = v8;
  v13 = *(_QWORD *)(a1 + 1336);
  v14.i64[0] = 0x3F0000003F000000;
  v14.i64[1] = 0x3F0000003F000000;
  v15 = a1;
  do
  {
    v16 = *(_DWORD *)(a1 + 416 + 4 * v11);
    if (!v16)
      goto LABEL_8;
    v17 = *(unsigned int *)(a1 + 728 + 4 * v11);
    if (!(_DWORD)v17)
      goto LABEL_8;
    v18 = 1.0 / (float)v16;
    v19 = v18 * 0.5;
    if (v17 >= 0x10)
    {
      v32 = 0;
      v33 = a1 + 24 * v11;
      v34 = v33 + 440;
      v35 = v33 + 584;
      v36 = v17 - 1;
      v37 = v35 + 4 * v17;
      v38 = 16 * (v17 - 1);
      v39 = v17 & 0xFFFFFFFC;
      while (1)
      {
        v40 = 0;
        *(float *)v9.i32 = v19 + (float)((float)v32 * v18);
        v41 = (float32x4_t)vdupq_lane_s32(v9, 0);
        do
        {
          v42 = 0;
          *(float *)v10.i32 = v19 + (float)((float)v40 * v18);
          v43 = __CFADD__(v12, (_DWORD)v36);
          v44 = 16 * v12;
          if (v13 + v44 + v38 < (unint64_t)(v13 + v44)
            || v13 + 4 + v44 + v38 < (unint64_t)(v13 + 4 + v44)
            || v13 + 12 + v44 + v38 < (unint64_t)(v13 + 12 + v44)
            || v13 + 8 + v44 + v38 < (unint64_t)(v13 + 8 + v44)
            || v43
            || HIDWORD(v36))
          {
            goto LABEL_35;
          }
          if (v34 < v13 + 16 * v17 + v44 && v13 + v44 < v37)
          {
            v42 = 0;
LABEL_35:
            v45 = v12;
LABEL_36:
            v46 = 0;
            v47 = v17 - v42;
            v48 = v15 + 4 * v42;
            v49 = v45;
            do
            {
              v50 = v48 + 4 * v46;
              v51 = sqrtf(*(float *)(v50 + 584));
              v52 = *(float *)(v50 + 440);
              v53 = v52 / v51;
              v54 = v52 * v51;
              v55 = *(float *)v10.i32 - (float)(v54 * 0.5);
              v56 = (float *)(v13 + 16 * (v49 + v46));
              v57 = *(float *)v9.i32 - (float)(v53 * 0.5);
              *v56 = v55;
              v56[1] = v57;
              v56[2] = v54 + v55;
              v56[3] = v53 + v57;
              ++v46;
            }
            while (v47 != v46);
            v12 = v49 + v46;
            goto LABEL_22;
          }
          v45 = v12 + v39;
          v58 = (float32x4_t)vdupq_lane_s32(v10, 0);
          v59 = v17 & 0xFFFFFFFC;
          v60 = v7;
          do
          {
            v61 = vsqrtq_f32(*v60);
            v62 = v60[-9];
            v63 = vdivq_f32(v62, v61);
            v64 = vmulq_f32(v62, v61);
            v68.val[0] = vsubq_f32(v58, vmulq_f32(v64, v14));
            v68.val[1] = vsubq_f32(v41, vmulq_f32(v63, v14));
            v68.val[2] = vaddq_f32(v64, v68.val[0]);
            v68.val[3] = vaddq_f32(v63, v68.val[1]);
            v65 = (float *)(v13 + 16 * v12);
            vst4q_f32(v65, v68);
            ++v60;
            v12 += 4;
            v59 -= 4;
          }
          while (v59);
          v42 = v17 & 0xFFFFFFFC;
          v12 = v45;
          if (v39 != v17)
            goto LABEL_36;
LABEL_22:
          ++v40;
        }
        while (v40 != v16);
        if (++v32 == v16)
          goto LABEL_8;
      }
    }
    for (i = 0; i != v16; ++i)
    {
      for (j = 0; j != v16; ++j)
      {
        v22 = 0;
        v23 = v12;
        do
        {
          v24 = v15 + 4 * v22;
          v25 = sqrtf(*(float *)(v24 + 584));
          v26 = *(float *)(v24 + 440);
          v27 = v26 / v25;
          v28 = v26 * v25;
          v29 = (float)(v19 + (float)((float)j * v18)) - (float)(v28 * 0.5);
          v30 = (float *)(v13 + 16 * (v23 + v22));
          v31 = (float)(v19 + (float)((float)i * v18)) - (float)(v27 * 0.5);
          *v30 = v29;
          v30[1] = v31;
          v30[2] = v28 + v29;
          v30[3] = v27 + v31;
          ++v22;
        }
        while (v17 != v22);
        v12 = v23 + v22;
      }
      v12 = v23 + v22;
    }
    v12 = v23 + v22;
LABEL_8:
    ++v11;
    v7 = (float32x4_t *)((char *)v7 + 24);
    v15 += 24;
  }
  while (v11 != 6);
  *(_QWORD *)(a1 + 1384) = operator new[]();
  *(_QWORD *)(a1 + 1392) = operator new[]();
  *(_QWORD *)(a1 + 1400) = operator new[]();
  *(_QWORD *)(a1 + 1408) = operator new[]();
  *(_QWORD *)(a1 + 1416) = operator new[]();
  *(_QWORD *)(a1 + 1424) = operator new[]();
  *(_QWORD *)(a1 + 1432) = operator new[]();
  *(_QWORD *)(a1 + 1440) = operator new[]();
  *(_QWORD *)(a1 + 1448) = operator new[]();
  *(_QWORD *)(a1 + 1456) = operator new[]();
  *(_QWORD *)(a1 + 1464) = operator new[]();
  v66 = operator new[]();
  result = 0;
  *(_QWORD *)(a1 + 1472) = v66;
  return result;
}

uint64_t TtDetNode::populateAnchorBoxes(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, unsigned int a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  float v22;
  float v23;
  unsigned int i;
  unsigned int j;
  uint64_t v26;
  int v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  float32x4_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  char v50;
  BOOL v51;
  uint64_t v52;
  float32x4_t v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float *v68;
  float v69;
  float32x4x4_t v72;

  if (a5)
  {
    v14 = 0;
    v15 = 0;
    v16.i64[0] = 0x3F0000003F000000;
    v16.i64[1] = 0x3F0000003F000000;
    v17 = a2;
    v18 = a3;
    v19 = a5;
    while (1)
    {
      v20 = *(_DWORD *)(a1 + 4 * v14);
      if (v20)
      {
        v21 = *(unsigned int *)(a4 + 4 * v14);
        if ((_DWORD)v21)
          break;
      }
LABEL_3:
      ++v14;
      v18 = (_OWORD *)((char *)v18 + 24);
      v17 = (_OWORD *)((char *)v17 + 24);
      if (v14 == v19)
        return v15;
    }
    v22 = 1.0 / (float)v20;
    v23 = v22 * 0.5;
    if (v21 < 0x10)
    {
      for (i = 0; i != v20; ++i)
      {
        for (j = 0; j != v20; ++j)
        {
          v26 = 0;
          v27 = v15;
          do
          {
            v28 = sqrtf(*((float *)v18 + v26));
            v29 = *((float *)v17 + v26);
            v30 = v29 / v28;
            v31 = v29 * v28;
            v32 = (float)(v23 + (float)((float)j * v22)) - (float)(v31 * 0.5);
            v33 = (float *)(a6 + 16 * (v27 + v26));
            v34 = (float)(v23 + (float)((float)i * v22)) - (float)(v30 * 0.5);
            *v33 = v32;
            v33[1] = v34;
            v33[2] = v31 + v32;
            v33[3] = v30 + v34;
            ++v26;
          }
          while (v21 != v26);
          LODWORD(v15) = v27 + v26;
        }
        LODWORD(v15) = v27 + v26;
      }
      v15 = (v27 + v26);
      goto LABEL_3;
    }
    v35 = 0;
    v36 = (unint64_t)a3 + 24 * v14;
    v37 = (unint64_t)a2 + 24 * v14;
    v38 = v21 - 1;
    v39 = a6 + 16 * v21;
    v40 = 16 * (v21 - 1);
    v41 = v21 & 0xFFFFFFFC;
LABEL_16:
    v42 = 0;
    *(float *)&a12 = v23 + (float)((float)v35 * v22);
    v43 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a12, 0);
    while (1)
    {
      v44 = 0;
      *(float *)&a14 = v23 + (float)((float)v42 * v22);
      v45 = __CFADD__((_DWORD)v15, (_DWORD)v38);
      v46 = 16 * v15;
      v47 = a6 + v46;
      if (a6 + v46 + v40 < (unint64_t)(a6 + v46)
        || a6 + 4 + v46 + v40 < (unint64_t)(a6 + 4 + v46)
        || a6 + 12 + v46 + v40 < (unint64_t)(a6 + 12 + v46)
        || a6 + 8 + v46 + v40 < (unint64_t)(a6 + 8 + v46)
        || v45
        || HIDWORD(v38)
        || ((v44 = 0, v48 = v39 + v46, v37 < v39 + v46) ? (v49 = v47 >= v37 + 4 * v21) : (v49 = 1),
            v49 ? (v50 = 0) : (v50 = 1),
            v47 < v36 + 4 * v21 ? (v51 = v36 >= v48) : (v51 = 1),
            !v51 || (v50 & 1) != 0))
      {
        LODWORD(v52) = v15;
      }
      else
      {
        v52 = (v15 + v41);
        v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a14, 0);
        v54 = v21 & 0xFFFFFFFC;
        v55 = (float32x4_t *)v17;
        v56 = (float32x4_t *)v18;
        do
        {
          v57 = *v56++;
          v58 = vsqrtq_f32(v57);
          v59 = *v55++;
          v60 = vdivq_f32(v59, v58);
          v61 = vmulq_f32(v59, v58);
          v72.val[0] = vsubq_f32(v53, vmulq_f32(v61, v16));
          v72.val[1] = vsubq_f32(v43, vmulq_f32(v60, v16));
          v72.val[2] = vaddq_f32(v61, v72.val[0]);
          v72.val[3] = vaddq_f32(v60, v72.val[1]);
          v62 = (float *)(a6 + 16 * v15);
          vst4q_f32(v62, v72);
          LODWORD(v15) = v15 + 4;
          v54 -= 4;
        }
        while (v54);
        v44 = v21 & 0xFFFFFFFC;
        v15 = v52;
        if (v41 == v21)
          goto LABEL_17;
      }
      LODWORD(v15) = v52;
      do
      {
        v63 = sqrtf(*((float *)v18 + v44));
        v64 = *((float *)v17 + v44);
        v65 = v64 / v63;
        v66 = v64 * v63;
        v67 = *(float *)&a14 - (float)(v66 * 0.5);
        v68 = (float *)(a6 + 16 * v15);
        v69 = *(float *)&a12 - (float)(v65 * 0.5);
        *v68 = v67;
        v68[1] = v69;
        v68[2] = v66 + v67;
        v68[3] = v65 + v69;
        v15 = (v15 + 1);
        ++v44;
      }
      while (v21 != v44);
LABEL_17:
      if (++v42 == v20)
      {
        if (++v35 == v20)
          goto LABEL_3;
        goto LABEL_16;
      }
    }
  }
  return 0;
}

uint64_t TtDetNode::postProcess(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, uint64_t a5, float *a6, int8x8_t a7, double a8, float32x4_t a9, __n128 a10)
{
  float32x2_t v10;
  uint64_t result;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  unint64_t *v20;
  __int128 v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int8x8_t v39;
  float32x4_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t *v44;
  int8x16_t v45;
  int8x8_t v46;
  float32x4_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t i;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  _QWORD *v58;
  unsigned int *v59;
  _DWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t j;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  uint64_t k;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  _QWORD *v77;
  unsigned int *v78;
  _DWORD *v79;
  unint64_t v80;
  unint64_t m;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD *v87;
  const float *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  BOOL v99;
  BOOL v101;
  BOOL v103;
  uint64_t v105;
  const float *v110;
  float *v111;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  float32x4_t v115;
  float v116;
  float32x4_t v117;
  float32x4_t v118;
  float v119;
  float32x4_t v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  uint64_t v125;
  uint64_t v126;
  float32x2_t *v127;
  float32x2_t *v128;
  float32x2_t *v129;
  float32x2_t v131;
  float32x2_t v132;
  float32x2_t v133;
  float32x2_t v134;
  float32x2_t v135;
  float32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  uint64_t v140;
  float32x4_t v141;
  uint64_t v142;
  uint64_t v143;
  float32x2_t *v144;
  float32x4_t v145;
  int v146;
  float v147;
  float v148;
  uint64_t v150;
  float *v151;
  unsigned int v152;
  float v153;
  float v154;
  float v155;
  float v156;
  float v157;
  float v161;
  unint64_t v162;
  unsigned int v163;
  float32x2_t *v164;
  float v165;
  float32x2_t v166;
  float v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  const float *v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float v192;
  float32x4_t v193;
  float v194;
  _QWORD v195[5];
  _QWORD v196[6];
  float32x4x4_t v197;
  float32x4x4_t v198;
  float32x4x4_t v199;

  if (*a4 != 1)
    return 4294967289;
  result = 4294967292;
  if (a3 == 12 && a4[1] == 56945)
  {
    v17 = 0;
    a7.i32[0] = 0;
    while (1)
    {
      v18 = (__int128 *)(a2 + 24 * v17);
      v19 = a1 + 24 * v17;
      v20 = (unint64_t *)(v19 + 1480);
      v21 = *v18;
      *(_QWORD *)(v19 + 1496) = *((_QWORD *)v18 + 2);
      *(_OWORD *)(v19 + 1480) = v21;
      v22 = *((_DWORD *)v18 + 5);
      if (v22 == 6)
        goto LABEL_5;
      if (v22)
        return 4294967293;
      v23 = (unsigned int *)(a1 + 24 * v17);
      v23[375] = 6;
      v24 = v23[373];
      v25 = (4 * v24);
      v23[374] = v25;
      v26 = *(_QWORD *)(a1 + 8 * v17 + 1384);
      *v20 = v26;
      if (*((_DWORD *)v18 + 5))
        AcAttrNode::postProcess();
      v27 = *(_DWORD *)(a2 + 24 * v17 + 8);
      if (v27 != *(_DWORD *)(a1 + 24 * v17 + 1488))
        AcAttrNode::postProcess();
      if (*(_DWORD *)(a2 + 24 * v17 + 12) != (_DWORD)v24)
        AcAttrNode::postProcess();
      if (!v27 || !(_DWORD)v24)
        goto LABEL_5;
      LODWORD(v21) = *(_DWORD *)(a1 + 4 * v17 + 896);
      v28 = *(unsigned int *)(a2 + 24 * v17 + 16);
      v29 = *(_QWORD *)v18;
      if (v24 >= 8)
        break;
      v30 = (unsigned __int8 *)(v29 + 3);
      v31 = (_DWORD *)(v26 + 12);
      do
      {
        a9.i8[0] = *(v30 - 3);
        a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
        a9.f32[0] = (float)(*(float *)&v21 * (float)a9.i32[0]) + 0.0;
        *(v31 - 3) = a9.i32[0];
        if ((_DWORD)v24 != 1)
        {
          a9.i8[0] = *(v30 - 2);
          a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
          a9.f32[0] = (float)(*(float *)&v21 * (float)a9.i32[0]) + 0.0;
          *(v31 - 2) = a9.i32[0];
          if ((_DWORD)v24 != 2)
          {
            a9.i8[0] = *(v30 - 1);
            a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
            a9.f32[0] = (float)(*(float *)&v21 * (float)a9.i32[0]) + 0.0;
            *(v31 - 1) = a9.i32[0];
            if ((_DWORD)v24 != 3)
            {
              a9.i8[0] = *v30;
              a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
              a9.f32[0] = (float)(*(float *)&v21 * (float)a9.i32[0]) + 0.0;
              *v31 = a9.i32[0];
              if ((_DWORD)v24 != 4)
              {
                a9.i8[0] = v30[1];
                a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
                a9.f32[0] = (float)(*(float *)&v21 * (float)a9.i32[0]) + 0.0;
                v31[1] = a9.i32[0];
                if ((_DWORD)v24 != 5)
                {
                  a9.i8[0] = v30[2];
                  a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
                  a9.f32[0] = (float)(*(float *)&v21 * (float)a9.i32[0]) + 0.0;
                  v31[2] = a9.i32[0];
                  if ((_DWORD)v24 != 6)
                  {
                    a9.i8[0] = v30[3];
                    a9.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a9.f32)).u64[0];
                    a9.f32[0] = (float)(*(float *)&v21 * (float)a9.i32[0]) + 0.0;
                    v31[3] = a9.i32[0];
                  }
                }
              }
            }
          }
        }
        v30 += v28;
        v31 = (_DWORD *)((char *)v31 + v25);
        --v27;
      }
      while (v27);
LABEL_5:
      if (++v17 == 12)
      {
        std::chrono::steady_clock::now();
        v49 = 0;
        for (i = 0; i != 6; ++i)
        {
          v51 = (unsigned int *)(a1 + 4 * i);
          v52 = v51[200];
          if (v52)
          {
            v53 = v51[188];
            if ((_DWORD)v53)
            {
              v54 = v51[212];
              if (v54)
              {
                v55 = 0;
                v56 = a1 + 24 * i;
                v57 = (unsigned int *)(v56 + 1492);
                v58 = (_QWORD *)(v56 + 1480);
                v59 = (unsigned int *)(v56 + 1488);
                v60 = (_DWORD *)(v56 + 1496);
                v61 = *v57;
                do
                {
                  for (j = 0; j != v53; ++j)
                  {
                    if (j >= v61)
LABEL_70:
                      AcAttrNode::postProcess();
                    v64 = 0;
                    v65 = v55;
                    do
                    {
                      if (*v59 <= v65)
                        goto LABEL_70;
                      v66 = *(_DWORD *)(*v58 + *v60 * v65 + 4 * j);
                      if ((v64 & 3) == 2)
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 1352) + 16 * v49 + 12) = v66;
                      }
                      else if ((v64 & 3) == 1)
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 1352) + 16 * v49) = v66;
                      }
                      else if ((v64 & 3) != 0)
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 1352) + 16 * v49++ + 8) = v66;
                      }
                      else
                      {
                        *(_DWORD *)(*(_QWORD *)(a1 + 1352) + 16 * v49 + 4) = v66;
                      }
                      ++v64;
                      v65 += v52;
                    }
                    while (v54 != v64);
                  }
                  ++v55;
                }
                while (v55 != v52);
              }
              else
              {
                do
                {
                  v62 = v53;
                  do
                    --v62;
                  while (v62);
                  ++v54;
                }
                while (v54 != v52);
              }
            }
            else
            {
              do
                --v52;
              while (v52);
            }
          }
        }
        v67 = 0;
        v68 = 0;
        for (k = 6; k != 12; ++k)
        {
          v70 = (unsigned int *)(a1 + 4 * k);
          v71 = v70[200];
          if (v71)
          {
            v72 = v70[188];
            if ((_DWORD)v72)
            {
              v73 = v70[212];
              if (v73)
              {
                v74 = 0;
                v75 = a1 + 24 * k;
                v76 = (unsigned int *)(v75 + 1492);
                v77 = (_QWORD *)(v75 + 1480);
                v78 = (unsigned int *)(v75 + 1488);
                v79 = (_DWORD *)(v75 + 1496);
                v80 = *v76;
                do
                {
                  for (m = 0; m != v72; ++m)
                  {
                    v82 = v74;
                    v83 = v73;
                    if (m >= v80)
LABEL_96:
                      AcAttrNode::postProcess();
                    do
                    {
                      if (*v78 <= v82)
                        goto LABEL_96;
                      *(_DWORD *)(*(_QWORD *)(a1 + 1360) + 4 * (v68 + 91 * v67)) = *(_DWORD *)(*v77 + *v79 * v82 + 4 * m);
                      v84 = v68 + 1;
                      if ((v68 + 1) <= 0x5A)
                        ++v68;
                      else
                        v68 = 0;
                      if (v84 > 0x5A)
                        ++v67;
                      v82 += v71;
                      --v83;
                    }
                    while (v83);
                  }
                  ++v74;
                }
                while (v74 != v71);
              }
              else
              {
                do
                {
                  v85 = v72;
                  do
                    --v85;
                  while (v85);
                  ++v73;
                }
                while (v73 != v71);
              }
            }
            else
            {
              do
                --v71;
              while (v71);
            }
          }
        }
        v86 = *(unsigned int *)(a1 + 1328);
        v87 = *(_OWORD **)(a1 + 1344);
        if ((_DWORD)v86)
        {
          v88 = *(const float **)(a1 + 1352);
          v89 = *(_QWORD *)(a1 + 1336);
          if (v86 < 4)
          {
            v90 = 0;
LABEL_132:
            v125 = v86 - v90;
            v126 = (16 * v90) | 8;
            v127 = (float32x2_t *)(v89 + v126);
            v128 = (float32x2_t *)((char *)v87 + v126);
            v129 = (float32x2_t *)((char *)v88 + v126);
            v10 = (float32x2_t)0x3F0000003F000000;
            __asm
            {
              FMOV            V9.2S, #10.0
              FMOV            V10.2S, #5.0
            }
            do
            {
              v131 = v127[-1];
              v132 = vmul_f32(vadd_f32(v131, *v127), (float32x2_t)0x3F0000003F000000);
              v133 = vsub_f32(*v127, v131);
              v134 = vdiv_f32(v129[-1], _D9);
              v135 = *v129;
              v129 += 2;
              v136 = vdiv_f32(v135, _D10);
              v192 = v136.f32[0];
              v194 = expf(v136.f32[1]);
              v137.f32[0] = expf(v192);
              v137.f32[1] = v194;
              v138 = vmul_f32(v133, v137);
              v139 = vsub_f32(vmla_f32(v132, v133, v134), vmul_f32(v138, (float32x2_t)0x3F0000003F000000));
              v128[-1] = v139;
              *v128 = vadd_f32(v138, v139);
              v127 += 2;
              v128 += 2;
              --v125;
            }
            while (v125);
            goto LABEL_134;
          }
          v90 = 0;
          v91 = 16 * v86 - 12;
          v92 = (char *)v87 + v91;
          v93 = v89 + v91;
          v94 = 16 * v86 - 8;
          v95 = 16 * v86 - 4;
          v96 = (unint64_t)v87 + v95;
          v97 = v89 + v95;
          v99 = (unint64_t)v87 + 4 < v89 + v94 && v89 + 4 < (unint64_t)v87 + v94;
          v101 = (unint64_t)v87 + 12 < v89 + 16 * v86 && v89 + 12 < (unint64_t)&v87[v86];
          v103 = (unint64_t)v87 + 8 < v97 && v89 + 8 < v96;
          if (v89 < (unint64_t)v92 && (unint64_t)v87 < v93)
            goto LABEL_132;
          if (v99)
            goto LABEL_132;
          if (v101)
            goto LABEL_132;
          if (v103)
            goto LABEL_132;
          v175 = *(const float **)(a1 + 1352);
          v176 = *(unsigned int *)(a1 + 1328);
          v105 = v86 & 0xFFFFFFFC;
          __asm
          {
            FMOV            V1.4S, #10.0
            FMOV            V0.4S, #5.0
          }
          v177 = _Q0;
          v178 = _Q1;
          v174 = v105;
          v110 = *(const float **)(a1 + 1336);
          v111 = *(float **)(a1 + 1344);
          do
          {
            v197 = vld4q_f32(v110);
            v110 += 16;
            v112.i64[0] = 0x3F0000003F000000;
            v112.i64[1] = 0x3F0000003F000000;
            v182 = vmulq_f32(vaddq_f32(v197.val[1], v197.val[3]), v112);
            v183 = vmulq_f32(vaddq_f32(v197.val[0], v197.val[2]), v112);
            v184 = vsubq_f32(v197.val[2], v197.val[0]);
            v199 = vld4q_f32(v88);
            v88 += 16;
            v181 = vsubq_f32(v197.val[3], v197.val[1]);
            v179 = vdivq_f32(v199.val[1], v178);
            v180 = vdivq_f32(v199.val[0], v178);
            v189 = vdivq_f32(v199.val[2], v177);
            v193 = vdivq_f32(v199.val[3], v177);
            v185 = expf(v189.f32[1]);
            v113.f32[0] = expf(v189.f32[0]);
            v113.f32[1] = v185;
            v186 = v113;
            v114 = expf(v189.f32[2]);
            v115 = v186;
            v115.f32[2] = v114;
            v187 = v115;
            v116 = expf(v189.f32[3]);
            v117 = v187;
            v117.f32[3] = v116;
            v188 = vmulq_f32(v184, v117);
            v189.i32[0] = expf(v193.f32[1]);
            v118.f32[0] = expf(v193.f32[0]);
            v118.i32[1] = v189.i32[0];
            v190 = v118;
            v119 = expf(v193.f32[2]);
            v120 = v190;
            v120.f32[2] = v119;
            v191 = v120;
            v121 = expf(v193.f32[3]);
            v122 = v191;
            v122.f32[3] = v121;
            v123 = vmulq_f32(v181, v122);
            v124.i64[0] = 0x3F0000003F000000;
            v124.i64[1] = 0x3F0000003F000000;
            v198.val[0] = vsubq_f32(vmlaq_f32(v183, v184, v180), vmulq_f32(v188, v124));
            v198.val[1] = vsubq_f32(vmlaq_f32(v182, v181, v179), vmulq_f32(v123, v124));
            v198.val[3] = vaddq_f32(v123, v198.val[1]);
            v198.val[2] = vaddq_f32(v188, v198.val[0]);
            vst4q_f32(v111, v198);
            v111 += 16;
            v105 -= 4;
          }
          while (v105);
          v88 = v175;
          v86 = v176;
          v90 = v174;
          if (v174 != v176)
            goto LABEL_132;
        }
LABEL_134:
        if (a4[3] == 2)
        {
          v140 = *(_QWORD *)(a1 + 1360);
          if (*(_DWORD *)(a5 + 180) == 1)
          {
            v10 = *(float32x2_t *)(a5 + 192);
            _D9 = *(float32x2_t *)(a5 + 200);
            LODWORD(v196[0]) = *(_DWORD *)(a5 + 188);
            result = TtDetNode::multiclassNonmaxSuppress(v87, v140, v86, (uint64_t)v196, 1u, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 36), *(_QWORD *)(a1 + 1368), *(float *)(a1 + 48), *(float *)(a1 + 44), *(_QWORD *)(a1 + 1376));
            goto LABEL_139;
          }
        }
        else
        {
          v140 = *(_QWORD *)(a1 + 1360);
        }
        a4[3] = 1;
        result = TtDetNode::multiclassNonmaxSuppress(v87, v140, v86, a1 + 52, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 36), *(_QWORD *)(a1 + 1368), *(float *)(a1 + 48), *(float *)(a1 + 44), *(_QWORD *)(a1 + 1376));
LABEL_139:
        *(_DWORD *)(a5 + 180) = result;
        if ((_DWORD)result)
        {
          *(float32x2_t *)v141.f32 = vcvt_f32_u32(*(uint32x2_t *)(a1 + 20));
          v141.i64[1] = v141.i64[0];
          v142 = result;
          v143 = a5 + 188;
          v144 = (float32x2_t *)(*(_QWORD *)(a1 + 1376) + 8);
          do
          {
            *(float32x2_t *)v145.f32 = v144[-1];
            *(float32x2_t *)&v145.u32[2] = vsub_f32(*v144, *(float32x2_t *)v145.f32);
            *(float32x4_t *)(v143 + 4) = vmulq_f32(v145, v141);
            v146 = v144[1].i32[0];
            if (!v146)
              TtDetNode::postProcess();
            if (v146 >= 91)
              TtDetNode::postProcess();
            *(_DWORD *)v143 = v146;
            *(_DWORD *)(v143 + 80) = 0;
            v143 += 88;
            v144 = (float32x2_t *)((char *)v144 + 36);
            --v142;
          }
          while (v142);
        }
        if (a6)
        {
          if (a4[3] == 1)
          {
            v147 = *a6;
            if (*a6 >= 0.0)
            {
              v148 = a6[1];
              if (v148 >= 0.0 && (_DWORD)result != 0)
              {
                v150 = 0;
                v151 = (float *)(a5 + 204);
                v152 = -1;
                v153 = 1000000.0;
                do
                {
                  v155 = *(v151 - 3);
                  v154 = *(v151 - 2);
                  v156 = v155 + *(v151 - 1);
                  v157 = v154 + *v151;
                  if (v155 <= v147 && v147 <= v156 && v154 <= v148 && v148 <= v157)
                  {
                    v161 = sqrtf((float)((float)(v148 - (float)((float)(v154 + v157) * 0.5))* (float)(v148 - (float)((float)(v154 + v157) * 0.5)))+ (float)((float)(v147 - (float)((float)(v155 + v156) * 0.5))* (float)(v147 - (float)((float)(v155 + v156) * 0.5))));
                    if (v161 < v153)
                    {
                      v152 = v150;
                      v153 = v161;
                    }
                  }
                  ++v150;
                  v151 += 22;
                }
                while (result != v150);
                if ((v152 & 0x80000000) == 0)
                {
                  *(_DWORD *)(a5 + 180) = 1;
                  if (v152)
                  {
                    v171 = a5 + 184 + 88 * v152;
                    v172 = *(_OWORD *)(v171 + 48);
                    *(_OWORD *)(a5 + 216) = *(_OWORD *)(v171 + 32);
                    *(_OWORD *)(a5 + 232) = v172;
                    *(_OWORD *)(a5 + 248) = *(_OWORD *)(v171 + 64);
                    v173 = *(_OWORD *)(v171 + 16);
                    *(_OWORD *)(a5 + 184) = *(_OWORD *)v171;
                    *(_QWORD *)(a5 + 264) = *(_QWORD *)(v171 + 80);
                    *(_OWORD *)(a5 + 200) = v173;
                  }
                  result = 0;
                  a4[3] = 2;
                  return result;
                }
              }
            }
          }
          else
          {
            if (!(_DWORD)result)
              return result;
            v162 = 0;
            v163 = 0;
            v196[0] = v10;
            v196[1] = vadd_f32(_D9, v10);
            v164 = (float32x2_t *)(a5 + 200);
            v165 = -1.0;
            do
            {
              v166 = vadd_f32(v164[-1], *v164);
              v195[0] = v164[-1];
              v195[1] = v166;
              ttDetRectOverlap((float *)v196, (float *)v195);
              if (v167 > v165)
              {
                v165 = v167;
                v163 = v162;
              }
              ++v162;
              v164 += 11;
            }
            while (v162 < *(unsigned int *)(a5 + 180));
            *(_DWORD *)(a5 + 180) = 1;
            if (v163)
            {
              v168 = a5 + 184 + 88 * v163;
              v169 = *(_OWORD *)(v168 + 48);
              *(_OWORD *)(a5 + 216) = *(_OWORD *)(v168 + 32);
              *(_OWORD *)(a5 + 232) = v169;
              *(_OWORD *)(a5 + 248) = *(_OWORD *)(v168 + 64);
              v170 = *(_OWORD *)(v168 + 16);
              *(_OWORD *)(a5 + 184) = *(_OWORD *)v168;
              *(_QWORD *)(a5 + 264) = *(_QWORD *)(v168 + 80);
              *(_OWORD *)(a5 + 200) = v170;
            }
          }
        }
        return 0;
      }
    }
    v32 = 0;
    a9 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v21, 0);
    v33 = v24 & 0xFFFFFFF8;
    v34 = v26;
    v35 = v29;
    while (1)
    {
      if (v34 >= v29 + v24 + v32 * v28 || v35 >= v26 + 4 * v24 + v32 * v25)
      {
        if (v24 < 0x10)
        {
          v37 = 0;
LABEL_32:
          v38 = 4 * v37;
          do
          {
            v39 = *(int8x8_t *)(v35 + v37);
            v40 = vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v39, a7), 8uLL), 8uLL))), a9);
            a10 = (__n128)vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v39, a7), 8uLL), 8uLL))), a9);
            v41 = v34 + v38;
            *(float32x4_t *)v41 = v40;
            *(__n128 *)(v41 + 16) = a10;
            v37 += 8;
            v38 += 32;
          }
          while (v33 != v37);
          v42 = v24 & 0xFFFFFFF8;
          if (v33 == v24)
            goto LABEL_24;
          goto LABEL_35;
        }
        v43 = 0;
        v44 = (int8x16_t *)v35;
        do
        {
          v45 = *v44++;
          v46 = (int8x8_t)vextq_s8(v45, v45, 8uLL).u64[0];
          v47 = vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v46, a7), 8uLL), 8uLL))), a9);
          a10 = (__n128)vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v46, a7), 8uLL), 8uLL))), a9);
          v48 = v34 + v43;
          *(float32x4_t *)v48 = vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v45.i8, a7), 8uLL), 8uLL))), a9);
          *(float32x4_t *)(v48 + 16) = vmlaq_f32((float32x4_t)0, vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v45.i8, a7), 8uLL), 8uLL))), a9);
          *(float32x4_t *)(v48 + 32) = v47;
          *(__n128 *)(v48 + 48) = a10;
          v43 += 64;
        }
        while (((4 * v24) & 0x3FFFFFFC0) != v43);
        if ((v24 & 0xFFFFFFF0) == v24)
          goto LABEL_24;
        v37 = v24 & 0xFFFFFFF0;
        v42 = v37;
        if ((v24 & 8) != 0)
          goto LABEL_32;
      }
      else
      {
        v42 = 0;
      }
      do
      {
LABEL_35:
        a10.n128_u8[0] = *(_BYTE *)(v35 + v42);
        a10.n128_u64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8((int8x8_t)a10.n128_u64[0])).u64[0];
        a10.n128_f32[0] = (float)(*(float *)&v21 * (float)a10.n128_i32[0]) + 0.0;
        *(_DWORD *)(v34 + 4 * v42++) = a10.n128_u32[0];
      }
      while (v24 != v42);
LABEL_24:
      v35 += v28;
      v34 += v25;
      if ((_DWORD)++v32 == v27)
        goto LABEL_5;
    }
  }
  return result;
}

void TtDetNode::decodeRelBoxes(const float *a1, const float *a2, unsigned int a3, float *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  const float *v13;
  const float *v14;
  unint64_t v15;
  float *v16;
  float *v17;
  const float *v18;
  const float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  float *v23;
  char v25;
  BOOL v27;
  BOOL v29;
  uint64_t v36;
  const float *v37;
  const float *v38;
  float *v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  float32x4_t v48;
  float v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x2_t *v55;
  float32x2_t *v56;
  float32x2_t *v57;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  float32x2_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  float32x2_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float v84;
  float32x4_t v85;
  float v86;
  float32x4x4_t v87;
  float32x4x4_t v88;
  float32x4x4_t v89;

  if (a3)
  {
    v7 = a3;
    if (a3 < 4)
    {
      v8 = 0;
LABEL_32:
      v53 = v7 - v8;
      v54 = (16 * v8) | 8;
      v55 = (float32x2_t *)((char *)a1 + v54);
      v56 = (float32x2_t *)((char *)a4 + v54);
      v57 = (float32x2_t *)((char *)a2 + v54);
      __asm
      {
        FMOV            V9.2S, #10.0
        FMOV            V10.2S, #5.0
      }
      do
      {
        v60 = v57[-1];
        v61 = vmul_f32(vadd_f32(v60, *v57), (float32x2_t)0x3F0000003F000000);
        v62 = vsub_f32(*v57, v60);
        v63 = vdiv_f32(v55[-1], _D9);
        v64 = *v55;
        v55 += 2;
        v65 = vdiv_f32(v64, _D10);
        v84 = v65.f32[0];
        v86 = expf(v65.f32[1]);
        v66.f32[0] = expf(v84);
        v66.f32[1] = v86;
        v67 = vmul_f32(v62, v66);
        v68 = vsub_f32(vmla_f32(v61, v62, v63), vmul_f32(v67, (float32x2_t)0x3F0000003F000000));
        v56[-1] = v68;
        *v56 = vadd_f32(v67, v68);
        v56 += 2;
        v57 += 2;
        --v53;
      }
      while (v53);
      return;
    }
    v8 = 0;
    v9 = 16 * a3 - 12;
    v10 = (char *)a4 + v9;
    v11 = (char *)a2 + v9;
    v12 = 16 * a3 - 8;
    v13 = (float *)((char *)a4 + v12);
    v14 = a2 + 1;
    v15 = (unint64_t)a2 + v12;
    v16 = a4 + 3;
    v17 = &a4[4 * a3];
    v18 = a2 + 3;
    v19 = &a2[4 * a3];
    v20 = a4 + 2;
    v21 = 16 * a3 - 4;
    v22 = (unint64_t)a4 + v21;
    _CF = (unint64_t)(a4 + 1) >= v15;
    v23 = (float *)((char *)a2 + v21);
    _CF = _CF || v14 >= v13;
    v25 = !_CF;
    v27 = v16 < v19 && v18 < v17;
    v29 = v20 < v23 && (unint64_t)(a2 + 2) < v22;
    if (v10 > (char *)a2 && v11 > (char *)a4)
      goto LABEL_32;
    if ((v25 & 1) != 0)
      goto LABEL_32;
    if (v27)
      goto LABEL_32;
    if (v29)
      goto LABEL_32;
    v8 = v7 & 0xFFFFFFFC;
    __asm
    {
      FMOV            V1.4S, #10.0
      FMOV            V0.4S, #5.0
    }
    v69 = _Q0;
    v70 = _Q1;
    v36 = v8;
    v37 = a2;
    v38 = a1;
    v39 = a4;
    do
    {
      v87 = vld4q_f32(v37);
      v37 += 16;
      v40.i64[0] = 0x3F0000003F000000;
      v40.i64[1] = 0x3F0000003F000000;
      v74 = vmulq_f32(vaddq_f32(v87.val[1], v87.val[3]), v40);
      v75 = vmulq_f32(vaddq_f32(v87.val[0], v87.val[2]), v40);
      v76 = vsubq_f32(v87.val[2], v87.val[0]);
      v89 = vld4q_f32(v38);
      v38 += 16;
      v73 = vsubq_f32(v87.val[3], v87.val[1]);
      v71 = vdivq_f32(v89.val[1], v70);
      v72 = vdivq_f32(v89.val[0], v70);
      v85 = vdivq_f32(v89.val[3], v69);
      v81 = vdivq_f32(v89.val[2], v69);
      v77 = expf(v81.f32[1]);
      v41.f32[0] = expf(v81.f32[0]);
      v41.f32[1] = v77;
      v78 = v41;
      v42 = expf(v81.f32[2]);
      v43 = v78;
      v43.f32[2] = v42;
      v79 = v43;
      v44 = expf(v81.f32[3]);
      v45 = v79;
      v45.f32[3] = v44;
      v80 = vmulq_f32(v76, v45);
      v81.i32[0] = expf(v85.f32[1]);
      v46.f32[0] = expf(v85.f32[0]);
      v46.i32[1] = v81.i32[0];
      v82 = v46;
      v47 = expf(v85.f32[2]);
      v48 = v82;
      v48.f32[2] = v47;
      v83 = v48;
      v49 = expf(v85.f32[3]);
      v50 = v83;
      v50.f32[3] = v49;
      v51 = vmulq_f32(v73, v50);
      v52.i64[0] = 0x3F0000003F000000;
      v52.i64[1] = 0x3F0000003F000000;
      v88.val[0] = vsubq_f32(vmlaq_f32(v75, v76, v72), vmulq_f32(v80, v52));
      v88.val[1] = vsubq_f32(vmlaq_f32(v74, v73, v71), vmulq_f32(v51, v52));
      v88.val[3] = vaddq_f32(v51, v88.val[1]);
      v88.val[2] = vaddq_f32(v80, v88.val[0]);
      vst4q_f32(v39, v88);
      v39 += 16;
      v36 -= 4;
    }
    while (v36);
    if (v8 != v7)
      goto LABEL_32;
  }
}

uint64_t TtDetNode::multiclassNonmaxSuppress(_OWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, float a9, float a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  float *v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v36;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  unsigned int v44;

  initHeap((uint64_t)&v43, a11, a7 + 1, (uint64_t)minHeapCompare);
  if (a5)
  {
    if (a3)
    {
      v17 = 0;
      v36 = a5;
      v18 = a3;
      do
      {
        v19 = 0;
        v20 = *(unsigned int *)(a4 + 4 * v17);
        v21 = a1;
        v22 = (float *)(a2 + 4 * v20);
        v23 = v18;
        do
        {
          v24 = 1.0 / (float)(expf(-*v22) + 1.0);
          if (v24 > a10)
          {
            v25 = a8 + 36 * v19;
            *(_OWORD *)v25 = *v21;
            *(_DWORD *)(v25 + 16) = v20;
            *(float *)(v25 + 24) = v24;
            v19 = (v19 + 1);
          }
          v22 += 91;
          ++v21;
          --v23;
        }
        while (v23);
        v26 = ttNonMaxSuppression2(a8, v19, a9);
        if (v26 >= a6)
          v27 = a6;
        else
          v27 = v26;
        if ((_DWORD)v27)
        {
          v28 = a8;
          do
          {
            v29 = *(_OWORD *)(v28 + 16);
            v40 = *(_OWORD *)v28;
            v41 = v29;
            v42 = *(_DWORD *)(v28 + 32);
            addToHeap(&v43, (uint64_t)&v40);
            v28 += 36;
            --v27;
          }
          while (v27);
        }
        ++v17;
      }
      while (v17 != v36);
    }
    else
    {
      v30 = 0;
      do
      {
        v31 = ttNonMaxSuppression2(a8, 0, a9);
        if (v31 >= a6)
          v32 = a6;
        else
          v32 = v31;
        if ((_DWORD)v32)
        {
          v33 = a8;
          do
          {
            v34 = *(_OWORD *)(v33 + 16);
            v40 = *(_OWORD *)v33;
            v41 = v34;
            v42 = *(_DWORD *)(v33 + 32);
            addToHeap(&v43, (uint64_t)&v40);
            v33 += 36;
            --v32;
          }
          while (v32);
        }
        ++v30;
      }
      while (v30 != a5);
    }
  }
  *(_DWORD *)(a11 + 24) = -1027080192;
  bmHeapsort(a11, v44 + 1, 0x24uLL, (int (*)(uint64_t, uint64_t))ttDetRectScoreCompare);
  return v44;
}

uint64_t TtDetNode::getParams(uint64_t a1, _DWORD *a2, char *a3)
{
  if (*a2 != 1)
    return 4294967289;
  if (a2[1] != 56945)
    return 4294967292;
  bzero(a3, 0x278uLL);
  *(_QWORD *)a3 = *(_QWORD *)(a1 + 20);
  *((_DWORD *)a3 + 2) = *(_DWORD *)(a1 + 752);
  *((_DWORD *)a3 + 14) = *(_DWORD *)(a1 + 800);
  *((_DWORD *)a3 + 26) = *(_DWORD *)(a1 + 848);
  *((_DWORD *)a3 + 3) = *(_DWORD *)(a1 + 756);
  *((_DWORD *)a3 + 15) = *(_DWORD *)(a1 + 804);
  *((_DWORD *)a3 + 27) = *(_DWORD *)(a1 + 852);
  *((_DWORD *)a3 + 4) = *(_DWORD *)(a1 + 760);
  *((_DWORD *)a3 + 16) = *(_DWORD *)(a1 + 808);
  *((_DWORD *)a3 + 28) = *(_DWORD *)(a1 + 856);
  *((_DWORD *)a3 + 5) = *(_DWORD *)(a1 + 764);
  *((_DWORD *)a3 + 17) = *(_DWORD *)(a1 + 812);
  *((_DWORD *)a3 + 29) = *(_DWORD *)(a1 + 860);
  *((_DWORD *)a3 + 6) = *(_DWORD *)(a1 + 768);
  *((_DWORD *)a3 + 18) = *(_DWORD *)(a1 + 816);
  *((_DWORD *)a3 + 30) = *(_DWORD *)(a1 + 864);
  *((_DWORD *)a3 + 7) = *(_DWORD *)(a1 + 772);
  *((_DWORD *)a3 + 19) = *(_DWORD *)(a1 + 820);
  *((_DWORD *)a3 + 31) = *(_DWORD *)(a1 + 868);
  *((_DWORD *)a3 + 8) = *(_DWORD *)(a1 + 776);
  *((_DWORD *)a3 + 20) = *(_DWORD *)(a1 + 824);
  *((_DWORD *)a3 + 32) = *(_DWORD *)(a1 + 872);
  *((_DWORD *)a3 + 9) = *(_DWORD *)(a1 + 780);
  *((_DWORD *)a3 + 21) = *(_DWORD *)(a1 + 828);
  *((_DWORD *)a3 + 33) = *(_DWORD *)(a1 + 876);
  *((_DWORD *)a3 + 10) = *(_DWORD *)(a1 + 784);
  *((_DWORD *)a3 + 22) = *(_DWORD *)(a1 + 832);
  *((_DWORD *)a3 + 34) = *(_DWORD *)(a1 + 880);
  *((_DWORD *)a3 + 11) = *(_DWORD *)(a1 + 788);
  *((_DWORD *)a3 + 23) = *(_DWORD *)(a1 + 836);
  *((_DWORD *)a3 + 35) = *(_DWORD *)(a1 + 884);
  *((_DWORD *)a3 + 12) = *(_DWORD *)(a1 + 792);
  *((_DWORD *)a3 + 24) = *(_DWORD *)(a1 + 840);
  *((_DWORD *)a3 + 36) = *(_DWORD *)(a1 + 888);
  *((_DWORD *)a3 + 13) = *(_DWORD *)(a1 + 796);
  *((_DWORD *)a3 + 25) = *(_DWORD *)(a1 + 844);
  *((_DWORD *)a3 + 37) = *(_DWORD *)(a1 + 892);
  *((_DWORD *)a3 + 50) = *(_DWORD *)(a1 + 896);
  strncpy(a3 + 248, (const char *)(a1 + 944), 0x20uLL);
  *((_DWORD *)a3 + 51) = *(_DWORD *)(a1 + 900);
  strncpy(a3 + 280, (const char *)(a1 + 976), 0x20uLL);
  *((_DWORD *)a3 + 52) = *(_DWORD *)(a1 + 904);
  strncpy(a3 + 312, (const char *)(a1 + 1008), 0x20uLL);
  *((_DWORD *)a3 + 53) = *(_DWORD *)(a1 + 908);
  strncpy(a3 + 344, (const char *)(a1 + 1040), 0x20uLL);
  *((_DWORD *)a3 + 54) = *(_DWORD *)(a1 + 912);
  strncpy(a3 + 376, (const char *)(a1 + 1072), 0x20uLL);
  *((_DWORD *)a3 + 55) = *(_DWORD *)(a1 + 916);
  strncpy(a3 + 408, (const char *)(a1 + 1104), 0x20uLL);
  *((_DWORD *)a3 + 56) = *(_DWORD *)(a1 + 920);
  strncpy(a3 + 440, (const char *)(a1 + 1136), 0x20uLL);
  *((_DWORD *)a3 + 57) = *(_DWORD *)(a1 + 924);
  strncpy(a3 + 472, (const char *)(a1 + 1168), 0x20uLL);
  *((_DWORD *)a3 + 58) = *(_DWORD *)(a1 + 928);
  strncpy(a3 + 504, (const char *)(a1 + 1200), 0x20uLL);
  *((_DWORD *)a3 + 59) = *(_DWORD *)(a1 + 932);
  strncpy(a3 + 536, (const char *)(a1 + 1232), 0x20uLL);
  *((_DWORD *)a3 + 60) = *(_DWORD *)(a1 + 936);
  strncpy(a3 + 568, (const char *)(a1 + 1264), 0x20uLL);
  *((_DWORD *)a3 + 61) = *(_DWORD *)(a1 + 940);
  strncpy(a3 + 600, (const char *)(a1 + 1296), 0x20uLL);
  return 0;
}

BOOL minHeapCompare(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 24) < *(float *)(a2 + 24);
}

uint64_t TtDetNode::getTrkScheduleInfo(uint64_t a1, _DWORD *a2, BOOL *a3)
{
  uint64_t result;

  if (*a2 != 1 || a2[1] != 56945)
    return 4294967289;
  result = 0;
  *a3 = a2[3] == 2;
  return result;
}

uint64_t FTFillPixelBufferWithColor(__CVBuffer *a1, unsigned int a2)
{
  size_t Height;
  size_t BytesPerRow;
  char *BaseAddress;
  uint64_t v7;
  __int128 v8;
  size_t i;
  char *v10;
  uint64_t result;
  std::runtime_error *exception;

  if (CVPixelBufferLockBaseAddress(a1, 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
    goto LABEL_12;
  }
  Height = CVPixelBufferGetHeight(a1);
  BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  if (Height && BytesPerRow)
  {
    v7 = 0;
    *(int32x2_t *)&v8 = vdup_n_s32(a2);
    *((_QWORD *)&v8 + 1) = v8;
    do
    {
      for (i = 0; i < BytesPerRow; i += 64)
      {
        v10 = &BaseAddress[i];
        *(_OWORD *)v10 = v8;
        *((_OWORD *)v10 + 1) = v8;
        *((_OWORD *)v10 + 2) = v8;
        *((_OWORD *)v10 + 3) = v8;
      }
      ++v7;
      BaseAddress += 64 * (BytesPerRow >> 6);
    }
    while (v7 != Height);
  }
  result = CVPixelBufferUnlockBaseAddress(a1, 0);
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
LABEL_12:
    __cxa_throw(exception, MEMORY[0x24BEDB730], MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_20CCA3594(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CCA35A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20CCA35BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ik::PixelBufferScopeLock::~PixelBufferScopeLock((ik::PixelBufferScopeLock *)va);
  _Unwind_Resume(a1);
}

uint64_t FTComputeMeanColor(ft *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  uint16x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64x2_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t result;
  int32x2_t v18;
  int16x8_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (!a1)
  {
    ft::GetOsLog(0);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      FTComputeMeanColor_cold_1(v20, v21, v22, v23, v24, v25, v26, v27);

      return 0xFFFFFFFFLL;
    }
LABEL_7:

    return 0xFFFFFFFFLL;
  }
  if (!a3)
  {
    ft::GetOsLog(a1);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      FTComputeMeanColor_cold_2(v20, v28, v29, v30, v31, v32, v33, v34);

      return 0xFFFFFFFFLL;
    }
    goto LABEL_7;
  }
  v3 = 0;
  v4 = 0;
  v5 = 0x100u / *(_DWORD *)a1;
  v6 = vdupq_n_s32(v5);
  v7.i32[0] = 0;
  v7.i32[1] = v5;
  v7.u64[1] = (unint64_t)vmul_s32(*(int32x2_t *)v6.i8, (int32x2_t)0x300000002);
  v8 = vdupq_n_s32(16 * v5);
  v9 = (uint16x4_t)vmovn_s32(v6);
  v10 = (int32x4_t)vmull_u16(v9, (uint16x4_t)0xB000A00090008);
  v11 = (int32x4_t)vmull_u16(v9, (uint16x4_t)0x7000600050004);
  v12 = (int32x4_t)vmull_u16(v9, (uint16x4_t)0xF000E000D000CLL);
  v13 = 0uLL;
  do
  {
    v14 = (int8x16_t)vaddq_s32(vmlaq_s32(vmulq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 193) + v3 + 32), v10), *(int32x4_t *)(*((_QWORD *)a1 + 193) + v3), v7), vmlaq_s32(vmulq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 193) + v3 + 48), v12), *(int32x4_t *)(*((_QWORD *)a1 + 193) + v3 + 16), v11));
    *(int32x2_t *)v14.i8 = vadd_s32(*(int32x2_t *)v14.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
    v15 = (int8x16_t)vaddq_s32(vmlaq_s32(vmulq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 194) + v3 + 32), v10), *(int32x4_t *)(*((_QWORD *)a1 + 194) + v3), v7), vmlaq_s32(vmulq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 194) + v3 + 48), v12), *(int32x4_t *)(*((_QWORD *)a1 + 194) + v3 + 16), v11));
    *(int32x2_t *)v15.i8 = vadd_s32(*(int32x2_t *)v15.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
    v13 = vaddw_u32(v13, (uint32x2_t)vadd_s32(vzip1_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v14.i8), vzip2_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v14.i8)));
    v16 = (int8x16_t)vaddq_s32(vmlaq_s32(vmulq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 195) + v3 + 32), v10), *(int32x4_t *)(*((_QWORD *)a1 + 195) + v3), v7), vmlaq_s32(vmulq_s32(*(int32x4_t *)(*((_QWORD *)a1 + 195) + v3 + 48), v12), *(int32x4_t *)(*((_QWORD *)a1 + 195) + v3 + 16), v11));
    *(int32x2_t *)v16.i8 = vadd_s32(*(int32x2_t *)v16.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    v4 += vadd_s32(*(int32x2_t *)v16.i8, vdup_lane_s32(*(int32x2_t *)v16.i8, 1)).u32[0];
    v7 = vaddq_s32(v7, v8);
    v11 = vaddq_s32(v11, v8);
    v10 = vaddq_s32(v10, v8);
    v12 = vaddq_s32(v12, v8);
    v3 += 64;
  }
  while (v3 != 512);
  result = 0;
  v18 = vmovn_s64(vcvtq_s64_f64(vrndaq_f64(vdivq_f64(vcvtq_f64_u64(v13), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0)))));
  v19.i16[3] = 255;
  v19.i64[1] = 0xFF00FF00FF00FFLL;
  v19.i16[0] = llround((double)v4 / (double)a2);
  v19.i16[1] = v18.i16[0];
  v19.i16[2] = v18.i16[2];
  *a3 = vmovn_s16(v19).u32[0];
  return result;
}

uint64_t TtDetCreate(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  _QWORD *v6;
  TtDetNode *v7;
  uint64_t result;

  v3 = 4294967292;
  if (!a1 || !a2)
    return v3;
  v6 = (_QWORD *)operator new();
  *v6 = 0;
  v7 = (TtDetNode *)operator new();
  TtDetNode::TtDetNode((uint64_t)v7, (uint64_t)a3);
  *v6 = v7;
  result = TtDetNode::init((uint64_t)v7, 0, a3);
  v3 = result;
  if ((_DWORD)result)
  {
    TtDetNode::~TtDetNode(v7);
    MEMORY[0x212B93F04]();
    MEMORY[0x212B93F04](v6, 0x20C4093837F09);
    return v3;
  }
  *a1 = v6;
  return result;
}

void sub_20CCA38D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212B93F04](v1, 0x10A0C40BF7F8171);
  _Unwind_Resume(a1);
}

uint64_t TtDetDestroy(TtDetNode **a1)
{
  TtDetNode *v2;

  if (!a1)
    return 4294967292;
  v2 = *a1;
  if (!v2)
    return 4294967292;
  TtDetNode::~TtDetNode(v2);
  MEMORY[0x212B93F04]();
  MEMORY[0x212B93F04](a1, 0x20C4093837F09);
  return 0;
}

uint64_t TtDetStart(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t TtDetStop(_QWORD *a1)
{
  uint64_t result;

  result = 4294967292;
  if (a1)
  {
    if (*a1)
      return 0;
    else
      return 4294967292;
  }
  return result;
}

uint64_t TtDetGetParams(uint64_t *a1, _DWORD *a2, char *a3)
{
  uint64_t v3;
  BOOL v4;

  if (!a1)
    return 4294967292;
  v3 = *a1;
  v4 = !v3 || a2 == 0;
  if (v4 || a3 == 0)
    return 4294967292;
  else
    return TtDetNode::getParams(v3, a2, a3);
}

uint64_t TtDetPreProcessRef(uint64_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _DWORD v13[158];

  if (!a1)
    return 4294967292;
  v5 = *a1;
  if (!*a1)
    return 4294967292;
  result = 4294967292;
  if (a2)
  {
    if (a4)
    {
      if (a5)
      {
        if (*(_QWORD *)a3)
        {
          if (*(_QWORD *)a5)
          {
            result = TtDetNode::getParams(v5, a4, (char *)v13);
            if (!(_DWORD)result)
            {
              v9 = *(_DWORD *)(a3 + 12);
              if ((v9 & 3) == 0
                && (v10 = *(_DWORD *)(a5 + 12), v10 == 4 * v13[0])
                && (v11 = *(_DWORD *)(a5 + 8), v11 == v13[1]))
              {
                v12 = *(_DWORD *)(a5 + 16);
                result = 4294967292;
                if (v12 >= v10 && (v12 & 0x3F) == 0)
                {
                  if (rtcv::simResize(*(void **)a3, v9 >> 2, *(_DWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), 0, 0, 1, *(void **)a5, v10 >> 2, v11, v12))
                  {
                    return 0;
                  }
                  else
                  {
                    return 4294967288;
                  }
                }
              }
              else
              {
                return 4294967292;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TtDetPostProcessMultiNetOutputs(uint64_t *a1, unsigned int *a2, uint64_t a3, _DWORD *a4, uint64_t a5, float a6, float a7)
{
  uint64_t result;
  int8x8_t v15;
  double v16;
  float32x4_t v17;
  __n128 v18;
  unint64_t v19;
  float *v20;
  float v21;
  float v22;
  unint64_t v23;
  float *v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  unsigned int v38;
  unsigned int v39;

  if (!a1)
    return 4294967292;
  if (!*a1)
    return 4294967292;
  result = 4294967292;
  if (!a4 || !a2 || !a5 || !*a2 || !a2[1])
    return result;
  *(_OWORD *)(a5 + 157) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  if (!*a1)
    return 4294967292;
  result = TtDetNode::getParams(*a1, a4, (char *)&v38);
  if (!(_DWORD)result)
  {
    bmBufferResizeCoordConvert(*a2, a2[1], v38, v39, 0, &v36, &v37, a6, a7);
    if (*(_DWORD *)(a5 + 180))
    {
      v19 = 0;
      v20 = (float *)(a5 + 204);
      do
      {
        v21 = *(v20 - 3);
        v34 = *(v20 - 2);
        v35 = v21;
        v22 = v21 + *(v20 - 1);
        v32 = v34 + *v20;
        v33 = v22;
        bmBufferResizeCoordConvert(*a2, a2[1], v38, v39, 0, &v35, &v34, v21, v34);
        bmBufferResizeCoordConvert(*a2, a2[1], v38, v39, 0, &v33, &v32, v33, v32);
        *(float *)&v16 = v34;
        *(float *)v15.i32 = v35;
        *(v20 - 3) = v35;
        *(v20 - 2) = *(float *)&v16;
        v17.f32[0] = v33;
        v18.n128_f32[0] = v33 - *(float *)v15.i32;
        *(float *)v15.i32 = v32 - *(float *)&v16;
        *(v20 - 1) = v18.n128_f32[0];
        *v20 = *(float *)v15.i32;
        ++v19;
        v20 += 22;
      }
      while (v19 < *(unsigned int *)(a5 + 180));
    }
    result = TtDetNode::postProcess(*a1, a3, 12, a4, a5, &v36, v15, v16, v17, v18);
    if (!(_DWORD)result)
    {
      if (*(_DWORD *)(a5 + 180))
      {
        v23 = 0;
        v24 = (float *)(a5 + 204);
        do
        {
          v25 = *(v24 - 3);
          v34 = *(v24 - 2);
          v35 = v25;
          v26 = v25 + *(v24 - 1);
          v32 = v34 + *v24;
          v33 = v26;
          bmBufferResizeCoordConvertReversed(*a2, a2[1], v38, v39, 0, &v35, &v34, v25, v34);
          bmBufferResizeCoordConvertReversed(*a2, a2[1], v38, v39, 0, &v33, &v32, v33, v32);
          v28 = v34;
          v27 = v35;
          *(v24 - 3) = v35;
          *(v24 - 2) = v28;
          v29 = v33 - v27;
          v30 = v32 - v28;
          *(v24 - 1) = v29;
          *v24 = v30;
          ++v23;
          v24 += 22;
        }
        while (v23 < *(unsigned int *)(a5 + 180));
      }
      if (!*(_BYTE *)a5)
      {
        result = 0;
        *(_DWORD *)(a5 + 37) = 0;
        *(_OWORD *)(a5 + 21) = xmmword_20CCABCD0;
        v31 = *(_DWORD *)(*a1 + 16);
        *(_OWORD *)(a5 + 81) = *(_OWORD *)*a1;
        *(_DWORD *)(a5 + 97) = v31;
        *(_BYTE *)a5 = 1;
        return result;
      }
      return 4294967292;
    }
  }
  return result;
}

uint64_t TtDetPostProcess(uint64_t *a1, unsigned int *a2, uint64_t a3, unsigned int a4, unsigned int *a5, int a6, _DWORD *a7, uint64_t a8)
{
  uint64_t result;
  unsigned int *v10;
  uint64_t v16;
  uint64_t *i;
  unsigned int v18;
  _BYTE *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  char v24[104];
  uint64_t v25;
  _BYTE v26[288];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  result = 4294967292;
  if (a3)
  {
    v10 = a5;
    if (a5)
    {
      if (a6 == 12)
      {
        if (a1)
        {
          if (a7)
          {
            if (*a1)
            {
              result = TtDetNode::getParams(*a1, a7, v24);
              if (!(_DWORD)result)
              {
                v16 = 0;
                for (i = &v25; ; i = (uint64_t *)((char *)i + 4))
                {
                  v18 = *v10++;
                  v19 = &v26[v16];
                  *(_QWORD *)v19 = a3 + v18;
                  v20 = *((_DWORD *)i - 24);
                  v21 = *(_DWORD *)i * *((_DWORD *)i - 12);
                  *((_DWORD *)v19 + 2) = v21;
                  *((_DWORD *)v19 + 3) = v20;
                  v22 = (v20 + 63) & 0xFFFFFFC0;
                  v23 = *((_DWORD *)i + 12);
                  *((_DWORD *)v19 + 4) = v22;
                  *((_DWORD *)v19 + 5) = v23;
                  if (v18 + (unint64_t)(v21 * v22) > a4)
                    break;
                  v16 += 24;
                  if (v16 == 288)
                    return TtDetPostProcessMultiNetOutputs(a1, a2, (uint64_t)v26, a7, a8, 0.0, 0.0);
                }
                return 4294967292;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TtDetGetTrkScheduleInfo(uint64_t *a1, _DWORD *a2, BOOL *a3)
{
  uint64_t v3;
  BOOL v4;

  if (!a1)
    return 4294967292;
  v3 = *a1;
  v4 = !v3 || a2 == 0;
  if (v4 || a3 == 0)
    return 4294967292;
  else
    return TtDetNode::getTrkScheduleInfo(v3, a2, a3);
}

float64x2_t *ft::GenerateObservationMatches@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X2>, float64x2_t **a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float64x2_t *result;
  char *v11;
  __int128 *v12;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  int v41;
  float *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float v54;
  uint64_t v55;
  float64x2_t *v56;
  uint64_t v57;
  char *v58;
  float64x2_t v59;
  float64x2_t v60;
  float *v61;
  float v62;
  float v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t *v66;
  unint64_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float v73;
  float v74;

  v7 = *a1;
  v8 = a1[1];
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v9 = (v8 - v7) / 152;
  if (v8 == v7)
  {
    result = 0;
    v21 = *a2;
    v22 = a2[1];
    if (*a2 == v22)
      goto LABEL_14;
    goto LABEL_8;
  }
  if (v9 >= 0x1745D1745D1745ELL)
    std::vector<long long>::__throw_length_error[abi:ne180100]();
  result = (float64x2_t *)operator new(176 * v9);
  *a4 = result;
  a4[1] = result;
  v11 = (char *)&result[11 * v9];
  a4[2] = (float64x2_t *)v11;
  v12 = (__int128 *)MEMORY[0x24BDC0D40];
  __asm { FMOV            V1.2S, #-1.0 }
  v18 = (char *)result;
  do
  {
    *((_OWORD *)v18 + 2) = 0uLL;
    *((_OWORD *)v18 + 3) = 0uLL;
    *((_OWORD *)v18 + 4) = 0uLL;
    *((_OWORD *)v18 + 5) = 0uLL;
    *((_QWORD *)v18 + 20) = 0;
    *((_OWORD *)v18 + 8) = 0uLL;
    *((_OWORD *)v18 + 9) = 0uLL;
    *((_OWORD *)v18 + 6) = 0uLL;
    *((_OWORD *)v18 + 7) = 0uLL;
    *(_OWORD *)v18 = 0uLL;
    *((_OWORD *)v18 + 1) = 0uLL;
    v19 = *v12;
    *(_OWORD *)(v18 + 44) = *v12;
    v20 = *((_QWORD *)v12 + 2);
    *(_QWORD *)(v18 + 60) = v20;
    *(_QWORD *)(v18 + 84) = v20;
    *(_OWORD *)(v18 + 68) = v19;
    *((_QWORD *)v18 + 21) = _D1;
    v18 += 176;
  }
  while (v18 != v11);
  a4[1] = (float64x2_t *)v11;
  v21 = *a2;
  v22 = a2[1];
  if (*a2 != v22)
  {
LABEL_8:
    v23 = *a3;
    do
    {
      if (*(_BYTE *)(v21 + 16))
      {
        v24 = *(_QWORD *)(v23[2 * *(_QWORD *)(v21 + 8)] + 16);
        v25 = (char *)&result[11 * *(_QWORD *)v21];
        if (!v25[160])
          v25[160] = 1;
        *((_QWORD *)v25 + 19) = v24;
      }
      v21 += 48;
    }
    while (v21 != v22);
  }
LABEL_14:
  if (v8 != v7)
  {
    v26 = 0;
    v27 = v9 - 1;
    if (v9 <= 1)
      v28 = 1;
    else
      v28 = (v8 - v7) / 152;
    v29 = *a3;
    v30 = a3[1];
    do
    {
      v31 = (char *)&result[11 * v26];
      v32 = v7 + 152 * v26;
      v33 = *(_OWORD *)(v32 + 16);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v33;
      v34 = *(_OWORD *)(v32 + 32);
      v35 = *(_OWORD *)(v32 + 48);
      v36 = *(_OWORD *)(v32 + 80);
      *((_OWORD *)v31 + 4) = *(_OWORD *)(v32 + 64);
      *((_OWORD *)v31 + 5) = v36;
      *((_OWORD *)v31 + 2) = v34;
      *((_OWORD *)v31 + 3) = v35;
      v37 = *(_OWORD *)(v32 + 96);
      v38 = *(_OWORD *)(v32 + 112);
      v39 = *(_OWORD *)(v32 + 128);
      *((_QWORD *)v31 + 18) = *(_QWORD *)(v32 + 144);
      *((_OWORD *)v31 + 7) = v38;
      *((_OWORD *)v31 + 8) = v39;
      *((_OWORD *)v31 + 6) = v37;
      if (v29 != v30)
      {
        v40 = (char *)&result[11 * v26];
        v41 = v40[160];
        v42 = (float *)(v40 + 168);
        v43 = *((_QWORD *)v40 + 19);
        v44 = v29;
        do
        {
          v45 = *v44;
          if (!v41 || *(_QWORD *)(v45 + 16) != v43)
          {
            v46 = *(float64x2_t *)(v45 + 24);
            v47 = *((float64x2_t *)v31 + 1);
            v48 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v46, *(float64x2_t *)v31), (int8x16_t)v46, *(int8x16_t *)v31);
            v49 = vaddq_f64(*(float64x2_t *)v31, v47);
            v50 = *(float64x2_t *)(v45 + 40);
            v51 = vaddq_f64(v46, v50);
            v52 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v49, v51), (int8x16_t)v51, (int8x16_t)v49);
            v53 = (float64x2_t)vandq_s8((int8x16_t)vsubq_f64(v52, v48), (int8x16_t)vcgtq_f64(v52, v48));
            *(float *)v53.f64 = vmulq_laneq_f64(v53, v53, 1).f64[0];
            *(float *)v49.f64 = vaddvq_f64(vmulq_f64((float64x2_t)vzip1q_s64((int64x2_t)v47, (int64x2_t)v50), (float64x2_t)vzip2q_s64((int64x2_t)v47, (int64x2_t)v50)))- *(float *)v53.f64;
            v54 = *(float *)v53.f64 / *(float *)v49.f64;
            if (*(float *)v49.f64 < 0.00000011921)
              v54 = 0.0;
            if (v54 > *v42)
              *v42 = v54;
          }
          v44 += 2;
        }
        while (v44 != v30);
      }
      ++v26;
    }
    while (v26 != v28);
    v55 = 0;
    v56 = result + 12;
    do
    {
      v57 = v55 + 1;
      if (v55 + 1 < v9)
      {
        v58 = (char *)&result[11 * v55];
        v59 = *(float64x2_t *)v58;
        v60 = *((float64x2_t *)v58 + 1);
        v62 = *((float *)v58 + 43);
        v61 = (float *)(v58 + 172);
        v63 = v62;
        v64 = vmulq_laneq_f64(v60, v60, 1);
        v65 = vaddq_f64(v59, v60);
        v66 = v56;
        v67 = v27;
        do
        {
          v68 = v66[-1];
          v69 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v68, v59), (int8x16_t)v68, (int8x16_t)v59);
          v70 = vaddq_f64(v68, *v66);
          v71 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v65, v70), (int8x16_t)v70, (int8x16_t)v65);
          v72 = (float64x2_t)vandq_s8((int8x16_t)vsubq_f64(v71, v69), (int8x16_t)vcgtq_f64(v71, v69));
          *(float *)v72.f64 = vmulq_laneq_f64(v72, v72, 1).f64[0];
          v73 = vaddq_f64(vmulq_laneq_f64(*v66, *v66, 1), v64).f64[0] - *(float *)v72.f64;
          v74 = *(float *)v72.f64 / v73;
          if (v73 < 0.00000011921)
            v74 = 0.0;
          if (v63 < v74)
          {
            *v61 = v74;
            v63 = v74;
          }
          v66 += 11;
          --v67;
        }
        while (v67);
      }
      --v27;
      v56 += 11;
      v55 = v57;
    }
    while (v57 != v28);
  }
  return result;
}

void sub_20CCA4228(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double ttAssocObjectReset(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 96) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void ttAssocSetUpMunkresCost(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  unsigned int v26;
  int v27;
  _OWORD *v28;
  int v29;
  BOOL v30;
  int v31;
  _OWORD *v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  _OWORD *v40;
  __int128 v41;
  unint64_t v42;
  unsigned int v43;
  __int128 v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  _OWORD *v48;
  unsigned int v49;
  unsigned int v50;
  _OWORD *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v60;
  unint64_t v61;
  _OWORD v63[2];
  int v64;
  __int128 v65;
  __int128 v66;
  int v67;

  v9 = a2;
  v10 = bmMaximum(a2, a4);
  if ((int)v10 * (int)v10 > a6)
    ttAssocSetUpMunkresCost(v10, v11, v12);
  v13 = v10;
  if ((_DWORD)v10)
  {
    v14 = v9;
    v15 = v10;
    v60 = v10;
    v61 = v9;
    if (a4)
    {
      v16 = 0;
      v17 = 0;
      v57 = v10 - 1;
      v58 = a4;
      v53 = v10 - 1 - a4;
      v54 = v10 - a4;
      v55 = v10 & 0xFFFFFFF8;
      v18 = (v10 - a4) & 0xFFFFFFF8;
      v52 = v18 + a4;
      *(_QWORD *)&v19 = 0x4000000040000000;
      *((_QWORD *)&v19 + 1) = 0x4000000040000000;
      v56 = a4;
      while (1)
      {
        if (v16 >= v14)
        {
          v29 = 0;
          v30 = __CFADD__(v17, v57);
          if (v13 < 8 || v30)
          {
            v20 = v17;
          }
          else
          {
            v31 = v55;
            v20 = v17 + v55;
            do
            {
              v32 = (_OWORD *)(a5 + 4 * v17);
              *v32 = v19;
              v32[1] = v19;
              v17 += 8;
              v31 -= 8;
            }
            while (v31);
            v29 = v55;
            if (v13 == v55)
              goto LABEL_6;
          }
          v33 = v13 - v29;
          do
          {
            *(_DWORD *)(a5 + 4 * v20++) = 0x40000000;
            --v33;
          }
          while (v33);
        }
        else
        {
          v67 = 0;
          v65 = 0u;
          v66 = 0u;
          v21 = a1 + 104 * v16;
          ttDetRectFromObject(v21 + 16, (uint64_t)&v65);
          v22 = (_DWORD *)(v21 + 20);
          v23 = v56;
          v24 = a3;
          do
          {
            while (*v22 == *(_DWORD *)(v24 + 4))
            {
              v64 = 0;
              memset(v63, 0, sizeof(v63));
              ttDetRectFromObject(v24, (uint64_t)v63);
              ttDetRectOverlap((float *)v63, (float *)&v65);
              *(float *)(a5 + 4 * v17) = 1.0 - v25;
              v24 += 88;
              ++v17;
              if (!--v23)
                goto LABEL_12;
            }
            *(_DWORD *)(a5 + 4 * v17) = 1065353216;
            v24 += 88;
            ++v17;
            --v23;
          }
          while (v23);
LABEL_12:
          if (v13 <= v58)
          {
            v20 = v17;
            v15 = v60;
            v14 = v61;
            *(_QWORD *)&v19 = 0x4000000040000000;
            *((_QWORD *)&v19 + 1) = 0x4000000040000000;
          }
          else
          {
            v15 = v60;
            v14 = v61;
            *(_QWORD *)&v19 = 0x4000000040000000;
            *((_QWORD *)&v19 + 1) = 0x4000000040000000;
            if (v54 < 8)
            {
              v26 = v58;
            }
            else
            {
              v26 = v58;
              if (~v17 >= v53)
              {
                v27 = 0;
                v20 = v18 + v17;
                do
                {
                  v28 = (_OWORD *)(a5 + 4 * (v17 + v27));
                  *v28 = v19;
                  v28[1] = v19;
                  v27 += 8;
                }
                while (v18 != v27);
                v26 = v52;
                v17 += v18;
                if (v54 == v18)
                  goto LABEL_6;
              }
            }
            v20 = v17;
            do
            {
              *(_DWORD *)(a5 + 4 * v20) = 0x40000000;
              ++v26;
              ++v20;
            }
            while (v26 < v13);
          }
        }
LABEL_6:
        ++v16;
        v17 = v20;
        if (v16 == v15)
          return;
      }
    }
    v34 = v10 - 1;
    v35 = v10 & 0xFFFFFFF8;
    if (v10 < 8)
    {
      v36 = 0;
      v37 = 0;
      while (1)
      {
        if (v36 >= v14)
        {
          v38 = v13 + v37;
          *(_DWORD *)(a5 + 4 * v37) = 0x40000000;
          if (v13 != 1)
          {
            *(_DWORD *)(a5 + 4 * (v37 + 1)) = 0x40000000;
            if (v13 != 2)
            {
              *(_DWORD *)(a5 + 4 * (v37 + 2)) = 0x40000000;
              if (v13 != 3)
              {
                *(_DWORD *)(a5 + 4 * (v37 + 3)) = 0x40000000;
                if (v13 != 4)
                {
                  *(_DWORD *)(a5 + 4 * (v37 + 4)) = 0x40000000;
                  if (v13 != 5)
                  {
                    *(_DWORD *)(a5 + 4 * (v37 + 5)) = 0x40000000;
                    if (v13 != 6)
                      *(_DWORD *)(a5 + 4 * (v37 + 6)) = 0x40000000;
                  }
                }
              }
            }
          }
          goto LABEL_38;
        }
        v67 = 0;
        v65 = 0u;
        v66 = 0u;
        ttDetRectFromObject(a1 + 104 * v36 + 16, (uint64_t)&v65);
        v38 = v13 + v37;
        v39 = __CFADD__(v37, v34);
        if (v13 < 8 || v39)
          break;
        v40 = (_OWORD *)(a5 + 4 * v37);
        *(_QWORD *)&v41 = 0x4000000040000000;
        *((_QWORD *)&v41 + 1) = 0x4000000040000000;
        *v40 = v41;
        v40[1] = v41;
        v15 = v60;
        v14 = v9;
        if (v13 != v35)
        {
          v37 += v35;
          goto LABEL_55;
        }
LABEL_38:
        ++v36;
        v37 = v38;
        if (v36 == v15)
          return;
      }
      v15 = v60;
      v14 = v9;
      do
LABEL_55:
        *(_DWORD *)(a5 + 4 * v37++) = 0x40000000;
      while (v38 != v37);
      goto LABEL_38;
    }
    v42 = 0;
    v43 = 0;
    *(_QWORD *)&v44 = 0x4000000040000000;
    *((_QWORD *)&v44 + 1) = 0x4000000040000000;
    do
    {
      if (v42 >= v14)
      {
        v45 = v13 + v43;
        if (__CFADD__(v43, v34))
        {
          v49 = v43;
        }
        else
        {
          v49 = v43 + v35;
          v50 = v13 & 0xFFFFFFF8;
          do
          {
            v51 = (_OWORD *)(a5 + 4 * v43);
            *v51 = v44;
            v51[1] = v44;
            v43 += 8;
            v50 -= 8;
          }
          while (v50);
          if (v13 == v35)
            goto LABEL_58;
        }
        do
          *(_DWORD *)(a5 + 4 * v49++) = 0x40000000;
        while (v45 != v49);
      }
      else
      {
        v67 = 0;
        v65 = 0u;
        v66 = 0u;
        ttDetRectFromObject(a1 + 104 * v42 + 16, (uint64_t)&v65);
        v45 = v13 + v43;
        if (__CFADD__(v43, v34))
        {
          v46 = v43;
          v15 = v60;
          v14 = v9;
          *(_QWORD *)&v44 = 0x4000000040000000;
          *((_QWORD *)&v44 + 1) = 0x4000000040000000;
        }
        else
        {
          v46 = v43 + v35;
          v47 = v13 & 0xFFFFFFF8;
          *(_QWORD *)&v44 = 0x4000000040000000;
          *((_QWORD *)&v44 + 1) = 0x4000000040000000;
          do
          {
            v48 = (_OWORD *)(a5 + 4 * v43);
            *v48 = v44;
            v48[1] = v44;
            v43 += 8;
            v47 -= 8;
          }
          while (v47);
          v15 = v60;
          v14 = v9;
          if (v13 == v35)
            goto LABEL_58;
        }
        do
          *(_DWORD *)(a5 + 4 * v46++) = 0x40000000;
        while (v45 != v46);
      }
LABEL_58:
      ++v42;
      v43 = v45;
    }
    while (v42 != v15);
  }
}

uint64_t ttAssocCore(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, uint64_t a9, unsigned int *a10)
{
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  __int128 *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  float32x2_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v16 = a2;
  *a8 = 0;
  v18 = *a10;
  *a10 = 0;
  if ((_DWORD)a2)
  {
    if ((_DWORD)a2 == 1)
    {
      v19 = 0;
LABEL_7:
      v22 = (_DWORD *)(a1 + 104 * v19 + 100);
      v23 = a2 - v19;
      do
      {
        *(v22 - 22) = 0;
        *v22 = 1;
        v22 += 26;
        --v23;
      }
      while (v23);
      goto LABEL_9;
    }
    v19 = a2 & 0xFFFFFFFE;
    v20 = (_DWORD *)(a1 + 116);
    v21 = v19;
    do
    {
      *(v20 - 26) = 0;
      *v20 = 0;
      *(v20 - 4) = 1;
      v20[22] = 1;
      v20 += 52;
      v21 -= 2;
    }
    while (v21);
    if (v19 != a2)
      goto LABEL_7;
  }
LABEL_9:
  result = bmMaximum(a2, a4);
  if ((_DWORD)result)
  {
    v25 = 0;
    v26 = (__int128 *)(a3 + 16);
    do
    {
      v27 = *(_DWORD *)(a5 + 4 * v25);
      if (v25 >= a4)
      {
        if (v27 >= v16)
          ttAssocCore();
      }
      else
      {
        if (v27 >= v16)
        {
          v32 = *a10;
          if (v32 >= v18)
            ttAssocCore();
          *a10 = v32 + 1;
          *(_DWORD *)(a9 + 4 * v32) = v25;
          goto LABEL_12;
        }
        if ((float)(1.0 - *(float *)(a6 + 4 * (v25 + v27 * (_DWORD)result))) >= *(float *)a7)
        {
          *(_DWORD *)(a1 + 104 * v27 + 8) = 0;
          if (*(_BYTE *)(a7 + 32))
          {
            v33 = a1 + 104 * v27;
            v34 = *(_DWORD *)(v33 + 16);
            v35 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v26, 1.0 - *(float *)(a7 + 4)), *(float32x2_t *)(v33 + 32), *(float *)(a7 + 4));
            v36 = v26[1];
            v37 = v26[2];
            v38 = v26[3];
            *(_QWORD *)(v33 + 96) = *((_QWORD *)v26 + 8);
            v39 = *(v26 - 1);
            v40 = *v26;
            *(_OWORD *)(v33 + 64) = v37;
            *(_OWORD *)(v33 + 80) = v38;
            *(_OWORD *)(v33 + 32) = v40;
            *(_OWORD *)(v33 + 48) = v36;
            *(_OWORD *)(v33 + 16) = v39;
            *(_DWORD *)(v33 + 100) = 1;
            *(float32x2_t *)(v33 + 24) = vadd_f32(*(float32x2_t *)(v33 + 24), vmul_f32(vsub_f32(*(float32x2_t *)(v33 + 32), v35), (float32x2_t)0x3F0000003F000000));
            *(float32x2_t *)(v33 + 32) = v35;
            *(_DWORD *)(v33 + 16) = v34;
          }
          goto LABEL_12;
        }
        v28 = *a10;
        if (v28 >= v18)
          ttAssocCore();
        *a10 = v28 + 1;
        *(_DWORD *)(a9 + 4 * v28) = v25;
      }
      v29 = a1 + 104 * v27;
      v30 = *(_DWORD *)(v29 + 8) + 1;
      *(_DWORD *)(v29 + 8) = v30;
      if (v30 >= *(_DWORD *)(a7 + 4 * *(unsigned int *)(v29 + 20) + 20)
        || (*(_DWORD *)(a1 + 104 * v27 + 4) <= *(_DWORD *)(a7 + 12) ? (v31 = v30 >= *(_DWORD *)(a7 + 16)) : (v31 = 0),
            v31))
      {
        *(_DWORD *)(a1 + 104 * v27 + 12) = 2;
        ++*a8;
      }
      else
      {
        *(_DWORD *)(a1 + 104 * v27 + 12) = 1;
      }
LABEL_12:
      ++v25;
      v26 = (__int128 *)((char *)v26 + 88);
    }
    while (result != v25);
  }
  return result;
}

BOOL ttAssocObjectKillComp(_DWORD *a1, _DWORD *a2)
{
  return a1[1] < a2[1];
}

uint64_t ttAssocTrkDetGetTempBuffers(int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;

  v8 = bmMunkresTempBytes(a1);
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&v33);
  if (v34)
    bmMunkresGetTempBuffers(v9, v10, v11);
  v12 = 8 * a1 * a1;
  v13 = 83 * a1 + v12 + 12 * a1 + v8 + v33;
  result = (v13 + 21);
  v33 = v13 + 21;
  if (a2)
  {
    if (result > a3)
      ttAssocTrkDetGetTempBuffers();
    if (!a4)
      ttAssocTrkDetGetTempBuffers();
    v15 = (a2 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v16 = 4 * a1 - a2;
    v34 = v15 + v16;
    if (result < (int)v15 + v16)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)a4 = v15;
    v17 = (a2 + (v15 + v16) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v18 = v17 - a2 + v12;
    v34 = v18;
    if (result < v18)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 8) = v17;
    v19 = v18;
    v20 = v18 + v8;
    v34 = v20;
    if (result < v20)
      rtcv::simImageChMean(result, v10, v11);
    *(_DWORD *)(a4 + 24) = v8;
    *(_QWORD *)(a4 + 16) = a2 + v19;
    v21 = (a2 + v20 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = v21 + v16;
    if (result < (int)v21 + v16)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 32) = v21;
    *(_DWORD *)(a4 + 40) = a1 & 0x3FFFFFFF;
    v22 = (a2 + (v21 + v16) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v23 = v22 - a2 + 8 * a1;
    v34 = v23;
    if (result < v23)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 48) = v22;
    v24 = (a2 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v34 = v24 + v16;
    if (result < (int)v24 + v16)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 56) = v24;
    v25 = a2 + (v24 + v16);
    v26 = a1 - a2;
    v34 = a1 - a2 + v25;
    if (result < v34)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 64) = v25;
    v27 = a2 + (v26 + v25);
    v34 = v26 + v27;
    if (result < v26 + (int)v27)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 72) = v27;
    v28 = (a2 + (v26 + v27) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v29 = 36 * a1 - a2;
    v34 = v28 + v29;
    if (result < (int)v28 + v29)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 80) = v28;
    v30 = (a2 + (v28 + v29) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v31 = v30 + v29;
    v34 = v31;
    if (result < v31)
      rtcv::simImageChMean(result, v10, v11);
    *(_QWORD *)(a4 + 88) = v30;
    v32 = a2 + v31;
    v34 = v26 + v32;
    if (result < v26 + (int)v32)
      rtcv::simImageChMean(result, v10, v11);
    *(_DWORD *)(a4 + 104) = a1;
    *(_QWORD *)(a4 + 96) = v32;
  }
  return result;
}

uint64_t ttAssocTrkDetTempBytes(int a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v7[2];

  v2 = bmMunkresTempBytes(a1);
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)v7);
  if (v7[1])
    bmMunkresGetTempBuffers(v3, v4, v5);
  return (9 * a1 + (8 * a1 + 86) * a1 + v2 + v7[0] + 21);
}

uint64_t ttDetTermClassIndex(int a1)
{
  unsigned int v1;

  if (a1 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (a1)
    return v1;
  else
    return 0;
}

uint64_t ttAssocObjectRemoveKilled(__int128 *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (a3 < 1)
    ttAssocObjectRemoveKilled();
  if (!a2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = a1;
  do
  {
    if (*((_DWORD *)v5 + 3) < a3)
    {
      if (v3 != v4)
      {
        v6 = (uint64_t)a1 + 104 * v4;
        v7 = *v5;
        v8 = v5[2];
        *(_OWORD *)(v6 + 16) = v5[1];
        *(_OWORD *)(v6 + 32) = v8;
        *(_OWORD *)v6 = v7;
        v9 = v5[3];
        v10 = v5[4];
        v11 = v5[5];
        *(_QWORD *)(v6 + 96) = *((_QWORD *)v5 + 12);
        *(_OWORD *)(v6 + 64) = v10;
        *(_OWORD *)(v6 + 80) = v11;
        *(_OWORD *)(v6 + 48) = v9;
      }
      v4 = (v4 + 1);
    }
    ++v3;
    v5 = (__int128 *)((char *)v5 + 104);
  }
  while (a2 != v3);
  return v4;
}

uint64_t ttAssocTrkDet(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, _DWORD *a7, _DWORD *a8, _DWORD *a9, void *a10, unsigned int a11)
{
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int TempBuffers;
  unsigned int v23;
  char *v24;
  unsigned int *v25;
  uint64_t v26;
  unsigned int v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  _DWORD *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  float *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  __int128 *v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  char *v70;
  __int128 v71;
  __int128 v72;
  BOOL v73;
  uint64_t v74;
  int *v75;
  _QWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int *v82;
  int *v83;
  uint64_t v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  _DWORD *v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  _DWORD *v97;
  int v98;
  unsigned int v99;
  unsigned int *v100;
  unint64_t v101;
  uint64_t v102;
  _DWORD *v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  int *v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int *v132;
  uint64_t v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned __int8 *v137;
  unsigned int *v138;
  uint64_t v139;
  unsigned int *v140;
  _DWORD *v141;
  _DWORD *v142;
  unsigned int v143;
  _OWORD v145[2];
  int v146;
  __int128 v147;
  __int128 v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  int v157[4];
  void *v158[2];

  if (a2 > a3)
    ttAssocTrkDet();
  if (a5 > a3)
    ttAssocTrkDet();
  v18 = bmMunkresTempBytes(a3);
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)&v152);
  if (DWORD1(v152))
    bmMunkresGetTempBuffers(v19, v20, v21);
  if (9 * a3 + (8 * a3 + 86) * a3 + v18 + (_DWORD)v152 + 21 > a11)
    ttAssocTrkDet();
  if (!a4 && a5)
    ttAssocTrkDet();
  *(_OWORD *)v157 = 0u;
  *(_OWORD *)v158 = 0u;
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  v152 = 0u;
  TempBuffers = ttAssocTrkDetGetTempBuffers(a3, (uint64_t)a10, a11, (uint64_t)&v152);
  bzero(a10, TempBuffers);
  v23 = a2;
  if (!a2)
  {
    result = 0;
    if (a5)
    {
      v36 = a5;
      do
      {
        if (*(_DWORD *)(a4 + 24) != 1)
        {
          v37 = a1 + 104 * result;
          *(_QWORD *)(v37 + 96) = 0;
          *(_OWORD *)(v37 + 64) = 0uLL;
          *(_OWORD *)(v37 + 80) = 0uLL;
          *(_OWORD *)(v37 + 32) = 0uLL;
          *(_OWORD *)(v37 + 48) = 0uLL;
          *(_OWORD *)v37 = 0uLL;
          *(_OWORD *)(v37 + 16) = 0uLL;
          v38 = *(_OWORD *)(a4 + 16);
          *(_OWORD *)(v37 + 16) = *(_OWORD *)a4;
          *(_OWORD *)(v37 + 32) = v38;
          v39 = *(_OWORD *)(a4 + 32);
          v40 = *(_OWORD *)(a4 + 48);
          v41 = *(_OWORD *)(a4 + 64);
          *(_QWORD *)(v37 + 96) = *(_QWORD *)(a4 + 80);
          *(_OWORD *)(v37 + 64) = v40;
          *(_OWORD *)(v37 + 80) = v41;
          *(_OWORD *)(v37 + 48) = v39;
          *(_DWORD *)v37 = *a9;
          v42 = (*a9)++;
          *(_DWORD *)(v37 + 16) = v42;
          ++*(_DWORD *)(v37 + 4);
          result = (result + 1);
        }
        a4 += 88;
        --v36;
      }
      while (v36);
    }
    *a7 = result;
    *a8 = 0;
    return result;
  }
  v143 = a3;
  v141 = a7;
  v142 = a8;
  v24 = (char *)*((_QWORD *)&v152 + 1);
  v25 = (unsigned int *)v152;
  v26 = v155;
  v151 = 0;
  v140 = (unsigned int *)v155;
  if (a5)
  {
    v135 = DWORD2(v154);
    v136 = DWORD2(v153);
    v137 = (unsigned __int8 *)v153;
    v138 = (unsigned int *)v154;
    v27 = bmMaximum(a2, a5);
    ttAssocSetUpMunkresCost(a1, a2, a4, a5, (uint64_t)v24, v27 * v27);
    if (v27 * v27 > v143 * v143)
      ttAssocTrkDet();
    v28 = 4 * v27 * v27;
    v29 = (uint64_t)&v24[v28];
    memcpy(&v24[v28], v24, v28);
    bmMunkres((float *)v24, v27, v137, v136, v138, v135, 0);
    v150 = a5;
    ttAssocCore(a1, a2, a4, a5, (uint64_t)v138, v29, a6, &v151, (uint64_t)v25, &v150);
    v30 = v150;
    if (v150)
    {
      v31 = 0;
      v32 = 0;
      v33 = a2;
      do
      {
        v34 = v25[v31];
        if (*(_DWORD *)(a4 + 88 * v34 + 24) >= 2u)
        {
          if (v31 != v32)
            v25[v32] = v34;
          ++v32;
        }
        ++v31;
      }
      while (v30 != v31);
    }
    else
    {
      v32 = 0;
      v33 = a2;
    }
    v55 = 0;
    v56 = *(float **)v157;
    if (v33 <= 1)
      v57 = 1;
    else
      v57 = v33;
    v58 = a1 + 16;
    v59 = 36 * v57;
    do
    {
      ttDetRectFromObject(v58, (uint64_t)&v147);
      v60 = &v56[v55 / 4];
      v61 = v147;
      v62 = v148;
      *((_DWORD *)v60 + 8) = v149;
      *(_OWORD *)v60 = v61;
      *((_OWORD *)v60 + 1) = v62;
      v55 += 36;
      v58 += 104;
    }
    while (v59 != v55);
    if (v32)
    {
      v63 = 0;
      v64 = 0;
      do
      {
        v65 = v25[v63];
        v149 = 0;
        v147 = 0u;
        v148 = 0u;
        ttDetRectFromObject(a4 + 88 * v65, (uint64_t)&v147);
        v145[0] = v147;
        v145[1] = v148;
        v146 = v149;
        if (!ttCheckOverlapBox(v56, a2, (float *)v145, *(float *)(a6 + 8)))
        {
          if (v63 != v64)
            v25[v64] = v25[v63];
          ++v64;
        }
        ++v63;
      }
      while (v32 != v63);
      v66 = *(__int128 **)&v157[2];
      if (v64)
      {
        v139 = a1;
        v67 = 0;
        v68 = v25;
        do
        {
          v69 = *v68++;
          ttDetRectFromObject(a4 + 88 * v69, (uint64_t)&v147);
          v70 = (char *)v66 + v67;
          v71 = v147;
          v72 = v148;
          *((_DWORD *)v70 + 8) = v149;
          *(_OWORD *)v70 = v71;
          *((_OWORD *)v70 + 1) = v72;
          *((_DWORD *)v70 + 5) = v69;
          v67 += 36;
        }
        while (36 * v64 != v67);
        a1 = v139;
      }
    }
    else
    {
      v64 = 0;
      v66 = *(__int128 **)&v157[2];
    }
    v53 = ttRemoveOverlapBoxes(v66, v64, (unsigned __int8 *)v158[0], v158[1], *(float *)(a6 + 8));
    v47 = v143;
    v23 = a2;
    v26 = (uint64_t)v140;
    if (v53)
    {
      if (v53 < 0xA
        || (v25 < (unsigned int *)v66 + 9 * v53 - 3 ? (v73 = (char *)v66 + 20 >= (char *)&v25[v53]) : (v73 = 1), !v73))
      {
        v74 = 0;
LABEL_71:
        v82 = &v25[v74];
        v83 = (int *)v66 + 9 * v74 + 5;
        v84 = v53 - v74;
        do
        {
          v85 = *v83;
          v83 += 9;
          *v82++ = v85;
          --v84;
        }
        while (v84);
        goto LABEL_73;
      }
      v74 = v53 & 0xFFFFFFFC;
      v75 = (int *)v66 + 23;
      v76 = v25 + 2;
      v77 = v74;
      do
      {
        v78 = v75 + 9;
        LODWORD(v79) = *(v75 - 18);
        HIDWORD(v79) = *(v75 - 9);
        v80 = *v75;
        v75 += 36;
        LODWORD(v81) = v80;
        HIDWORD(v81) = *v78;
        *(v76 - 1) = v79;
        *v76 = v81;
        v76 += 2;
        v77 -= 4;
      }
      while (v77);
      if (v74 != v53)
        goto LABEL_71;
    }
LABEL_73:
    v43 = v151;
    v86 = a2 - v151 + v53;
    v54 = v86 - v143;
    if (v86 > v143)
      goto LABEL_74;
LABEL_94:
    v99 = v43;
    goto LABEL_95;
  }
  v43 = 0;
  v44 = *(_DWORD *)(a6 + 12);
  v45 = (_DWORD *)a1;
  v46 = a2;
  v47 = v143;
  do
  {
    while (1)
    {
      v45[25] = 1;
      v48 = v45[2];
      if (a4)
        v45[2] = ++v48;
      v49 = v45[5];
      v50 = v49 == 1 ? 1 : 2;
      v51 = v49 ? v50 : 0;
      if (v48 < *(_DWORD *)(a6 + 4 * v51 + 20) && (v45[1] > v44 || v48 < *(_DWORD *)(a6 + 16)))
        break;
      v45[3] = 2;
      ++v43;
      v45 += 26;
      if (!--v46)
        goto LABEL_39;
    }
    v45[3] = 1;
    v45 += 26;
    --v46;
  }
  while (v46);
LABEL_39:
  v53 = 0;
  v54 = a2 - v43 - v143;
  if (a2 - v43 <= v143)
    goto LABEL_94;
LABEL_74:
  v87 = 0;
  v88 = 0;
  if (v23 <= 1)
    v89 = 1;
  else
    v89 = v23;
  v90 = (_DWORD *)(a1 + 12);
  v91 = (_DWORD *)(a1 + 12);
  do
  {
    v92 = *v91;
    v91 += 26;
    if (v92 == 1)
    {
      v93 = (_DWORD *)(v26 + 8 * v88);
      *v93 = v87;
      v93[1] = *(v90 - 2);
      ++v88;
    }
    ++v87;
    v90 = v91;
  }
  while (v89 != v87);
  if (v88 < v54)
    ttAssocTrkDet();
  v94 = v47;
  bmHeapsort(v26, v88, 8uLL, (int (*)(uint64_t, uint64_t))ttAssocObjectKillComp);
  if (!v88)
  {
    v23 = a2;
    v47 = v94;
    if (v53 + a2 - v43 > v94)
      goto LABEL_128;
    goto LABEL_96;
  }
  v95 = v54 + v43;
  v23 = a2;
  v47 = v94;
  if (v43 >= v54 + v43)
    goto LABEL_94;
  v96 = a1 + 104 * *v140;
  v98 = *(_DWORD *)(v96 + 12);
  v97 = (_DWORD *)(v96 + 12);
  if (v98 != 1)
LABEL_130:
    ttAssocTrkDet();
  *v97 = 2;
  v99 = v43 + 1;
  if (v88 < 2 || v99 >= v95)
  {
LABEL_95:
    if (v53 + v23 - v99 > v47)
      goto LABEL_128;
    goto LABEL_96;
  }
  v100 = v140 + 2;
  v101 = 2;
  do
  {
    if (*(_DWORD *)(a1 + 104 * *v100 + 4) > *(_DWORD *)(a1 + 104 * *(v100 - 2) + 4))
      ttAssocTrkDet();
    v102 = a1 + 104 * *v100;
    v104 = *(_DWORD *)(v102 + 12);
    v103 = (_DWORD *)(v102 + 12);
    if (v104 != 1)
      goto LABEL_130;
    *v103 = 2;
    v105 = v101 + 1;
    if (v101 >= v88)
      break;
    v100 += 2;
    v106 = v43 + v101++;
  }
  while (v106 < v95);
  if (v53 + a2 - (v43 + v105 - 1) > v94)
LABEL_128:
    ttAssocTrkDet();
LABEL_96:
  v107 = 0;
  v108 = 0;
  v109 = a1;
  do
  {
    if (*(int *)(v109 + 12) <= 1)
    {
      if (v107 != v108)
      {
        v110 = a1 + 104 * v108;
        v111 = *(_OWORD *)v109;
        v112 = *(_OWORD *)(v109 + 32);
        *(_OWORD *)(v110 + 16) = *(_OWORD *)(v109 + 16);
        *(_OWORD *)(v110 + 32) = v112;
        *(_OWORD *)v110 = v111;
        v113 = *(_OWORD *)(v109 + 48);
        v114 = *(_OWORD *)(v109 + 64);
        v115 = *(_OWORD *)(v109 + 80);
        *(_QWORD *)(v110 + 96) = *(_QWORD *)(v109 + 96);
        *(_OWORD *)(v110 + 64) = v114;
        *(_OWORD *)(v110 + 80) = v115;
        *(_OWORD *)(v110 + 48) = v113;
      }
      v108 = (v108 + 1);
    }
    v109 += 104;
    ++v107;
  }
  while (v23 != v107);
  result = v108;
  if (v53)
  {
    LODWORD(v116) = v47 - v108;
    if (v47 >= v108)
      v116 = v116;
    else
      v116 = 0;
    v117 = v53;
    v118 = a1 + 104 * v108 + 16;
    LODWORD(result) = v108;
    do
    {
      if (!v116)
        ttAssocTrkDet();
      v119 = *v25++;
      *(_QWORD *)(v118 + 80) = 0;
      *(_OWORD *)(v118 + 48) = 0uLL;
      *(_OWORD *)(v118 + 64) = 0uLL;
      *(_OWORD *)(v118 + 16) = 0uLL;
      *(_OWORD *)(v118 + 32) = 0uLL;
      *(_OWORD *)(v118 - 16) = 0uLL;
      *(_OWORD *)v118 = 0uLL;
      v120 = a4 + 88 * v119;
      v121 = *(_OWORD *)(v120 + 16);
      *(_OWORD *)v118 = *(_OWORD *)v120;
      *(_OWORD *)(v118 + 16) = v121;
      v122 = *(_OWORD *)(v120 + 32);
      v123 = *(_OWORD *)(v120 + 48);
      v124 = *(_OWORD *)(v120 + 64);
      *(_QWORD *)(v118 + 80) = *(_QWORD *)(v120 + 80);
      *(_OWORD *)(v118 + 48) = v123;
      *(_OWORD *)(v118 + 64) = v124;
      *(_OWORD *)(v118 + 32) = v122;
      *(_DWORD *)(v118 - 16) = *a9;
      LODWORD(v120) = (*a9)++;
      *(_DWORD *)v118 = v120;
      v118 += 104;
      result = (result + 1);
      --v116;
      --v117;
    }
    while (v117);
  }
  *v141 = result - v108;
  *v142 = v108;
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      v125 = 0;
LABEL_121:
      v132 = (int *)(a1 + 104 * v125 + 4);
      v133 = result - v125;
      do
      {
        if (*v132 == -1)
          v134 = -1;
        else
          v134 = *v132 + 1;
        *v132 = v134;
        v132 += 26;
        --v133;
      }
      while (v133);
      return result;
    }
    v125 = result & 0xFFFFFFFE;
    v126 = (int *)(a1 + 108);
    v127 = v125;
    do
    {
      v128 = *(v126 - 26);
      v129 = *v126;
      if (v128 == -1)
        v130 = -1;
      else
        v130 = v128 + 1;
      if (v129 == -1)
        v131 = -1;
      else
        v131 = v129 + 1;
      *(v126 - 26) = v130;
      *v126 = v131;
      v126 += 52;
      v127 -= 2;
    }
    while (v127);
    if (v125 != result)
      goto LABEL_121;
  }
  return result;
}

uint64_t TtAssociateTrackerBboxes(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void *v25;
  int v26;
  int v28;
  int v29;
  _OWORD v30[2];
  int v31;
  _BYTE __dst[352];
  __int128 v33;
  _BYTE v34[132];

  *(_QWORD *)&v34[124] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a2 + 180);
  if (a1[1])
  {
    if (v6)
      memcpy(__dst, (const void *)(a2 + 184), 88 * v6);
  }
  else
  {
    if (v6)
    {
      v7 = 0;
      v8 = a2 + 184;
      v9 = &v33;
      do
      {
        ttDetRectFromObject(v8, (uint64_t)v30);
        v10 = v30[1];
        *v9 = v30[0];
        v9[1] = v10;
        *((_DWORD *)v9 + 8) = v31;
        *((_DWORD *)v9 + 5) = v7++;
        v11 = *(unsigned int *)(a2 + 180);
        v9 = (__int128 *)((char *)v9 + 36);
        v8 += 88;
      }
      while (v7 < v11);
    }
    else
    {
      LODWORD(v11) = 0;
    }
    v12 = ttRemoveOverlapBoxes(&v33, v11, (unsigned __int8 *)v30, 4u, 0.8);
    v6 = v12;
    if (v12)
    {
      v13 = v12;
      v14 = (unsigned int *)v34;
      v15 = __dst;
      do
      {
        v16 = *v14;
        v14 += 9;
        v17 = a2 + 88 * v16;
        v18 = *(_OWORD *)(v17 + 232);
        *((_OWORD *)v15 + 2) = *(_OWORD *)(v17 + 216);
        *((_OWORD *)v15 + 3) = v18;
        *((_OWORD *)v15 + 4) = *(_OWORD *)(v17 + 248);
        *((_QWORD *)v15 + 10) = *(_QWORD *)(v17 + 264);
        v19 = *(_OWORD *)(v17 + 200);
        *(_OWORD *)v15 = *(_OWORD *)(v17 + 184);
        *((_OWORD *)v15 + 1) = v19;
        v15 += 88;
        --v13;
      }
      while (v13);
    }
  }
  v20 = bmMunkresTempBytes(4);
  BmMixedBufSize::BmMixedBufSize((BmMixedBufSize *)v30);
  if (DWORD1(v30[0]))
    bmMunkresGetTempBuffers(v21, v22, v23);
  v24 = (v20 + LODWORD(v30[0]) + 529);
  if (v20 + LODWORD(v30[0]) == -529)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v25 = operator new((v20 + LODWORD(v30[0]) + 529));
    v26 = (_DWORD)v25 + v24;
    bzero(v25, v24);
  }
  a1[1] = ttAssocTrkDet((uint64_t)(a1 + 2), a1[1], 4u, (uint64_t)__dst, v6, a3, &v29, &v28, a1, v25, v26 - (int)v25);
  if (v25)
    operator delete(v25);
  return 0;
}

void sub_20CCA5794(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TtUpdateAssocResult(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int *v4;
  int *v5;
  int v6;
  int *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v1 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = (int *)(a1 + 20);
    v5 = (int *)(a1 + 20);
    do
    {
      v6 = *v5;
      v5 += 26;
      if (v6 <= 1)
      {
        if (v2 != v3)
        {
          v7 = v4 - 3;
          v8 = a1 + 8 + 104 * v3;
          v9 = *(_OWORD *)v7;
          v10 = *((_OWORD *)v7 + 2);
          *(_OWORD *)(v8 + 16) = *((_OWORD *)v7 + 1);
          *(_OWORD *)(v8 + 32) = v10;
          *(_OWORD *)v8 = v9;
          v11 = *((_OWORD *)v7 + 3);
          v12 = *((_OWORD *)v7 + 4);
          v13 = *((_OWORD *)v7 + 5);
          *(_QWORD *)(v8 + 96) = *((_QWORD *)v7 + 12);
          *(_OWORD *)(v8 + 64) = v12;
          *(_OWORD *)(v8 + 80) = v13;
          *(_OWORD *)(v8 + 48) = v11;
        }
        ++v3;
      }
      ++v2;
      v4 = v5;
    }
    while (v1 != v2);
  }
  else
  {
    v3 = 0;
  }
  *(_DWORD *)(a1 + 4) = v3;
  return 0;
}

float ttAssocObjectRectIntersectOverSmaller(float *a1, float *a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v13;
  float v14;
  float v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = *a1 + v5;
  v8 = v4 + v6;
  v9 = *a2;
  v10 = a2[1];
  v11 = 0.0;
  if (v7 > *a2 && v8 > v10)
  {
    v13 = a2[2];
    v14 = a2[3];
    v15 = v10 + v14;
    if ((float)(v9 + v13) > v3 && v15 > v4)
      return (float)(fmaxf(fminf(v7, v9 + v13) - fmaxf(v3, v9), 0.0) * fmaxf(fminf(v8, v15) - fmaxf(v4, v10), 0.0))
           / fmaxf(a3, fminf(v5 * v6, v13 * v14));
  }
  return v11;
}

uint64_t TtAssocObjectRemoveOldOverlapObjects(uint64_t a1, float a2)
{
  unint64_t v2;
  unsigned int v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  __int128 *v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float v29;
  float v30;
  unsigned int v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v2 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v2)
  {
    bmHeapsort(a1 + 8, v2, 0x68uLL, (int (*)(uint64_t, uint64_t))ttAssocObjectAgeComp);
    v5 = *(_DWORD *)(a1 + 4);
    if (v5)
    {
      v6 = 0;
      v7 = (__int128 *)(a1 + 112);
      v8 = 1;
      do
      {
        v9 = v6 + 1;
        v10 = v5;
        if (v6 + 1 >= v5)
        {
          v5 = v6 + 1;
        }
        else
        {
          v11 = a1 + 104 * v6;
          v12 = (_DWORD *)(v11 + 12);
          v13 = (_DWORD *)(v11 + 28);
          v14 = (float *)(v11 + 32);
          v15 = (float *)(v11 + 40);
          v16 = (float *)(v11 + 36);
          v17 = (float *)(v11 + 44);
          v18 = v7;
          v19 = v8;
          v5 = v9;
          do
          {
            if (*v12 > *((_DWORD *)v18 + 1))
              TtAssocObjectRemoveOldOverlapObjects_cold_1();
            if (*v13 != *((_DWORD *)v18 + 5))
              goto LABEL_23;
            v20 = *v14;
            v21 = *v14 + *v15;
            v22 = *v16;
            v23 = *v16 + *v17;
            v24 = *((float *)v18 + 6);
            v25 = *((float *)v18 + 7);
            v26 = 0.0;
            if (v21 > v24 && v23 > v25)
            {
              v28 = *((float *)v18 + 8);
              v29 = *((float *)v18 + 9);
              v30 = v25 + v29;
              if ((float)(v24 + v28) > v20 && v30 > v22)
                v26 = (float)(fmaxf(fminf(v21, v24 + v28) - fmaxf(v20, v24), 0.0)
                            * fmaxf(fminf(v23, v30) - fmaxf(v22, v25), 0.0))
                    / fmaxf(fminf(*v15 * *v17, v28 * v29), 0.00001);
            }
            if (v26 <= a2)
            {
LABEL_23:
              v32 = v5;
              if (v19 < v5)
                TtAssocObjectRemoveOldOverlapObjects_cold_2();
              ++v5;
              v33 = a1 + 104 * v32;
              v34 = *v18;
              v35 = v18[1];
              *(_OWORD *)(v33 + 40) = v18[2];
              *(_OWORD *)(v33 + 24) = v35;
              *(_OWORD *)(v33 + 8) = v34;
              v36 = v18[3];
              v37 = v18[4];
              v38 = v18[5];
              *(_QWORD *)(v33 + 104) = *((_QWORD *)v18 + 12);
              *(_OWORD *)(v33 + 88) = v38;
              *(_OWORD *)(v33 + 72) = v37;
              *(_OWORD *)(v33 + 56) = v36;
            }
            ++v19;
            v18 = (__int128 *)((char *)v18 + 104);
          }
          while (v10 != (_DWORD)v19);
        }
        ++v8;
        v7 = (__int128 *)((char *)v7 + 104);
        v6 = v9;
      }
      while (v9 < v5);
    }
    *(_DWORD *)(a1 + 4) = v5;
  }
  return 0;
}

BOOL ttAssocObjectAgeComp(_DWORD *a1, _DWORD *a2)
{
  return a1[1] > a2[1];
}

uint64_t getInitialPos(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;
  unsigned int v20;
  float v21;
  unint64_t v22;
  unint64_t v23;
  float v24;
  float v25;
  int v26;
  float v27;

  v4 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v4 || (v5 = *(unsigned int *)(a1 + 12), !(_DWORD)v5))
  {
    *a4 = 1;
    return 0;
  }
  v6 = 0;
  v7 = 0;
  LOBYTE(v8) = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = *(float *)(a2 + 8);
  v13 = *(float *)(a2 + 12);
  do
  {
    v14 = *(_QWORD *)a1 + v6;
    v15 = 0;
    if (v13 <= (float)v7)
    {
      if ((float)(v13 + *(float *)(a2 + 20)) <= (float)v7)
      {
        do
        {
          v8 = v8;
          if (*(unsigned __int8 *)(v14 + v15) > v8)
          {
            v11 = v7;
            v9 = v15;
            v8 = *(unsigned __int8 *)(v14 + v15);
          }
          ++v15;
        }
        while (v5 != v15);
      }
      else
      {
        do
        {
          v16 = *(unsigned __int8 *)(v14 + v15);
          v8 = v8;
          if (v16 > v8)
          {
            v11 = v7;
            v9 = v15;
            v8 = *(unsigned __int8 *)(v14 + v15);
          }
          v17 = (float)v15;
          if (v16 <= v10)
            LOBYTE(v16) = v10;
          if ((float)(v12 + *(float *)(a2 + 16)) > v17 && v12 <= v17)
            v10 = v16;
          ++v15;
        }
        while (v5 != v15);
      }
    }
    else
    {
      do
      {
        v8 = v8;
        if (*(unsigned __int8 *)(v14 + v15) > v8)
        {
          v11 = v7;
          v9 = v15;
          v8 = *(unsigned __int8 *)(v14 + v15);
        }
        ++v15;
      }
      while (v5 != v15);
    }
    ++v7;
    v6 += *(_DWORD *)(a1 + 16);
  }
  while (v7 != v4);
  *a4 = v8 == 0;
  if (!v8)
    return 0;
  if (*(_DWORD *)(a2 + 24) && v8 >> 1 < v10)
  {
    v20 = *(_DWORD *)(a1 + 12);
    v21 = (float)v20;
    if ((float)(*(float *)(a2 + 8) + *(float *)(a2 + 16)) <= (float)v20
      && (float)(*(float *)(a2 + 12) + *(float *)(a2 + 20)) <= (float)v4)
    {
      *(_OWORD *)a3 = *(_OWORD *)(a2 + 8);
      return 0;
    }
  }
  else
  {
    v20 = *(_DWORD *)(a1 + 12);
    v21 = (float)v20;
  }
  v22 = (v20 + 10) / 0x14uLL;
  v23 = (v4 + 10) / 0x14uLL;
  v24 = fmax((double)(uint64_t)(v9 - v22), 0.0);
  v25 = fmax((double)(uint64_t)(v11 - v23), 0.0);
  *(float *)a3 = v24;
  *(float *)(a3 + 4) = v25;
  v26 = (2 * v22) | 1;
  v27 = (float)(int)((2 * v23) | 1);
  *(float *)(a3 + 8) = (float)v26;
  *(float *)(a3 + 12) = v27;
  if ((float)((float)v26 + v24) > v21)
    *(float *)(a3 + 8) = v21 - v24;
  if ((float)(v27 + v25) <= (float)v4)
    return 0;
  *(float *)(a3 + 12) = (float)v4 - v25;
  return 0;
}

uint64_t computeIntegralImage(uint64_t a1, uint64_t a2, double a3, float a4)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;

  v4 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a2 + 8) != v4 + 1)
    return 4294967292;
  v5 = *(unsigned int *)(a2 + 12);
  v6 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v5 != (_DWORD)v6 + 1)
    return 4294967292;
  if (v4 && (_DWORD)v6)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      v9 = 0;
      v10 = v7 + 1;
      v11 = *(_DWORD *)(a2 + 16);
      v12 = *(_QWORD *)a1 + *(_DWORD *)(a1 + 16) * v7;
      v13 = *(_QWORD *)a2 + 4;
      v14 = v13 + v11 * v7;
      v15 = v13 + (v11 * v8);
      v16 = 0.0;
      do
      {
        if (*(_DWORD *)(a1 + 8) <= v7)
          computeIntegralImage();
        v17 = v9 + 1;
        if (v9 + 1 >= v5 || (v18 = *(_DWORD *)(a2 + 8), v18 <= v7))
          acAttrReduceSmile(a1, a2, v15);
        if (v18 <= v10)
          acAttrReduceSmile(a1, a2, v15);
        LOBYTE(a4) = *(_BYTE *)(v12 + v9);
        v19 = 4 * v9;
        v16 = (float)((float)LODWORD(a4) / 255.0) * (float)((float)LODWORD(a4) / 255.0) + v16;
        a4 = *(float *)(v14 + v19) + v16;
        *(float *)(v15 + v19) = a4;
        v9 = v17;
      }
      while (v6 != v17);
      ++v8;
      ++v7;
    }
    while (v10 != v4);
  }
  return 0;
}

uint64_t convertSaliencyMapToBoundingBoxes(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, uint64_t a5, int a6, float a7, float a8)
{
  uint64_t v9;
  unsigned int v16;
  unsigned int v17;
  int v18;
  double v19;
  float v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  float v26;
  int v27;
  float v28;
  double v29;
  double v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  unsigned int v35;
  float v37;
  uint64_t v38;
  float v39;
  unsigned int v40;
  unsigned int v42;
  unsigned int v43;
  char *v44;
  float v45;
  char *v46;
  uint64_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  _BOOL8 v56;
  _BOOL8 v57;
  float v58;
  double v59;
  float v60;
  float v61;
  unint64_t v62;
  uint64_t v63;
  double v64;
  _BOOL8 v65;
  uint64_t v66;
  BOOL v67;
  __int128 v68;
  char *v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;

  if (!a3)
    return 4294967292;
  v9 = 4 * *(unsigned __int16 *)(a2 + 5986) + 4;
  if (v9 + v9 * (unint64_t)*(unsigned __int16 *)(a2 + 5984) > a4 || !*(_BYTE *)(a2 + 5990))
    return 4294967292;
  bzero(a3, a4);
  v69 = a3;
  v16 = *(unsigned __int16 *)(a2 + 5986);
  v17 = *(unsigned __int16 *)(a2 + 5984);
  v70 = v16 + 1;
  v71 = v17 + 1;
  v18 = 4 * v17 + 4;
  v72 = v18;
  v73 = 6;
  v67 = 0;
  getInitialPos(a1, a5, (uint64_t)&v68, &v67);
  result = 0;
  if (!v67)
  {
    result = computeIntegralImage(a1, (uint64_t)&v69, v19, v20);
    if (!(_DWORD)result)
    {
      v26 = *(float *)&v68;
      if (a6)
      {
        v27 = 0;
        v28 = -a7;
        LODWORD(v25) = *(_DWORD *)(a1 + 8);
        LODWORD(v24) = *(_DWORD *)(a1 + 12);
        v29 = (double)v24;
        v30 = (double)v25;
        v32 = *((float *)&v68 + 2);
        v31 = *((float *)&v68 + 1);
        v33 = *((float *)&v68 + 3);
        do
        {
          v34 = v26;
          v35 = v31;
          if (v17 < v34 || v16 < v35)
            acAttrReduceSmile(result, v22, v23);
          v37 = v26 + v32;
          v38 = (float)(v26 + v32);
          v39 = v31 + v33;
          v40 = (float)(v31 + v33);
          if (v17 < v38 || v16 < v40)
            acAttrReduceSmile(result, v22, v23);
          if (v17 < (float)(v26 + 1.0))
            acAttrReduceSmile(result, v22, v23);
          v42 = (float)(v31 + 1.0);
          if (v16 < v42)
            acAttrReduceSmile(result, v22, v23);
          if (v17 < (float)(v37 + -1.0))
            acAttrReduceSmile(result, v22, v23);
          v43 = (float)(v39 + -1.0);
          if (v16 < v43)
            acAttrReduceSmile(result, v22, v23);
          v44 = &a3[v18 * v35];
          v45 = *(float *)&v44[4 * v34];
          v46 = &a3[v18 * v40];
          v47 = 4 * (float)(v26 + v32);
          v48 = *(float *)&v46[v47];
          v49 = *(float *)&v46[4 * v34];
          v50 = *(float *)&v44[v47];
          v51 = (float)((float)((float)(v45 + v48) - v49) - v50) / (float)(v32 * v33);
          v52 = (float)((float)((float)((float)(v45 + *(float *)&v46[4 * (float)(v26 + 1.0)]) - v49)
                              - *(float *)&v44[4 * (float)(v26 + 1.0)])
                      / v33)
              + (float)(v28 * v51);
          v53 = (float)((float)((float)((float)(v45 + *(float *)&a3[4 * v38 + v18 * v42])
                                      - *(float *)&a3[4 * v34 + v18 * v42])
                              - v50)
                      / v32)
              + (float)(v28 * v51);
          v54 = (float)((float)((float)((float)(v48 + *(float *)&v44[4 * (float)(v37 + -1.0)])
                                      - *(float *)&v46[4 * (float)(v37 + -1.0)])
                              - v50)
                      / v33)
              + (float)(v28 * v51);
          v55 = (float)((float)((float)((float)(v48 + *(float *)&a3[4 * v34 + v18 * v43]) - v49)
                              - *(float *)&a3[4 * v38 + v18 * v43])
                      / v32)
              + (float)(v28 * v51);
          v56 = v55 > 0.0;
          v57 = v55 < 0.0;
          if (fabsf(v52) > (float)(v51 * a8))
            ++v27;
          v27 += 2 * (fabsf(v53) > (float)(v51 * a8))
               + 4 * (fabsf(v54) > (float)(v51 * a8))
               + 8 * (fabsf(v55) > (float)(v51 * a8));
          v58 = (float)(int)((__PAIR64__(v52 < 0.0, 0.0) - LODWORD(v52)) >> 32);
          if ((v27 & 1) == 0)
            v58 = 0.0;
          v59 = fmax((float)(v26 + v58), 0.0);
          v60 = (float)(int)((__PAIR64__(v53 < 0.0, 0.0) - LODWORD(v53)) >> 32);
          v26 = v59;
          if ((v27 & 2) == 0)
            v60 = 0.0;
          v61 = v31 + v60;
          if ((v27 & 4) != 0)
            v62 = (v54 > 0.0) - (unint64_t)(v54 < 0.0);
          else
            v62 = 0;
          v63 = (uint64_t)fmin(v29, (double)(uint64_t)(v62 + (uint64_t)v37));
          v64 = v61;
          v65 = (v27 & 8) != 0 && v56 - v57;
          v66 = (uint64_t)fmin(v30, (double)(v65 + (uint64_t)v39));
          v31 = fmax(v64, 0.0);
          v32 = (float)v63 - v26;
          v33 = (float)v66 - v31;
          --a6;
        }
        while (a6);
        *((float *)&v68 + 1) = v31;
        *((float *)&v68 + 2) = (float)v63 - v26;
        *((float *)&v68 + 3) = (float)v66 - v31;
      }
      result = 0;
      *(float *)&v68 = v26;
      *(_OWORD *)(a2 + 1480) = v68;
      *(_DWORD *)(a2 + 1496) = 1;
      *(_DWORD *)(a2 + 1476) = 6;
      *(_DWORD *)(a2 + 1468) = 1;
    }
  }
  return result;
}

void AcAttrNode::preProcess()
{
  __assert_rtn("preProcess", "acattrnode.cpp", 110, "numFaces <= 10");
}

void AcAttrNode::postProcess()
{
  __assert_rtn("bmBufferPixelAtFloat", "bmbufferprivate.h", 70, "x < buf.width && y < buf.height");
}

{
  __assert_rtn("bmBufferDequantizeInt8", "bmbufferprivate.h", 82, "input.width == output.width");
}

{
  __assert_rtn("bmBufferDequantizeInt8", "bmbufferprivate.h", 81, "input.height == output.height");
}

{
  __assert_rtn("bmBufferDequantizeInt8", "bmbufferprivate.h", 79, "input.pixelFormat == kBmBufferPixelFormatType_Int8");
}

{
  __assert_rtn("bmBufferDequantizeUInt8", "bmbufferprivate.h", 99, "input.width == output.width");
}

{
  __assert_rtn("bmBufferDequantizeUInt8", "bmbufferprivate.h", 98, "input.height == output.height");
}

{
  __assert_rtn("bmBufferDequantizeUInt8", "bmbufferprivate.h", 96, "input.pixelFormat == kBmBufferPixelFormatType_UInt8");
}

void AcAttrNode::getParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("bmBufferPixelSize", "bmbufferprivate.h", a3, "false");
}

void ttDetRectFromObject()
{
  __assert_rtn("ttDetCategoryFromIsp", "ttdetrect.cpp", 39, "cat < CISP_TT_DET_CATEGORY_COUNT");
}

void ft::HungarianMatcher::HungarianMatcher(void **a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = *a1;
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v4;
    OUTLINED_FUNCTION_0_0(v4);
  }
}

void acCropResizeGenerateConfig()
{
  __assert_rtn("acCropResizeGenerateConfig", "accropresize.cpp", 31, "srcPyrInfo.numLevels <= 4");
}

{
  __assert_rtn("acCropResizeGenerateConfig", "accropresize.cpp", 48, "pyrInd == 0 || srcPyrInfo.widths[pyrInd] <= srcPyrInfo.widths[pyrInd - 1]");
}

{
  __assert_rtn("acCropResizeGenerateConfig", "accropresize.cpp", 50, "pyrInd == 0 || srcPyrInfo.heights[pyrInd] <= srcPyrInfo.heights[pyrInd - 1]");
}

{
  __assert_rtn("acCropResizeGenerateConfig", "accropresize.cpp", 111, "yStartY < srcPyrInfo.heights[crop.pyrIndex]");
}

{
  __assert_rtn("acCropResizeGenerateConfig", "accropresize.cpp", 110, "xStartY < srcPyrInfo.widths[crop.pyrIndex]");
}

{
  __assert_rtn("acCropResizeGenerateConfig", "accropresize.cpp", 30, "!(dstWidth & 0x01) && !(dstHeight & 0x01)");
}

void AcDetNode::init()
{
  __assert_rtn("init", "acdetnode.cpp", 193, "count");
}

{
  __assert_rtn("init", "acdetnode.cpp", 194, "m_config.fmBboxCounts[scaleInd]");
}

void AcDetNode::postProcessDet()
{
  __assert_rtn("acDetCategoryToIsp", "acdetnode.cpp", 46, "cat != kAcDetCategory_Background");
}

{
  __assert_rtn("acDetCategoryToIsp", "acdetnode.cpp", 47, "cat < kAcDetCategoryMax");
}

void AcDetNode::postProcessDet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1("getClsBufferInds", "acdetnode.cpp", a3, "posInd != ((uint32_t)-1)");
}

{
  OUTLINED_FUNCTION_0_1("getClsBufferInds", "acdetnode.cpp", a3, "negInd != ((uint32_t)-1)");
}

void AcDetNode::getParams(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a2 + 576 * a3;
  *(_DWORD *)(v3 + 508) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v3 + 504) = *(_DWORD *)(a1 + 132);
  __assert_rtn("yawBufChCount", "acdetnode.cpp", 538, "state.magic == 0xde71");
}

{
  uint64_t v3;

  v3 = a2 + 576 * a3;
  *(_DWORD *)(v3 + 364) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v3 + 360) = *(_DWORD *)(a1 + 132);
  __assert_rtn("rollBufChCount", "acdetnode.cpp", 532, "state.magic == 0xde71");
}

{
  uint64_t v3;

  v3 = a2 + 576 * a3;
  *(_DWORD *)(v3 + 220) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v3 + 216) = *(_DWORD *)(a1 + 132);
  __assert_rtn("bboxBufChCount", "acdetnode.cpp", 508, "state.magic == 0xde71");
}

void AcDetNode::getParams()
{
  __assert_rtn("classPosBufChCount", "acdetnode.cpp", 520, "state.magic == 0xde71");
}

{
  __assert_rtn("classBufChCount", "acdetnode.cpp", 514, "state.magic == 0xde71");
}

void AcDetNode::classNegBufChCount()
{
  __assert_rtn("classNegBufChCount", "acdetnode.cpp", 526, "state.magic == 0xde71");
}

void AcDetNode::bboxBufChCount()
{
  __assert_rtn("bboxBufChCount", "acdetnode.cpp", 508, "state.magic == 0xde71");
}

void AcDetNode::rollBufChCount()
{
  __assert_rtn("rollBufChCount", "acdetnode.cpp", 532, "state.magic == 0xde71");
}

void AcDetNode::yawBufChCount()
{
  __assert_rtn("yawBufChCount", "acdetnode.cpp", 538, "state.magic == 0xde71");
}

void acAttrReduceSmile()
{
  __assert_rtn("acAttrReduceSmile", "acattrreduce.cpp", 24, "smileThreshold <= 100");
}

void acAttrReduceSmile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_2("bmBufferPixelAtFloat", "bmbufferprivate.h", a3, "x < buf.width && y < buf.height");
}

void acAttrReduceBlink()
{
  __assert_rtn("acAttrReduceBlink", "acattrreduce.cpp", 41, "(*netOutput).height >= kOutputCount");
}

{
  __assert_rtn("acAttrReduceBlink", "acattrreduce.cpp", 42, "blinkThreshold <= 100");
}

{
  __assert_rtn("acAttrReduceBlink", "acattrreduce.cpp", 43, "occludedThreshold <= 100");
}

void acAttrReduceYaw()
{
  __assert_rtn("acAttrReduceYaw", "acattrreduce.cpp", 65, "numBins <= 10");
}

void acAttrReduceRoll()
{
  __assert_rtn("acAttrReduceRoll", "acattrreduce.cpp", 91, "numBins <= 10");
}

void acDetRectSmallRectSuppression()
{
  __assert_rtn("acDetRectSmallRectSuppression", "acdetrect.cpp", 139, "sortedRects[justSelected].score >= sortedRects[check].score");
}

{
  __assert_rtn("acDetRectSmallRectSuppression", "acdetrect.cpp", 144, "remaining <= check");
}

void acDetRectLowMergeCountSuppression()
{
  __assert_rtn("acDetRectLowMergeCountSuppression", "acdetrect.cpp", 188, "remaining <= check");
}

void acDetRectWeightedMerge()
{
  __assert_rtn("acDetRectWeightedMerge", "acdetrect.cpp", 201, "rects");
}

{
  __assert_rtn("acDetRectWeightedMerge", "acdetrect.cpp", 257, "remaining <= check");
}

void acDetRectFromFace()
{
  __assert_rtn("acDetCategoryFromIsp", "acdetrect.cpp", 24, "cat < CISP_AC_DET_CATEGORY_COUNT");
}

void TtTrkRpnNode::instancePostProcess()
{
  __assert_rtn("instancePostProcess", "tttrkrpnnode.cpp", 455, "netOutputs[i].pixelFormat == kBmBufferPixelFormatType_Half || netOutputs[i].pixelFormat == kBmBufferPixelFormatType_Float");
}

void bmBufferDequantizeHalf()
{
  __assert_rtn("bmBufferDequantizeHalf", "bmbufferprivate.h", 116, "input.width == output.width");
}

{
  __assert_rtn("bmBufferDequantizeHalf", "bmbufferprivate.h", 115, "input.height == output.height");
}

{
  __assert_rtn("bmBufferDequantizeHalf", "bmbufferprivate.h", 114, "output.pixelFormat == kBmBufferPixelFormatType_Float");
}

{
  __assert_rtn("bmBufferDequantizeHalf", "bmbufferprivate.h", 113, "input.pixelFormat == kBmBufferPixelFormatType_Half");
}

void TtTrkRpnNode::setUpNetBuffers()
{
  __assert_rtn("setUpNetBuffers", "tttrkrpnnode.cpp", 749, "ptr - (const uint8_t*)netBufferPtrs.xcorrOutputs[i] == params.xcorrNetOutBatchBytes[i]");
}

{
  __assert_rtn("setUpNetBuffers", "tttrkrpnnode.cpp", 736, "ptr - (const uint8_t*)netBufferPtrs.templateKernels[i] == params.templateNetOutBatchBytes[i]");
}

{
  __assert_rtn("setUpNetBuffers", "tttrkrpnnode.cpp", 724, "ptr - (const uint8_t*)netBufferPtrs.exemplarCrop == params.exemplarCropBatchBytes");
}

{
  __assert_rtn("setUpNetBuffers", "tttrkrpnnode.cpp", 712, "ptr - (const uint8_t*)netBufferPtrs.instanceCrop == params.instanceCropBatchBytes");
}

void ReportException(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_2(a1);
  OUTLINED_FUNCTION_1_0(&dword_20CC71000, v1, v2, "FusionTracker error: %s", v3, v4, v5, v6, 2u);
  OUTLINED_FUNCTION_4();
}

void ft::CinematicTracker::TerminateDetectionlessTrack()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_0_3(&dword_20CC71000, v0, v1, "Internal inconsistency: detection-less track is not high-priority.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void rtcv::bmBufferPixelFormatTypeToString(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _BYTE *a5)
{
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  *a5 = 0;
  *(_DWORD *)(a4 + 8) = a3;
  *(_QWORD *)a4 = a2;
}

void simResizeVisPipeBinning()
{
  __assert_rtn("simResizeVisPipeBinning", "simresizevispipe.cpp", 57, "startX == 0.0f && startY == 0.0f");
}

{
  __assert_rtn("simResizeVisPipeBinning", "simresizevispipe.cpp", 61, "xStep == 1 || xStep == 2 || xStep == 4 || xStep == 8");
}

{
  __assert_rtn("simResizeVisPipeBinning", "simresizevispipe.cpp", 62, "yStep == 1 || yStep == 2 || yStep == 4 || yStep == 8");
}

void simResizeVisPipeBinning(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_4("bmBufferPixelAtUInt16", "bmbufferprivate.h", a3, "x < buf.width && y < buf.height");
}

void simResizeVisPipe()
{
  __assert_rtn("simResizeVisPipe", "simresizevispipe.cpp", 247, "scaleX <= ISP_RESIZE_MAX_SCALE && scaleY <= ISP_RESIZE_MAX_SCALE");
}

{
  __assert_rtn("simResizeVisPipe", "simresizevispipe.cpp", 251, "scaleX >= ISP_RESIZE_MIN_SCALE * ISP_RESIZE_MIN_SCALE && scaleY >= ISP_RESIZE_MIN_SCALE * ISP_RESIZE_MIN_SCALE");
}

{
  __assert_rtn("simResizeVisPipe", "simresizevispipe.cpp", 254, "(scaleX <= 1 && scaleY <= 1) || (method != SimResizeVisPipeMethod::Area)");
}

{
  __assert_rtn("simResizeVisPipe", "simresizevispipe.cpp", 255, "output.width <= ISP_RESIZE_MAX_WIDTH");
}

{
  __assert_rtn("simResizeVisPipe", "simresizevispipe.cpp", 257, "output.height <= ISP_RESIZE_MAX_HEIGHT");
}

void acNonMaxSuppression()
{
  __assert_rtn("acNonMaxSuppression", "acnonmaxsuppression.cpp", 18, "__null != rects");
}

{
  __assert_rtn("acNonMaxSuppression", "acnonmaxsuppression.cpp", 35, "remaining <= check");
}

void acCrossClassSuppression()
{
  __assert_rtn("acCrossClassSuppression", "acnonmaxsuppression.cpp", 49, "__null != rects");
}

{
  __assert_rtn("acCrossClassSuppression", "acnonmaxsuppression.cpp", 66, "remaining <= check");
}

void acNonMaxSuppressionSmallbox()
{
  __assert_rtn("acNonMaxSuppressionSmallbox", "acnonmaxsuppression.cpp", 79, "__null != rects");
}

{
  __assert_rtn("acNonMaxSuppressionSmallbox", "acnonmaxsuppression.cpp", 96, "remaining <= check");
}

void acRemoveOverlapBoxes()
{
  __assert_rtn("acRemoveOverlapBoxes", "acnonmaxsuppression.cpp", 110, "numRects <= tempBytes");
}

void ft::Detector::Detector(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
  OUTLINED_FUNCTION_1_1();
}

void ik::LogEspressoError(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  uint64_t *v3;
  __int16 v4;
  uint64_t status_string;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v1 = a1;
  else
    v1 = (uint64_t *)*a1;
  v2 = 136315394;
  v3 = v1;
  v4 = 2080;
  status_string = espresso_get_status_string();
  _os_log_error_impl(&dword_20CC71000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Encountered an error during: %s\n -> Espresso Error: %s", (uint8_t *)&v2, 0x16u);
}

{
  int v2;
  uint64_t *v3;
  uint64_t status_string;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *((char *)a1 + 23);
  v3 = (uint64_t *)*a1;
  status_string = espresso_get_status_string();
  if (v2 >= 0)
    v5 = a1;
  else
    v5 = v3;
  v6 = 136315394;
  v7 = v5;
  v8 = 2080;
  v9 = status_string;
  _os_log_error_impl(&dword_20CC71000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "Encountered an error during: %s\n -> Espresso Error: %s", (uint8_t *)&v6, 0x16u);
}

void ik::EspressoNet::Predict(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
  OUTLINED_FUNCTION_1_1();
}

void std::pair<std::string const,ik::EspressoTensor>::pair[abi:ne180100](void **a1)
{
  if (*((char *)a1 + 23) < 0)
    OUTLINED_FUNCTION_0_5(a1);
}

void bmBufferResizeCHW(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_2("bmBufferPixelAtInt8", "bmbufferprivate.h", a3, "x < buf.width && y < buf.height");
}

void bmBufferResizeCHW()
{
  __assert_rtn("bmBufferResize2xSingleChannelCHW", "bmbuffergeometry.cpp", 52, "src.height > 0");
}

{
  __assert_rtn("bmBufferResize2xSingleChannelCHW", "bmbuffergeometry.cpp", 54, "dst.height == src.height * 2");
}

{
  __assert_rtn("bmBufferResize2xSingleChannelCHW", "bmbuffergeometry.cpp", 53, "dst.width == src.width * 2");
}

{
  __assert_rtn("bmBufferResize2xCHW", "bmbuffergeometry.cpp", 84, "dstViewHeight * numChannels == dst.height");
}

{
  __assert_rtn("bmBufferResize2xCHW", "bmbuffergeometry.cpp", 81, "srcViewHeight * numChannels == src.height");
}

{
  __assert_rtn("bmBufferResize2xCHW", "bmbuffergeometry.cpp", 78, "src.pixelFormat == kBmBufferPixelFormatType_Int8");
}

{
  __assert_rtn("bmBufferResize2xCHW", "bmbuffergeometry.cpp", 77, "dst.pixelFormat == src.pixelFormat");
}

{
  __assert_rtn("bmBufferResizeCHW", "bmbuffergeometry.cpp", 206, "false");
}

void bmBufferPartialResizeCHW()
{
  __assert_rtn("bmBufferResizeBicubicSingleChannelCHW", "bmbuffergeometry.cpp", 122, "src.width && src.height");
}

{
  __assert_rtn("bmBufferResizeBicubicSingleChannelCHW", "bmbuffergeometry.cpp", 123, "dst.width >= src.width");
}

{
  __assert_rtn("bmBufferResizeBicubicSingleChannelCHW", "bmbuffergeometry.cpp", 124, "dst.height >= src.height");
}

{
  __assert_rtn("bmBufferResizeBicubicSingleChannelCHW", "bmbuffergeometry.cpp", 126, "dst.pixelFormat == kBmBufferPixelFormatType_Float");
}

{
  __assert_rtn("bmBufferResizeBicubicSingleChannelCHW", "bmbuffergeometry.cpp", 125, "src.pixelFormat == kBmBufferPixelFormatType_Float");
}

{
  __assert_rtn("bmBufferResizeBicubicCHW", "bmbuffergeometry.cpp", 176, "dstViewHeight * numChannels == dst.height");
}

{
  __assert_rtn("bmBufferResizeBicubicCHW", "bmbuffergeometry.cpp", 173, "srcViewHeight * numChannels == src.height");
}

{
  __assert_rtn("bmBufferPartialResizeCHW", "bmbuffergeometry.cpp", 216, "false");
}

void bmBufferResizeCoordConvert()
{
  __assert_rtn("bmBufferResizeCoordConvert", "bmbuffergeometry.cpp", 222, "pad < kBmBufferResizePadMax");
}

{
  __assert_rtn("bmBufferResizeCoordConvert", "bmbuffergeometry.cpp", 223, "srcW && srcH && dstW && dstH");
}

void bmBufferResizeCoordConvertReversed()
{
  __assert_rtn("bmBufferResizeCoordConvertReversed", "bmbuffergeometry.cpp", 246, "pad < kBmBufferResizePadMax");
}

{
  __assert_rtn("bmBufferResizeCoordConvertReversed", "bmbuffergeometry.cpp", 247, "srcW && srcH && dstW && dstH");
}

void bmArgMax()
{
  __assert_rtn("bmArgMax", "bmmath.cpp", 143, "n");
}

void ft::TrackPool::UpdateForeignTracks(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_20CC71000, log, OS_LOG_TYPE_ERROR, "Observation ID has internal track mask set.", buf, 2u);
}

void std::vector<std::shared_ptr<ft::Track>>::vector(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 -= 16;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

void FTGetChipIdentifier_cold_1(int a1, NSObject *a2)
{
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_20CC71000, a2, OS_LOG_TYPE_ERROR, "Unknown chip encountered: 0x%x", (uint8_t *)v2, 8u);
}

void ik::EspressoConfig::EspressoConfig(void **__p)
{
  void **v2;

  do
  {
    v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void ttNonMaxSuppression()
{
  __assert_rtn("ttNonMaxSuppression", "ttnonmaxsuppression.cpp", 17, "__null != rects");
}

{
  __assert_rtn("ttNonMaxSuppression", "ttnonmaxsuppression.cpp", 33, "remaining <= check");
}

void ttNonMaxSuppression2()
{
  __assert_rtn("ttNonMaxSuppression2", "ttnonmaxsuppression.cpp", 46, "__null != rects");
}

{
  __assert_rtn("ttNonMaxSuppression2", "ttnonmaxsuppression.cpp", 62, "remaining <= check");
}

void ttNonMaxSuppressionSmallbox()
{
  __assert_rtn("ttNonMaxSuppressionSmallbox", "ttnonmaxsuppression.cpp", 75, "__null != rects");
}

{
  __assert_rtn("ttNonMaxSuppressionSmallbox", "ttnonmaxsuppression.cpp", 92, "remaining <= check");
}

void ttRemoveOverlapBoxes()
{
  __assert_rtn("ttRemoveOverlapBoxes", "ttnonmaxsuppression.cpp", 105, "numRects <= tempBytes");
}

void rtcv::simResize()
{
  __assert_rtn("simResizeBGRA8888AccelerateFramework", "simresize.cpp", 41, "dstViewHeight <= dstHeight");
}

{
  __assert_rtn("simResizeBGRA8888AccelerateFramework", "simresize.cpp", 38, "dstViewWidth <= dstWidth");
}

void rtcv::simImageChMeanTempBytes()
{
  __assert_rtn("append", "bmmixedbufsize.h", 58, "!m_nextChunkOffset");
}

void rtcv::simImageChMean()
{
  __assert_rtn("simImageChMeanGetTempBuffers", "simresize.cpp", 209, "numTempBytes >= bs.totalBytes()");
}

void rtcv::simImageChMean(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_6("nextChunk", "bmmixedbufsize.h", a3, "m_nextChunkOffset <= m_totalBytes");
}

void addToHeap()
{
  __assert_rtn("addToHeap", "ttHeap.cpp", 72, "heap->magic == 0x12345678");
}

void removeFromHeap()
{
  __assert_rtn("removeFromHeap", "ttHeap.cpp", 89, "heap->magic == 0x12345678");
}

void acDetBboxCoderDecodeAll()
{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 58, "7 == config.categoryCount || 5 == config.categoryCount");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 89, "config.posChannelCounts[layerInd] > 0");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 128, "globalDefaultBoxInd < defaultBoxWidthsHeightsLen");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 261, "outBoxInd < maxOutBoxes");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 109, "layerHeight * numDefaults * 4 == offsetsBuf.height");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 108, "logitsUniPosBuf->width == offsetsBuf.width");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 107, "layerHeight * numLogitsUniPosChs == logitsUniPosBuf->height");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 105, "yawBuf.pixelFormat == kBmBufferPixelFormatType_Int8");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 102, "rollBuf.pixelFormat == kBmBufferPixelFormatType_Int8");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 99, "offsetsBuf.pixelFormat == kBmBufferPixelFormatType_Int8");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 93, "!logitsNegBuf || logitsNegBuf->pixelFormat == kBmBufferPixelFormatType_Int8");
}

{
  __assert_rtn("acDetBboxCoderDecodeAll", "acdetbboxcoder.cpp", 91, "logitsUniPosBuf->pixelFormat == kBmBufferPixelFormatType_Int8");
}

void acDetBboxCoderDecodeAll(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_7("acDetBboxCoderPoseDegrees", "acdetbboxcoder.cpp", a3, "predictions.width == numPoseBins");
}

void acDetBboxCoderDecodeAllFloat()
{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 327, "7 == config.categoryCount || 5 == config.categoryCount");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 354, "config.posChannelCounts[layerInd] > 0");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 390, "globalDefaultBoxInd < defaultBoxWidthsHeightsLen");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 522, "outBoxInd < maxOutBoxes");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 379, "logitsUniPosStride * (uint32_t)sizeof(float) == layerHeight * logitsUniPosBuf->rowBytes");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 371, "layerHeight * numDefaults * 4 == offsetsBuf.height");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 370, "logitsUniPosBuf->width == offsetsBuf.width");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 369, "layerHeight * numLogitsUniPosChs == logitsUniPosBuf->height");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 367, "yawBuf.pixelFormat == kBmBufferPixelFormatType_Float");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 365, "rollBuf.pixelFormat == kBmBufferPixelFormatType_Float");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 363, "offsetsBuf.pixelFormat == kBmBufferPixelFormatType_Float");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 358, "!logitsNegBuf || logitsNegBuf->pixelFormat == kBmBufferPixelFormatType_Float");
}

{
  __assert_rtn("acDetBboxCoderDecodeAllFloat", "acdetbboxcoder.cpp", 356, "logitsUniPosBuf->pixelFormat == kBmBufferPixelFormatType_Float");
}

void bmMunkresGetTempBuffers()
{
  __assert_rtn("bmMunkresGetTempBuffers", "bmmunkres.cpp", 375, "numTempBytes >= bs.totalBytes()");
}

{
  __assert_rtn("bmMunkresGetTempBuffers", "bmmunkres.cpp", 376, "tempBuffers");
}

void bmMunkresGetTempBuffers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_3("append", "bmmixedbufsize.h", a3, "!m_nextChunkOffset");
}

void bmMunkres()
{
  __assert_rtn("bmMunkres", "bmmunkres.cpp", 395, "size > 0");
}

{
  __assert_rtn("bmMunkres", "bmmunkres.cpp", 396, "maxMatches >= size");
}

{
  __assert_rtn("bmMunkresSubtractMinPerRow", "bmmunkres.cpp", 80, "rowMin >= 0");
}

{
  __assert_rtn("bmMunkresSubtractMinPerCol", "bmmunkres.cpp", 57, "colMin >= 0");
}

{
  __assert_rtn("bmMunkresMaxAssignments", "bmmunkres.cpp", 127, "temp");
}

{
  __assert_rtn("bmMunkresMaxAssignmentsGetTempBuffers", "bmmunkres.cpp", 107, "numTempBytes >= bs.totalBytes()");
}

{
  __assert_rtn("bmMunkres", "bmmunkres.cpp", 523, "xi != 0");
}

{
  __assert_rtn("bmMunkresUpdateCost", "bmmunkres.cpp", 331, "rowLineFlags != nullptr");
}

{
  __assert_rtn("bmMunkresUpdateCost", "bmmunkres.cpp", 332, "colLineFlags != nullptr");
}

{
  __assert_rtn("bmMunkresMaxAssignments", "bmmunkres.cpp", 165, "0 <= aCol[r]");
}

{
  __assert_rtn("bmMunkresSubtractMinPerRow", "bmmunkres.cpp", 81, "minCol < costBuf.height");
}

void bmMunkres(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_1_3("bmMunkresSubtractMinPerCol", "bmmunkres.cpp", a3, "minRow < costBuf.width");
}

void ft::TrackMatcher::Match(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void TtDetNode::postProcess()
{
  __assert_rtn("ttDetCategoryToIsp", "ttdetnode.cpp", 42, "cat != kTtDetCategory_Background");
}

{
  __assert_rtn("ttDetCategoryToIsp", "ttdetnode.cpp", 43, "cat < kTtDetCategoryMax");
}

void FTComputeMeanColor_cold_1(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_3(&dword_20CC71000, a1, a3, "FTComputeMeanColor provided null pointer for histogram.", a5, a6, a7, a8, 0);
}

void FTComputeMeanColor_cold_2(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_3(&dword_20CC71000, a1, a3, "FTComputeMeanColor provided null pointer for output mean.", a5, a6, a7, a8, 0);
}

void ttAssocSetUpMunkresCost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_6("ttAssocSetUpMunkresCost", "ttassoc.cpp", a3, "costBufLen >= costMatSize * costMatSize");
}

void ttAssocCore()
{
  __assert_rtn("ttAssocCore", "ttassoc.cpp", 151, "unmatchedDetObjectCount < unmatchedDetObjectsLen");
}

{
  __assert_rtn("ttAssocCore", "ttassoc.cpp", 122, "unmatchedDetObjectCount < unmatchedDetObjectsLen");
}

{
  __assert_rtn("ttAssocCore", "ttassoc.cpp", 167, "ti < numTrkObjects");
}

void ttAssocTrkDetGetTempBuffers()
{
  __assert_rtn("ttAssocTrkDetGetTempBuffers", "ttassoc.cpp", 207, "numTempBytes >= bs.totalBytes()");
}

{
  __assert_rtn("ttAssocTrkDetGetTempBuffers", "ttassoc.cpp", 208, "tempBuffers");
}

void ttAssocObjectRemoveKilled()
{
  __assert_rtn("ttAssocObjectRemoveKilled", "ttassoc.cpp", 252, "minKillLevel > kTtAssocObjectKillFlag_None");
}

void ttAssocTrkDet()
{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 268, "numTrkObjects <= maxTrkObjects");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 269, "numDetObjects <= maxTrkObjects");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 270, "tempBufBytes >= ttAssocTrkDetTempBytes(maxTrkObjects)");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 274, "isDetRunningThisFrame || !numDetObjects");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 321, "costMatSize * costMatSize <= maxTrkObjects * maxTrkObjects");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 402, "ki >= n");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 407, "i == 0 || trkObjects[ti].age <= trkObjects[killTemp[i - 1].index].age");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 415, "numTrkObjects - trkKillCount + unmatchedDetObjectCount <= maxTrkObjects");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 424, "newNumTrkObjects < maxTrkObjects");
}

{
  __assert_rtn("ttAssocTrkDet", "ttassoc.cpp", 408, "trkObjects[ti].killFlag == kTtAssocObjectKillFlag_Maybe");
}

void TtAssocObjectRemoveOldOverlapObjects_cold_1()
{
  __assert_rtn("TtAssocObjectRemoveOldOverlapObjects", "ttassoc.cpp", 538, "trkObjects->objects[justSelected].age <= trkObjects->objects[check].age");
}

void TtAssocObjectRemoveOldOverlapObjects_cold_2()
{
  __assert_rtn("TtAssocObjectRemoveOldOverlapObjects", "ttassoc.cpp", 542, "remaining <= check");
}

void computeIntegralImage()
{
  __assert_rtn("bmBufferPixelAtUInt8", "bmbufferprivate.h", 56, "x < buf.width && y < buf.height");
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8A0](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E8](retstr, tx, ty);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBEFB8](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x24BDBEFD0]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFE0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF000]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF008]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF010]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF018]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBF040]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x24BDBF050]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x24BDBF068](dict, rect);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x24BDC0450](time1, time2);
}

CFDictionaryRef CMTimeCopyAsDictionary(CMTime *time, CFAllocatorRef allocator)
{
  return (CFDictionaryRef)MEMORY[0x24BDC0468](time, allocator);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x24BDC0490](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x24BDC0498](retstr, value, *(_QWORD *)&timescale);
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x24BDC04A8](retstr, dictionaryRepresentation);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x24BDC05A0](retstr, lhs, rhs);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5248](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x24BDC5278](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC5290](pixelBuffer);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52A0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52B0](pixelBuffer);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x24BDC52C0](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D0](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52E8](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x24BDC5308](pixelBuffer, lockFlags);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  return MEMORY[0x24BDC5318](allocator, poolAttributes, pixelBufferAttributes, poolOut);
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x24BDC5320](allocator, pixelBufferPool, pixelBufferOut);
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
  MEMORY[0x24BDC5358](pixelBufferPool);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x24BDC5398](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x24BDC53A0](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x24BDC53B0](pixelBuffer, unlockFlags);
}

uint64_t IOSurfaceAcceleratorCreate()
{
  return MEMORY[0x24BE51728]();
}

uint64_t IOSurfaceAcceleratorGetHistogram()
{
  return MEMORY[0x24BE51730]();
}

uint64_t IOSurfaceAcceleratorTransformSurface()
{
  return MEMORY[0x24BE51748]();
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x24BDD8C08]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x24BED8470]();
}

uint64_t MGGetSInt64Answer()
{
  return MEMORY[0x24BED84A0]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x24BDF9168](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
  MEMORY[0x24BDF9170](session);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x24BDF9178](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x24BDF91A8](session, propertyKey, propertyValue);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB48](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB38](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC38](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC80](this, __pos, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x24BEDB638]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24C55E178();
}

void operator delete(void *__p)
{
  off_24C55E180(__p);
}

uint64_t operator delete()
{
  return off_24C55E188();
}

uint64_t operator new[]()
{
  return off_24C55E190();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24C55E198(__sz);
}

uint64_t operator new()
{
  return off_24C55E1A0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

simd_float2x2 __invert_f2(simd_float2x2 a1)
{
  simd_float2 v1;
  simd_float2 v2;
  simd_float2x2 result;

  MEMORY[0x24BDAC818]((__n128)a1, *(__n128 *)((char *)&a1 + 8));
  result.columns[1] = v2;
  result.columns[0] = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

uint64_t espresso_buffer_get_rank()
{
  return MEMORY[0x24BE2FAE0]();
}

uint64_t espresso_buffer_unpack_tensor_shape()
{
  return MEMORY[0x24BE2FAF0]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x24BE2FB00]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x24BE2FB18]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x24BE2FB38]();
}

uint64_t espresso_get_status_string()
{
  return MEMORY[0x24BE2FB70]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x24BE2FB88]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x24BE2FBA0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_argb8()
{
  return MEMORY[0x24BE2FBC8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8()
{
  return MEMORY[0x24BE2FBD0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8()
{
  return MEMORY[0x24BE2FBE8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8()
{
  return MEMORY[0x24BE2FBF8]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x24BE2FC18]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x24BE2FC70]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x24BE2FC80]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x24BE2FC90]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x24BE2FCA0]();
}

uint64_t espresso_plan_set_priority()
{
  return MEMORY[0x24BE2FCC0]();
}

uint64_t espresso_plan_share_intermediate_buffer()
{
  return MEMORY[0x24BE2FCC8]();
}

uint64_t espresso_set_image_preprocessing_params()
{
  return MEMORY[0x24BE2FCE0]();
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

float logf(float a1)
{
  float result;

  MEMORY[0x24BDAEAF8](a1);
  return result;
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF70](__dst, __src, __n);
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3248](__A, __IA, __C, __N);
}

void vDSP_vfltu8(const unsigned __int8 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB33E8](__A, __IA, __C, __IC, __N);
}

vImage_Error vImageAffineWarp_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, const vImage_AffineTransform *transform, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x24BDB35F8](src, dest, tempBuffer, transform, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x24BDB3A10](src, dest, tempBuffer, *(_QWORD *)&flags);
}

