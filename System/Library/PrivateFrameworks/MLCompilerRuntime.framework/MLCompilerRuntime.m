uint64_t sub_240B6E80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;
  FILE **v13;
  _BYTE *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  _BYTE *v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  unint64_t v48;
  int v49;
  int v50;
  char *v51;
  void *v52;
  char *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  FILE **v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t result;
  size_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;

  v3 = a3;
  *(_QWORD *)(a3 + 152) = a1;
  *(_QWORD *)(a3 + 160) = a2;
  if (*(_DWORD *)(a3 + 80))
    goto LABEL_15;
  *(_DWORD *)(a3 + 80) = 1;
  if (*(_DWORD *)(a3 + 84))
  {
    if (*(_QWORD *)(a3 + 8))
      goto LABEL_4;
  }
  else
  {
    *(_DWORD *)(a3 + 84) = 1;
    if (*(_QWORD *)(a3 + 8))
    {
LABEL_4:
      if (*(_QWORD *)(a3 + 16))
        goto LABEL_5;
LABEL_9:
      *(_QWORD *)(a3 + 16) = *MEMORY[0x24BDAC8E8];
      v4 = *(_QWORD *)(a3 + 40);
      if (!v4)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  *(_QWORD *)(a3 + 8) = *MEMORY[0x24BDAC8E0];
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_9;
LABEL_5:
  v4 = *(_QWORD *)(a3 + 40);
  if (!v4)
  {
LABEL_11:
    sub_240B6F41C((_QWORD *)a3);
    v7 = *(_QWORD *)(v3 + 8);
    v8 = malloc_type_malloc(0x48uLL, 0xA4E4DD95uLL);
    if (!v8
      || (v9 = (uint64_t)v8,
          v8[6] = 0x4000,
          v10 = malloc_type_malloc(0x4002uLL, 0xA4E4DD95uLL),
          (*(_QWORD *)(v9 + 8) = v10) == 0))
    {
      sub_240B6F4BC("out of dynamic memory in yy_create_buffer()");
    }
    *(_DWORD *)(v9 + 40) = 1;
    v11 = v7;
    v3 = a3;
    sub_240B6F5F8(v9, v11, a3);
    v5 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * v5) = v9;
    v4 = *(_QWORD *)(a3 + 40);
    v6 = *(_QWORD *)(v4 + 8 * v5);
    goto LABEL_14;
  }
LABEL_10:
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 + 8 * v5);
  if (!v6)
    goto LABEL_11;
LABEL_14:
  *(_QWORD *)(v3 + 56) = *(_QWORD *)(v6 + 32);
  v12 = *(_BYTE **)(v6 + 16);
  *(_QWORD *)(v3 + 72) = v12;
  *(_QWORD *)(v3 + 136) = v12;
  *(_QWORD *)(v3 + 8) = **(_QWORD **)(v4 + 8 * v5);
  *(_BYTE *)(v3 + 48) = *v12;
LABEL_15:
  v13 = (FILE **)MEMORY[0x24BDAC8D8];
  while (2)
  {
    v14 = *(_BYTE **)(v3 + 72);
    *v14 = *(_BYTE *)(v3 + 48);
    v15 = *(_DWORD *)(v3 + 84);
    v16 = (unint64_t)v14;
LABEL_17:
    LODWORD(v17) = v15;
    do
    {
      v18 = byte_240BBAEC4[*v14];
      if (word_240BBAFC4[(int)v17])
      {
        *(_DWORD *)(v3 + 112) = v17;
        *(_QWORD *)(v3 + 120) = v14;
      }
      v19 = (int)v17;
      v20 = word_240BBB364[(int)v17] + v18;
      if ((_DWORD)v17 != (__int16)word_240BBB058[v20])
      {
        do
        {
          v19 = (__int16)word_240BBB408[v19];
          if (v19 >= 74)
            v18 = *((unsigned __int8 *)&unk_240BBB4AC + v18);
          v20 = word_240BBB364[v19] + v18;
        }
        while (word_240BBB058[v20] != (unsigned __int16)v19);
      }
      v17 = (__int16)word_240BBB4D8[v20];
      ++v14;
    }
    while (word_240BBB364[v17] != 347);
LABEL_26:
    v21 = v17;
    v89 = v16;
LABEL_27:
    v22 = word_240BBAFC4[v21];
    if (!v22)
    {
      v14 = *(_BYTE **)(v3 + 120);
      v22 = word_240BBAFC4[*(int *)(v3 + 112)];
    }
    v23 = v22;
    *(_QWORD *)(v3 + 136) = v89;
    *(_QWORD *)(v3 + 64) = &v14[-v89];
    *(_BYTE *)(v3 + 48) = *v14;
    *v14 = 0;
    *(_QWORD *)(v3 + 72) = v14;
    if (!*(_DWORD *)(v3 + 132))
      goto LABEL_37;
    while (1)
    {
      if (!v23)
      {
        fwrite("--scanner backing up\n", 0x15uLL, 1uLL, *v13);
LABEL_106:
        *v14 = *(_BYTE *)(v3 + 48);
        v14 = *(_BYTE **)(v3 + 120);
        v21 = *(_DWORD *)(v3 + 112);
        goto LABEL_27;
      }
      if (v23 <= 14)
      {
        fprintf(*v13, "--accepting rule at line %ld (\"%s\")\n");
        goto LABEL_37;
      }
      if (v23 != 16)
        break;
      fwrite("--(end of buffer or a NUL)\n", 0x1BuLL, 1uLL, *v13);
LABEL_38:
      v90 = *(_QWORD *)(v3 + 136);
      *v14 = *(_BYTE *)(v3 + 48);
      v24 = *(_QWORD *)(v3 + 40);
      v25 = *(_QWORD *)(v3 + 24);
      v26 = *(_QWORD *)(v24 + 8 * v25);
      if (*(_DWORD *)(v26 + 64))
      {
        v27 = *(_QWORD *)(v3 + 56);
      }
      else
      {
        v27 = *(_QWORD *)(v26 + 32);
        *(_QWORD *)(v3 + 56) = v27;
        *(_QWORD *)v26 = *(_QWORD *)(v3 + 8);
        v26 = *(_QWORD *)(v24 + 8 * v25);
        *(_DWORD *)(v26 + 64) = 1;
      }
      v28 = *(_QWORD *)(v3 + 72);
      v29 = *(_BYTE **)(v26 + 8);
      if (v28 <= (unint64_t)&v29[v27])
      {
        v67 = (_DWORD)v14 - v90;
        v68 = *(_BYTE **)(v3 + 136);
        v14 = &v68[(int)v14 - (int)v90 - 1];
        *(_QWORD *)(v3 + 72) = v14;
        v21 = *(_DWORD *)(v3 + 84);
        v89 = (unint64_t)v68;
        if (v67 >= 2)
        {
          v69 = v68;
          while (*v69)
          {
            v70 = byte_240BBAEC4[*v69];
            if (word_240BBAFC4[v21])
              goto LABEL_97;
LABEL_98:
            v71 = v21;
            v72 = word_240BBB364[v21] + v70;
            if (v21 != (__int16)word_240BBB058[v72])
            {
              do
              {
                v71 = (__int16)word_240BBB408[v71];
                if (v71 >= 74)
                  v70 = *((unsigned __int8 *)&unk_240BBB4AC + v70);
                v72 = word_240BBB364[v71] + v70;
              }
              while (word_240BBB058[v72] != (unsigned __int16)v71);
            }
            v21 = (__int16)word_240BBB4D8[v72];
            if (++v69 == v14)
              goto LABEL_107;
          }
          v70 = 1u;
          if (!word_240BBAFC4[v21])
            goto LABEL_98;
LABEL_97:
          *(_DWORD *)(v3 + 112) = v21;
          *(_QWORD *)(v3 + 120) = v69;
          goto LABEL_98;
        }
LABEL_107:
        if (word_240BBAFC4[v21])
        {
          *(_DWORD *)(v3 + 112) = v21;
          *(_QWORD *)(v3 + 120) = v14;
        }
        v73 = v21;
        v74 = word_240BBB364[v21] + 1;
        if (v21 != (__int16)word_240BBB058[v74])
        {
          do
          {
            v75 = word_240BBB408[v73];
            v73 = (__int16)v75;
            v74 = word_240BBB364[(__int16)v75] + 1;
          }
          while (v75 != word_240BBB058[v74]);
        }
        if (v74)
        {
          v76 = word_240BBB4D8[v74];
          if (v76 != 73)
          {
            v15 = (__int16)v76;
            *(_QWORD *)(v3 + 72) = ++v14;
            v16 = v89;
            goto LABEL_17;
          }
        }
        goto LABEL_27;
      }
      if (v28 > (unint64_t)&v29[v27 + 1])
        sub_240B6F4BC("fatal flex scanner internal error--end of buffer missed");
      v16 = *(_QWORD *)(v3 + 136);
      if (!*(_DWORD *)(v26 + 60))
      {
        if (v28 - v16 != 1)
          goto LABEL_90;
        goto LABEL_84;
      }
      v30 = ~(_DWORD)v16 + v28;
      if (v30 >= 1)
      {
        LODWORD(v31) = 0;
        v32 = (v28 - v16 - 2);
        if (v32 < 7)
        {
          v33 = *(char **)(v3 + 136);
        }
        else
        {
          v33 = *(char **)(v3 + 136);
          if ((unint64_t)&v29[-v16] >= 0x20)
          {
            v34 = v32 + 1;
            if (v32 >= 0x1F)
            {
              v35 = v34 & 0x1FFFFFFE0;
              v36 = v29 + 16;
              v37 = (__int128 *)(v16 + 16);
              v38 = v34 & 0x1FFFFFFE0;
              do
              {
                v39 = *v37;
                *(v36 - 1) = *(v37 - 1);
                *v36 = v39;
                v36 += 2;
                v37 += 2;
                v38 -= 32;
              }
              while (v38);
              if (v34 == v35)
                goto LABEL_64;
              if ((v34 & 0x18) != 0)
                goto LABEL_56;
              v29 += v35;
              v33 = (char *)(v16 + v35);
              LODWORD(v31) = v34 & 0xFFFFFFE0;
            }
            else
            {
              v35 = 0;
LABEL_56:
              v31 = v34 & 0x1FFFFFFF8;
              v33 = (char *)(v16 + (v34 & 0x1FFFFFFF8));
              v40 = &v29[v34 & 0x1FFFFFFF8];
              v41 = &v29[v35];
              v42 = (uint64_t *)(v16 + v35);
              v43 = v35 - (v34 & 0x1FFFFFFF8);
              do
              {
                v44 = *v42++;
                *v41++ = v44;
                v43 += 8;
              }
              while (v43);
              v29 = v40;
              if (v34 == v31)
              {
LABEL_64:
                v26 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * *(_QWORD *)(v3 + 24));
                goto LABEL_65;
              }
            }
          }
        }
        v45 = v31 + v16 - v28 + 1;
        do
        {
          v46 = *v33++;
          *v29++ = v46;
        }
        while (!__CFADD__(v45++, 1));
        goto LABEL_64;
      }
LABEL_65:
      if (*(_DWORD *)(v26 + 64) == 2)
      {
        *(_QWORD *)(v3 + 56) = 0;
        *(_QWORD *)(v26 + 32) = 0;
        if (v30)
          goto LABEL_67;
LABEL_78:
        sub_240B6F4F0(*(_QWORD *)(v3 + 8), v3);
        v48 = *(_QWORD *)(v3 + 56);
        v26 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * *(_QWORD *)(v3 + 24));
        v49 = 1;
        goto LABEL_79;
      }
      v50 = v30 + 1;
      if (*(_DWORD *)(v26 + 24) == v30 + 1)
      {
        v51 = *(char **)(a3 + 72);
        do
        {
          if (!*(_DWORD *)(v26 + 40))
          {
            *(_QWORD *)(v26 + 8) = 0;
LABEL_159:
            sub_240B6F4BC("fatal error - scanner input buffer overflow");
          }
          v52 = *(void **)(v26 + 8);
          *(_DWORD *)(v26 + 24) = 2 * v50;
          v53 = (char *)malloc_type_realloc(v52, 2 * v50 + 2, 0x6B63ED5uLL);
          *(_QWORD *)(v26 + 8) = v53;
          if (!v53)
            goto LABEL_159;
          v51 = &v53[(int)v51 - (int)v52];
          *(_QWORD *)(a3 + 72) = v51;
          v26 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * *(_QWORD *)(a3 + 24));
        }
        while (*(_DWORD *)(v26 + 24) == v50);
      }
      v3 = a3;
      v54 = std::istream::get();
      if (v54 == -1)
      {
        *(_QWORD *)(a3 + 56) = 0;
        ++*(_DWORD *)(*(_QWORD *)(a3 + 160) + 12);
        v26 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * *(_QWORD *)(a3 + 24));
        v13 = (FILE **)MEMORY[0x24BDAC8D8];
        *(_QWORD *)(v26 + 32) = 0;
        if (v30)
        {
LABEL_67:
          v48 = 0;
          v49 = 2;
          *(_DWORD *)(v26 + 64) = 2;
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * *(_QWORD *)(a3 + 24)) + 8) + v30) = v54;
      *(_QWORD *)(a3 + 56) = 1;
      v55 = *(_QWORD *)(a3 + 160);
      ++*(_DWORD *)(v55 + 12);
      if (v54 == 10)
        *(_QWORD *)(v55 + 8) = (*(_DWORD *)(v55 + 8) + 1);
      v49 = 0;
      v26 = *(_QWORD *)(*(_QWORD *)(a3 + 40) + 8 * *(_QWORD *)(a3 + 24));
      *(_QWORD *)(v26 + 32) = 1;
      v48 = 1;
      v13 = (FILE **)MEMORY[0x24BDAC8D8];
LABEL_79:
      v56 = v48 + v30;
      if (v56 <= *(int *)(v26 + 24))
      {
        v63 = *(_QWORD *)(v26 + 8);
      }
      else
      {
        v57 = v13;
        v58 = v56 + (v48 >> 1);
        v59 = malloc_type_realloc(*(void **)(v26 + 8), v58, 0x6B63ED5uLL);
        v60 = *(_QWORD *)(v3 + 40);
        v61 = 8 * *(_QWORD *)(v3 + 24);
        *(_QWORD *)(*(_QWORD *)(v60 + v61) + 8) = v59;
        v62 = *(_QWORD *)(v60 + v61);
        v63 = *(_QWORD *)(v62 + 8);
        if (!v63)
          sub_240B6F4BC("out of dynamic memory in yy_get_next_buffer()");
        *(_DWORD *)(v62 + 24) = v58 - 2;
        v56 = *(_QWORD *)(v3 + 56) + v30;
        v13 = v57;
      }
      *(_QWORD *)(v3 + 56) = v56;
      *(_BYTE *)(v63 + v56) = 0;
      *(_BYTE *)(*(_QWORD *)(v3 + 56)
               + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * *(_QWORD *)(v3 + 24)) + 8)
               + 1) = 0;
      v64 = *(_QWORD *)(v3 + 40);
      v65 = *(_QWORD *)(v3 + 24);
      v16 = *(_QWORD *)(*(_QWORD *)(v64 + 8 * v65) + 8);
      *(_QWORD *)(v3 + 136) = v16;
      if (v49 != 1)
      {
        if (v49)
        {
          v29 = *(_BYTE **)(*(_QWORD *)(v64 + 8 * v65) + 8);
          v27 = *(_QWORD *)(v3 + 56);
LABEL_90:
          v14 = &v29[v27];
          *(_QWORD *)(v3 + 72) = &v29[v27];
          v21 = *(_DWORD *)(v3 + 84);
          v89 = v16;
          if (v16 < (unint64_t)v14)
          {
            v77 = (_BYTE *)v16;
            LODWORD(v17) = *(_DWORD *)(v3 + 84);
            while (*v77)
            {
              v78 = byte_240BBAEC4[*v77];
              if (word_240BBAFC4[(int)v17])
                goto LABEL_117;
LABEL_118:
              v79 = (int)v17;
              v80 = word_240BBB364[(int)v17] + v78;
              if ((_DWORD)v17 != (__int16)word_240BBB058[v80])
              {
                do
                {
                  v79 = (__int16)word_240BBB408[v79];
                  if (v79 >= 74)
                    v78 = *((unsigned __int8 *)&unk_240BBB4AC + v78);
                  v80 = word_240BBB364[v79] + v78;
                }
                while (word_240BBB058[v80] != (unsigned __int16)v79);
              }
              LODWORD(v17) = (__int16)word_240BBB4D8[v80];
              if (++v77 == v14)
                goto LABEL_26;
            }
            v78 = 1u;
            if (!word_240BBAFC4[(int)v17])
              goto LABEL_118;
LABEL_117:
            *(_DWORD *)(v3 + 112) = v17;
            *(_QWORD *)(v3 + 120) = v77;
            goto LABEL_118;
          }
          goto LABEL_27;
        }
        v81 = (_DWORD)v14 - v90;
        v14 = (_BYTE *)(v16 + (int)v14 - (int)v90 - 1);
        *(_QWORD *)(v3 + 72) = v14;
        v15 = *(_DWORD *)(v3 + 84);
        if (v81 >= 2)
        {
          v82 = (_BYTE *)v16;
          while (*v82)
          {
            v83 = byte_240BBAEC4[*v82];
            if (word_240BBAFC4[v15])
              goto LABEL_130;
LABEL_131:
            v84 = v15;
            v85 = word_240BBB364[v15] + v83;
            if (v15 != (__int16)word_240BBB058[v85])
            {
              do
              {
                v84 = (__int16)word_240BBB408[v84];
                if (v84 >= 74)
                  v83 = *((unsigned __int8 *)&unk_240BBB4AC + v83);
                v85 = word_240BBB364[v84] + v83;
              }
              while (word_240BBB058[v85] != (unsigned __int16)v84);
            }
            v15 = (__int16)word_240BBB4D8[v85];
            if (++v82 == v14)
              goto LABEL_17;
          }
          v83 = 1u;
          if (!word_240BBAFC4[v15])
            goto LABEL_131;
LABEL_130:
          *(_DWORD *)(v3 + 112) = v15;
          *(_QWORD *)(v3 + 120) = v82;
          goto LABEL_131;
        }
        goto LABEL_17;
      }
LABEL_84:
      *(_DWORD *)(v3 + 88) = 0;
      *(_QWORD *)(v3 + 72) = v16;
      v66 = *(_DWORD *)(v3 + 84);
      if (v66 >= 1)
        --v66;
      v23 = (v66 >> 1) + 17;
      if (!*(_DWORD *)(v3 + 132))
        goto LABEL_37;
    }
    if (v23 == 15)
    {
      fprintf(*v13, "--accepting default rule (\"%s\")\n", *(const char **)(v3 + 136));
LABEL_164:
      sub_240B6F4BC("flex scanner jammed");
    }
    fprintf(*v13, "--EOF (start condition %d)\n");
LABEL_37:
    switch(v23)
    {
      case 0:
        goto LABEL_106;
      case 1:
      case 12:
      case 13:
        continue;
      case 2:
        return 262;
      case 3:
        return 263;
      case 4:
        return 264;
      case 5:
        return 265;
      case 6:
        v87 = strlen(*(const char **)(v3 + 136));
        v88 = strndup((const char *)(*(_QWORD *)(v3 + 136) + 1), v87 - 2);
        goto LABEL_152;
      case 7:
        *__error() = 0;
        **(double **)(v3 + 152) = strtod(*(const char **)(v3 + 136), 0);
        if (*__error() == 34)
        {
          fprintf(*v13, "Error converting '%s' to an fp64 value.\n");
          goto LABEL_149;
        }
        result = 259;
        break;
      case 8:
        *__error() = 0;
        **(_QWORD **)(v3 + 152) = strtoll(*(const char **)(v3 + 136), 0, 10);
        if (*__error() != 34)
          goto LABEL_155;
        fprintf(*v13, "Error converting '%s' to an i64 value.\n");
        goto LABEL_149;
      case 9:
        *__error() = 0;
        **(_QWORD **)(v3 + 152) = strtoll(*(const char **)(v3 + 136), 0, 16);
        if (*__error() == 34)
        {
          fprintf(*v13, "Error converting hex value '%s' to an i64.\n");
LABEL_149:
          result = 0;
        }
        else
        {
LABEL_155:
          result = 260;
        }
        break;
      case 10:
        **(_QWORD **)(v3 + 152) = strdup(*(const char **)(v3 + 136));
        return 258;
      case 11:
        v88 = strdup(*(const char **)(v3 + 136));
LABEL_152:
        **(_QWORD **)(v3 + 152) = v88;
        return 261;
      case 14:
        **(_BYTE **)(v3 + 152) = **(_BYTE **)(v3 + 136);
        return **(char **)(v3 + 136);
      case 15:
        goto LABEL_164;
      case 16:
        goto LABEL_38;
      case 17:
        return 0;
      default:
        sub_240B6F4BC("fatal flex scanner internal error--no action found");
    }
    return result;
  }
}

double sub_240B6F41C(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  double result;
  _QWORD *v8;

  v2 = (void *)a1[5];
  if (v2)
  {
    v3 = a1[4];
    if (a1[3] >= (unint64_t)(v3 - 1))
    {
      v4 = v3 + 8;
      v5 = (char *)malloc_type_realloc(v2, 8 * (v3 + 8), 0x6B63ED5uLL);
      a1[5] = v5;
      if (v5)
      {
        v6 = &v5[8 * a1[4]];
        result = 0.0;
        *((_OWORD *)v6 + 2) = 0u;
        *((_OWORD *)v6 + 3) = 0u;
        *(_OWORD *)v6 = 0u;
        *((_OWORD *)v6 + 1) = 0u;
        a1[4] = v4;
        return result;
      }
LABEL_8:
      sub_240B6F4BC("out of dynamic memory in yyensure_buffer_stack()");
    }
  }
  else
  {
    v8 = malloc_type_malloc(8uLL, 0xA4E4DD95uLL);
    a1[5] = v8;
    if (!v8)
      goto LABEL_8;
    *v8 = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 3) = xmmword_240BBB810;
  }
  return result;
}

void sub_240B6F4BC(const char *a1)
{
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n", a1);
  exit(2);
}

int *sub_240B6F4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(v4 + 8 * v5))
      goto LABEL_6;
  }
  sub_240B6F41C((_QWORD *)a2);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = malloc_type_malloc(0x48uLL, 0xA4E4DD95uLL);
  if (!v7
    || (v8 = (uint64_t)v7,
        v7[6] = 0x4000,
        v9 = malloc_type_malloc(0x4002uLL, 0xA4E4DD95uLL),
        (*(_QWORD *)(v8 + 8) = v9) == 0))
  {
    sub_240B6F4BC("out of dynamic memory in yy_create_buffer()");
  }
  *(_DWORD *)(v8 + 40) = 1;
  sub_240B6F5F8(v8, v6, a2);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v5) = v8;
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
LABEL_6:
    v10 = *(_QWORD *)(v4 + 8 * v5);
  else
    v10 = 0;
  result = sub_240B6F5F8(v10, a1, a2);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = 8 * *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(v12 + v13);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(v14 + 32);
  v15 = *(_BYTE **)(v14 + 16);
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 136) = v15;
  *(_QWORD *)(a2 + 8) = **(_QWORD **)(v12 + v13);
  *(_BYTE *)(a2 + 48) = *v15;
  return result;
}

int *sub_240B6F5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  int *result;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  v6 = *__error();
  if (a1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    **(_BYTE **)(a1 + 8) = 0;
    *(_BYTE *)(*(_QWORD *)(a1 + 8) + 1) = 0;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 64) = 0;
    v7 = *(_QWORD *)(a3 + 40);
    if (v7 && *(_QWORD *)(v7 + 8 * *(_QWORD *)(a3 + 24)) == a1)
    {
      v9 = 8 * *(_QWORD *)(a3 + 24);
      v10 = *(_QWORD *)(v7 + v9);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v10 + 32);
      v11 = *(_BYTE **)(v10 + 16);
      *(_QWORD *)(a3 + 72) = v11;
      *(_QWORD *)(a3 + 136) = v11;
      *(_QWORD *)(a3 + 8) = **(_QWORD **)(v7 + v9);
      *(_BYTE *)(a3 + 48) = *v11;
      *(_QWORD *)a1 = a2;
      *(_DWORD *)(a1 + 60) = 1;
      goto LABEL_10;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
  }
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  if (v7)
  {
LABEL_10:
    if (*(_QWORD *)(v7 + 8 * *(_QWORD *)(a3 + 24)) == a1)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (a1)
LABEL_8:
    *(_QWORD *)(a1 + 52) = 1;
LABEL_9:
  *(_DWORD *)(a1 + 44) = 0;
  result = __error();
  *result = v6;
  return result;
}

uint64_t sub_240B6F70C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  int *v8;
  int v9;

  if (a2)
  {
    v4 = malloc_type_malloc(0xA8uLL, 0xA4E4DD95uLL);
    *a2 = v4;
    if (v4)
    {
      v5 = v4;
      result = 0;
      v5[20] = 0;
      *((_OWORD *)v5 + 8) = 0u;
      *((_OWORD *)v5 + 9) = 0u;
      *((_OWORD *)v5 + 6) = 0u;
      *((_OWORD *)v5 + 7) = 0u;
      *((_OWORD *)v5 + 4) = 0u;
      *((_OWORD *)v5 + 5) = 0u;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
      *(_QWORD *)*a2 = a1;
      v7 = (_QWORD *)*a2;
      *((_DWORD *)v7 + 23) = 0;
      *((_DWORD *)v7 + 24) = 0;
      v7[13] = 0;
      *(_OWORD *)(v7 + 1) = 0u;
      *(_OWORD *)(v7 + 3) = 0u;
      v7[5] = 0;
      v7[9] = 0;
      v7[10] = 0;
      return result;
    }
    v8 = __error();
    v9 = 12;
  }
  else
  {
    v8 = __error();
    v9 = 22;
  }
  *v8 = v9;
  return 1;
}

uint64_t sub_240B6F7B0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;

  v2 = *(_QWORD **)(a1 + 40);
  if (v2)
  {
    v3 = &v2[*(_QWORD *)(a1 + 24)];
    for (i = *v3; *v3; i = *v3)
    {
      *v3 = 0;
      if (*(_DWORD *)(i + 40))
        free(*(void **)(i + 8));
      free((void *)i);
      v5 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5) = 0;
      v2 = *(_QWORD **)(a1 + 40);
      if (!v2)
        break;
      v6 = v2[v5];
      if (v6)
      {
        v2[v5] = 0;
        if (*(_DWORD *)(v6 + 40))
          free(*(void **)(v6 + 8));
        free((void *)v6);
        v5 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v5) = 0;
        if (v5)
          *(_QWORD *)(a1 + 24) = --v5;
        v2 = *(_QWORD **)(a1 + 40);
        if (!v2)
          break;
        v7 = v2[v5];
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 32);
          v9 = *(_BYTE **)(v7 + 16);
          *(_QWORD *)(a1 + 72) = v9;
          *(_QWORD *)(a1 + 136) = v9;
          v10 = (_QWORD *)v2[v5];
          *(_QWORD *)(a1 + 56) = v8;
          *(_QWORD *)(a1 + 8) = *v10;
          *(_BYTE *)(a1 + 48) = *v9;
          *(_DWORD *)(a1 + 88) = 1;
        }
      }
      v3 = &v2[v5];
    }
  }
  free(v2);
  *(_QWORD *)(a1 + 40) = 0;
  free(*(void **)(a1 + 104));
  free((void *)a1);
  return 0;
}

void sub_240B6F8C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_240B916EC(a1, &v13);
  v3 = v13;
  v4 = v14;
  if (v13 != v14)
  {
    do
    {
      v5 = *(_QWORD *)v3;
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)v3 + 16))(*(_QWORD *)v3) == 1)
      {
        switch(*(_DWORD *)(v5 + 96))
        {
          case 0:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_240B6FF68(__p, *(void **)(v5 + 48), *(_QWORD *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              v10 = *(_QWORD *)(v5 + 64);
            }
            *(_QWORD *)&v11 = *(_QWORD *)(v5 + 72);
            sub_240B705CC(a2, (uint64_t)__p, (__int128 *)__p);
            goto LABEL_6;
          case 1:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_240B6FF68(__p, *(void **)(v5 + 48), *(_QWORD *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              v10 = *(_QWORD *)(v5 + 64);
            }
            *(_QWORD *)&v11 = *(_QWORD *)(v5 + 72);
            sub_240B70F68(a2, (uint64_t)__p, (uint64_t)__p);
            goto LABEL_6;
          case 2:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_240B6FF68(__p, *(void **)(v5 + 48), *(_QWORD *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              v10 = *(_QWORD *)(v5 + 64);
            }
            if (*(char *)(v5 + 95) < 0)
            {
              sub_240B6FF68(&v11, *(void **)(v5 + 72), *(_QWORD *)(v5 + 80));
            }
            else
            {
              v11 = *(_OWORD *)(v5 + 72);
              v12 = *(_QWORD *)(v5 + 88);
            }
            sub_240B712F4(a2, (uint64_t)__p, (uint64_t)__p);
            if (SHIBYTE(v12) < 0)
              operator delete((void *)v11);
            goto LABEL_6;
          case 3:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_240B6FF68(__p, *(void **)(v5 + 48), *(_QWORD *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              v10 = *(_QWORD *)(v5 + 64);
            }
            v11 = 0uLL;
            v12 = 0;
            sub_240B700B4((char *)&v11, *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72)) >> 3));
            sub_240B71690(a2, (uint64_t)__p, (uint64_t)__p);
            v6 = v11;
            if ((_QWORD)v11)
            {
              v7 = *((_QWORD *)&v11 + 1);
              v8 = (void *)v11;
              if (*((_QWORD *)&v11 + 1) != (_QWORD)v11)
              {
                do
                {
                  if (*(char *)(v7 - 1) < 0)
                    operator delete(*(void **)(v7 - 24));
                  v7 -= 24;
                }
                while (v7 != v6);
                v8 = (void *)v11;
              }
              *((_QWORD *)&v11 + 1) = v6;
              operator delete(v8);
            }
            goto LABEL_6;
          case 4:
            sub_240B7026C(__p, (__int128 *)(v5 + 48), v5 + 72);
            sub_240B71A2C(a2, (uint64_t)__p, (uint64_t)__p);
            if ((_QWORD)v11)
            {
              *((_QWORD *)&v11 + 1) = v11;
              operator delete((void *)v11);
            }
LABEL_6:
            if (SHIBYTE(v10) < 0)
              operator delete(__p[0]);
            break;
          default:
            break;
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
    v3 = v13;
  }
  if (v3)
  {
    v14 = v3;
    operator delete(v3);
  }
}

void sub_240B6FB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  sub_240B70478(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_240B6FC28(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0)
    goto LABEL_5;
  return a1;
}

uint64_t sub_240B6FC74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_240B6FCF4(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_240B6FD34(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      sub_240BA16FC(a2, v3, &v16);
      v14 = 0;
      v15 = 0;
      v7 = v17;
      if (v17)
      {
        v7 = std::__shared_weak_count::lock(v17);
        v15 = v7;
        if (v7)
          v14 = v16;
      }
      v8 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v8 < *(_QWORD *)(a3 + 16))
        break;
      v10 = sub_240B70338((char **)a3, (uint64_t)&v14);
      v11 = v15;
      *(_QWORD *)(a3 + 8) = v10;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
          v9 = v17;
          if (!v17)
            goto LABEL_3;
LABEL_15:
          std::__shared_weak_count::__release_weak(v9);
          goto LABEL_3;
        }
      }
      v9 = v17;
      if (v17)
        goto LABEL_15;
LABEL_3:
      v3 += 24;
      if (v3 == v4)
        return;
    }
    *v8 = v14;
    v8[1] = (uint64_t)v7;
    *(_QWORD *)(a3 + 8) = v8 + 2;
    v9 = v17;
    if (!v17)
      goto LABEL_3;
    goto LABEL_15;
  }
}

void sub_240B6FE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  void **v12;

  sub_240B6FE78((uint64_t)&a9);
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  sub_240B6FED0(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_240B6FE78(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void **sub_240B6FED0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_240B6FF68(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_240B6FFF4();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_240B6FFF4()
{
  sub_240B70008("basic_string");
}

void sub_240B70008(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_240B70058(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_25110BB68, MEMORY[0x24BEDAAF0]);
}

void sub_240B70044(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_240B70058(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void sub_240B7007C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_25110BB98, MEMORY[0x24BEDABB8]);
}

void sub_240B700A4(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

char *sub_240B700B4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_240B70258();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_240B6FF68(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_240B70194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_240B701D8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_240B701D8(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = (void **)**a1;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_240B70258()
{
  sub_240B70008("vector");
}

_QWORD *sub_240B7026C(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  const void *v6;
  int64_t v7;
  char *v8;
  char *v9;

  if (*((char *)a2 + 23) < 0)
  {
    sub_240B6FF68(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  v6 = *(const void **)a3;
  v7 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v7)
  {
    if (v7 < 0)
      sub_240B70258();
    v8 = (char *)operator new(v7);
    __dst[3] = v8;
    __dst[4] = v8;
    v9 = &v8[8 * (v7 >> 3)];
    __dst[5] = v9;
    memcpy(v8, v6, v7);
    __dst[4] = v9;
  }
  return __dst;
}

void sub_240B70314(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_240BBA5A4(v1);
  _Unwind_Resume(a1);
}

char *sub_240B70338(char **a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v3 = (a1[1] - *a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_240B70258();
  v5 = a1[2] - *a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_240B7007C();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = v11 + 16;
  v13 = &v10[v9];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15)
      return v12;
    goto LABEL_19;
  }
  do
  {
    v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v17 = *a1;
  v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v15 -= 16;
    }
    while (v15 != v17);
    v15 = v17;
  }
  if (v15)
LABEL_19:
    operator delete(v15);
  return v12;
}

uint64_t sub_240B70478(uint64_t a1)
{
  void **v2;
  void **v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      v4 = *((unsigned int *)v2 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, void **))off_25110BBB0[v4])(&v7, v2 + 5);
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void sub_240B7052C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_240B70540(uint64_t a1, void **a2)
{
  void **v2;
  void **v4;
  void *v5;

  v2 = (void **)*a2;
  if (*a2)
  {
    v4 = (void **)a2[1];
    v5 = *a2;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v2);
      v5 = *a2;
    }
    a2[1] = v2;
    operator delete(v5);
  }
}

void sub_240B705B8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

unsigned __int8 *sub_240B705CC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  v22 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x48uLL);
  v23 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v24 = *((_QWORD *)a3 + 2);
  v25 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  v40[0] = v15;
  v40[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = v23;
  *((_QWORD *)v15 + 4) = v24;
  *((_QWORD *)v15 + 5) = v25;
  *((_DWORD *)v15 + 16) = 0;
  v41 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v28 = 1;
    if (v11 >= 3)
      v28 = (v11 & (v11 - 1)) != 0;
    v29 = v28 | (2 * v11);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v36 = *(_QWORD *)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v15 = *v37;
LABEL_73:
    *v37 = v15;
    goto LABEL_74;
  }
  *(_QWORD *)v15 = *v22;
  *v22 = v15;
  *(_QWORD *)(v36 + 8 * v3) = v22;
  if (*(_QWORD *)v15)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v38 >= v11)
        v38 %= v11;
    }
    else
    {
      v38 &= v11 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B70938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B70950((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B70950(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(unsigned int *)(v2 + 64);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_25110BBB0[v3])(&v5, v2 + 40);
      *(_DWORD *)(v2 + 64) = -1;
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_240B709D4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;

  if (a3 > 0x20)
  {
    if (a3 <= 0x40)
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = *(uint64_t *)((char *)a2 + a3 - 8) + v8;
      v16 = __ROR8__(v15 + v14, 52);
      v17 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v18 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v19 = v18 + v15;
      v20 = 0x9AE16A3B2F90404FLL;
      v21 = 0xC3A5C85C97CB3127 * (v19 + v17)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + v16
           + __ROR8__(v18, 31));
      v22 = v17 - 0x3C5A37A36834CED9 * (v21 ^ (v21 >> 47));
      return (v22 ^ (v22 >> 47)) * v20;
    }
    v29 = *(uint64_t *)((char *)a2 + a3 - 48);
    v30 = *(uint64_t *)((char *)a2 + a3 - 40);
    v31 = *(uint64_t *)((char *)a2 + a3 - 24);
    v33 = *(uint64_t *)((char *)a2 + a3 - 64);
    v32 = *(uint64_t *)((char *)a2 + a3 - 56);
    v34 = *(uint64_t *)((char *)a2 + a3 - 16);
    v35 = *(uint64_t *)((char *)a2 + a3 - 8);
    v36 = v32 + v34;
    v37 = 0x9DDFEA08EB382D69
        * (v31 ^ ((0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))));
    v38 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
    v39 = v33 + a3 + v32 + v29;
    v40 = v39 + v30;
    v41 = __ROR8__(v39, 44) + v33 + a3 + __ROR8__(v30 + v33 + a3 - 0x622015F714C7D297 * (v37 ^ (v37 >> 47)), 21);
    v42 = v32 + v34 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
    v43 = v42 + v31 + v34;
    v44 = __ROR8__(v43, 44);
    v45 = v43 + v35;
    v46 = v44 + v42 + __ROR8__(v42 + v30 + v35, 21);
    v48 = *a2;
    v47 = a2 + 4;
    v49 = v48 - 0x4B6D499041670D8DLL * v30;
    v50 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v51 = *(v47 - 3);
      v52 = v49 + v40 + v36 + v51;
      v53 = v47[2];
      v54 = v47[3];
      v55 = v47[1];
      v36 = v55 + v40 - 0x4B6D499041670D8DLL * __ROR8__(v36 + v41 + v53, 42);
      v56 = v38 + v45;
      v57 = *(v47 - 2);
      v58 = *(v47 - 1);
      v59 = *(v47 - 4) - 0x4B6D499041670D8DLL * v41;
      v60 = v59 + v45 + v58;
      v61 = v59 + v51 + v57;
      v40 = v61 + v58;
      v62 = __ROR8__(v61, 44) + v59;
      v63 = (0xB492B66FBE98F273 * __ROR8__(v52, 37)) ^ v46;
      v49 = 0xB492B66FBE98F273 * __ROR8__(v56, 33);
      v41 = v62 + __ROR8__(v60 + v63, 21);
      v64 = v49 + v46 + *v47;
      v45 = v64 + v55 + v53 + v54;
      v46 = __ROR8__(v64 + v55 + v53, 44) + v64 + __ROR8__(v36 + v57 + v64 + v54, 21);
      v47 += 8;
      v38 = v63;
      v50 += 64;
    }
    while (v50);
    v65 = v49
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) >> 47));
    v66 = 0x9DDFEA08EB382D69
        * (v65 ^ (v63
                - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) ^ ((0x9DDFEA08EB382D69 * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) >> 47))));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) ^ ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) >> 47));
  }
  else
  {
    if (a3 > 0x10)
    {
      v23 = a2[1];
      v24 = 0xB492B66FBE98F273 * *a2;
      v25 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v24 - v23, 43);
      v26 = v24
          + a3
          + __ROR8__(v23 ^ 0xC949D7C7509E6557, 20)
          - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
      v20 = 0x9DDFEA08EB382D69;
      v27 = 0x9DDFEA08EB382D69 * ((v25 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v26);
      v28 = v26 ^ (v27 >> 47) ^ v27;
LABEL_8:
      v22 = 0x9DDFEA08EB382D69 * v28;
      return (v22 ^ (v22 >> 47)) * v20;
    }
    if (a3 >= 9)
    {
      v3 = *(uint64_t *)((char *)a2 + a3 - 8);
      v4 = __ROR8__(v3 + a3, a3);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
    }
    if (a3 >= 4)
    {
      v67 = *(unsigned int *)((char *)a2 + a3 - 4);
      v20 = 0x9DDFEA08EB382D69;
      v68 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v67);
      v28 = v67 ^ (v68 >> 47) ^ v68;
      goto LABEL_8;
    }
    result = 0x9AE16A3B2F90404FLL;
    if (a3)
    {
      v69 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v69 ^ (v69 >> 47));
    }
  }
  return result;
}

void sub_240B70E0C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;

  if (a2)
  {
    if (a2 >> 61)
      sub_240B7007C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            *v7 = *v11;
            v12 = 8 * v13;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + v12);
            **(_QWORD **)(*(_QWORD *)a1 + v12) = v11;
            v11 = v7;
          }
          v13 = v8;
LABEL_19:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unsigned __int8 *sub_240B70F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v37, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  v22 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v15 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_QWORD *)v15 + 5) = *(_QWORD *)(a3 + 24);
  *((_DWORD *)v15 + 16) = 1;
  v38 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v15 = *v34;
LABEL_73:
    *v34 = v15;
    goto LABEL_74;
  }
  *(_QWORD *)v15 = *v22;
  *v22 = v15;
  *(_QWORD *)(v33 + 8 * v3) = v22;
  if (*(_QWORD *)v15)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B712DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B70950((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_240B712F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v37, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  v22 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v15 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v15 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *((_DWORD *)v15 + 16) = 2;
  v38 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v15 = *v34;
LABEL_73:
    *v34 = v15;
    goto LABEL_74;
  }
  *(_QWORD *)v15 = *v22;
  *v22 = v15;
  *(_QWORD *)(v33 + 8 * v3) = v22;
  if (*(_QWORD *)v15)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B71678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B70950((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_240B71690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v37, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  v22 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v15 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v15 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *((_DWORD *)v15 + 16) = 3;
  v38 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v15 = *v34;
LABEL_73:
    *v34 = v15;
    goto LABEL_74;
  }
  *(_QWORD *)v15 = *v22;
  *v22 = v15;
  *(_QWORD *)(v33 + 8 * v3) = v22;
  if (*(_QWORD *)v15)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B71A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B70950((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_240B71A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  unsigned __int8 *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v37, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = *((_QWORD *)v15 + 1);
          if (v18 == v10)
          {
            v19 = v15[39];
            if ((v19 & 0x80u) == 0)
              v20 = v15[39];
            else
              v20 = *((_QWORD *)v15 + 3);
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((_QWORD *)v15 + 3)))
                  return v15;
              }
              else
              {
                if (!v15[39])
                  return v15;
                v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  v22 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v15 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v15 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *((_DWORD *)v15 + 16) = 4;
  v38 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v15 = *v34;
LABEL_73:
    *v34 = v15;
    goto LABEL_74;
  }
  *(_QWORD *)v15 = *v22;
  *v22 = v15;
  *(_QWORD *)(v33 + 8 * v3) = v22;
  if (*(_QWORD *)v15)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B71DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B70950((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_240B71DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 4)
    *(_QWORD *)&result = sub_240BB7D38((_QWORD *)*(_QWORD *)(a3 + 32), 5, a2 + 48).n128_u64[0];
  return result;
}

void sub_240B71E1C()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_240B71E30(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _DWORD *v5;
  char *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  void *v10;
  void **v11;
  void **v12;
  uint64_t v13;
  void *v14;
  int v15;
  void *v16[2];
  void *__p;
  void *v18[2];
  void *v19;
  char v20;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 5)
  {
    sub_240B6F8C8(a2, (uint64_t)v18);
    v15 = 0;
    sub_240B72000((uint64_t)v16, (uint64_t)v18);
    v5 = (_DWORD *)a3[26];
    if ((unint64_t)v5 >= a3[27])
    {
      v6 = sub_240B726A0(a3 + 25, &v15);
    }
    else
    {
      *v5 = v15;
      sub_240B72000((uint64_t)(v5 + 2), (uint64_t)v16);
      v6 = (char *)(v5 + 12);
      a3[26] = v5 + 12;
    }
    a3[26] = v6;
    v7 = (void **)__p;
    if (__p)
    {
      do
      {
        v8 = (void **)*v7;
        v9 = *((unsigned int *)v7 + 16);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, void **))off_25110BC28[v9])(&v20, v7 + 5);
        *((_DWORD *)v7 + 16) = -1;
        if (*((char *)v7 + 39) < 0)
          operator delete(v7[2]);
        operator delete(v7);
        v7 = v8;
      }
      while (v8);
    }
    v10 = v16[0];
    v16[0] = 0;
    if (v10)
      operator delete(v10);
    v11 = (void **)v19;
    if (v19)
    {
      do
      {
        v12 = (void **)*v11;
        v13 = *((unsigned int *)v11 + 16);
        if ((_DWORD)v13 != -1)
          ((void (*)(int *, void **))off_25110BC28[v13])(&v15, v11 + 5);
        *((_DWORD *)v11 + 16) = -1;
        if (*((char *)v11 + 39) < 0)
          operator delete(v11[2]);
        operator delete(v11);
        v11 = v12;
      }
      while (v12);
    }
    v14 = v18[0];
    v18[0] = 0;
    if (v14)
      operator delete(v14);
  }
}

void sub_240B71FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_240B70478(v7);
  sub_240B70478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_240B71FEC()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

uint64_t sub_240B72000(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_240B70E0C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_240B72130(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_240B72118(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_240B70478(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B72130(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD v36[2];
  char v37;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v36, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  v22 = operator new(0x48uLL);
  v36[0] = v22;
  v36[1] = a1 + 16;
  v37 = 0;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v10;
  sub_240B724C4((char *)v22 + 16, a3);
  v37 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *(_QWORD *)v36[0] = *v33;
    *v33 = v36[0];
  }
  else
  {
    *(_QWORD *)v36[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v36[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v36[0])
    {
      v34 = *(_QWORD *)(*(_QWORD *)v36[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v34 >= v11)
          v34 %= v11;
      }
      else
      {
        v34 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v36[0];
    }
  }
  v15 = (uint64_t *)v36[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B724A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B70950((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_240B724C4(char *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  _BYTE v7[2];

  if (*((char *)a2 + 23) < 0)
  {
    sub_240B6FF68(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[24] = 0;
  *((_DWORD *)__dst + 12) = -1;
  v5 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_BYTE *, char *, char *))off_25110BC50[v5])(v7, __dst + 24, (char *)a2 + 24);
    *((_DWORD *)__dst + 12) = v5;
  }
  return __dst;
}

void sub_240B7255C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_25110BC28[v16])(&a13, v14);
  *(_DWORD *)(v13 + 48) = -1;
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  _Unwind_Resume(exception_object);
}

void sub_240B725A8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

double sub_240B725B4(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void *sub_240B725C0(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_240B6FF68(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

char *sub_240B725EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return sub_240B700B4((char *)a2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
}

void sub_240B72614(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v7;
  char *v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *(const void **)a3;
  v3 = *(_QWORD *)(a3 + 8);
  v5 = v3 - *(_QWORD *)a3;
  if (v3 != *(_QWORD *)a3)
  {
    if (v5 < 0)
      sub_240B70258();
    v7 = (char *)operator new(v3 - *(_QWORD *)a3);
    *a2 = v7;
    a2[1] = v7;
    v8 = &v7[8 * (v5 >> 3)];
    a2[2] = v8;
    memcpy(v7, v4, v5);
    a2[1] = v8;
  }
}

void sub_240B72684(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_240B726A0(_QWORD *a1, _DWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v17;
  __int128 v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_240B70258();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_240B7007C();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v17 = &v7[48 * v3];
  *((_QWORD *)&v18 + 1) = &v7[48 * v6];
  *(_DWORD *)v17 = *a2;
  sub_240B72000((uint64_t)(v17 + 8), (uint64_t)(a2 + 2));
  v9 = (char *)*a1;
  v8 = a1[1];
  for (i = 56; ; i -= 48)
  {
    v11 = v8 + i;
    if ((char *)(v8 + i - 56) == v9)
      break;
    *(_DWORD *)&v17[i - 104] = *(_DWORD *)(v11 - 104);
    v12 = (uint64_t)&v17[i - 96];
    sub_240B72000(v12, v11 - 96);
  }
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = &v17[i - 56];
  *(_QWORD *)&v18 = v17 + 48;
  *(_OWORD *)(a1 + 1) = v18;
  if (v13 != v14)
  {
    do
    {
      v15 = v13 - 48;
      sub_240B70478((uint64_t)(v13 - 40));
      v13 = v15;
    }
    while (v15 != v14);
  }
  if (v14)
    operator delete(v14);
  return v17 + 48;
}

void sub_240B72820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_240B72858((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240B72858(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    sub_240B70478(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_240B728AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _OWORD *v7;
  char v8;
  __int128 v9;
  void *v10;
  size_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  uint64_t *i;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  unint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _OWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _OWORD *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void **v61;
  void **v62;
  uint64_t v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  _BYTE v67[24];
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void *__p[2];
  char v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  _QWORD v80[2];
  void **v81;
  void **v82;
  char v83;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 6
    || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2))
  {
    sub_240B6F8C8(a2, (uint64_t)v80);
    v5 = operator new();
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_DWORD *)(v5 + 128) = 1065353216;
    *(_QWORD *)&v79 = v5;
    v6 = (_QWORD *)operator new();
    *v6 = &off_25110BD68;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v5;
    *((_QWORD *)&v79 + 1) = v6;
    v7 = (_OWORD *)v79;
    if ((_QWORD)v79 != a2 + 48)
    {
      v8 = *(_BYTE *)(a2 + 71);
      if (*(char *)(v79 + 23) < 0)
      {
        if (v8 >= 0)
          v10 = (void *)(a2 + 48);
        else
          v10 = *(void **)(a2 + 48);
        if (v8 >= 0)
          v11 = *(unsigned __int8 *)(a2 + 71);
        else
          v11 = *(_QWORD *)(a2 + 56);
        sub_240B734B8((void **)v79, v10, v11);
      }
      else if ((*(_BYTE *)(a2 + 71) & 0x80) != 0)
      {
        sub_240B733F4((_QWORD *)v79, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
      }
      else
      {
        v9 = *(_OWORD *)(a2 + 48);
        *(_QWORD *)(v79 + 16) = *(_QWORD *)(a2 + 64);
        *v7 = v9;
      }
    }
    v73 = 6;
    strcpy((char *)__p, "inputs");
    v82 = __p;
    v12 = sub_240B73C48((uint64_t)v80, (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v82);
    LOBYTE(v74) = 0;
    v76 = -1;
    v13 = *((unsigned int *)v12 + 16);
    if ((_DWORD)v13 == -1
      || (((void (*)(char *, uint64_t *, unsigned __int8 *))off_25110BCE0[v13])(&v83, &v74, v12 + 40),
          v76 = v13,
          (_DWORD)v13 != 3))
    {
      sub_240B735D8();
    }
    v77 = 0uLL;
    v78 = 0;
    sub_240B700B4((char *)&v77, v74, v75, 0xAAAAAAAAAAAAAAABLL * ((v75 - v74) >> 3));
    sub_240B6FD34((uint64_t *)&v77, a3, (uint64_t)&v65);
    v14 = v79;
    v15 = v79 + 24;
    v16 = *(_QWORD *)(v79 + 24);
    if (v16)
    {
      v17 = *(_QWORD *)(v79 + 32);
      v18 = *(void **)(v79 + 24);
      if (v17 != v16)
      {
        do
        {
          v19 = *(std::__shared_weak_count **)(v17 - 8);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v17 -= 16;
        }
        while (v17 != v16);
        v18 = *(void **)v15;
      }
      *(_QWORD *)(v14 + 32) = v16;
      operator delete(v18);
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
    }
    *(_OWORD *)(v14 + 24) = v65;
    *(_QWORD *)(v14 + 40) = v66;
    v66 = 0;
    v65 = 0uLL;
    v22 = v77;
    if ((_QWORD)v77)
    {
      v23 = *((_QWORD *)&v77 + 1);
      v24 = (void *)v77;
      if (*((_QWORD *)&v77 + 1) != (_QWORD)v77)
      {
        do
        {
          if (*(char *)(v23 - 1) < 0)
            operator delete(*(void **)(v23 - 24));
          v23 -= 24;
        }
        while (v23 != v22);
        v24 = (void *)v77;
      }
      *((_QWORD *)&v77 + 1) = v22;
      operator delete(v24);
    }
    if (v76 != -1)
      ((void (*)(void ***, uint64_t *))off_25110BCB8[v76])(&v82, &v74);
    v76 = -1;
    if (v73 < 0)
      operator delete(__p[0]);
    v73 = 7;
    strcpy((char *)__p, "outputs");
    v82 = __p;
    v25 = sub_240B73C48((uint64_t)v80, (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v82);
    LOBYTE(v69) = 0;
    v71 = -1;
    v26 = *((unsigned int *)v25 + 16);
    if ((_DWORD)v26 == -1
      || (((void (*)(char *, uint64_t *, unsigned __int8 *))off_25110BCE0[v26])(&v83, &v69, v25 + 40),
          v71 = v26,
          (_DWORD)v26 != 3))
    {
      sub_240B735D8();
    }
    v77 = 0uLL;
    v78 = 0;
    sub_240B700B4((char *)&v77, v69, v70, 0xAAAAAAAAAAAAAAABLL * ((v70 - v69) >> 3));
    sub_240B6FD34((uint64_t *)&v77, a3, (uint64_t)&v65);
    v27 = v79;
    v28 = v79 + 48;
    v29 = *(_QWORD *)(v79 + 48);
    if (v29)
    {
      v30 = *(_QWORD *)(v79 + 56);
      v31 = *(void **)(v79 + 48);
      if (v30 != v29)
      {
        do
        {
          v32 = *(std::__shared_weak_count **)(v30 - 8);
          if (v32)
          {
            v33 = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v30 -= 16;
        }
        while (v30 != v29);
        v31 = *(void **)v28;
      }
      *(_QWORD *)(v27 + 56) = v29;
      operator delete(v31);
      *(_QWORD *)v28 = 0;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 16) = 0;
    }
    *(_OWORD *)(v27 + 48) = v65;
    *(_QWORD *)(v27 + 64) = v66;
    v66 = 0;
    v65 = 0uLL;
    v35 = v77;
    if ((_QWORD)v77)
    {
      v36 = *((_QWORD *)&v77 + 1);
      v37 = (void *)v77;
      if (*((_QWORD *)&v77 + 1) != (_QWORD)v77)
      {
        do
        {
          if (*(char *)(v36 - 1) < 0)
            operator delete(*(void **)(v36 - 24));
          v36 -= 24;
        }
        while (v36 != v35);
        v37 = (void *)v77;
      }
      *((_QWORD *)&v77 + 1) = v35;
      operator delete(v37);
    }
    if (v71 != -1)
      ((void (*)(void ***, uint64_t *))off_25110BCB8[v71])(&v82, &v69);
    v71 = -1;
    if (v73 < 0)
      operator delete(__p[0]);
    v38 = *(uint64_t **)(a2 + 96);
    for (i = *(uint64_t **)(a2 + 104); v38 != i; ++v38)
    {
      sub_240B74FD0(*v38, a3, (uint64_t)&v65);
      if (v68 == 1)
      {
        v41 = *(_QWORD *)(v79 + 72);
        v40 = *(_QWORD *)(v79 + 80);
        *(_QWORD *)&v77 = v67;
        sub_240B73FD4(v79 + 96, (uint64_t)v67, (uint64_t)&unk_240BBBF40, (__int128 **)&v77)[5] = (v40 - v41) >> 4;
      }
      else
      {
        v42 = sub_240BB84D8(0x68uLL);
        v43 = v42;
        if (v68)
          sub_240B735D8();
        sub_240B73268((uint64_t)v42, (uint64_t)&v65);
        *(_QWORD *)&v77 = v43;
        v44 = (_QWORD *)operator new();
        v44[1] = 0;
        v45 = v44 + 1;
        *v44 = &off_25110BDA0;
        v44[2] = 0;
        v44[3] = v43;
        *((_QWORD *)&v77 + 1) = v44;
        v46 = v79;
        v47 = *(_QWORD **)(v79 + 80);
        if ((unint64_t)v47 >= *(_QWORD *)(v79 + 88))
        {
          v49 = sub_240B73800(v79 + 72, &v77);
        }
        else
        {
          *v47 = v77;
          v47[1] = v44;
          do
            v48 = __ldxr(v45);
          while (__stxr(v48 + 1, v45));
          v49 = v47 + 2;
        }
        *(_QWORD *)(v46 + 80) = v49;
        v50 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
        if (*((_QWORD *)&v77 + 1))
        {
          v51 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }
      }
      if (v68 != -1)
        ((void (*)(__int128 *, __int128 *))off_25110BD28[v68])(&v77, &v65);
    }
    v53 = *(_QWORD **)(a3 + 56);
    if ((unint64_t)v53 >= *(_QWORD *)(a3 + 64))
    {
      v57 = sub_240B73800(a3 + 48, &v79);
    }
    else
    {
      *v53 = v79;
      v54 = *((_QWORD *)&v79 + 1);
      v53[1] = *((_QWORD *)&v79 + 1);
      if (v54)
      {
        v55 = (unint64_t *)(v54 + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      v57 = v53 + 2;
    }
    *(_QWORD *)(a3 + 56) = v57;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
    if (!*((_QWORD *)&v79 + 1))
      goto LABEL_93;
    v59 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
      v61 = v81;
      if (v81)
      {
        do
        {
LABEL_96:
          v62 = (void **)*v61;
          v63 = *((unsigned int *)v61 + 16);
          if ((_DWORD)v63 != -1)
            ((void (*)(__int128 *, void **))off_25110BCB8[v63])(&v65, v61 + 5);
          *((_DWORD *)v61 + 16) = -1;
          if (*((char *)v61 + 39) < 0)
            operator delete(v61[2]);
          operator delete(v61);
          v61 = v62;
        }
        while (v62);
      }
    }
    else
    {
LABEL_93:
      v61 = v81;
      if (v81)
        goto LABEL_96;
    }
    v64 = (void *)v80[0];
    v80[0] = 0;
    if (v64)
      operator delete(v64);
  }
}

void sub_240B73028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,int a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39)
{
  uint64_t v39;

  sub_240B6FE78(v39 - 152);
  sub_240B70478(v39 - 136);
  _Unwind_Resume(a1);
}

void **sub_240B731A0(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_240B73210(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_25110BCB8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_240B73268(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_25110BD18;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  sub_240B73628((_QWORD *)(a1 + 16), a2 + 16);
  sub_240B73628((_QWORD *)(a1 + 40), a2 + 40);
  sub_240B72000(a1 + 64, a2 + 64);
  return a1;
}

void sub_240B732DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  char **v3;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  if (*v3)
    sub_240BBA5B8(v1, *v3, (void **)(v1 + 40));
  v5 = (char *)*v2;
  if (*v2)
  {
    v6 = *(char **)(v1 + 24);
    v7 = *v2;
    if (v6 != v5)
    {
      do
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      v7 = *v2;
    }
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v7);
  }
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B73384(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 128);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_25110BD28[v2])(&v4, a1);
  *(_DWORD *)(a1 + 128) = -1;
  return a1;
}

void sub_240B733E0()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

_QWORD *sub_240B733F4(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      sub_240B6FFF4();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **sub_240B734B8(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
      sub_240B6FFF4();
    v10 = v7 - 1;
    v11 = a1;
    if ((v6 & 0x8000000000000000) != 0)
      v11 = *a1;
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      v12 = 2 * v10;
      if (__len > 2 * v10)
        v12 = __len;
      v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v13 = v12 | 7;
      if (v12 >= 0x17)
        v9 = v13 + 1;
      else
        v9 = 23;
    }
    v14 = operator new(v9);
    v8 = v14;
    if (__len)
      memcpy(v14, __src, __len);
    if (v10 != 22)
      operator delete(v11);
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
  }
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

void sub_240B735D8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_25110BCA0, (void (*)(void *))std::exception::~exception);
}

void sub_240B73614(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_240B736E8(a1);
  j__free(v1);
}

_QWORD *sub_240B73628(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  v5 = (uint64_t)v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD **)a2)
  {
    if (v5 < 0)
      sub_240B70258();
    v6 = operator new((size_t)v4 - *(_QWORD *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      v7 = v3[1];
      *v6 = *v3;
      v6[1] = v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v3 += 2;
      v6 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_240B736C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_240BBA630((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B736E8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;

  *a1 = off_25110BD18;
  sub_240B70478((uint64_t)(a1 + 8));
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = a1[2];
  if (v8)
  {
    v9 = a1[3];
    v10 = (void *)a1[2];
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)a1[2];
    }
    a1[3] = v8;
    operator delete(v10);
  }
  return nullsub_34(a1);
}

_OWORD *sub_240B73800(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _OWORD *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_240B70258();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_240B7007C();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = *a2;
  *(_OWORD *)v11 = *a2;
  if (*((_QWORD *)&v12 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v3 = *(_QWORD **)a1;
    v4 = *(_QWORD **)(a1 + 8);
  }
  v15 = &v10[v9];
  v16 = v11 + 16;
  if (v4 == v3)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a1 + 16) = v15;
    if (!v3)
      return v16;
    goto LABEL_23;
  }
  do
  {
    v17 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v17;
    v11 -= 16;
    *v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v18 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v15;
  if (v3 != v18)
  {
    do
    {
      v19 = (std::__shared_weak_count *)*(v3 - 1);
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v3 -= 2;
    }
    while (v3 != v18);
    v3 = v18;
  }
  if (v3)
LABEL_23:
    operator delete(v3);
  return v16;
}

uint64_t sub_240B73960(uint64_t a1, _QWORD *a2)
{
  return sub_240B736E8(a2);
}

uint64_t sub_240B73968(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_25110BD48;
  if (*(char *)(a2 + 127) < 0)
    operator delete(*(void **)(a2 + 104));
  return sub_240B736E8((_QWORD *)a2);
}

uint64_t sub_240B739A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_25110BD48;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  return sub_240B736E8((_QWORD *)a1);
}

void sub_240B739E0(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_25110BD48;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = (void *)sub_240B736E8((_QWORD *)a1);
  j__free(v2);
}

void sub_240B73A24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B73A48(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_240B73A80(result);
    JUMPOUT(0x24268ACF8);
  }
  return result;
}

uint64_t sub_240B73A80(uint64_t a1)
{
  void **v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;

  v2 = *(void ***)(a1 + 112);
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 80);
    v6 = *(void **)(a1 + 72);
    if (v5 != v4)
    {
      do
      {
        v8 = *(std::__shared_weak_count **)(v5 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v5 -= 16;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v4;
    operator delete(v6);
  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(void **)(a1 + 48);
    if (v12 != v11)
    {
      do
      {
        v14 = *(std::__shared_weak_count **)(v12 - 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v12 -= 16;
      }
      while (v12 != v11);
      v13 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v11;
    operator delete(v13);
  }
  v17 = *(_QWORD *)(a1 + 24);
  if (v17)
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(void **)(a1 + 24);
    if (v18 != v17)
    {
      do
      {
        v20 = *(std::__shared_weak_count **)(v18 - 8);
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v17;
    operator delete(v19);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

unsigned __int8 *sub_240B73C48(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 *v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = *((_QWORD *)v16 + 1);
          if (v19 == v11)
          {
            v20 = v16[39];
            if ((v20 & 0x80u) == 0)
              v21 = v16[39];
            else
              v21 = *((_QWORD *)v16 + 3);
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((_QWORD *)v16 + 3)))
                  return v16;
              }
              else
              {
                if (!v16[39])
                  return v16;
                v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  v23 = (_QWORD *)(a1 + 16);
  v16 = (unsigned __int8 *)operator new(0x48uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v11;
  v24 = *a4;
  v25 = **a4;
  *((_QWORD *)v16 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v25;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v16 + 5) = 0;
  *((_DWORD *)v16 + 16) = 0;
  v41 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    v28 = 1;
    if (v12 >= 3)
      v28 = (v12 & (v12 - 1)) != 0;
    v29 = v28 | (2 * v12);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v36 = *(_QWORD *)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v16 = *v37;
LABEL_73:
    *v37 = v16;
    goto LABEL_74;
  }
  *(_QWORD *)v16 = *v23;
  *v23 = v16;
  *(_QWORD *)(v36 + 8 * v4) = v23;
  if (*(_QWORD *)v16)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12)
        v38 %= v12;
    }
    else
    {
      v38 &= v12 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240B73FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B70950((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B73FD4(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = v16[1];
          if (v19 == v11)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  v23 = operator new(0x30uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  v41 = 0;
  *v23 = 0;
  v23[1] = v11;
  v24 = v23 + 2;
  v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_240B6FF68(v24, *(void **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    v23[4] = *((_QWORD *)v25 + 2);
    *(_OWORD *)v24 = v26;
  }
  v23[5] = 0;
  v41 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v40[0] = *v37;
    *v37 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v40[0])
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40[0];
    }
  }
  v16 = (uint64_t *)v40[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240B7436C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B74388((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B74388(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void sub_240B743D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B743FC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_240B74418(void *__p)
{
  operator delete(__p);
}

uint64_t sub_240B74428()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
}

void sub_240B74438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _QWORD *v34;
  std::string *v35;
  __int128 v36;
  uint64_t *v37;
  void **v38;
  void **v39;
  uint64_t v40;
  void *v41;
  std::string v42;
  void *__p[2];
  std::string::size_type v44;
  void *v45[2];
  void *v46;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 7)
  {
    sub_240B6F8C8(a2, (uint64_t)v45);
    HIBYTE(v44) = 9;
    strcpy((char *)__p, "n_filters");
    v5 = sub_240B74E08(v45, (uint64_t)__p);
    if (*((_DWORD *)v5 + 16))
      sub_240B735D8();
    v6 = v5[5];
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    v7 = *(_QWORD *)(a3 + 224);
    v8 = (*(_QWORD *)(a3 + 232) - v7) >> 3;
    if (v6 <= v8)
    {
      if (v6 < v8)
        *(_QWORD *)(a3 + 232) = v7 + 8 * v6;
    }
    else
    {
      sub_240B749A4((void **)(a3 + 224), v6 - v8);
    }
    HIBYTE(v44) = 9;
    strcpy((char *)__p, "n_threads");
    v9 = sub_240B74E08(v45, (uint64_t)__p);
    if (*((_DWORD *)v9 + 16))
      sub_240B735D8();
    v10 = v9[5];
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a3 + 472) = v10;
    HIBYTE(v44) = 15;
    strcpy((char *)__p, "bnns_graph_args");
    v11 = sub_240B74E08(v45, (uint64_t)__p);
    if (*((_DWORD *)v11 + 16))
      sub_240B735D8();
    v12 = v11[5];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
    v13 = *(_QWORD *)(a3 + 248);
    v14 = (*(_QWORD *)(a3 + 256) - v13) >> 4;
    if (v12 <= v14)
    {
      if (v12 < v14)
        *(_QWORD *)(a3 + 256) = v13 + 16 * v12;
    }
    else
    {
      sub_240B74B44((char **)(a3 + 248), v12 - v14, &v42);
    }
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    HIBYTE(v44) = 6;
    strcpy((char *)__p, "events");
    v15 = sub_240B74E08(v45, (uint64_t)__p);
    if (*((_DWORD *)v15 + 16))
      sub_240B735D8();
    v16 = v15[5];
    if (SHIBYTE(v44) < 0)
      operator delete(__p[0]);
    v17 = *(_QWORD *)(a3 + 128);
    v19 = *(_QWORD *)(a3 + 136);
    v18 = (uint64_t *)(a3 + 128);
    v20 = (v19 - v17) >> 4;
    v21 = v16 - v20;
    if (v16 > v20)
    {
      sub_240B74C84(a3 + 128, v21);
LABEL_35:
      v26 = 0;
      while (1)
      {
        v27 = *v18;
        v28 = mlc_event_create();
        v29 = (_QWORD *)operator new();
        *v29 = &unk_25110BE28;
        v29[1] = 0;
        v29[2] = 0;
        v29[3] = v28;
        v29[4] = mlc_event_destroy;
        *(_QWORD *)(v27 + 16 * v26) = v28;
        v30 = v27 + 16 * v26;
        v31 = *(std::__shared_weak_count **)(v30 + 8);
        *(_QWORD *)(v30 + 8) = v29;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (*(_QWORD *)(*v18 + 16 * v26))
          goto LABEL_37;
        v34 = *(_QWORD **)(a3 + 32);
        std::to_string(&v42, v26);
        v35 = std::string::insert(&v42, 0, "Could not create event ", 0x17uLL);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v44 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        sub_240BB7D38(v34, 1, (uint64_t)__p);
        if (SHIBYTE(v44) < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
LABEL_47:
            operator delete(v42.__r_.__value_.__l.__data_);
        }
        else if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          goto LABEL_47;
        }
LABEL_37:
        if (++v26 == v16)
          goto LABEL_48;
      }
    }
    if (v16 < v20)
    {
      v22 = v17 + 16 * v16;
      while (v19 != v22)
      {
        v23 = *(std::__shared_weak_count **)(v19 - 8);
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v23->__on_zero_shared)(v23, v21);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v19 -= 16;
      }
      *(_QWORD *)(a3 + 136) = v22;
    }
    if (v16)
      goto LABEL_35;
LABEL_48:
    HIBYTE(v44) = 10;
    strcpy((char *)__p, "lk_buffers");
    v37 = sub_240B74E08(v45, (uint64_t)__p);
    if (*((_DWORD *)v37 + 16))
      sub_240B735D8();
    *(_BYTE *)(a3 + 384) = v37[5] != 0;
    if (SHIBYTE(v44) < 0)
    {
      operator delete(__p[0]);
      v38 = (void **)v46;
      if (!v46)
        goto LABEL_59;
    }
    else
    {
      v38 = (void **)v46;
      if (!v46)
      {
LABEL_59:
        v41 = v45[0];
        v45[0] = 0;
        if (v41)
          operator delete(v41);
        return;
      }
    }
    do
    {
      v39 = (void **)*v38;
      v40 = *((unsigned int *)v38 + 16);
      if ((_DWORD)v40 != -1)
        ((void (*)(void **, void **))off_25110BDF0[v40])(__p, v38 + 5);
      *((_DWORD *)v38 + 16) = -1;
      if (*((char *)v38 + 39) < 0)
        operator delete(v38[2]);
      operator delete(v38);
      v38 = v39;
    }
    while (v39);
    goto LABEL_59;
  }
}

void sub_240B748E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_240B70478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_240B748E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_240B74954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_240B70478((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_240B7495C(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  mlc_event_destroy(v1);
  __cxa_rethrow();
}

void sub_240B74970()
{
  __cxa_end_catch();
  JUMPOUT(0x240B74978);
}

void sub_240B74990()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_240B749A4(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_240B70258();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_240B7007C();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

void sub_240B74B44(char **a1, unint64_t a2, _OWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;

  v7 = a1[1];
  v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      v13 = 16 * a2;
      v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60)
      sub_240B70258();
    v9 = v6 - *a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2)
      v10 = v8 + a2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 60)
        sub_240B7007C();
      v12 = (char *)operator new(16 * v11);
    }
    else
    {
      v12 = 0;
    }
    v15 = &v12[16 * v8];
    v16 = 16 * a2;
    v17 = &v15[16 * a2];
    v18 = v15;
    do
    {
      *(_OWORD *)v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_240B74C84(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_240B70258();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_240B7007C();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5)
LABEL_27:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v13 - 1) = v17;
        v13 -= 16;
        *v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v6);
      v18 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v15;
      if (v5 != v18)
      {
        do
        {
          v19 = (std::__shared_weak_count *)*(v5 - 1);
          if (v19)
          {
            p_shared_owners = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          v5 -= 2;
        }
        while (v5 != v18);
        v5 = v18;
      }
      if (v5)
        goto LABEL_27;
    }
  }
}

uint64_t *sub_240B74E08(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v8 == v16)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_240B74F8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B74FB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

void sub_240B74FD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  void *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  _DWORD *v38;
  int *v39;
  char *v40;
  int *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  void *v55[2];
  void *v56;
  _BYTE v57[8];
  uint64_t (**v58)();
  int v59;
  __int128 v60;
  _OWORD v61[2];
  __int128 v62;
  __int128 v63;
  int v64;
  __int128 __p;
  uint64_t v66;
  char v67;
  _QWORD v68[4];
  char v69[24];
  _QWORD v70[4];
  char v71[24];
  _QWORD v72[4];
  char v73[24];
  _QWORD v74[4];
  char v75[24];
  _QWORD v76[4];
  char v77[24];
  _QWORD v78[4];
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD v82[5];
  __int128 v83;
  _QWORD v84[4];
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD v88[4];
  char v89[24];
  _QWORD v90[4];
  char v91[24];
  _QWORD v92[4];
  char v93[24];
  _QWORD v94[4];
  char v95[24];
  _QWORD v96[4];
  int v97;
  char v98;
  _QWORD v99[4];
  char v100[24];
  _QWORD v101[4];
  int v102;
  char v103;
  _QWORD v104[4];
  char v105[24];
  _QWORD v106[4];
  _DWORD v107[5];
  char v108;
  _QWORD v109[4];
  char v110[24];
  _QWORD v111[4];
  char v112[24];
  _QWORD v113[4];
  char v114[24];
  _QWORD v115[4];
  char v116[24];
  _QWORD v117[4];
  char v118[24];
  _QWORD v119[4];
  char v120[24];
  _QWORD v121[4];
  char v122[24];
  _QWORD v123[4];
  char v124[24];
  _QWORD v125[4];
  char v126[24];
  _QWORD v127[4];
  char *v128;
  __int128 v129;
  _QWORD v130[4];
  char v131[24];
  _QWORD v132[4];
  char v133[24];
  _QWORD v134[4];
  int v135;
  char v136;
  _QWORD v137[4];
  char v138[24];
  _QWORD v139[4];
  char v140[24];
  _QWORD v141[4];
  char v142[24];
  _QWORD v143[4];
  char v144[24];
  _QWORD v145[4];
  char v146[24];
  _QWORD v147[4];
  char v148[24];
  _QWORD v149[4];
  char v150[24];
  _QWORD v151[4];
  char v152[24];
  _QWORD v153[4];
  char v154[24];
  _QWORD v155[4];
  char v156[24];
  _QWORD v157[4];
  char v158[24];
  _QWORD v159[6];

  v159[4] = *MEMORY[0x24BDAC8D0];
  BYTE7(v60) = 3;
  LODWORD(v58) = 6579297;
  *((_QWORD *)&v60 + 1) = &off_25110BEB0;
  *(_QWORD *)&v61[0] = sub_240B75F78;
  *(_QWORD *)&v61[1] = (char *)&v60 + 8;
  HIBYTE(v62) = 7;
  strcpy((char *)&v61[1] + 8, "acquire");
  *(_QWORD *)&v63 = &off_25110BEB0;
  *((_QWORD *)&v63 + 1) = sub_240B7659C;
  *(_QWORD *)&__p = &v63;
  v67 = 7;
  strcpy((char *)&__p + 8, "address");
  v68[0] = &off_25110BEB0;
  v68[1] = sub_240B7674C;
  v69[23] = 8;
  v68[3] = v68;
  strcpy(v69, "allocate");
  v70[0] = &off_25110BEB0;
  v70[1] = sub_240B76D88;
  v70[3] = v70;
  v71[23] = 7;
  strcpy(v71, "avgpool");
  v72[0] = &off_25110BEB0;
  v72[1] = sub_240B76F3C;
  v72[3] = v72;
  v73[23] = 7;
  strcpy(v73, "bnns-md");
  v74[0] = &off_25110BEB0;
  v74[1] = sub_240B77560;
  v75[23] = 11;
  v74[3] = v74;
  strcpy(v75, "bnns-filter");
  v76[0] = &off_25110BEB0;
  v76[1] = sub_240B77960;
  v76[3] = v76;
  strcpy(v77, "bnns-graph-infer-shape");
  v77[23] = 22;
  v78[0] = &off_25110BEB0;
  v78[1] = sub_240B77F84;
  v78[3] = v78;
  v79 = (char *)operator new(0x19uLL);
  v80 = 23;
  strcpy(v79, "bnns-graph-context-init");
  v81 = 0x8000000000000019;
  v82[0] = &off_25110BEB0;
  v82[1] = sub_240B785A8;
  v82[3] = v82;
  v3 = (char *)operator new(0x20uLL);
  v83 = xmmword_240BBB850;
  strcpy(v3, "bnns-graph-context-destroy");
  v82[4] = v3;
  v84[0] = &off_25110BEB0;
  v84[1] = sub_240B7875C;
  v84[3] = v84;
  v85 = (char *)operator new(0x19uLL);
  v87 = 0x8000000000000019;
  v86 = 23;
  strcpy(v85, "bnns-graph-context-exec");
  v88[0] = &off_25110BEB0;
  v88[1] = sub_240B78910;
  v88[3] = v88;
  v89[23] = 9;
  strcpy(v89, "broadcast");
  v90[0] = &off_25110BEB0;
  v90[1] = sub_240B78F34;
  v90[3] = v90;
  v91[23] = 4;
  strcpy(v91, "conv");
  v92[0] = &off_25110BEB0;
  v92[1] = sub_240B79558;
  v92[3] = v92;
  v93[23] = 11;
  strcpy(v93, "convolution");
  v94[0] = &off_25110BEB0;
  v94[1] = sub_240B79558;
  v94[3] = v94;
  v95[23] = 4;
  strcpy(v95, "copy");
  v96[0] = &off_25110BEB0;
  v96[1] = sub_240B79B7C;
  v96[3] = v96;
  v98 = 3;
  v97 = 7760228;
  v99[0] = &off_25110BEB0;
  v99[1] = sub_240B7A1A0;
  v99[3] = v99;
  v100[23] = 10;
  strcpy(v100, "deallocate");
  v101[0] = &off_25110BEB0;
  v101[1] = sub_240B7A7C4;
  v101[3] = v101;
  v103 = 3;
  v102 = 7695461;
  v104[0] = &off_25110BEB0;
  v104[1] = sub_240B7A978;
  v104[3] = v104;
  v105[23] = 14;
  strcpy(v105, "external_const");
  v106[0] = &off_25110BEB0;
  v106[1] = sub_240B7AF9C;
  v106[3] = v106;
  v108 = 6;
  strcpy((char *)v107, "matmul");
  v109[0] = &off_25110BEB0;
  v109[1] = sub_240B7B39C;
  v109[3] = v109;
  v110[23] = 4;
  strcpy(v110, "gemm");
  v111[0] = &off_25110BEB0;
  v111[1] = sub_240B7B39C;
  v111[3] = v111;
  v112[23] = 11;
  v51 = v112;
  strcpy(v112, "infer-shape");
  v113[0] = &off_25110BEB0;
  v113[1] = sub_240B7B9C0;
  v113[3] = v113;
  v114[23] = 9;
  strcpy(v114, "init-addr");
  v115[0] = &off_25110BEB0;
  v115[1] = sub_240B7674C;
  v115[3] = v115;
  v116[23] = 12;
  strcpy(v116, "init-address");
  v117[0] = &off_25110BEB0;
  v117[1] = sub_240B7674C;
  v117[3] = v117;
  v118[23] = 14;
  v50 = v118;
  strcpy(v118, "execute-kernel");
  v119[0] = &off_25110BEB0;
  v119[1] = sub_240B7BFE4;
  v119[3] = v119;
  v120[23] = 10;
  strcpy(v120, "leaky_relu");
  v121[0] = &off_25110BEB0;
  v121[1] = sub_240B7C608;
  v121[3] = v121;
  v122[23] = 4;
  strcpy(v122, "load");
  v123[0] = &off_25110BEB0;
  v123[1] = sub_240B7CC2C;
  v123[3] = v123;
  v124[23] = 11;
  v49 = v124;
  strcpy(v124, "load-kernel");
  v125[0] = &off_25110BEB0;
  v125[1] = sub_240B7D02C;
  v125[3] = v125;
  v126[23] = 10;
  strcpy(v126, "loopkit-md");
  v127[0] = &off_25110BEB0;
  v127[1] = sub_240B7D1E0;
  v127[3] = v127;
  v128 = (char *)operator new(0x20uLL);
  v47 = (char *)&__p + 8;
  v48 = (char *)&v61[1] + 8;
  v45 = v71;
  v46 = v69;
  v129 = xmmword_240BBB860;
  v43 = v91;
  v44 = v89;
  strcpy(v128, "scratchbuffer-metakernel");
  v41 = &v97;
  v42 = v95;
  v39 = &v102;
  v40 = v100;
  v37 = v110;
  v38 = v107;
  v35 = v116;
  v36 = v114;
  v130[0] = &off_25110BEB0;
  v130[1] = sub_240B7D5E0;
  v130[3] = v130;
  v33 = v122;
  v34 = v120;
  v131[23] = 4;
  strcpy(v131, "lstm");
  v31 = v131;
  v32 = v126;
  v132[0] = &off_25110BEB0;
  v132[1] = sub_240B7DC04;
  v132[3] = v132;
  v133[23] = 3;
  strcpy(v133, "mul");
  v134[0] = &off_25110BEB0;
  v134[1] = sub_240B7E228;
  v134[3] = v134;
  v29 = &v135;
  v30 = v133;
  v136 = 3;
  v135 = 7233902;
  v137[0] = &off_25110BEB0;
  v137[1] = sub_240B7E84C;
  v137[3] = v137;
  v138[23] = 8;
  strcpy(v138, "nancheck");
  v139[0] = &off_25110BEB0;
  v139[1] = sub_240B7E84C;
  v139[3] = v139;
  v140[23] = 7;
  v27 = v140;
  v28 = v138;
  strcpy(v140, "nanfill");
  v141[0] = &off_25110BEB0;
  v141[1] = sub_240B7EC50;
  v141[3] = v141;
  v142[23] = 5;
  strcpy(v142, "print");
  v143[1] = sub_240B7F050;
  v143[3] = v143;
  v144[23] = 7;
  strcpy(v144, "release");
  v145[1] = sub_240B7F454;
  v145[3] = v145;
  strcpy(v146, "relu");
  v147[1] = sub_240B7F608;
  v147[3] = v147;
  v148[23] = 7;
  strcpy(v148, "sigmoid");
  v149[1] = sub_240B7FC2C;
  v149[3] = v149;
  v150[23] = 7;
  strcpy(v150, "softmax");
  v151[1] = sub_240B80250;
  v151[3] = v151;
  v26 = v142;
  v143[0] = &off_25110BEB0;
  v145[0] = &off_25110BEB0;
  v146[23] = 4;
  v152[23] = 3;
  strcpy(v152, "sub");
  v153[1] = sub_240B80874;
  v153[3] = v153;
  v154[23] = 4;
  strcpy(v154, "tanh");
  v155[1] = sub_240B80E98;
  v155[3] = v155;
  v156[23] = 22;
  strcpy(v156, "pixel_buffer_to_tensor");
  v157[1] = sub_240B814BC;
  v157[3] = v157;
  v158[23] = 22;
  v147[0] = &off_25110BEB0;
  v149[0] = &off_25110BEB0;
  v151[0] = &off_25110BEB0;
  v153[0] = &off_25110BEB0;
  v155[0] = &off_25110BEB0;
  v157[0] = &off_25110BEB0;
  v159[0] = &off_25110BEB0;
  v159[1] = sub_240B81AE0;
  v159[3] = v159;
  strcpy(v158, "tensor_to_pixel_buffer");
  sub_240B82164((uint64_t)v55, (uint64_t)&v58, 44);
  v11 = 308;
  do
  {
    v12 = *(void ***)&v57[v11 * 8];
    if (&v55[v11 + 1] == v12)
    {
      v12 = &v55[v11 + 1];
      v13 = 4;
    }
    else
    {
      if (!v12)
        goto LABEL_8;
      v13 = 5;
    }
    (*((void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *, int *, char *, char *, char *, char *, char *, char *, char *, char *, _DWORD *, int *, char *, int *, char *, char *, char *, char *, char *, char *, char *, char *, char *, char *))*v12
     + v13))(v12, v4, v5, v6, v7, v8, v9, v10, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36,
      v37,
      v38,
      v39,
      v40,
      v41,
      v42,
      v43,
      v44,
      v45,
      v46,
      v47,
      v48,
      v49,
      v50,
      v51);
LABEL_8:
    if (SHIBYTE(v55[v11]) < 0)
      operator delete((&v58)[v11 - 7]);
    v11 -= 7;
  }
  while (v11 * 8);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) == 11)
  {
    v62 = 0u;
    v63 = 0u;
    memset(v61, 0, sizeof(v61));
    v60 = 0u;
    v64 = 1065353216;
    v58 = off_25110BD48;
    if (*(char *)(a1 + 71) < 0)
    {
      sub_240B6FF68(&__p, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      __p = *(_OWORD *)(a1 + 48);
      v66 = *(_QWORD *)(a1 + 64);
    }
    v59 = 25;
    sub_240B828C4(a3, (uint64_t)&v58);
    *(_DWORD *)(a3 + 128) = 1;
    v58 = off_25110BD48;
    if (SHIBYTE(v66) < 0)
      operator delete((void *)__p);
  }
  else
  {
    v14 = sub_240B829F8(v55, a1 + 48)[8];
    if (!v14)
      sub_240B82B78();
    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(&v58, v14, a1, a2);
    *(_QWORD *)a3 = off_25110BD18;
    *(_DWORD *)(a3 + 8) = v59;
    *(_OWORD *)(a3 + 16) = v60;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)&v61[0];
    v60 = 0uLL;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)((char *)v61 + 8);
    v16 = *((_QWORD *)&v61[1] + 1);
    v15 = v62;
    memset(v61, 0, sizeof(v61));
    *(_QWORD *)(a3 + 56) = v16;
    *(_QWORD *)(a3 + 64) = v15;
    v17 = *((_QWORD *)&v62 + 1);
    v18 = v63;
    *(_QWORD *)(a3 + 72) = *((_QWORD *)&v62 + 1);
    v62 = 0uLL;
    v19 = *((_QWORD *)&v63 + 1);
    *(_QWORD *)(a3 + 80) = v18;
    *(_QWORD *)(a3 + 88) = v19;
    *(_DWORD *)(a3 + 96) = v64;
    if (v19)
    {
      v20 = *(_QWORD *)(v18 + 8);
      if ((v17 & (v17 - 1)) != 0)
      {
        if (v20 >= v17)
          v20 %= v17;
      }
      else
      {
        v20 &= v17 - 1;
      }
      *(_QWORD *)(v15 + 8 * v20) = a3 + 80;
      v63 = 0uLL;
    }
    *(_DWORD *)(a3 + 128) = 0;
  }
  sub_240B736E8(&v58);
  v21 = (char *)v56;
  if (v56)
  {
    while (1)
    {
      v23 = *(char **)v21;
      v24 = (char *)*((_QWORD *)v21 + 8);
      if (v24 == v21 + 40)
        break;
      if (v24)
      {
        v25 = 5;
LABEL_33:
        (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
      }
      if (v21[39] < 0)
        operator delete(*((void **)v21 + 2));
      operator delete(v21);
      v21 = v23;
      if (!v23)
        goto LABEL_25;
    }
    v24 = v21 + 40;
    v25 = 4;
    goto LABEL_33;
  }
LABEL_25:
  v22 = v55[0];
  v55[0] = 0;
  if (v22)
    operator delete(v22);
}

void sub_240B75D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_240B736E8(&a51);
  sub_240B75EE0((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void sub_240B75D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  sub_240B82104(v52);
  sub_240B82104(v58);
  sub_240B82104(v59);
  sub_240B82104(v51);
  sub_240B82104(v54);
  sub_240B82104(v53);
  sub_240B82104(v55);
  sub_240B82104(v56);
  sub_240B82104(a9);
  sub_240B82104(a10);
  sub_240B82104(a11);
  sub_240B82104(a12);
  sub_240B82104(a13);
  sub_240B82104(a14);
  sub_240B82104(v57);
  sub_240B82104(a15);
  sub_240B82104(a32);
  sub_240B82104(a16);
  sub_240B82104(a17);
  sub_240B82104(a33);
  sub_240B82104(a18);
  sub_240B82104(a19);
  sub_240B82104(a34);
  sub_240B82104(a20);
  sub_240B82104(a21);
  sub_240B82104(a35);
  sub_240B82104(a22);
  sub_240B82104(a23);
  sub_240B82104(a24);
  sub_240B82104(a25);
  sub_240B82104(a36);
  sub_240B82104(a26);
  sub_240B82104(a27);
  sub_240B82104(a37);
  sub_240B82104(a38);
  sub_240B82104(a39);
  sub_240B82104(a40);
  sub_240B82104(a41);
  sub_240B82104(a42);
  sub_240B82104(a28);
  sub_240B82104(a29);
  sub_240B82104(a30);
  sub_240B82104(a31);
  sub_240B82104((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void sub_240B75EC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  do
  {
    v2 -= 56;
    sub_240B82104(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B75EE0(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = *(char **)v2;
      v6 = (char *)*((_QWORD *)v2 + 8);
      if (v6 == v2 + 40)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 40;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_240B75F78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 1;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B764A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7659C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v6;
  int **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *__p;
  char v21;

  *(_QWORD *)a2 = off_25110BD18;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 0;
  sub_240B6F8C8(a1, (uint64_t)&v19);
  v3 = __p;
  if (!__p)
    goto LABEL_32;
  do
  {
    v8 = (int **)(v3 + 2);
    v9 = *((unsigned __int8 *)v3 + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = v3[3];
    if (v9 == 7)
    {
      if (v10 >= 0)
        v4 = (int *)(v3 + 2);
      else
        v4 = *v8;
      v5 = *v4;
      v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080)
LABEL_10:
        sub_240B72130(a2 + 64, (uint64_t)v8, (__int128 *)v3 + 1);
    }
    else
    {
      if (v9 != 6)
        goto LABEL_10;
      v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      v12 = *(_DWORD *)v11;
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556)
        goto LABEL_10;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v15 = (void **)__p;
  if (__p)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, void **))off_25110BE50[v17])(&v21, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  v18 = v19;
  v19 = 0;
  if (v18)
    operator delete(v18);
}

void sub_240B76724(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

void sub_240B7674C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  void *v45[2];
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *v53;
  void **v54;
  uint64_t v55;
  void *__p[2];
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 3;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  HIBYTE(v57) = 6;
  strcpy((char *)__p, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)__p);
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  if (v18)
  {
    LOBYTE(v50) = 0;
    v52 = -1;
    v19 = *((unsigned int *)v18 + 16);
    if ((_DWORD)v19 == -1
      || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v61, &v50, v18 + 5),
          v52 = v19,
          (_DWORD)v19 != 3))
    {
      sub_240B735D8();
    }
    v53 = 0;
    v54 = 0;
    v55 = 0;
    sub_240B700B4((char *)&v53, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
    sub_240B6FD34((uint64_t *)&v53, a2, (uint64_t)__p);
    v20 = (char *)*v5;
    if (*v5)
    {
      v21 = *(char **)(a3 + 24);
      v22 = *v5;
      if (v21 != v20)
      {
        do
        {
          v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
          if (v23)
          {
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              v25 = __ldaxr(p_shared_owners);
            while (__stlxr(v25 - 1, p_shared_owners));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v21 -= 16;
        }
        while (v21 != v20);
        v22 = *v5;
      }
      *(_QWORD *)(a3 + 24) = v20;
      operator delete(v22);
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    *(_OWORD *)(a3 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 32) = v57;
    __p[1] = 0;
    v57 = 0;
    __p[0] = 0;
    v26 = (void **)v53;
    if (v53)
    {
      v27 = v54;
      v28 = v53;
      if (v54 != v53)
      {
        do
        {
          if (*((char *)v27 - 1) < 0)
            operator delete(*(v27 - 3));
          v27 -= 3;
        }
        while (v27 != v26);
        v28 = v53;
      }
      v54 = v26;
      operator delete(v28);
    }
    if (v52 != -1)
      ((void (*)(void **, uint64_t *))off_25110BE50[v52])(v45, &v50);
    v52 = -1;
  }
  v46 = 7;
  strcpy((char *)v45, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v45);
  LOBYTE(v47) = 0;
  v49 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v47, v29 + 5),
        v49 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&v53, v47, v48, 0xAAAAAAAAAAAAAAABLL * ((v48 - v47) >> 3));
  sub_240B6FD34((uint64_t *)&v53, a2, (uint64_t)__p);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 56) = v57;
  __p[1] = 0;
  v57 = 0;
  __p[0] = 0;
  v38 = (void **)v53;
  if (v53)
  {
    v39 = v54;
    v40 = v53;
    if (v54 != v53)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = v53;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v49 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v49])(&v61, &v47);
  v49 = -1;
  if (v46 < 0)
  {
    operator delete(v45[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_85;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_85;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(void **, void **))off_25110BE50[v43])(__p, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_85:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B76C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20,uint64_t a21,uint64_t a22,int a23,int a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _QWORD *v33;
  uint64_t v34;

  sub_240B731A0(&a25);
  sub_240B73210((uint64_t)&a20);
  sub_240B70478(v34 - 128);
  sub_240B736E8(v33);
  _Unwind_Resume(a1);
}

void sub_240B76D88(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v6;
  int **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *__p;
  char v21;

  *(_QWORD *)a2 = off_25110BD18;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 2;
  sub_240B6F8C8(a1, (uint64_t)&v19);
  v3 = __p;
  if (!__p)
    goto LABEL_32;
  do
  {
    v8 = (int **)(v3 + 2);
    v9 = *((unsigned __int8 *)v3 + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = v3[3];
    if (v9 == 7)
    {
      if (v10 >= 0)
        v4 = (int *)(v3 + 2);
      else
        v4 = *v8;
      v5 = *v4;
      v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080)
LABEL_10:
        sub_240B72130(a2 + 64, (uint64_t)v8, (__int128 *)v3 + 1);
    }
    else
    {
      if (v9 != 6)
        goto LABEL_10;
      v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      v12 = *(_DWORD *)v11;
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556)
        goto LABEL_10;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v15 = (void **)__p;
  if (__p)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, void **))off_25110BE50[v17])(&v21, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  v18 = v19;
  v19 = 0;
  if (v18)
    operator delete(v18);
}

void sub_240B76F14(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

void sub_240B76F3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 5;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7746C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B77560(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *__p;
  void **v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  char v45;
  char v46;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 11;
  sub_240B6F8C8(a1, (uint64_t)v43);
  v5 = v44;
  if (v44)
  {
    do
    {
      v10 = (int **)(v5 + 2);
      v11 = *((unsigned __int8 *)v5 + 39);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = v5[3];
      if (v11 == 7)
      {
        if (v12 >= 0)
          v6 = (int *)(v5 + 2);
        else
          v6 = *v10;
        v7 = *v6;
        v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080)
          goto LABEL_11;
      }
      else if (v11 == 6)
      {
        v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        v14 = *(_DWORD *)v13;
        v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556)
          goto LABEL_11;
      }
      sub_240B72130(a3 + 64, (uint64_t)v10, (__int128 *)v5 + 1);
LABEL_11:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  v34 = 7;
  strcpy((char *)v33, "outputs");
  v17 = sub_240B821E8(v43, (uint64_t)v33);
  LOBYTE(v35) = 0;
  v37 = -1;
  v18 = *((unsigned int *)v17 + 16);
  if ((_DWORD)v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v18])(&v45, &v35, v17 + 5),
        v37 = v18,
        (_DWORD)v18 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_240B700B4((char *)&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v41);
  v19 = (void **)(a3 + 40);
  v20 = *(_QWORD *)(a3 + 40);
  if (v20)
  {
    v21 = *(_QWORD *)(a3 + 48);
    v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v19;
    }
    *(_QWORD *)(a3 + 48) = v20;
    operator delete(v22);
    *v19 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v41;
  *(_QWORD *)(a3 + 56) = v42;
  v42 = 0;
  v41 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v39;
    v28 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v39 = v26;
    operator delete(v28);
  }
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v37])(&v46, &v35);
  v37 = -1;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  do
  {
    v30 = (void **)*v29;
    v31 = *((unsigned int *)v29 + 16);
    if ((_DWORD)v31 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v31])(&v41, v29 + 5);
    *((_DWORD *)v29 + 16) = -1;
    if (*((char *)v29 + 39) < 0)
      operator delete(v29[2]);
    operator delete(v29);
    v29 = v30;
  }
  while (v30);
LABEL_58:
  v32 = v43[0];
  v43[0] = 0;
  if (v32)
    operator delete(v32);
}

void sub_240B778C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_240B731A0(&a20);
  sub_240B73210((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a27);
  sub_240B736E8(v27);
  _Unwind_Resume(a1);
}

void sub_240B77960(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 6;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B77E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B77F84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 9;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B784B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B785A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v6;
  int **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *__p;
  char v21;

  *(_QWORD *)a2 = off_25110BD18;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 7;
  sub_240B6F8C8(a1, (uint64_t)&v19);
  v3 = __p;
  if (!__p)
    goto LABEL_32;
  do
  {
    v8 = (int **)(v3 + 2);
    v9 = *((unsigned __int8 *)v3 + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = v3[3];
    if (v9 == 7)
    {
      if (v10 >= 0)
        v4 = (int *)(v3 + 2);
      else
        v4 = *v8;
      v5 = *v4;
      v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080)
LABEL_10:
        sub_240B72130(a2 + 64, (uint64_t)v8, (__int128 *)v3 + 1);
    }
    else
    {
      if (v9 != 6)
        goto LABEL_10;
      v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      v12 = *(_DWORD *)v11;
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556)
        goto LABEL_10;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v15 = (void **)__p;
  if (__p)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, void **))off_25110BE50[v17])(&v21, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  v18 = v19;
  v19 = 0;
  if (v18)
    operator delete(v18);
}

void sub_240B78734(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

void sub_240B7875C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v6;
  int **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *__p;
  char v21;

  *(_QWORD *)a2 = off_25110BD18;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 10;
  sub_240B6F8C8(a1, (uint64_t)&v19);
  v3 = __p;
  if (!__p)
    goto LABEL_32;
  do
  {
    v8 = (int **)(v3 + 2);
    v9 = *((unsigned __int8 *)v3 + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = v3[3];
    if (v9 == 7)
    {
      if (v10 >= 0)
        v4 = (int *)(v3 + 2);
      else
        v4 = *v8;
      v5 = *v4;
      v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080)
LABEL_10:
        sub_240B72130(a2 + 64, (uint64_t)v8, (__int128 *)v3 + 1);
    }
    else
    {
      if (v9 != 6)
        goto LABEL_10;
      v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      v12 = *(_DWORD *)v11;
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556)
        goto LABEL_10;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v15 = (void **)__p;
  if (__p)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, void **))off_25110BE50[v17])(&v21, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  v18 = v19;
  v19 = 0;
  if (v18)
    operator delete(v18);
}

void sub_240B788E8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

void sub_240B78910(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 8;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B78E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B78F34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 12;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B79464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B79558(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 15;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B79A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B79B7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 14;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7A0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7A1A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 16;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7A6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7A7C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v6;
  int **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *__p;
  char v21;

  *(_QWORD *)a2 = off_25110BD18;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 17;
  sub_240B6F8C8(a1, (uint64_t)&v19);
  v3 = __p;
  if (!__p)
    goto LABEL_32;
  do
  {
    v8 = (int **)(v3 + 2);
    v9 = *((unsigned __int8 *)v3 + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = v3[3];
    if (v9 == 7)
    {
      if (v10 >= 0)
        v4 = (int *)(v3 + 2);
      else
        v4 = *v8;
      v5 = *v4;
      v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080)
LABEL_10:
        sub_240B72130(a2 + 64, (uint64_t)v8, (__int128 *)v3 + 1);
    }
    else
    {
      if (v9 != 6)
        goto LABEL_10;
      v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      v12 = *(_DWORD *)v11;
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556)
        goto LABEL_10;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v15 = (void **)__p;
  if (__p)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, void **))off_25110BE50[v17])(&v21, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  v18 = v19;
  v19 = 0;
  if (v18)
    operator delete(v18);
}

void sub_240B7A950(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

void sub_240B7A978(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 18;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7AEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7AF9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *__p;
  void **v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  char v45;
  char v46;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 42;
  sub_240B6F8C8(a1, (uint64_t)v43);
  v5 = v44;
  if (v44)
  {
    do
    {
      v10 = (int **)(v5 + 2);
      v11 = *((unsigned __int8 *)v5 + 39);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = v5[3];
      if (v11 == 7)
      {
        if (v12 >= 0)
          v6 = (int *)(v5 + 2);
        else
          v6 = *v10;
        v7 = *v6;
        v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080)
          goto LABEL_11;
      }
      else if (v11 == 6)
      {
        v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        v14 = *(_DWORD *)v13;
        v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556)
          goto LABEL_11;
      }
      sub_240B72130(a3 + 64, (uint64_t)v10, (__int128 *)v5 + 1);
LABEL_11:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  v34 = 7;
  strcpy((char *)v33, "outputs");
  v17 = sub_240B821E8(v43, (uint64_t)v33);
  LOBYTE(v35) = 0;
  v37 = -1;
  v18 = *((unsigned int *)v17 + 16);
  if ((_DWORD)v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v18])(&v45, &v35, v17 + 5),
        v37 = v18,
        (_DWORD)v18 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_240B700B4((char *)&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v41);
  v19 = (void **)(a3 + 40);
  v20 = *(_QWORD *)(a3 + 40);
  if (v20)
  {
    v21 = *(_QWORD *)(a3 + 48);
    v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v19;
    }
    *(_QWORD *)(a3 + 48) = v20;
    operator delete(v22);
    *v19 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v41;
  *(_QWORD *)(a3 + 56) = v42;
  v42 = 0;
  v41 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v39;
    v28 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v39 = v26;
    operator delete(v28);
  }
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v37])(&v46, &v35);
  v37 = -1;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  do
  {
    v30 = (void **)*v29;
    v31 = *((unsigned int *)v29 + 16);
    if ((_DWORD)v31 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v31])(&v41, v29 + 5);
    *((_DWORD *)v29 + 16) = -1;
    if (*((char *)v29 + 39) < 0)
      operator delete(v29[2]);
    operator delete(v29);
    v29 = v30;
  }
  while (v30);
LABEL_58:
  v32 = v43[0];
  v43[0] = 0;
  if (v32)
    operator delete(v32);
}

void sub_240B7B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_240B731A0(&a20);
  sub_240B73210((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a27);
  sub_240B736E8(v27);
  _Unwind_Resume(a1);
}

void sub_240B7B39C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 20;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7B8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7B9C0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 21;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7BFE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 24;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7C514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7C608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 26;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7CB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7CC2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *__p;
  void **v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  char v45;
  char v46;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 27;
  sub_240B6F8C8(a1, (uint64_t)v43);
  v5 = v44;
  if (v44)
  {
    do
    {
      v10 = (int **)(v5 + 2);
      v11 = *((unsigned __int8 *)v5 + 39);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = v5[3];
      if (v11 == 7)
      {
        if (v12 >= 0)
          v6 = (int *)(v5 + 2);
        else
          v6 = *v10;
        v7 = *v6;
        v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080)
          goto LABEL_11;
      }
      else if (v11 == 6)
      {
        v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        v14 = *(_DWORD *)v13;
        v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556)
          goto LABEL_11;
      }
      sub_240B72130(a3 + 64, (uint64_t)v10, (__int128 *)v5 + 1);
LABEL_11:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  v34 = 7;
  strcpy((char *)v33, "outputs");
  v17 = sub_240B821E8(v43, (uint64_t)v33);
  LOBYTE(v35) = 0;
  v37 = -1;
  v18 = *((unsigned int *)v17 + 16);
  if ((_DWORD)v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v18])(&v45, &v35, v17 + 5),
        v37 = v18,
        (_DWORD)v18 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_240B700B4((char *)&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v41);
  v19 = (void **)(a3 + 40);
  v20 = *(_QWORD *)(a3 + 40);
  if (v20)
  {
    v21 = *(_QWORD *)(a3 + 48);
    v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v19;
    }
    *(_QWORD *)(a3 + 48) = v20;
    operator delete(v22);
    *v19 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v41;
  *(_QWORD *)(a3 + 56) = v42;
  v42 = 0;
  v41 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v39;
    v28 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v39 = v26;
    operator delete(v28);
  }
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v37])(&v46, &v35);
  v37 = -1;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  do
  {
    v30 = (void **)*v29;
    v31 = *((unsigned int *)v29 + 16);
    if ((_DWORD)v31 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v31])(&v41, v29 + 5);
    *((_DWORD *)v29 + 16) = -1;
    if (*((char *)v29 + 39) < 0)
      operator delete(v29[2]);
    operator delete(v29);
    v29 = v30;
  }
  while (v30);
LABEL_58:
  v32 = v43[0];
  v43[0] = 0;
  if (v32)
    operator delete(v32);
}

void sub_240B7CF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_240B731A0(&a20);
  sub_240B73210((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a27);
  sub_240B736E8(v27);
  _Unwind_Resume(a1);
}

void sub_240B7D02C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v6;
  int **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *__p;
  char v21;

  *(_QWORD *)a2 = off_25110BD18;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 28;
  sub_240B6F8C8(a1, (uint64_t)&v19);
  v3 = __p;
  if (!__p)
    goto LABEL_32;
  do
  {
    v8 = (int **)(v3 + 2);
    v9 = *((unsigned __int8 *)v3 + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = v3[3];
    if (v9 == 7)
    {
      if (v10 >= 0)
        v4 = (int *)(v3 + 2);
      else
        v4 = *v8;
      v5 = *v4;
      v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080)
LABEL_10:
        sub_240B72130(a2 + 64, (uint64_t)v8, (__int128 *)v3 + 1);
    }
    else
    {
      if (v9 != 6)
        goto LABEL_10;
      v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      v12 = *(_DWORD *)v11;
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556)
        goto LABEL_10;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v15 = (void **)__p;
  if (__p)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, void **))off_25110BE50[v17])(&v21, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  v18 = v19;
  v19 = 0;
  if (v18)
    operator delete(v18);
}

void sub_240B7D1B8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

void sub_240B7D1E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *__p;
  void **v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  char v45;
  char v46;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 29;
  sub_240B6F8C8(a1, (uint64_t)v43);
  v5 = v44;
  if (v44)
  {
    do
    {
      v10 = (int **)(v5 + 2);
      v11 = *((unsigned __int8 *)v5 + 39);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = v5[3];
      if (v11 == 7)
      {
        if (v12 >= 0)
          v6 = (int *)(v5 + 2);
        else
          v6 = *v10;
        v7 = *v6;
        v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080)
          goto LABEL_11;
      }
      else if (v11 == 6)
      {
        v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        v14 = *(_DWORD *)v13;
        v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556)
          goto LABEL_11;
      }
      sub_240B72130(a3 + 64, (uint64_t)v10, (__int128 *)v5 + 1);
LABEL_11:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  v34 = 7;
  strcpy((char *)v33, "outputs");
  v17 = sub_240B821E8(v43, (uint64_t)v33);
  LOBYTE(v35) = 0;
  v37 = -1;
  v18 = *((unsigned int *)v17 + 16);
  if ((_DWORD)v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v18])(&v45, &v35, v17 + 5),
        v37 = v18,
        (_DWORD)v18 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_240B700B4((char *)&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v41);
  v19 = (void **)(a3 + 40);
  v20 = *(_QWORD *)(a3 + 40);
  if (v20)
  {
    v21 = *(_QWORD *)(a3 + 48);
    v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v19;
    }
    *(_QWORD *)(a3 + 48) = v20;
    operator delete(v22);
    *v19 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v41;
  *(_QWORD *)(a3 + 56) = v42;
  v42 = 0;
  v41 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v39;
    v28 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v39 = v26;
    operator delete(v28);
  }
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v37])(&v46, &v35);
  v37 = -1;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  do
  {
    v30 = (void **)*v29;
    v31 = *((unsigned int *)v29 + 16);
    if ((_DWORD)v31 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v31])(&v41, v29 + 5);
    *((_DWORD *)v29 + 16) = -1;
    if (*((char *)v29 + 39) < 0)
      operator delete(v29[2]);
    operator delete(v29);
    v29 = v30;
  }
  while (v30);
LABEL_58:
  v32 = v43[0];
  v43[0] = 0;
  if (v32)
    operator delete(v32);
}

void sub_240B7D548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_240B731A0(&a20);
  sub_240B73210((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a27);
  sub_240B736E8(v27);
  _Unwind_Resume(a1);
}

void sub_240B7D5E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 37;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7DB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7DC04(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 30;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7E134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7E228(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 31;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7E758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7E84C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  _QWORD *v6;
  int *v7;
  int v8;
  int v9;
  int **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *__p;
  void **v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  char v45;
  char v46;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 32;
  sub_240B6F8C8(a1, (uint64_t)v43);
  v6 = v44;
  if (v44)
  {
    do
    {
      v11 = (int **)(v6 + 2);
      v12 = *((unsigned __int8 *)v6 + 39);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = v6[3];
      if (v12 == 7)
      {
        if (v13 >= 0)
          v7 = (int *)(v6 + 2);
        else
          v7 = *v11;
        v8 = *v7;
        v9 = *(int *)((char *)v7 + 3);
        if (v8 == 1886680431 && v9 == 1937012080)
          goto LABEL_11;
      }
      else if (v12 == 6)
      {
        v14 = (uint64_t)(v13 >= 0 ? v6 + 2 : *v11);
        v15 = *(_DWORD *)v14;
        v16 = *(unsigned __int16 *)(v14 + 4);
        if (v15 == 1970302569 && v16 == 29556)
          goto LABEL_11;
      }
      sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)v6 + 1);
LABEL_11:
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  v34 = 6;
  strcpy((char *)v33, "inputs");
  v18 = sub_240B821E8(v43, (uint64_t)v33);
  LOBYTE(v35) = 0;
  v37 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v45, &v35, v18 + 5),
        v37 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_240B700B4((char *)&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v41);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v41;
  *(_QWORD *)(a3 + 32) = v42;
  v42 = 0;
  v41 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v39;
    v28 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v39 = v26;
    operator delete(v28);
  }
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v37])(&v46, &v35);
  v37 = -1;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  do
  {
    v30 = (void **)*v29;
    v31 = *((unsigned int *)v29 + 16);
    if ((_DWORD)v31 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v31])(&v41, v29 + 5);
    *((_DWORD *)v29 + 16) = -1;
    if (*((char *)v29 + 39) < 0)
      operator delete(v29[2]);
    operator delete(v29);
    v29 = v30;
  }
  while (v30);
LABEL_58:
  v32 = v43[0];
  v43[0] = 0;
  if (v32)
    operator delete(v32);
}

void sub_240B7EBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_240B731A0(&a20);
  sub_240B73210((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a27);
  sub_240B736E8(v27);
  _Unwind_Resume(a1);
}

void sub_240B7EC50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  int *v6;
  int v7;
  int v8;
  int **v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *__p;
  void **v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  char v45;
  char v46;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 33;
  sub_240B6F8C8(a1, (uint64_t)v43);
  v5 = v44;
  if (v44)
  {
    do
    {
      v10 = (int **)(v5 + 2);
      v11 = *((unsigned __int8 *)v5 + 39);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = v5[3];
      if (v11 == 7)
      {
        if (v12 >= 0)
          v6 = (int *)(v5 + 2);
        else
          v6 = *v10;
        v7 = *v6;
        v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080)
          goto LABEL_11;
      }
      else if (v11 == 6)
      {
        v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        v14 = *(_DWORD *)v13;
        v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556)
          goto LABEL_11;
      }
      sub_240B72130(a3 + 64, (uint64_t)v10, (__int128 *)v5 + 1);
LABEL_11:
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  v34 = 7;
  strcpy((char *)v33, "outputs");
  v17 = sub_240B821E8(v43, (uint64_t)v33);
  LOBYTE(v35) = 0;
  v37 = -1;
  v18 = *((unsigned int *)v17 + 16);
  if ((_DWORD)v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v18])(&v45, &v35, v17 + 5),
        v37 = v18,
        (_DWORD)v18 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_240B700B4((char *)&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v41);
  v19 = (void **)(a3 + 40);
  v20 = *(_QWORD *)(a3 + 40);
  if (v20)
  {
    v21 = *(_QWORD *)(a3 + 48);
    v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v19;
    }
    *(_QWORD *)(a3 + 48) = v20;
    operator delete(v22);
    *v19 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v41;
  *(_QWORD *)(a3 + 56) = v42;
  v42 = 0;
  v41 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v39;
    v28 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v39 = v26;
    operator delete(v28);
  }
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v37])(&v46, &v35);
  v37 = -1;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  do
  {
    v30 = (void **)*v29;
    v31 = *((unsigned int *)v29 + 16);
    if ((_DWORD)v31 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v31])(&v41, v29 + 5);
    *((_DWORD *)v29 + 16) = -1;
    if (*((char *)v29 + 39) < 0)
      operator delete(v29[2]);
    operator delete(v29);
    v29 = v30;
  }
  while (v30);
LABEL_58:
  v32 = v43[0];
  v43[0] = 0;
  if (v32)
    operator delete(v32);
}

void sub_240B7EFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_240B731A0(&a20);
  sub_240B73210((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a27);
  sub_240B736E8(v27);
  _Unwind_Resume(a1);
}

void sub_240B7F050(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  _QWORD *v6;
  int *v7;
  int v8;
  int v9;
  int **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  void *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void *__p;
  void **v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void *v43[2];
  void *v44;
  char v45;
  char v46;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 34;
  sub_240B6F8C8(a1, (uint64_t)v43);
  v6 = v44;
  if (v44)
  {
    do
    {
      v11 = (int **)(v6 + 2);
      v12 = *((unsigned __int8 *)v6 + 39);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = v6[3];
      if (v12 == 7)
      {
        if (v13 >= 0)
          v7 = (int *)(v6 + 2);
        else
          v7 = *v11;
        v8 = *v7;
        v9 = *(int *)((char *)v7 + 3);
        if (v8 == 1886680431 && v9 == 1937012080)
          goto LABEL_11;
      }
      else if (v12 == 6)
      {
        v14 = (uint64_t)(v13 >= 0 ? v6 + 2 : *v11);
        v15 = *(_DWORD *)v14;
        v16 = *(unsigned __int16 *)(v14 + 4);
        if (v15 == 1970302569 && v16 == 29556)
          goto LABEL_11;
      }
      sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)v6 + 1);
LABEL_11:
      v6 = (_QWORD *)*v6;
    }
    while (v6);
  }
  v34 = 6;
  strcpy((char *)v33, "inputs");
  v18 = sub_240B821E8(v43, (uint64_t)v33);
  LOBYTE(v35) = 0;
  v37 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v45, &v35, v18 + 5),
        v37 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v39 = 0;
  v40 = 0;
  sub_240B700B4((char *)&__p, v35, v36, 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v41);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v41;
  *(_QWORD *)(a3 + 32) = v42;
  v42 = 0;
  v41 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v39;
    v28 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v39 = v26;
    operator delete(v28);
  }
  if (v37 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v37])(&v46, &v35);
  v37 = -1;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  else
  {
    v29 = (void **)v44;
    if (!v44)
      goto LABEL_58;
  }
  do
  {
    v30 = (void **)*v29;
    v31 = *((unsigned int *)v29 + 16);
    if ((_DWORD)v31 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v31])(&v41, v29 + 5);
    *((_DWORD *)v29 + 16) = -1;
    if (*((char *)v29 + 39) < 0)
      operator delete(v29[2]);
    operator delete(v29);
    v29 = v30;
  }
  while (v30);
LABEL_58:
  v32 = v43[0];
  v43[0] = 0;
  if (v32)
    operator delete(v32);
}

void sub_240B7F3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _QWORD *v27;

  sub_240B731A0(&a20);
  sub_240B73210((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a27);
  sub_240B736E8(v27);
  _Unwind_Resume(a1);
}

void sub_240B7F454(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v6;
  int **v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *__p;
  char v21;

  *(_QWORD *)a2 = off_25110BD18;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 35;
  sub_240B6F8C8(a1, (uint64_t)&v19);
  v3 = __p;
  if (!__p)
    goto LABEL_32;
  do
  {
    v8 = (int **)(v3 + 2);
    v9 = *((unsigned __int8 *)v3 + 39);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = v3[3];
    if (v9 == 7)
    {
      if (v10 >= 0)
        v4 = (int *)(v3 + 2);
      else
        v4 = *v8;
      v5 = *v4;
      v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080)
LABEL_10:
        sub_240B72130(a2 + 64, (uint64_t)v8, (__int128 *)v3 + 1);
    }
    else
    {
      if (v9 != 6)
        goto LABEL_10;
      v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      v12 = *(_DWORD *)v11;
      v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556)
        goto LABEL_10;
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  v15 = (void **)__p;
  if (__p)
  {
    do
    {
      v16 = (void **)*v15;
      v17 = *((unsigned int *)v15 + 16);
      if ((_DWORD)v17 != -1)
        ((void (*)(char *, void **))off_25110BE50[v17])(&v21, v15 + 5);
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0)
        operator delete(v15[2]);
      operator delete(v15);
      v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  v18 = v19;
  v19 = 0;
  if (v18)
    operator delete(v18);
}

void sub_240B7F5E0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

void sub_240B7F608(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 36;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B7FB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B7FC2C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 38;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B8015C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B80250(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 39;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B80780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B80874(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 40;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B80DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B80E98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 41;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B813C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B814BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 43;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B819EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

void sub_240B81AE0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void **v5;
  void **i;
  int *v7;
  int v8;
  int v9;
  int **v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void **v26;
  void **v27;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void **v38;
  void **v39;
  void *v40;
  void **v41;
  void **v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  void *__p;
  void **v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _QWORD v58[2];
  void **v59;
  char v60;
  char v61;

  *(_QWORD *)a3 = off_25110BD18;
  *(_OWORD *)(a3 + 16) = 0u;
  v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 44;
  sub_240B6F8C8(a1, (uint64_t)v58);
  for (i = v59; i; i = (void **)*i)
  {
    v11 = (int **)(i + 2);
    v12 = (void *)*((unsigned __int8 *)i + 39);
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = i[3];
    if (v12 == (void *)7)
    {
      if (v13 >= 0)
        v7 = (int *)(i + 2);
      else
        v7 = *v11;
      v8 = *v7;
      v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080)
        continue;
    }
    else if (v12 == (void *)6)
    {
      v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      v15 = *(_DWORD *)v14;
      v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556)
        continue;
    }
    sub_240B72130(a3 + 64, (uint64_t)v11, (__int128 *)i + 1);
  }
  v49 = 6;
  strcpy((char *)v48, "inputs");
  v18 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v50) = 0;
  v52 = -1;
  v19 = *((unsigned int *)v18 + 16);
  if ((_DWORD)v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v19])(&v60, &v50, v18 + 5),
        v52 = v19,
        (_DWORD)v19 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v50, v51, 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v20 = (char *)*v5;
  if (*v5)
  {
    v21 = *(char **)(a3 + 24);
    v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        v23 = (std::__shared_weak_count *)*((_QWORD *)v21 - 1);
        if (v23)
        {
          p_shared_owners = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v21 -= 16;
      }
      while (v21 != v20);
      v22 = *v5;
    }
    *(_QWORD *)(a3 + 24) = v20;
    operator delete(v22);
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v56;
  *(_QWORD *)(a3 + 32) = v57;
  v57 = 0;
  v56 = 0uLL;
  v26 = (void **)__p;
  if (__p)
  {
    v27 = v54;
    v28 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      while (v27 != v26);
      v28 = __p;
    }
    v54 = v26;
    operator delete(v28);
  }
  if (v52 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v52])(&v61, &v50);
  v52 = -1;
  if (v49 < 0)
    operator delete(v48[0]);
  v49 = 7;
  strcpy((char *)v48, "outputs");
  v29 = sub_240B821E8(v58, (uint64_t)v48);
  LOBYTE(v45) = 0;
  v47 = -1;
  v30 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v30 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_25110BE78[v30])(&v60, &v45, v29 + 5),
        v47 = v30,
        (_DWORD)v30 != 3))
  {
    sub_240B735D8();
  }
  __p = 0;
  v54 = 0;
  v55 = 0;
  sub_240B700B4((char *)&__p, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  sub_240B6FD34((uint64_t *)&__p, a2, (uint64_t)&v56);
  v31 = (void **)(a3 + 40);
  v32 = *(_QWORD *)(a3 + 40);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 48);
    v34 = *(void **)(a3 + 40);
    if (v33 != v32)
    {
      do
      {
        v35 = *(std::__shared_weak_count **)(v33 - 8);
        if (v35)
        {
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 -= 16;
      }
      while (v33 != v32);
      v34 = *v31;
    }
    *(_QWORD *)(a3 + 48) = v32;
    operator delete(v34);
    *v31 = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v56;
  *(_QWORD *)(a3 + 56) = v57;
  v57 = 0;
  v56 = 0uLL;
  v38 = (void **)__p;
  if (__p)
  {
    v39 = v54;
    v40 = __p;
    if (v54 != __p)
    {
      do
      {
        if (*((char *)v39 - 1) < 0)
          operator delete(*(v39 - 3));
        v39 -= 3;
      }
      while (v39 != v38);
      v40 = __p;
    }
    v54 = v38;
    operator delete(v40);
  }
  if (v47 != -1)
    ((void (*)(char *, uint64_t *))off_25110BE50[v47])(&v61, &v45);
  v47 = -1;
  if (v49 < 0)
  {
    operator delete(v48[0]);
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  else
  {
    v41 = v59;
    if (!v59)
      goto LABEL_83;
  }
  do
  {
    v42 = (void **)*v41;
    v43 = *((unsigned int *)v41 + 16);
    if ((_DWORD)v43 != -1)
      ((void (*)(__int128 *, void **))off_25110BE50[v43])(&v56, v41 + 5);
    *((_DWORD *)v41 + 16) = -1;
    if (*((char *)v41 + 39) < 0)
      operator delete(v41[2]);
    operator delete(v41);
    v41 = v42;
  }
  while (v42);
LABEL_83:
  v44 = (void *)v58[0];
  v58[0] = 0;
  if (v44)
    operator delete(v44);
}

void sub_240B82010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  _QWORD *v24;
  uint64_t v25;

  sub_240B731A0(&a24);
  sub_240B73210((uint64_t)&a9);
  if (a18 < 0)
    operator delete(__p);
  sub_240B70478(v25 - 128);
  sub_240B736E8(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_240B82104(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_240B82164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_240B823E0(a1, a2, a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_240B821C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v3;

  v3 = *(char **)(v1 + 16);
  if (v3)
    sub_240BBA6C0(v3);
  sub_240BBA6A8((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B821E8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v16 == v8)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_240B8236C()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B82380(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25110BEB0;
  result[1] = v3;
  return result;
}

uint64_t sub_240B823B4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25110BEB0;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B823D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t *sub_240B823E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD v35[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v35, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_240B8275C(a1, v10, a3, (uint64_t)v35);
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *(_QWORD *)v35[0] = *v32;
    *v32 = v35[0];
  }
  else
  {
    *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v35[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v35[0])
    {
      v33 = *(_QWORD *)(*(_QWORD *)v35[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11)
          v33 %= v11;
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v35[0];
    }
  }
  v15 = (uint64_t *)v35[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B82744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B82848((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240B8275C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_240B6FF68((_BYTE *)v8 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  result = *(_QWORD *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      goto LABEL_9;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_240B8281C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_240B82848(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B82848(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (!*((_BYTE *)a1 + 16))
    {
LABEL_10:
      operator delete((void *)v2);
      return a1;
    }
    v3 = *(_QWORD **)(v2 + 64);
    if (v3 == (_QWORD *)(v2 + 40))
    {
      v4 = 4;
      v3 = (_QWORD *)(v2 + 40);
    }
    else
    {
      if (!v3)
        goto LABEL_8;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
    if (*(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    goto LABEL_10;
  }
  return a1;
}

uint64_t sub_240B828C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  __int128 v9;

  *(_QWORD *)a1 = off_25110BD18;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a2 + 40) = 0u;
  v3 = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v4;
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(a1 + 72);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v6 %= v7;
    }
    else
    {
      v6 &= v7 - 1;
    }
    *(_QWORD *)(v3 + 8 * v6) = a1 + 80;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 88) = 0;
  }
  *(_QWORD *)a1 = off_25110BD48;
  v8 = (_BYTE *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_240B6FF68(v8, *(void **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

void sub_240B829E4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B736E8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B829F8(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v8 == v16)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_240B82B78()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_25110BF10;
  __cxa_throw(exception, (struct type_info *)&unk_25110BEE8, (void (*)(void *))std::exception::~exception);
}

void sub_240B82BB0(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x24268ACF8);
}

void sub_240B82BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  void **v19;
  uint64_t v20;
  void *v21;
  void *v22[2];
  char v23;
  void *__p[2];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  void *v29[2];
  void *v30;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 10)
  {
    sub_240B6F8C8(a2, (uint64_t)v29);
    HIBYTE(v25) = 6;
    strcpy((char *)__p, "kindex");
    sub_240BA7A94(v29, (uint64_t)__p, (uint64_t)&v26);
    if (v28)
      sub_240B735D8();
    v5 = v26;
    v28 = -1;
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    v6 = *(_QWORD *)(a3 + 176);
    v8 = *(_QWORD **)(a3 + 184);
    v7 = (_QWORD *)(a3 + 176);
    v9 = ((uint64_t)v8 - v6) >> 3;
    if (v5 >= v9)
    {
      v10 = v5 + 1 - v9;
      if (v5 + 1 <= v9)
      {
        if (v5 + 1 < v9)
        {
          v11 = (_QWORD *)(v6 + 8 * (v5 + 1));
          while (v8 != v11)
          {
            v13 = *--v8;
            v12 = v13;
            *v8 = 0;
            if (v13)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v12 + 8))(v12, v10);
          }
          *(_QWORD *)(a3 + 184) = v11;
        }
      }
      else
      {
        sub_240B82FC4((_QWORD *)(a3 + 176), v10);
      }
    }
    v23 = 5;
    strcpy((char *)v22, "kname");
    sub_240BA7A94(v29, (uint64_t)v22, (uint64_t)&v26);
    if (v28 != 2)
      sub_240B735D8();
    *(_OWORD *)__p = v26;
    v25 = v27;
    v26 = 0uLL;
    v27 = 0;
    v28 = -1;
    if (v23 < 0)
      operator delete(v22[0]);
    v14 = sub_240BB84D8(0x60uLL);
    sub_240BA7698((uint64_t)v14, (__int128 *)__p, *(_BYTE *)(a3 + 384));
    v15 = *(_QWORD *)(*v7 + 8 * v5);
    *(_QWORD *)(*v7 + 8 * v5) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v23 = 9;
    strcpy((char *)v22, "arguments");
    sub_240BA7A94(v29, (uint64_t)v22, (uint64_t)&v26);
    if (v28)
      sub_240B735D8();
    v16 = v26;
    v28 = -1;
    if (v23 < 0)
      operator delete(v22[0]);
    sub_240BA774C(*(_QWORD *)(*v7 + 8 * v5), v16);
    v23 = 13;
    strcpy((char *)v22, "scratchbuffer");
    sub_240BA7A94(v29, (uint64_t)v22, (uint64_t)&v26);
    if (v28)
      sub_240B735D8();
    v17 = v26;
    v28 = -1;
    if (v23 < 0)
      operator delete(v22[0]);
    sub_240BA77C4(*(_QWORD *)(*v7 + 8 * v5), v17 != 0);
    if (SHIBYTE(v25) < 0)
    {
      operator delete(__p[0]);
      v18 = (void **)v30;
      if (!v30)
        goto LABEL_35;
    }
    else
    {
      v18 = (void **)v30;
      if (!v30)
      {
LABEL_35:
        v21 = v29[0];
        v29[0] = 0;
        if (v21)
          operator delete(v21);
        return;
      }
    }
    do
    {
      v19 = (void **)*v18;
      v20 = *((unsigned int *)v18 + 16);
      if ((_DWORD)v20 != -1)
        ((void (*)(__int128 *, void **))off_25110BF50[v20])(&v26, v18 + 5);
      *((_DWORD *)v18 + 16) = -1;
      if (*((char *)v18 + 39) < 0)
        operator delete(v18[2]);
      operator delete(v18);
      v18 = v19;
    }
    while (v19);
    goto LABEL_35;
  }
}

void sub_240B82EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_240B70478((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_240B82FB0()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_240B82FC4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = (uint64_t)&v5[-*a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_240B70258();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_240B7007C();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v5)
LABEL_30:
        operator delete(v6);
    }
    else
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x78
        || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5)
      {
        goto LABEL_37;
      }
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v14 -= v20;
      v6 = &v5[-v20];
      v21 = v5 - 16;
      v22 = &v13[8 * v9 - 16];
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v25 = *((_OWORD *)v21 - 1);
        v24 = *(_OWORD *)v21;
        *((_OWORD *)v21 - 1) = 0uLL;
        *(_OWORD *)v21 = 0uLL;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)v22 = v24;
        v21 -= 32;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_37:
        do
        {
          v26 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *(_QWORD *)v6 = 0;
          *((_QWORD *)v14 - 1) = v26;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v27 = (char *)*a1;
      v6 = (char *)a1[1];
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (v6 != v27)
      {
        do
        {
          v29 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          v28 = v29;
          *(_QWORD *)v6 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        while (v6 != v27);
        v6 = v27;
      }
      if (v6)
        goto LABEL_30;
    }
  }
}

void sub_240B831C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 *v11;
  int v12;
  int v13;
  BOOL v14;
  unsigned __int16 *v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unint64_t v21;
  __int128 v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void **v27;
  void **v28;
  uint64_t v29;
  void *v30;
  void *__p[2];
  char v32;
  __int128 __dst;
  uint64_t v34;
  _OWORD v35[4];
  _QWORD v36[2];
  void **v37;
  __int128 v38;
  uint64_t v39;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) != 14)
    return;
  sub_240B6F8C8(a2, (uint64_t)v36);
  __dst = 0uLL;
  v34 = 0;
  memset((char *)v35 + 8, 0, 48);
  if (&__dst != (__int128 *)(a2 + 48))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_240B733F4(&__dst, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      __dst = *(_OWORD *)(a2 + 48);
      v34 = *(_QWORD *)(a2 + 64);
    }
  }
  v32 = 5;
  strcpy((char *)__p, "place");
  *(_QWORD *)&v38 = __p;
  v5 = sub_240B73C48((uint64_t)v36, (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v38);
  if (*((_DWORD *)v5 + 16) != 2)
    sub_240B735D8();
  if ((char)v5[63] < 0)
  {
    sub_240B6FF68(&v38, *((void **)v5 + 5), *((_QWORD *)v5 + 6));
  }
  else
  {
    v38 = *(_OWORD *)(v5 + 40);
    v39 = *((_QWORD *)v5 + 7);
  }
  v6 = HIBYTE(v39);
  v7 = HIBYTE(v39);
  v8 = *((_QWORD *)&v38 + 1);
  if (v39 >= 0)
    v9 = (char *)&v38 + HIBYTE(v39);
  else
    v9 = (char *)(v38 + *((_QWORD *)&v38 + 1));
  if (v39 >= 0)
    v10 = (char *)&v38;
  else
    v10 = (char *)v38;
  if (v10 != v9)
  {
    do
    {
      *v10 = __tolower(*v10);
      ++v10;
    }
    while (v10 != v9);
    v6 = HIBYTE(v39);
    v8 = *((_QWORD *)&v38 + 1);
    v7 = HIBYTE(v39);
  }
  if (v7 < 0)
    v6 = v8;
  if (v6 == 3)
  {
    v15 = (unsigned __int16 *)v38;
    if (v7 >= 0)
      v15 = (unsigned __int16 *)&v38;
    v16 = bswap32(*v15) >> 16;
    if (v16 == 26480)
    {
      v17 = *((unsigned __int8 *)v15 + 2) - 117;
    }
    else if (v16 >> 4 < 0x677)
    {
      v17 = -1;
    }
    else
    {
      v17 = 1;
    }
    v14 = v17 == 0;
LABEL_38:
    v18 = v14;
    if ((v7 & 0x80) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  if (v6 == 6)
  {
    v11 = (__int128 *)v38;
    if (v7 >= 0)
      v11 = &v38;
    v12 = *(_DWORD *)v11;
    v13 = *((unsigned __int16 *)v11 + 2);
    v14 = v12 == 1769366884 && v13 == 25955;
    goto LABEL_38;
  }
  v18 = 0;
  if (v7 < 0)
LABEL_42:
    operator delete((void *)v38);
LABEL_43:
  LODWORD(v35[0]) = v18;
  if (v32 < 0)
    operator delete(__p[0]);
  HIBYTE(v39) = 9;
  strcpy((char *)&v38, "alignment");
  __p[0] = &v38;
  v19 = sub_240B73C48((uint64_t)v36, (uint64_t)&v38, (uint64_t)&unk_240BBBF40, (__int128 **)__p);
  if (*((_DWORD *)v19 + 16))
    sub_240B735D8();
  *(_QWORD *)&v35[2] = *((_QWORD *)v19 + 5);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  HIBYTE(v39) = 4;
  strcpy((char *)&v38, "size");
  __p[0] = &v38;
  v20 = sub_240B73C48((uint64_t)v36, (uint64_t)&v38, (uint64_t)&unk_240BBBF40, (__int128 **)__p);
  if (*((_DWORD *)v20 + 16))
    sub_240B735D8();
  *((_QWORD *)&v35[1] + 1) = *((_QWORD *)v20 + 5);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  *(_QWORD *)&v35[1] = 0;
  v21 = *(_QWORD *)(a3 + 88);
  if (v21 >= *(_QWORD *)(a3 + 96))
  {
    v23 = sub_240B83648((char **)(a3 + 80), (uint64_t)&__dst);
  }
  else
  {
    if (SHIBYTE(v34) < 0)
    {
      sub_240B6FF68(*(_BYTE **)(a3 + 88), (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      v22 = __dst;
      *(_QWORD *)(v21 + 16) = v34;
      *(_OWORD *)v21 = v22;
    }
    v24 = v35[0];
    v25 = v35[1];
    v26 = v35[2];
    *(_QWORD *)(v21 + 72) = *(_QWORD *)&v35[3];
    *(_OWORD *)(v21 + 56) = v26;
    *(_OWORD *)(v21 + 40) = v25;
    *(_OWORD *)(v21 + 24) = v24;
    v23 = (char *)(v21 + 80);
    *(_QWORD *)(a3 + 88) = v21 + 80;
  }
  *(_QWORD *)(a3 + 88) = v23;
  sub_240BA7B84((uint64_t)&__dst);
  v27 = v37;
  if (v37)
  {
    do
    {
      v28 = (void **)*v27;
      v29 = *((unsigned int *)v27 + 16);
      if ((_DWORD)v29 != -1)
        ((void (*)(__int128 *, void **))off_25110BFA0[v29])(&__dst, v27 + 5);
      *((_DWORD *)v27 + 16) = -1;
      if (*((char *)v27 + 39) < 0)
        operator delete(v27[2]);
      operator delete(v27);
      v27 = v28;
    }
    while (v28);
  }
  v30 = (void *)v36[0];
  v36[0] = 0;
  if (v30)
    operator delete(v30);
}

void sub_240B835B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a5);
  v8 = v6;
  *(_QWORD *)(v5 + 88) = v8;
  sub_240BA7B84((uint64_t)va);
  sub_240B70478(v7 - 104);
  _Unwind_Resume(a1);
}

void sub_240B83634()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

char *sub_240B83648(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  void **v20;
  char *v21;
  char *v23;
  char *v24;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4);
  v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333)
    sub_240B70258();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 4) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4) >= 0x199999999999999)
    v8 = 0x333333333333333;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x333333333333333)
      sub_240B7007C();
    v9 = operator new(80 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[80 * v5];
  v24 = &v9[80 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_240B6FF68(&v9[80 * v5], *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = &v9[80 * v5];
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  }
  v11 = &v9[80 * v5];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  v12 = v11 + 80;
  v23 = v11 + 80;
  if (v4 == v3)
  {
    v21 = v3;
  }
  else
  {
    v13 = 0;
    do
    {
      v19 = &v10[v13 - 80];
      v20 = (void **)&v4[v13 - 80];
      if (v4[v13 - 57] < 0)
      {
        sub_240B6FF68(v19, *v20, *(_QWORD *)&v4[v13 - 72]);
      }
      else
      {
        v14 = *(_OWORD *)v20;
        *(_QWORD *)&v10[v13 - 64] = *(_QWORD *)&v4[v13 - 64];
        *(_OWORD *)v19 = v14;
      }
      v15 = &v10[v13];
      v16 = *(_OWORD *)&v4[v13 - 56];
      v17 = *(_OWORD *)&v4[v13 - 40];
      v18 = *(_OWORD *)&v4[v13 - 24];
      *((_QWORD *)v15 - 1) = *(_QWORD *)&v4[v13 - 8];
      *(_OWORD *)(v15 - 24) = v18;
      *(_OWORD *)(v15 - 40) = v17;
      *(_OWORD *)(v15 - 56) = v16;
      v13 -= 80;
    }
    while (&v4[v13] != v3);
    v21 = *a1;
    v3 = a1[1];
    v10 += v13;
    v12 = v23;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v24;
  if (v3 != v21)
  {
    do
    {
      v3 -= 80;
      sub_240BA7B84((uint64_t)v3);
    }
    while (v3 != v21);
    v3 = v21;
  }
  if (v3)
    operator delete(v3);
  return v12;
}

void sub_240B83860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B83890((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240B83890(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    sub_240BA7B84(i - 80);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_240B838E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v5;
  int v6;
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 *v21;
  _OWORD *v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 *v37;
  _OWORD *v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  void *v49;
  void **v50;
  void *v51;
  int v52;
  uint64_t v54;
  void **v55;
  uint64_t *v56;
  uint64_t *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  _OWORD *v63;
  unint64_t v64;
  unint64_t v65;
  __int128 *v66;
  _OWORD *v67;
  unint64_t v68;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  _OWORD *v79;
  unint64_t v80;
  unint64_t v81;
  __int128 *v82;
  _OWORD *v83;
  unint64_t v84;
  __int128 v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  char *v95;
  char *v96;
  __int128 *v97;
  uint64_t v98;
  unsigned __int16 *v99;
  int v103;
  int v104;
  uint64_t v106;
  __int128 *v107;
  __int128 *v111;
  uint64_t *v112;
  uint64_t *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  _OWORD *v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  void **v124;
  void **v125;
  uint64_t v126;
  void *v127;
  void *__p[2];
  char v129;
  void *v130[2];
  uint64_t v131;
  void *v132[2];
  char *v133;
  void *__dst[2];
  uint64_t v135;
  __int128 v136;
  void *v137[2];
  void *v138;
  void **v139;
  __int128 v140;
  char *v141;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 15
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 9)
  {
    sub_240B6F8C8(a2, (uint64_t)v137);
    v5 = sub_240BB84D8(0xA8uLL);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    sub_240BA7BB4((uint64_t)v5, v6, a3[4]);
    *(_QWORD *)&v136 = v5;
    v7 = (_QWORD *)operator new();
    *v7 = &off_25110C028;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v5;
    *((_QWORD *)&v136 + 1) = v7;
    HIBYTE(v141) = 10;
    strcpy((char *)&v140, "dimensions");
    __dst[0] = &v140;
    v8 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)__dst);
    if (*((_DWORD *)v8 + 16) != 4)
      sub_240B735D8();
    if (SHIBYTE(v141) < 0)
      operator delete((void *)v140);
    HIBYTE(v141) = 7;
    strcpy((char *)&v140, "strides");
    __dst[0] = &v140;
    v9 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)__dst);
    if (*((_DWORD *)v9 + 16) != 4)
      sub_240B735D8();
    if (SHIBYTE(v141) < 0)
      operator delete((void *)v140);
    HIBYTE(v141) = 4;
    strcpy((char *)&v140, "name");
    v132[0] = &v140;
    v10 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)v132);
    if (*((_DWORD *)v10 + 16) != 2)
      sub_240B735D8();
    if ((char)v10[63] < 0)
    {
      sub_240B6FF68(__dst, *((void **)v10 + 5), *((_QWORD *)v10 + 6));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v10 + 40);
      v135 = *((_QWORD *)v10 + 7);
    }
    if (SHIBYTE(v141) < 0)
      operator delete((void *)v140);
    HIBYTE(v141) = 4;
    strcpy((char *)&v140, "type");
    v130[0] = &v140;
    v11 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)v130);
    if (*((_DWORD *)v11 + 16) != 2)
      sub_240B735D8();
    if ((char)v11[63] < 0)
    {
      sub_240B6FF68(v132, *((void **)v11 + 5), *((_QWORD *)v11 + 6));
    }
    else
    {
      *(_OWORD *)v132 = *(_OWORD *)(v11 + 40);
      v133 = (char *)*((_QWORD *)v11 + 7);
    }
    if (SHIBYTE(v141) < 0)
      operator delete((void *)v140);
    v12 = v136;
    HIBYTE(v141) = 9;
    strcpy((char *)&v140, "alignment");
    v130[0] = &v140;
    v13 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)v130);
    if (*((_DWORD *)v13 + 16))
      sub_240B735D8();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 88))(v12, *((_QWORD *)v13 + 5));
    if (SHIBYTE(v141) < 0)
      operator delete((void *)v140);
    v14 = v136;
    v16 = *((_QWORD *)v8 + 5);
    v15 = *((_QWORD *)v8 + 6);
    v141 = 0;
    v140 = 0uLL;
    v17 = v15 - v16;
    if (v15 != v16)
    {
      if (v17 < 0)
        sub_240B70258();
      v18 = operator new(v15 - v16);
      *(_QWORD *)&v140 = v18;
      v141 = (char *)v18 + 8 * (v17 >> 3);
      bzero(v18, v17);
      v19 = 0;
      *((_QWORD *)&v140 + 1) = (char *)v18 + v17;
      if ((unint64_t)(v17 >> 3) <= 1)
        v20 = 1;
      else
        v20 = v17 >> 3;
      if (v20 < 4)
        goto LABEL_34;
      if ((unint64_t)v18 - v16 < 0x20)
        goto LABEL_34;
      v19 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      v21 = (__int128 *)(v16 + 16);
      v22 = v18 + 1;
      v23 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v21;
        *(v22 - 1) = *(v21 - 1);
        *v22 = v24;
        v21 += 2;
        v22 += 2;
        v23 -= 4;
      }
      while (v23);
      if (v20 != v19)
      {
LABEL_34:
        v25 = v20 - v19;
        v26 = 8 * v19;
        v27 = (_QWORD *)v18 + v19;
        v28 = (uint64_t *)(v16 + v26);
        do
        {
          v29 = *v28++;
          *v27++ = v29;
          --v25;
        }
        while (v25);
      }
    }
    sub_240BA8AFC(v14, (char **)&v140);
    if ((_QWORD)v140)
    {
      *((_QWORD *)&v140 + 1) = v140;
      operator delete((void *)v140);
    }
    v30 = v136;
    v32 = *((_QWORD *)v8 + 5);
    v31 = *((_QWORD *)v8 + 6);
    v141 = 0;
    v140 = 0uLL;
    v33 = v31 - v32;
    if (v31 != v32)
    {
      if (v33 < 0)
        sub_240B70258();
      v34 = operator new(v31 - v32);
      *(_QWORD *)&v140 = v34;
      v141 = (char *)v34 + 8 * (v33 >> 3);
      bzero(v34, v33);
      v35 = 0;
      *((_QWORD *)&v140 + 1) = (char *)v34 + v33;
      if ((unint64_t)(v33 >> 3) <= 1)
        v36 = 1;
      else
        v36 = v33 >> 3;
      if (v36 < 4)
        goto LABEL_48;
      if ((unint64_t)v34 - v32 < 0x20)
        goto LABEL_48;
      v35 = v36 & 0xFFFFFFFFFFFFFFFCLL;
      v37 = (__int128 *)(v32 + 16);
      v38 = v34 + 1;
      v39 = v36 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v40 = *v37;
        *(v38 - 1) = *(v37 - 1);
        *v38 = v40;
        v37 += 2;
        v38 += 2;
        v39 -= 4;
      }
      while (v39);
      if (v36 != v35)
      {
LABEL_48:
        v41 = v36 - v35;
        v42 = 8 * v35;
        v43 = (_QWORD *)v34 + v35;
        v44 = (uint64_t *)(v32 + v42);
        do
        {
          v45 = *v44++;
          *v43++ = v45;
          --v41;
        }
        while (v41);
      }
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v30 + 56))(v30, &v140);
    if ((_QWORD)v140)
    {
      *((_QWORD *)&v140 + 1) = v140;
      operator delete((void *)v140);
    }
    sub_240BBA00C(v136, __dst);
    v46 = v136;
    HIBYTE(v141) = 6;
    strcpy((char *)&v140, "offset");
    v130[0] = &v140;
    v47 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)v130);
    if (*((_DWORD *)v47 + 16))
      sub_240B735D8();
    sub_240BA8B98(v46, *((_QWORD *)v47 + 5));
    if (SHIBYTE(v141) < 0)
      operator delete((void *)v140);
    HIBYTE(v141) = 10;
    strcpy((char *)&v140, "allocation");
    __p[0] = &v140;
    v48 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)__p);
    if (*((_DWORD *)v48 + 16) != 2)
      sub_240B735D8();
    if ((char)v48[63] < 0)
    {
      sub_240B6FF68(v130, *((void **)v48 + 5), *((_QWORD *)v48 + 6));
    }
    else
    {
      *(_OWORD *)v130 = *(_OWORD *)(v48 + 40);
      v131 = *((_QWORD *)v48 + 7);
    }
    if (SHIBYTE(v141) < 0)
      operator delete((void *)v140);
    if (v131 >= 0)
      v49 = (void *)HIBYTE(v131);
    else
      v49 = v130[1];
    if (v49 == (void *)4)
    {
      if (v131 >= 0)
        v55 = v130;
      else
        v55 = (void **)v130[0];
      if (!memcmp(v55, "User", 4uLL))
      {
        v54 = 1;
LABEL_79:
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v136 + 112))(v136, v54);
        HIBYTE(v141) = 6;
        strcpy((char *)&v140, "region");
        v56 = sub_240B821E8(v137, (uint64_t)&v140);
        v57 = v56;
        if (SHIBYTE(v141) < 0)
        {
          operator delete((void *)v140);
          if (!v57)
            goto LABEL_91;
        }
        else if (!v56)
        {
          goto LABEL_91;
        }
        v129 = 6;
        strcpy((char *)__p, "region");
        v139 = __p;
        v58 = sub_240B73C48((uint64_t)v137, (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v139);
        if (*((_DWORD *)v58 + 16) != 2)
          sub_240B735D8();
        if ((char)v58[63] < 0)
        {
          sub_240B6FF68(&v140, *((void **)v58 + 5), *((_QWORD *)v58 + 6));
        }
        else
        {
          v140 = *(_OWORD *)(v58 + 40);
          v141 = (char *)*((_QWORD *)v58 + 7);
        }
        if (v129 < 0)
          operator delete(__p[0]);
        sub_240BA8BB0(v136, &v140);
        if (SHIBYTE(v141) < 0)
          operator delete((void *)v140);
LABEL_91:
        v59 = v136;
        v61 = *((_QWORD *)v9 + 5);
        v60 = *((_QWORD *)v9 + 6);
        v141 = 0;
        v140 = 0uLL;
        v62 = v60 - v61;
        if (v60 != v61)
        {
          if (v62 < 0)
            sub_240B70258();
          v63 = operator new(v60 - v61);
          *(_QWORD *)&v140 = v63;
          v141 = (char *)v63 + 8 * (v62 >> 3);
          bzero(v63, v62);
          v64 = 0;
          *((_QWORD *)&v140 + 1) = (char *)v63 + v62;
          if ((unint64_t)(v62 >> 3) <= 1)
            v65 = 1;
          else
            v65 = v62 >> 3;
          if (v65 < 4)
            goto LABEL_101;
          if ((unint64_t)v63 - v61 < 0x20)
            goto LABEL_101;
          v64 = v65 & 0xFFFFFFFFFFFFFFFCLL;
          v66 = (__int128 *)(v61 + 16);
          v67 = v63 + 1;
          v68 = v65 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v69 = *v66;
            *(v67 - 1) = *(v66 - 1);
            *v67 = v69;
            v66 += 2;
            v67 += 2;
            v68 -= 4;
          }
          while (v68);
          if (v65 != v64)
          {
LABEL_101:
            v70 = v65 - v64;
            v71 = 8 * v64;
            v72 = (_QWORD *)v63 + v64;
            v73 = (uint64_t *)(v61 + v71);
            do
            {
              v74 = *v73++;
              *v72++ = v74;
              --v70;
            }
            while (v70);
          }
        }
        sub_240BA8B28(v59, (char **)&v140);
        if ((_QWORD)v140)
        {
          *((_QWORD *)&v140 + 1) = v140;
          operator delete((void *)v140);
        }
        v75 = v136;
        v77 = *((_QWORD *)v9 + 5);
        v76 = *((_QWORD *)v9 + 6);
        v141 = 0;
        v140 = 0uLL;
        v78 = v76 - v77;
        if (v76 != v77)
        {
          if (v78 < 0)
            sub_240B70258();
          v79 = operator new(v76 - v77);
          *(_QWORD *)&v140 = v79;
          v141 = (char *)v79 + 8 * (v78 >> 3);
          bzero(v79, v78);
          v80 = 0;
          *((_QWORD *)&v140 + 1) = (char *)v79 + v78;
          if ((unint64_t)(v78 >> 3) <= 1)
            v81 = 1;
          else
            v81 = v78 >> 3;
          if (v81 < 4)
            goto LABEL_115;
          if ((unint64_t)v79 - v77 < 0x20)
            goto LABEL_115;
          v80 = v81 & 0xFFFFFFFFFFFFFFFCLL;
          v82 = (__int128 *)(v77 + 16);
          v83 = v79 + 1;
          v84 = v81 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v85 = *v82;
            *(v83 - 1) = *(v82 - 1);
            *v83 = v85;
            v82 += 2;
            v83 += 2;
            v84 -= 4;
          }
          while (v84);
          if (v81 != v80)
          {
LABEL_115:
            v86 = v81 - v80;
            v87 = 8 * v80;
            v88 = (_QWORD *)v79 + v80;
            v89 = (uint64_t *)(v77 + v87);
            do
            {
              v90 = *v89++;
              *v88++ = v90;
              --v86;
            }
            while (v86);
          }
        }
        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v75 + 64))(v75, &v140);
        if ((_QWORD)v140)
        {
          *((_QWORD *)&v140 + 1) = v140;
          operator delete((void *)v140);
        }
        v91 = v136;
        if (SHIBYTE(v133) < 0)
        {
          sub_240B6FF68(&v140, v132[0], (unint64_t)v132[1]);
        }
        else
        {
          v140 = *(_OWORD *)v132;
          v141 = v133;
        }
        v92 = HIBYTE(v141);
        v93 = HIBYTE(v141);
        v94 = *((_QWORD *)&v140 + 1);
        if (SHIBYTE(v141) >= 0)
          v95 = (char *)&v140 + HIBYTE(v141);
        else
          v95 = (char *)(v140 + *((_QWORD *)&v140 + 1));
        if (SHIBYTE(v141) >= 0)
          v96 = (char *)&v140;
        else
          v96 = (char *)v140;
        if (v96 != v95)
        {
          do
          {
            *v96 = __tolower(*v96);
            ++v96;
          }
          while (v96 != v95);
          v92 = HIBYTE(v141);
          v94 = *((_QWORD *)&v140 + 1);
          v93 = HIBYTE(v141);
        }
        if ((v93 & 0x80u) != 0)
          v92 = v94;
        if (v92 == 3)
        {
          v99 = (unsigned __int16 *)v140;
          if ((v93 & 0x80u) == 0)
            v99 = (unsigned __int16 *)&v140;
          if (*v99 == 12649 && *((_BYTE *)v99 + 2) == 54)
          {
            v98 = 1;
            goto LABEL_201;
          }
          if (*v99 == 13161 && *((_BYTE *)v99 + 2) == 50)
          {
            v98 = 2;
            goto LABEL_201;
          }
          if (*v99 == 13929 && *((_BYTE *)v99 + 2) == 52)
          {
            v98 = 3;
            goto LABEL_201;
          }
          v103 = *v99;
          v104 = *((unsigned __int8 *)v99 + 2);
          if (v103 == 12661 && v104 == 54)
          {
            v98 = 5;
            goto LABEL_201;
          }
        }
        else if (v92 == 2)
        {
          v97 = (__int128 *)v140;
          if ((v93 & 0x80u) == 0)
            v97 = &v140;
          if (*(_WORD *)v97 == 14441)
          {
            v98 = 0;
            goto LABEL_201;
          }
          if (*(_WORD *)v97 == 14453)
          {
            v98 = 4;
            goto LABEL_201;
          }
        }
        if ((v93 & 0x80u) == 0)
          v106 = v93;
        else
          v106 = v94;
        if (v106 == 4)
        {
          if ((v93 & 0x80u) == 0)
            v111 = &v140;
          else
            v111 = (__int128 *)v140;
          if (!memcmp(v111, "fp16", 4uLL))
            goto LABEL_192;
        }
        else if (v106 == 3)
        {
          if ((v93 & 0x80u) == 0)
            v107 = &v140;
          else
            v107 = (__int128 *)v140;
          if (*(_WORD *)v107 == 13173 && *((_BYTE *)v107 + 2) == 50)
          {
            v98 = 6;
            goto LABEL_201;
          }
          if (*(_WORD *)v107 == 13941 && *((_BYTE *)v107 + 2) == 52)
          {
            v98 = 7;
            goto LABEL_201;
          }
          if (*(_WORD *)v107 != 12646 || *((_BYTE *)v107 + 2) != 54)
          {
            if (!memcmp(v107, "f32", 3uLL))
              goto LABEL_185;
            goto LABEL_184;
          }
LABEL_192:
          v98 = 8;
          goto LABEL_201;
        }
LABEL_184:
        if (sub_240B84898((const void **)&v140, "fp32"))
        {
LABEL_185:
          v98 = 9;
          goto LABEL_201;
        }
        if (sub_240B84898((const void **)&v140, "f64") || sub_240B84898((const void **)&v140, "fp64"))
        {
          v98 = 10;
        }
        else if (sub_240B84898((const void **)&v140, "opaque"))
        {
          v98 = 11;
        }
        else
        {
          v98 = 12;
        }
LABEL_201:
        if (SHIBYTE(v141) < 0)
          operator delete((void *)v140);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v91 + 24))(v91, v98);
        HIBYTE(v141) = 3;
        strcpy((char *)&v140, "evt");
        v112 = sub_240B821E8(v137, (uint64_t)&v140);
        v113 = v112;
        if (SHIBYTE(v141) < 0)
        {
          operator delete((void *)v140);
          if (!v113)
            goto LABEL_211;
        }
        else if (!v112)
        {
          goto LABEL_211;
        }
        HIBYTE(v141) = 3;
        strcpy((char *)&v140, "evt");
        __p[0] = &v140;
        v114 = sub_240B73C48((uint64_t)v137, (uint64_t)&v140, (uint64_t)&unk_240BBBF40, (__int128 **)__p);
        if (*((_DWORD *)v114 + 16))
          sub_240B735D8();
        v115 = *((_QWORD *)v114 + 5);
        if (SHIBYTE(v141) < 0)
          operator delete((void *)v140);
        sub_240BA8C90(v136, *(_QWORD *)(a3[16] + 16 * v115));
LABEL_211:
        v116 = (_QWORD *)a3[14];
        if ((unint64_t)v116 >= a3[15])
        {
          v120 = sub_240B73800((uint64_t)(a3 + 13), &v136);
        }
        else
        {
          *v116 = v136;
          v117 = *((_QWORD *)&v136 + 1);
          v116[1] = *((_QWORD *)&v136 + 1);
          if (v117)
          {
            v118 = (unint64_t *)(v117 + 8);
            do
              v119 = __ldxr(v118);
            while (__stxr(v119 + 1, v118));
          }
          v120 = v116 + 2;
        }
        a3[14] = (uint64_t)v120;
        if (SHIBYTE(v131) < 0)
        {
          operator delete(v130[0]);
          if ((SHIBYTE(v133) & 0x80000000) == 0)
          {
LABEL_219:
            if ((SHIBYTE(v135) & 0x80000000) == 0)
              goto LABEL_220;
            goto LABEL_224;
          }
        }
        else if ((SHIBYTE(v133) & 0x80000000) == 0)
        {
          goto LABEL_219;
        }
        operator delete(v132[0]);
        if ((SHIBYTE(v135) & 0x80000000) == 0)
        {
LABEL_220:
          v121 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
          if (!*((_QWORD *)&v136 + 1))
            goto LABEL_228;
          goto LABEL_225;
        }
LABEL_224:
        operator delete(__dst[0]);
        v121 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
        if (!*((_QWORD *)&v136 + 1))
          goto LABEL_228;
LABEL_225:
        p_shared_owners = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(p_shared_owners);
        while (__stlxr(v123 - 1, p_shared_owners));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
          v124 = (void **)v138;
          if (v138)
          {
            do
            {
LABEL_231:
              v125 = (void **)*v124;
              v126 = *((unsigned int *)v124 + 16);
              if ((_DWORD)v126 != -1)
                ((void (*)(__int128 *, void **))off_25110BFF0[v126])(&v140, v124 + 5);
              *((_DWORD *)v124 + 16) = -1;
              if (*((char *)v124 + 39) < 0)
                operator delete(v124[2]);
              operator delete(v124);
              v124 = v125;
            }
            while (v125);
          }
LABEL_236:
          v127 = v137[0];
          v137[0] = 0;
          if (v127)
            operator delete(v127);
          return;
        }
LABEL_228:
        v124 = (void **)v138;
        if (v138)
          goto LABEL_231;
        goto LABEL_236;
      }
    }
    else if (v49 == (void *)10)
    {
      v50 = v130;
      if (v131 < 0)
        v50 = (void **)v130[0];
      v51 = *v50;
      v52 = *((unsigned __int16 *)v50 + 4);
      if (v51 == (void *)0x6D616E7944434C4DLL && v52 == 25449)
      {
        v54 = 2;
        goto LABEL_79;
      }
    }
    v54 = 0;
    goto LABEL_79;
  }
}

void sub_240B84740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  sub_240B6FE78((uint64_t)&a36);
  sub_240B70478((uint64_t)&a38);
  _Unwind_Resume(a1);
}

BOOL sub_240B84898(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

void sub_240B84910()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_240B84928(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B8494C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *mlc_binary_create(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count **v18;
  std::__shared_weak_count **v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count **v49;
  std::__shared_weak_count **v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  dispatch_queue_t v68;
  char *v69;
  void *v70;
  char *v71;
  char *v72;
  void *v73;
  char *v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  void *v80;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  _QWORD v84[2];
  void *v85;
  void *v86;
  void *v87;
  char *v88;
  void *v89;
  void *v90;
  void *__p;
  __int128 v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  v4 = sub_240BB84D8(0xC8uLL);
  sub_240B86554((uint64_t)v4);
  v5 = (std::__shared_weak_count *)(v4 + 2);
  sub_240BB4D70((uint64_t)v84, (uint64_t)(v4 + 2));
  sub_240BB4D98(v84, a1, a2);
  if (!sub_240BB7E28((uint64_t)(v4 + 2)))
    goto LABEL_73;
  sub_240BAB3B4(v4[8], (uint64_t)v84);
  v6 = sub_240BABE84(v4[8]);
  v7 = v6;
  v8 = v4[19];
  v10 = v4[20];
  v9 = v4 + 19;
  v11 = (v10 - v8) >> 4;
  v12 = v6 - v11;
  if (v6 > v11)
  {
    sub_240B74C84((uint64_t)(v4 + 19), v12);
LABEL_15:
    v17 = 0;
    do
    {
      sub_240BABFFC(v4[8], v17, &v82);
      v18 = (std::__shared_weak_count **)sub_240BB84D8(0x28uLL);
      v19 = v18;
      *v18 = (std::__shared_weak_count *)off_25110C118;
      *((_DWORD *)v18 + 2) = 1664508726;
      v18[2] = 0;
      v18[3] = 0;
      v18[4] = v5;
      v21 = v82;
      v20 = v83;
      if (v83)
      {
        p_shared_owners = (unint64_t *)&v83->__shared_owners_;
        do
          v23 = __ldxr(p_shared_owners);
        while (__stxr(v23 + 1, p_shared_owners));
        v24 = v18[3];
        v18[2] = v21;
        v18[3] = v20;
        if (v24)
        {
          v25 = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
        v18[2] = v82;
        v18[3] = 0;
      }
      v27 = *v9;
      v28 = (_QWORD *)operator new();
      bzero(v28, 0x260uLL);
      *(_DWORD *)v28 = -15521962;
      v28[8] = 0;
      v28[16] = 0;
      v28[24] = 0;
      v28[32] = 0;
      v28[40] = 0;
      v28[48] = 0;
      v28[56] = 0;
      v28[64] = 0;
      v28[72] = 0;
      v28[77] = 0;
      v28[76] = 0;
      v29 = (_QWORD *)operator new();
      *v29 = &off_25110C428;
      v29[1] = 0;
      v29[2] = 0;
      v29[3] = v28;
      *(_QWORD *)(v27 + 16 * v17) = v28;
      v30 = v27 + 16 * v17;
      v31 = *(std::__shared_weak_count **)(v30 + 8);
      *(_QWORD *)(v30 + 8) = v29;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      *(_QWORD *)(*(_QWORD *)(*v9 + 16 * v17) + 616) = v19;
      sub_240B85108(&__p);
      sub_240B8575C((_QWORD *)(*(_QWORD *)(*v9 + 16 * v17) + 8), &__p);
      sub_240B8817C(&__p);
      v34 = v83;
      if (v83)
      {
        v35 = (unint64_t *)&v83->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      ++v17;
    }
    while (v17 != v7);
    goto LABEL_36;
  }
  if (v6 < v11)
  {
    v13 = v8 + 16 * v6;
    while (v10 != v13)
    {
      v14 = *(std::__shared_weak_count **)(v10 - 8);
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v14->__on_zero_shared)(v14, v12);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v10 -= 16;
    }
    v4[20] = v13;
  }
  if (v7)
    goto LABEL_15;
LABEL_36:
  v37 = sub_240BAC134(v4[8]);
  v38 = v37;
  v39 = v4[22];
  v41 = v4[23];
  v40 = v4 + 22;
  v42 = (v41 - v39) >> 4;
  v43 = v37 - v42;
  if (v37 <= v42)
  {
    if (v37 < v42)
    {
      v44 = v39 + 16 * v37;
      while (v41 != v44)
      {
        v45 = *(std::__shared_weak_count **)(v41 - 8);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v45->__on_zero_shared)(v45, v43);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v41 -= 16;
      }
      v4[23] = v44;
    }
    if (!v38)
      goto LABEL_70;
  }
  else
  {
    sub_240B74C84((uint64_t)(v4 + 22), v43);
  }
  v48 = 0;
  do
  {
    sub_240BAC2AC(v4[8], v48, &v82);
    v49 = (std::__shared_weak_count **)sub_240BB84D8(0x28uLL);
    v50 = v49;
    *v49 = (std::__shared_weak_count *)off_25110C118;
    *((_DWORD *)v49 + 2) = 1664508726;
    v49[2] = 0;
    v49[3] = 0;
    v49[4] = v5;
    v52 = v82;
    v51 = v83;
    if (v83)
    {
      v53 = (unint64_t *)&v83->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
      v55 = v49[3];
      v49[2] = v52;
      v49[3] = v51;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    else
    {
      v49[2] = v82;
      v49[3] = 0;
    }
    v58 = *v40;
    v59 = (_QWORD *)operator new();
    bzero(v59, 0x260uLL);
    *(_DWORD *)v59 = -15521962;
    v59[8] = 0;
    v59[16] = 0;
    v59[24] = 0;
    v59[32] = 0;
    v59[40] = 0;
    v59[48] = 0;
    v59[56] = 0;
    v59[64] = 0;
    v59[72] = 0;
    v59[77] = 0;
    v59[76] = 0;
    v60 = (_QWORD *)operator new();
    *v60 = &off_25110C428;
    v60[1] = 0;
    v60[2] = 0;
    v60[3] = v59;
    *(_QWORD *)(v58 + 16 * v48) = v59;
    v61 = v58 + 16 * v48;
    v62 = *(std::__shared_weak_count **)(v61 + 8);
    *(_QWORD *)(v61 + 8) = v60;
    if (v62)
    {
      v63 = (unint64_t *)&v62->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    *(_QWORD *)(*(_QWORD *)(*v40 + 16 * v48) + 616) = v50;
    sub_240B85108(&__p);
    sub_240B8575C((_QWORD *)(*(_QWORD *)(*v40 + 16 * v48) + 8), &__p);
    sub_240B8817C(&__p);
    v65 = v83;
    if (v83)
    {
      v66 = (unint64_t *)&v83->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    ++v48;
  }
  while (v48 != v38);
LABEL_70:
  v68 = dispatch_queue_create("mlc-binary", 0);
  v4[10] = v68;
  if (!v68)
  {
    __p = operator new(0x28uLL);
    v92 = xmmword_240BBB890;
    strcpy((char *)__p, "Creation of dispatch queue failed.");
    sub_240BB7D38(v4 + 2, 1, (uint64_t)&__p);
    if (SHIBYTE(v92) < 0)
      operator delete(__p);
  }
LABEL_73:
  v84[0] = off_25110C138;
  v69 = (char *)v90;
  if (v90)
  {
    do
    {
      v75 = *(char **)v69;
      v76 = (std::__shared_weak_count *)*((_QWORD *)v69 + 6);
      if (v76)
      {
        v77 = (unint64_t *)&v76->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (v69[39] < 0)
        operator delete(*((void **)v69 + 2));
      operator delete(v69);
      v69 = v75;
    }
    while (v75);
  }
  v70 = v89;
  v89 = 0;
  if (v70)
    operator delete(v70);
  v71 = (char *)v87;
  if (v87)
  {
    v72 = v88;
    v73 = v87;
    if (v88 != v87)
    {
      v74 = v88;
      do
      {
        v80 = (void *)*((_QWORD *)v74 - 3);
        v74 -= 24;
        v79 = v80;
        if (v80)
        {
          *((_QWORD *)v72 - 2) = v79;
          operator delete(v79);
        }
        v72 = v74;
      }
      while (v74 != v71);
      v73 = v87;
    }
    v88 = v71;
    operator delete(v73);
  }
  if (v85)
  {
    v86 = v85;
    operator delete(v85);
  }
  nullsub_34(v84);
  return v4;
}

void sub_240B85068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  sub_240B86100(&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_240B85108@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (***v2)();
  uint64_t v3;
  uint64_t (***v4)();
  uint64_t v5;
  uint64_t (***v6)();
  uint64_t v7;
  uint64_t (***v8)();
  uint64_t v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (***v14)();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t (***v34)();
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  _QWORD *result;
  uint64_t v39;
  uint64_t (**v40)();
  uint64_t (*v41)();
  uint64_t (***v42)();
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  a1[3] = 0;
  a1[7] = 0;
  a1[11] = 0;
  a1[15] = 0;
  a1[19] = 0;
  a1[23] = 0;
  a1[27] = 0;
  a1[31] = 0;
  a1[35] = 0;
  a1[39] = 0;
  a1[43] = 0;
  a1[47] = 0;
  a1[51] = 0;
  a1[55] = 0;
  a1[59] = 0;
  a1[63] = 0;
  a1[67] = 0;
  a1[71] = 0;
  a1[75] = 0;
  v40 = (uint64_t (**)())&unk_25110C158;
  v41 = (uint64_t (*)())sub_240B88664;
  v42 = &v40;
  sub_240B895EC(&v40, a1);
  v2 = v42;
  if (v42 == &v40)
  {
    v3 = 4;
    v2 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_6;
    v3 = 5;
  }
  (*v2)[v3]();
LABEL_6:
  v40 = (uint64_t (**)())&unk_25110C1A0;
  v41 = (uint64_t (*)())sub_240B88674;
  v42 = &v40;
  sub_240B897DC(&v40, a1 + 4);
  v4 = v42;
  if (v42 == &v40)
  {
    v5 = 4;
    v4 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v5 = 5;
  }
  (*v4)[v5]();
LABEL_11:
  v40 = &off_25110C1E8;
  v41 = (uint64_t (*)())sub_240B8869C;
  v42 = &v40;
  sub_240B899C4(&v40, a1 + 8);
  v6 = v42;
  if (v42 == &v40)
  {
    v7 = 4;
    v6 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_16;
    v7 = 5;
  }
  (*v6)[v7]();
LABEL_16:
  v40 = (uint64_t (**)())&unk_25110C230;
  v41 = (uint64_t (*)())sub_240B886AC;
  v42 = &v40;
  sub_240B89BB4(&v40, a1 + 12);
  v8 = v42;
  if (v42 == &v40)
  {
    v9 = 4;
    v8 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_21;
    v9 = 5;
  }
  (*v8)[v9]();
LABEL_21:
  v40 = (uint64_t (**)())&unk_25110C278;
  v41 = (uint64_t (*)())sub_240B886B4;
  v42 = &v40;
  sub_240B89DA8(&v40, a1 + 16);
  v10 = v42;
  if (v42 == &v40)
  {
    v11 = 4;
    v10 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_26;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_26:
  v40 = (uint64_t (**)())&unk_25110C278;
  v41 = (uint64_t (*)())sub_240B886E8;
  v42 = &v40;
  sub_240B89DA8(&v40, a1 + 20);
  v12 = v42;
  if (v42 == &v40)
  {
    v13 = 4;
    v12 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_31;
    v13 = 5;
  }
  (*v12)[v13]();
LABEL_31:
  v40 = &off_25110C2C0;
  v41 = (uint64_t (*)())sub_240B8871C;
  v42 = &v40;
  sub_240B89F90(&v40, a1 + 24);
  v14 = v42;
  if (v42 == &v40)
  {
    v15 = 4;
    v14 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_36;
    v15 = 5;
  }
  (*v14)[v15]();
LABEL_36:
  v40 = (uint64_t (**)())&unk_25110C230;
  v41 = (uint64_t (*)())sub_240B8872C;
  v42 = &v40;
  sub_240B89BB4(&v40, a1 + 28);
  v16 = v42;
  if (v42 == &v40)
  {
    v17 = 4;
    v16 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_41;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_41:
  v40 = &off_25110C308;
  v41 = (uint64_t (*)())sub_240B8873C;
  v42 = &v40;
  sub_240B8A178(&v40, a1 + 32);
  v18 = v42;
  if (v42 == &v40)
  {
    v19 = 4;
    v18 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_46;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_46:
  v40 = (uint64_t (**)())&unk_25110C158;
  v41 = (uint64_t (*)())sub_240B8874C;
  v42 = &v40;
  sub_240B895EC(&v40, a1 + 36);
  v20 = v42;
  if (v42 == &v40)
  {
    v21 = 4;
    v20 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_51;
    v21 = 5;
  }
  (*v20)[v21]();
LABEL_51:
  v22 = (_QWORD *)a1[43];
  a1[43] = 0;
  if (v22 == a1 + 40)
  {
    v23 = 4;
    v22 = a1 + 40;
  }
  else
  {
    if (!v22)
      goto LABEL_56;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_56:
  v24 = (_QWORD *)a1[47];
  a1[47] = 0;
  if (v24 == a1 + 44)
  {
    v25 = 4;
    v24 = a1 + 44;
  }
  else
  {
    if (!v24)
      goto LABEL_61;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_61:
  v26 = (_QWORD *)a1[51];
  a1[51] = 0;
  if (v26 == a1 + 48)
  {
    v27 = 4;
    v26 = a1 + 48;
  }
  else
  {
    if (!v26)
      goto LABEL_66;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_66:
  v40 = (uint64_t (**)())&unk_25110C350;
  v41 = (uint64_t (*)())sub_240B88754;
  v42 = &v40;
  sub_240B8AEC8(&v40, a1 + 52);
  v28 = v42;
  if (v42 == &v40)
  {
    v29 = 4;
    v28 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_71;
    v29 = 5;
  }
  (*v28)[v29]();
LABEL_71:
  v40 = (uint64_t (**)())&unk_25110C350;
  v41 = (uint64_t (*)())sub_240B889A8;
  v42 = &v40;
  sub_240B8AEC8(&v40, a1 + 56);
  v30 = v42;
  if (v42 == &v40)
  {
    v31 = 4;
    v30 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_76;
    v31 = 5;
  }
  (*v30)[v31]();
LABEL_76:
  v32 = (_QWORD *)a1[63];
  a1[63] = 0;
  if (v32 == a1 + 60)
  {
    v33 = 4;
    v32 = a1 + 60;
  }
  else
  {
    if (!v32)
      goto LABEL_81;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_81:
  v40 = (uint64_t (**)())&unk_25110C398;
  v41 = (uint64_t (*)())sub_240B88BFC;
  v42 = &v40;
  sub_240B8B0C0(&v40, a1 + 64);
  v34 = v42;
  if (v42 == &v40)
  {
    v35 = 4;
    v34 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_86;
    v35 = 5;
  }
  (*v34)[v35]();
LABEL_86:
  v40 = (uint64_t (**)())&unk_25110C3E0;
  v41 = nullsub_7;
  v42 = &v40;
  sub_240B8B2B0(&v40, a1 + 68);
  v36 = v42;
  if (v42 == &v40)
  {
    v37 = 4;
    v36 = &v40;
  }
  else
  {
    if (!v42)
      goto LABEL_91;
    v37 = 5;
  }
  (*v36)[v37]();
LABEL_91:
  result = (_QWORD *)a1[75];
  a1[75] = 0;
  if (result == a1 + 72)
  {
    v39 = 4;
    result = a1 + 72;
  }
  else
  {
    if (!result)
      return result;
    v39 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v39))();
}

_QWORD *sub_240B8575C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;

  v5 = a1 + 3;
  v4 = (_QWORD *)a1[3];
  *v5 = 0;
  if (v4 == a1)
  {
    v6 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v6))();
LABEL_6:
  v7 = a2 + 3;
  v8 = (_QWORD *)a2[3];
  if (!v8)
  {
    v7 = v5;
    goto LABEL_10;
  }
  if (v8 != a2)
  {
    *v5 = v8;
LABEL_10:
    *v7 = 0;
    goto LABEL_12;
  }
  a1[3] = a1;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v7 + 24))(*v7, a1);
LABEL_12:
  v10 = a1 + 7;
  v9 = (_QWORD *)a1[7];
  a1[7] = 0;
  if (v9 == a1 + 4)
  {
    v11 = 4;
    v9 = a1 + 4;
  }
  else
  {
    if (!v9)
      goto LABEL_17;
    v11 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_17:
  v12 = a2 + 7;
  v13 = (_QWORD *)a2[7];
  if (!v13)
  {
    v12 = a1 + 7;
    goto LABEL_21;
  }
  if (v13 != a2 + 4)
  {
    *v10 = v13;
LABEL_21:
    *v12 = 0;
    goto LABEL_23;
  }
  *v10 = a1 + 4;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v12 + 24))(*v12, a1 + 4);
LABEL_23:
  v15 = a1 + 11;
  v14 = (_QWORD *)a1[11];
  a1[11] = 0;
  if (v14 == a1 + 8)
  {
    v16 = 4;
    v14 = a1 + 8;
  }
  else
  {
    if (!v14)
      goto LABEL_28;
    v16 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v16))();
LABEL_28:
  v17 = a2 + 11;
  v18 = (_QWORD *)a2[11];
  if (!v18)
  {
    v17 = a1 + 11;
    goto LABEL_32;
  }
  if (v18 != a2 + 8)
  {
    *v15 = v18;
LABEL_32:
    *v17 = 0;
    goto LABEL_34;
  }
  *v15 = a1 + 8;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v17 + 24))(*v17, a1 + 8);
LABEL_34:
  v20 = a1 + 15;
  v19 = (_QWORD *)a1[15];
  a1[15] = 0;
  if (v19 == a1 + 12)
  {
    v21 = 4;
    v19 = a1 + 12;
  }
  else
  {
    if (!v19)
      goto LABEL_39;
    v21 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v21))();
LABEL_39:
  v22 = a2 + 15;
  v23 = (_QWORD *)a2[15];
  if (!v23)
  {
    v22 = a1 + 15;
    goto LABEL_43;
  }
  if (v23 != a2 + 12)
  {
    *v20 = v23;
LABEL_43:
    *v22 = 0;
    goto LABEL_45;
  }
  *v20 = a1 + 12;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v22 + 24))(*v22, a1 + 12);
LABEL_45:
  v25 = a1 + 19;
  v24 = (_QWORD *)a1[19];
  a1[19] = 0;
  if (v24 == a1 + 16)
  {
    v26 = 4;
    v24 = a1 + 16;
  }
  else
  {
    if (!v24)
      goto LABEL_50;
    v26 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v26))();
LABEL_50:
  v27 = a2 + 19;
  v28 = (_QWORD *)a2[19];
  if (!v28)
  {
    v27 = a1 + 19;
    goto LABEL_54;
  }
  if (v28 != a2 + 16)
  {
    *v25 = v28;
LABEL_54:
    *v27 = 0;
    goto LABEL_56;
  }
  *v25 = a1 + 16;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v27 + 24))(*v27, a1 + 16);
LABEL_56:
  v30 = a1 + 23;
  v29 = (_QWORD *)a1[23];
  a1[23] = 0;
  if (v29 == a1 + 20)
  {
    v31 = 4;
    v29 = a1 + 20;
  }
  else
  {
    if (!v29)
      goto LABEL_61;
    v31 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v31))();
LABEL_61:
  v32 = a2 + 23;
  v33 = (_QWORD *)a2[23];
  if (!v33)
  {
    v32 = a1 + 23;
    goto LABEL_65;
  }
  if (v33 != a2 + 20)
  {
    *v30 = v33;
LABEL_65:
    *v32 = 0;
    goto LABEL_67;
  }
  *v30 = a1 + 20;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v32 + 24))(*v32, a1 + 20);
LABEL_67:
  v35 = a1 + 27;
  v34 = (_QWORD *)a1[27];
  a1[27] = 0;
  if (v34 == a1 + 24)
  {
    v36 = 4;
    v34 = a1 + 24;
  }
  else
  {
    if (!v34)
      goto LABEL_72;
    v36 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v36))();
LABEL_72:
  v37 = a2 + 27;
  v38 = (_QWORD *)a2[27];
  if (!v38)
  {
    v37 = a1 + 27;
    goto LABEL_76;
  }
  if (v38 != a2 + 24)
  {
    *v35 = v38;
LABEL_76:
    *v37 = 0;
    goto LABEL_78;
  }
  *v35 = a1 + 24;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v37 + 24))(*v37, a1 + 24);
LABEL_78:
  v40 = a1 + 31;
  v39 = (_QWORD *)a1[31];
  a1[31] = 0;
  if (v39 == a1 + 28)
  {
    v41 = 4;
    v39 = a1 + 28;
  }
  else
  {
    if (!v39)
      goto LABEL_83;
    v41 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v41))();
LABEL_83:
  v42 = a2 + 31;
  v43 = (_QWORD *)a2[31];
  if (!v43)
  {
    v42 = a1 + 31;
    goto LABEL_87;
  }
  if (v43 != a2 + 28)
  {
    *v40 = v43;
LABEL_87:
    *v42 = 0;
    goto LABEL_89;
  }
  *v40 = a1 + 28;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v42 + 24))(*v42, a1 + 28);
LABEL_89:
  v44 = (_QWORD *)a1[35];
  a1[35] = 0;
  if (v44 == a1 + 32)
  {
    v45 = 4;
    v44 = a1 + 32;
  }
  else
  {
    if (!v44)
      goto LABEL_94;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_94:
  v46 = a1 + 35;
  v47 = (_QWORD *)a2[35];
  if (!v47)
  {
    v48 = a1 + 35;
    goto LABEL_98;
  }
  v48 = a2 + 35;
  if (v47 != a2 + 32)
  {
    *v46 = v47;
LABEL_98:
    *v48 = 0;
    goto LABEL_100;
  }
  *v46 = a1 + 32;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v48 + 24))(*v48, a1 + 32);
LABEL_100:
  v49 = (_QWORD *)a1[39];
  a1[39] = 0;
  if (v49 == a1 + 36)
  {
    v50 = 4;
    v49 = a1 + 36;
  }
  else
  {
    if (!v49)
      goto LABEL_105;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_105:
  v51 = a1 + 39;
  v52 = (_QWORD *)a2[39];
  if (!v52)
  {
    v53 = a1 + 39;
    goto LABEL_109;
  }
  v53 = a2 + 39;
  if (v52 != a2 + 36)
  {
    *v51 = v52;
LABEL_109:
    *v53 = 0;
    goto LABEL_111;
  }
  *v51 = a1 + 36;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v53 + 24))(*v53, a1 + 36);
LABEL_111:
  v54 = (_QWORD *)a1[43];
  a1[43] = 0;
  if (v54 == a1 + 40)
  {
    v55 = 4;
    v54 = a1 + 40;
  }
  else
  {
    if (!v54)
      goto LABEL_116;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_116:
  v56 = a1 + 43;
  v57 = (_QWORD *)a2[43];
  if (!v57)
  {
    v58 = a1 + 43;
    goto LABEL_120;
  }
  v58 = a2 + 43;
  if (v57 != a2 + 40)
  {
    *v56 = v57;
LABEL_120:
    *v58 = 0;
    goto LABEL_122;
  }
  *v56 = a1 + 40;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v58 + 24))(*v58, a1 + 40);
LABEL_122:
  v59 = (_QWORD *)a1[47];
  a1[47] = 0;
  if (v59 == a1 + 44)
  {
    v60 = 4;
    v59 = a1 + 44;
  }
  else
  {
    if (!v59)
      goto LABEL_127;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_127:
  v61 = a1 + 47;
  v62 = (_QWORD *)a2[47];
  if (!v62)
  {
    v63 = a1 + 47;
    goto LABEL_131;
  }
  v63 = a2 + 47;
  if (v62 != a2 + 44)
  {
    *v61 = v62;
LABEL_131:
    *v63 = 0;
    goto LABEL_133;
  }
  *v61 = a1 + 44;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v63 + 24))(*v63, a1 + 44);
LABEL_133:
  v64 = (_QWORD *)a1[51];
  a1[51] = 0;
  if (v64 == a1 + 48)
  {
    v65 = 4;
    v64 = a1 + 48;
  }
  else
  {
    if (!v64)
      goto LABEL_138;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_138:
  v66 = a1 + 51;
  v67 = (_QWORD *)a2[51];
  if (!v67)
  {
    v68 = a1 + 51;
    goto LABEL_142;
  }
  v68 = a2 + 51;
  if (v67 != a2 + 48)
  {
    *v66 = v67;
LABEL_142:
    *v68 = 0;
    goto LABEL_144;
  }
  *v66 = a1 + 48;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v68 + 24))(*v68, a1 + 48);
LABEL_144:
  v69 = (_QWORD *)a1[55];
  a1[55] = 0;
  if (v69 == a1 + 52)
  {
    v70 = 4;
    v69 = a1 + 52;
  }
  else
  {
    if (!v69)
      goto LABEL_149;
    v70 = 5;
  }
  (*(void (**)(void))(*v69 + 8 * v70))();
LABEL_149:
  v71 = a1 + 55;
  v72 = (_QWORD *)a2[55];
  if (!v72)
  {
    v73 = a1 + 55;
    goto LABEL_153;
  }
  v73 = a2 + 55;
  if (v72 != a2 + 52)
  {
    *v71 = v72;
LABEL_153:
    *v73 = 0;
    goto LABEL_155;
  }
  *v71 = a1 + 52;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v73 + 24))(*v73, a1 + 52);
LABEL_155:
  v74 = (_QWORD *)a1[59];
  a1[59] = 0;
  if (v74 == a1 + 56)
  {
    v75 = 4;
    v74 = a1 + 56;
  }
  else
  {
    if (!v74)
      goto LABEL_160;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_160:
  v76 = a1 + 59;
  v77 = (_QWORD *)a2[59];
  if (!v77)
  {
    v78 = a1 + 59;
    goto LABEL_164;
  }
  v78 = a2 + 59;
  if (v77 != a2 + 56)
  {
    *v76 = v77;
LABEL_164:
    *v78 = 0;
    goto LABEL_166;
  }
  *v76 = a1 + 56;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v78 + 24))(*v78, a1 + 56);
LABEL_166:
  v79 = (_QWORD *)a1[63];
  a1[63] = 0;
  if (v79 == a1 + 60)
  {
    v80 = 4;
    v79 = a1 + 60;
  }
  else
  {
    if (!v79)
      goto LABEL_171;
    v80 = 5;
  }
  (*(void (**)(void))(*v79 + 8 * v80))();
LABEL_171:
  v81 = a1 + 63;
  v82 = (_QWORD *)a2[63];
  if (!v82)
  {
    v83 = a1 + 63;
    goto LABEL_175;
  }
  v83 = a2 + 63;
  if (v82 != a2 + 60)
  {
    *v81 = v82;
LABEL_175:
    *v83 = 0;
    goto LABEL_177;
  }
  *v81 = a1 + 60;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v83 + 24))(*v83, a1 + 60);
LABEL_177:
  v84 = (_QWORD *)a1[67];
  a1[67] = 0;
  if (v84 == a1 + 64)
  {
    v85 = 4;
    v84 = a1 + 64;
  }
  else
  {
    if (!v84)
      goto LABEL_182;
    v85 = 5;
  }
  (*(void (**)(void))(*v84 + 8 * v85))();
LABEL_182:
  v86 = a1 + 67;
  v87 = (_QWORD *)a2[67];
  if (!v87)
  {
    v88 = a1 + 67;
    goto LABEL_186;
  }
  v88 = a2 + 67;
  if (v87 != a2 + 64)
  {
    *v86 = v87;
LABEL_186:
    *v88 = 0;
    goto LABEL_188;
  }
  *v86 = a1 + 64;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v88 + 24))(*v88, a1 + 64);
LABEL_188:
  v89 = (_QWORD *)a1[71];
  a1[71] = 0;
  if (v89 == a1 + 68)
  {
    v90 = 4;
    v89 = a1 + 68;
  }
  else
  {
    if (!v89)
      goto LABEL_193;
    v90 = 5;
  }
  (*(void (**)(void))(*v89 + 8 * v90))();
LABEL_193:
  v91 = a1 + 71;
  v92 = (_QWORD *)a2[71];
  if (!v92)
  {
    v93 = a1 + 71;
    goto LABEL_197;
  }
  v93 = a2 + 71;
  if (v92 != a2 + 68)
  {
    *v91 = v92;
LABEL_197:
    *v93 = 0;
    goto LABEL_199;
  }
  *v91 = a1 + 68;
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v93 + 24))(*v93, a1 + 68);
LABEL_199:
  v94 = (_QWORD *)a1[75];
  a1[75] = 0;
  if (v94 == a1 + 72)
  {
    v95 = 4;
    v94 = a1 + 72;
  }
  else
  {
    if (!v94)
      goto LABEL_204;
    v95 = 5;
  }
  (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_204:
  v96 = a1 + 75;
  v97 = (_QWORD *)a2[75];
  if (v97)
  {
    v98 = a2 + 75;
    if (v97 == a2 + 72)
    {
      *v96 = a1 + 72;
      (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)*v98 + 24))(*v98, a1 + 72);
      return a1;
    }
    *v96 = v97;
  }
  else
  {
    v98 = a1 + 75;
  }
  *v98 = 0;
  return a1;
}

uint64_t sub_240B86100(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = off_25110C138;
  sub_240B885C0((uint64_t)(a1 + 8));
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      v5 = a1[6];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return nullsub_34(a1);
}

uint64_t mlc_binary_destroy(void *context)
{
  NSObject *v2;

  v2 = *((_QWORD *)context + 10);
  if (v2)
  {
    dispatch_async_and_wait_f(v2, context, (dispatch_function_t)sub_240B861E4);
    mlc_event_record(*((_QWORD *)context + 13));
    dispatch_release(*((dispatch_object_t *)context + 10));
  }
  return (*(uint64_t (**)(void *))(*(_QWORD *)context + 8))(context);
}

void sub_240B861E4(uint64_t a1)
{
  sub_240BAB93C(*(_QWORD *)(a1 + 64));
}

uint64_t mlc_binary_error@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    v4 = sub_240BB7E38(result + 16);
    v5 = *(char *)(v4 + 31);
    LODWORD(v3) = *(_DWORD *)v4;
    v7 = *(_QWORD *)(v4 + 8);
    result = v4 + 8;
    v6 = v7;
    if (v5 >= 0)
      v8 = result;
    else
      v8 = v6;
    *a2 = 0;
    a2[1] = v8;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  *((_DWORD *)a2 + 4) = v3;
  return result;
}

uint64_t mlc_binary_drop_error(uint64_t a1)
{
  int v3;
  void *__p;
  char v5;

  sub_240BB7E58(a1 + 16, &v3);
  if (v5 < 0)
    operator delete(__p);
  return *(_QWORD *)(a1 + 56);
}

NSObject *mlc_binary_load(_QWORD *context)
{
  NSObject *result;

  result = context[10];
  if (result)
  {
    dispatch_async_f(result, context, (dispatch_function_t)sub_240B862C0);
    return context[11];
  }
  return result;
}

uint64_t sub_240B862C0(uint64_t a1)
{
  sub_240BAB684(*(_QWORD *)(a1 + 64));
  return mlc_event_record(*(_QWORD *)(a1 + 88));
}

uint64_t mlc_binary_load_sync(uint64_t a1)
{
  sub_240BAB684(*(_QWORD *)(a1 + 64));
  return mlc_event_record(*(_QWORD *)(a1 + 88));
}

void mlc_binary_validate(uint64_t a1)
{
  sub_240BABBE0(*(_QWORD *)(a1 + 64));
}

int64_t mlc_binary_n_inputs(uint64_t a1)
{
  return sub_240BABE84(*(_QWORD *)(a1 + 64));
}

uint64_t mlc_binary_input(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 152) + 16 * a2);
}

int64_t mlc_binary_n_outputs(uint64_t a1)
{
  return sub_240BAC134(*(_QWORD *)(a1 + 64));
}

uint64_t mlc_binary_output(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 176) + 16 * a2);
}

uint64_t mlc_binary_execute(uint64_t a1)
{
  mlc_event_reset(*(_QWORD *)(a1 + 136));
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 80), (void *)a1, (dispatch_function_t)sub_240B86384);
  return *(_QWORD *)(a1 + 136);
}

uint64_t sub_240B86384(uint64_t a1)
{
  sub_240BAC3E4(*(_QWORD *)(a1 + 64));
  return mlc_event_record(*(_QWORD *)(a1 + 136));
}

void mlc_binary_execute_sync(uint64_t a1)
{
  sub_240BAC3E4(*(_QWORD *)(a1 + 64));
}

void mlc_binary_set_allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_240BAB2E4(*(_QWORD *)(a1 + 64), a2, a3, a4);
}

uint64_t mlc_binary_reshape(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 80))
    return 0;
  mlc_event_reset(*(_QWORD *)(a1 + 120));
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 80), (void *)a1, (dispatch_function_t)sub_240B86408);
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_240B86408(uint64_t a1)
{
  sub_240BAC540(*(_QWORD *)(a1 + 64));
  return mlc_event_record(*(_QWORD *)(a1 + 120));
}

BOOL mlc_binary_reshape_sync(_QWORD *a1)
{
  sub_240BAC540(a1[8]);
  mlc_event_record(a1[15]);
  return a1[7] == 0;
}

void mlc_binary_set_kernel_dylib(uint64_t a1, char *__s)
{
  uint64_t v3;
  size_t v4;
  void *v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *__dst[2];
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v10) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  sub_240BAC7E4(v3, (uint64_t)__dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_240B86538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B86554(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v29[12];
  uint64_t v30;

  *(_QWORD *)a1 = off_25110C060;
  *(_DWORD *)(a1 + 8) = -1168773808;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v3 = sub_240BB84D8(0x30uLL);
  sub_240BAB158((uint64_t)v3, v2);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = (_QWORD *)operator new();
  *v4 = &off_25110C080;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = v3;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  v5 = *(_QWORD *)(a1 + 64);
  sub_240BA9780(v29);
  v6 = sub_240BB84D8(0x60uLL);
  sub_240B86A04((uint64_t)v6, v29);
  v30 = (uint64_t)v6;
  sub_240BAB2D4(v5, &v30);
  v7 = v30;
  v30 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_240B87C24((uint64_t)v29);
  v8 = mlc_event_create();
  v9 = (_QWORD *)operator new();
  *v9 = &unk_25110BE28;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  v9[4] = mlc_event_destroy;
  v10 = *(std::__shared_weak_count **)(a1 + 144);
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 144) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = mlc_event_create();
  v14 = (_QWORD *)operator new();
  *v14 = &unk_25110BE28;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = v13;
  v14[4] = mlc_event_destroy;
  v15 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = mlc_event_create();
  v19 = (_QWORD *)operator new();
  *v19 = &unk_25110BE28;
  v19[1] = 0;
  v19[2] = 0;
  v19[3] = v18;
  v19[4] = mlc_event_destroy;
  v20 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v18;
  *(_QWORD *)(a1 + 112) = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = mlc_event_create();
  v24 = (_QWORD *)operator new();
  *v24 = &unk_25110BE28;
  v24[1] = 0;
  v24[2] = 0;
  v24[3] = v23;
  v24[4] = mlc_event_destroy;
  v25 = *(std::__shared_weak_count **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v23;
  *(_QWORD *)(a1 + 128) = v24;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return a1;
}

void sub_240B86838(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  mlc_event_destroy(v1);
  __cxa_rethrow();
}

void sub_240B86848()
{
  __break(1u);
}

void sub_240B868B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  __cxa_end_catch();
  sub_240B6FED0(v4);
  sub_240B6FED0(v4 - 3);
  sub_240B6FE78((uint64_t)(v4 - 5));
  sub_240B6FE78((uint64_t)(v4 - 7));
  sub_240B6FE78((uint64_t)(v4 - 9));
  sub_240B6FE78((uint64_t)(v4 - 11));
  sub_240B6FE78(v3);
  sub_240B87CFC(v2);
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

void sub_240B868C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  v8 = *(_QWORD *)(v6 - 88);
  *(_QWORD *)(v6 - 88) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_240B87C24((uint64_t)va);
  sub_240B6FED0(v5);
  sub_240B6FED0(v5 - 3);
  sub_240B6FE78((uint64_t)(v5 - 5));
  sub_240B6FE78((uint64_t)(v5 - 7));
  sub_240B6FE78((uint64_t)(v5 - 9));
  sub_240B6FE78((uint64_t)(v5 - 11));
  sub_240B6FE78(v4);
  sub_240B87CFC(v3);
  nullsub_34(v2);
  _Unwind_Resume(a1);
}

void sub_240B86908()
{
  JUMPOUT(0x240B86944);
}

void sub_240B869AC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_240B87E64(a1);
  j__free(v1);
}

void sub_240B869C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B869E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_240B86A04(uint64_t a1, _QWORD *a2)
{
  const void **v4;
  const void **v6;
  const void ***v7;
  BOOL v8;

  *(_QWORD *)a1 = off_25110C0B8;
  sub_240B86B6C(a1 + 8, (uint64_t)(a2 + 1));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = (const void **)a2[6];
  if (v4 != a2 + 7)
  {
    do
    {
      sub_240B872A4((uint64_t **)(a1 + 48), (uint64_t *)(a1 + 56), v4 + 4, (uint64_t)(v4 + 4));
      v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v4[2];
          v8 = *v7 == v4;
          v4 = (const void **)v7;
        }
        while (!v8);
      }
      v4 = (const void **)v7;
    }
    while (v7 != a2 + 7);
  }
  *(_QWORD *)a1 = off_25110CAD8;
  sub_240B8791C((_QWORD *)(a1 + 72), a2 + 9);
  return a1;
}

void sub_240B86AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_240B86B30(v1);
  _Unwind_Resume(a1);
}

void sub_240B86B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  nullsub_34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B86B30(uint64_t a1)
{
  *(_QWORD *)a1 = off_25110C0B8;
  sub_240B878CC(a1 + 48, *(char **)(a1 + 56));
  sub_240B871F8(a1 + 8);
  return nullsub_34(a1);
}

uint64_t sub_240B86B6C(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_240B70E0C(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_240B86C9C(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_240B86C84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_240B871F8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B86C9C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD v36[2];
  char v37;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v36, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  v22 = operator new(0x48uLL);
  v36[0] = v22;
  v36[1] = a1 + 16;
  v37 = 0;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v10;
  sub_240B870B4((char *)v22 + 16, a3);
  v37 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *(_QWORD *)v36[0] = *v33;
    *v33 = v36[0];
  }
  else
  {
    *(_QWORD *)v36[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v36[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v36[0])
    {
      v34 = *(_QWORD *)(*(_QWORD *)v36[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v34 >= v11)
          v34 %= v11;
      }
      else
      {
        v34 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v36[0];
    }
  }
  v15 = (uint64_t *)v36[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240B87014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B87030((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B87030(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(unsigned int *)(v2 + 64);
      if ((_DWORD)v3 != -1)
        ((void (*)(char *, uint64_t))off_25110C0D8[v3])(&v5, v2 + 40);
      *(_DWORD *)(v2 + 64) = -1;
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

char *sub_240B870B4(char *__dst, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  _BYTE v7[2];

  if (*((char *)a2 + 23) < 0)
  {
    sub_240B6FF68(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[24] = 0;
  *((_DWORD *)__dst + 12) = -1;
  v5 = *((unsigned int *)a2 + 12);
  if ((_DWORD)v5 != -1)
  {
    ((void (*)(_BYTE *, char *, char *))off_25110C0F0[v5])(v7, __dst + 24, (char *)a2 + 24);
    *((_DWORD *)__dst + 12) = v5;
  }
  return __dst;
}

void sub_240B8714C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 48);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_25110C0D8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 48) = -1;
  if (*(char *)(v13 + 23) < 0)
    operator delete(*(void **)v13);
  _Unwind_Resume(exception_object);
}

void sub_240B871A0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_240B871B4(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void sub_240B871C0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void *sub_240B871CC(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_240B6FF68(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

uint64_t sub_240B871F8(uint64_t a1)
{
  void **v2;
  void **v3;
  uint64_t v4;
  void *v5;
  char v7;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      v4 = *((unsigned int *)v2 + 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, void **))off_25110C0D8[v4])(&v7, v2 + 5);
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

_QWORD *sub_240B872A4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_240B87384(a1, a2, &v15, &v14, a3);
  v7 = (_QWORD *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x38uLL);
    v9 = v7 + 4;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_240B6FF68(v9, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)a4;
      v7[6] = *(_QWORD *)(a4 + 16);
    }
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_240B8772C(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_240B87370(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B87384(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t *sub_240B8772C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = a2[2];
      if (*(_BYTE *)(v2 + 24))
        break;
      v3 = *(uint64_t **)(v2 + 16);
      v4 = *v3;
      if (*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            v9 = (uint64_t *)a2[2];
          }
          else
          {
            v9 = *(uint64_t **)(v2 + 8);
            v10 = *v9;
            *(_QWORD *)(v2 + 8) = *v9;
            if (v10)
            {
              *(_QWORD *)(v10 + 16) = v2;
              v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
            *v9 = v2;
            *(_QWORD *)(v2 + 16) = v9;
            v3 = (uint64_t *)v9[2];
            v2 = *v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v14 = *(_QWORD *)(v2 + 8);
          *v3 = v14;
          if (v14)
            *(_QWORD *)(v14 + 16) = v3;
          *(_QWORD *)(v2 + 16) = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          *(_QWORD *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), v5 = (_BYTE *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          v11 = a2[1];
          *(_QWORD *)v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v12 = (uint64_t *)v3[1];
        v13 = *v12;
        v3[1] = *v12;
        if (v13)
          *(_QWORD *)(v13 + 16) = v3;
        v12[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v12;
        *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(_BYTE *)(v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_240B878CC(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_240B878CC(a1, *(_QWORD *)a2);
    sub_240B878CC(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *sub_240B8791C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493)
      sub_240B70258();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_240B87A5C(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_240B879D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;

  v13[1] = v14;
  v16 = *v13;
  if (*v13)
  {
    v17 = v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        v19 = *(v17 - 4);
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, _DWORD *))off_25110C0D8[v19])(&a13, v17 - 10);
        *(v17 - 4) = -1;
        v17 -= 14;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B87A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[2];

  v4 = a4;
  v12 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 16;
    do
    {
      v8 = v6 - 16;
      v7 = *(_QWORD *)(v6 - 16);
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 - 8);
      *(_QWORD *)v4 = v7;
      *(_BYTE *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 40) = -1;
      v9 = *(unsigned int *)(v6 + 24);
      v10 = v4;
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(_BYTE *, uint64_t, uint64_t))off_25110C0F0[v9])(v13, v4 + 16, v6);
        *(_DWORD *)(v4 + 40) = v9;
        v10 = v12;
      }
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(v6 + 32);
      v4 = v10 + 56;
      v12 = v10 + 56;
      v6 += 56;
    }
    while (v8 + 56 != a3);
  }
  return v4;
}

void sub_240B87B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = *(unsigned int *)(v19 + 40);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_25110C0D8[v22])(&a19, v20);
  *(_DWORD *)(v19 + 40) = -1;
  sub_240B87B88((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_240B87B88(uint64_t a1)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char v8;

  if (!*(_BYTE *)(a1 + 24))
  {
    v4 = *(uint64_t **)(a1 + 8);
    v3 = *(uint64_t **)(a1 + 16);
    v5 = *v3;
    for (i = *v4; v5 != i; v5 -= 56)
    {
      v7 = *(unsigned int *)(v5 - 16);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))off_25110C0D8[v7])(&v8, v5 - 40);
      *(_DWORD *)(v5 - 16) = -1;
    }
  }
  return a1;
}

uint64_t sub_240B87C24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_25110CAD8;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 80);
    v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        v5 = *(unsigned int *)(v3 - 16);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))off_25110C0D8[v5])(&v7, v3 - 40);
        *(_DWORD *)(v3 - 16) = -1;
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 72);
    }
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v4);
  }
  *(_QWORD *)a1 = off_25110C0B8;
  sub_240B878CC(a1 + 48, *(char **)(a1 + 56));
  sub_240B871F8(a1 + 8);
  return nullsub_34(a1);
}

uint64_t sub_240B87CFC(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 7];
    v7 = (uint64_t)*v6;
    v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    v9 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(_QWORD *)(a1 + 40) + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 31) < 0)
        {
          operator delete(*(void **)(v8 + 8));
          v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          v10 = (uint64_t)v6[1];
          ++v6;
          v7 = v10;
          v8 = v10;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 64;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    v13 = 128;
LABEL_17:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_240B87E64(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  *a1 = off_25110C060;
  v2 = a1[22];
  if (v2)
  {
    v3 = a1[23];
    v4 = (void *)a1[22];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[22];
    }
    a1[23] = v2;
    operator delete(v4);
  }
  v8 = a1[19];
  if (v8)
  {
    v9 = a1[20];
    v10 = (void *)a1[19];
    if (v9 != v8)
    {
      do
      {
        v11 = *(std::__shared_weak_count **)(v9 - 8);
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        v9 -= 16;
      }
      while (v9 != v8);
      v10 = (void *)a1[19];
    }
    a1[20] = v8;
    operator delete(v10);
  }
  v14 = (std::__shared_weak_count *)a1[18];
  if (!v14)
    goto LABEL_27;
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    v17 = (std::__shared_weak_count *)a1[16];
    if (!v17)
      goto LABEL_33;
  }
  else
  {
LABEL_27:
    v17 = (std::__shared_weak_count *)a1[16];
    if (!v17)
      goto LABEL_33;
  }
  v18 = (unint64_t *)&v17->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_33:
  v20 = (std::__shared_weak_count *)a1[14];
  if (!v20)
    goto LABEL_37;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)a1[12];
    if (!v23)
      goto LABEL_43;
  }
  else
  {
LABEL_37:
    v23 = (std::__shared_weak_count *)a1[12];
    if (!v23)
      goto LABEL_43;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
LABEL_43:
  v26 = (std::__shared_weak_count *)a1[9];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  sub_240B87CFC((uint64_t)(a1 + 2));
  return nullsub_34(a1);
}

uint64_t sub_240B880B0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = off_25110C118;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return nullsub_34(a1);
}

void sub_240B88114(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = off_25110C118;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (void *)nullsub_34(a1);
  j__free(v5);
}

_QWORD *sub_240B8817C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = a1 + 72;
  v3 = (_QWORD *)a1[75];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[71];
  if (v5 == a1 + 68)
  {
    v6 = 4;
    v5 = a1 + 68;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[67];
  if (v7 == a1 + 64)
  {
    v8 = 4;
    v7 = a1 + 64;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[63];
  if (v9 == a1 + 60)
  {
    v10 = 4;
    v9 = a1 + 60;
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_21:
  v11 = (_QWORD *)a1[59];
  if (v11 == a1 + 56)
  {
    v12 = 4;
    v11 = a1 + 56;
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_26:
  v13 = (_QWORD *)a1[55];
  if (v13 == a1 + 52)
  {
    v14 = 4;
    v13 = a1 + 52;
  }
  else
  {
    if (!v13)
      goto LABEL_31;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_31:
  v15 = (_QWORD *)a1[51];
  if (v15 == a1 + 48)
  {
    v16 = 4;
    v15 = a1 + 48;
  }
  else
  {
    if (!v15)
      goto LABEL_36;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_36:
  v17 = (_QWORD *)a1[47];
  if (v17 == a1 + 44)
  {
    v18 = 4;
    v17 = a1 + 44;
  }
  else
  {
    if (!v17)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  v19 = (_QWORD *)a1[43];
  if (v19 == a1 + 40)
  {
    v20 = 4;
    v19 = a1 + 40;
  }
  else
  {
    if (!v19)
      goto LABEL_46;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_46:
  v21 = (_QWORD *)a1[39];
  if (v21 == a1 + 36)
  {
    v22 = 4;
    v21 = a1 + 36;
  }
  else
  {
    if (!v21)
      goto LABEL_51;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_51:
  v23 = (_QWORD *)a1[35];
  if (v23 == a1 + 32)
  {
    v24 = 4;
    v23 = a1 + 32;
  }
  else
  {
    if (!v23)
      goto LABEL_56;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_56:
  v25 = (_QWORD *)a1[31];
  if (v25 == a1 + 28)
  {
    v26 = 4;
    v25 = a1 + 28;
  }
  else
  {
    if (!v25)
      goto LABEL_61;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_61:
  v27 = (_QWORD *)a1[27];
  if (v27 == a1 + 24)
  {
    v28 = 4;
    v27 = a1 + 24;
  }
  else
  {
    if (!v27)
      goto LABEL_66;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_66:
  v29 = (_QWORD *)a1[23];
  if (v29 == a1 + 20)
  {
    v30 = 4;
    v29 = a1 + 20;
  }
  else
  {
    if (!v29)
      goto LABEL_71;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_71:
  v31 = (_QWORD *)a1[19];
  if (v31 == a1 + 16)
  {
    v32 = 4;
    v31 = a1 + 16;
  }
  else
  {
    if (!v31)
      goto LABEL_76;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_76:
  v33 = (_QWORD *)a1[15];
  if (v33 == a1 + 12)
  {
    v34 = 4;
    v33 = a1 + 12;
  }
  else
  {
    if (!v33)
      goto LABEL_81;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_81:
  v35 = (_QWORD *)a1[11];
  if (v35 == a1 + 8)
  {
    v36 = 4;
    v35 = a1 + 8;
  }
  else
  {
    if (!v35)
      goto LABEL_86;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_86:
  v37 = (_QWORD *)a1[7];
  if (v37 == a1 + 4)
  {
    v38 = 4;
    v37 = a1 + 4;
  }
  else
  {
    if (!v37)
      goto LABEL_91;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_91:
  v39 = (_QWORD *)a1[3];
  if (v39 == a1)
  {
    v40 = 4;
    v39 = a1;
    goto LABEL_95;
  }
  if (v39)
  {
    v40 = 5;
LABEL_95:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  return a1;
}

void sub_240B88528(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *a1 = off_25110C138;
  sub_240B885C0((uint64_t)(a1 + 8));
  v2 = a1[5];
  if (v2)
  {
    v3 = a1[6];
    v4 = (void *)a1[5];
    if (v3 != v2)
    {
      v5 = a1[6];
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  v9 = (void *)nullsub_34(a1);
  j__free(v9);
}

uint64_t sub_240B885C0(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t sub_240B88664(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16));
}

char *sub_240B88674(uint64_t a1)
{
  char *result;

  result = (char *)sub_240BA77BC(*(_QWORD *)(a1 + 16));
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_240B8869C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_240B886AC(uint64_t a1)
{
  return sub_240BBA100(*(_QWORD *)(a1 + 16));
}

uint64_t sub_240B886B4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16))
                   + 8 * a2);
}

uint64_t sub_240B886E8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16))
                   + 8 * a2);
}

uint64_t sub_240B8871C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_240B8872C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_240B8873C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_240B8874C(uint64_t a1)
{
  return sub_240BA8C9C(*(_QWORD *)(a1 + 16));
}

void sub_240B88754(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  void *v17[2];
  uint64_t v18;
  __int128 __dst;
  uint64_t v20;
  void *__p[2];
  char v22;

  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v7 = (_QWORD *)sub_240BA8B20(*(_QWORD *)(a1 + 16));
  if (a2 >= (uint64_t)(v6[1] - *v6) >> 3)
  {
    v12 = *(_QWORD **)(a1 + 32);
    v13 = sub_240BA77BC(*(_QWORD *)(a1 + 16));
    if (*(char *)(v13 + 23) < 0)
    {
      sub_240B6FF68(&__dst, *(void **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      __dst = v14;
    }
    v15 = sub_240BBA100(*(_QWORD *)(a1 + 16));
    sub_240B8A2EC("set dimension on tensor '", (uint64_t)&__dst, "' cannot change dimension ", a2, " of rank ", v15, " tensor.", __p);
    sub_240BB7D38(v12, 5, (uint64_t)__p);
    if (v22 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
      return;
    }
    v16 = (void *)__dst;
  }
  else
  {
    v8 = v7;
    if (*(_QWORD *)(*v7 + 8 * a2) >= a3)
    {
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16), a2, a3);
      return;
    }
    v9 = *(_QWORD **)(a1 + 32);
    v10 = sub_240BA77BC(*(_QWORD *)(a1 + 16));
    if (*(char *)(v10 + 23) < 0)
    {
      sub_240B6FF68(v17, *(void **)v10, *(_QWORD *)(v10 + 8));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v18 = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v17 = v11;
    }
    sub_240B8A5A8("set dimension on tensor '", (uint64_t)v17, "' cannot exceed the maximum size (", *(_QWORD *)(*v8 + 8 * a2), ") of dimension ", __p);
    sub_240BB7D38(v9, 5, (uint64_t)__p);
    if (v22 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      return;
    }
    v16 = v17[0];
  }
  operator delete(v16);
}

void sub_240B88948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_240B889A8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  void *v17[2];
  uint64_t v18;
  __int128 __dst;
  uint64_t v20;
  void *__p[2];
  char v22;

  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
  v7 = (_QWORD *)sub_240BA8B4C(*(_QWORD *)(a1 + 16));
  if (a2 >= (uint64_t)(v6[1] - *v6) >> 3)
  {
    v12 = *(_QWORD **)(a1 + 32);
    v13 = sub_240BA77BC(*(_QWORD *)(a1 + 16));
    if (*(char *)(v13 + 23) < 0)
    {
      sub_240B6FF68(&__dst, *(void **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      __dst = v14;
    }
    v15 = sub_240BBA100(*(_QWORD *)(a1 + 16));
    sub_240B8A2EC("set stride on tensor '", (uint64_t)&__dst, "' cannot change stride ", a2, " of rank ", v15, " tensor.", __p);
    sub_240BB7D38(v12, 5, (uint64_t)__p);
    if (v22 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
      return;
    }
    v16 = (void *)__dst;
  }
  else
  {
    v8 = v7;
    if (*(_QWORD *)(*v7 + 8 * a2) >= a3)
    {
      (*(void (**)(_QWORD, unint64_t, unint64_t))(**(_QWORD **)(a1 + 16) + 200))(*(_QWORD *)(a1 + 16), a2, a3);
      return;
    }
    v9 = *(_QWORD **)(a1 + 32);
    v10 = sub_240BA77BC(*(_QWORD *)(a1 + 16));
    if (*(char *)(v10 + 23) < 0)
    {
      sub_240B6FF68(v17, *(void **)v10, *(_QWORD *)(v10 + 8));
    }
    else
    {
      v11 = *(_OWORD *)v10;
      v18 = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v17 = v11;
    }
    sub_240B8A5A8("set stride on tensor '", (uint64_t)v17, "' cannot exceed the maximum stride (", *(_QWORD *)(*v8 + 8 * a2), ") of dimension ", __p);
    sub_240BB7D38(v9, 5, (uint64_t)__p);
    if (v22 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      return;
    }
    v16 = v17[0];
  }
  operator delete(v16);
}

void sub_240B88B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void *sub_240B88BFC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  void **p_dst;
  unint64_t v23;
  uint64_t v24;
  const void **v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  BOOL v30;
  size_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  std::ios_base *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  size_t v51;
  void **v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  std::ios_base *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  size_t v72;
  void **v73;
  unint64_t v74;
  const void **v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  const void **v80;
  const void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void **__dst;
  size_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD v89[2];
  _BYTE v90[16];
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void *__p[2];
  __int128 v95;
  int v96;
  _QWORD v97[20];

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)) != 11
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16)) == 1)
  {
    goto LABEL_30;
  }
  v6 = MEMORY[0x24BEDB870];
  v7 = MEMORY[0x24BEDB870] + 64;
  v8 = (uint64_t *)MEMORY[0x24BEDB800];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v10 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v97[0] = MEMORY[0x24BEDB870] + 64;
  v88 = v9;
  *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24));
  std::ios_base::init(v11, v89);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v88 = v6 + 24;
  v97[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x24BEDB848];
  v89[0] = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v95 = 0u;
  v96 = 16;
  v13 = sub_240B8AA18(&v88, (uint64_t)"tensor_set_data", 15);
  v14 = sub_240B8AA18(v13, (uint64_t)": Tensor ", 9);
  v15 = sub_240BA77BC(*(_QWORD *)(a1 + 16));
  v16 = *(char *)(v15 + 23);
  if (v16 >= 0)
    v17 = v15;
  else
    v17 = *(_QWORD *)v15;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v15 + 23);
  else
    v18 = *(_QWORD *)(v15 + 8);
  v19 = sub_240B8AA18(v14, v17, v18);
  sub_240B8AA18(v19, (uint64_t)" is OPAQUE and not user allocated.", 34);
  v20 = *(_QWORD **)(a1 + 32);
  if ((v96 & 0x10) != 0)
  {
    v84 = a3;
    v23 = *((_QWORD *)&v95 + 1);
    if (*((_QWORD *)&v95 + 1) < v93)
    {
      *((_QWORD *)&v95 + 1) = v93;
      v23 = v93;
    }
    v24 = v12;
    v25 = (const void **)&v92;
LABEL_16:
    v26 = *v25;
    v21 = v23 - (_QWORD)*v25;
    if (v21 > 0x7FFFFFFFFFFFFFF7)
      sub_240B6FFF4();
    if (v21 >= 0x17)
    {
      v27 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v27 = v21 | 7;
      v28 = v27 + 1;
      p_dst = (void **)operator new(v27 + 1);
      v86 = v21;
      v87 = v28 | 0x8000000000000000;
      __dst = p_dst;
      v8 = (uint64_t *)MEMORY[0x24BEDB800];
    }
    else
    {
      HIBYTE(v87) = v23 - *(_BYTE *)v25;
      p_dst = (void **)&__dst;
      if (!v21)
        goto LABEL_24;
    }
    memmove(p_dst, v26, v21);
LABEL_24:
    v12 = v24;
    a3 = v84;
    goto LABEL_25;
  }
  if ((v96 & 8) != 0)
  {
    v84 = a3;
    v24 = v12;
    v25 = (const void **)v90;
    v23 = v91;
    goto LABEL_16;
  }
  v21 = 0;
  HIBYTE(v87) = 0;
  p_dst = (void **)&__dst;
LABEL_25:
  *((_BYTE *)p_dst + v21) = 0;
  sub_240BB7D38(v20, 5, (uint64_t)&__dst);
  if (SHIBYTE(v87) < 0)
    operator delete(__dst);
  v88 = *v8;
  *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24)) = v8[3];
  v89[0] = v12 + 16;
  if (SBYTE7(v95) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v97);
LABEL_30:
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16)) != 11)
  {
    if ((((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 96))(*(_QWORD *)(a1 + 16)) - 1) & a2) != 0)
    {
      v33 = MEMORY[0x24BEDB870];
      v34 = MEMORY[0x24BEDB870] + 64;
      v35 = (uint64_t *)MEMORY[0x24BEDB800];
      v36 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
      v37 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
      v97[0] = MEMORY[0x24BEDB870] + 64;
      v88 = v36;
      *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v36 - 24)) = v37;
      v38 = (std::ios_base *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24));
      std::ios_base::init(v38, v89);
      v38[1].__vftable = 0;
      v38[1].__fmtflags_ = -1;
      v88 = v33 + 24;
      v97[0] = v34;
      std::streambuf::basic_streambuf();
      v39 = MEMORY[0x24BEDB848];
      v89[0] = MEMORY[0x24BEDB848] + 16;
      *(_OWORD *)__p = 0u;
      v95 = 0u;
      v96 = 16;
      v40 = sub_240B8AA18(&v88, (uint64_t)"tensor_set_data", 15);
      v41 = sub_240B8AA18(v40, (uint64_t)": pointer 0x", 12);
      *(_DWORD *)((char *)v41 + *(_QWORD *)(*v41 - 24) + 8) = *(_DWORD *)((_BYTE *)v41 + *(_QWORD *)(*v41 - 24) + 8) & 0xFFFFFFB5 | 8;
      v42 = (_QWORD *)std::ostream::operator<<();
      *(_DWORD *)((char *)v42 + *(_QWORD *)(*v42 - 24) + 8) = *(_DWORD *)((_BYTE *)v42 + *(_QWORD *)(*v42 - 24) + 8) & 0xFFFFFFB5 | 2;
      v43 = sub_240B8AA18(v42, (uint64_t)" does not satisfy tensor ", 25);
      v44 = sub_240BA77BC(*(_QWORD *)(a1 + 16));
      v45 = *(char *)(v44 + 23);
      if (v45 >= 0)
        v46 = v44;
      else
        v46 = *(_QWORD *)v44;
      if (v45 >= 0)
        v47 = *(unsigned __int8 *)(v44 + 23);
      else
        v47 = *(_QWORD *)(v44 + 8);
      v48 = sub_240B8AA18(v43, v46, v47);
      sub_240B8AA18(v48, (uint64_t)"'s ", 3);
      v49 = (_QWORD *)std::ostream::operator<<();
      sub_240B8AA18(v49, (uint64_t)"-byte alignment requirement.", 28);
      v50 = *(_QWORD **)(a1 + 32);
      if ((v96 & 0x10) != 0)
      {
        v74 = *((_QWORD *)&v95 + 1);
        if (*((_QWORD *)&v95 + 1) < v93)
        {
          *((_QWORD *)&v95 + 1) = v93;
          v74 = v93;
        }
        v75 = (const void **)&v92;
      }
      else
      {
        if ((v96 & 8) == 0)
        {
          v51 = 0;
          HIBYTE(v87) = 0;
          v52 = (void **)&__dst;
          goto LABEL_71;
        }
        v75 = (const void **)v90;
        v74 = v91;
      }
      v76 = *v75;
      v51 = v74 - (_QWORD)*v75;
      if (v51 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      if (v51 >= 0x17)
      {
        v77 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v77 = v51 | 7;
        v78 = v77 + 1;
        v52 = (void **)operator new(v77 + 1);
        v86 = v51;
        v87 = v78 | 0x8000000000000000;
        __dst = v52;
      }
      else
      {
        HIBYTE(v87) = v74 - *(_BYTE *)v75;
        v52 = (void **)&__dst;
        if (!v51)
          goto LABEL_71;
      }
      memmove(v52, v76, v51);
LABEL_71:
      *((_BYTE *)v52 + v51) = 0;
      sub_240BB7D38(v50, 5, (uint64_t)&__dst);
      if (SHIBYTE(v87) < 0)
        operator delete(__dst);
      v88 = *v35;
      *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24)) = v35[3];
      v89[0] = v39 + 16;
      if (SBYTE7(v95) < 0)
        operator delete(__p[0]);
LABEL_92:
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (void *)MEMORY[0x24268ACB0](v97);
    }
    if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16)) <= a3)
      goto LABEL_31;
    v53 = MEMORY[0x24BEDB870];
    v54 = MEMORY[0x24BEDB870] + 64;
    v55 = (uint64_t *)MEMORY[0x24BEDB800];
    v56 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v57 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v97[0] = MEMORY[0x24BEDB870] + 64;
    v88 = v56;
    *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v56 - 24)) = v57;
    v58 = (std::ios_base *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24));
    std::ios_base::init(v58, v89);
    v58[1].__vftable = 0;
    v58[1].__fmtflags_ = -1;
    v88 = v53 + 24;
    v97[0] = v54;
    std::streambuf::basic_streambuf();
    v59 = MEMORY[0x24BEDB848];
    v89[0] = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)__p = 0u;
    v95 = 0u;
    v96 = 16;
    v60 = sub_240B8AA18(&v88, (uint64_t)"tensor_set_data", 15);
    sub_240B8AA18(v60, (uint64_t)": memory block is ", 18);
    v61 = (_QWORD *)std::ostream::operator<<();
    v62 = sub_240B8AA18(v61, (uint64_t)" bytes, but ", 12);
    v63 = sub_240B8AA18(v62, (uint64_t)"tensor ", 7);
    v64 = sub_240BA77BC(*(_QWORD *)(a1 + 16));
    v65 = *(char *)(v64 + 23);
    if (v65 >= 0)
      v66 = v64;
    else
      v66 = *(_QWORD *)v64;
    if (v65 >= 0)
      v67 = *(unsigned __int8 *)(v64 + 23);
    else
      v67 = *(_QWORD *)(v64 + 8);
    v68 = sub_240B8AA18(v63, v66, v67);
    sub_240B8AA18(v68, (uint64_t)" is ", 4);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
    v69 = (_QWORD *)std::ostream::operator<<();
    v70 = sub_240B8AA18(v69, (uint64_t)" ", 1);
    sub_240B8AA18(v70, (uint64_t)"bytes.", 6);
    v71 = *(_QWORD **)(a1 + 32);
    if ((v96 & 0x10) != 0)
    {
      v79 = *((_QWORD *)&v95 + 1);
      if (*((_QWORD *)&v95 + 1) < v93)
      {
        *((_QWORD *)&v95 + 1) = v93;
        v79 = v93;
      }
      v80 = (const void **)&v92;
    }
    else
    {
      if ((v96 & 8) == 0)
      {
        v72 = 0;
        HIBYTE(v87) = 0;
        v73 = (void **)&__dst;
        goto LABEL_88;
      }
      v80 = (const void **)v90;
      v79 = v91;
    }
    v81 = *v80;
    v72 = v79 - (_QWORD)*v80;
    if (v72 > 0x7FFFFFFFFFFFFFF7)
      sub_240B6FFF4();
    if (v72 >= 0x17)
    {
      v82 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v72 | 7) != 0x17)
        v82 = v72 | 7;
      v83 = v82 + 1;
      v73 = (void **)operator new(v82 + 1);
      v86 = v72;
      v87 = v83 | 0x8000000000000000;
      __dst = v73;
    }
    else
    {
      HIBYTE(v87) = v79 - *(_BYTE *)v80;
      v73 = (void **)&__dst;
      if (!v72)
        goto LABEL_88;
    }
    memmove(v73, v81, v72);
LABEL_88:
    *((_BYTE *)v73 + v72) = 0;
    sub_240BB7D38(v71, 5, (uint64_t)&__dst);
    if (SHIBYTE(v87) < 0)
      operator delete(__dst);
    v88 = *v55;
    *(_QWORD *)((char *)&v89[-1] + *(_QWORD *)(v88 - 24)) = v55[3];
    v89[0] = v59 + 16;
    if (SBYTE7(v95) < 0)
      operator delete(__p[0]);
    goto LABEL_92;
  }
LABEL_31:
  result = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16));
  if ((_DWORD)result)
    v30 = (_DWORD)result == 2;
  else
    v30 = 1;
  if (v30)
  {
    v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 128))(*(_QWORD *)(a1 + 16));
    v32 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 168))(*(_QWORD *)(a1 + 16));
    return memcpy(v32, (const void *)a2, v31);
  }
  else if ((_DWORD)result == 1)
  {
    return (void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16), a2);
  }
  return result;
}

void sub_240B894B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_240B89574()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B89588(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25110C158;
  result[1] = v3;
  return result;
}

uint64_t sub_240B895C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_25110C158;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B895E0(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

_QWORD *sub_240B895EC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B89754(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B89764()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B89778(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25110C1A0;
  result[1] = v3;
  return result;
}

uint64_t sub_240B897B0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_25110C1A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B897D0(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

_QWORD *sub_240B897DC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B89944(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B89954()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B89968(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25110C1E8;
  result[1] = v3;
  return result;
}

uint64_t sub_240B8999C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25110C1E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B899B8(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

_QWORD *sub_240B899C4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B89B2C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B89B3C()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B89B50(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25110C230;
  result[1] = v3;
  return result;
}

uint64_t sub_240B89B88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_25110C230;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B89BA8(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

_QWORD *sub_240B89BB4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B89D1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B89D2C()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B89D40(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25110C278;
  result[1] = v3;
  return result;
}

uint64_t sub_240B89D78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_25110C278;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B89D98(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

_QWORD *sub_240B89DA8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B89F10(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B89F20()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B89F34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25110C2C0;
  result[1] = v3;
  return result;
}

uint64_t sub_240B89F68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25110C2C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B89F84(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

_QWORD *sub_240B89F90(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B8A0F8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B8A108()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B8A11C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25110C308;
  result[1] = v3;
  return result;
}

uint64_t sub_240B8A150(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25110C308;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B8A16C(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

_QWORD *sub_240B8A178(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B8A2E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

uint64_t sub_240B8A2EC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, const char *a7@<X6>, _BYTE *a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  uint64_t v19;
  char v20;
  size_t v21;
  unint64_t v22;
  uint64_t v23;
  const void **v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *__p[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  unint64_t v38;
  void *v39[2];
  __int128 v40;
  int v41;
  uint64_t v42[20];

  v14 = MEMORY[0x24BEDB870];
  v15 = MEMORY[0x24BEDB870] + 64;
  v16 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v17 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v42[0] = MEMORY[0x24BEDB870] + 64;
  v34 = v16;
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v16 - 24)) = v17;
  v18 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v18, &v35);
  v18[1].__vftable = 0;
  v18[1].__fmtflags_ = -1;
  v34 = v14 + 24;
  v42[0] = v15;
  std::streambuf::basic_streambuf();
  v19 = MEMORY[0x24BEDB848];
  v35 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v39 = 0u;
  v40 = 0u;
  v41 = 16;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v33 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_240B8A854(&v34, a1, (uint64_t)__p, a3, a4, a5, a6, a7);
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p[0]);
    v20 = v41;
    if ((v41 & 0x10) == 0)
      goto LABEL_3;
LABEL_6:
    v22 = *((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1) < v38)
    {
      *((_QWORD *)&v40 + 1) = v38;
      v22 = v38;
    }
    v23 = v19;
    v24 = (const void **)&v37;
    goto LABEL_10;
  }
  v20 = v41;
  if ((v41 & 0x10) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v20 & 8) == 0)
  {
    v21 = 0;
    a8[23] = 0;
    goto LABEL_19;
  }
  v23 = v19;
  v24 = (const void **)v36;
  v22 = v36[2];
LABEL_10:
  v25 = *v24;
  v21 = v22 - (_QWORD)*v24;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v21 >= 0x17)
  {
    v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v26 = v21 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a8 + 1) = v21;
    *((_QWORD *)a8 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a8 = v28;
    a8 = v28;
  }
  else
  {
    a8[23] = v21;
    if (!v21)
      goto LABEL_18;
  }
  memmove(a8, v25, v21);
LABEL_18:
  v19 = v23;
LABEL_19:
  a8[v21] = 0;
  v34 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v35 = v19 + 16;
  if (SBYTE7(v40) < 0)
    operator delete(v39[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24268ACB0](v42);
}

void sub_240B8A54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_240B8A5A8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::ios_base *v16;
  uint64_t v17;
  char v18;
  size_t v19;
  unint64_t v20;
  const void **v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void *__p[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  unint64_t v33;
  void *v34[2];
  __int128 v35;
  int v36;
  uint64_t v37[20];

  v12 = MEMORY[0x24BEDB870];
  v13 = MEMORY[0x24BEDB870] + 64;
  v14 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v15 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v37[0] = MEMORY[0x24BEDB870] + 64;
  v29 = v14;
  *(uint64_t *)((char *)&v29 + *(_QWORD *)(v14 - 24)) = v15;
  v16 = (std::ios_base *)((char *)&v29 + *(_QWORD *)(v29 - 24));
  std::ios_base::init(v16, &v30);
  v16[1].__vftable = 0;
  v16[1].__fmtflags_ = -1;
  v29 = v12 + 24;
  v37[0] = v13;
  std::streambuf::basic_streambuf();
  v17 = MEMORY[0x24BEDB848];
  v30 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  v36 = 16;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v28 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_240B8AD20(&v29, a1, (uint64_t)__p, a3, a4, a5);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__p[0]);
    v18 = v36;
    if ((v36 & 0x10) == 0)
      goto LABEL_3;
LABEL_6:
    v20 = *((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v35 + 1) < v33)
    {
      *((_QWORD *)&v35 + 1) = v33;
      v20 = v33;
    }
    v21 = (const void **)&v32;
    goto LABEL_10;
  }
  v18 = v36;
  if ((v36 & 0x10) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v18 & 8) == 0)
  {
    v19 = 0;
    a6[23] = 0;
    goto LABEL_18;
  }
  v21 = (const void **)v31;
  v20 = v31[2];
LABEL_10:
  v22 = *v21;
  v19 = v20 - (_QWORD)*v21;
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v25 = operator new(v23 + 1);
    *((_QWORD *)a6 + 1) = v19;
    *((_QWORD *)a6 + 2) = v24 | 0x8000000000000000;
    *(_QWORD *)a6 = v25;
    a6 = v25;
    goto LABEL_17;
  }
  a6[23] = v19;
  if (v19)
LABEL_17:
    memmove(a6, v22, v19);
LABEL_18:
  a6[v19] = 0;
  v29 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v29 + *(_QWORD *)(v29 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v30 = v17 + 16;
  if (SBYTE7(v35) < 0)
    operator delete(v34[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x24268ACB0](v37);
}

void sub_240B8A7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_240B8A854(_QWORD *a1, char *__s, uint64_t a3, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8)
{
  size_t v14;
  unint64_t v15;
  void *v16;
  void **v17;
  void *v18;
  size_t v19;
  size_t v20;
  size_t v21;
  _QWORD *v22;
  void *__p[2];
  unint64_t v25;

  v14 = strlen(__s);
  sub_240B8AA18(a1, (uint64_t)__s, v14);
  v25 = *(_QWORD *)(a3 + 16);
  v15 = v25;
  *(_OWORD *)__p = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v16 = (void *)HIBYTE(v15);
  if ((char)v16 >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  if ((char)v16 >= 0)
    v18 = v16;
  else
    v18 = __p[1];
  sub_240B8AA18(a1, (uint64_t)v17, (uint64_t)v18);
  v19 = strlen(a4);
  sub_240B8AA18(a1, (uint64_t)a4, v19);
  std::ostream::operator<<();
  v20 = strlen(a6);
  sub_240B8AA18(a1, (uint64_t)a6, v20);
  std::ostream::operator<<();
  v21 = strlen(a8);
  v22 = sub_240B8AA18(a1, (uint64_t)a8, v21);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  return v22;
}

void sub_240B8A978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B8A994(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](a1 + 112);
  return a1;
}

_QWORD *sub_240B8AA18(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x24268ABE4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_240B8AB7C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x24268ABF0](v13);
  return a1;
}

void sub_240B8AB20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x24268ABF0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x240B8AB00);
}

void sub_240B8AB68(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_240B8AB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[2];
  int64_t v22;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        sub_240B6FFF4();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (v22 >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_240B8AD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B8AD20(_QWORD *a1, char *__s, uint64_t a3, const char *a4, uint64_t a5, const char *a6)
{
  size_t v11;
  unint64_t v12;
  void *v13;
  void **v14;
  void *v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v21;

  v11 = strlen(__s);
  sub_240B8AA18(a1, (uint64_t)__s, v11);
  v21 = *(_QWORD *)(a3 + 16);
  v12 = v21;
  *(_OWORD *)__p = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v13 = (void *)HIBYTE(v12);
  if ((char)v13 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((char)v13 >= 0)
    v15 = v13;
  else
    v15 = __p[1];
  sub_240B8AA18(a1, (uint64_t)v14, (uint64_t)v15);
  v16 = strlen(a4);
  sub_240B8AA18(a1, (uint64_t)a4, v16);
  std::ostream::operator<<();
  v17 = strlen(a6);
  sub_240B8AA18(a1, (uint64_t)a6, v17);
  v18 = std::ostream::operator<<();
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  return v18;
}

void sub_240B8AE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240B8AE48()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B8AE5C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25110C350;
  result[1] = v3;
  return result;
}

uint64_t sub_240B8AE94(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_25110C350;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B8AEB4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

_QWORD *sub_240B8AEC8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B8B030(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B8B040()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B8B054(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25110C398;
  result[1] = v3;
  return result;
}

uint64_t sub_240B8B08C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_25110C398;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B8B0AC(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 8))(*a2, *a3, *a4);
}

_QWORD *sub_240B8B0C0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B8B228(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B8B238()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B8B24C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_25110C3E0;
  result[1] = v3;
  return result;
}

uint64_t sub_240B8B284(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_25110C3E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B8B2A4(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

_QWORD *sub_240B8B2B0(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240B8B418(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

void sub_240B8B428(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B8B44C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    sub_240B8817C((_QWORD *)(v1 + 8));
    JUMPOUT(0x24268ACF8);
  }
  return result;
}

uint64_t sub_240B8B498(uint64_t a1, uint64_t a2, char ***a3)
{
  void *v6;
  _QWORD *v7;
  void *v8;
  int v9;
  char *v10;
  __int128 v11;
  uint64_t i;
  uint64_t result;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  char *v31;
  __int128 v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 *v74;
  __int128 *v75;
  __int128 *v76;
  __int128 *v77;
  char *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  __int128 v86;
  _DWORD v87[28];
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  _BYTE v91[24];
  __int128 v92;
  int v93[48];
  void *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t j;
  void *v99;
  void *__b;
  __int128 __len;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v104 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v91 = 0u;
  *(_QWORD *)&v91[16] = 0x100000001;
  v92 = *(_OWORD *)&v91[8];
  v87[0] = 0;
  v90 = 0xFFFFFFFE00000000;
  v96 = 200;
  v6 = malloc_type_malloc(0x3840uLL, 0x10F2040C712DE25uLL);
  v94 = v6;
  if (!v6)
    goto LABEL_10;
  j = 0;
  v95 = (char *)v6;
  v97 = 0;
  __len = xmmword_240BBB8B0;
  v7 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
  v99 = v7;
  if (!v7)
    goto LABEL_10;
  *v7 = 0;
  v8 = malloc_type_malloc(*((size_t *)&__len + 1), 0x100004077774924uLL);
  __b = v8;
  if (!v8)
  {
    free(v99);
    goto LABEL_10;
  }
  bzero(v8, *((size_t *)&__len + 1));
  v9 = setjmp(v93);
  if (v9 == 2)
  {
LABEL_10:
    sub_240B8CFFC((uint64_t)&v91[8], a1, "memory exhausted");
    result = 2;
    goto LABEL_11;
  }
  if (v9)
    goto LABEL_127;
  v10 = v95;
  v95 += 72;
  --v96;
  *((_DWORD *)v10 + 1) = 0;
  *v10 = 1;
  *((_QWORD *)v10 + 2) = 0;
  v10[1] = 1;
  *((_QWORD *)v10 + 1) = *(_QWORD *)v99;
  *((_QWORD *)v10 + 3) = *(_QWORD *)v91;
  v11 = v92;
  *((_OWORD *)v10 + 2) = *(_OWORD *)&v91[8];
  *((_OWORD *)v10 + 3) = v11;
  *(_QWORD *)v99 = v10;
  if (v96 <= 1)
    sub_240B8D2BC((uint64_t)v87);
  for (i = 0; ; i = *(_QWORD *)(*(_QWORD *)v99 + 16))
  {
LABEL_32:
    while (2)
    {
      v22 = *(int *)(*(_QWORD *)v99 + 4);
      if ((_DWORD)v22 == 6)
      {
LABEL_128:
        result = 0;
        goto LABEL_11;
      }
      v23 = byte_240BBBA9C[v22];
      if (v23 == -55)
      {
        if (!byte_240BBBAED[v22])
          goto LABEL_43;
        v24 = sub_240B8C654((uint64_t)v87, 0, byte_240BBBAED[v22], 1, a1, a3);
        v25 = 6;
        v26 = i;
        switch(v24)
        {
          case 0:
            goto LABEL_60;
          case 1:
            goto LABEL_36;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_44;
          case 4:
            goto LABEL_118;
          default:
            goto LABEL_119;
        }
        goto LABEL_60;
      }
      v27 = HIDWORD(v90);
      if (HIDWORD(v90) == -2)
      {
        HIDWORD(v90) = sub_240B6E80C((uint64_t)v91, (uint64_t)&v91[8], a2);
        v27 = HIDWORD(v90);
      }
      if (v27 <= 0)
      {
        HIDWORD(v90) = 0;
        v28 = 0;
      }
      else if (v27 >= 0x10A)
      {
        v28 = 2;
      }
      else
      {
        if (v27 == 256)
        {
          v88 = *(_OWORD *)&v91[8];
          v89 = v92;
          v25 = 15;
LABEL_59:
          v26 = i;
          v24 = v25;
          goto LABEL_60;
        }
        v28 = byte_240BBB992[v27];
      }
      v29 = v28 + v23;
      if ((v28 + v23) <= 0x44 && v28 == byte_240BBBB3E[v29])
      {
        v30 = byte_240BBBBD8[v29];
        if (word_240BBBC96[byte_240BBBCA0[v29]])
        {
          v25 = 11;
          goto LABEL_59;
        }
      }
      else
      {
        v30 = -byte_240BBBAED[v22];
      }
      if (v30 >= 1)
      {
        HIDWORD(v90) = -2;
        v31 = v95;
        v95 += 72;
        --v96;
        *v31 = 1;
        *((_DWORD *)v31 + 1) = v30;
        *((_QWORD *)v31 + 2) = i + 1;
        v31[1] = 1;
        *((_QWORD *)v31 + 1) = *(_QWORD *)v99;
        *((_QWORD *)v31 + 3) = *(_QWORD *)v91;
        v32 = v92;
        *((_OWORD *)v31 + 2) = *(_OWORD *)&v91[8];
        *((_OWORD *)v31 + 3) = v32;
        *(_QWORD *)v99 = v31;
        if (v96 <= 1)
          sub_240B8D2BC((uint64_t)v87);
        if (v87[0] >= 1)
          --v87[0];
        v26 = i + 1;
        v24 = 0;
        goto LABEL_60;
      }
      if (!v30)
      {
LABEL_43:
        v88 = *(_OWORD *)&v91[8];
        v89 = v92;
        sub_240B8C24C((uint64_t)v87, a1);
LABEL_44:
        v25 = 15;
        goto LABEL_59;
      }
      v24 = sub_240B8C654((uint64_t)v87, 0, -v30, 1, a1, a3);
      v25 = 6;
      v26 = i;
      switch(v24)
      {
        case 0:
          break;
        case 1:
LABEL_36:
          v25 = 14;
          goto LABEL_59;
        case 2:
          goto LABEL_59;
        case 3:
          goto LABEL_44;
        case 4:
LABEL_118:
          v25 = 4;
          goto LABEL_59;
        default:
LABEL_119:
          v25 = 7;
          goto LABEL_59;
      }
LABEL_60:
      result = 0;
      i = v26;
      switch(v24)
      {
        case 0:
          continue;
        case 4:
          goto LABEL_10;
        case 6:
        case 7:
          goto LABEL_127;
        case 11:
          v33 = __len;
          v34 = v26;
          break;
        case 14:
          goto LABEL_11;
        case 15:
          goto LABEL_98;
        default:
          return result;
      }
      break;
    }
LABEL_62:
    if (v33 < 1)
    {
      v37 = v33;
      goto LABEL_73;
    }
    memset(__b, HIDWORD(v90) != -2, v33);
    v35 = 0;
    while (1)
    {
      v36 = sub_240B8CAC8((uint64_t)v87, v35, a1, a2, a3);
      if (v36)
        break;
      ++v35;
      v37 = __len;
      if (v35 >= (uint64_t)__len)
      {
        if ((uint64_t)__len < 1)
        {
          if ((_QWORD)__len)
            goto LABEL_74;
        }
        else
        {
          v38 = 0;
          v39 = __len;
          v40 = 0;
          v41 = __len;
          do
          {
            v43 = v40;
            v42 = v38;
            v44 = *((_QWORD *)v99 + v40);
            if (v44)
            {
              *((_QWORD *)v99 + v38) = v44;
              *((_BYTE *)__b + v38) = *((_BYTE *)__b + v43);
              v42 = v38 + 1;
            }
            else
            {
              *(_QWORD *)&__len = --v41;
              v39 = v41;
            }
            v40 = v43 + 1;
            v37 = v39;
            v38 = v42;
            v33 = v41;
          }
          while (v42 < v41);
LABEL_73:
          if (v33)
          {
LABEL_74:
            if (HIDWORD(v90) > 0x109)
              v45 = 2;
            else
              v45 = byte_240BBB992[HIDWORD(v90)];
            HIDWORD(v90) = -2;
            i = v34 + 1;
            v46 = v37;
            if (v37 >= 1)
            {
              v47 = 0;
              do
              {
                if (v45 == 1)
                {
                  v48 = 0;
                }
                else
                {
                  v49 = *(int *)(*((_QWORD *)v99 + v47) + 4);
                  if (byte_240BBBA9C[v49] == 201
                    || (v50 = (v45 + byte_240BBBA9C[v49]), (v50 & 0x80000000) != 0)
                    || (int)v50 > 68
                    || v45 != byte_240BBBB3E[v50])
                  {
                    v48 = -byte_240BBBAED[v49];
                  }
                  else
                  {
                    v48 = byte_240BBBBD8[v50];
                  }
                }
                v51 = v95;
                v95 += 72;
                --v96;
                *v51 = 1;
                *((_DWORD *)v51 + 1) = v48;
                *((_QWORD *)v51 + 2) = i;
                v51[1] = 1;
                *((_QWORD *)v51 + 1) = *((_QWORD *)v99 + v47);
                *((_QWORD *)v51 + 3) = *(_QWORD *)v91;
                v52 = v92;
                *((_OWORD *)v51 + 2) = *(_OWORD *)&v91[8];
                *((_OWORD *)v51 + 3) = v52;
                *((_QWORD *)v99 + v47) = v51;
                if (v96 <= 1)
                  sub_240B8D2BC((uint64_t)v87);
                ++v47;
              }
              while (v47 < (uint64_t)__len);
              v46 = __len;
            }
            v33 = v46;
            v34 = i;
            if (v46 == 1)
            {
              v60 = sub_240B8CEB0((uint64_t)v87, a1, a3);
              v61 = v60;
              result = 0;
              switch(v61)
              {
                case 0:
                  sub_240B8CF1C((uint64_t)v87);
                  goto LABEL_32;
                case 1:
                  goto LABEL_11;
                case 3:
                  goto LABEL_98;
                case 4:
                  goto LABEL_10;
                default:
                  goto LABEL_127;
              }
            }
            goto LABEL_62;
          }
        }
        if (j)
        {
          *(_QWORD *)v99 = j;
          *(_QWORD *)&__len = 1;
          j = 0;
        }
        else if (!v37)
        {
          sub_240B8CE80((uint64_t)v87, (uint64_t)&v91[8], a1, "syntax error");
        }
        v62 = sub_240B8CEB0((uint64_t)v87, a1, a3);
        result = 0;
        switch(v62)
        {
          case 0:
            v88 = *(_OWORD *)&v91[8];
            v89 = v92;
            sub_240B8C24C((uint64_t)v87, a1);
            goto LABEL_98;
          case 1:
            goto LABEL_11;
          case 3:
            goto LABEL_98;
          case 4:
            goto LABEL_10;
          default:
            goto LABEL_127;
        }
      }
    }
    if (v36 == 1)
      goto LABEL_128;
    if (v36 != 3)
      break;
LABEL_98:
    if (v87[0] != 3)
    {
      v63 = __len;
      if ((uint64_t)__len >= 1)
      {
        v64 = 0;
        do
        {
          v65 = v64 + 1;
          if (*((_QWORD *)v99 + v64))
          {
            if (v65 < (uint64_t)__len)
            {
              v66 = v64 + 1;
              do
              {
                if (*((_QWORD *)v99 + v66))
                  j = *((_QWORD *)v99 + v66);
                *((_QWORD *)v99 + v66++) = 0;
              }
              while (v63 != v66);
            }
            v67 = 0;
            v68 = 0;
            v69 = v63;
            do
            {
              v71 = v67;
              v70 = v68;
              v72 = *((_QWORD *)v99 + v67);
              if (v72)
              {
                *((_QWORD *)v99 + v68) = v72;
                *((_BYTE *)__b + v68) = *((_BYTE *)__b + v71);
                v70 = v68 + 1;
              }
              else
              {
                *(_QWORD *)&__len = --v69;
              }
              v67 = v71 + 1;
              v68 = v70;
            }
            while (v70 < v69);
            if (v69 == 1)
            {
              v73 = v97;
              if (v97)
              {
                if (*(_QWORD *)v99 == v97)
                {
                  v74 = 0;
                }
                else
                {
                  v75 = *(__int128 **)v99;
                  v76 = 0;
                  do
                  {
                    v77 = (__int128 *)*((_QWORD *)v75 + 1);
                    *((_QWORD *)v75 + 1) = v76;
                    v74 = v75;
                    v76 = v75;
                    v75 = v77;
                  }
                  while (v77 != (__int128 *)v73);
                }
                v78 = (char *)(v73 + 72);
                v79 = v96
                    - 0x71C71C71C71C71C7 * ((v95 - (_BYTE *)v94) >> 3)
                    + 0x71C71C71C71C71C7 * ((v78 - (_BYTE *)v94) >> 3);
                v95 = v78;
                v96 = v79;
                v97 = 0;
                for (j = 0; v74; --v96)
                {
                  v80 = *v74;
                  v81 = v74[1];
                  v82 = v74[3];
                  *((_OWORD *)v78 + 2) = v74[2];
                  *((_OWORD *)v78 + 3) = v82;
                  *(_OWORD *)v78 = v80;
                  *((_OWORD *)v78 + 1) = v81;
                  v74 = (__int128 *)*((_QWORD *)v74 + 1);
                  *((_QWORD *)v95 + 1) = v95 - 72;
                  *(_QWORD *)v99 = v95;
                  v78 = v95 + 72;
                  v95 += 72;
                }
              }
            }
            v87[0] = 3;
            v83 = *(_QWORD *)v99;
            if (*(_QWORD *)v99)
            {
              v84 = v99;
              do
              {
                v86 = *(_OWORD *)(v83 + 48);
                v88 = *(_OWORD *)(v83 + 32);
                v89 = v86;
                v85 = *(_QWORD *)(v83 + 8);
                if (v85)
                {
                  sub_240B8D1F4(v83);
                  v85 = *(_QWORD *)(v83 + 8);
                  v84 = v99;
                }
                *v84 = v85;
                v95 -= 72;
                ++v96;
                v83 = *(_QWORD *)v99;
                v84 = v99;
              }
              while (*(_QWORD *)v99);
            }
            longjmp(v93, 1);
          }
          ++v64;
        }
        while ((_QWORD)__len != v65);
      }
      longjmp(v93, 1);
    }
    v53 = HIDWORD(v90);
    do
    {
      if (v53 != -2)
      {
        if (!v53)
          longjmp(v93, 1);
        v54 = *(_QWORD *)v99;
        v102 = *(_OWORD *)&v91[8];
        v103 = v92;
        *(_OWORD *)(v54 + 48) = v92;
        if (HIDWORD(v90) > 0x109)
          v55 = 2;
        else
          v55 = byte_240BBB992[HIDWORD(v90)];
        sub_240B8D0F8(v55, (void **)v91);
        HIDWORD(v90) = -2;
      }
      v53 = sub_240B6E80C((uint64_t)v91, (uint64_t)&v91[8], a2);
      HIDWORD(v90) = v53;
      if (v53 <= 0)
      {
        HIDWORD(v90) = 0;
        v56 = 0;
        v53 = 0;
      }
      else if (v53 > 0x109)
      {
        v56 = 2;
      }
      else
      {
        v56 = byte_240BBB992[v53];
      }
      v57 = *(int *)(*(_QWORD *)v99 + 4);
      v58 = byte_240BBBA9C[v57];
      if (v58 == -55)
        break;
      v59 = v56 + v58;
      if (v59 <= 0x44 && v56 == byte_240BBBB3E[v59])
        break;
    }
    while (!byte_240BBBAED[v57]);
  }
  if (v36 == 4)
    goto LABEL_10;
LABEL_127:
  result = 1;
LABEL_11:
  v14 = result;
  if (HIDWORD(v90) != -2)
  {
    if (HIDWORD(v90) > 0x109)
      v15 = 2;
    else
      v15 = byte_240BBB992[HIDWORD(v90)];
    sub_240B8D0F8(v15, (void **)v91);
  }
  v16 = v94;
  if (v94)
  {
    if (v99 && (uint64_t)__len >= 1)
    {
      v17 = (uint64_t *)v99;
      v18 = __len;
      while (1)
      {
        v19 = *v17;
        if (*v17)
          break;
        ++v17;
        if (!--v18)
          goto LABEL_29;
      }
      do
      {
        v21 = *(_OWORD *)(v19 + 48);
        v88 = *(_OWORD *)(v19 + 32);
        v89 = v21;
        v20 = *(_QWORD *)(v19 + 8);
        if (v20)
        {
          sub_240B8D1F4(v19);
          v20 = *(_QWORD *)(v19 + 8);
        }
        *v17 = v20;
        v95 -= 72;
        ++v96;
        v19 = *v17;
      }
      while (*v17);
      v16 = v94;
    }
LABEL_29:
    free(v16);
    free(v99);
    free(__b);
  }
  return v14;
}

void sub_240B8C21C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_240B8C24C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  size_t v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  int64_t v18;
  char *v19;
  char *i;
  int v21;
  int v22;
  char *v23;
  int v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  char *v34;
  char *v35;
  char *j;
  int v37;
  int v38;
  char v39;
  char *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  _DWORD v45[4];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if (!*(_DWORD *)a1)
  {
    v4 = *(unsigned int *)(a1 + 228);
    if ((_DWORD)v4 == -2)
    {
      v5 = 0;
      v6 = "syntax error";
    }
    else
    {
      if (v4 > 0x109)
        v7 = 2;
      else
        v7 = byte_240BBB992[v4];
      v44 = v7;
      v8 = byte_240BBBA9C[*(int *)(**(_QWORD **)(a1 + 504) + 4)];
      if (v8 != -55)
      {
        LODWORD(v9) = -v8 & (v8 >> 31);
        v10 = 69 - v8 >= 15 ? 15 : 69 - v8;
        if ((int)v9 < v10)
        {
          v11 = 0;
          v9 = (int)v9;
          v12 = (char *)&unk_240BBBB3E + byte_240BBBA9C[*(int *)(**(_QWORD **)(a1 + 504) + 4)];
          v6 = "syntax error, unexpected %s";
          do
          {
            if (v9 != 1)
            {
              v13 = v12[v9];
              if ((_DWORD)v9 == v13)
              {
                if (v11 == 4)
                  goto LABEL_23;
                v45[v11++] = v13;
              }
            }
            ++v9;
          }
          while (v10 != v9);
          if (v11)
          {
            if (v11 != -2)
            {
              v5 = v11 + 1;
              v6 = "syntax error";
              switch(v11)
              {
                case -3:
                  goto LABEL_76;
                case 1:
                  v6 = "syntax error, unexpected %s, expecting %s";
                  v5 = 2;
                  goto LABEL_24;
                case 2:
                  v6 = "syntax error, unexpected %s, expecting %s or %s";
                  v5 = 3;
                  goto LABEL_24;
                case 3:
                  v6 = "syntax error, unexpected %s, expecting %s or %s or %s";
                  v5 = 4;
                  goto LABEL_24;
                case 4:
                  v6 = "syntax error, unexpected %s, expecting %s or %s or %s or %s";
                  v5 = 5;
                  goto LABEL_24;
                default:
                  goto LABEL_24;
              }
            }
            goto LABEL_76;
          }
        }
      }
      v45[0] = -2;
      v6 = "syntax error, unexpected %s";
LABEL_23:
      v5 = 1;
    }
LABEL_24:
    v14 = strlen(v6) - 2 * v5 + 1;
    if (v5 < 1)
      goto LABEL_79;
    v15 = 0;
    v16 = 0;
    do
    {
      if (*off_25110C480[v45[v15 - 1]] == 34)
      {
        v17 = 0;
        v19 = off_25110C480[v45[v15 - 1]];
        for (i = v19; ; v19 = i)
        {
          v22 = *++i;
          v21 = v22;
          if (v22 <= 91)
          {
            if (v21 == 34)
              goto LABEL_27;
            if (v21 == 39 || v21 == 44)
              break;
          }
          else if (v21 == 92)
          {
            v24 = v19[2];
            v23 = v19 + 2;
            if (v24 != 92)
              break;
            i = v23;
          }
          ++v17;
        }
      }
      v17 = strlen(off_25110C480[v45[v15 - 1]]);
LABEL_27:
      v16 |= (uint64_t)(v14 ^ 0x7FFFFFFFFFFFFFFFLL) < v17;
      if ((uint64_t)(v14 ^ 0x7FFFFFFFFFFFFFFFLL) >= v17)
        v18 = v17;
      else
        v18 = 0;
      v14 += v18;
      ++v15;
    }
    while (v15 != v5);
    if ((v16 & 1) == 0)
    {
LABEL_79:
      v25 = (char *)malloc_type_malloc(v14, 0xF2FAB3D5uLL);
      if (v25)
      {
        v26 = v25;
        v27 = 0;
        v28 = v25;
        while (1)
        {
          v31 = *(unsigned __int8 *)v6;
          *v28 = v31;
          if (v31 != 37)
            break;
          if (v6[1] != 115 || v27 >= v5)
            goto LABEL_47;
          v33 = v27 + 1;
          v34 = off_25110C480[v45[v27 - 1]];
          if (*v34 == 34)
          {
            v29 = 0;
            v35 = v34;
            for (j = v34; ; v35 = j)
            {
              v38 = *++j;
              v37 = v38;
              v39 = v38;
              if (v38 <= 91)
              {
                if (v37 == 34)
                {
                  v28[v29] = 0;
                  goto LABEL_68;
                }
                if (v37 == 39 || v37 == 44)
                  break;
              }
              else if (v37 == 92)
              {
                v41 = v35[2];
                v40 = v35 + 2;
                if (v41 != 92)
                  break;
                v39 = 92;
                j = v40;
              }
              v28[v29++] = v39;
            }
          }
          v42 = 0;
          do
          {
            v43 = v34[v42];
            v28[v42++] = v43;
          }
          while (v43);
          v29 = v42 - 1;
LABEL_68:
          v30 = 2;
          v27 = v33;
LABEL_48:
          v28 += v29;
          v6 += v30;
        }
        if (!v31)
        {
          sub_240B8CFFC(a1 + 240, a2, v25);
          free(v26);
          ++*(_DWORD *)(a1 + 224);
          return;
        }
LABEL_47:
        v29 = 1;
        v30 = 1;
        goto LABEL_48;
      }
    }
    sub_240B8CFFC(a1 + 240, a2, "syntax error");
LABEL_76:
    sub_240B8D4FC(a1);
  }
}

uint64_t sub_240B8C654(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, char ***a6)
{
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  int v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  BOOL v26;
  uint64_t v28;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD v53[2];
  char **v54;
  _OWORD v55[5];
  _OWORD *v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD **)(a1 + 504);
  v9 = (_OWORD *)v8[a2];
  v10 = *((_QWORD *)v9 + 2);
  v11 = *(_QWORD *)(a1 + 488);
  if ((a4 & 1) != 0)
  {
    v12 = a3;
    v13 = byte_240BBBC66[a3];
    if (v11)
    {
      v56 = v9;
      if (((0x412100091221uLL >> a3) & 1) != 0)
      {
        v14 = v9[3];
        v55[2] = v9[2];
        v55[3] = v14;
      }
      if (((0xBEDEFFF6EDDEuLL >> a3) & 1) != 0)
      {
        if (v13 <= 1)
          v15 = 1;
        else
          v15 = v13;
        do
        {
          v9 = (_OWORD *)*((_QWORD *)v9 + 1);
          --v15;
        }
        while (v15);
      }
      if (v11 > (unint64_t)v9)
        *(_QWORD *)(a1 + 488) = v9;
      v8[a2] = v9;
      v9 = v55;
      goto LABEL_49;
    }
  }
  else
  {
    if (v11)
    {
      v16 = v8[a2];
      if (((0xBEDEFFF6EDDEuLL >> a3) & 1) != 0)
      {
        v17 = byte_240BBBC66[a3] + 1;
        v16 = v8[a2];
        do
        {
          v16 = *(_QWORD *)(v16 + 8);
          --v17;
        }
        while (v17 > 1);
      }
      if (v11 > v16)
      {
        *(_QWORD *)(a1 + 488) = v16;
        v11 = v16;
      }
      v18 = *(_DWORD *)(v16 + 4);
      v19 = byte_240BBBC36[a3] - 15;
      v20 = (v18 + byte_240BBBBBF[v19]);
      if (v20 <= 0x44 && v18 == byte_240BBBB3E[v20])
        v21 = (char *)&unk_240BBBBD8 + v20;
      else
        v21 = (char *)&unk_240BBBC1D + v19;
      v22 = *v21;
      v23 = *(_QWORD *)(a1 + 520);
      if (v23 >= 1)
      {
        for (i = 0; i != v23; ++i)
        {
          if (i != a2)
          {
            v25 = v8[i];
            v26 = !v25 || v25 == v16;
            if (!v26 && v25 != v11)
            {
              while (*(_QWORD *)(v25 + 16) >= v10)
              {
                v28 = *(_QWORD *)(v25 + 8);
                if (*(_DWORD *)(v25 + 4) == v22 && v28 == v16)
                {
                  v48 = *(_QWORD *)(a1 + 472);
                  v49 = *(_QWORD *)(a1 + 480) - 1;
                  *(_QWORD *)(a1 + 472) = v48 + 72;
                  *(_QWORD *)(a1 + 480) = v49;
                  *(_BYTE *)v48 = 0;
                  *(_QWORD *)(v48 + 8) = v9;
                  *(_DWORD *)(v48 + 4) = a3;
                  if (*(_BYTE *)(*(_QWORD *)(a1 + 512) + a2))
                  {
                    *(_DWORD *)(v48 + 16) = *(_DWORD *)(a1 + 228);
                    *(_QWORD *)(v48 + 24) = *(_QWORD *)(a1 + 232);
                    v50 = *(_OWORD *)(a1 + 256);
                    *(_OWORD *)(v48 + 32) = *(_OWORD *)(a1 + 240);
                    *(_OWORD *)(v48 + 48) = v50;
                  }
                  else
                  {
                    *(_DWORD *)(v48 + 16) = -2;
                  }
                  *(_QWORD *)(v48 + 64) = *(_QWORD *)(v25 + 24);
                  *(_QWORD *)(v25 + 24) = v48;
                  if (*(uint64_t *)(a1 + 480) <= 1)
                    sub_240B8D2BC(a1);
                  v51 = *(_QWORD *)(a1 + 504);
                  v52 = *(_QWORD *)(v51 + 8 * a2);
                  if (v52)
                    *(_QWORD *)(a1 + 496) = v52;
                  result = 0;
                  *(_QWORD *)(v51 + 8 * a2) = 0;
                  return result;
                }
                v30 = v28 == v16 || v28 == v11;
                v25 = *(_QWORD *)(v25 + 8);
                if (v30)
                  break;
              }
            }
          }
        }
      }
      v31 = a2;
      v8[v31] = v16;
      v32 = *(_QWORD *)(a1 + 472);
      v33 = *(_QWORD *)(a1 + 480) - 1;
      *(_QWORD *)(a1 + 472) = v32 + 72;
      *(_QWORD *)(a1 + 480) = v33;
      *(_BYTE *)v32 = 1;
      *(_DWORD *)(v32 + 4) = v22;
      *(_QWORD *)(v32 + 16) = v10;
      *(_BYTE *)(v32 + 1) = 0;
      *(_QWORD *)(v32 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2);
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 504) + v31 * 8) = v32;
      v34 = *(_QWORD *)(a1 + 472);
      v35 = *(_QWORD *)(a1 + 480) - 1;
      *(_QWORD *)(a1 + 472) = v34 + 72;
      *(_QWORD *)(a1 + 480) = v35;
      *(_BYTE *)v34 = 0;
      *(_QWORD *)(v34 + 8) = v9;
      *(_DWORD *)(v34 + 4) = a3;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 512) + a2))
      {
        *(_DWORD *)(v34 + 16) = *(_DWORD *)(a1 + 228);
        *(_QWORD *)(v34 + 24) = *(_QWORD *)(a1 + 232);
        v36 = *(_OWORD *)(a1 + 256);
        *(_OWORD *)(v34 + 32) = *(_OWORD *)(a1 + 240);
        *(_OWORD *)(v34 + 48) = v36;
      }
      else
      {
        *(_DWORD *)(v34 + 16) = -2;
      }
      *(_QWORD *)(v34 + 64) = *(_QWORD *)(v32 + 24);
      *(_QWORD *)(v32 + 24) = v34;
      goto LABEL_59;
    }
    v12 = a3;
    v13 = byte_240BBBC66[a3];
  }
  v37 = *(_QWORD *)(a1 + 480);
  v38 = *(_QWORD *)(a1 + 472) + 72 * -(char)v13;
  *(_QWORD *)(a1 + 472) = v38;
  *(_QWORD *)(a1 + 480) = v37 + (char)v13;
  *v8 = v38 - 72;
LABEL_49:
  result = sub_240B8D510(a3, v13, (uint64_t)v9, a1, &v54, v53, a5, a6);
  if ((_DWORD)result)
    return result;
  v40 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2) + 4);
  v41 = byte_240BBBC36[v12] - 15;
  v42 = (v40 + byte_240BBBBBF[v41]);
  if (v42 <= 0x44 && v40 == byte_240BBBB3E[v42])
    v43 = (char *)&unk_240BBBBD8 + v42;
  else
    v43 = (char *)&unk_240BBBC1D + v41;
  v44 = *v43;
  v45 = *(_QWORD *)(a1 + 472);
  v46 = *(_QWORD *)(a1 + 480) - 1;
  *(_QWORD *)(a1 + 472) = v45 + 72;
  *(_QWORD *)(a1 + 480) = v46;
  *(_BYTE *)v45 = 1;
  *(_DWORD *)(v45 + 4) = v44;
  *(_QWORD *)(v45 + 16) = v10;
  *(_BYTE *)(v45 + 1) = 1;
  *(_QWORD *)(v45 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2);
  *(_QWORD *)(v45 + 24) = v54;
  v47 = v53[1];
  *(_OWORD *)(v45 + 32) = v53[0];
  *(_OWORD *)(v45 + 48) = v47;
  *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2) = v45;
LABEL_59:
  if (*(uint64_t *)(a1 + 480) <= 1)
    sub_240B8D2BC(a1);
  return 0;
}

uint64_t sub_240B8CAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char ***a5)
{
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  unsigned int v20;
  __int16 *v21;
  __int16 v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1 + 232;
  v35 = a1 + 240;
  while (1)
  {
    v12 = *(_QWORD *)(a1 + 504);
    v13 = *(_QWORD *)(v12 + 8 * a2);
    if (!v13)
      return 0;
    v14 = *(int *)(v13 + 4);
    v15 = byte_240BBBA9C[v14];
    if (v15 != -55)
    {
      v16 = *(_DWORD *)(a1 + 228);
      if (v16 == -2)
      {
        v16 = sub_240B6E80C(v34, v35, a4);
        *(_DWORD *)(a1 + 228) = v16;
      }
      if (v16 <= 0)
      {
        v18 = 0;
        *(_DWORD *)(a1 + 228) = 0;
      }
      else if (v16 >= 0x10A)
      {
        v18 = 2;
      }
      else
      {
        if (v16 == 256)
        {
          v17 = 0;
          goto LABEL_30;
        }
        v18 = byte_240BBB992[v16];
      }
      v20 = v18 + v15;
      if ((v18 + v15) <= 0x44 && v18 == byte_240BBBB3E[v20])
      {
        v21 = &word_240BBBC96[byte_240BBBCA0[v20]];
        v17 = byte_240BBBBD8[v20];
        goto LABEL_31;
      }
      v17 = -byte_240BBBAED[v14];
LABEL_30:
      v21 = word_240BBBC96;
LABEL_31:
      *(_BYTE *)(*(_QWORD *)(a1 + 512) + a2) = 1;
      v22 = *v21;
      if (*v21)
      {
        v23 = (unsigned __int16 *)(v21 + 1);
        do
        {
          if (!*(_QWORD *)(a1 + 488))
            *(_QWORD *)(a1 + 488) = *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2);
          v25 = *(_QWORD *)(a1 + 528);
          v26 = *(_QWORD *)(a1 + 520);
          if (v25 <= v26)
          {
            if (v25 >= 0x800000000000000
              || (*(_QWORD *)(a1 + 528) = 2 * v25,
                  (v27 = malloc_type_realloc(*(void **)(a1 + 504), 16 * v25, 0x2004093837F09uLL)) == 0)
              || (*(_QWORD *)(a1 + 504) = v27,
                  (v28 = malloc_type_realloc(*(void **)(a1 + 512), *(_QWORD *)(a1 + 528), 0x100004077774924uLL)) == 0))
            {
              sub_240B8D4FC(a1);
            }
            *(_QWORD *)(a1 + 512) = v28;
            v26 = *(_QWORD *)(a1 + 520);
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * v26) = *(_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2);
          *(_BYTE *)(*(_QWORD *)(a1 + 512) + v26) = *(_BYTE *)(*(_QWORD *)(a1 + 512) + a2);
          *(_QWORD *)(a1 + 520) = v26 + 1;
          LODWORD(result) = sub_240B8C654(a1, v26, v22, 0, a3, a5);
          if ((_DWORD)result == 3)
          {
            v29 = *(_QWORD *)(a1 + 504);
            v30 = *(_QWORD *)(v29 + 8 * v26);
            if (v30)
              *(_QWORD *)(a1 + 496) = v30;
            *(_QWORD *)(v29 + 8 * v26) = 0;
          }
          else
          {
            if ((_DWORD)result)
              goto LABEL_48;
            LODWORD(result) = sub_240B8CAC8(a1, v26, a3, a4, a5);
            if ((_DWORD)result)
              goto LABEL_48;
          }
          v24 = *v23++;
          v22 = v24;
        }
        while (v24);
      }
      if (v17 <= 0)
      {
        if (v17)
        {
          LODWORD(result) = sub_240B8C654(a1, a2, -v17, 0, a3, a5);
          if (!(_DWORD)result)
            goto LABEL_5;
          if ((_DWORD)result != 3)
          {
LABEL_48:
            v10 = 1;
            v33 = result;
            goto LABEL_4;
          }
        }
        v19 = (_QWORD *)(*(_QWORD *)(a1 + 504) + 8 * a2);
        if (*v19)
          *(_QWORD *)(a1 + 496) = *v19;
        *v19 = 0;
      }
      v10 = 3;
LABEL_4:
      LODWORD(result) = v10;
      goto LABEL_5;
    }
    if (!byte_240BBBAED[v14])
    {
      result = 0;
      *(_QWORD *)(a1 + 496) = v13;
      goto LABEL_56;
    }
    result = sub_240B8C654(a1, a2, byte_240BBBAED[v14], 0, a3, a5);
    if ((_DWORD)result)
      break;
LABEL_5:
    if ((_DWORD)result)
    {
      v31 = (_DWORD)result == 1;
      result = v33;
      if (v31)
        return result;
      return 0;
    }
  }
  if ((_DWORD)result != 3)
    return result;
  v12 = *(_QWORD *)(a1 + 504);
  v32 = *(_QWORD *)(v12 + 8 * a2);
  if (v32)
    *(_QWORD *)(a1 + 496) = v32;
  result = 0;
LABEL_56:
  *(_QWORD *)(v12 + 8 * a2) = 0;
  return result;
}

void sub_240B8CE6C()
{
  __cxa_end_catch();
  JUMPOUT(0x240B8CE74);
}

void sub_240B8CE80(uint64_t a1, uint64_t a2, uint64_t a3, char *__s)
{
  if (__s)
    sub_240B8CFFC(a2, a3, __s);
  longjmp((int *)(a1 + 272), 1);
}

uint64_t sub_240B8CEB0(uint64_t a1, uint64_t a2, char ***a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 488);
  if (!v3)
    return 0;
  v7 = **(_QWORD **)(a1 + 504);
  if (v7 == v3)
  {
    result = sub_240B910E0(v7, 0, a1, a2, a3);
    if ((_DWORD)result)
      return result;
    return 0;
  }
  v8 = 0;
  v9 = v7;
  do
  {
    ++v8;
    v9 = *(_QWORD *)(v9 + 8);
  }
  while (v9 != v3);
  result = sub_240B910E0(v7, v8, a1, a2, a3);
  if (!(_DWORD)result)
    return 0;
  return result;
}

__n128 sub_240B8CF1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 520) == 1)
  {
    v1 = *(_QWORD *)(a1 + 488);
    if (v1)
    {
      v2 = **(_QWORD **)(a1 + 504);
      if (v2 == v1)
      {
        v4 = 0;
      }
      else
      {
        v3 = 0;
        do
        {
          v4 = v2;
          v2 = *(_QWORD *)(v2 + 8);
          *(_QWORD *)(v4 + 8) = v3;
          v3 = v4;
        }
        while (v2 != v1);
      }
      v5 = v1 + 72;
      v6 = *(_QWORD *)(a1 + 480)
         - 0x71C71C71C71C71C7 * ((uint64_t)(*(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464)) >> 3)
         + 0x71C71C71C71C71C7 * ((v5 - *(_QWORD *)(a1 + 464)) >> 3);
      *(_QWORD *)(a1 + 472) = v5;
      *(_QWORD *)(a1 + 480) = v6;
      *(_QWORD *)(a1 + 488) = 0;
      for (*(_QWORD *)(a1 + 496) = 0; v4; *(_QWORD *)(a1 + 480) = v10 - 1)
      {
        result = *(__n128 *)v4;
        v8 = *(_OWORD *)(v4 + 16);
        v9 = *(_OWORD *)(v4 + 48);
        *(_OWORD *)(v5 + 32) = *(_OWORD *)(v4 + 32);
        *(_OWORD *)(v5 + 48) = v9;
        *(__n128 *)v5 = result;
        *(_OWORD *)(v5 + 16) = v8;
        v4 = *(_QWORD *)(v4 + 8);
        *(_QWORD *)(*(_QWORD *)(a1 + 472) + 8) = *(_QWORD *)(a1 + 472) - 72;
        v10 = *(_QWORD *)(a1 + 480);
        **(_QWORD **)(a1 + 504) = *(_QWORD *)(a1 + 472);
        v5 = *(_QWORD *)(a1 + 472) + 72;
        *(_QWORD *)(a1 + 472) = v5;
      }
    }
  }
  return result;
}

void sub_240B8CFFC(uint64_t a1, uint64_t a2, char *__s)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  void *__dst[2];
  unint64_t v12;

  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, a1, __dst);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
}

void sub_240B8D0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240B8D0F8(int a1, void **a2)
{
  void **v2;
  void *v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;

  switch(a1)
  {
    case 3:
    case 6:
      free(*a2);
      return;
    case 21:
    case 25:
    case 30:
      v2 = (void **)*a2;
      if (!*a2)
        return;
      v3 = *v2;
      if (*v2)
      {
        v2[1] = v3;
        operator delete(v3);
      }
      break;
    case 39:
      v4 = (void **)*a2;
      if (!*a2)
        return;
      v5 = (void **)*v4;
      if (*v4)
      {
        v6 = (void **)v4[1];
        v7 = *v4;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *v4;
        }
        v4[1] = v5;
        operator delete(v7);
      }
      break;
    default:
      return;
  }
  JUMPOUT(0x24268ACF8);
}

void sub_240B8D1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  if (*(_BYTE *)(a1 + 1))
  {
    sub_240B8D0F8(byte_240BBBCE5[*(int *)(a1 + 4)], (void **)(a1 + 24));
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 24);
    if (v1)
    {
      v2 = *(int *)(v1 + 4);
      if (((0xBEDEFFF6EDDEuLL >> v2) & 1) != 0)
      {
        v3 = (_QWORD *)(v1 + 8);
        v4 = byte_240BBBC66[v2] + 1;
        do
        {
          v5 = *v3;
          sub_240B8D1F4(*v3);
          v3 = (_QWORD *)(v5 + 8);
          --v4;
        }
        while (v4 > 1);
      }
    }
  }
}

_QWORD *sub_240B8D288(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_25110C460;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void sub_240B8D2A0()
{
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B8D2B4(uint64_t a1)
{
  return sub_240B8B498(a1, *(_QWORD *)(a1 + 8), *(char ****)(a1 + 16));
}

void sub_240B8D2BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 472) - *(_QWORD *)(a1 + 464);
  if (v2 >= 719857
    || ((v3 = v2 / 72, 2 * (v2 / 72) >= 10000) ? (v4 = 10000) : (v4 = 2 * (v2 / 72)),
        (v5 = (char *)malloc_type_malloc(72 * v4, 0x10F2040C712DE25uLL)) == 0))
  {
    sub_240B8D4FC(a1);
  }
  v6 = v5;
  if (v2 >= 1)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 464);
    v9 = v3 + 1;
    do
    {
      v10 = &v5[v7];
      v11 = v8 + v7;
      *(_OWORD *)v10 = *(_OWORD *)(v8 + v7);
      v12 = *(_OWORD *)(v8 + v7 + 16);
      v13 = *(_OWORD *)(v8 + v7 + 32);
      v14 = *(_OWORD *)(v8 + v7 + 48);
      *((_QWORD *)v10 + 8) = *(_QWORD *)(v8 + v7 + 64);
      *((_OWORD *)v10 + 2) = v13;
      *((_OWORD *)v10 + 3) = v14;
      *((_OWORD *)v10 + 1) = v12;
      if (*(_BYTE *)(v8 + v7))
      {
        v15 = *(_QWORD *)(v11 + 8);
        if (v15)
        {
          v16 = (unsigned __int128)((v8 + v7 - v15) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
          *(_QWORD *)&v5[v7 + 8] = &v5[72 * (v16 >> 2) + 72 * ((unint64_t)v16 >> 63) + v7];
        }
        if (!*(_BYTE *)(v8 + v7 + 1))
        {
          v17 = *(_QWORD *)(v8 + v7 + 24);
          if (v17)
          {
            v18 = (unsigned __int128)((v8 + v7 - v17) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
            *(_QWORD *)&v5[v7 + 24] = &v5[72 * (v18 >> 2) + 72 * ((unint64_t)v18 >> 63) + v7];
          }
        }
      }
      else
      {
        v19 = *(_QWORD *)(v11 + 8);
        if (v19)
        {
          v20 = (unsigned __int128)((v8 + v7 - v19) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
          *(_QWORD *)&v5[v7 + 8] = &v5[72 * (v20 >> 2) + 72 * ((unint64_t)v20 >> 63) + v7];
        }
        v21 = *(_QWORD *)(v8 + v7 + 64);
        if (v21)
          *(_QWORD *)&v5[v7 + 64] = &v5[72 * ((v8 + v7 - v21) / -72) + v7];
      }
      --v9;
      v7 += 72;
    }
    while (v9 > 1);
  }
  v22 = *(_QWORD *)(a1 + 488);
  if (v22)
    *(_QWORD *)(a1 + 488) = &v5[v22 - *(_QWORD *)(a1 + 464)];
  v23 = *(_QWORD *)(a1 + 520);
  if (v23 >= 1)
  {
    for (i = 0; i != v23; ++i)
    {
      v25 = *(_QWORD *)(a1 + 504);
      v26 = *(_QWORD *)(v25 + 8 * i);
      if (v26)
        *(_QWORD *)(v25 + 8 * i) = &v5[v26 - *(_QWORD *)(a1 + 464)];
    }
  }
  free(*(void **)(a1 + 464));
  *(_QWORD *)(a1 + 464) = v6;
  *(_QWORD *)(a1 + 472) = &v6[72 * v3];
  *(_QWORD *)(a1 + 480) = v4 - v3;
}

void sub_240B8D4FC(uint64_t a1)
{
  longjmp((int *)(a1 + 272), 2);
}

uint64_t sub_240B8D510(int a1, int a2, uint64_t a3, uint64_t a4, char ***a5, _OWORD *a6, uint64_t a7, char ***a8)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  char **v21;
  char **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  char **v37;
  char **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char **v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  char **v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  char **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  char **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  char **v73;
  char **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  char **v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  char **v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  char **v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  char **v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  char **v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  char **v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 v197;
  uint64_t v198;
  char **v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  char **v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  __int128 v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  char **v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  __int128 v245;
  char **v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  __int128 v258;
  char **v259;
  uint64_t result;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  unint64_t v267;
  char *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  _BYTE *v276;
  unint64_t v277;
  char *v278;
  char *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  uint64_t v284;
  unint64_t v285;
  _BYTE *v286;
  char **v287;
  unint64_t v288;
  char *v289;
  char *v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _BYTE *v295;
  unint64_t v296;
  char *v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  unint64_t v301;
  _BYTE *v302;
  const char **v303;
  const char *v304;
  size_t v305;
  size_t v306;
  void *v307;
  unint64_t v308;
  char *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  _BYTE *v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  uint64_t v321;
  uint64_t v322;
  __int128 v323;
  unint64_t v324;
  char *v325;
  char *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  char **v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  __int128 v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  _BYTE *v351;
  unint64_t v352;
  char *v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  unint64_t v357;
  _BYTE *v358;
  unint64_t v359;
  char *v360;
  char *v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  _BYTE *v366;
  uint64_t v367;
  unint64_t v368;
  char *v369;
  char *v370;
  char *v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unint64_t v376;
  _BYTE *v377;
  const char *v378;
  size_t v379;
  size_t v380;
  void *v381;
  unint64_t v382;
  char *v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  _BYTE *v391;
  const char *v392;
  size_t v393;
  size_t v394;
  void *v395;
  uint64_t v396;
  uint64_t v397;
  BOOL v398;
  uint64_t v399;
  uint64_t v400;
  char *v401;
  __int128 *p_s2;
  int v403;
  int v404;
  int v405;
  int v406;
  BOOL v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  __int128 v413;
  uint64_t v414;
  uint64_t v415;
  BOOL v416;
  uint64_t v417;
  char **v418;
  char *v419;
  char *v420;
  char *v421;
  int v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  __int128 v426;
  uint64_t v427;
  char *v428;
  _QWORD *v429;
  const char *v430;
  size_t v431;
  _QWORD *v432;
  char **v433;
  char *v434;
  const char *v435;
  uint64_t v436;
  void *v437;
  size_t v438;
  size_t v439;
  uint64_t v440;
  const char *v441;
  size_t v442;
  void *v443;
  void **v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  __int128 v450;
  uint64_t v451;
  size_t v452;
  size_t v453;
  size_t v454;
  uint64_t v455;
  const char *v456;
  uint64_t v457;
  void *v458;
  size_t v459;
  size_t v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  unint64_t v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  _OWORD *v468;
  char *v469;
  uint64_t v470;
  __int128 v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  __int128 v476;
  uint64_t v477;
  char *v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  _OWORD *v483;
  char *v484;
  uint64_t v485;
  __int128 v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  __int128 v491;
  uint64_t v492;
  char *v493;
  char *v494;
  unint64_t v495;
  uint64_t v496;
  uint64_t v497;
  char *v498;
  _OWORD *v499;
  char *v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char *v507;
  _OWORD *v508;
  char *v509;
  uint64_t v510;
  __int128 v511;
  uint64_t v512;
  char *v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  char *v517;
  _OWORD *v518;
  char *v519;
  uint64_t v520;
  __int128 v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  __int128 v526;
  uint64_t v527;
  char *v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  char *v532;
  _OWORD *v533;
  char *v534;
  uint64_t v535;
  __int128 v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  __int128 v541;
  uint64_t v542;
  char *v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  char *v547;
  _OWORD *v548;
  char *v549;
  uint64_t v550;
  __int128 v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  __int128 v556;
  uint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  char *v561;
  _OWORD *v562;
  char *v563;
  uint64_t v564;
  __int128 v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t v569;
  char *v570;
  _OWORD *v571;
  char *v572;
  uint64_t v573;
  __int128 v574;
  uint64_t v575;
  char *v576;
  unint64_t v577;
  uint64_t v578;
  uint64_t v579;
  char *v580;
  _OWORD *v581;
  char *v582;
  uint64_t v583;
  __int128 v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  __int128 v589;
  uint64_t v590;
  char *v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  char *v595;
  _OWORD *v596;
  char *v597;
  uint64_t v598;
  __int128 v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  __int128 v604;
  uint64_t v605;
  void *v606;
  int v607;
  _QWORD *v608;
  size_t v609;
  _QWORD *v610;
  uint64_t v611;
  uint64_t v612;
  char *v613;
  char *v614;
  char *v615;
  char *v616;
  char *v617;
  char *v618;
  char *v619;
  void *__dst[2];
  unint64_t v621;
  __int128 __s2;
  char v623;
  int v624;
  char __str[16];
  int64_t v626;
  uint64_t v627;

  v627 = *MEMORY[0x24BDAC8D0];
  v12 = *(_QWORD *)(a4 + 488);
  v624 = 1;
  if (a2)
  {
    v13 = 1 - a2;
    if (a2 >= 1 && v12)
    {
      v14 = *(_QWORD *)(a3 + 80);
      v15 = 1 - a2;
      v16 = (_OWORD *)(a3 + 32);
      v17 = 1;
      do
      {
        *((_BYTE *)v16 - 31) = *(_BYTE *)(v14 + 1);
        if (*(_BYTE *)(v14 + 1))
          v18 = *(_QWORD *)(v14 + 24);
        else
          v18 = 0;
        --v17;
        *((_QWORD *)v16 - 1) = v18;
        v19 = *(_OWORD *)(v14 + 48);
        *v16 = *(_OWORD *)(v14 + 32);
        v16[1] = v19;
        v14 = *(_QWORD *)(v14 + 8);
        *((_QWORD *)v16 - 3) = v14;
        v16 = (_OWORD *)((char *)v16 - 72);
      }
      while (v17 > v13);
      v624 = 1 - a2;
    }
    else
    {
      v15 = 1 - a2;
      v13 = 1;
    }
    *a5 = *(char ***)(a3 + 72 * v15 + 24);
    *a6 = *(_OWORD *)(a3 - 72 * a2 + 104);
    a6[1] = *(_OWORD *)(a3 + 48);
  }
  else
  {
    *a5 = 0;
    a6[1] = *(_OWORD *)(a3 + 48);
    *a6 = *(_OWORD *)(a3 + 48);
    v13 = 1;
  }
  v20 = a6[1];
  *(_OWORD *)(a4 + 112) = *a6;
  *(_OWORD *)(a4 + 128) = v20;
  switch(a1)
  {
    case 2:
      v21 = (char **)sub_240BB84D8(0x68uLL);
      v22 = v21;
      if (v12 && v624 >= -2)
      {
        v23 = a3 + 72 * v624;
        v24 = *(_QWORD *)(v23 + 8);
        v25 = v624 + 1;
        v26 = v23 - 71;
        do
        {
          *(_BYTE *)v26 = *(_BYTE *)(v24 + 1);
          if (*(_BYTE *)(v24 + 1))
            v27 = *(_QWORD *)(v24 + 24);
          else
            v27 = 0;
          *(_QWORD *)(v26 + 23) = v27;
          v28 = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v26 + 47) = *(_OWORD *)(v24 + 48);
          *(_OWORD *)(v26 + 31) = v28;
          v24 = *(_QWORD *)(v24 + 8);
          *(_QWORD *)(v26 + 7) = v24;
          --v25;
          v26 -= 72;
        }
        while (v25 > -2);
        v624 = -3;
      }
      sub_240B92EC8(v21, *(_QWORD *)(a3 - 192), *(_QWORD *)(a3 - 48), *(_QWORD *)(a3 + 24));
      result = 0;
      *a5 = v22;
      *a8 = v22;
      return result;
    case 3:
      if (v12 && v13 >= -2)
      {
        v137 = a3 + 72 * v13;
        v138 = *(_QWORD *)(v137 + 8);
        v139 = v13 + 1;
        v140 = v137 - 71;
        do
        {
          *(_BYTE *)v140 = *(_BYTE *)(v138 + 1);
          if (*(_BYTE *)(v138 + 1))
            v141 = *(_QWORD *)(v138 + 24);
          else
            v141 = 0;
          *(_QWORD *)(v140 + 23) = v141;
          v142 = *(_OWORD *)(v138 + 32);
          *(_OWORD *)(v140 + 47) = *(_OWORD *)(v138 + 48);
          *(_OWORD *)(v140 + 31) = v142;
          v138 = *(_QWORD *)(v138 + 8);
          *(_QWORD *)(v140 + 7) = v138;
          --v139;
          v140 -= 72;
        }
        while (v139 > -2);
        v624 = -3;
      }
      v334 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v334;
      if (v12 && v624 >= -1)
      {
        v335 = a3 + 72 * v624;
        v336 = *(_QWORD *)(v335 + 8);
        v337 = v624 + 1;
        v338 = v335 - 71;
        do
        {
          *(_BYTE *)v338 = *(_BYTE *)(v336 + 1);
          if (*(_BYTE *)(v336 + 1))
            v339 = *(_QWORD *)(v336 + 24);
          else
            v339 = 0;
          *(_QWORD *)(v338 + 23) = v339;
          v340 = *(_OWORD *)(v336 + 32);
          *(_OWORD *)(v338 + 47) = *(_OWORD *)(v336 + 48);
          *(_OWORD *)(v338 + 31) = v340;
          v336 = *(_QWORD *)(v336 + 8);
          *(_QWORD *)(v338 + 7) = v336;
          --v337;
          v338 -= 72;
        }
        while ((v337 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      sub_240B91B30(v334, *(_QWORD *)(a3 - 120), *(_QWORD *)(a3 - 48), *(_QWORD *)(a3 + 24));
      goto LABEL_577;
    case 4:
      if (v12 && v13 >= -1)
      {
        v124 = a3 + 72 * v13;
        v125 = *(_QWORD *)(v124 + 8);
        v126 = v13 + 1;
        v127 = v124 - 71;
        do
        {
          *(_BYTE *)v127 = *(_BYTE *)(v125 + 1);
          if (*(_BYTE *)(v125 + 1))
            v128 = *(_QWORD *)(v125 + 24);
          else
            v128 = 0;
          *(_QWORD *)(v127 + 23) = v128;
          v129 = *(_OWORD *)(v125 + 32);
          *(_OWORD *)(v127 + 47) = *(_OWORD *)(v125 + 48);
          *(_OWORD *)(v127 + 31) = v129;
          v125 = *(_QWORD *)(v125 + 8);
          *(_QWORD *)(v127 + 7) = v125;
          --v126;
          v127 -= 72;
        }
        while ((v126 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      if (*(_QWORD *)(a3 + 24) != 9)
      {
        sub_240B90738(a3, &v624, 0, v12 == 0);
        snprintf(__str, 0x60uLL, "invalid version '%d'", *(_QWORD *)(a3 + 24));
        sub_240B90738(a3, &v624, 0, v12 == 0);
        sub_240B8CFFC(a3 + 32, a7, __str);
      }
      if (v12 && v624 >= 1)
      {
        v318 = a3 + 72 * v624;
        v319 = *(_QWORD *)(v318 + 8);
        v320 = v624 + 1;
        v321 = v318 - 71;
        do
        {
          *(_BYTE *)v321 = *(_BYTE *)(v319 + 1);
          if (*(_BYTE *)(v319 + 1))
            v322 = *(_QWORD *)(v319 + 24);
          else
            v322 = 0;
          *(_QWORD *)(v321 + 23) = v322;
          v323 = *(_OWORD *)(v319 + 32);
          *(_OWORD *)(v321 + 47) = *(_OWORD *)(v319 + 48);
          *(_OWORD *)(v321 + 31) = v323;
          v319 = *(_QWORD *)(v319 + 8);
          *(_QWORD *)(v321 + 7) = v319;
          --v320;
          v321 -= 72;
        }
        while (v320 > 1);
      }
      result = 0;
      *a5 = *(char ***)(a3 + 24);
      return result;
    case 5:
    case 9:
    case 12:
    case 16:
    case 19:
    case 32:
    case 37:
    case 40:
    case 46:
      v259 = (char **)operator new();
      result = 0;
      *v259 = 0;
      v259[1] = 0;
      v259[2] = 0;
      *a5 = v259;
      return result;
    case 6:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        v85 = 72 * v13;
        v86 = *(_QWORD *)(a3 + v85 + 8);
        do
        {
          v89 = a3 + v85;
          *(_BYTE *)(a3 + v85 - 71) = *(_BYTE *)(v86 + 1);
          if (*(_BYTE *)(v86 + 1))
            v87 = *(_QWORD *)(v86 + 24);
          else
            v87 = 0;
          *(_QWORD *)(v89 - 48) = v87;
          v88 = *(_OWORD *)(v86 + 32);
          *(_OWORD *)(v89 - 24) = *(_OWORD *)(v86 + 48);
          *(_OWORD *)(v89 - 40) = v88;
          v86 = *(_QWORD *)(v86 + 8);
          *(_QWORD *)(v89 - 64) = v86;
          v85 -= 72;
        }
        while (v85 != -72);
        v624 = -1;
      }
      v287 = *a5;
      v289 = (*a5)[1];
      v296 = (unint64_t)(*a5)[2];
      if ((unint64_t)v289 < v296)
        goto LABEL_393;
      v297 = *v287;
      v298 = v289 - *v287;
      v299 = (v298 >> 3) + 1;
      if (v299 >> 61)
        goto LABEL_749;
      v300 = v296 - (_QWORD)v297;
      if (v300 >> 2 > v299)
        v299 = v300 >> 2;
      if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF8)
        v301 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v301 = v299;
      if (!v301)
      {
        v302 = 0;
        goto LABEL_624;
      }
      if (!(v301 >> 61))
      {
        v302 = operator new(8 * v301);
LABEL_624:
        v493 = &v302[8 * (v298 >> 3)];
        v494 = &v302[8 * v301];
        *(_QWORD *)v493 = *(_QWORD *)(a3 + 24);
        v360 = v493 + 8;
        if (v289 == v297)
          goto LABEL_703;
        v504 = v289 - v297 - 8;
        if (v504 < 0x58)
          goto LABEL_767;
        if ((unint64_t)(v289 - v302 - v298) < 0x20)
          goto LABEL_767;
        v505 = (v504 >> 3) + 1;
        v506 = 8 * (v505 & 0x3FFFFFFFFFFFFFFCLL);
        v507 = &v289[-v506];
        v493 -= v506;
        v508 = &v302[v298 - 16];
        v509 = v289 - 16;
        v510 = v505 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v511 = *(_OWORD *)v509;
          *(v508 - 1) = *((_OWORD *)v509 - 1);
          *v508 = v511;
          v508 -= 2;
          v509 -= 32;
          v510 -= 4;
        }
        while (v510);
        v289 = v507;
        if (v505 != (v505 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_767:
          do
          {
            v512 = *((_QWORD *)v289 - 1);
            v289 -= 8;
            *((_QWORD *)v493 - 1) = v512;
            v493 -= 8;
          }
          while (v289 != v297);
        }
        goto LABEL_702;
      }
      goto LABEL_748;
    case 7:
      v90 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v90;
      if (v12 && v624 >= -1)
      {
        v164 = a3 + 72 * v624;
        v165 = *(_QWORD *)(v164 + 8);
        v166 = v624 + 1;
        v167 = v164 - 71;
        do
        {
          *(_BYTE *)v167 = *(_BYTE *)(v165 + 1);
          if (*(_BYTE *)(v165 + 1))
            v168 = *(_QWORD *)(v165 + 24);
          else
            v168 = 0;
          *(_QWORD *)(v167 + 23) = v168;
          v169 = *(_OWORD *)(v165 + 32);
          *(_OWORD *)(v167 + 47) = *(_OWORD *)(v165 + 48);
          *(_OWORD *)(v167 + 31) = v169;
          v165 = *(_QWORD *)(v165 + 8);
          *(_QWORD *)(v167 + 7) = v165;
          --v166;
          v167 -= 72;
        }
        while ((v166 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      goto LABEL_570;
    case 8:
      v182 = (char *)sub_240BB84D8(0x68uLL);
      v30 = v182;
      if (v12 && v624 >= -1)
      {
        v183 = a3 + 72 * v624;
        v184 = *(_QWORD *)(v183 + 8);
        v185 = v624 + 1;
        v186 = v183 - 71;
        do
        {
          *(_BYTE *)v186 = *(_BYTE *)(v184 + 1);
          if (*(_BYTE *)(v184 + 1))
            v187 = *(_QWORD *)(v184 + 24);
          else
            v187 = 0;
          *(_QWORD *)(v186 + 23) = v187;
          v188 = *(_OWORD *)(v184 + 32);
          *(_OWORD *)(v186 + 47) = *(_OWORD *)(v184 + 48);
          *(_OWORD *)(v186 + 31) = v188;
          v184 = *(_QWORD *)(v184 + 8);
          *(_QWORD *)(v186 + 7) = v184;
          --v185;
          v186 -= 72;
        }
        while ((v185 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      v435 = *(const char **)(a3 - 120);
      v436 = *(_QWORD *)(a3 + 24);
      *((_QWORD *)v182 + 5) = 0;
      *(_OWORD *)(v182 + 24) = 0u;
      *(_OWORD *)(v182 + 8) = 0u;
      *(_QWORD *)v182 = off_25110C608;
      v437 = v182 + 48;
      v454 = strlen(v435);
      if (v454 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v439 = v454;
      if (v454 < 0x17)
        goto LABEL_552;
      v440 = (v454 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v454 | 7) != 0x17)
        v440 = v454 | 7;
      goto LABEL_556;
    case 10:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        v194 = 72 * v13;
        v195 = *(_QWORD *)(a3 + v194 + 8);
        do
        {
          v198 = a3 + v194;
          *(_BYTE *)(a3 + v194 - 71) = *(_BYTE *)(v195 + 1);
          if (*(_BYTE *)(v195 + 1))
            v196 = *(_QWORD *)(v195 + 24);
          else
            v196 = 0;
          *(_QWORD *)(v198 - 48) = v196;
          v197 = *(_OWORD *)(v195 + 32);
          *(_OWORD *)(v198 - 24) = *(_OWORD *)(v195 + 48);
          *(_OWORD *)(v198 - 40) = v197;
          v195 = *(_QWORD *)(v195 + 8);
          *(_QWORD *)(v198 - 64) = v195;
          v194 -= 72;
        }
        while (v194 != -72);
        v624 = -1;
      }
      v287 = *a5;
      v289 = (*a5)[1];
      v359 = (unint64_t)(*a5)[2];
      if ((unint64_t)v289 < v359)
        goto LABEL_393;
      v361 = *v287;
      v362 = v289 - *v287;
      v363 = (v362 >> 3) + 1;
      if (v363 >> 61)
        goto LABEL_750;
      v364 = v359 - (_QWORD)v361;
      if (v364 >> 2 > v363)
        v363 = v364 >> 2;
      if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFF8)
        v365 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v365 = v363;
      if (!v365)
      {
        v366 = 0;
        goto LABEL_695;
      }
      if (!(v365 >> 61))
      {
        v366 = operator new(8 * v365);
LABEL_695:
        v493 = &v366[8 * (v362 >> 3)];
        v494 = &v366[8 * v365];
        *(_QWORD *)v493 = *(_QWORD *)(a3 + 24);
        v360 = v493 + 8;
        if (v289 == v361)
          goto LABEL_703;
        v567 = v289 - v361 - 8;
        if (v567 < 0x58)
          goto LABEL_768;
        if ((unint64_t)(v289 - v366 - v362) < 0x20)
          goto LABEL_768;
        v568 = (v567 >> 3) + 1;
        v569 = 8 * (v568 & 0x3FFFFFFFFFFFFFFCLL);
        v570 = &v289[-v569];
        v493 -= v569;
        v571 = &v366[v362 - 16];
        v572 = v289 - 16;
        v573 = v568 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v574 = *(_OWORD *)v572;
          *(v571 - 1) = *((_OWORD *)v572 - 1);
          *v571 = v574;
          v571 -= 2;
          v572 -= 32;
          v573 -= 4;
        }
        while (v573);
        v289 = v570;
        if (v568 != (v568 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_768:
          do
          {
            v575 = *((_QWORD *)v289 - 1);
            v289 -= 8;
            *((_QWORD *)v493 - 1) = v575;
            v493 -= 8;
          }
          while (v289 != v361);
        }
LABEL_702:
        v289 = *v287;
LABEL_703:
        *v287 = v493;
        v287[1] = v360;
        v287[2] = v494;
        if (v289)
          operator delete(v289);
        goto LABEL_705;
      }
      goto LABEL_748;
    case 11:
      if (v12 && v13 >= -3)
      {
        v104 = a3 + 72 * v13;
        v105 = *(_QWORD *)(v104 + 8);
        v106 = v13 + 1;
        v107 = v104 - 71;
        do
        {
          *(_BYTE *)v107 = *(_BYTE *)(v105 + 1);
          if (*(_BYTE *)(v105 + 1))
            v108 = *(_QWORD *)(v105 + 24);
          else
            v108 = 0;
          *(_QWORD *)(v107 + 23) = v108;
          v109 = *(_OWORD *)(v105 + 32);
          *(_OWORD *)(v107 + 47) = *(_OWORD *)(v105 + 48);
          *(_OWORD *)(v107 + 31) = v109;
          v105 = *(_QWORD *)(v105 + 8);
          *(_QWORD *)(v107 + 7) = v105;
          --v106;
          v107 -= 72;
        }
        while (v106 > -3);
        v624 = -4;
      }
      v303 = (const char **)(a3 - 264);
      v304 = *(const char **)(a3 - 264);
      v305 = strlen(v304);
      if (v305 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v306 = v305;
      if (v305 >= 0x17)
      {
        v396 = (v305 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v305 | 7) != 0x17)
          v396 = v305 | 7;
        v397 = v396 + 1;
        v307 = operator new(v396 + 1);
        *(_QWORD *)&__str[8] = v306;
        v626 = v397 | 0x8000000000000000;
        *(_QWORD *)__str = v307;
      }
      else
      {
        HIBYTE(v626) = v305;
        v307 = __str;
        if (!v305)
          goto LABEL_441;
      }
      memmove(v307, v304, v306);
LABEL_441:
      v398 = 0;
      *((_BYTE *)v307 + v306) = 0;
      v623 = 6;
      strcpy((char *)&__s2, "region");
      if (v626 >= 0)
        v399 = HIBYTE(v626);
      else
        v399 = *(_QWORD *)&__str[8];
      if (v399 != 6)
        goto LABEL_453;
      if (v626 < 0)
      {
        v606 = *(void **)__str;
        v607 = memcmp(*(const void **)__str, &__s2, *(size_t *)&__str[8]);
        operator delete(v606);
        if (!v607)
        {
LABEL_456:
          v38 = (char **)sub_240BB84D8(0x60uLL);
          sub_240B90738(a3, &v624, 4294967293, v12 == 0);
          v409 = *(char **)(a3 - 192);
          sub_240B90738(a3, &v624, 0xFFFFFFFFLL, v12 == 0);
          sub_240B91E70((int)v38, v409);
LABEL_577:
          result = 0;
          *a5 = v38;
          return result;
        }
      }
      else
      {
        if (!HIBYTE(v626))
          goto LABEL_456;
        v400 = HIBYTE(v626) - 1;
        v401 = __str;
        p_s2 = &__s2;
        do
        {
          v404 = *v401++;
          v403 = v404;
          v406 = *(unsigned __int8 *)p_s2;
          p_s2 = (__int128 *)((char *)p_s2 + 1);
          v405 = v406;
          v408 = v400-- != 0;
          v398 = v403 == v405;
        }
        while (v403 == v405 && v408);
LABEL_453:
        if (v626 < 0)
          operator delete(*(void **)__str);
        if (v398)
          goto LABEL_456;
      }
      sub_240B907B0((uint64_t)__str);
      v608 = sub_240B8AA18(__str, (uint64_t)"Expecting 'region', not '", 25);
      sub_240B90738(a3, &v624, 4294967292, v12 == 0);
      v609 = strlen(*v303);
      v610 = sub_240B8AA18(v608, (uint64_t)*v303, v609);
      sub_240B8AA18(v610, (uint64_t)"'.", 2);
      v433 = (char **)sub_240BB84D8(0x48uLL);
      sub_240B9089C(__str, &__s2);
      sub_240B90974((uint64_t)v433, &__s2);
      goto LABEL_745;
    case 13:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        v80 = 72 * v13;
        v81 = *(_QWORD *)(a3 + v80 + 8);
        do
        {
          v84 = a3 + v80;
          *(_BYTE *)(a3 + v80 - 71) = *(_BYTE *)(v81 + 1);
          if (*(_BYTE *)(v81 + 1))
            v82 = *(_QWORD *)(v81 + 24);
          else
            v82 = 0;
          *(_QWORD *)(v84 - 48) = v82;
          v83 = *(_OWORD *)(v81 + 32);
          *(_OWORD *)(v84 - 24) = *(_OWORD *)(v81 + 48);
          *(_OWORD *)(v84 - 40) = v83;
          v81 = *(_QWORD *)(v81 + 8);
          *(_QWORD *)(v84 - 64) = v81;
          v80 -= 72;
        }
        while (v80 != -72);
        v624 = -1;
      }
      v287 = *a5;
      v289 = (*a5)[1];
      v288 = (unint64_t)(*a5)[2];
      if ((unint64_t)v289 < v288)
        goto LABEL_393;
      v290 = *v287;
      v291 = v289 - *v287;
      v292 = (v291 >> 3) + 1;
      if (v292 >> 61)
        goto LABEL_749;
      v293 = v288 - (_QWORD)v290;
      if (v293 >> 2 > v292)
        v292 = v293 >> 2;
      if ((unint64_t)v293 >= 0x7FFFFFFFFFFFFFF8)
        v294 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v294 = v292;
      if (!v294)
      {
        v295 = 0;
        goto LABEL_615;
      }
      if (!(v294 >> 61))
      {
        v295 = operator new(8 * v294);
LABEL_615:
        v493 = &v295[8 * (v291 >> 3)];
        v494 = &v295[8 * v294];
        *(_QWORD *)v493 = *(_QWORD *)(a3 + 24);
        v360 = v493 + 8;
        if (v289 == v290)
          goto LABEL_703;
        v495 = v289 - v290 - 8;
        if (v495 < 0x58)
          goto LABEL_769;
        if ((unint64_t)(v289 - v295 - v291) < 0x20)
          goto LABEL_769;
        v496 = (v495 >> 3) + 1;
        v497 = 8 * (v496 & 0x3FFFFFFFFFFFFFFCLL);
        v498 = &v289[-v497];
        v493 -= v497;
        v499 = &v295[v291 - 16];
        v500 = v289 - 16;
        v501 = v496 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v502 = *(_OWORD *)v500;
          *(v499 - 1) = *((_OWORD *)v500 - 1);
          *v499 = v502;
          v499 -= 2;
          v500 -= 32;
          v501 -= 4;
        }
        while (v501);
        v289 = v498;
        if (v496 != (v496 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_769:
          do
          {
            v503 = *((_QWORD *)v289 - 1);
            v289 -= 8;
            *((_QWORD *)v493 - 1) = v503;
            v493 -= 8;
          }
          while (v289 != v290);
        }
        goto LABEL_702;
      }
      goto LABEL_748;
    case 14:
      v97 = (char *)sub_240BB84D8(0x68uLL);
      v30 = v97;
      if (v12 && v624 >= -1)
      {
        v98 = a3 + 72 * v624;
        v99 = *(_QWORD *)(v98 + 8);
        v100 = v624 + 1;
        v101 = v98 - 71;
        do
        {
          *(_BYTE *)v101 = *(_BYTE *)(v99 + 1);
          if (*(_BYTE *)(v99 + 1))
            v102 = *(_QWORD *)(v99 + 24);
          else
            v102 = 0;
          *(_QWORD *)(v101 + 23) = v102;
          v103 = *(_OWORD *)(v99 + 32);
          *(_OWORD *)(v101 + 47) = *(_OWORD *)(v99 + 48);
          *(_OWORD *)(v101 + 31) = v103;
          v99 = *(_QWORD *)(v99 + 8);
          *(_QWORD *)(v101 + 7) = v99;
          --v100;
          v101 -= 72;
        }
        while ((v100 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      v435 = *(const char **)(a3 - 120);
      v436 = *(_QWORD *)(a3 + 24);
      *((_QWORD *)v97 + 5) = 0;
      *(_OWORD *)(v97 + 24) = 0u;
      *(_OWORD *)(v97 + 8) = 0u;
      *(_QWORD *)v97 = off_25110C608;
      v437 = v97 + 48;
      v452 = strlen(v435);
      if (v452 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v439 = v452;
      if (v452 < 0x17)
        goto LABEL_552;
      v440 = (v452 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v452 | 7) != 0x17)
        v440 = v452 | 7;
      goto LABEL_556;
    case 15:
      v90 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v90;
      if (v12 && v624 >= -1)
      {
        v176 = a3 + 72 * v624;
        v177 = *(_QWORD *)(v176 + 8);
        v178 = v624 + 1;
        v179 = v176 - 71;
        do
        {
          *(_BYTE *)v179 = *(_BYTE *)(v177 + 1);
          if (*(_BYTE *)(v177 + 1))
            v180 = *(_QWORD *)(v177 + 24);
          else
            v180 = 0;
          *(_QWORD *)(v179 + 23) = v180;
          v181 = *(_OWORD *)(v177 + 32);
          *(_OWORD *)(v179 + 47) = *(_OWORD *)(v177 + 48);
          *(_OWORD *)(v179 + 31) = v181;
          v177 = *(_QWORD *)(v177 + 8);
          *(_QWORD *)(v179 + 7) = v177;
          --v178;
          v179 -= 72;
        }
        while ((v178 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      goto LABEL_570;
    case 17:
      v130 = *a5;
      if (v12 && v13 >= 1)
      {
        v131 = a3 + 72 * v13;
        v132 = *(_QWORD *)(v131 + 8);
        v133 = v13 + 1;
        v134 = v131 - 71;
        do
        {
          *(_BYTE *)v134 = *(_BYTE *)(v132 + 1);
          if (*(_BYTE *)(v132 + 1))
            v135 = *(_QWORD *)(v132 + 24);
          else
            v135 = 0;
          *(_QWORD *)(v134 + 23) = v135;
          v136 = *(_OWORD *)(v132 + 32);
          *(_OWORD *)(v134 + 47) = *(_OWORD *)(v132 + 48);
          *(_OWORD *)(v134 + 31) = v136;
          v132 = *(_QWORD *)(v132 + 8);
          *(_QWORD *)(v134 + 7) = v132;
          --v133;
          v134 -= 72;
        }
        while (v133 > 1);
        v13 = 0;
        v624 = 0;
      }
      v325 = v130[1];
      v324 = (unint64_t)v130[2];
      if ((unint64_t)v325 < v324)
      {
        *(_QWORD *)v325 = *(_QWORD *)(a3 + 24);
        v326 = v325 + 8;
LABEL_660:
        result = 0;
        v130[1] = v326;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          v538 = 72 * v13;
          v539 = *(_QWORD *)(a3 + v538 + 8);
          do
          {
            v542 = a3 + v538;
            *(_BYTE *)(a3 + v538 - 71) = *(_BYTE *)(v539 + 1);
            if (*(_BYTE *)(v539 + 1))
              v540 = *(_QWORD *)(v539 + 24);
            else
              v540 = 0;
            result = 0;
            *(_QWORD *)(v542 - 48) = v540;
            v541 = *(_OWORD *)(v539 + 32);
            *(_OWORD *)(v542 - 24) = *(_OWORD *)(v539 + 48);
            *(_OWORD *)(v542 - 40) = v541;
            v539 = *(_QWORD *)(v539 + 8);
            *(_QWORD *)(v542 - 64) = v539;
            v538 -= 72;
          }
          while (v538 != -72);
        }
        return result;
      }
      v327 = *v130;
      v328 = v325 - *v130;
      v329 = v328 >> 3;
      v330 = (v328 >> 3) + 1;
      if (v330 >> 61)
        goto LABEL_750;
      v331 = v324 - (_QWORD)v327;
      if (v331 >> 2 > v330)
        v330 = v331 >> 2;
      if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFF8)
        v332 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v332 = v330;
      if (!v332)
      {
        v333 = 0;
        goto LABEL_650;
      }
      v616 = (char *)(v325 - *v130);
      if (!(v332 >> 61))
      {
        v333 = operator new(8 * v332);
        v328 = (uint64_t)v616;
LABEL_650:
        v528 = &v333[8 * v329];
        *(_QWORD *)v528 = *(_QWORD *)(a3 + 24);
        v326 = v528 + 8;
        if (v325 != v327)
        {
          v529 = v325 - v327 - 8;
          if (v529 < 0x58)
            goto LABEL_770;
          if ((unint64_t)(v325 - &v333[v328]) < 0x20)
            goto LABEL_770;
          v530 = (v529 >> 3) + 1;
          v531 = 8 * (v530 & 0x3FFFFFFFFFFFFFFCLL);
          v532 = &v325[-v531];
          v528 -= v531;
          v533 = &v333[v328 - 16];
          v534 = v325 - 16;
          v535 = v530 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v536 = *(_OWORD *)v534;
            *(v533 - 1) = *((_OWORD *)v534 - 1);
            *v533 = v536;
            v533 -= 2;
            v534 -= 32;
            v535 -= 4;
          }
          while (v535);
          v325 = v532;
          if (v530 != (v530 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_770:
            do
            {
              v537 = *((_QWORD *)v325 - 1);
              v325 -= 8;
              *((_QWORD *)v528 - 1) = v537;
              v528 -= 8;
            }
            while (v325 != v327);
          }
          v325 = *v130;
        }
        *v130 = v528;
        v130[1] = v326;
        v130[2] = &v333[8 * v332];
        if (v325)
          operator delete(v325);
        goto LABEL_660;
      }
      goto LABEL_748;
    case 18:
      v66 = (char **)sub_240BB84D8(0x50uLL);
      if (v12 && v624 >= -2)
      {
        v67 = a3 + 72 * v624;
        v68 = *(_QWORD *)(v67 + 8);
        v69 = v624 + 1;
        v70 = v67 - 71;
        do
        {
          *(_BYTE *)v70 = *(_BYTE *)(v68 + 1);
          if (*(_BYTE *)(v68 + 1))
            v71 = *(_QWORD *)(v68 + 24);
          else
            v71 = 0;
          *(_QWORD *)(v70 + 23) = v71;
          v72 = *(_OWORD *)(v68 + 32);
          *(_OWORD *)(v70 + 47) = *(_OWORD *)(v68 + 48);
          *(_OWORD *)(v70 + 31) = v72;
          v68 = *(_QWORD *)(v68 + 8);
          *(_QWORD *)(v70 + 7) = v68;
          --v69;
          v70 -= 72;
        }
        while (v69 > -2);
        v624 = -3;
      }
      v441 = *(const char **)(a3 - 192);
      v442 = strlen(v441);
      if (v442 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v443 = (void *)v442;
      if (v442 >= 0x17)
      {
        v445 = (v442 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v442 | 7) != 0x17)
          v445 = v442 | 7;
        v446 = v445 + 1;
        v444 = (void **)operator new(v445 + 1);
        __dst[1] = v443;
        v621 = v446 | 0x8000000000000000;
        __dst[0] = v444;
      }
      else
      {
        HIBYTE(v621) = v442;
        v444 = __dst;
        if (!v442)
          goto LABEL_512;
      }
      memmove(v444, v441, (size_t)v443);
LABEL_512:
      *((_BYTE *)v443 + (_QWORD)v444) = 0;
      if (v12 && (v624 & 0x80000000) == 0)
      {
        v447 = 72 * v624;
        v448 = *(_QWORD *)(a3 + v447 + 8);
        do
        {
          v451 = a3 + v447;
          *(_BYTE *)(a3 + v447 - 71) = *(_BYTE *)(v448 + 1);
          if (*(_BYTE *)(v448 + 1))
            v449 = *(_QWORD *)(v448 + 24);
          else
            v449 = 0;
          *(_QWORD *)(v451 - 48) = v449;
          v450 = *(_OWORD *)(v448 + 32);
          *(_OWORD *)(v451 - 24) = *(_OWORD *)(v448 + 48);
          *(_OWORD *)(v451 - 40) = v450;
          v448 = *(_QWORD *)(v448 + 8);
          *(_QWORD *)(v451 - 64) = v448;
          v447 -= 72;
        }
        while (v447 != -72);
        v624 = -1;
      }
      sub_240B92258(v66, __dst, *(_QWORD *)(a3 - 48));
      *a5 = v66;
      if (SHIBYTE(v621) < 0)
        operator delete(__dst[0]);
      return 0;
    case 20:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        v189 = 72 * v13;
        v190 = *(_QWORD *)(a3 + v189 + 8);
        do
        {
          v193 = a3 + v189;
          *(_BYTE *)(a3 + v189 - 71) = *(_BYTE *)(v190 + 1);
          if (*(_BYTE *)(v190 + 1))
            v191 = *(_QWORD *)(v190 + 24);
          else
            v191 = 0;
          *(_QWORD *)(v193 - 48) = v191;
          v192 = *(_OWORD *)(v190 + 32);
          *(_OWORD *)(v193 - 24) = *(_OWORD *)(v190 + 48);
          *(_OWORD *)(v193 - 40) = v192;
          v190 = *(_QWORD *)(v190 + 8);
          *(_QWORD *)(v193 - 64) = v190;
          v189 -= 72;
        }
        while (v189 != -72);
        v624 = -1;
      }
      v287 = *(char ***)(a3 - 48);
      v289 = v287[1];
      v352 = (unint64_t)v287[2];
      if ((unint64_t)v289 < v352)
      {
LABEL_393:
        *(_QWORD *)v289 = *(_QWORD *)(a3 + 24);
        v360 = v289 + 8;
LABEL_705:
        result = 0;
        v287[1] = v360;
        return result;
      }
      v353 = *v287;
      v354 = v289 - *v287;
      v355 = (v354 >> 3) + 1;
      if (v355 >> 61)
        goto LABEL_749;
      v356 = v352 - (_QWORD)v353;
      if (v356 >> 2 > v355)
        v355 = v356 >> 2;
      if ((unint64_t)v356 >= 0x7FFFFFFFFFFFFFF8)
        v357 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v357 = v355;
      if (!v357)
      {
        v358 = 0;
        goto LABEL_686;
      }
      if (!(v357 >> 61))
      {
        v358 = operator new(8 * v357);
LABEL_686:
        v493 = &v358[8 * (v354 >> 3)];
        v494 = &v358[8 * v357];
        *(_QWORD *)v493 = *(_QWORD *)(a3 + 24);
        v360 = v493 + 8;
        if (v289 == v353)
          goto LABEL_703;
        v558 = v289 - v353 - 8;
        if (v558 < 0x58)
          goto LABEL_771;
        if ((unint64_t)(v289 - v358 - v354) < 0x20)
          goto LABEL_771;
        v559 = (v558 >> 3) + 1;
        v560 = 8 * (v559 & 0x3FFFFFFFFFFFFFFCLL);
        v561 = &v289[-v560];
        v493 -= v560;
        v562 = &v358[v354 - 16];
        v563 = v289 - 16;
        v564 = v559 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v565 = *(_OWORD *)v563;
          *(v562 - 1) = *((_OWORD *)v563 - 1);
          *v562 = v565;
          v562 -= 2;
          v563 -= 32;
          v564 -= 4;
        }
        while (v564);
        v289 = v561;
        if (v559 != (v559 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_771:
          do
          {
            v566 = *((_QWORD *)v289 - 1);
            v289 -= 8;
            *((_QWORD *)v493 - 1) = v566;
            v493 -= 8;
          }
          while (v289 != v353);
        }
        goto LABEL_702;
      }
      goto LABEL_748;
    case 21:
      v90 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v90;
      if (v12 && v624 >= -1)
      {
        v228 = a3 + 72 * v624;
        v229 = *(_QWORD *)(v228 + 8);
        v230 = v624 + 1;
        v231 = v228 - 71;
        do
        {
          *(_BYTE *)v231 = *(_BYTE *)(v229 + 1);
          if (*(_BYTE *)(v229 + 1))
            v232 = *(_QWORD *)(v229 + 24);
          else
            v232 = 0;
          *(_QWORD *)(v231 + 23) = v232;
          v233 = *(_OWORD *)(v229 + 32);
          *(_OWORD *)(v231 + 47) = *(_OWORD *)(v229 + 48);
          *(_OWORD *)(v231 + 31) = v233;
          v229 = *(_QWORD *)(v229 + 8);
          *(_QWORD *)(v231 + 7) = v229;
          --v230;
          v231 -= 72;
        }
        while ((v230 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      goto LABEL_570;
    case 22:
      v157 = (char *)sub_240BB84D8(0x68uLL);
      v30 = v157;
      if (v12 && v624 >= -1)
      {
        v158 = a3 + 72 * v624;
        v159 = *(_QWORD *)(v158 + 8);
        v160 = v624 + 1;
        v161 = v158 - 71;
        do
        {
          *(_BYTE *)v161 = *(_BYTE *)(v159 + 1);
          if (*(_BYTE *)(v159 + 1))
            v162 = *(_QWORD *)(v159 + 24);
          else
            v162 = 0;
          *(_QWORD *)(v161 + 23) = v162;
          v163 = *(_OWORD *)(v159 + 32);
          *(_OWORD *)(v161 + 47) = *(_OWORD *)(v159 + 48);
          *(_OWORD *)(v161 + 31) = v163;
          v159 = *(_QWORD *)(v159 + 8);
          *(_QWORD *)(v161 + 7) = v159;
          --v160;
          v161 -= 72;
        }
        while ((v160 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      v435 = *(const char **)(a3 - 120);
      v436 = *(_QWORD *)(a3 + 24);
      *((_QWORD *)v157 + 5) = 0;
      *(_OWORD *)(v157 + 24) = 0u;
      *(_OWORD *)(v157 + 8) = 0u;
      *(_QWORD *)v157 = off_25110C608;
      v437 = v157 + 48;
      v453 = strlen(v435);
      if (v453 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v439 = v453;
      if (v453 < 0x17)
        goto LABEL_552;
      v440 = (v453 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v453 | 7) != 0x17)
        v440 = v453 | 7;
      goto LABEL_556;
    case 23:
      v37 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v37;
      if (v12 && v624 >= -3)
      {
        v170 = a3 + 72 * v624;
        v171 = *(_QWORD *)(v170 + 8);
        v172 = v624 + 1;
        v173 = v170 - 71;
        do
        {
          *(_BYTE *)v173 = *(_BYTE *)(v171 + 1);
          if (*(_BYTE *)(v171 + 1))
            v174 = *(_QWORD *)(v171 + 24);
          else
            v174 = 0;
          *(_QWORD *)(v173 + 23) = v174;
          v175 = *(_OWORD *)(v171 + 32);
          *(_OWORD *)(v173 + 47) = *(_OWORD *)(v171 + 48);
          *(_OWORD *)(v173 + 31) = v175;
          v171 = *(_QWORD *)(v171 + 8);
          *(_QWORD *)(v173 + 7) = v171;
          --v172;
          v173 -= 72;
        }
        while (v172 > -3);
        v624 = -4;
      }
      goto LABEL_572;
    case 24:
      v213 = (char *)sub_240BB84D8(0x68uLL);
      v214 = v213;
      if (v12 && v624 >= -1)
      {
        v215 = a3 + 72 * v624;
        v216 = *(_QWORD *)(v215 + 8);
        v217 = v624 + 1;
        v218 = v215 - 71;
        do
        {
          *(_BYTE *)v218 = *(_BYTE *)(v216 + 1);
          if (*(_BYTE *)(v216 + 1))
            v219 = *(_QWORD *)(v216 + 24);
          else
            v219 = 0;
          *(_QWORD *)(v218 + 23) = v219;
          v220 = *(_OWORD *)(v216 + 32);
          *(_OWORD *)(v218 + 47) = *(_OWORD *)(v216 + 48);
          *(_OWORD *)(v218 + 31) = v220;
          v216 = *(_QWORD *)(v216 + 8);
          *(_QWORD *)(v218 + 7) = v216;
          --v217;
          v218 -= 72;
        }
        while ((v217 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      v456 = *(const char **)(a3 - 120);
      v457 = *(_QWORD *)(a3 + 24);
      *((_QWORD *)v213 + 5) = 0;
      *(_OWORD *)(v213 + 24) = 0u;
      *(_OWORD *)(v213 + 8) = 0u;
      *(_QWORD *)v213 = off_25110C608;
      v458 = v213 + 48;
      v459 = strlen(v456);
      if (v459 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v460 = v459;
      if (v459 >= 0x17)
      {
        v461 = (v459 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v459 | 7) != 0x17)
          v461 = v459 | 7;
        v462 = v461 + 1;
        v458 = operator new(v461 + 1);
        *((_QWORD *)v214 + 7) = v460;
        *((_QWORD *)v214 + 8) = v462 | 0x8000000000000000;
        *((_QWORD *)v214 + 6) = v458;
      }
      else
      {
        v214[71] = v459;
        if (!v459)
          goto LABEL_568;
      }
      memmove(v458, v456, v460);
LABEL_568:
      result = 0;
      *((_BYTE *)v458 + v460) = 0;
      *((_QWORD *)v214 + 9) = v457;
      *((_DWORD *)v214 + 24) = 1;
      *a5 = (char **)v214;
      return result;
    case 25:
      v150 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v150;
      if (v12 && v624 >= -3)
      {
        v240 = a3 + 72 * v624;
        v241 = *(_QWORD *)(v240 + 8);
        v242 = v624 + 1;
        v243 = v240 - 71;
        do
        {
          *(_BYTE *)v243 = *(_BYTE *)(v241 + 1);
          if (*(_BYTE *)(v241 + 1))
            v244 = *(_QWORD *)(v241 + 24);
          else
            v244 = 0;
          *(_QWORD *)(v243 + 23) = v244;
          v245 = *(_OWORD *)(v241 + 32);
          *(_OWORD *)(v243 + 47) = *(_OWORD *)(v241 + 48);
          *(_OWORD *)(v243 + 31) = v245;
          v241 = *(_QWORD *)(v241 + 8);
          *(_QWORD *)(v243 + 7) = v241;
          --v242;
          v243 -= 72;
        }
        while (v242 > -3);
        v624 = -4;
      }
      goto LABEL_536;
    case 26:
      v117 = (char **)operator new();
      *v117 = 0;
      v117[1] = 0;
      v117[2] = 0;
      *a5 = v117;
      if (v12 && v624 >= 1)
      {
        v118 = a3 + 72 * v624;
        v119 = *(_QWORD *)(v118 + 8);
        v120 = v624 + 1;
        v121 = v118 - 71;
        do
        {
          *(_BYTE *)v121 = *(_BYTE *)(v119 + 1);
          if (*(_BYTE *)(v119 + 1))
            v122 = *(_QWORD *)(v119 + 24);
          else
            v122 = 0;
          *(_QWORD *)(v121 + 23) = v122;
          v123 = *(_OWORD *)(v119 + 32);
          *(_OWORD *)(v121 + 47) = *(_OWORD *)(v119 + 48);
          *(_OWORD *)(v121 + 31) = v123;
          v119 = *(_QWORD *)(v119 + 8);
          *(_QWORD *)(v121 + 7) = v119;
          --v120;
          v121 -= 72;
        }
        while (v120 > 1);
        v624 = 0;
      }
      goto LABEL_492;
    case 27:
      v110 = *a5;
      if (v12 && v13 >= 1)
      {
        v111 = a3 + 72 * v13;
        v112 = *(_QWORD *)(v111 + 8);
        v113 = v13 + 1;
        v114 = v111 - 71;
        do
        {
          *(_BYTE *)v114 = *(_BYTE *)(v112 + 1);
          if (*(_BYTE *)(v112 + 1))
            v115 = *(_QWORD *)(v112 + 24);
          else
            v115 = 0;
          *(_QWORD *)(v114 + 23) = v115;
          v116 = *(_OWORD *)(v112 + 32);
          *(_OWORD *)(v114 + 47) = *(_OWORD *)(v112 + 48);
          *(_OWORD *)(v114 + 31) = v116;
          v112 = *(_QWORD *)(v112 + 8);
          *(_QWORD *)(v114 + 7) = v112;
          --v113;
          v114 -= 72;
        }
        while (v113 > 1);
        v13 = 0;
        v624 = 0;
      }
      v309 = v110[1];
      v308 = (unint64_t)v110[2];
      if ((unint64_t)v309 < v308)
      {
        *(_QWORD *)v309 = *(_QWORD *)(a3 + 24);
        v310 = v309 + 8;
LABEL_642:
        result = 0;
        v110[1] = v310;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          v523 = 72 * v13;
          v524 = *(_QWORD *)(a3 + v523 + 8);
          do
          {
            v527 = a3 + v523;
            *(_BYTE *)(a3 + v523 - 71) = *(_BYTE *)(v524 + 1);
            if (*(_BYTE *)(v524 + 1))
              v525 = *(_QWORD *)(v524 + 24);
            else
              v525 = 0;
            result = 0;
            *(_QWORD *)(v527 - 48) = v525;
            v526 = *(_OWORD *)(v524 + 32);
            *(_OWORD *)(v527 - 24) = *(_OWORD *)(v524 + 48);
            *(_OWORD *)(v527 - 40) = v526;
            v524 = *(_QWORD *)(v524 + 8);
            *(_QWORD *)(v527 - 64) = v524;
            v523 -= 72;
          }
          while (v523 != -72);
        }
        return result;
      }
      v311 = *v110;
      v312 = v309 - *v110;
      v313 = v312 >> 3;
      v314 = (v312 >> 3) + 1;
      if (v314 >> 61)
        sub_240B70258();
      v315 = v308 - (_QWORD)v311;
      if (v315 >> 2 > v314)
        v314 = v315 >> 2;
      if ((unint64_t)v315 >= 0x7FFFFFFFFFFFFFF8)
        v316 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v316 = v314;
      if (!v316)
      {
        v317 = 0;
LABEL_633:
        v513 = &v317[8 * v313];
        *(_QWORD *)v513 = *(_QWORD *)(a3 + 24);
        v310 = v513 + 8;
        if (v309 != v311)
        {
          v514 = v309 - v311 - 8;
          if (v514 < 0x58)
            goto LABEL_772;
          if ((unint64_t)(v309 - &v317[v312]) < 0x20)
            goto LABEL_772;
          v515 = (v514 >> 3) + 1;
          v516 = 8 * (v515 & 0x3FFFFFFFFFFFFFFCLL);
          v517 = &v309[-v516];
          v513 -= v516;
          v518 = &v317[v312 - 16];
          v519 = v309 - 16;
          v520 = v515 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v521 = *(_OWORD *)v519;
            *(v518 - 1) = *((_OWORD *)v519 - 1);
            *v518 = v521;
            v518 -= 2;
            v519 -= 32;
            v520 -= 4;
          }
          while (v520);
          v309 = v517;
          if (v515 != (v515 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_772:
            do
            {
              v522 = *((_QWORD *)v309 - 1);
              v309 -= 8;
              *((_QWORD *)v513 - 1) = v522;
              v513 -= 8;
            }
            while (v309 != v311);
          }
        }
        *v110 = v513;
        v110[1] = v310;
        v110[2] = &v317[8 * v316];
        if (v311)
          operator delete(v311);
        goto LABEL_642;
      }
      v615 = (char *)(v309 - *v110);
      if (!(v316 >> 61))
      {
        v317 = operator new(8 * v316);
        v312 = (uint64_t)v615;
        goto LABEL_633;
      }
      goto LABEL_748;
    case 28:
      v117 = (char **)operator new();
      *v117 = 0;
      v117[1] = 0;
      v117[2] = 0;
      *a5 = v117;
      if (v12 && v624 >= 1)
      {
        v261 = a3 + 72 * v624;
        v262 = *(_QWORD *)(v261 + 8);
        v263 = v624 + 1;
        v264 = v261 - 71;
        do
        {
          *(_BYTE *)v264 = *(_BYTE *)(v262 + 1);
          if (*(_BYTE *)(v262 + 1))
            v265 = *(_QWORD *)(v262 + 24);
          else
            v265 = 0;
          *(_QWORD *)(v264 + 23) = v265;
          v266 = *(_OWORD *)(v262 + 32);
          *(_OWORD *)(v264 + 47) = *(_OWORD *)(v262 + 48);
          *(_OWORD *)(v264 + 31) = v266;
          v262 = *(_QWORD *)(v262 + 8);
          *(_QWORD *)(v264 + 7) = v262;
          --v263;
          v264 -= 72;
        }
        while (v263 > 1);
        v624 = 0;
      }
LABEL_492:
      v434 = (char *)operator new(8uLL);
      result = 0;
      *(_QWORD *)v434 = *(_QWORD *)(a3 + 24);
      v117[1] = v434 + 8;
      v117[2] = v434 + 8;
      *v117 = v434;
      return result;
    case 29:
      v52 = *a5;
      if (v12 && v13 >= 1)
      {
        v53 = a3 + 72 * v13;
        v54 = *(_QWORD *)(v53 + 8);
        v55 = v13 + 1;
        v56 = v53 - 71;
        do
        {
          *(_BYTE *)v56 = *(_BYTE *)(v54 + 1);
          if (*(_BYTE *)(v54 + 1))
            v57 = *(_QWORD *)(v54 + 24);
          else
            v57 = 0;
          *(_QWORD *)(v56 + 23) = v57;
          v58 = *(_OWORD *)(v54 + 32);
          *(_OWORD *)(v56 + 47) = *(_OWORD *)(v54 + 48);
          *(_OWORD *)(v56 + 31) = v58;
          v54 = *(_QWORD *)(v54 + 8);
          *(_QWORD *)(v56 + 7) = v54;
          --v55;
          v56 -= 72;
        }
        while (v55 > 1);
        v13 = 0;
        v624 = 0;
      }
      v278 = v52[1];
      v277 = (unint64_t)v52[2];
      if ((unint64_t)v278 < v277)
      {
        *(_QWORD *)v278 = *(_QWORD *)(a3 + 24);
        v279 = v278 + 8;
LABEL_607:
        result = 0;
        v52[1] = v279;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          v488 = 72 * v13;
          v489 = *(_QWORD *)(a3 + v488 + 8);
          do
          {
            v492 = a3 + v488;
            *(_BYTE *)(a3 + v488 - 71) = *(_BYTE *)(v489 + 1);
            if (*(_BYTE *)(v489 + 1))
              v490 = *(_QWORD *)(v489 + 24);
            else
              v490 = 0;
            result = 0;
            *(_QWORD *)(v492 - 48) = v490;
            v491 = *(_OWORD *)(v489 + 32);
            *(_OWORD *)(v492 - 24) = *(_OWORD *)(v489 + 48);
            *(_OWORD *)(v492 - 40) = v491;
            v489 = *(_QWORD *)(v489 + 8);
            *(_QWORD *)(v492 - 64) = v489;
            v488 -= 72;
          }
          while (v488 != -72);
        }
        return result;
      }
      v280 = *v52;
      v281 = v278 - *v52;
      v282 = v281 >> 3;
      v283 = (v281 >> 3) + 1;
      if (v283 >> 61)
LABEL_750:
        sub_240B70258();
      v284 = v277 - (_QWORD)v280;
      if (v284 >> 2 > v283)
        v283 = v284 >> 2;
      if ((unint64_t)v284 >= 0x7FFFFFFFFFFFFFF8)
        v285 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v285 = v283;
      if (!v285)
      {
        v286 = 0;
        goto LABEL_597;
      }
      v614 = (char *)(v278 - *v52);
      if (!(v285 >> 61))
      {
        v286 = operator new(8 * v285);
        v281 = (uint64_t)v614;
LABEL_597:
        v478 = &v286[8 * v282];
        *(_QWORD *)v478 = *(_QWORD *)(a3 + 24);
        v279 = v478 + 8;
        if (v278 != v280)
        {
          v479 = v278 - v280 - 8;
          if (v479 < 0x58)
            goto LABEL_773;
          if ((unint64_t)(v278 - &v286[v281]) < 0x20)
            goto LABEL_773;
          v480 = (v479 >> 3) + 1;
          v481 = 8 * (v480 & 0x3FFFFFFFFFFFFFFCLL);
          v482 = &v278[-v481];
          v478 -= v481;
          v483 = &v286[v281 - 16];
          v484 = v278 - 16;
          v485 = v480 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v486 = *(_OWORD *)v484;
            *(v483 - 1) = *((_OWORD *)v484 - 1);
            *v483 = v486;
            v483 -= 2;
            v484 -= 32;
            v485 -= 4;
          }
          while (v485);
          v278 = v482;
          if (v480 != (v480 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_773:
            do
            {
              v487 = *((_QWORD *)v278 - 1);
              v278 -= 8;
              *((_QWORD *)v478 - 1) = v487;
              v478 -= 8;
            }
            while (v278 != v280);
          }
          v278 = *v52;
        }
        *v52 = v478;
        v52[1] = v279;
        v52[2] = &v286[8 * v285];
        if (v278)
          operator delete(v278);
        goto LABEL_607;
      }
      goto LABEL_748;
    case 30:
      v246 = (char **)sub_240BB84D8(0x78uLL);
      v38 = v246;
      if (v12 && v624 >= -1)
      {
        v247 = a3 + 72 * v624;
        v248 = *(_QWORD *)(v247 + 8);
        v249 = v624 + 1;
        v250 = v247 - 71;
        do
        {
          *(_BYTE *)v250 = *(_BYTE *)(v248 + 1);
          if (*(_BYTE *)(v248 + 1))
            v251 = *(_QWORD *)(v248 + 24);
          else
            v251 = 0;
          *(_QWORD *)(v250 + 23) = v251;
          v252 = *(_OWORD *)(v248 + 32);
          *(_OWORD *)(v250 + 47) = *(_OWORD *)(v248 + 48);
          *(_OWORD *)(v250 + 31) = v252;
          v248 = *(_QWORD *)(v248 + 8);
          *(_QWORD *)(v250 + 7) = v248;
          --v249;
          v250 -= 72;
        }
        while ((v249 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      sub_240B928D4((int)v246, *(char **)(a3 - 120));
      goto LABEL_577;
    case 31:
      if (v12 && v13 >= -1)
      {
        v253 = a3 + 72 * v13;
        v254 = *(_QWORD *)(v253 + 8);
        v255 = v13 + 1;
        v256 = v253 - 71;
        do
        {
          *(_BYTE *)v256 = *(_BYTE *)(v254 + 1);
          if (*(_BYTE *)(v254 + 1))
            v257 = *(_QWORD *)(v254 + 24);
          else
            v257 = 0;
          *(_QWORD *)(v256 + 23) = v257;
          v258 = *(_OWORD *)(v254 + 32);
          *(_OWORD *)(v256 + 47) = *(_OWORD *)(v254 + 48);
          *(_OWORD *)(v256 + 31) = v258;
          v254 = *(_QWORD *)(v254 + 8);
          *(_QWORD *)(v256 + 7) = v254;
          --v255;
          v256 -= 72;
        }
        while ((v255 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      v392 = *(const char **)(a3 - 120);
      v393 = strlen(v392);
      if (v393 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v394 = v393;
      if (v393 >= 0x17)
      {
        v414 = (v393 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v393 | 7) != 0x17)
          v414 = v393 | 7;
        v415 = v414 + 1;
        v395 = operator new(v414 + 1);
        *(_QWORD *)&__str[8] = v394;
        v626 = v415 | 0x8000000000000000;
        *(_QWORD *)__str = v395;
      }
      else
      {
        HIBYTE(v626) = v393;
        v395 = __str;
        if (!v393)
          goto LABEL_467;
      }
      memmove(v395, v392, v394);
LABEL_467:
      v416 = 0;
      *((_BYTE *)v395 + v394) = 0;
      v417 = HIBYTE(v626);
      if (v626 < 0)
        v417 = *(_QWORD *)&__str[8];
      if (v417 != 4)
      {
        if ((SHIBYTE(v626) & 0x80000000) == 0)
          goto LABEL_471;
LABEL_485:
        operator delete(*(void **)__str);
        if (v416)
          goto LABEL_472;
        goto LABEL_486;
      }
      v428 = *(char **)__str;
      if (v626 >= 0)
        v428 = __str;
      v416 = *(_DWORD *)v428 == 1701732654;
      if (SHIBYTE(v626) < 0)
        goto LABEL_485;
LABEL_471:
      if (v416)
      {
LABEL_472:
        v418 = (char **)sub_240BB84D8(0x80uLL);
        sub_240B90738(a3, &v624, 0xFFFFFFFFLL, v12 == 0);
        v419 = *(char **)(a3 - 48);
        sub_240B90738(a3, &v624, 0, v12 == 0);
        v420 = *(char **)(a3 + 24);
        sub_240B9225C((uint64_t)v418, v419);
        result = 0;
        *v418 = (char *)off_25110C658;
        v418[15] = v420;
        *a5 = v418;
        return result;
      }
LABEL_486:
      sub_240B907B0((uint64_t)__str);
      v429 = sub_240B8AA18(__str, (uint64_t)"Expecting a function or the '.ane' directive (not ", 50);
      sub_240B90738(a3, &v624, 4294967294, v12 == 0);
      v430 = *(const char **)(a3 - 120);
      v431 = strlen(v430);
      v432 = sub_240B8AA18(v429, (uint64_t)v430, v431);
      sub_240B8AA18(v432, (uint64_t)")", 1);
      v433 = (char **)sub_240BB84D8(0x48uLL);
      sub_240B9089C(__str, &__s2);
      sub_240B90974((uint64_t)v433, &__s2);
LABEL_745:
      *a5 = v433;
      if (v623 < 0)
        operator delete((void *)__s2);
      sub_240B8A994((uint64_t)__str);
      return 0;
    case 33:
      v143 = *a5;
      if (v12 && v13 >= 1)
      {
        v144 = a3 + 72 * v13;
        v145 = *(_QWORD *)(v144 + 8);
        v146 = v13 + 1;
        v147 = v144 - 71;
        do
        {
          *(_BYTE *)v147 = *(_BYTE *)(v145 + 1);
          if (*(_BYTE *)(v145 + 1))
            v148 = *(_QWORD *)(v145 + 24);
          else
            v148 = 0;
          *(_QWORD *)(v147 + 23) = v148;
          v149 = *(_OWORD *)(v145 + 32);
          *(_OWORD *)(v147 + 47) = *(_OWORD *)(v145 + 48);
          *(_OWORD *)(v147 + 31) = v149;
          v145 = *(_QWORD *)(v145 + 8);
          *(_QWORD *)(v147 + 7) = v145;
          --v146;
          v147 -= 72;
        }
        while (v146 > 1);
        v13 = 0;
        v624 = 0;
      }
      v341 = *(_QWORD *)(a3 + 24);
      v343 = v143[1];
      v342 = (unint64_t)v143[2];
      if ((unint64_t)v343 >= v342)
      {
        v345 = *v143;
        v346 = v343 - *v143;
        v347 = v346 >> 3;
        v348 = (v346 >> 3) + 1;
        if (v348 >> 61)
          sub_240B70258();
        v349 = v342 - (_QWORD)v345;
        if (v349 >> 2 > v348)
          v348 = v349 >> 2;
        if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFF8)
          v350 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v350 = v348;
        if (v350)
        {
          v611 = v346 >> 3;
          v617 = (char *)(v343 - *v143);
          if (v350 >> 61)
            sub_240B7007C();
          v351 = operator new(8 * v350);
          v347 = v611;
          v346 = (uint64_t)v617;
        }
        else
        {
          v351 = 0;
        }
        v543 = &v351[8 * v347];
        *(_QWORD *)v543 = v341;
        v344 = v543 + 8;
        if (v343 != v345)
        {
          v544 = v343 - v345 - 8;
          if (v544 < 0x58)
            goto LABEL_774;
          if ((unint64_t)(v343 - &v351[v346]) < 0x20)
            goto LABEL_774;
          v545 = (v544 >> 3) + 1;
          v546 = 8 * (v545 & 0x3FFFFFFFFFFFFFFCLL);
          v547 = &v343[-v546];
          v543 -= v546;
          v548 = &v351[v346 - 16];
          v549 = v343 - 16;
          v550 = v545 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v551 = *(_OWORD *)v549;
            *(v548 - 1) = *((_OWORD *)v549 - 1);
            *v548 = v551;
            v548 -= 2;
            v549 -= 32;
            v550 -= 4;
          }
          while (v550);
          v343 = v547;
          if (v545 != (v545 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_774:
            do
            {
              v552 = *((_QWORD *)v343 - 1);
              v343 -= 8;
              *((_QWORD *)v543 - 1) = v552;
              v543 -= 8;
            }
            while (v343 != v345);
          }
          v343 = *v143;
        }
        *v143 = v543;
        v143[1] = v344;
        v143[2] = &v351[8 * v350];
        if (v343)
          operator delete(v343);
      }
      else
      {
        *(_QWORD *)v343 = v341;
        v344 = v343 + 8;
      }
      result = 0;
      v143[1] = v344;
      if (v12 && (v13 & 0x80000000) == 0)
      {
        v553 = 72 * v13;
        v554 = *(_QWORD *)(a3 + v553 + 8);
        do
        {
          v557 = a3 + v553;
          *(_BYTE *)(a3 + v553 - 71) = *(_BYTE *)(v554 + 1);
          if (*(_BYTE *)(v554 + 1))
            v555 = *(_QWORD *)(v554 + 24);
          else
            v555 = 0;
          result = 0;
          *(_QWORD *)(v557 - 48) = v555;
          v556 = *(_OWORD *)(v554 + 32);
          *(_OWORD *)(v557 - 24) = *(_OWORD *)(v554 + 48);
          *(_OWORD *)(v557 - 40) = v556;
          v554 = *(_QWORD *)(v554 + 8);
          *(_QWORD *)(v557 - 64) = v554;
          v553 -= 72;
        }
        while (v553 != -72);
      }
      return result;
    case 34:
      v199 = *a5;
      if (v12 && v13 >= 1)
      {
        v200 = a3 + 72 * v13;
        v201 = *(_QWORD *)(v200 + 8);
        v202 = v13 + 1;
        v203 = v200 - 71;
        do
        {
          *(_BYTE *)v203 = *(_BYTE *)(v201 + 1);
          if (*(_BYTE *)(v201 + 1))
            v204 = *(_QWORD *)(v201 + 24);
          else
            v204 = 0;
          *(_QWORD *)(v203 + 23) = v204;
          v205 = *(_OWORD *)(v201 + 32);
          *(_OWORD *)(v203 + 47) = *(_OWORD *)(v201 + 48);
          *(_OWORD *)(v203 + 31) = v205;
          v201 = *(_QWORD *)(v201 + 8);
          *(_QWORD *)(v203 + 7) = v201;
          --v202;
          v203 -= 72;
        }
        while (v202 > 1);
        v13 = 0;
        v624 = 0;
      }
      v367 = *(_QWORD *)(a3 + 24);
      v369 = v199[1];
      v368 = (unint64_t)v199[2];
      if ((unint64_t)v369 >= v368)
      {
        v371 = *v199;
        v372 = v369 - *v199;
        v373 = v372 >> 3;
        v374 = (v372 >> 3) + 1;
        if (v374 >> 61)
          sub_240B70258();
        v375 = v368 - (_QWORD)v371;
        if (v375 >> 2 > v374)
          v374 = v375 >> 2;
        if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF8)
          v376 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v376 = v374;
        if (v376)
        {
          v612 = v372 >> 3;
          v618 = (char *)(v369 - *v199);
          if (v376 >> 61)
            sub_240B7007C();
          v377 = operator new(8 * v376);
          v373 = v612;
          v372 = (uint64_t)v618;
        }
        else
        {
          v377 = 0;
        }
        v576 = &v377[8 * v373];
        *(_QWORD *)v576 = v367;
        v370 = v576 + 8;
        if (v369 != v371)
        {
          v577 = v369 - v371 - 8;
          if (v577 < 0x58)
            goto LABEL_775;
          if ((unint64_t)(v369 - &v377[v372]) < 0x20)
            goto LABEL_775;
          v578 = (v577 >> 3) + 1;
          v579 = 8 * (v578 & 0x3FFFFFFFFFFFFFFCLL);
          v580 = &v369[-v579];
          v576 -= v579;
          v581 = &v377[v372 - 16];
          v582 = v369 - 16;
          v583 = v578 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v584 = *(_OWORD *)v582;
            *(v581 - 1) = *((_OWORD *)v582 - 1);
            *v581 = v584;
            v581 -= 2;
            v582 -= 32;
            v583 -= 4;
          }
          while (v583);
          v369 = v580;
          if (v578 != (v578 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_775:
            do
            {
              v585 = *((_QWORD *)v369 - 1);
              v369 -= 8;
              *((_QWORD *)v576 - 1) = v585;
              v576 -= 8;
            }
            while (v369 != v371);
          }
          v369 = *v199;
        }
        *v199 = v576;
        v199[1] = v370;
        v199[2] = &v377[8 * v376];
        if (v369)
          operator delete(v369);
      }
      else
      {
        *(_QWORD *)v369 = v367;
        v370 = v369 + 8;
      }
      result = 0;
      v199[1] = v370;
      if (v12 && (v13 & 0x80000000) == 0)
      {
        v586 = 72 * v13;
        v587 = *(_QWORD *)(a3 + v586 + 8);
        do
        {
          v590 = a3 + v586;
          *(_BYTE *)(a3 + v586 - 71) = *(_BYTE *)(v587 + 1);
          if (*(_BYTE *)(v587 + 1))
            v588 = *(_QWORD *)(v587 + 24);
          else
            v588 = 0;
          result = 0;
          *(_QWORD *)(v590 - 48) = v588;
          v589 = *(_OWORD *)(v587 + 32);
          *(_OWORD *)(v590 - 24) = *(_OWORD *)(v587 + 48);
          *(_OWORD *)(v590 - 40) = v589;
          v587 = *(_QWORD *)(v587 + 8);
          *(_QWORD *)(v590 - 64) = v587;
          v586 -= 72;
        }
        while (v586 != -72);
      }
      return result;
    case 35:
      v73 = (char **)sub_240BB84D8(0x60uLL);
      v74 = v73;
      if (v12 && (v624 & 0x80000000) == 0)
      {
        v75 = 72 * v624;
        v76 = *(_QWORD *)(a3 + v75 + 8);
        do
        {
          v79 = a3 + v75;
          *(_BYTE *)(a3 + v75 - 71) = *(_BYTE *)(v76 + 1);
          if (*(_BYTE *)(v76 + 1))
            v77 = *(_QWORD *)(v76 + 24);
          else
            v77 = 0;
          *(_QWORD *)(v79 - 48) = v77;
          v78 = *(_OWORD *)(v76 + 32);
          *(_OWORD *)(v79 - 24) = *(_OWORD *)(v76 + 48);
          *(_OWORD *)(v79 - 40) = v78;
          v76 = *(_QWORD *)(v76 + 8);
          *(_QWORD *)(v79 - 64) = v76;
          v75 -= 72;
        }
        while (v75 != -72);
        v624 = -1;
      }
      sub_240B928D8((uint64_t)v73, *(char **)(a3 - 48));
      result = 0;
      *v74 = (char *)off_25110C680;
      *a5 = v74;
      return result;
    case 36:
      v59 = (char **)sub_240BB84D8(0x60uLL);
      v38 = v59;
      if (v12 && v624 >= -2)
      {
        v60 = a3 + 72 * v624;
        v61 = *(_QWORD *)(v60 + 8);
        v62 = v624 + 1;
        v63 = v60 - 71;
        do
        {
          *(_BYTE *)v63 = *(_BYTE *)(v61 + 1);
          if (*(_BYTE *)(v61 + 1))
            v64 = *(_QWORD *)(v61 + 24);
          else
            v64 = 0;
          *(_QWORD *)(v63 + 23) = v64;
          v65 = *(_OWORD *)(v61 + 32);
          *(_OWORD *)(v63 + 47) = *(_OWORD *)(v61 + 48);
          *(_OWORD *)(v63 + 31) = v65;
          v61 = *(_QWORD *)(v61 + 8);
          *(_QWORD *)(v63 + 7) = v61;
          --v62;
          v63 -= 72;
        }
        while (v62 > -2);
        v624 = -3;
      }
      sub_240B92D00((int)v59, *(char **)(a3 - 192));
      goto LABEL_577;
    case 38:
      v45 = *a5;
      if (v12 && v13 >= 1)
      {
        v46 = a3 + 72 * v13;
        v47 = *(_QWORD *)(v46 + 8);
        v48 = v13 + 1;
        v49 = v46 - 71;
        do
        {
          *(_BYTE *)v49 = *(_BYTE *)(v47 + 1);
          if (*(_BYTE *)(v47 + 1))
            v50 = *(_QWORD *)(v47 + 24);
          else
            v50 = 0;
          *(_QWORD *)(v49 + 23) = v50;
          v51 = *(_OWORD *)(v47 + 32);
          *(_OWORD *)(v49 + 47) = *(_OWORD *)(v47 + 48);
          *(_OWORD *)(v49 + 31) = v51;
          v47 = *(_QWORD *)(v47 + 8);
          *(_QWORD *)(v49 + 7) = v47;
          --v48;
          v49 -= 72;
        }
        while (v48 > 1);
        v13 = 0;
        v624 = 0;
      }
      v268 = v45[1];
      v267 = (unint64_t)v45[2];
      if ((unint64_t)v268 < v267)
      {
        *(_QWORD *)v268 = *(_QWORD *)(a3 + 24);
        v269 = v268 + 8;
LABEL_589:
        result = 0;
        v45[1] = v269;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          v473 = 72 * v13;
          v474 = *(_QWORD *)(a3 + v473 + 8);
          do
          {
            v477 = a3 + v473;
            *(_BYTE *)(a3 + v473 - 71) = *(_BYTE *)(v474 + 1);
            if (*(_BYTE *)(v474 + 1))
              v475 = *(_QWORD *)(v474 + 24);
            else
              v475 = 0;
            result = 0;
            *(_QWORD *)(v477 - 48) = v475;
            v476 = *(_OWORD *)(v474 + 32);
            *(_OWORD *)(v477 - 24) = *(_OWORD *)(v474 + 48);
            *(_OWORD *)(v477 - 40) = v476;
            v474 = *(_QWORD *)(v474 + 8);
            *(_QWORD *)(v477 - 64) = v474;
            v473 -= 72;
          }
          while (v473 != -72);
        }
        return result;
      }
      v270 = *v45;
      v271 = v268 - *v45;
      v272 = v271 >> 3;
      v273 = (v271 >> 3) + 1;
      if (v273 >> 61)
        goto LABEL_749;
      v274 = v267 - (_QWORD)v270;
      if (v274 >> 2 > v273)
        v273 = v274 >> 2;
      if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFF8)
        v275 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v275 = v273;
      if (!v275)
      {
        v276 = 0;
        goto LABEL_579;
      }
      v613 = (char *)(v268 - *v45);
      if (!(v275 >> 61))
      {
        v276 = operator new(8 * v275);
        v271 = (uint64_t)v613;
LABEL_579:
        v463 = &v276[8 * v272];
        *(_QWORD *)v463 = *(_QWORD *)(a3 + 24);
        v269 = v463 + 8;
        if (v268 != v270)
        {
          v464 = v268 - v270 - 8;
          if (v464 < 0x58)
            goto LABEL_776;
          if ((unint64_t)(v268 - &v276[v271]) < 0x20)
            goto LABEL_776;
          v465 = (v464 >> 3) + 1;
          v466 = 8 * (v465 & 0x3FFFFFFFFFFFFFFCLL);
          v467 = &v268[-v466];
          v463 -= v466;
          v468 = &v276[v271 - 16];
          v469 = v268 - 16;
          v470 = v465 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v471 = *(_OWORD *)v469;
            *(v468 - 1) = *((_OWORD *)v469 - 1);
            *v468 = v471;
            v468 -= 2;
            v469 -= 32;
            v470 -= 4;
          }
          while (v470);
          v268 = v467;
          if (v465 != (v465 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_776:
            do
            {
              v472 = *((_QWORD *)v268 - 1);
              v268 -= 8;
              *((_QWORD *)v463 - 1) = v472;
              v463 -= 8;
            }
            while (v268 != v270);
          }
          v268 = *v45;
        }
        *v45 = v463;
        v45[1] = v269;
        v45[2] = &v276[8 * v275];
        if (v268)
          operator delete(v268);
        goto LABEL_589;
      }
      goto LABEL_748;
    case 39:
      v37 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v37;
      if (v12 && v624 >= -3)
      {
        v39 = a3 + 72 * v624;
        v40 = *(_QWORD *)(v39 + 8);
        v41 = v624 + 1;
        v42 = v39 - 71;
        do
        {
          *(_BYTE *)v42 = *(_BYTE *)(v40 + 1);
          if (*(_BYTE *)(v40 + 1))
            v43 = *(_QWORD *)(v40 + 24);
          else
            v43 = 0;
          *(_QWORD *)(v42 + 23) = v43;
          v44 = *(_OWORD *)(v40 + 32);
          *(_OWORD *)(v42 + 47) = *(_OWORD *)(v40 + 48);
          *(_OWORD *)(v42 + 31) = v44;
          v40 = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v42 + 7) = v40;
          --v41;
          v42 -= 72;
        }
        while (v41 > -3);
        v624 = -4;
      }
      goto LABEL_572;
    case 41:
      v221 = *a5;
      if (v12 && v13 >= 1)
      {
        v222 = a3 + 72 * v13;
        v223 = *(_QWORD *)(v222 + 8);
        v224 = v13 + 1;
        v225 = v222 - 71;
        do
        {
          *(_BYTE *)v225 = *(_BYTE *)(v223 + 1);
          if (*(_BYTE *)(v223 + 1))
            v226 = *(_QWORD *)(v223 + 24);
          else
            v226 = 0;
          *(_QWORD *)(v225 + 23) = v226;
          v227 = *(_OWORD *)(v223 + 32);
          *(_OWORD *)(v225 + 47) = *(_OWORD *)(v223 + 48);
          *(_OWORD *)(v225 + 31) = v227;
          v223 = *(_QWORD *)(v223 + 8);
          *(_QWORD *)(v225 + 7) = v223;
          --v224;
          v225 -= 72;
        }
        while (v224 > 1);
        v13 = 0;
        v624 = 0;
      }
      v383 = v221[1];
      v382 = (unint64_t)v221[2];
      if ((unint64_t)v383 >= v382)
      {
        v385 = *v221;
        v386 = v383 - *v221;
        v387 = v386 >> 3;
        v388 = (v386 >> 3) + 1;
        if (v388 >> 61)
LABEL_749:
          sub_240B70258();
        v389 = v382 - (_QWORD)v385;
        if (v389 >> 2 > v388)
          v388 = v389 >> 2;
        if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFF8)
          v390 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v390 = v388;
        if (v390)
        {
          v619 = (char *)(v383 - *v221);
          if (v390 >> 61)
LABEL_748:
            sub_240B7007C();
          v391 = operator new(8 * v390);
          v386 = (uint64_t)v619;
        }
        else
        {
          v391 = 0;
        }
        v591 = &v391[8 * v387];
        *(_QWORD *)v591 = *(_QWORD *)(a3 + 24);
        v384 = v591 + 8;
        if (v383 != v385)
        {
          v592 = v383 - v385 - 8;
          if (v592 < 0x58)
            goto LABEL_777;
          if ((unint64_t)(v383 - &v391[v386]) < 0x20)
            goto LABEL_777;
          v593 = (v592 >> 3) + 1;
          v594 = 8 * (v593 & 0x3FFFFFFFFFFFFFFCLL);
          v595 = &v383[-v594];
          v591 -= v594;
          v596 = &v391[v386 - 16];
          v597 = v383 - 16;
          v598 = v593 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v599 = *(_OWORD *)v597;
            *(v596 - 1) = *((_OWORD *)v597 - 1);
            *v596 = v599;
            v596 -= 2;
            v597 -= 32;
            v598 -= 4;
          }
          while (v598);
          v383 = v595;
          if (v593 != (v593 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_777:
            do
            {
              v600 = *((_QWORD *)v383 - 1);
              v383 -= 8;
              *((_QWORD *)v591 - 1) = v600;
              v591 -= 8;
            }
            while (v383 != v385);
          }
          v383 = *v221;
        }
        *v221 = v591;
        v221[1] = v384;
        v221[2] = &v391[8 * v390];
        if (v383)
          operator delete(v383);
      }
      else
      {
        *(_QWORD *)v383 = *(_QWORD *)(a3 + 24);
        v384 = v383 + 8;
      }
      result = 0;
      v221[1] = v384;
      if (v12 && (v13 & 0x80000000) == 0)
      {
        v601 = 72 * v13;
        v602 = *(_QWORD *)(a3 + v601 + 8);
        do
        {
          v605 = a3 + v601;
          *(_BYTE *)(a3 + v601 - 71) = *(_BYTE *)(v602 + 1);
          if (*(_BYTE *)(v602 + 1))
            v603 = *(_QWORD *)(v602 + 24);
          else
            v603 = 0;
          result = 0;
          *(_QWORD *)(v605 - 48) = v603;
          v604 = *(_OWORD *)(v602 + 32);
          *(_OWORD *)(v605 - 24) = *(_OWORD *)(v602 + 48);
          *(_OWORD *)(v605 - 40) = v604;
          v602 = *(_QWORD *)(v602 + 8);
          *(_QWORD *)(v605 - 64) = v602;
          v601 -= 72;
        }
        while (v601 != -72);
      }
      return result;
    case 42:
      v90 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v90;
      if (v12 && v624 >= -1)
      {
        v91 = a3 + 72 * v624;
        v92 = *(_QWORD *)(v91 + 8);
        v93 = v624 + 1;
        v94 = v91 - 71;
        do
        {
          *(_BYTE *)v94 = *(_BYTE *)(v92 + 1);
          if (*(_BYTE *)(v92 + 1))
            v95 = *(_QWORD *)(v92 + 24);
          else
            v95 = 0;
          *(_QWORD *)(v94 + 23) = v95;
          v96 = *(_OWORD *)(v92 + 32);
          *(_OWORD *)(v94 + 47) = *(_OWORD *)(v92 + 48);
          *(_OWORD *)(v94 + 31) = v96;
          v92 = *(_QWORD *)(v92 + 8);
          *(_QWORD *)(v94 + 7) = v92;
          --v93;
          v94 -= 72;
        }
        while ((v93 & 0x8000000000000000) == 0);
        v624 = -2;
      }
LABEL_570:
      sub_240B909EC((uint64_t)v90, *(char **)(a3 - 120), *(const char **)(a3 + 24));
      goto LABEL_577;
    case 43:
      v150 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v150;
      if (v12 && v624 >= -3)
      {
        v151 = a3 + 72 * v624;
        v152 = *(_QWORD *)(v151 + 8);
        v153 = v624 + 1;
        v154 = v151 - 71;
        do
        {
          *(_BYTE *)v154 = *(_BYTE *)(v152 + 1);
          if (*(_BYTE *)(v152 + 1))
            v155 = *(_QWORD *)(v152 + 24);
          else
            v155 = 0;
          *(_QWORD *)(v154 + 23) = v155;
          v156 = *(_OWORD *)(v152 + 32);
          *(_OWORD *)(v154 + 47) = *(_OWORD *)(v152 + 48);
          *(_OWORD *)(v154 + 31) = v156;
          v152 = *(_QWORD *)(v152 + 8);
          *(_QWORD *)(v154 + 7) = v152;
          --v153;
          v154 -= 72;
        }
        while (v153 > -3);
        v624 = -4;
      }
LABEL_536:
      sub_240B90DC4((uint64_t)v150, *(char **)(a3 - 264), *(_QWORD *)(a3 - 48));
      goto LABEL_577;
    case 44:
      v37 = (char **)sub_240BB84D8(0x68uLL);
      v38 = v37;
      if (v12 && v624 >= -3)
      {
        v234 = a3 + 72 * v624;
        v235 = *(_QWORD *)(v234 + 8);
        v236 = v624 + 1;
        v237 = v234 - 71;
        do
        {
          *(_BYTE *)v237 = *(_BYTE *)(v235 + 1);
          if (*(_BYTE *)(v235 + 1))
            v238 = *(_QWORD *)(v235 + 24);
          else
            v238 = 0;
          *(_QWORD *)(v237 + 23) = v238;
          v239 = *(_OWORD *)(v235 + 32);
          *(_OWORD *)(v237 + 47) = *(_OWORD *)(v235 + 48);
          *(_OWORD *)(v237 + 31) = v239;
          v235 = *(_QWORD *)(v235 + 8);
          *(_QWORD *)(v237 + 7) = v235;
          --v236;
          v237 -= 72;
        }
        while (v236 > -3);
        v624 = -4;
      }
LABEL_572:
      sub_240B90C88((uint64_t)v37, *(char **)(a3 - 264), *(uint64_t **)(a3 - 48));
      goto LABEL_577;
    case 45:
      v29 = (char *)sub_240BB84D8(0x68uLL);
      v30 = v29;
      if (v12 && v624 >= -1)
      {
        v31 = a3 + 72 * v624;
        v32 = *(_QWORD *)(v31 + 8);
        v33 = v624 + 1;
        v34 = v31 - 71;
        do
        {
          *(_BYTE *)v34 = *(_BYTE *)(v32 + 1);
          if (*(_BYTE *)(v32 + 1))
            v35 = *(_QWORD *)(v32 + 24);
          else
            v35 = 0;
          *(_QWORD *)(v34 + 23) = v35;
          v36 = *(_OWORD *)(v32 + 32);
          *(_OWORD *)(v34 + 47) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v34 + 31) = v36;
          v32 = *(_QWORD *)(v32 + 8);
          *(_QWORD *)(v34 + 7) = v32;
          --v33;
          v34 -= 72;
        }
        while ((v33 & 0x8000000000000000) == 0);
        v624 = -2;
      }
      v435 = *(const char **)(a3 - 120);
      v436 = *(_QWORD *)(a3 + 24);
      *((_QWORD *)v29 + 5) = 0;
      *(_OWORD *)(v29 + 24) = 0u;
      *(_OWORD *)(v29 + 8) = 0u;
      *(_QWORD *)v29 = off_25110C608;
      v437 = v29 + 48;
      v438 = strlen(v435);
      if (v438 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v439 = v438;
      if (v438 < 0x17)
      {
LABEL_552:
        v30[71] = v439;
        if (!v439)
          goto LABEL_558;
      }
      else
      {
        v440 = (v438 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v438 | 7) != 0x17)
          v440 = v438 | 7;
LABEL_556:
        v455 = v440 + 1;
        v437 = operator new(v440 + 1);
        *((_QWORD *)v30 + 7) = v439;
        *((_QWORD *)v30 + 8) = v455 | 0x8000000000000000;
        *((_QWORD *)v30 + 6) = v437;
      }
      memmove(v437, v435, v439);
LABEL_558:
      result = 0;
      *((_BYTE *)v437 + v439) = 0;
      *((_QWORD *)v30 + 9) = v436;
      *((_DWORD *)v30 + 24) = 0;
      *a5 = (char **)v30;
      return result;
    case 47:
      v206 = *a5;
      if (v12 && v13 >= 1)
      {
        v207 = a3 + 72 * v13;
        v208 = *(_QWORD *)(v207 + 8);
        v209 = v13 + 1;
        v210 = v207 - 71;
        do
        {
          *(_BYTE *)v210 = *(_BYTE *)(v208 + 1);
          if (*(_BYTE *)(v208 + 1))
            v211 = *(_QWORD *)(v208 + 24);
          else
            v211 = 0;
          *(_QWORD *)(v210 + 23) = v211;
          v212 = *(_OWORD *)(v208 + 32);
          *(_OWORD *)(v210 + 47) = *(_OWORD *)(v208 + 48);
          *(_OWORD *)(v210 + 31) = v212;
          v208 = *(_QWORD *)(v208 + 8);
          *(_QWORD *)(v210 + 7) = v208;
          --v209;
          v210 -= 72;
        }
        while (v209 > 1);
        v624 = 0;
      }
      v378 = *(const char **)(a3 + 24);
      v379 = strlen(v378);
      if (v379 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v380 = v379;
      if (v379 >= 0x17)
      {
        v410 = (v379 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v379 | 7) != 0x17)
          v410 = v379 | 7;
        v411 = v410 + 1;
        v381 = operator new(v410 + 1);
        *(_QWORD *)&__str[8] = v380;
        v626 = v411 | 0x8000000000000000;
        *(_QWORD *)__str = v381;
      }
      else
      {
        HIBYTE(v626) = v379;
        v381 = __str;
        if (!v379)
          goto LABEL_461;
      }
      memmove(v381, v378, v380);
LABEL_461:
      *((_BYTE *)v381 + v380) = 0;
      v412 = v206[1];
      if (v412 >= v206[2])
      {
        v421 = sub_240B90F78((void **)v206, (uint64_t)__str);
        v422 = SHIBYTE(v626);
        v206[1] = v421;
        if (v422 < 0)
          operator delete(*(void **)__str);
      }
      else
      {
        v413 = *(_OWORD *)__str;
        *((_QWORD *)v412 + 2) = v626;
        *(_OWORD *)v412 = v413;
        v206[1] = v412 + 24;
      }
      if (!v12 || v624 < 0)
        return 0;
      v423 = 72 * v624;
      v424 = *(_QWORD *)(a3 + v423 + 8);
      do
      {
        v427 = a3 + v423;
        *(_BYTE *)(a3 + v423 - 71) = *(_BYTE *)(v424 + 1);
        if (*(_BYTE *)(v424 + 1))
          v425 = *(_QWORD *)(v424 + 24);
        else
          v425 = 0;
        result = 0;
        *(_QWORD *)(v427 - 48) = v425;
        v426 = *(_OWORD *)(v424 + 32);
        *(_OWORD *)(v427 - 24) = *(_OWORD *)(v424 + 48);
        *(_OWORD *)(v427 - 40) = v426;
        v424 = *(_QWORD *)(v424 + 8);
        *(_QWORD *)(v427 - 64) = v424;
        v423 -= 72;
      }
      while (v423 != -72);
      return result;
    default:
      return 0;
  }
}

void sub_240B90584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  _DWORD *v31;
  _OWORD *v32;
  void *v33;
  _OWORD *v36;
  __int128 v37;
  char *v38;

  if (a24 < 0)
    operator delete(__p);
  j__free(v33);
  sub_240B8A994((uint64_t)&a26);
  if (a2 == 1)
  {
    v36 = __cxa_begin_catch(a1);
    v37 = v36[2];
    *v32 = v36[1];
    v32[1] = v37;
    v38 = (char *)(*(uint64_t (**)(_OWORD *))(*(_QWORD *)v36 + 16))(v36);
    sub_240B8CFFC((uint64_t)v32, a12, v38);
    *v31 = 0;
    __cxa_end_catch();
    JUMPOUT(0x240B9018CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_240B90738(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  if ((a4 & 1) == 0)
  {
    v4 = *a2;
    if ((int)v4 > (int)a3)
    {
      v5 = a1 + 72 * (int)v4;
      v6 = *(_QWORD *)(v5 + 8);
      v7 = v5 - 71;
      do
      {
        *(_BYTE *)v7 = *(_BYTE *)(v6 + 1);
        if (*(_BYTE *)(v6 + 1))
          v8 = *(_QWORD *)(v6 + 24);
        else
          v8 = 0;
        --v4;
        *(_QWORD *)(v7 + 23) = v8;
        v9 = *(_OWORD *)(v6 + 32);
        *(_OWORD *)(v7 + 47) = *(_OWORD *)(v6 + 48);
        *(_OWORD *)(v7 + 31) = v9;
        v6 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)(v7 + 7) = v6;
        v7 -= 72;
      }
      while (v4 > (int)a3);
      *a2 = a3;
    }
  }
  return a3;
}

uint64_t sub_240B907B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_240B90874(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v1);
  _Unwind_Resume(a1);
}

char *sub_240B9089C@<X0>(char *result@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  size_t v4;
  unint64_t v5;
  unint64_t v6;
  const void **v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  v3 = *((_DWORD *)result + 26);
  if ((v3 & 0x10) != 0)
  {
    v5 = *((_QWORD *)result + 12);
    v6 = *((_QWORD *)result + 7);
    if (v5 < v6)
    {
      *((_QWORD *)result + 12) = v6;
      v5 = v6;
    }
    v7 = (const void **)(result + 48);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      v4 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    v7 = (const void **)(result + 24);
    v5 = *((_QWORD *)result + 5);
  }
  v8 = *v7;
  v4 = v5 - (_QWORD)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    *((_QWORD *)a2 + 1) = v4;
    *((_QWORD *)a2 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)a2 = v11;
    a2 = v11;
  }
  else
  {
    a2[23] = v4;
    if (!v4)
      goto LABEL_16;
  }
  result = (char *)memmove(a2, v8, v4);
LABEL_16:
  a2[v4] = 0;
  return result;
}

uint64_t sub_240B90974(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C630;
  v3 = a1 + 48;
  if (*((char *)a2 + 23) < 0)
  {
    sub_240B6FF68((_BYTE *)v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_240B909D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B91660(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B909EC(uint64_t a1, char *__s, const char *a3)
{
  void *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C608;
  v6 = (void *)(a1 + 48);
  v7 = strlen(__s);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 71) = v7;
  v9 = v6;
  if (v7)
LABEL_8:
    memmove(v9, __s, v8);
  *((_BYTE *)v9 + v8) = 0;
  v12 = (void *)(a1 + 72);
  v13 = strlen(a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v12 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 88) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 72) = v12;
  }
  else
  {
    *(_BYTE *)(a1 + 95) = v13;
    if (!v13)
      goto LABEL_17;
  }
  memmove(v12, a3, v14);
LABEL_17:
  *((_BYTE *)v12 + v14) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  return a1;
}

void sub_240B90B54(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  sub_240B91660((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B90B80(uint64_t a1)
{
  *(_QWORD *)a1 = off_25110C608;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return sub_240B91660((_QWORD *)a1);
}

void sub_240B90BBC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_25110C608;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = (void *)sub_240B91660((_QWORD *)a1);
  j__free(v2);
}

uint64_t sub_240B90BFC()
{
  return 1;
}

uint64_t sub_240B90C04(uint64_t a1)
{
  *(_QWORD *)a1 = off_25110C630;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return sub_240B91660((_QWORD *)a1);
}

void sub_240B90C40(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_25110C630;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = (void *)sub_240B91660((_QWORD *)a1);
  j__free(v2);
}

uint64_t sub_240B90C80()
{
  return 4;
}

uint64_t sub_240B90C88(uint64_t a1, char *__s, uint64_t *a3)
{
  void *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C608;
  v6 = (void *)(a1 + 48);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v9;
  }
  else
  {
    *(_BYTE *)(a1 + 71) = v7;
    v9 = v6;
    if (!v7)
      goto LABEL_9;
  }
  memmove(v9, __s, v8);
LABEL_9:
  *((_BYTE *)v9 + v8) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  sub_240B700B4((char *)(a1 + 72), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  *(_DWORD *)(a1 + 96) = 3;
  return a1;
}

void sub_240B90D98(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  sub_240B91660((_QWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B90DC4(uint64_t a1, char *__s, uint64_t a3)
{
  void *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int64_t v13;
  char *v14;
  char *v15;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C608;
  v6 = (void *)(a1 + 48);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v11 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v9;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 71) = v7;
  v9 = v6;
  if (v7)
LABEL_8:
    memmove(v9, __s, v8);
  *((_BYTE *)v9 + v8) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v12 = *(const void **)a3;
  v13 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v13)
  {
    if (v13 < 0)
      sub_240B70258();
    v14 = (char *)operator new(v13);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 88) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 80) = v15;
  }
  *(_DWORD *)(a1 + 96) = 4;
  return a1;
}

void sub_240B90EFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  sub_240B91660((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_240B90F3C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_240B931AC(a1);
  j__free(v1);
}

uint64_t sub_240B90F50()
{
  return 0;
}

void sub_240B90F5C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_240B93284(a1);
  j__free(v1);
}

uint64_t sub_240B90F70()
{
  return 11;
}

char *sub_240B90F78(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_240B70258();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_240B7007C();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12)
      return v10;
    goto LABEL_20;
  }
  do
  {
    v13 = *(_OWORD *)(v12 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((_QWORD *)v12 - 2) = 0;
    *((_QWORD *)v12 - 1) = 0;
    *((_QWORD *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  v14 = (char *)*a1;
  v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0)
        operator delete(*((void **)v12 - 3));
      v12 -= 24;
    }
    while (v12 != v14);
    v12 = v14;
  }
  if (v12)
LABEL_20:
    operator delete(v12);
  return v10;
}

uint64_t sub_240B910E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char ***a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char **v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[5];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (a2 < 1)
    return 0;
  v9 = sub_240B910E0(*(_QWORD *)(a1 + 8));
  if (!(_DWORD)v9)
  {
    if (*(_BYTE *)(a1 + 1))
      return 0;
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(v11 + 64);
    if (v12)
    {
      v13 = (uint64_t *)(v11 + 8);
      while (1)
      {
        v14 = *(int *)(v11 + 4);
        if ((_DWORD)v14 != *(_DWORD *)(v12 + 4))
        {
LABEL_37:
          sub_240B9141C(a1, 1);
          sub_240B8CFFC(a1 + 32, a4, "syntax is ambiguous");
          return 2;
        }
        if (((0x412100091221uLL >> v14) & 1) == 0)
        {
          v15 = byte_240BBBC66[v14] + 1;
          v16 = (uint64_t *)(v11 + 8);
          v17 = (uint64_t *)(v12 + 8);
          do
          {
            v18 = *v17;
            v19 = *v16;
            if (*(_QWORD *)(v19 + 16) != *(_QWORD *)(v18 + 16))
              goto LABEL_37;
            v16 = (uint64_t *)(v19 + 8);
            v17 = (uint64_t *)(v18 + 8);
            --v15;
          }
          while (v15 > 1);
          if (((0x412100091221uLL >> v14) & 1) == 0)
          {
            v20 = *v13;
            v21 = *(_QWORD *)(v12 + 8);
            if (*v13 != v21)
              break;
          }
        }
LABEL_8:
        v12 = *(_QWORD *)(v12 + 64);
        *(_QWORD *)(v11 + 64) = v12;
        if (!v12)
          goto LABEL_38;
      }
      v22 = byte_240BBBC66[v14];
      while (1)
      {
        if (*(_BYTE *)(v20 + 1))
        {
          *(_BYTE *)(v21 + 1) = 1;
          v23 = *(_QWORD *)(v20 + 24);
        }
        else
        {
          if (*(_BYTE *)(v21 + 1))
          {
            *(_BYTE *)(v20 + 1) = 1;
            *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 24);
            if (v22 < 2)
              goto LABEL_8;
            goto LABEL_19;
          }
          v24 = *(_QWORD *)(v20 + 24);
          v25 = *(_QWORD *)(v21 + 24);
          if (v25)
            v26 = v25 == v24;
          else
            v26 = 1;
          if (!v26)
          {
            v27 = (unint64_t *)(v20 + 24);
            while (v24)
            {
              if (v24 < v25)
              {
                *v27 = v25;
                v28 = *(_QWORD *)(v25 + 64);
                *(_QWORD *)(v25 + 64) = v24;
                v24 = *v27;
                v25 = v28;
              }
              if (v25)
              {
                v27 = (unint64_t *)(v24 + 64);
                v24 = *(_QWORD *)(v24 + 64);
                if (v25 != v24)
                  continue;
              }
              goto LABEL_36;
            }
            *v27 = v25;
          }
LABEL_36:
          v23 = *(_QWORD *)(v20 + 24);
        }
        *(_QWORD *)(v21 + 24) = v23;
        if (v22 < 2)
          goto LABEL_8;
LABEL_19:
        --v22;
        v20 = *(_QWORD *)(v20 + 8);
        v21 = *(_QWORD *)(v21 + 8);
        if (v20 == v21)
          goto LABEL_8;
      }
    }
LABEL_38:
    v29 = (uint64_t *)(v11 + 8);
    v30 = *(int *)(v11 + 4);
    v31 = byte_240BBBC66[v30];
    v32 = sub_240B910E0(*(_QWORD *)(v11 + 8));
    if ((_DWORD)v32)
    {
      v9 = v32;
      if (((0xBEDEFFF6EDDEuLL >> v30) & 1) == 0)
      {
LABEL_47:
        *(_QWORD *)(a1 + 24) = 0;
        return v9;
      }
      v33 = v31 + 1;
      do
      {
        v34 = *v29;
        sub_240B8D1F4(*v29);
        v29 = (uint64_t *)(v34 + 8);
        --v33;
      }
      while (v33 > 1);
    }
    else
    {
      v35 = *v29;
      v46 = *v29;
      if (((0x412100091221uLL >> v30) & 1) != 0)
      {
        v36 = *(_OWORD *)(v35 + 48);
        v45[2] = *(_OWORD *)(v35 + 32);
        v45[3] = v36;
      }
      v37 = *(_DWORD *)(a3 + 228);
      v38 = *(_QWORD *)(a3 + 232);
      v39 = *(_OWORD *)(a3 + 256);
      v43 = *(_OWORD *)(a3 + 240);
      v44 = v39;
      *(_DWORD *)(a3 + 228) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)(a3 + 232) = *(_QWORD *)(v11 + 24);
      v40 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(a3 + 240) = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(a3 + 256) = v40;
      v9 = sub_240B8D510(*(_DWORD *)(v11 + 4), v31, (uint64_t)v45, a3, &v42, (_OWORD *)(a1 + 32), a4, a5);
      *(_DWORD *)(a3 + 228) = v37;
      *(_QWORD *)(a3 + 232) = v38;
      v41 = v44;
      *(_OWORD *)(a3 + 240) = v43;
      *(_OWORD *)(a3 + 256) = v41;
    }
    if (!(_DWORD)v9)
    {
      *(_BYTE *)(a1 + 1) = 1;
      *(_QWORD *)(a1 + 24) = v42;
      return v9;
    }
    goto LABEL_47;
  }
  return v9;
}

__n128 sub_240B9141C(uint64_t a1, int a2)
{
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __n128 *v15;
  _QWORD v16[4];
  __int128 v17;
  _OWORD v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a2 >= 1)
  {
    sub_240B9141C(*(_QWORD *)(a1 + 8));
    if (!*(_BYTE *)(a1 + 1))
    {
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(int *)(v4 + 4);
      v6 = byte_240BBBC66[v5];
      if (((0xBEDEFFF6EDDEuLL >> v5) & 1) != 0)
      {
        v10 = *(_QWORD *)(v4 + 8);
        v9 = (uint64_t *)(v4 + 8);
        sub_240B9141C(v10);
        v11 = v6 + 1;
        v12 = &v16[9 * v6 + 4];
        do
        {
          v13 = *v9;
          v14 = *(_OWORD *)(*v9 + 48);
          *v12 = *(_OWORD *)(*v9 + 32);
          v12[1] = v14;
          v9 = (uint64_t *)(v13 + 8);
          --v11;
          v12 = (_OWORD *)((char *)v12 - 72);
        }
        while (v11 > 1);
      }
      else
      {
        v7 = *(_QWORD *)(v4 + 8);
        v8 = *(_OWORD *)(v7 + 48);
        v17 = *(_OWORD *)(v7 + 32);
        v18[0] = v8;
      }
      v15 = (__n128 *)(a1 + 32);
      if (((0x412100091221uLL >> v5) & 1) != 0)
      {
        result = (__n128)v18[0];
        *(_OWORD *)(a1 + 48) = v18[0];
        *v15 = result;
      }
      else
      {
        *v15 = *(__n128 *)((char *)&v18[3] + 8);
        result = *(__n128 *)((char *)v18 + 72 * (int)v6);
        *(__n128 *)(a1 + 48) = result;
      }
    }
  }
  return result;
}

size_t sub_240B91554@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  size_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  if (sub_240B6F70C(a1, &v8))
  {
    result = fwrite("Lex initialization failed.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_240B6F4F0(*MEMORY[0x24BDAC8E0], v8);
    v7 = 0;
    sub_240B8D288(v6, v8, (uint64_t)&v7);
    if (sub_240B8D2B4((uint64_t)v6))
    {
      *a2 = 0;
      a2[1] = 0;
    }
    else
    {
      sub_240B6F7B0(v8);
      v4 = v7;
      *a2 = v7;
      v5 = (_QWORD *)operator new();
      *v5 = &off_25110C7C0;
      v5[1] = 0;
      v5[2] = 0;
      v5[3] = v4;
      a2[1] = v5;
    }
    return nullsub_28(v6);
  }
  return result;
}

void sub_240B91630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  nullsub_28(va);
  _Unwind_Resume(a1);
}

uint64_t sub_240B91660(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = off_25110C6A8;
  v2 = (_QWORD *)a1[3];
  v3 = (_QWORD *)a1[4];
  if (v2 == v3)
  {
    a1[4] = v2;
    if (v2)
LABEL_3:
      operator delete(v2);
  }
  else
  {
    do
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[3];
    a1[4] = v2;
    if (v2)
      goto LABEL_3;
  }
  return nullsub_34(a1);
}

void sub_240B916EC(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  char *v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0)
      sub_240B70258();
    v7 = (char *)operator new(v3 - v4);
    *a2 = v7;
    a2[2] = &v7[8 * (v5 >> 3)];
    bzero(v7, v5);
    v8 = 0;
    a2[1] = &v7[v5];
    do
    {
      *(_QWORD *)&v7[8 * v8] = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v8);
      ++v8;
      v7 = *a2;
    }
    while (v8 < (a2[1] - *a2) >> 3);
  }
}

void sub_240B9178C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B917A8(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  int64_t v15;
  char *v16;
  char *v17;
  const void *v18;
  int64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  char **v46;

  *(_OWORD *)(a1 + 24) = 0u;
  v46 = (char **)(a1 + 24);
  *(_QWORD *)a1 = off_25110C6A8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(const void **)a4;
  v8 = *(_QWORD *)(a4 + 8);
  v10 = v8 - *(_QWORD *)a4;
  if (v8 == *(_QWORD *)a4)
  {
    v12 = 0;
  }
  else
  {
    if (v10 < 0)
      sub_240B70258();
    v11 = (char *)operator new(v8 - *(_QWORD *)a4);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(a1 + 40) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 32) = v12;
  }
  *(_QWORD *)a1 = off_25110C6D0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v14 = *a3;
  v13 = a3[1];
  v15 = (char *)v13 - (char *)*a3;
  if (v13 != *a3)
  {
    if (v15 < 0)
      sub_240B70258();
    v16 = (char *)operator new((char *)v13 - (char *)*a3);
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)(a1 + 72) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 64) = v17;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v18 = *(const void **)a4;
  v19 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v19)
  {
    if (v19 < 0)
      sub_240B70258();
    v20 = (char *)operator new(v19);
    *(_QWORD *)(a1 + 80) = v20;
    *(_QWORD *)(a1 + 88) = v20;
    v21 = &v20[8 * (v19 >> 3)];
    *(_QWORD *)(a1 + 96) = v21;
    memcpy(v20, v18, v19);
    *(_QWORD *)(a1 + 88) = v21;
  }
  v23 = *a3;
  v22 = a3[1];
  while (v23 != v22)
  {
    v25 = *v23;
    v26 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v12 < v26)
    {
      *(_QWORD *)v12 = v25;
      v24 = v12 + 8;
      goto LABEL_13;
    }
    v27 = *v46;
    v28 = v12 - *v46;
    v29 = v28 >> 3;
    v30 = (v28 >> 3) + 1;
    if (v30 >> 61)
      sub_240B70258();
    v31 = v26 - (_QWORD)v27;
    if (v31 >> 2 > v30)
      v30 = v31 >> 2;
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
      v32 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v32 = v30;
    if (v32)
    {
      if (v32 >> 61)
        sub_240B7007C();
      v33 = operator new(8 * v32);
    }
    else
    {
      v33 = 0;
    }
    v34 = &v33[8 * v29];
    *v34 = v25;
    v24 = (char *)(v34 + 1);
    if (v12 != v27)
    {
      v35 = v12 - v27 - 8;
      if (v35 < 0x168)
      {
        v36 = v12;
        goto LABEL_29;
      }
      v38 = (v12 - 8 - v27) & 0xFFFFFFFFFFFFFFF8;
      if (&v33[v28 - 8 - v38] > &v33[v28 - 8])
      {
        v36 = v12;
        goto LABEL_29;
      }
      if (&v12[-v38 - 8] > v12 - 8)
      {
        v36 = v12;
        goto LABEL_29;
      }
      if ((unint64_t)(v12 - v33 - v28) < 0x20)
      {
        v36 = v12;
        goto LABEL_29;
      }
      v39 = (v35 >> 3) + 1;
      v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      v36 = &v12[-v40];
      v34 = (_QWORD *)((char *)v34 - v40);
      v41 = &v33[8 * v29 - 16];
      v42 = v12 - 16;
      v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_29:
          v37 = *((_QWORD *)v36 - 1);
          v36 -= 8;
          *--v34 = v37;
        }
        while (v36 != v27);
      }
      v12 = *v46;
    }
    *(_QWORD *)(a1 + 24) = v34;
    *(_QWORD *)(a1 + 32) = v24;
    *(_QWORD *)(a1 + 40) = &v33[8 * v32];
    if (v12)
      operator delete(v12);
LABEL_13:
    *(_QWORD *)(a1 + 32) = v24;
    ++v23;
    v12 = v24;
  }
  return a1;
}

void sub_240B91ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  _QWORD *v11;
  void *v13;
  void *v14;

  v13 = *a10;
  if (*a10)
  {
    v11[11] = v13;
    operator delete(v13);
  }
  v14 = *a11;
  if (*a11)
  {
    v11[8] = v14;
    operator delete(v14);
  }
  sub_240B91660(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_240B91B34(uint64_t a1, char *__s, uint64_t **a3)
{
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  char **v41;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C6F8;
  v6 = (void *)(a1 + 48);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v6 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 71) = v7;
    if (!v7)
      goto LABEL_9;
  }
  memmove(v6, __s, v8);
LABEL_9:
  *((_BYTE *)v6 + v8) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v12 = *a3;
  v11 = a3[1];
  v13 = (char *)v11 - (char *)*a3;
  if (v11 != *a3)
  {
    if (v13 < 0)
      sub_240B70258();
    v14 = (char *)operator new((char *)v11 - (char *)*a3);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 88) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 80) = v15;
    v16 = *a3;
    v17 = a3[1];
    if (*a3 != v17)
    {
      v41 = (char **)(a1 + 24);
      v18 = *(_QWORD **)(a1 + 32);
      while (1)
      {
        v20 = *v16;
        v21 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v18 >= v21)
          break;
        *v18 = v20;
        v19 = v18 + 1;
LABEL_14:
        *(_QWORD *)(a1 + 32) = v19;
        ++v16;
        v18 = v19;
        if (v16 == v17)
          return a1;
      }
      v22 = *v41;
      v23 = (char *)v18 - *v41;
      v24 = v23 >> 3;
      v25 = (v23 >> 3) + 1;
      if (v25 >> 61)
        sub_240B70258();
      v26 = v21 - (_QWORD)v22;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 61)
          sub_240B7007C();
        v28 = operator new(8 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      *v29 = v20;
      v19 = v29 + 1;
      if (v18 == (_QWORD *)v22)
      {
LABEL_31:
        *(_QWORD *)(a1 + 24) = v29;
        *(_QWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a1 + 40) = &v28[8 * v27];
        if (v18)
          operator delete(v18);
        goto LABEL_14;
      }
      v30 = (char *)v18 - v22 - 8;
      if (v30 >= 0x168)
      {
        v33 = ((char *)(v18 - 1) - v22) & 0xFFFFFFFFFFFFFFF8;
        if (&v28[v23 - 8 - v33] > &v28[v23 - 8])
        {
          v31 = (char *)v18;
        }
        else if ((_QWORD *)((char *)v18 - v33 - 8) > v18 - 1)
        {
          v31 = (char *)v18;
        }
        else if ((unint64_t)((char *)v18 - v28 - v23) >= 0x20)
        {
          v34 = (v30 >> 3) + 1;
          v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = (char *)&v18[v35 / 0xFFFFFFFFFFFFFFF8];
          v29 = (_QWORD *)((char *)v29 - v35);
          v36 = &v28[8 * v24 - 16];
          v37 = (__int128 *)(v18 - 2);
          v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_30;
        }
        else
        {
          v31 = (char *)v18;
        }
      }
      else
      {
        v31 = (char *)v18;
      }
      do
      {
        v32 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v29 = v32;
      }
      while (v31 != v22);
LABEL_30:
      v18 = *v41;
      goto LABEL_31;
    }
  }
  return a1;
}

void sub_240B91E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  uint64_t v11;
  void *v13;

  v13 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v11 + 80) = v13;
    operator delete(v13);
  }
  if (*(char *)(v11 + 71) < 0)
    operator delete(*a10);
  sub_240B91660((_QWORD *)v11);
  _Unwind_Resume(a1);
}

uint64_t sub_240B91E74(uint64_t a1, _WORD **a2, uint64_t **a3)
{
  uint64_t *v4;
  uint64_t *v5;
  int64_t v6;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  char **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  __int128 *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  size_t v35;
  _WORD *v36;
  int v38;
  _WORD *v39;
  _WORD *v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = off_25110C720;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v5 = *a3;
  v4 = a3[1];
  v6 = (char *)v4 - (char *)*a3;
  if (v4 != *a3)
  {
    if (v6 < 0)
      sub_240B70258();
    v8 = (char *)operator new((char *)v4 - (char *)*a3);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    v9 = &v8[8 * (v6 >> 3)];
    *(_QWORD *)(a1 + 64) = v9;
    memcpy(v8, v5, v6);
    *(_QWORD *)(a1 + 56) = v9;
    v10 = *a3;
    v11 = a3[1];
    if (*a3 != v11)
    {
      v12 = 0;
      v13 = (char **)(a1 + 24);
      while (1)
      {
        v15 = *v10;
        v16 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v12 >= v16)
          break;
        *v12 = v15;
        v14 = v12 + 1;
LABEL_6:
        *(_QWORD *)(a1 + 32) = v14;
        ++v10;
        v12 = v14;
        if (v10 == v11)
          goto LABEL_35;
      }
      v17 = *v13;
      v18 = (char *)v12 - *v13;
      v19 = (v18 >> 3) + 1;
      if (v19 >> 61)
        sub_240B70258();
      v20 = v16 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_240B7007C();
        v22 = operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * (v18 >> 3)];
      *v23 = v15;
      v14 = v23 + 1;
      if (v12 == (_QWORD *)v17)
      {
LABEL_23:
        *(_QWORD *)(a1 + 24) = v23;
        *(_QWORD *)(a1 + 32) = v14;
        *(_QWORD *)(a1 + 40) = &v22[8 * v21];
        if (v12)
          operator delete(v12);
        goto LABEL_6;
      }
      v24 = (char *)v12 - v17 - 8;
      if (v24 >= 0x168)
      {
        v27 = ((char *)(v12 - 1) - v17) & 0xFFFFFFFFFFFFFFF8;
        if (&v22[v18 - 8 - v27] > &v22[v18 - 8])
        {
          v25 = (char *)v12;
        }
        else if ((_QWORD *)((char *)v12 - v27 - 8) > v12 - 1)
        {
          v25 = (char *)v12;
        }
        else if ((unint64_t)((char *)v12 - v22 - v18) >= 0x20)
        {
          v28 = (v24 >> 3) + 1;
          v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
          v25 = (char *)&v12[v29 / 0xFFFFFFFFFFFFFFF8];
          v23 = (_QWORD *)((char *)v23 - v29);
          v30 = &v22[v18 - 16];
          v31 = (__int128 *)(v12 - 2);
          v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v33 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *v30 = v33;
            v30 -= 2;
            v31 -= 2;
            v32 -= 4;
          }
          while (v32);
          if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_22;
        }
        else
        {
          v25 = (char *)v12;
        }
      }
      else
      {
        v25 = (char *)v12;
      }
      do
      {
        v26 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v26;
      }
      while (v25 != v17);
LABEL_22:
      v12 = *v13;
      goto LABEL_23;
    }
  }
LABEL_35:
  v34 = *((char *)a2 + 23);
  if (v34 >= 0)
    v35 = *((unsigned __int8 *)a2 + 23);
  else
    v35 = (size_t)a2[1];
  switch(v35)
  {
    case 6uLL:
      if (v34 >= 0)
        v36 = a2;
      else
        v36 = *a2;
      if (!memcmp(v36, "filter", v35))
      {
        v38 = 5;
      }
      else if (!memcmp(v36, "kernel", v35))
      {
        v38 = 10;
      }
      else
      {
        if (*(_DWORD *)v36 != 1936614772 || v36[2] != 29295)
          goto LABEL_70;
        v38 = 15;
      }
      break;
    case 7uLL:
      if (v34 >= 0)
        v40 = a2;
      else
        v40 = *a2;
      if (memcmp(v40, "library", v35))
        goto LABEL_70;
      v38 = 12;
      break;
    case 8uLL:
      if (v34 >= 0)
        v39 = a2;
      else
        v39 = *a2;
      if (memcmp(v39, "iterator", v35))
        goto LABEL_70;
      v38 = 9;
      break;
    case 0x12uLL:
      if (v34 >= 0)
        v41 = a2;
      else
        v41 = *a2;
      v42 = *(_QWORD *)v41;
      v43 = *((_QWORD *)v41 + 1);
      v44 = (unsigned __int16)v41[8];
      if (v42 != 0x6172672D736E6E62 || v43 != 0x65746E6F632D6870 || v44 != 29816)
        goto LABEL_70;
      v38 = 2;
      break;
    default:
LABEL_70:
      v38 = 4;
      break;
  }
  *(_DWORD *)(a1 + 72) = v38;
  return a1;
}

void sub_240B92228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  void *v11;

  v11 = *a9;
  if (*a9)
  {
    v9[7] = v11;
    operator delete(v11);
  }
  sub_240B91660(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_240B9225C(uint64_t a1, char *__s)
{
  void *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C748;
  v4 = (void *)(a1 + 48);
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v4 = operator new(v7 + 1);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v8 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v4;
  }
  else
  {
    *(_BYTE *)(a1 + 71) = v5;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v4, __s, v6);
LABEL_9:
  *((_BYTE *)v4 + v6) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void sub_240B9233C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B91660(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B92350(uint64_t a1, char *__s, uint64_t **a3, uint64_t **a4)
{
  void *v8;
  size_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t *v48;
  uint64_t *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _QWORD *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t **v73;
  char **v74;
  char **v75;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C748;
  v8 = (void *)(a1 + 48);
  v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v13 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v11;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 71) = v9;
  v11 = v8;
  if (v9)
LABEL_8:
    memmove(v11, __s, v10);
  *((_BYTE *)v11 + v10) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v15 = *a3;
  v14 = a3[1];
  v16 = (char *)v14 - (char *)*a3;
  if (v14 != *a3)
  {
    if (v16 < 0)
      sub_240B70258();
    v17 = (char *)operator new(v16);
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v17;
    v18 = &v17[8 * (v16 >> 3)];
    *(_QWORD *)(a1 + 88) = v18;
    memcpy(v17, v15, v16);
    *(_QWORD *)(a1 + 80) = v18;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v20 = *a4;
  v19 = a4[1];
  v21 = (char *)v19 - (char *)*a4;
  if (v19 != *a4)
  {
    if (v21 < 0)
      sub_240B70258();
    v22 = (char *)operator new(v21);
    *(_QWORD *)(a1 + 96) = v22;
    *(_QWORD *)(a1 + 104) = v22;
    v23 = &v22[8 * (v21 >> 3)];
    *(_QWORD *)(a1 + 112) = v23;
    memcpy(v22, v20, v21);
    *(_QWORD *)(a1 + 104) = v23;
  }
  v73 = a4;
  v24 = *a3;
  v25 = a3[1];
  if (*a3 != v25)
  {
    v74 = (char **)(a1 + 24);
    v26 = *(_QWORD **)(a1 + 32);
    while (1)
    {
      v28 = *v24;
      v29 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v26 >= v29)
        break;
      *v26 = v28;
      v27 = v26 + 1;
LABEL_18:
      *(_QWORD *)(a1 + 32) = v27;
      ++v24;
      v26 = v27;
      if (v24 == v25)
        goto LABEL_47;
    }
    v30 = *v74;
    v31 = (char *)v26 - *v74;
    v32 = v31 >> 3;
    v33 = (v31 >> 3) + 1;
    if (v33 >> 61)
      sub_240B70258();
    v34 = v29 - (_QWORD)v30;
    if (v34 >> 2 > v33)
      v33 = v34 >> 2;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v35 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35)
    {
      if (v35 >> 61)
        sub_240B7007C();
      v36 = operator new(8 * v35);
    }
    else
    {
      v36 = 0;
    }
    v37 = &v36[8 * v32];
    *v37 = v28;
    v27 = v37 + 1;
    if (v26 == (_QWORD *)v30)
    {
LABEL_35:
      *(_QWORD *)(a1 + 24) = v37;
      *(_QWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 40) = &v36[8 * v35];
      if (v26)
        operator delete(v26);
      goto LABEL_18;
    }
    v38 = (char *)v26 - v30 - 8;
    if (v38 >= 0x168)
    {
      v41 = ((char *)(v26 - 1) - v30) & 0xFFFFFFFFFFFFFFF8;
      if (&v36[v31 - 8 - v41] > &v36[v31 - 8])
      {
        v39 = (char *)v26;
      }
      else if ((_QWORD *)((char *)v26 - v41 - 8) > v26 - 1)
      {
        v39 = (char *)v26;
      }
      else if ((unint64_t)((char *)v26 - v36 - v31) >= 0x20)
      {
        v42 = (v38 >> 3) + 1;
        v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        v39 = (char *)&v26[v43 / 0xFFFFFFFFFFFFFFF8];
        v37 = (_QWORD *)((char *)v37 - v43);
        v44 = &v36[8 * v32 - 16];
        v45 = (__int128 *)(v26 - 2);
        v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
      }
      else
      {
        v39 = (char *)v26;
      }
    }
    else
    {
      v39 = (char *)v26;
    }
    do
    {
      v40 = *((_QWORD *)v39 - 1);
      v39 -= 8;
      *--v37 = v40;
    }
    while (v39 != v30);
LABEL_34:
    v26 = *v74;
    goto LABEL_35;
  }
LABEL_47:
  v48 = *v73;
  v49 = v73[1];
  if (*v73 != v49)
  {
    v75 = (char **)(a1 + 24);
    v50 = *(_QWORD **)(a1 + 32);
    while (1)
    {
      v52 = *v48;
      v53 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v50 >= v53)
        break;
      *v50 = v52;
      v51 = v50 + 1;
LABEL_50:
      *(_QWORD *)(a1 + 32) = v51;
      ++v48;
      v50 = v51;
      if (v48 == v49)
        return a1;
    }
    v54 = *v75;
    v55 = (char *)v50 - *v75;
    v56 = v55 >> 3;
    v57 = (v55 >> 3) + 1;
    if (v57 >> 61)
      sub_240B70258();
    v58 = v53 - (_QWORD)v54;
    if (v58 >> 2 > v57)
      v57 = v58 >> 2;
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v57;
    if (v59)
    {
      if (v59 >> 61)
        sub_240B7007C();
      v60 = operator new(8 * v59);
    }
    else
    {
      v60 = 0;
    }
    v61 = &v60[8 * v56];
    *v61 = v52;
    v51 = v61 + 1;
    if (v50 == (_QWORD *)v54)
    {
LABEL_67:
      *(_QWORD *)(a1 + 24) = v61;
      *(_QWORD *)(a1 + 32) = v51;
      *(_QWORD *)(a1 + 40) = &v60[8 * v59];
      if (v50)
        operator delete(v50);
      goto LABEL_50;
    }
    v62 = (char *)v50 - v54 - 8;
    if (v62 >= 0x168)
    {
      v65 = ((char *)(v50 - 1) - v54) & 0xFFFFFFFFFFFFFFF8;
      if (&v60[v55 - 8 - v65] > &v60[v55 - 8])
      {
        v63 = (char *)v50;
      }
      else if ((_QWORD *)((char *)v50 - v65 - 8) > v50 - 1)
      {
        v63 = (char *)v50;
      }
      else if ((unint64_t)((char *)v50 - v60 - v55) >= 0x20)
      {
        v66 = (v62 >> 3) + 1;
        v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
        v63 = (char *)&v50[v67 / 0xFFFFFFFFFFFFFFF8];
        v61 = (_QWORD *)((char *)v61 - v67);
        v68 = &v60[8 * v56 - 16];
        v69 = (__int128 *)(v50 - 2);
        v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v71 = *v69;
          *(v68 - 1) = *(v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 2;
          v70 -= 4;
        }
        while (v70);
        if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_66;
      }
      else
      {
        v63 = (char *)v50;
      }
    }
    else
    {
      v63 = (char *)v50;
    }
    do
    {
      v64 = *((_QWORD *)v63 - 1);
      v63 -= 8;
      *--v61 = v64;
    }
    while (v63 != v54);
LABEL_66:
    v50 = *v75;
    goto LABEL_67;
  }
  return a1;
}

void sub_240B92850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  void **v13;
  void *v15;
  void *v16;

  v15 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 104) = v15;
    operator delete(v15);
  }
  v16 = *a12;
  if (*a12)
  {
    *(_QWORD *)(v12 + 80) = v16;
    operator delete(v16);
  }
  if (*(char *)(v12 + 71) < 0)
    operator delete(*a10);
  sub_240B91660((_QWORD *)v12);
  _Unwind_Resume(a1);
}

uint64_t sub_240B928D8(uint64_t a1, char *__s)
{
  void *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C770;
  v4 = (void *)(a1 + 48);
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v4 = operator new(v7 + 1);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v8 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v4;
  }
  else
  {
    *(_BYTE *)(a1 + 71) = v5;
    if (!v5)
      goto LABEL_9;
  }
  memmove(v4, __s, v6);
LABEL_9:
  *((_BYTE *)v4 + v6) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_240B929B0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_240B91660(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B929C4(uint64_t a1, char *__s, uint64_t **a3)
{
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  char **v41;

  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C770;
  v6 = (void *)(a1 + 48);
  v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v6 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v10 | 0x8000000000000000;
    *(_QWORD *)(a1 + 48) = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 71) = v7;
    if (!v7)
      goto LABEL_9;
  }
  memmove(v6, __s, v8);
LABEL_9:
  *((_BYTE *)v6 + v8) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v12 = *a3;
  v11 = a3[1];
  v13 = (char *)v11 - (char *)*a3;
  if (v11 != *a3)
  {
    if (v13 < 0)
      sub_240B70258();
    v14 = (char *)operator new((char *)v11 - (char *)*a3);
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 88) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 80) = v15;
    v16 = *a3;
    v17 = a3[1];
    if (*a3 != v17)
    {
      v41 = (char **)(a1 + 24);
      v18 = *(_QWORD **)(a1 + 32);
      while (1)
      {
        v20 = *v16;
        v21 = *(_QWORD *)(a1 + 40);
        if ((unint64_t)v18 >= v21)
          break;
        *v18 = v20;
        v19 = v18 + 1;
LABEL_14:
        *(_QWORD *)(a1 + 32) = v19;
        ++v16;
        v18 = v19;
        if (v16 == v17)
          return a1;
      }
      v22 = *v41;
      v23 = (char *)v18 - *v41;
      v24 = v23 >> 3;
      v25 = (v23 >> 3) + 1;
      if (v25 >> 61)
        sub_240B70258();
      v26 = v21 - (_QWORD)v22;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 61)
          sub_240B7007C();
        v28 = operator new(8 * v27);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      *v29 = v20;
      v19 = v29 + 1;
      if (v18 == (_QWORD *)v22)
      {
LABEL_31:
        *(_QWORD *)(a1 + 24) = v29;
        *(_QWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a1 + 40) = &v28[8 * v27];
        if (v18)
          operator delete(v18);
        goto LABEL_14;
      }
      v30 = (char *)v18 - v22 - 8;
      if (v30 >= 0x168)
      {
        v33 = ((char *)(v18 - 1) - v22) & 0xFFFFFFFFFFFFFFF8;
        if (&v28[v23 - 8 - v33] > &v28[v23 - 8])
        {
          v31 = (char *)v18;
        }
        else if ((_QWORD *)((char *)v18 - v33 - 8) > v18 - 1)
        {
          v31 = (char *)v18;
        }
        else if ((unint64_t)((char *)v18 - v28 - v23) >= 0x20)
        {
          v34 = (v30 >> 3) + 1;
          v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
          v31 = (char *)&v18[v35 / 0xFFFFFFFFFFFFFFF8];
          v29 = (_QWORD *)((char *)v29 - v35);
          v36 = &v28[8 * v24 - 16];
          v37 = (__int128 *)(v18 - 2);
          v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_30;
        }
        else
        {
          v31 = (char *)v18;
        }
      }
      else
      {
        v31 = (char *)v18;
      }
      do
      {
        v32 = *((_QWORD *)v31 - 1);
        v31 -= 8;
        *--v29 = v32;
      }
      while (v31 != v22);
LABEL_30:
      v18 = *v41;
      goto LABEL_31;
    }
  }
  return a1;
}

void sub_240B92CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  uint64_t v11;
  void *v13;

  v13 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v11 + 80) = v13;
    operator delete(v13);
  }
  if (*(char *)(v11 + 71) < 0)
    operator delete(*a10);
  sub_240B91660((_QWORD *)v11);
  _Unwind_Resume(a1);
}

uint64_t sub_240B92D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **i;

  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_25110C798;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(_QWORD **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v10 = v8 - *(_QWORD *)a3;
  if (v8 != *(_QWORD *)a3)
  {
    if (v10 < 0)
      sub_240B70258();
    v11 = (char *)operator new(v8 - *(_QWORD *)a3);
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(a1 + 72) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 64) = v12;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v14 = *(_QWORD **)a4;
  v13 = *(_QWORD *)(a4 + 8);
  v15 = v13 - *(_QWORD *)a4;
  if (v13 != *(_QWORD *)a4)
  {
    if (v15 < 0)
      sub_240B70258();
    v16 = (char *)operator new(v13 - *(_QWORD *)a4);
    *(_QWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 88) = v16;
    v17 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)(a1 + 96) = v17;
    memcpy(v16, v14, v15);
    *(_QWORD *)(a1 + 88) = v17;
  }
  v18 = operator new(8uLL);
  *v18 = a2;
  *(_QWORD *)(a1 + 32) = v18 + 1;
  *(_QWORD *)(a1 + 40) = v18 + 1;
  *(_QWORD *)(a1 + 24) = v18;
  v20 = *(_QWORD **)a3;
  v19 = *(_QWORD **)(a3 + 8);
  for (i = (void **)(a1 + 24); v20 != v19; ++v20)
    sub_240B93454(&i, v20);
  v22 = *(_QWORD **)a4;
  v21 = *(_QWORD **)(a4 + 8);
  for (i = (void **)(a1 + 24); v22 != v21; ++v22)
    sub_240B93454(&i, v22);
  return a1;
}

void sub_240B92E80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    v1[11] = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    v1[8] = v6;
    operator delete(v6);
  }
  sub_240B91660(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B92ECC(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;

  *a1 = off_25110C6D0;
  v2 = (void *)a1[7];
  a1[8] = v2;
  v3 = (void *)a1[10];
  a1[11] = v3;
  if (v3)
  {
    operator delete(v3);
    v2 = (void *)a1[7];
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = off_25110C6A8;
  v4 = (_QWORD *)a1[3];
  v5 = (_QWORD *)a1[4];
  if (v4 == v5)
  {
    a1[4] = v4;
    if (v4)
LABEL_7:
      operator delete(v4);
  }
  else
  {
    do
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      ++v4;
    }
    while (v4 != v5);
    v4 = (_QWORD *)a1[3];
    a1[4] = v4;
    if (v4)
      goto LABEL_7;
  }
  return nullsub_34(a1);
}

void sub_240B92F8C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_240B92ECC(a1);
  j__free(v1);
}

uint64_t sub_240B92FA0(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = off_25110C6F8;
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v2;
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)a1 = off_25110C6A8;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  if (v3 == v4)
  {
    *(_QWORD *)(a1 + 32) = v3;
    if (v3)
LABEL_7:
      operator delete(v3);
  }
  else
  {
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = v3;
    if (v3)
      goto LABEL_7;
  }
  return nullsub_34(a1);
}

void sub_240B93054(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_240B92FA0(a1);
  j__free(v1);
}

uint64_t sub_240B93068(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  *a1 = off_25110C720;
  v2 = (void *)a1[6];
  a1[7] = v2;
  if (v2)
    operator delete(v2);
  *a1 = off_25110C6A8;
  v3 = (_QWORD *)a1[3];
  v4 = (_QWORD *)a1[4];
  if (v3 == v4)
  {
    a1[4] = v3;
    if (v3)
LABEL_5:
      operator delete(v3);
  }
  else
  {
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = (_QWORD *)a1[3];
    a1[4] = v3;
    if (v3)
      goto LABEL_5;
  }
  return nullsub_34(a1);
}

void sub_240B93108(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  *a1 = off_25110C720;
  v2 = (void *)a1[6];
  a1[7] = v2;
  if (v2)
    operator delete(v2);
  *a1 = off_25110C6A8;
  v3 = (_QWORD *)a1[3];
  v4 = (_QWORD *)a1[4];
  if (v3 == v4)
  {
    a1[4] = v3;
    if (v3)
LABEL_5:
      operator delete(v3);
  }
  else
  {
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = (_QWORD *)a1[3];
    a1[4] = v3;
    if (v3)
      goto LABEL_5;
  }
  v5 = (void *)nullsub_34(a1);
  j__free(v5);
}

uint64_t sub_240B931AC(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = off_25110C748;
  v2 = *(void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = v2;
  if (v2)
    operator delete(v2);
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)a1 = off_25110C6A8;
  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD **)(a1 + 32);
  if (v4 == v5)
  {
    *(_QWORD *)(a1 + 32) = v4;
    if (v4)
LABEL_9:
      operator delete(v4);
  }
  else
  {
    do
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      ++v4;
    }
    while (v4 != v5);
    v4 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = v4;
    if (v4)
      goto LABEL_9;
  }
  return nullsub_34(a1);
}

void sub_240B93270(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_240B931AC(a1);
  j__free(v1);
}

uint64_t sub_240B93284(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = off_25110C770;
  v2 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 80) = v2;
  if (v2)
    operator delete(v2);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  *(_QWORD *)a1 = off_25110C6A8;
  v3 = *(_QWORD **)(a1 + 24);
  v4 = *(_QWORD **)(a1 + 32);
  if (v3 == v4)
  {
    *(_QWORD *)(a1 + 32) = v3;
    if (v3)
LABEL_7:
      operator delete(v3);
  }
  else
  {
    do
    {
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      ++v3;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)(a1 + 32) = v3;
    if (v3)
      goto LABEL_7;
  }
  return nullsub_34(a1);
}

void sub_240B93338(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_240B93284(a1);
  j__free(v1);
}

uint64_t sub_240B9334C(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;

  *a1 = off_25110C798;
  a1[6] = 0;
  v2 = (void *)a1[7];
  a1[8] = v2;
  v3 = (void *)a1[10];
  a1[11] = v3;
  if (v3)
  {
    operator delete(v3);
    v2 = (void *)a1[7];
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = off_25110C6A8;
  v4 = (_QWORD *)a1[3];
  v5 = (_QWORD *)a1[4];
  if (v4 == v5)
  {
    a1[4] = v4;
    if (v4)
LABEL_7:
      operator delete(v4);
  }
  else
  {
    do
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      ++v4;
    }
    while (v4 != v5);
    v4 = (_QWORD *)a1[3];
    a1[4] = v4;
    if (v4)
      goto LABEL_7;
  }
  return nullsub_34(a1);
}

void sub_240B93410(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_240B9334C(a1);
  j__free(v1);
}

uint64_t sub_240B93424()
{
  return 7;
}

uint64_t sub_240B9342C()
{
  return 14;
}

uint64_t sub_240B93434(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_240B9343C()
{
  return 6;
}

uint64_t sub_240B93444()
{
  return 8;
}

uint64_t sub_240B9344C()
{
  return 13;
}

void ***sub_240B93454(void ***a1, _QWORD *a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v4 = *a1;
  v6 = (char *)(*a1)[1];
  v5 = (unint64_t)(*a1)[2];
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = (char *)*v4;
    v10 = v6 - (_BYTE *)*v4;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + 1;
    if (v12 >> 61)
      sub_240B70258();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_240B7007C();
      v15 = operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 8;
      if (v17 < 0x58)
        goto LABEL_28;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_28;
      v18 = (v17 >> 3) + 1;
      v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v7 = &v6[-v19];
      v16 = (_QWORD *)((char *)v16 - v19);
      v20 = &v15[8 * v11 - 16];
      v21 = (__int128 *)(v6 - 16);
      v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          v24 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
      v7 = (char *)*v4;
    }
    *v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v6 = *a2;
    v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_240B935CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B935F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *sub_240B9360C(uint64_t *a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_25110C7F8;
  v3[1] = sub_240B936F8;
  v4 = v3;
  sub_240B9453C(a1, 0, 0, 3, 0, 0, v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_240B936BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B936F8(uint64_t **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  size_t v30;
  unint64_t v31;
  const void **v32;
  _BYTE *v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::size_type v38;
  _BYTE *v39;
  std::string::size_type v40;
  _BYTE v42[75];
  _BYTE v43[5];

  v8 = a5[1] - *a5;
  if (v8 != 1)
  {
    if (!v8)
    {
      sub_240BA8C08((_QWORD *)**a1, (uint64_t)&v42[32]);
      v9 = (unsigned __int8 *)a3[10];
      v10 = (unsigned __int8 *)a3[11];
      if (v9 != v10)
      {
        v11 = v42[55];
        v13 = *(const void **)&v42[32];
        v12 = *(_QWORD *)&v42[40];
        if (v42[55] >= 0)
          v14 = v42[55];
        else
          v14 = *(_QWORD *)&v42[40];
        do
        {
          v19 = v9[23];
          v20 = (char)v19;
          if ((v19 & 0x80u) != 0)
            v19 = *((_QWORD *)v9 + 1);
          if (v14 == v19)
          {
            if (v20 >= 0)
              v21 = v9;
            else
              v21 = *(unsigned __int8 **)v9;
            if ((v11 & 0x80) != 0)
            {
              if (!memcmp(v13, v21, v12))
                goto LABEL_22;
            }
            else
            {
              if (!(_DWORD)v11)
                goto LABEL_22;
              v22 = &v42[32];
              v23 = v11;
              while (*v22 == *v21)
              {
                ++v22;
                ++v21;
                if (!--v23)
                  goto LABEL_22;
              }
            }
          }
          v9 += 80;
        }
        while (v9 != v10);
        v9 = v10;
      }
LABEL_22:
      v24 = *((_QWORD *)v9 + 5);
      v25 = sub_240BA8BA4(**a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)**a1 + 224))(**a1, v25 + v24);
      if ((v42[55] & 0x80000000) != 0)
      {
        v26 = *(void **)&v42[32];
LABEL_56:
        operator delete(v26);
        return a2 + 1;
      }
    }
    return a2 + 1;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 216))(**a5);
  if (v16)
  {
    v17 = v16;
    v18 = sub_240BA8BA4(**a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)**a1 + 224))(**a1, v18 + v17);
    return a2 + 1;
  }
  v27 = (_QWORD *)a3[4];
  v28 = sub_240BA77BC(**a5);
  v29 = *(char *)(v28 + 23);
  if (v29 >= 0)
    v30 = *(unsigned __int8 *)(v28 + 23);
  else
    v30 = *(_QWORD *)(v28 + 8);
  v31 = v30 + 75;
  if (v30 + 75 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v32 = (const void **)v28;
  if (v31 <= 0x16)
  {
    v33 = v43;
    qmemcpy(v42, "All tensors must be allocated before initialization (user-allocated tensor ", sizeof(v42));
LABEL_33:
    if (v29 >= 0)
      v35 = v32;
    else
      v35 = *v32;
    memmove(v33, v35, v30);
    goto LABEL_37;
  }
  v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v31 | 7) != 0x17)
    v34 = v31 | 7;
  *(_QWORD *)&v42[8] = v30 + 75;
  *(_QWORD *)&v42[16] = (v34 + 1) | 0x8000000000000000;
  *(_QWORD *)v42 = operator new(v34 + 1);
  v33 = (_BYTE *)(*(_QWORD *)v42 + 75);
  qmemcpy(*(void **)v42, "All tensors must be allocated before initialization (user-allocated tensor ", 75);
  if (v30)
    goto LABEL_33;
LABEL_37:
  v33[v30] = 0;
  v36 = *(_QWORD *)&v42[16];
  if (v42[23] >= 0)
    v37 = 22;
  else
    v37 = (*(_QWORD *)&v42[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v42[23] >= 0)
    v38 = v42[23];
  else
    v38 = *(_QWORD *)&v42[8];
  if (v37 - v38 >= 0x19)
  {
    v39 = v42;
    if (v42[23] < 0)
      v39 = *(_BYTE **)v42;
    qmemcpy(&v39[v38], " had no address assigned)", 25);
    v40 = v38 + 25;
    if (v36 < 0)
      *(_QWORD *)&v42[8] = v38 + 25;
    else
      v42[23] = v40 & 0x7F;
    v39[v40] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)v42, v37, v38 - v37 + 25, v38, v38, 0, 0x19uLL, " had no address assigned)");
  }
  *(_OWORD *)&v42[32] = *(_OWORD *)v42;
  *(_QWORD *)&v42[48] = *(_QWORD *)&v42[16];
  memset(v42, 0, 24);
  sub_240BB7D38(v27, 1, (uint64_t)&v42[32]);
  if ((v42[55] & 0x80000000) != 0)
    operator delete(*(void **)&v42[32]);
  if ((v42[23] & 0x80000000) != 0)
  {
    v26 = *(void **)v42;
    goto LABEL_56;
  }
  return a2 + 1;
}

void sub_240B93A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240B93A9C()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240B93AB0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25110C7F8;
  result[1] = v3;
  return result;
}

uint64_t sub_240B93AE4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25110C7F8;
  a2[1] = v2;
  return result;
}

uint64_t sub_240B93B00(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(a1 + 8))(a2, *a3, *a4, a5, a6);
}

_QWORD *sub_240B93B20(uint64_t *a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_25110C7F8;
  v3[1] = sub_240B93C0C;
  v4 = v3;
  sub_240B9453C(a1, 0, 0, 2, 0, 0, v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_240B93BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B93C0C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  std::ios_base *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  void **v26;
  uint64_t v27;
  unint64_t v28;
  const void **v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *__p[2];
  __int128 v41;
  int v42;
  uint64_t v43[19];
  uint64_t v44;
  void *__dst[2];
  unint64_t v46;
  __int128 v47;
  uint64_t v48;

  HIBYTE(v46) = 6;
  strcpy((char *)__dst, "region");
  sub_240BA7A94(a4, (uint64_t)__dst, (uint64_t)&v34);
  if (v36 != 2)
    sub_240B735D8();
  v47 = v34;
  v48 = v35;
  v35 = 0;
  v34 = 0uLL;
  v36 = -1;
  if (SHIBYTE(v46) < 0)
    operator delete(__dst[0]);
  v6 = *(unsigned __int8 **)(a3 + 80);
  v7 = *(unsigned __int8 **)(a3 + 88);
  if (v6 != v7)
  {
    v8 = HIBYTE(v48);
    v9 = v47;
    if (v48 >= 0)
      v10 = HIBYTE(v48);
    else
      v10 = *((_QWORD *)&v47 + 1);
    do
    {
      v11 = v6[23];
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = *((_QWORD *)v6 + 1);
      if (v10 == v11)
      {
        if (v12 >= 0)
          v13 = v6;
        else
          v13 = *(unsigned __int8 **)v6;
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v9, v13, *((size_t *)&v9 + 1)))
            goto LABEL_21;
        }
        else
        {
          if (!(_DWORD)v8)
            goto LABEL_21;
          v14 = (unsigned __int8 *)&v47;
          v15 = v8;
          while (*v14 == *v13)
          {
            ++v14;
            ++v13;
            if (!--v15)
              goto LABEL_21;
          }
        }
      }
      v6 += 80;
    }
    while (v6 != v7);
    v6 = v7;
  }
LABEL_21:
  v44 = 0;
  if ((*(unsigned int (**)(uint64_t *, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a3 + 8))(&v44, *((_QWORD *)v6 + 6), *((_QWORD *)v6 + 7), *((unsigned int *)v6 + 6), *((_QWORD *)v6 + 4), *(_QWORD *)(a3 + 24)))
  {
    v16 = MEMORY[0x24BEDB870];
    v17 = MEMORY[0x24BEDB870] + 64;
    v18 = (_QWORD *)MEMORY[0x24BEDB800];
    v19 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v20 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v43[0] = MEMORY[0x24BEDB870] + 64;
    *(_QWORD *)&v34 = v19;
    *(_QWORD *)((char *)&v34 + *(_QWORD *)(v19 - 24)) = v20;
    v21 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
    std::ios_base::init(v21, (char *)&v34 + 8);
    v21[1].__vftable = 0;
    v21[1].__fmtflags_ = -1;
    *(_QWORD *)&v34 = v16 + 24;
    v43[0] = v17;
    std::streambuf::basic_streambuf();
    v22 = MEMORY[0x24BEDB848];
    *((_QWORD *)&v34 + 1) = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)__p = 0u;
    v41 = 0u;
    v42 = 16;
    v23 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v23, (uint64_t)"-byte region allocation failed.", 31);
    v24 = *(_QWORD **)(a3 + 32);
    if ((v42 & 0x10) != 0)
    {
      v28 = *((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) < v39)
      {
        *((_QWORD *)&v41 + 1) = v39;
        v28 = v39;
      }
      v29 = (const void **)&v38;
    }
    else
    {
      if ((v42 & 8) == 0)
      {
        v25 = 0;
        HIBYTE(v46) = 0;
        v26 = __dst;
        goto LABEL_39;
      }
      v29 = (const void **)&v36;
      v28 = v37;
    }
    v30 = *v29;
    v25 = v28 - (_QWORD)*v29;
    if (v25 >= 0x7FFFFFFFFFFFFFF8)
      sub_240B6FFF4();
    if (v25 >= 0x17)
    {
      v31 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v31 = v25 | 7;
      v32 = v31 + 1;
      v26 = (void **)operator new(v31 + 1);
      __dst[1] = (void *)v25;
      v46 = v32 | 0x8000000000000000;
      __dst[0] = v26;
    }
    else
    {
      HIBYTE(v46) = v28 - *(_BYTE *)v29;
      v26 = __dst;
      if (!v25)
      {
LABEL_39:
        *((_BYTE *)v26 + v25) = 0;
        sub_240BB7D38(v24, 1, (uint64_t)__dst);
        if (SHIBYTE(v46) < 0)
          operator delete(__dst[0]);
        *(_QWORD *)&v34 = *v18;
        *(_QWORD *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = v18[3];
        *((_QWORD *)&v34 + 1) = v22 + 16;
        if (SBYTE7(v41) < 0)
          operator delete(__p[0]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x24268ACB0](v43);
        v27 = -1;
        if (SHIBYTE(v48) < 0)
          goto LABEL_44;
        return v27;
      }
    }
    memmove(v26, v30, v25);
    goto LABEL_39;
  }
  *((_QWORD *)v6 + 5) = v44;
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a3 + 24);
  v27 = a2 + 1;
  if (SHIBYTE(v48) < 0)
LABEL_44:
    operator delete((void *)v47);
  return v27;
}

void sub_240B93FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 113) < 0)
    operator delete(*(void **)(v2 - 136));
  sub_240B8A994((uint64_t)va);
  if (*(char *)(v2 - 89) < 0)
    operator delete(*(void **)(v2 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_240B94034(uint64_t *a1)
{
  _QWORD *result;
  uint64_t v2;
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v3[0] = &off_25110C7F8;
  v3[1] = sub_240B94120;
  v4 = v3;
  sub_240B9453C(a1, 0, 0, 17, 0, 0, v3);
  result = v4;
  if (v4 == v3)
  {
    v2 = 4;
    result = v3;
  }
  else
  {
    if (!v4)
      return result;
    v2 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_240B940E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B94120(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::ios_base *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  size_t v26;
  void **v27;
  unint64_t v28;
  const void **v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *__p[2];
  __int128 v41;
  int v42;
  uint64_t v43[19];
  void *__dst[2];
  unint64_t v45;
  __int128 v46;
  uint64_t v47;

  HIBYTE(v45) = 6;
  strcpy((char *)__dst, "region");
  sub_240BA7A94(a4, (uint64_t)__dst, (uint64_t)&v34);
  if (v36 != 2)
    sub_240B735D8();
  v46 = v34;
  v47 = v35;
  v35 = 0;
  v34 = 0uLL;
  v36 = -1;
  if (SHIBYTE(v45) < 0)
    operator delete(__dst[0]);
  v6 = *(unsigned __int8 **)(a3 + 80);
  v7 = *(unsigned __int8 **)(a3 + 88);
  if (v6 == v7)
  {
LABEL_21:
    v16 = *((_QWORD *)v6 + 5);
    if (!v16)
      goto LABEL_43;
LABEL_22:
    if (!(*(unsigned int (**)(uint64_t, _QWORD, _QWORD))(a3 + 16))(v16, *((unsigned int *)v6 + 6), *((_QWORD *)v6 + 8)))goto LABEL_43;
    v17 = MEMORY[0x24BEDB870];
    v18 = MEMORY[0x24BEDB870] + 64;
    v19 = (_QWORD *)MEMORY[0x24BEDB800];
    v20 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v21 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v43[0] = MEMORY[0x24BEDB870] + 64;
    *(_QWORD *)&v34 = v20;
    *(_QWORD *)((char *)&v34 + *(_QWORD *)(v20 - 24)) = v21;
    v22 = (std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24));
    std::ios_base::init(v22, (char *)&v34 + 8);
    v22[1].__vftable = 0;
    v22[1].__fmtflags_ = -1;
    *(_QWORD *)&v34 = v17 + 24;
    v43[0] = v18;
    std::streambuf::basic_streambuf();
    v23 = MEMORY[0x24BEDB848];
    *((_QWORD *)&v34 + 1) = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)__p = 0u;
    v41 = 0u;
    v42 = 16;
    sub_240B8AA18(&v34, (uint64_t)"Deallocation function returned ", 31);
    v24 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v24, (uint64_t)", not 0.", 8);
    v25 = *(_QWORD **)(a3 + 32);
    if ((v42 & 0x10) != 0)
    {
      v28 = *((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1) < v39)
      {
        *((_QWORD *)&v41 + 1) = v39;
        v28 = v39;
      }
      v29 = (const void **)&v38;
    }
    else
    {
      if ((v42 & 8) == 0)
      {
        v26 = 0;
        HIBYTE(v45) = 0;
        v27 = __dst;
        goto LABEL_38;
      }
      v29 = (const void **)&v36;
      v28 = v37;
    }
    v30 = *v29;
    v26 = v28 - (_QWORD)*v29;
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      sub_240B6FFF4();
    if (v26 >= 0x17)
    {
      v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v31 = v26 | 7;
      v32 = v31 + 1;
      v27 = (void **)operator new(v31 + 1);
      __dst[1] = (void *)v26;
      v45 = v32 | 0x8000000000000000;
      __dst[0] = v27;
    }
    else
    {
      HIBYTE(v45) = v28 - *(_BYTE *)v29;
      v27 = __dst;
      if (!v26)
        goto LABEL_38;
    }
    memmove(v27, v30, v26);
LABEL_38:
    *((_BYTE *)v27 + v26) = 0;
    sub_240BB7D38(v25, 1, (uint64_t)__dst);
    if (SHIBYTE(v45) < 0)
      operator delete(__dst[0]);
    *(_QWORD *)&v34 = *v19;
    *(_QWORD *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = v19[3];
    *((_QWORD *)&v34 + 1) = v23 + 16;
    if (SBYTE7(v41) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x24268ACB0](v43);
    goto LABEL_43;
  }
  v8 = HIBYTE(v47);
  v9 = v46;
  if (v47 >= 0)
    v10 = HIBYTE(v47);
  else
    v10 = *((_QWORD *)&v46 + 1);
  do
  {
    v11 = v6[23];
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = *((_QWORD *)v6 + 1);
    if (v10 == v11)
    {
      if (v12 >= 0)
        v13 = v6;
      else
        v13 = *(unsigned __int8 **)v6;
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp((const void *)v9, v13, *((size_t *)&v9 + 1)))
          goto LABEL_21;
      }
      else
      {
        if (!(_DWORD)v8)
          goto LABEL_21;
        v14 = (unsigned __int8 *)&v46;
        v15 = v8;
        while (*v14 == *v13)
        {
          ++v14;
          ++v13;
          if (!--v15)
            goto LABEL_21;
        }
      }
    }
    v6 += 80;
  }
  while (v6 != v7);
  v6 = v7;
  v16 = *((_QWORD *)v7 + 5);
  if (v16)
    goto LABEL_22;
LABEL_43:
  if (SHIBYTE(v47) < 0)
    operator delete((void *)v46);
  return a2 + 1;
}

void sub_240B944AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 113) < 0)
    operator delete(*(void **)(v9 - 136));
  sub_240B8A994((uint64_t)&a9);
  if (*(char *)(v9 - 89) < 0)
    operator delete(*(void **)(v9 - 112));
  _Unwind_Resume(a1);
}

void sub_240B9453C(uint64_t *a1, char *a2, uint64_t a3, int a4, char *__src, uint64_t a6, _QWORD *a7)
{
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  unint64_t v21;
  char *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  _DWORD *v41;
  unint64_t v42;
  char *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *__p;
  void *v65;
  int v66;
  void *v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v72 = 0u;
  v71 = 0u;
  v70 = 0u;
  v69 = 0u;
  v68 = 0u;
  *(_OWORD *)v67 = 0u;
  v66 = a4;
  sub_240B94B1C(v67, __src, &__src[4 * a6], (4 * a6) >> 2);
  sub_240B94B1C((_QWORD *)&v68 + 1, a2, &a2[4 * a3], (4 * a3) >> 2);
  if (a3)
  {
    v10 = 0;
    v11 = (char *)v72;
    while ((unint64_t)v11 < *((_QWORD *)&v72 + 1))
    {
      *(_DWORD *)v11 = 0;
      v12 = v11 + 4;
LABEL_4:
      *(_QWORD *)&v72 = v12;
      ++v10;
      v11 = v12;
      if (v10 == a3)
        goto LABEL_32;
    }
    v13 = (char *)*((_QWORD *)&v71 + 1);
    v14 = &v11[-*((_QWORD *)&v71 + 1)];
    v15 = (uint64_t)&v11[-*((_QWORD *)&v71 + 1)] >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      sub_240B70258();
    v17 = *((_QWORD *)&v72 + 1) - *((_QWORD *)&v71 + 1);
    if ((uint64_t)(*((_QWORD *)&v72 + 1) - *((_QWORD *)&v71 + 1)) >> 1 > v16)
      v16 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 62)
        sub_240B7007C();
      v19 = operator new(4 * v18);
    }
    else
    {
      v19 = 0;
    }
    v20 = &v19[4 * v15];
    *v20 = 0;
    v12 = (char *)(v20 + 1);
    if (v11 == v13)
      goto LABEL_20;
    v21 = v11 - v13 - 4;
    if (v21 < 0xBC)
    {
      v22 = v11;
      goto LABEL_19;
    }
    v24 = (v11 - 4 - v13) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v14[(_QWORD)v19 - 4 - v24] > &v14[(_QWORD)v19 - 4])
    {
      v22 = v11;
    }
    else
    {
      if (&v11[-v24 - 4] <= v11 - 4)
      {
        if ((unint64_t)(v11 - v19 - (_QWORD)v14) < 0x20)
        {
          v22 = v11;
          goto LABEL_19;
        }
        v25 = (v21 >> 2) + 1;
        v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        v22 = &v11[-v26];
        v20 = (_DWORD *)((char *)v20 - v26);
        v27 = &v19[4 * v15 - 16];
        v28 = v11 - 16;
        v29 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 8;
        }
        while (v29);
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_19;
LABEL_20:
        *((_QWORD *)&v71 + 1) = v20;
        *(_QWORD *)&v72 = v12;
        *((_QWORD *)&v72 + 1) = &v19[4 * v18];
        if (v13)
          operator delete(v13);
        goto LABEL_4;
      }
      v22 = v11;
    }
    do
    {
LABEL_19:
      v23 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--v20 = v23;
    }
    while (v22 != v13);
    goto LABEL_20;
  }
LABEL_32:
  if (a6)
  {
    v31 = 0;
    v32 = (char *)*((_QWORD *)&v70 + 1);
    while ((unint64_t)v32 < (unint64_t)v71)
    {
      *(_DWORD *)v32 = 0;
      v33 = v32 + 4;
LABEL_35:
      *((_QWORD *)&v70 + 1) = v33;
      ++v31;
      v32 = v33;
      if (v31 == a6)
        goto LABEL_63;
    }
    v34 = (char *)v70;
    v35 = &v32[-v70];
    v36 = (uint64_t)&v32[-v70] >> 2;
    v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62)
      sub_240B70258();
    v38 = v71 - v70;
    if ((uint64_t)(v71 - v70) >> 1 > v37)
      v37 = v38 >> 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v39 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v39 = v37;
    if (v39)
    {
      if (v39 >> 62)
        sub_240B7007C();
      v40 = operator new(4 * v39);
    }
    else
    {
      v40 = 0;
    }
    v41 = &v40[4 * v36];
    *v41 = 0;
    v33 = (char *)(v41 + 1);
    if (v32 == v34)
      goto LABEL_51;
    v42 = v32 - v34 - 4;
    if (v42 < 0xBC)
    {
      v43 = v32;
      goto LABEL_50;
    }
    v45 = (v32 - 4 - v34) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v35[(_QWORD)v40 - 4 - v45] > &v35[(_QWORD)v40 - 4])
    {
      v43 = v32;
    }
    else
    {
      if (&v32[-v45 - 4] <= v32 - 4)
      {
        if ((unint64_t)(v32 - v40 - (_QWORD)v35) < 0x20)
        {
          v43 = v32;
          goto LABEL_50;
        }
        v46 = (v42 >> 2) + 1;
        v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
        v43 = &v32[-v47];
        v41 = (_DWORD *)((char *)v41 - v47);
        v48 = &v40[4 * v36 - 16];
        v49 = v32 - 16;
        v50 = v46 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          *v48 = v51;
          v48 -= 2;
          v49 -= 32;
          v50 -= 8;
        }
        while (v50);
        if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_50;
LABEL_51:
        *(_QWORD *)&v70 = v41;
        *((_QWORD *)&v70 + 1) = v33;
        *(_QWORD *)&v71 = &v40[4 * v39];
        if (v34)
          operator delete(v34);
        goto LABEL_35;
      }
      v43 = v32;
    }
    do
    {
LABEL_50:
      v44 = *((_DWORD *)v43 - 1);
      v43 -= 4;
      *--v41 = v44;
    }
    while (v43 != v34);
    goto LABEL_51;
  }
LABEL_63:
  sub_240B94C60((uint64_t)&v57, &v66);
  v52 = a7[3];
  if (!v52)
    goto LABEL_66;
  if ((_QWORD *)v52 != a7)
  {
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 16))(v52);
LABEL_66:
    v74 = (_BYTE *)v52;
    goto LABEL_68;
  }
  v74 = v73;
  (*(void (**)(_QWORD *, _BYTE *))(*a7 + 24))(a7, v73);
LABEL_68:
  sub_240BA5518(a1, &v57, (uint64_t)v73);
  v53 = v74;
  if (v74 == v73)
  {
    v54 = 4;
    v53 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_73;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_73:
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  if (v62)
  {
    v63 = v62;
    operator delete(v62);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (*((_QWORD *)&v71 + 1))
  {
    *(_QWORD *)&v72 = *((_QWORD *)&v71 + 1);
    operator delete(*((void **)&v71 + 1));
  }
  if ((_QWORD)v70)
  {
    *((_QWORD *)&v70 + 1) = v70;
    operator delete((void *)v70);
  }
  if (*((_QWORD *)&v68 + 1))
  {
    *(_QWORD *)&v69 = *((_QWORD *)&v68 + 1);
    operator delete(*((void **)&v68 + 1));
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
}

void sub_240B94A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_240B94ABC(&a13);
  sub_240B94ABC(&a26);
  _Unwind_Resume(a1);
}

_QWORD *sub_240B94ABC(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *sub_240B94B1C(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_240B70258();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_240B94C60(uint64_t a1, int *a2)
{
  int v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  int64_t v22;
  char *v23;
  char *v24;

  v4 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 1);
  v5 = (_BYTE *)*((_QWORD *)a2 + 2);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_240B70258();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v8;
    v9 = &v8[4 * (v7 >> 2)];
    *(_QWORD *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 4);
  v10 = (_BYTE *)*((_QWORD *)a2 + 5);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_240B70258();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 40) = v14;
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v16 = (_BYTE *)*((_QWORD *)a2 + 7);
  v15 = (_BYTE *)*((_QWORD *)a2 + 8);
  v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0)
      sub_240B70258();
    v18 = (char *)operator new(v15 - v16);
    *(_QWORD *)(a1 + 56) = v18;
    *(_QWORD *)(a1 + 64) = v18;
    v19 = &v18[4 * (v17 >> 2)];
    *(_QWORD *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(_QWORD *)(a1 + 64) = v19;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v21 = (_BYTE *)*((_QWORD *)a2 + 10);
  v20 = (_BYTE *)*((_QWORD *)a2 + 11);
  v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0)
      sub_240B70258();
    v23 = (char *)operator new(v20 - v21);
    *(_QWORD *)(a1 + 80) = v23;
    *(_QWORD *)(a1 + 88) = v23;
    v24 = &v23[4 * (v22 >> 2)];
    *(_QWORD *)(a1 + 96) = v24;
    memcpy(v23, v21, v22);
    *(_QWORD *)(a1 + 88) = v24;
  }
  return a1;
}

void sub_240B94DE4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v7 = *v5;
  if (*v5)
  {
    v1[11] = v7;
    operator delete(v7);
    v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      v9 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v8 = *v4;
    if (!*v4)
      goto LABEL_3;
  }
  v1[8] = v8;
  operator delete(v8);
  v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    v10 = *v2;
    if (!*v2)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_9:
  v1[5] = v9;
  operator delete(v9);
  v10 = *v2;
  if (!*v2)
LABEL_6:
    _Unwind_Resume(exception_object);
LABEL_5:
  v1[2] = v10;
  operator delete(v10);
  goto LABEL_6;
}

void sub_240B94E6C()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x240B94E10);
  JUMPOUT(0x240B94E08);
}

void sub_240B94E7C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *__p;
  void *v12;
  int v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  *(_OWORD *)v14 = 0u;
  v13 = 24;
  sub_240B94C60((uint64_t)&v4, &v13);
  v20[0] = &off_25110C7F8;
  v20[1] = sub_240B95030;
  v21 = v20;
  sub_240BA5518(a1, &v4, (uint64_t)v20);
  v2 = v21;
  if (v21 == v20)
  {
    v3 = 4;
    v2 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  if (*((_QWORD *)&v18 + 1))
  {
    *(_QWORD *)&v19 = *((_QWORD *)&v18 + 1);
    operator delete(*((void **)&v18 + 1));
  }
  if ((_QWORD)v17)
  {
    *((_QWORD *)&v17 + 1) = v17;
    operator delete((void *)v17);
  }
  if (*((_QWORD *)&v15 + 1))
  {
    *(_QWORD *)&v16 = *((_QWORD *)&v15 + 1);
    operator delete(*((void **)&v15 + 1));
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
}

void sub_240B94FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);
  v5 = *(_QWORD **)(v3 - 48);
  if (v5 == v2)
  {
    v6 = 4;
    v5 = (_QWORD *)(v3 - 72);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  sub_240B94ABC((uint64_t *)va);
  sub_240B94ABC((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_240B95030(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  void *__p[2];
  char v12;
  _QWORD v13[3];
  int v14;

  v12 = 6;
  strcpy((char *)__p, "kindex");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v13);
  if (v14)
    sub_240B735D8();
  v9 = v13[0];
  v14 = -1;
  if (v12 < 0)
    operator delete(__p[0]);
  sub_240BA77CC(*(_QWORD *)(*(_QWORD *)(a3 + 176) + 8 * v9), a1, a5);
  return a2 + 1;
}

void sub_240B950E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_240B73210((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_240B95110(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t i;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  int v116;
  int v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  void *v124;
  void *v125;
  int v126;
  void *__p;
  void *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  int v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  _QWORD v142[3];
  _QWORD *v143;
  _QWORD v144[3];
  _QWORD *v145;
  _QWORD v146[3];
  _QWORD *v147;
  _QWORD v148[3];
  _QWORD *v149;
  _QWORD v150[3];
  _QWORD *v151;
  _QWORD v152[3];
  _QWORD *v153;
  _QWORD v154[3];
  _QWORD *v155;
  _QWORD v156[3];
  _QWORD *v157;
  _QWORD v158[3];
  _QWORD *v159;
  _QWORD v160[3];
  _QWORD *v161;
  _QWORD v162[3];
  _QWORD *v163;
  _QWORD v164[3];
  _QWORD *v165;
  _QWORD v166[3];
  _QWORD *v167;
  _QWORD v168[3];
  _QWORD *v169;
  _QWORD v170[3];
  _QWORD *v171;
  _QWORD v172[3];
  _QWORD *v173;
  _QWORD v174[3];
  _QWORD *v175;
  _QWORD v176[3];
  _QWORD *v177;
  _QWORD v178[3];
  _QWORD *v179;
  _QWORD v180[3];
  _QWORD *v181;
  _QWORD v182[3];
  _QWORD *v183;
  _QWORD v184[3];
  _QWORD *v185;
  _QWORD v186[3];
  _QWORD *v187;
  _QWORD v188[3];
  _QWORD *v189;
  _QWORD v190[3];
  _QWORD *v191;
  _QWORD v192[3];
  _QWORD *v193;
  _QWORD v194[3];
  _QWORD *v195;
  _QWORD v196[3];
  _QWORD *v197;
  _QWORD v198[3];
  _QWORD *v199;
  _QWORD v200[3];
  _QWORD *v201;
  _QWORD v202[3];
  _QWORD *v203;
  _QWORD v204[3];
  _QWORD *v205;
  _QWORD v206[3];
  _QWORD *v207;
  _QWORD v208[3];
  _QWORD *v209;
  _QWORD v210[3];
  _QWORD *v211;
  _QWORD v212[3];
  _QWORD *v213;
  _QWORD v214[3];
  _QWORD *v215;
  _QWORD v216[3];
  _QWORD *v217;
  _QWORD v218[3];
  _QWORD *v219;
  _QWORD v220[3];
  _QWORD *v221;
  _QWORD v222[3];
  _QWORD *v223;
  _QWORD v224[3];
  _QWORD *v225;
  _QWORD v226[3];
  _QWORD *v227;
  _QWORD v228[3];
  _QWORD *v229;
  _QWORD v230[3];
  _QWORD *v231;
  _QWORD v232[3];
  _QWORD *v233;
  _QWORD v234[3];
  _QWORD *v235;
  _QWORD v236[3];
  _QWORD *v237;
  _QWORD v238[3];
  _QWORD *v239;
  _QWORD v240[3];
  _QWORD *v241;
  _QWORD v242[3];
  _QWORD *v243;
  _QWORD v244[3];
  _QWORD *v245;
  _QWORD v246[3];
  _QWORD *v247;
  _QWORD v248[3];
  _QWORD *v249;
  uint64_t __src;
  _QWORD v251[3];
  _QWORD *v252;
  _QWORD v253[3];
  _QWORD *v254;
  uint64_t v255;

  v255 = *MEMORY[0x24BDAC8D0];
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v135 = 0;
  sub_240B94C60((uint64_t)&v126, &v135);
  v253[0] = &off_25110C7F8;
  v253[1] = sub_240B973B0;
  v254 = v253;
  sub_240BA5518(a1, &v126, (uint64_t)v253);
  v2 = v254;
  if (v254 == v253)
  {
    v3 = 4;
    v2 = v253;
  }
  else
  {
    if (!v254)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v131)
  {
    v132 = v131;
    operator delete(v131);
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (__p)
  {
    v128 = __p;
    operator delete(__p);
  }
  v135 = 35;
  sub_240B94C60((uint64_t)&v117, &v135);
  v251[0] = &off_25110C7F8;
  v251[1] = sub_240B97520;
  v252 = v251;
  sub_240BA5518(a1, &v117, (uint64_t)v251);
  v4 = v252;
  if (v252 == v251)
  {
    v5 = 4;
    v4 = v251;
  }
  else
  {
    if (!v252)
      goto LABEL_19;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_19:
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  v116 = 0;
  __src = 0;
  v248[0] = &off_25110C7F8;
  v248[1] = sub_240B97690;
  v249 = v248;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v248);
  v6 = v249;
  if (v249 == v248)
  {
    v7 = 4;
    v6 = v248;
  }
  else
  {
    if (!v249)
      goto LABEL_32;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_32:
  v116 = 1;
  __src = 0x100000001;
  v246[0] = &off_25110C7F8;
  v246[1] = sub_240B97810;
  v247 = v246;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v246);
  v8 = v247;
  if (v247 == v246)
  {
    v9 = 4;
    v8 = v246;
  }
  else
  {
    if (!v247)
      goto LABEL_37;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_37:
  v116 = 2;
  __src = 0x200000002;
  v244[0] = &off_25110C7F8;
  v244[1] = sub_240B97944;
  v245 = v244;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v244);
  v10 = v245;
  if (v245 == v244)
  {
    v11 = 4;
    v10 = v244;
  }
  else
  {
    if (!v245)
      goto LABEL_42;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_42:
  v116 = 3;
  __src = 0x300000003;
  v242[0] = &off_25110C7F8;
  v242[1] = sub_240B97A78;
  v243 = v242;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v242);
  v12 = v243;
  if (v243 == v242)
  {
    v13 = 4;
    v12 = v242;
  }
  else
  {
    if (!v243)
      goto LABEL_47;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_47:
  v116 = 4;
  __src = 0x400000004;
  v240[0] = &off_25110C7F8;
  v240[1] = sub_240B97BAC;
  v241 = v240;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v240);
  v14 = v241;
  if (v241 == v240)
  {
    v15 = 4;
    v14 = v240;
  }
  else
  {
    if (!v241)
      goto LABEL_52;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_52:
  v116 = 5;
  __src = 0x500000005;
  v238[0] = &off_25110C7F8;
  v238[1] = sub_240B97D2C;
  v239 = v238;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v238);
  v16 = v239;
  if (v239 == v238)
  {
    v17 = 4;
    v16 = v238;
  }
  else
  {
    if (!v239)
      goto LABEL_57;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_57:
  v116 = 6;
  __src = 0x600000006;
  v236[0] = &off_25110C7F8;
  v236[1] = sub_240B97E60;
  v237 = v236;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v236);
  v18 = v237;
  if (v237 == v236)
  {
    v19 = 4;
    v18 = v236;
  }
  else
  {
    if (!v237)
      goto LABEL_62;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_62:
  v116 = 7;
  __src = 0x700000007;
  v234[0] = &off_25110C7F8;
  v234[1] = sub_240B97F94;
  v235 = v234;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v234);
  v20 = v235;
  if (v235 == v234)
  {
    v21 = 4;
    v20 = v234;
  }
  else
  {
    if (!v235)
      goto LABEL_67;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_67:
  v116 = 9;
  __src = 0x900000009;
  v232[0] = &off_25110C7F8;
  v232[1] = sub_240B980C8;
  v233 = v232;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v232);
  v22 = v233;
  if (v233 == v232)
  {
    v23 = 4;
    v22 = v232;
  }
  else
  {
    if (!v233)
      goto LABEL_72;
    v23 = 5;
  }
  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_72:
  v116 = 10;
  __src = 0xA0000000ALL;
  v230[0] = &off_25110C7F8;
  v230[1] = sub_240B981FC;
  v231 = v230;
  sub_240B9453C(a1, (char *)&v116, 1, 1, (char *)&__src, 2, v230);
  v24 = v231;
  if (v231 == v230)
  {
    v25 = 4;
    v24 = v230;
  }
  else
  {
    if (!v231)
      goto LABEL_77;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_77:
  v116 = 0;
  __src = 0;
  v228[0] = &off_25110C7F8;
  v228[1] = sub_240B98330;
  v229 = v228;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v228);
  v26 = v229;
  if (v229 == v228)
  {
    v27 = 4;
    v26 = v228;
  }
  else
  {
    if (!v229)
      goto LABEL_82;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_82:
  v116 = 1;
  __src = 0x100000001;
  v226[0] = &off_25110C7F8;
  v226[1] = sub_240B983E0;
  v227 = v226;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v226);
  v28 = v227;
  if (v227 == v226)
  {
    v29 = 4;
    v28 = v226;
  }
  else
  {
    if (!v227)
      goto LABEL_87;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_87:
  v116 = 2;
  __src = 0x200000002;
  v224[0] = &off_25110C7F8;
  v224[1] = sub_240B98490;
  v225 = v224;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v224);
  v30 = v225;
  if (v225 == v224)
  {
    v31 = 4;
    v30 = v224;
  }
  else
  {
    if (!v225)
      goto LABEL_92;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_92:
  v116 = 3;
  __src = 0x300000003;
  v222[0] = &off_25110C7F8;
  v222[1] = sub_240B98540;
  v223 = v222;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v222);
  v32 = v223;
  if (v223 == v222)
  {
    v33 = 4;
    v32 = v222;
  }
  else
  {
    if (!v223)
      goto LABEL_97;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_97:
  v116 = 4;
  __src = 0x400000004;
  v220[0] = &off_25110C7F8;
  v220[1] = sub_240B985F0;
  v221 = v220;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v220);
  v34 = v221;
  if (v221 == v220)
  {
    v35 = 4;
    v34 = v220;
  }
  else
  {
    if (!v221)
      goto LABEL_102;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_102:
  v116 = 5;
  __src = 0x500000005;
  v218[0] = &off_25110C7F8;
  v218[1] = sub_240B986A0;
  v219 = v218;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v218);
  v36 = v219;
  if (v219 == v218)
  {
    v37 = 4;
    v36 = v218;
  }
  else
  {
    if (!v219)
      goto LABEL_107;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_107:
  v116 = 6;
  __src = 0x600000006;
  v216[0] = &off_25110C7F8;
  v216[1] = sub_240B98750;
  v217 = v216;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v216);
  v38 = v217;
  if (v217 == v216)
  {
    v39 = 4;
    v38 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_112;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_112:
  v116 = 7;
  __src = 0x700000007;
  v214[0] = &off_25110C7F8;
  v214[1] = sub_240B98800;
  v215 = v214;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v214);
  v40 = v215;
  if (v215 == v214)
  {
    v41 = 4;
    v40 = v214;
  }
  else
  {
    if (!v215)
      goto LABEL_117;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_117:
  v116 = 9;
  __src = 0x900000009;
  v212[0] = &off_25110C7F8;
  v212[1] = sub_240B988B0;
  v213 = v212;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v212);
  v42 = v213;
  if (v213 == v212)
  {
    v43 = 4;
    v42 = v212;
  }
  else
  {
    if (!v213)
      goto LABEL_122;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_122:
  v116 = 10;
  __src = 0xA0000000ALL;
  v210[0] = &off_25110C7F8;
  v210[1] = sub_240B989E4;
  v211 = v210;
  sub_240B9453C(a1, (char *)&v116, 1, 16, (char *)&__src, 2, v210);
  v44 = v211;
  if (v211 == v210)
  {
    v45 = 4;
    v44 = v210;
  }
  else
  {
    if (!v211)
      goto LABEL_127;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_127:
  v116 = 0;
  __src = 0;
  v208[0] = &off_25110C7F8;
  v208[1] = sub_240B98B18;
  v209 = v208;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v208);
  v46 = v209;
  if (v209 == v208)
  {
    v47 = 4;
    v46 = v208;
  }
  else
  {
    if (!v209)
      goto LABEL_132;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_132:
  v116 = 1;
  __src = 0x100000001;
  v206[0] = &off_25110C7F8;
  v206[1] = sub_240B98C98;
  v207 = v206;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v206);
  v48 = v207;
  if (v207 == v206)
  {
    v49 = 4;
    v48 = v206;
  }
  else
  {
    if (!v207)
      goto LABEL_137;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_137:
  v116 = 2;
  __src = 0x200000002;
  v204[0] = &off_25110C7F8;
  v204[1] = sub_240B98DCC;
  v205 = v204;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v204);
  v50 = v205;
  if (v205 == v204)
  {
    v51 = 4;
    v50 = v204;
  }
  else
  {
    if (!v205)
      goto LABEL_142;
    v51 = 5;
  }
  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_142:
  v116 = 3;
  __src = 0x300000003;
  v202[0] = &off_25110C7F8;
  v202[1] = sub_240B98F00;
  v203 = v202;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v202);
  v52 = v203;
  if (v203 == v202)
  {
    v53 = 4;
    v52 = v202;
  }
  else
  {
    if (!v203)
      goto LABEL_147;
    v53 = 5;
  }
  (*(void (**)(void))(*v52 + 8 * v53))();
LABEL_147:
  v116 = 4;
  __src = 0x400000004;
  v200[0] = &off_25110C7F8;
  v200[1] = sub_240B98FB0;
  v201 = v200;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v200);
  v54 = v201;
  if (v201 == v200)
  {
    v55 = 4;
    v54 = v200;
  }
  else
  {
    if (!v201)
      goto LABEL_152;
    v55 = 5;
  }
  (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_152:
  v116 = 5;
  __src = 0x500000005;
  v198[0] = &off_25110C7F8;
  v198[1] = sub_240B99130;
  v199 = v198;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v198);
  v56 = v199;
  if (v199 == v198)
  {
    v57 = 4;
    v56 = v198;
  }
  else
  {
    if (!v199)
      goto LABEL_157;
    v57 = 5;
  }
  (*(void (**)(void))(*v56 + 8 * v57))();
LABEL_157:
  v116 = 6;
  __src = 0x600000006;
  v196[0] = &off_25110C7F8;
  v196[1] = sub_240B99264;
  v197 = v196;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v196);
  v58 = v197;
  if (v197 == v196)
  {
    v59 = 4;
    v58 = v196;
  }
  else
  {
    if (!v197)
      goto LABEL_162;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_162:
  v116 = 7;
  __src = 0x700000007;
  v194[0] = &off_25110C7F8;
  v194[1] = sub_240B99398;
  v195 = v194;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v194);
  v60 = v195;
  if (v195 == v194)
  {
    v61 = 4;
    v60 = v194;
  }
  else
  {
    if (!v195)
      goto LABEL_167;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_167:
  v116 = 9;
  __src = 0x900000009;
  v192[0] = &off_25110C7F8;
  v192[1] = sub_240B99448;
  v193 = v192;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v192);
  v62 = v193;
  if (v193 == v192)
  {
    v63 = 4;
    v62 = v192;
  }
  else
  {
    if (!v193)
      goto LABEL_172;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_172:
  v116 = 10;
  __src = 0xA0000000ALL;
  v190[0] = &off_25110C7F8;
  v190[1] = sub_240B9957C;
  v191 = v190;
  sub_240B9453C(a1, (char *)&v116, 1, 31, (char *)&__src, 2, v190);
  v64 = v191;
  if (v191 == v190)
  {
    v65 = 4;
    v64 = v190;
  }
  else
  {
    if (!v191)
      goto LABEL_177;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_177:
  v116 = 0;
  __src = 0;
  v188[0] = &off_25110C7F8;
  v188[1] = sub_240B996B0;
  v189 = v188;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v188);
  v66 = v189;
  if (v189 == v188)
  {
    v67 = 4;
    v66 = v188;
  }
  else
  {
    if (!v189)
      goto LABEL_182;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_182:
  v116 = 1;
  __src = 0x100000001;
  v186[0] = &off_25110C7F8;
  v186[1] = sub_240B99830;
  v187 = v186;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v186);
  v68 = v187;
  if (v187 == v186)
  {
    v69 = 4;
    v68 = v186;
  }
  else
  {
    if (!v187)
      goto LABEL_187;
    v69 = 5;
  }
  (*(void (**)(void))(*v68 + 8 * v69))();
LABEL_187:
  v116 = 2;
  __src = 0x200000002;
  v184[0] = &off_25110C7F8;
  v184[1] = sub_240B99964;
  v185 = v184;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v184);
  v70 = v185;
  if (v185 == v184)
  {
    v71 = 4;
    v70 = v184;
  }
  else
  {
    if (!v185)
      goto LABEL_192;
    v71 = 5;
  }
  (*(void (**)(void))(*v70 + 8 * v71))();
LABEL_192:
  v116 = 3;
  __src = 0x300000003;
  v182[0] = &off_25110C7F8;
  v182[1] = sub_240B99A98;
  v183 = v182;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v182);
  v72 = v183;
  if (v183 == v182)
  {
    v73 = 4;
    v72 = v182;
  }
  else
  {
    if (!v183)
      goto LABEL_197;
    v73 = 5;
  }
  (*(void (**)(void))(*v72 + 8 * v73))();
LABEL_197:
  v116 = 4;
  __src = 0x400000004;
  v180[0] = &off_25110C7F8;
  v180[1] = sub_240B99BCC;
  v181 = v180;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v180);
  v74 = v181;
  if (v181 == v180)
  {
    v75 = 4;
    v74 = v180;
  }
  else
  {
    if (!v181)
      goto LABEL_202;
    v75 = 5;
  }
  (*(void (**)(void))(*v74 + 8 * v75))();
LABEL_202:
  v116 = 5;
  __src = 0x500000005;
  v178[0] = &off_25110C7F8;
  v178[1] = sub_240B99D4C;
  v179 = v178;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v178);
  v76 = v179;
  if (v179 == v178)
  {
    v77 = 4;
    v76 = v178;
  }
  else
  {
    if (!v179)
      goto LABEL_207;
    v77 = 5;
  }
  (*(void (**)(void))(*v76 + 8 * v77))();
LABEL_207:
  v116 = 6;
  __src = 0x600000006;
  v176[0] = &off_25110C7F8;
  v176[1] = sub_240B99E80;
  v177 = v176;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v176);
  v78 = v177;
  if (v177 == v176)
  {
    v79 = 4;
    v78 = v176;
  }
  else
  {
    if (!v177)
      goto LABEL_212;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_212:
  v116 = 7;
  __src = 0x700000007;
  v174[0] = &off_25110C7F8;
  v174[1] = sub_240B99FB4;
  v175 = v174;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v174);
  v80 = v175;
  if (v175 == v174)
  {
    v81 = 4;
    v80 = v174;
  }
  else
  {
    if (!v175)
      goto LABEL_217;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_217:
  v116 = 9;
  __src = 0x900000009;
  v172[0] = &off_25110C7F8;
  v172[1] = sub_240B9A0E8;
  v173 = v172;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v172);
  v82 = v173;
  if (v173 == v172)
  {
    v83 = 4;
    v82 = v172;
  }
  else
  {
    if (!v173)
      goto LABEL_222;
    v83 = 5;
  }
  (*(void (**)(void))(*v82 + 8 * v83))();
LABEL_222:
  v116 = 10;
  __src = 0xA0000000ALL;
  v170[0] = &off_25110C7F8;
  v170[1] = sub_240B9A21C;
  v171 = v170;
  sub_240B9453C(a1, (char *)&v116, 1, 40, (char *)&__src, 2, v170);
  v84 = v171;
  if (v171 == v170)
  {
    v85 = 4;
    v84 = v170;
    goto LABEL_226;
  }
  if (v171)
  {
    v85 = 5;
LABEL_226:
    (*(void (**)(void))(*v84 + 8 * v85))();
  }
  for (i = 0; i != 10; ++i)
  {
    v89 = dword_240BBBD44[i];
    LODWORD(__src) = v89;
    v116 = v89;
    v168[0] = &off_25110C7F8;
    v168[1] = sub_240B9A350;
    v169 = v168;
    sub_240B9453C(a1, (char *)&__src, 1, 5, (char *)&v116, 1, v168);
    v90 = v169;
    if (v169 == v168)
    {
      v90 = v168;
      v91 = 4;
    }
    else
    {
      if (!v169)
        goto LABEL_236;
      v91 = 5;
    }
    (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_236:
    LODWORD(__src) = v89;
    v116 = v89;
    v166[0] = &off_25110C7F8;
    v166[1] = sub_240B9A358;
    v167 = v166;
    sub_240B9453C(a1, (char *)&__src, 1, 12, (char *)&v116, 1, v166);
    v92 = v167;
    if (v167 == v166)
    {
      v92 = v166;
      v93 = 4;
    }
    else
    {
      if (!v167)
        goto LABEL_241;
      v93 = 5;
    }
    (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_241:
    LODWORD(__src) = v89;
    v116 = v89;
    v164[0] = &off_25110C7F8;
    v164[1] = sub_240B9A360;
    v165 = v164;
    sub_240B9453C(a1, (char *)&__src, 1, 14, (char *)&v116, 1, v164);
    v94 = v165;
    if (v165 == v164)
    {
      v94 = v164;
      v95 = 4;
    }
    else
    {
      if (!v165)
        goto LABEL_246;
      v95 = 5;
    }
    (*(void (**)(void))(*v94 + 8 * v95))();
LABEL_246:
    LODWORD(__src) = v89;
    v116 = v89;
    v162[0] = &off_25110C7F8;
    v162[1] = sub_240B9A3E0;
    v163 = v162;
    sub_240B9453C(a1, (char *)&__src, 1, 30, (char *)&v116, 1, v162);
    v87 = v163;
    if (v163 == v162)
    {
      v87 = v162;
      v88 = 4;
LABEL_229:
      (*(void (**)(void))(*v87 + 8 * v88))();
      continue;
    }
    if (v163)
    {
      v88 = 5;
      goto LABEL_229;
    }
  }
  LODWORD(__src) = 0;
  v160[0] = &off_25110C7F8;
  v160[1] = sub_240B9A3E8;
  v161 = v160;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v160);
  v96 = v161;
  if (v161 == v160)
  {
    v97 = 4;
    v96 = v160;
LABEL_253:
    (*(void (**)(void))(*v96 + 8 * v97))();
  }
  else if (v161)
  {
    v97 = 5;
    goto LABEL_253;
  }
  LODWORD(__src) = 1;
  v158[0] = &off_25110C7F8;
  v158[1] = sub_240B9A470;
  v159 = v158;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v158);
  v98 = v159;
  if (v159 == v158)
  {
    v99 = 4;
    v98 = v158;
LABEL_258:
    (*(void (**)(void))(*v98 + 8 * v99))();
  }
  else if (v159)
  {
    v99 = 5;
    goto LABEL_258;
  }
  LODWORD(__src) = 2;
  v156[0] = &off_25110C7F8;
  v156[1] = sub_240B9A4F8;
  v157 = v156;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v156);
  v100 = v157;
  if (v157 == v156)
  {
    v101 = 4;
    v100 = v156;
LABEL_263:
    (*(void (**)(void))(*v100 + 8 * v101))();
  }
  else if (v157)
  {
    v101 = 5;
    goto LABEL_263;
  }
  LODWORD(__src) = 3;
  v154[0] = &off_25110C7F8;
  v154[1] = sub_240B9A580;
  v155 = v154;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v154);
  v102 = v155;
  if (v155 == v154)
  {
    v103 = 4;
    v102 = v154;
LABEL_268:
    (*(void (**)(void))(*v102 + 8 * v103))();
  }
  else if (v155)
  {
    v103 = 5;
    goto LABEL_268;
  }
  LODWORD(__src) = 4;
  v152[0] = &off_25110C7F8;
  v152[1] = sub_240B9A608;
  v153 = v152;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v152);
  v104 = v153;
  if (v153 == v152)
  {
    v105 = 4;
    v104 = v152;
LABEL_273:
    (*(void (**)(void))(*v104 + 8 * v105))();
  }
  else if (v153)
  {
    v105 = 5;
    goto LABEL_273;
  }
  LODWORD(__src) = 5;
  v150[0] = &off_25110C7F8;
  v150[1] = sub_240B9A690;
  v151 = v150;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v150);
  v106 = v151;
  if (v151 == v150)
  {
    v107 = 4;
    v106 = v150;
LABEL_278:
    (*(void (**)(void))(*v106 + 8 * v107))();
  }
  else if (v151)
  {
    v107 = 5;
    goto LABEL_278;
  }
  LODWORD(__src) = 6;
  v148[0] = &off_25110C7F8;
  v148[1] = sub_240B9A718;
  v149 = v148;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v148);
  v108 = v149;
  if (v149 == v148)
  {
    v109 = 4;
    v108 = v148;
LABEL_283:
    (*(void (**)(void))(*v108 + 8 * v109))();
  }
  else if (v149)
  {
    v109 = 5;
    goto LABEL_283;
  }
  LODWORD(__src) = 7;
  v146[0] = &off_25110C7F8;
  v146[1] = sub_240B9A7A0;
  v147 = v146;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v146);
  v110 = v147;
  if (v147 == v146)
  {
    v111 = 4;
    v110 = v146;
LABEL_288:
    (*(void (**)(void))(*v110 + 8 * v111))();
  }
  else if (v147)
  {
    v111 = 5;
    goto LABEL_288;
  }
  LODWORD(__src) = 9;
  v144[0] = &off_25110C7F8;
  v144[1] = sub_240B9A828;
  v145 = v144;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v144);
  v112 = v145;
  if (v145 == v144)
  {
    v113 = 4;
    v112 = v144;
LABEL_293:
    (*(void (**)(void))(*v112 + 8 * v113))();
  }
  else if (v145)
  {
    v113 = 5;
    goto LABEL_293;
  }
  LODWORD(__src) = 10;
  v142[0] = &off_25110C7F8;
  v142[1] = sub_240B9AA48;
  v143 = v142;
  sub_240B9453C(a1, 0, 0, 32, (char *)&__src, 1, v142);
  v114 = v143;
  if (v143 == v142)
  {
    v115 = 4;
    v114 = v142;
LABEL_298:
    (*(void (**)(void))(*v114 + 8 * v115))();
  }
  else if (v143)
  {
    v115 = 5;
    goto LABEL_298;
  }
  sub_240B9E730(a1);
  sub_240B9360C(a1);
  sub_240B93B20(a1);
  sub_240B94034(a1);
  sub_240B9ED10(a1);
  if (*((_QWORD *)&v140 + 1))
  {
    *(_QWORD *)&v141 = *((_QWORD *)&v140 + 1);
    operator delete(*((void **)&v140 + 1));
  }
  if ((_QWORD)v139)
  {
    *((_QWORD *)&v139 + 1) = v139;
    operator delete((void *)v139);
  }
  if (*((_QWORD *)&v137 + 1))
  {
    *(_QWORD *)&v138 = *((_QWORD *)&v137 + 1);
    operator delete(*((void **)&v137 + 1));
  }
  if ((_QWORD)v136)
  {
    *((_QWORD *)&v136 + 1) = v136;
    operator delete((void *)v136);
  }
}

void sub_240B96D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  char *v50;
  uint64_t v51;
  char *v53;
  uint64_t v54;

  v53 = *(char **)(v51 + 232);
  if (v53 == v50)
  {
    v54 = 4;
    v53 = &a50;
  }
  else
  {
    if (!v53)
      goto LABEL_6;
    v54 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v53 + 8 * v54))();
LABEL_6:
  sub_240B94ABC(&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_240B973B0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v7;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  int v13;
  _BYTE v14[24];
  int v15;

  v12 = 5;
  strcpy((char *)__p, "queue");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v14);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15)
    sub_240B735D8();
  v10 = 5;
  strcpy((char *)v9, "event");
  sub_240BA7A94(a4, (uint64_t)v9, (uint64_t)__p);
  if (v13)
    sub_240B735D8();
  v7 = __p[0];
  v13 = -1;
  if (v10 < 0)
    operator delete(v9[0]);
  mlc_event_wait(*(_QWORD *)(*(_QWORD *)(a3 + 128) + 16 * (_QWORD)v7));
  if (v15 != -1)
    ((void (*)(void **, _BYTE *))off_25110C830[v15])(__p, v14);
  return a2 + 1;
}

void sub_240B974C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_240B73210((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_240B97504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x240B974FCLL);
}

uint64_t sub_240B97520(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  void *v7;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  int v13;
  _BYTE v14[24];
  int v15;

  v12 = 5;
  strcpy((char *)__p, "queue");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v14);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v15)
    sub_240B735D8();
  v10 = 5;
  strcpy((char *)v9, "event");
  sub_240BA7A94(a4, (uint64_t)v9, (uint64_t)__p);
  if (v13)
    sub_240B735D8();
  v7 = __p[0];
  v13 = -1;
  if (v10 < 0)
    operator delete(v9[0]);
  mlc_event_record(*(_QWORD *)(*(_QWORD *)(a3 + 128) + 16 * (_QWORD)v7));
  if (v15 != -1)
    ((void (*)(void **, _BYTE *))off_25110C830[v15])(__p, v14);
  return a2 + 1;
}

void sub_240B97634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_240B73210((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_240B97674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x240B9766CLL);
}

uint64_t sub_240B97690(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x8_t *v19;
  int8x8_t *v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  char v32;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
      goto LABEL_15;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20)
      goto LABEL_15;
    if (v8 >= 0x20)
    {
      v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x16_t *)(v10 + 16);
      v14 = (int8x16_t *)(v11 + 16);
      v15 = (int8x16_t *)(v9 + 16);
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = vaddq_s8(*v14, *v13);
        v15[-1] = vaddq_s8(v14[-1], v13[-1]);
        *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12)
        return a2 + 1;
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        v26 = v8 - v12;
        v27 = (_BYTE *)(v9 + v12);
        v28 = (char *)(v11 + v12);
        v29 = (char *)(v10 + v12);
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = *v28++;
          *v27++ = v32 + v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      v12 = 0;
    }
    v18 = v12;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v19 = (int8x8_t *)(v10 + v18);
    v20 = (int8x8_t *)(v11 + v18);
    v21 = (int8x8_t *)(v9 + v18);
    v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v19++;
      v24 = v23;
      v25 = *v20++;
      *v21++ = vadd_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12)
      goto LABEL_15;
  }
  return a2 + 1;
}

uint64_t sub_240B97810(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;
  unint64_t v16;
  int16x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 2 * v12;
      v20 = (_WORD *)(v9 + 2 * v12);
      v21 = (__int16 *)(v11 + v19);
      v22 = (__int16 *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    v13 = (int16x8_t *)(v10 + 16);
    v14 = (int16x8_t *)(v11 + 16);
    v15 = (int16x8_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = vaddq_s16(*v14, *v13);
      v15[-1] = vaddq_s16(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B97944(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (_DWORD *)(v9 + 4 * v12);
      v21 = (int *)(v11 + v19);
      v22 = (int *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (int32x4_t *)(v10 + 16);
    v14 = (int32x4_t *)(v11 + 16);
    v15 = (int32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vaddq_s32(*v14, *v13);
      v15[-1] = vaddq_s32(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B97A78(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (_QWORD *)(v9 + 8 * v12);
      v21 = (uint64_t *)(v11 + v19);
      v22 = (uint64_t *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (int64x2_t *)(v10 + 16);
    v14 = (int64x2_t *)(v11 + 16);
    v15 = (int64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vaddq_s64(*v14, *v13);
      v15[-1] = vaddq_s64(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B97BAC(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x8_t *v19;
  int8x8_t *v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  char v32;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
      goto LABEL_15;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20)
      goto LABEL_15;
    if (v8 >= 0x20)
    {
      v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x16_t *)(v10 + 16);
      v14 = (int8x16_t *)(v11 + 16);
      v15 = (int8x16_t *)(v9 + 16);
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = vaddq_s8(*v14, *v13);
        v15[-1] = vaddq_s8(v14[-1], v13[-1]);
        *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12)
        return a2 + 1;
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        v26 = v8 - v12;
        v27 = (_BYTE *)(v9 + v12);
        v28 = (char *)(v11 + v12);
        v29 = (char *)(v10 + v12);
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = *v28++;
          *v27++ = v32 + v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      v12 = 0;
    }
    v18 = v12;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v19 = (int8x8_t *)(v10 + v18);
    v20 = (int8x8_t *)(v11 + v18);
    v21 = (int8x8_t *)(v9 + v18);
    v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v19++;
      v24 = v23;
      v25 = *v20++;
      *v21++ = vadd_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12)
      goto LABEL_15;
  }
  return a2 + 1;
}

uint64_t sub_240B97D2C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;
  unint64_t v16;
  int16x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 2 * v12;
      v20 = (_WORD *)(v9 + 2 * v12);
      v21 = (__int16 *)(v11 + v19);
      v22 = (__int16 *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    v13 = (int16x8_t *)(v10 + 16);
    v14 = (int16x8_t *)(v11 + 16);
    v15 = (int16x8_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = vaddq_s16(*v14, *v13);
      v15[-1] = vaddq_s16(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B97E60(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (_DWORD *)(v9 + 4 * v12);
      v21 = (int *)(v11 + v19);
      v22 = (int *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (int32x4_t *)(v10 + 16);
    v14 = (int32x4_t *)(v11 + 16);
    v15 = (int32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vaddq_s32(*v14, *v13);
      v15[-1] = vaddq_s32(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B97F94(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (_QWORD *)(v9 + 8 * v12);
      v21 = (uint64_t *)(v11 + v19);
      v22 = (uint64_t *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (int64x2_t *)(v10 + 16);
    v14 = (int64x2_t *)(v11 + 16);
    v15 = (int64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vaddq_s64(*v14, *v13);
      v15[-1] = vaddq_s64(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B980C8(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  unint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (float *)(v9 + 4 * v12);
      v21 = (float *)(v11 + v19);
      v22 = (float *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 + v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (float32x4_t *)(v10 + 16);
    v14 = (float32x4_t *)(v11 + 16);
    v15 = (float32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vaddq_f32(*v13, *v14);
      v15[-1] = vaddq_f32(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B981FC(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t *v15;
  unint64_t v16;
  float64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (double *)(v9 + 8 * v12);
      v21 = (double *)(v11 + v19);
      v22 = (double *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 + v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (float64x2_t *)(v10 + 16);
    v14 = (float64x2_t *)(v11 + 16);
    v15 = (float64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vaddq_f64(*v13, *v14);
      v15[-1] = vaddq_f64(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B98330(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  _BYTE *v9;
  char *v10;
  char *i;
  int v12;
  int v13;
  int v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B983E0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  _WORD *v9;
  __int16 *v10;
  __int16 *i;
  int v12;
  int v13;
  int v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (_WORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (__int16 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (__int16 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B98490(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  int *v9;
  int *v10;
  int *i;
  int v12;
  int v13;
  int v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B98540(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B985F0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  unsigned __int8 *i;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B986A0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  _WORD *v9;
  unsigned __int16 *v10;
  unsigned __int16 *i;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (_WORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (unsigned __int16 *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B98750(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  int *v9;
  int *v10;
  unsigned int *i;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B98800(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t *v10;
  unint64_t *i;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (unint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (unint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_240B988B0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  unint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (float *)(v9 + 4 * v12);
      v21 = (float *)(v11 + v19);
      v22 = (float *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 / v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (float32x4_t *)(v10 + 16);
    v14 = (float32x4_t *)(v11 + 16);
    v15 = (float32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vdivq_f32(*v13, *v14);
      v15[-1] = vdivq_f32(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B989E4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t *v15;
  unint64_t v16;
  float64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (double *)(v9 + 8 * v12);
      v21 = (double *)(v11 + v19);
      v22 = (double *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 / v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (float64x2_t *)(v10 + 16);
    v14 = (float64x2_t *)(v11 + 16);
    v15 = (float64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vdivq_f64(*v13, *v14);
      v15[-1] = vdivq_f64(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B98B18(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x8_t *v19;
  int8x8_t *v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  char v32;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
      goto LABEL_15;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20)
      goto LABEL_15;
    if (v8 >= 0x20)
    {
      v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x16_t *)(v10 + 16);
      v14 = (int8x16_t *)(v11 + 16);
      v15 = (int8x16_t *)(v9 + 16);
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = vmulq_s8(*v14, *v13);
        v15[-1] = vmulq_s8(v14[-1], v13[-1]);
        *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12)
        return a2 + 1;
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        v26 = v8 - v12;
        v27 = (_BYTE *)(v9 + v12);
        v28 = (char *)(v11 + v12);
        v29 = (char *)(v10 + v12);
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = *v28++;
          *v27++ = v32 * v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      v12 = 0;
    }
    v18 = v12;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v19 = (int8x8_t *)(v10 + v18);
    v20 = (int8x8_t *)(v11 + v18);
    v21 = (int8x8_t *)(v9 + v18);
    v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v19++;
      v24 = v23;
      v25 = *v20++;
      *v21++ = vmul_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12)
      goto LABEL_15;
  }
  return a2 + 1;
}

uint64_t sub_240B98C98(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;
  unint64_t v16;
  int16x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 2 * v12;
      v20 = (_WORD *)(v9 + 2 * v12);
      v21 = (__int16 *)(v11 + v19);
      v22 = (__int16 *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    v13 = (int16x8_t *)(v10 + 16);
    v14 = (int16x8_t *)(v11 + 16);
    v15 = (int16x8_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = vmulq_s16(*v14, *v13);
      v15[-1] = vmulq_s16(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B98DCC(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (_DWORD *)(v9 + 4 * v12);
      v21 = (int *)(v11 + v19);
      v22 = (int *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (int32x4_t *)(v10 + 16);
    v14 = (int32x4_t *)(v11 + 16);
    v15 = (int32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vmulq_s32(*v14, *v13);
      v15[-1] = vmulq_s32(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B98F00(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v14 * v12;
  }
  return a2 + 1;
}

uint64_t sub_240B98FB0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x8_t *v19;
  int8x8_t *v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  char v32;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
      goto LABEL_15;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20)
      goto LABEL_15;
    if (v8 >= 0x20)
    {
      v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x16_t *)(v10 + 16);
      v14 = (int8x16_t *)(v11 + 16);
      v15 = (int8x16_t *)(v9 + 16);
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = vmulq_s8(*v14, *v13);
        v15[-1] = vmulq_s8(v14[-1], v13[-1]);
        *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12)
        return a2 + 1;
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        v26 = v8 - v12;
        v27 = (_BYTE *)(v9 + v12);
        v28 = (char *)(v11 + v12);
        v29 = (char *)(v10 + v12);
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = *v28++;
          *v27++ = v32 * v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      v12 = 0;
    }
    v18 = v12;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v19 = (int8x8_t *)(v10 + v18);
    v20 = (int8x8_t *)(v11 + v18);
    v21 = (int8x8_t *)(v9 + v18);
    v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v19++;
      v24 = v23;
      v25 = *v20++;
      *v21++ = vmul_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12)
      goto LABEL_15;
  }
  return a2 + 1;
}

uint64_t sub_240B99130(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;
  unint64_t v16;
  int16x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 2 * v12;
      v20 = (_WORD *)(v9 + 2 * v12);
      v21 = (__int16 *)(v11 + v19);
      v22 = (__int16 *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    v13 = (int16x8_t *)(v10 + 16);
    v14 = (int16x8_t *)(v11 + 16);
    v15 = (int16x8_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = vmulq_s16(*v14, *v13);
      v15[-1] = vmulq_s16(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B99264(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (_DWORD *)(v9 + 4 * v12);
      v21 = (int *)(v11 + v19);
      v22 = (int *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (int32x4_t *)(v10 + 16);
    v14 = (int32x4_t *)(v11 + 16);
    v15 = (int32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vmulq_s32(*v14, *v13);
      v15[-1] = vmulq_s32(v14[-1], v13[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B99398(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  for (i = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    v13 = *v10++;
    v12 = v13;
    v14 = *i++;
    *v9++ = v14 * v12;
  }
  return a2 + 1;
}

uint64_t sub_240B99448(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  unint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (float *)(v9 + 4 * v12);
      v21 = (float *)(v11 + v19);
      v22 = (float *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 * v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (float32x4_t *)(v10 + 16);
    v14 = (float32x4_t *)(v11 + 16);
    v15 = (float32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vmulq_f32(*v13, *v14);
      v15[-1] = vmulq_f32(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B9957C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t *v15;
  unint64_t v16;
  float64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (double *)(v9 + 8 * v12);
      v21 = (double *)(v11 + v19);
      v22 = (double *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 * v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (float64x2_t *)(v10 + 16);
    v14 = (float64x2_t *)(v11 + 16);
    v15 = (float64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vmulq_f64(*v13, *v14);
      v15[-1] = vmulq_f64(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B996B0(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x8_t *v19;
  int8x8_t *v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  char v32;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
      goto LABEL_15;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20)
      goto LABEL_15;
    if (v8 >= 0x20)
    {
      v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x16_t *)(v10 + 16);
      v14 = (int8x16_t *)(v11 + 16);
      v15 = (int8x16_t *)(v9 + 16);
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = vsubq_s8(*v13, *v14);
        v15[-1] = vsubq_s8(v13[-1], v14[-1]);
        *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12)
        return a2 + 1;
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        v26 = v8 - v12;
        v27 = (_BYTE *)(v9 + v12);
        v28 = (char *)(v11 + v12);
        v29 = (char *)(v10 + v12);
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = *v28++;
          *v27++ = v30 - v32;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      v12 = 0;
    }
    v18 = v12;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v19 = (int8x8_t *)(v10 + v18);
    v20 = (int8x8_t *)(v11 + v18);
    v21 = (int8x8_t *)(v9 + v18);
    v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v19++;
      v24 = v23;
      v25 = *v20++;
      *v21++ = vsub_s8(v24, v25);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12)
      goto LABEL_15;
  }
  return a2 + 1;
}

uint64_t sub_240B99830(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;
  unint64_t v16;
  int16x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 2 * v12;
      v20 = (_WORD *)(v9 + 2 * v12);
      v21 = (__int16 *)(v11 + v19);
      v22 = (__int16 *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    v13 = (int16x8_t *)(v10 + 16);
    v14 = (int16x8_t *)(v11 + 16);
    v15 = (int16x8_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = vsubq_s16(*v13, *v14);
      v15[-1] = vsubq_s16(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B99964(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (_DWORD *)(v9 + 4 * v12);
      v21 = (int *)(v11 + v19);
      v22 = (int *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (int32x4_t *)(v10 + 16);
    v14 = (int32x4_t *)(v11 + 16);
    v15 = (int32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vsubq_s32(*v13, *v14);
      v15[-1] = vsubq_s32(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B99A98(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (_QWORD *)(v9 + 8 * v12);
      v21 = (uint64_t *)(v11 + v19);
      v22 = (uint64_t *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (int64x2_t *)(v10 + 16);
    v14 = (int64x2_t *)(v11 + 16);
    v15 = (int64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vsubq_s64(*v13, *v14);
      v15[-1] = vsubq_s64(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B99BCC(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  int8x16_t *v15;
  unint64_t v16;
  int8x16_t v17;
  unint64_t v18;
  int8x8_t *v19;
  int8x8_t *v20;
  int8x8_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x8_t v25;
  unint64_t v26;
  _BYTE *v27;
  char *v28;
  char *v29;
  char v30;
  char v31;
  char v32;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
      goto LABEL_15;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20)
      goto LABEL_15;
    if (v8 >= 0x20)
    {
      v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      v13 = (int8x16_t *)(v10 + 16);
      v14 = (int8x16_t *)(v11 + 16);
      v15 = (int8x16_t *)(v9 + 16);
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v17 = vsubq_s8(*v13, *v14);
        v15[-1] = vsubq_s8(v13[-1], v14[-1]);
        *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12)
        return a2 + 1;
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        v26 = v8 - v12;
        v27 = (_BYTE *)(v9 + v12);
        v28 = (char *)(v11 + v12);
        v29 = (char *)(v10 + v12);
        do
        {
          v31 = *v29++;
          v30 = v31;
          v32 = *v28++;
          *v27++ = v30 - v32;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      v12 = 0;
    }
    v18 = v12;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v19 = (int8x8_t *)(v10 + v18);
    v20 = (int8x8_t *)(v11 + v18);
    v21 = (int8x8_t *)(v9 + v18);
    v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v23 = *v19++;
      v24 = v23;
      v25 = *v20++;
      *v21++ = vsub_s8(v24, v25);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12)
      goto LABEL_15;
  }
  return a2 + 1;
}

uint64_t sub_240B99D4C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int16x8_t *v13;
  int16x8_t *v14;
  int16x8_t *v15;
  unint64_t v16;
  int16x8_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  __int16 *v21;
  __int16 *v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 2 * v12;
      v20 = (_WORD *)(v9 + 2 * v12);
      v21 = (__int16 *)(v11 + v19);
      v22 = (__int16 *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    v13 = (int16x8_t *)(v10 + 16);
    v14 = (int16x8_t *)(v11 + 16);
    v15 = (int16x8_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = vsubq_s16(*v13, *v14);
      v15[-1] = vsubq_s16(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B99E80(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  int32x4_t *v15;
  unint64_t v16;
  int32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  int *v21;
  int *v22;
  int v23;
  int v24;
  int v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (_DWORD *)(v9 + 4 * v12);
      v21 = (int *)(v11 + v19);
      v22 = (int *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (int32x4_t *)(v10 + 16);
    v14 = (int32x4_t *)(v11 + 16);
    v15 = (int32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vsubq_s32(*v13, *v14);
      v15[-1] = vsubq_s32(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B99FB4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  int64x2_t *v15;
  unint64_t v16;
  int64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (_QWORD *)(v9 + 8 * v12);
      v21 = (uint64_t *)(v11 + v19);
      v22 = (uint64_t *)(v10 + v19);
      do
      {
        v24 = *v22++;
        v23 = v24;
        v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (int64x2_t *)(v10 + 16);
    v14 = (int64x2_t *)(v11 + 16);
    v15 = (int64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vsubq_s64(*v13, *v14);
      v15[-1] = vsubq_s64(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B9A0E8(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float32x4_t *v13;
  float32x4_t *v14;
  float32x4_t *v15;
  unint64_t v16;
  float32x4_t v17;
  unint64_t v18;
  uint64_t v19;
  float *v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 4 * v12;
      v20 = (float *)(v9 + 4 * v12);
      v21 = (float *)(v11 + v19);
      v22 = (float *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    v13 = (float32x4_t *)(v10 + 16);
    v14 = (float32x4_t *)(v11 + 16);
    v15 = (float32x4_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v17 = vsubq_f32(*v13, *v14);
      v15[-1] = vsubq_f32(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B9A21C(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;
  float64x2_t *v15;
  unint64_t v16;
  float64x2_t v17;
  unint64_t v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  double v23;
  double v24;
  double v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      v12 = 0;
LABEL_9:
      v18 = v8 - v12;
      v19 = 8 * v12;
      v20 = (double *)(v9 + 8 * v12);
      v21 = (double *)(v11 + v19);
      v22 = (double *)(v10 + v19);
      do
      {
        v23 = *v22++;
        v24 = v23;
        v25 = *v21++;
        *v20++ = v24 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20)
      goto LABEL_9;
    if ((unint64_t)(v9 - v11) < 0x20)
      goto LABEL_9;
    v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    v13 = (float64x2_t *)(v10 + 16);
    v14 = (float64x2_t *)(v11 + 16);
    v15 = (float64x2_t *)(v9 + 16);
    v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v17 = vsubq_f64(*v13, *v14);
      v15[-1] = vsubq_f64(v13[-1], v14[-1]);
      *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12)
      goto LABEL_9;
  }
  return a2 + 1;
}

uint64_t sub_240B9A350()
{
  return -1;
}

uint64_t sub_240B9A358()
{
  return -1;
}

uint64_t sub_240B9A360(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5)
{
  void *v7;
  const void *v8;
  size_t v9;

  v7 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v8 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 128))(**a5);
  memcpy(v7, v8, v9);
  return a2 + 1;
}

uint64_t sub_240B9A3E0()
{
  return -1;
}

uint64_t sub_240B9A3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v7)
  {
    v8 = v7;
    v9 = 0;
    do
    {
      sub_240BA77BC(**a5);
      v9 = sub_240B9E9E8(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_240B9A828(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  FILE **v13;
  uint64_t v14;
  uint64_t v15;
  FILE *v17;
  int v18;
  void **v19;
  uint64_t v20;
  void **v21;
  const char *v22;
  void *__p[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = 0;
    v13 = (FILE **)MEMORY[0x24BDAC8D8];
    do
    {
      v14 = sub_240BA77BC(**a5);
      if (*(char *)(v14 + 23) >= 0)
        v15 = v14;
      else
        v15 = *(_QWORD *)v14;
      if (fabsf(*(float *)(v8 + 4 * v12)) == INFINITY)
      {
        fprintf(*v13, "Inf in %s at index %zu\n", v15, v12);
        v11 = 1;
      }
      v12 = sub_240B9E9E8(**a5, v12);
      --v10;
    }
    while (v10);
    if ((v11 & 1) != 0)
    {
      sub_240B9AC68(__p, "name");
      sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v25);
      if (SHIBYTE(v24) < 0)
        operator delete(__p[0]);
      if (v27 == 2)
      {
        if (SHIBYTE(v26) < 0)
        {
          sub_240B6FF68(__p, (void *)v25, *((unint64_t *)&v25 + 1));
        }
        else
        {
          *(_OWORD *)__p = v25;
          v24 = v26;
        }
        v17 = *v13;
        v18 = SHIBYTE(v24);
        v19 = (void **)__p[0];
        v20 = sub_240BA77BC(**a5);
        v21 = __p;
        if (v18 < 0)
          v21 = v19;
        if (*(char *)(v20 + 23) >= 0)
          v22 = (const char *)v20;
        else
          v22 = *(const char **)v20;
        fprintf(v17, "%s: found invalid values in %s.\n", (const char *)v21, v22);
        abort();
      }
      sub_240B735D8();
    }
  }
  return a2 + 1;
}

void sub_240B9AA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_240B73210((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_240B9AA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9AA48(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  FILE **v13;
  uint64_t v14;
  uint64_t v15;
  FILE *v17;
  int v18;
  void **v19;
  uint64_t v20;
  void **v21;
  const char *v22;
  void *__p[2];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 176))(**a5);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a5 + 120))(**a5);
  if (v9)
  {
    v10 = v9;
    v11 = 0;
    v12 = 0;
    v13 = (FILE **)MEMORY[0x24BDAC8D8];
    do
    {
      v14 = sub_240BA77BC(**a5);
      if (*(char *)(v14 + 23) >= 0)
        v15 = v14;
      else
        v15 = *(_QWORD *)v14;
      if (fabs(*(double *)(v8 + 8 * v12)) == INFINITY)
      {
        fprintf(*v13, "Inf in %s at index %zu\n", v15, v12);
        v11 = 1;
      }
      v12 = sub_240B9E9E8(**a5, v12);
      --v10;
    }
    while (v10);
    if ((v11 & 1) != 0)
    {
      sub_240B9AC68(__p, "name");
      sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v25);
      if (SHIBYTE(v24) < 0)
        operator delete(__p[0]);
      if (v27 == 2)
      {
        if (SHIBYTE(v26) < 0)
        {
          sub_240B6FF68(__p, (void *)v25, *((unint64_t *)&v25 + 1));
        }
        else
        {
          *(_OWORD *)__p = v25;
          v24 = v26;
        }
        v17 = *v13;
        v18 = SHIBYTE(v24);
        v19 = (void **)__p[0];
        v20 = sub_240BA77BC(**a5);
        v21 = __p;
        if (v18 < 0)
          v21 = v19;
        if (*(char *)(v20 + 23) >= 0)
          v22 = (const char *)v20;
        else
          v22 = *(const char **)v20;
        fprintf(v17, "%s: found invalid values in %s.\n", (const char *)v21, v22);
        abort();
      }
      sub_240B735D8();
    }
  }
  return a2 + 1;
}

void sub_240B9AC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_240B73210((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_240B9AC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_240B9AC68(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_240B9AD18(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::ios_base *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  void *v29;
  unint64_t v30;
  const void **v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  unint64_t v36;
  void *__p[2];
  char v38;
  _QWORD v39[3];
  uint64_t v40;
  unint64_t v41;
  void *v42[2];
  __int128 v43;
  int v44;
  uint64_t v45[19];

  v6 = (_QWORD *)(a3 + 320);
  v7 = sub_240BA77BC(**a1);
  v8 = sub_240B9D788(v6, v7);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)**a1 + 224))(**a1, v8[5]);
    v9 = sub_240BA29C8(a3);
    v38 = 14;
    strcpy((char *)__p, "debug-constant");
    v10 = sub_240BB8708(v9, (uint64_t)__p);
    v11 = v10;
    if (v38 < 0)
    {
      operator delete(__p[0]);
      if (!v11)
        goto LABEL_5;
    }
    else if (!v10)
    {
LABEL_5:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)**a1 + 112))(**a1, 0);
      return a2 + 1;
    }
    sub_240B9B0C4(**a1);
    goto LABEL_5;
  }
  v13 = MEMORY[0x24BEDB870];
  v14 = MEMORY[0x24BEDB870] + 64;
  v15 = MEMORY[0x24BEDB800];
  v16 = *(void **)(MEMORY[0x24BEDB800] + 8);
  v17 = *(void **)(MEMORY[0x24BEDB800] + 16);
  v45[0] = MEMORY[0x24BEDB870] + 64;
  __p[0] = v16;
  *(void **)((char *)__p + *((_QWORD *)v16 - 3)) = v17;
  v18 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
  std::ios_base::init(v18, &__p[1]);
  v18[1].__vftable = 0;
  v18[1].__fmtflags_ = -1;
  __p[0] = (void *)(v13 + 24);
  v45[0] = v14;
  std::streambuf::basic_streambuf();
  v19 = MEMORY[0x24BEDB848];
  __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  *(_OWORD *)v42 = 0u;
  v43 = 0u;
  v44 = 16;
  v20 = sub_240B8AA18(__p, (uint64_t)"ICE: no constant for '", 22);
  v21 = sub_240BA77BC(**a1);
  v22 = *(char *)(v21 + 23);
  if (v22 >= 0)
    v23 = v21;
  else
    v23 = *(_QWORD *)v21;
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(v21 + 23);
  else
    v24 = *(_QWORD *)(v21 + 8);
  v25 = sub_240B8AA18(v20, v23, v24);
  sub_240B8AA18(v25, (uint64_t)"' in ", 5);
  v26 = (_QWORD *)std::ostream::operator<<();
  sub_240B8AA18(v26, (uint64_t)"-element constant table.", 24);
  v27 = *(_QWORD **)(a3 + 32);
  if ((v44 & 0x10) != 0)
  {
    v30 = *((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1) < v41)
    {
      *((_QWORD *)&v43 + 1) = v41;
      v30 = v41;
    }
    v31 = (const void **)&v40;
  }
  else
  {
    if ((v44 & 8) == 0)
    {
      v28 = 0;
      HIBYTE(v36) = 0;
      v29 = v35;
      goto LABEL_29;
    }
    v31 = (const void **)v39;
    v30 = v39[2];
  }
  v32 = *v31;
  v28 = v30 - (_QWORD)*v31;
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v28 >= 0x17)
  {
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    v29 = operator new(v33 + 1);
    v35[1] = (void *)v28;
    v36 = v34 | 0x8000000000000000;
    v35[0] = v29;
  }
  else
  {
    HIBYTE(v36) = v30 - *(_BYTE *)v31;
    v29 = v35;
    if (!v28)
      goto LABEL_29;
  }
  memmove(v29, v32, v28);
LABEL_29:
  *((_BYTE *)v29 + v28) = 0;
  sub_240BB7D38(v27, 4, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  __p[0] = *(void **)v15;
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v15 + 24);
  __p[1] = (void *)(v19 + 16);
  if (SBYTE7(v43) < 0)
    operator delete(v42[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v45);
  return -1;
}

void sub_240B9B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_240B9B0C4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const char *v4;
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v3 = sub_240BA77BC(a1);
  if (*(char *)(v3 + 23) >= 0)
    v4 = (const char *)v3;
  else
    v4 = *(const char **)v3;
  if (v2 != 9)
    return printf("%s is not fp32. skipping.\n", v4);
  v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  printf("load %s(%p) = {\n", v4, v5);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1))
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (!v8)
        putchar(9);
      printf("%10.8f ", *(float *)(v6 + 4 * v7));
      if (v8 >= 5)
      {
        putchar(10);
        v8 = 0;
      }
      else
      {
        ++v8;
      }
      ++v7;
    }
    while (v7 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1));
    if (v8)
      putchar(10);
  }
  return puts("}");
}

_QWORD *sub_240B9B21C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  int v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17[0] = &off_25110C7F8;
  v17[1] = sub_240B9AD18;
  v18 = v17;
  sub_240B9453C(a1, 0, 0, 27, 0, 0, v17);
  v2 = v18;
  if (v18 == v17)
  {
    v3 = 4;
    v2 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v10 = 4;
  v15[0] = &off_25110C7F8;
  v15[1] = sub_240B9B49C;
  v16 = v15;
  sub_240B9453C(a1, (char *)&v10, 1, 42, 0, 0, v15);
  v4 = v16;
  if (v16 == v15)
  {
    v5 = 4;
    v4 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v10 = 8;
  v13[0] = &off_25110C7F8;
  v13[1] = sub_240B9C040;
  v14 = v13;
  sub_240B9453C(a1, (char *)&v10, 1, 42, 0, 0, v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v10 = 9;
  v11[0] = &off_25110C7F8;
  v11[1] = sub_240B9CBE4;
  v12 = v11;
  sub_240B9453C(a1, (char *)&v10, 1, 42, 0, 0, v11);
  result = v12;
  if (v12 == v11)
  {
    v9 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v9 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
}

void sub_240B9B410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9B49C(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  off_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  void *v14;
  void **v15;
  size_t v16;
  const char *v17;
  int v18;
  void *v19;
  _QWORD *v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  size_t v32;
  int v33;
  size_t v34;
  unint64_t v35;
  _QWORD *v36;
  _BYTE *v37;
  MIL::Blob::StorageReader *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Data;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  size_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  int *v62;
  char *v63;
  size_t v64;
  size_t v65;
  std::string::size_type v66;
  std::string::size_type v67;
  _BYTE *v68;
  std::string::size_type v69;
  void *v70[2];
  uint64_t v71;
  std::__fs::filesystem::path v72;
  _BYTE v73[48];
  uint64_t __dst_16;
  _OWORD v75[2];
  void *__p[2];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  int v82;

  HIBYTE(v79) = 6;
  strcpy((char *)&v78, "offset");
  sub_240BA7A94(a4, (uint64_t)&v78, (uint64_t)&v80);
  if (v82)
    sub_240B735D8();
  v8 = v80;
  v82 = -1;
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  HIBYTE(v77) = 4;
  strcpy((char *)__p, "path");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v80);
  if (v82 != 2)
    sub_240B735D8();
  v78 = v80;
  v79 = v81;
  v81 = 0;
  v80 = 0uLL;
  v82 = -1;
  if (SHIBYTE(v77) < 0)
    operator delete(__p[0]);
  BYTE7(v75[1]) = 4;
  strcpy((char *)v75, "type");
  sub_240BA7A94(a4, (uint64_t)v75, (uint64_t)&v80);
  if (v82 != 2)
    sub_240B735D8();
  *(_OWORD *)__p = v80;
  v77 = v81;
  v81 = 0;
  v80 = 0uLL;
  v82 = -1;
  if (SBYTE7(v75[1]) < 0)
    operator delete(*(void **)&v75[0]);
  v9 = sub_240BA29C8(a3);
  BYTE7(v75[1]) = 18;
  strcpy((char *)v75, "load-constant-path");
  sub_240BB87B0(v9, (uint64_t)v75, (uint64_t)&v80);
  if (SBYTE7(v75[1]) < 0)
    operator delete(*(void **)&v75[0]);
  memset(v73, 0, 24);
  v10 = HIBYTE(v81);
  if (v81 >= 0)
    v11 = (std::string *)&v80;
  else
    v11 = (std::string *)v80;
  if (v81 < 0)
    v10 = *((_QWORD *)&v80 + 1);
  sub_240B9DA60((std::string *)v73, v11, (std::string *)((char *)v11 + v10));
  memset(&v72, 0, sizeof(v72));
  v12 = HIBYTE(v79);
  if (v79 >= 0)
    v13 = (std::string *)&v78;
  else
    v13 = (std::string *)v78;
  if (v79 < 0)
    v12 = *((_QWORD *)&v78 + 1);
  sub_240B9DA60(&v72.__pn_, v13, (std::string *)((char *)v13 + v12));
  if ((v73[23] & 0x80000000) != 0)
  {
    sub_240B6FF68(&v73[32], *(void **)v73, *(unint64_t *)&v73[8]);
  }
  else
  {
    *(_OWORD *)&v73[32] = *(_OWORD *)v73;
    __dst_16 = *(_QWORD *)&v73[16];
  }
  sub_240B9D908((std::__fs::filesystem::path *)&v73[32], &v72);
  if (SHIBYTE(__dst_16) < 0)
  {
    sub_240B6FF68(v75, *(void **)&v73[32], *(unint64_t *)&v73[40]);
  }
  else
  {
    v75[0] = *(_OWORD *)&v73[32];
    *(_QWORD *)&v75[1] = __dst_16;
  }
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  v78 = v75[0];
  v79 = *(_QWORD *)&v75[1];
  BYTE7(v75[1]) = 0;
  LOBYTE(v75[0]) = 0;
  if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_58:
    operator delete(v72.__pn_.__r_.__value_.__l.__data_);
    if ((v73[23] & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_59;
  }
  operator delete(*(void **)&v73[32]);
  if (SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_58;
LABEL_32:
  if ((v73[23] & 0x80000000) == 0)
    goto LABEL_33;
LABEL_59:
  operator delete(*(void **)v73);
LABEL_33:
  v14 = (void *)HIBYTE(v77);
  if (v77 < 0)
    v14 = __p[1];
  if (v14 != (void *)8)
  {
LABEL_75:
    v42 = sub_240BA29C8(a3);
    BYTE7(v75[1]) = 14;
    strcpy((char *)v75, "debug-constant");
    v43 = sub_240BB8708(v42, (uint64_t)v75);
    v44 = v43;
    if (SBYTE7(v75[1]) < 0)
    {
      operator delete(*(void **)&v75[0]);
      if (!v44)
        goto LABEL_80;
    }
    else if (!v43)
    {
LABEL_80:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)**a1 + 112))(**a1, 0);
      v45 = a2 + 1;
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_81;
      goto LABEL_142;
    }
    sub_240B9B0C4(**a1);
    goto LABEL_80;
  }
  v15 = __p;
  if (v77 < 0)
    v15 = (void **)__p[0];
  if (*v15 == (void *)0x626F6C625F6C696DLL)
  {
    *(_QWORD *)&v75[0] = &v78;
    v30 = sub_240B9DDDC(a3 + 392, (uint64_t)&v78, (uint64_t)&unk_240BBBF40, (__int128 **)v75);
    if (!v30[5])
    {
      v31 = operator new();
      if (SHIBYTE(v79) < 0)
      {
        sub_240B6FF68(v70, (void *)v78, *((unint64_t *)&v78 + 1));
      }
      else
      {
        *(_OWORD *)v70 = v78;
        v71 = v79;
      }
      MEMORY[0x24268AAD0](v31, v70);
      v38 = (MIL::Blob::StorageReader *)v30[5];
      v30[5] = v31;
      if (v38)
      {
        MIL::Blob::StorageReader::~StorageReader(v38);
        MEMORY[0x24268ACF8](v39, 0x20C4093837F09, v40);
      }
      if (SHIBYTE(v71) < 0)
        operator delete(v70[0]);
    }
    Data = MIL::Blob::StorageReader::GetDataView<unsigned char>();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)**a1 + 224))(**a1, Data);
    goto LABEL_75;
  }
  if (*v15 != (void *)0x7761725F70616D6DLL)
    goto LABEL_75;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 128))(**a1);
  if (v79 >= 0)
    v17 = (const char *)&v78;
  else
    v17 = (const char *)v78;
  v18 = open(v17, 0);
  if (v18 != -1)
  {
    v19 = mmap(0, v16, 1, 2, v18, v8);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)**a1 + 224))(**a1, v19);
    *(_QWORD *)&v75[0] = v19;
    v20 = (_QWORD *)operator new();
    v20[1] = 0;
    v21 = v20 + 1;
    *v20 = &off_25110C868;
    v20[2] = 0;
    v20[3] = v19;
    v20[4] = v16;
    *((_QWORD *)&v75[0] + 1) = v20;
    *(_QWORD *)&v73[32] = &v78;
    v22 = sub_240B9E24C(a3 + 432, (uint64_t)&v78, (uint64_t)&unk_240BBBF40, (__int128 **)&v73[32]);
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v24 = (std::__shared_weak_count *)v22[6];
    v22[5] = (uint64_t)v19;
    v22[6] = (uint64_t)v20;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v75[0] + 1);
    if (*((_QWORD *)&v75[0] + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v75[0] + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    close(v18);
    goto LABEL_75;
  }
  v32 = 0x7FFFFFFFFFFFFFF7;
  v33 = SHIBYTE(v79);
  if (v79 >= 0)
    v34 = HIBYTE(v79);
  else
    v34 = *((_QWORD *)&v78 + 1);
  v35 = v34 + 36;
  if (v34 + 36 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  v36 = *(_QWORD **)(a3 + 32);
  if (v35 <= 0x16)
  {
    qmemcpy(v73, "Could not open external constant at ", 36);
    v37 = &v73[36];
LABEL_87:
    if (v33 >= 0)
      v50 = &v78;
    else
      v50 = (__int128 *)v78;
    memmove(v37, v50, v34);
    goto LABEL_91;
  }
  v47 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v35 | 7) != 0x17)
    v47 = v35 | 7;
  v48 = v47 + 1;
  v49 = (char *)operator new(v47 + 1);
  *(_QWORD *)&v73[8] = v34 + 36;
  *(_QWORD *)&v73[16] = v48 | 0x8000000000000000;
  *(_QWORD *)v73 = v49;
  qmemcpy(v49, "Could not open external constant at ", 36);
  v37 = v49 + 36;
  if (v34)
    goto LABEL_87;
LABEL_91:
  v37[v34] = 0;
  v51 = v73[23];
  if (v73[23] >= 0)
    v52 = 22;
  else
    v52 = (*(_QWORD *)&v73[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v73[23] < 0)
    v51 = *(_QWORD *)&v73[8];
  if (v52 == v51)
  {
    if (v52 == 0x7FFFFFFFFFFFFFF6)
      sub_240B6FFF4();
    if (v73[23] >= 0)
      v53 = v73;
    else
      v53 = *(_BYTE **)v73;
    if (v52 <= 0x3FFFFFFFFFFFFFF2)
    {
      if (v52 + 1 > 2 * v52)
        v54 = v52 + 1;
      else
        v54 = 2 * v52;
      if (v54 >= 0x17)
      {
        v58 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        v59 = v54 | 7;
        if (v59 == 23)
          v59 = v58;
        v32 = v59 + 1;
      }
      else
      {
        v32 = 23;
      }
    }
    v60 = operator new(v32);
    v61 = v60;
    if (v52)
    {
      memmove(v60, v53, v52);
      v61[v52] = 58;
      if (v52 == 22)
        goto LABEL_121;
    }
    else
    {
      *v60 = 58;
    }
    operator delete(v53);
LABEL_121:
    *(_QWORD *)v73 = v61;
    *(_QWORD *)&v73[8] = v52 + 1;
    *(_QWORD *)&v73[16] = v32 | 0x8000000000000000;
    v57 = &v61[v52 + 1];
    goto LABEL_122;
  }
  v55 = v73;
  if (v73[23] < 0)
    v55 = *(_BYTE **)v73;
  v55[v51] = 58;
  v56 = v51 + 1;
  if ((v73[23] & 0x80000000) != 0)
    *(_QWORD *)&v73[8] = v56;
  else
    v73[23] = v56 & 0x7F;
  v57 = &v55[v56];
LABEL_122:
  *v57 = 0;
  *(_OWORD *)&v73[32] = *(_OWORD *)v73;
  __dst_16 = *(_QWORD *)&v73[16];
  memset(v73, 0, 24);
  v62 = __error();
  v63 = strerror(*v62);
  v64 = strlen(v63);
  v65 = v64;
  if (__dst_16 >= 0)
    v66 = 22;
  else
    v66 = (__dst_16 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (__dst_16 >= 0)
    v67 = HIBYTE(__dst_16);
  else
    v67 = *(_QWORD *)&v73[40];
  if (v66 - v67 >= v64)
  {
    if (v64)
    {
      if (__dst_16 >= 0)
        v68 = &v73[32];
      else
        v68 = *(_BYTE **)&v73[32];
      memmove(&v68[v67], v63, v64);
      v69 = v67 + v65;
      if (SHIBYTE(__dst_16) < 0)
        *(_QWORD *)&v73[40] = v67 + v65;
      else
        HIBYTE(__dst_16) = v69 & 0x7F;
      v68[v69] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v73[32], v66, v67 + v64 - v66, v67, v67, 0, v64, v63);
  }
  v75[0] = *(_OWORD *)&v73[32];
  *(_QWORD *)&v75[1] = __dst_16;
  __dst_16 = 0;
  *(_OWORD *)&v73[32] = 0uLL;
  sub_240BB7D38(v36, 5, (uint64_t)v75);
  if ((SBYTE7(v75[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
      goto LABEL_140;
LABEL_146:
    operator delete(*(void **)&v73[32]);
    if ((v73[23] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_147;
  }
  operator delete(*(void **)&v75[0]);
  if (SHIBYTE(__dst_16) < 0)
    goto LABEL_146;
LABEL_140:
  if ((v73[23] & 0x80000000) == 0)
    goto LABEL_141;
LABEL_147:
  operator delete(*(void **)v73);
LABEL_141:
  v45 = -1;
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v77) & 0x80000000) == 0)
      goto LABEL_82;
LABEL_143:
    operator delete(__p[0]);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
      return v45;
LABEL_144:
    operator delete((void *)v78);
    return v45;
  }
LABEL_142:
  operator delete((void *)v80);
  if (SHIBYTE(v77) < 0)
    goto LABEL_143;
LABEL_82:
  if (SHIBYTE(v79) < 0)
    goto LABEL_144;
  return v45;
}

void sub_240B9BE50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  MEMORY[0x24268ACF8](v44, 0x20C4093837F09);
  JUMPOUT(0x240B9C008);
}

void sub_240B9BEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  int v14;
  va_list va;

  va_start(va, a14);
  sub_240B6FE78((uint64_t)va);
  close(v14);
  JUMPOUT(0x240B9C008);
}

void sub_240B9BEBC(void *a1)
{
  void *v1;
  size_t v2;

  __cxa_begin_catch(a1);
  munmap(v1, v2);
  __cxa_rethrow();
}

void sub_240B9BED4()
{
  int v0;

  __cxa_end_catch();
  close(v0);
  JUMPOUT(0x240B9C008);
}

void sub_240B9BF20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0)
    operator delete(__p);
  if (a17 < 0)
    JUMPOUT(0x240B9BF68);
  JUMPOUT(0x240B9BF74);
}

void sub_240B9BF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x240B9C014);
  JUMPOUT(0x240B9C018);
}

void sub_240B9BF9C()
{
  JUMPOUT(0x240B9C018);
}

void sub_240B9BFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_240B73210(v28 - 112);
  if (a28 < 0)
    JUMPOUT(0x240B9C024);
  JUMPOUT(0x240B9C028);
}

void sub_240B9BFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_240B73210(v32 - 112);
  if (a32 < 0)
    JUMPOUT(0x240B9C034);
  JUMPOUT(0x240B9C038);
}

void sub_240B9BFEC()
{
  uint64_t v0;

  sub_240B73210(v0 - 112);
  JUMPOUT(0x240B9C028);
}

void sub_240B9BFFC()
{
  JUMPOUT(0x240B9C028);
}

void sub_240B9C004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9C040(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  off_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  void *v14;
  void **v15;
  size_t v16;
  const char *v17;
  int v18;
  void *v19;
  _QWORD *v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  size_t v32;
  int v33;
  size_t v34;
  unint64_t v35;
  _QWORD *v36;
  _BYTE *v37;
  MIL::Blob::StorageReader *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  size_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  int *v62;
  char *v63;
  size_t v64;
  size_t v65;
  std::string::size_type v66;
  std::string::size_type v67;
  _BYTE *v68;
  std::string::size_type v69;
  void *v70[2];
  uint64_t v71;
  std::__fs::filesystem::path v72;
  _BYTE v73[48];
  uint64_t __dst_16;
  _OWORD v75[2];
  void *__p[2];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  int v82;

  HIBYTE(v79) = 6;
  strcpy((char *)&v78, "offset");
  sub_240BA7A94(a4, (uint64_t)&v78, (uint64_t)&v80);
  if (v82)
    sub_240B735D8();
  v8 = v80;
  v82 = -1;
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  HIBYTE(v77) = 4;
  strcpy((char *)__p, "path");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v80);
  if (v82 != 2)
    sub_240B735D8();
  v78 = v80;
  v79 = v81;
  v81 = 0;
  v80 = 0uLL;
  v82 = -1;
  if (SHIBYTE(v77) < 0)
    operator delete(__p[0]);
  BYTE7(v75[1]) = 4;
  strcpy((char *)v75, "type");
  sub_240BA7A94(a4, (uint64_t)v75, (uint64_t)&v80);
  if (v82 != 2)
    sub_240B735D8();
  *(_OWORD *)__p = v80;
  v77 = v81;
  v81 = 0;
  v80 = 0uLL;
  v82 = -1;
  if (SBYTE7(v75[1]) < 0)
    operator delete(*(void **)&v75[0]);
  v9 = sub_240BA29C8(a3);
  BYTE7(v75[1]) = 18;
  strcpy((char *)v75, "load-constant-path");
  sub_240BB87B0(v9, (uint64_t)v75, (uint64_t)&v80);
  if (SBYTE7(v75[1]) < 0)
    operator delete(*(void **)&v75[0]);
  memset(v73, 0, 24);
  v10 = HIBYTE(v81);
  if (v81 >= 0)
    v11 = (std::string *)&v80;
  else
    v11 = (std::string *)v80;
  if (v81 < 0)
    v10 = *((_QWORD *)&v80 + 1);
  sub_240B9DA60((std::string *)v73, v11, (std::string *)((char *)v11 + v10));
  memset(&v72, 0, sizeof(v72));
  v12 = HIBYTE(v79);
  if (v79 >= 0)
    v13 = (std::string *)&v78;
  else
    v13 = (std::string *)v78;
  if (v79 < 0)
    v12 = *((_QWORD *)&v78 + 1);
  sub_240B9DA60(&v72.__pn_, v13, (std::string *)((char *)v13 + v12));
  if ((v73[23] & 0x80000000) != 0)
  {
    sub_240B6FF68(&v73[32], *(void **)v73, *(unint64_t *)&v73[8]);
  }
  else
  {
    *(_OWORD *)&v73[32] = *(_OWORD *)v73;
    __dst_16 = *(_QWORD *)&v73[16];
  }
  sub_240B9D908((std::__fs::filesystem::path *)&v73[32], &v72);
  if (SHIBYTE(__dst_16) < 0)
  {
    sub_240B6FF68(v75, *(void **)&v73[32], *(unint64_t *)&v73[40]);
  }
  else
  {
    v75[0] = *(_OWORD *)&v73[32];
    *(_QWORD *)&v75[1] = __dst_16;
  }
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  v78 = v75[0];
  v79 = *(_QWORD *)&v75[1];
  BYTE7(v75[1]) = 0;
  LOBYTE(v75[0]) = 0;
  if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_58:
    operator delete(v72.__pn_.__r_.__value_.__l.__data_);
    if ((v73[23] & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_59;
  }
  operator delete(*(void **)&v73[32]);
  if (SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_58;
LABEL_32:
  if ((v73[23] & 0x80000000) == 0)
    goto LABEL_33;
LABEL_59:
  operator delete(*(void **)v73);
LABEL_33:
  v14 = (void *)HIBYTE(v77);
  if (v77 < 0)
    v14 = __p[1];
  if (v14 != (void *)8)
  {
LABEL_75:
    v42 = sub_240BA29C8(a3);
    BYTE7(v75[1]) = 14;
    strcpy((char *)v75, "debug-constant");
    v43 = sub_240BB8708(v42, (uint64_t)v75);
    v44 = v43;
    if (SBYTE7(v75[1]) < 0)
    {
      operator delete(*(void **)&v75[0]);
      if (!v44)
        goto LABEL_80;
    }
    else if (!v43)
    {
LABEL_80:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)**a1 + 112))(**a1, 0);
      v45 = a2 + 1;
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_81;
      goto LABEL_142;
    }
    sub_240B9B0C4(**a1);
    goto LABEL_80;
  }
  v15 = __p;
  if (v77 < 0)
    v15 = (void **)__p[0];
  if (*v15 == (void *)0x626F6C625F6C696DLL)
  {
    *(_QWORD *)&v75[0] = &v78;
    v30 = sub_240B9DDDC(a3 + 392, (uint64_t)&v78, (uint64_t)&unk_240BBBF40, (__int128 **)v75);
    if (!v30[5])
    {
      v31 = operator new();
      if (SHIBYTE(v79) < 0)
      {
        sub_240B6FF68(v70, (void *)v78, *((unint64_t *)&v78 + 1));
      }
      else
      {
        *(_OWORD *)v70 = v78;
        v71 = v79;
      }
      MEMORY[0x24268AAD0](v31, v70);
      v38 = (MIL::Blob::StorageReader *)v30[5];
      v30[5] = v31;
      if (v38)
      {
        MIL::Blob::StorageReader::~StorageReader(v38);
        MEMORY[0x24268ACF8](v39, 0x20C4093837F09, v40);
      }
      if (SHIBYTE(v71) < 0)
        operator delete(v70[0]);
    }
    v41 = MIL::Blob::StorageReader::GetDataView<MIL::Fp16>();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)**a1 + 224))(**a1, v41);
    goto LABEL_75;
  }
  if (*v15 != (void *)0x7761725F70616D6DLL)
    goto LABEL_75;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 128))(**a1);
  if (v79 >= 0)
    v17 = (const char *)&v78;
  else
    v17 = (const char *)v78;
  v18 = open(v17, 0);
  if (v18 != -1)
  {
    v19 = mmap(0, v16, 1, 2, v18, v8);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)**a1 + 224))(**a1, v19);
    *(_QWORD *)&v75[0] = v19;
    v20 = (_QWORD *)operator new();
    v20[1] = 0;
    v21 = v20 + 1;
    *v20 = &off_25110C8A0;
    v20[2] = 0;
    v20[3] = v19;
    v20[4] = v16;
    *((_QWORD *)&v75[0] + 1) = v20;
    *(_QWORD *)&v73[32] = &v78;
    v22 = sub_240B9E24C(a3 + 432, (uint64_t)&v78, (uint64_t)&unk_240BBBF40, (__int128 **)&v73[32]);
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v24 = (std::__shared_weak_count *)v22[6];
    v22[5] = (uint64_t)v19;
    v22[6] = (uint64_t)v20;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v75[0] + 1);
    if (*((_QWORD *)&v75[0] + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v75[0] + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    close(v18);
    goto LABEL_75;
  }
  v32 = 0x7FFFFFFFFFFFFFF7;
  v33 = SHIBYTE(v79);
  if (v79 >= 0)
    v34 = HIBYTE(v79);
  else
    v34 = *((_QWORD *)&v78 + 1);
  v35 = v34 + 36;
  if (v34 + 36 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  v36 = *(_QWORD **)(a3 + 32);
  if (v35 <= 0x16)
  {
    qmemcpy(v73, "Could not open external constant at ", 36);
    v37 = &v73[36];
LABEL_87:
    if (v33 >= 0)
      v50 = &v78;
    else
      v50 = (__int128 *)v78;
    memmove(v37, v50, v34);
    goto LABEL_91;
  }
  v47 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v35 | 7) != 0x17)
    v47 = v35 | 7;
  v48 = v47 + 1;
  v49 = (char *)operator new(v47 + 1);
  *(_QWORD *)&v73[8] = v34 + 36;
  *(_QWORD *)&v73[16] = v48 | 0x8000000000000000;
  *(_QWORD *)v73 = v49;
  qmemcpy(v49, "Could not open external constant at ", 36);
  v37 = v49 + 36;
  if (v34)
    goto LABEL_87;
LABEL_91:
  v37[v34] = 0;
  v51 = v73[23];
  if (v73[23] >= 0)
    v52 = 22;
  else
    v52 = (*(_QWORD *)&v73[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v73[23] < 0)
    v51 = *(_QWORD *)&v73[8];
  if (v52 == v51)
  {
    if (v52 == 0x7FFFFFFFFFFFFFF6)
      sub_240B6FFF4();
    if (v73[23] >= 0)
      v53 = v73;
    else
      v53 = *(_BYTE **)v73;
    if (v52 <= 0x3FFFFFFFFFFFFFF2)
    {
      if (v52 + 1 > 2 * v52)
        v54 = v52 + 1;
      else
        v54 = 2 * v52;
      if (v54 >= 0x17)
      {
        v58 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        v59 = v54 | 7;
        if (v59 == 23)
          v59 = v58;
        v32 = v59 + 1;
      }
      else
      {
        v32 = 23;
      }
    }
    v60 = operator new(v32);
    v61 = v60;
    if (v52)
    {
      memmove(v60, v53, v52);
      v61[v52] = 58;
      if (v52 == 22)
        goto LABEL_121;
    }
    else
    {
      *v60 = 58;
    }
    operator delete(v53);
LABEL_121:
    *(_QWORD *)v73 = v61;
    *(_QWORD *)&v73[8] = v52 + 1;
    *(_QWORD *)&v73[16] = v32 | 0x8000000000000000;
    v57 = &v61[v52 + 1];
    goto LABEL_122;
  }
  v55 = v73;
  if (v73[23] < 0)
    v55 = *(_BYTE **)v73;
  v55[v51] = 58;
  v56 = v51 + 1;
  if ((v73[23] & 0x80000000) != 0)
    *(_QWORD *)&v73[8] = v56;
  else
    v73[23] = v56 & 0x7F;
  v57 = &v55[v56];
LABEL_122:
  *v57 = 0;
  *(_OWORD *)&v73[32] = *(_OWORD *)v73;
  __dst_16 = *(_QWORD *)&v73[16];
  memset(v73, 0, 24);
  v62 = __error();
  v63 = strerror(*v62);
  v64 = strlen(v63);
  v65 = v64;
  if (__dst_16 >= 0)
    v66 = 22;
  else
    v66 = (__dst_16 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (__dst_16 >= 0)
    v67 = HIBYTE(__dst_16);
  else
    v67 = *(_QWORD *)&v73[40];
  if (v66 - v67 >= v64)
  {
    if (v64)
    {
      if (__dst_16 >= 0)
        v68 = &v73[32];
      else
        v68 = *(_BYTE **)&v73[32];
      memmove(&v68[v67], v63, v64);
      v69 = v67 + v65;
      if (SHIBYTE(__dst_16) < 0)
        *(_QWORD *)&v73[40] = v67 + v65;
      else
        HIBYTE(__dst_16) = v69 & 0x7F;
      v68[v69] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v73[32], v66, v67 + v64 - v66, v67, v67, 0, v64, v63);
  }
  v75[0] = *(_OWORD *)&v73[32];
  *(_QWORD *)&v75[1] = __dst_16;
  __dst_16 = 0;
  *(_OWORD *)&v73[32] = 0uLL;
  sub_240BB7D38(v36, 5, (uint64_t)v75);
  if ((SBYTE7(v75[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
      goto LABEL_140;
LABEL_146:
    operator delete(*(void **)&v73[32]);
    if ((v73[23] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_147;
  }
  operator delete(*(void **)&v75[0]);
  if (SHIBYTE(__dst_16) < 0)
    goto LABEL_146;
LABEL_140:
  if ((v73[23] & 0x80000000) == 0)
    goto LABEL_141;
LABEL_147:
  operator delete(*(void **)v73);
LABEL_141:
  v45 = -1;
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v77) & 0x80000000) == 0)
      goto LABEL_82;
LABEL_143:
    operator delete(__p[0]);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
      return v45;
LABEL_144:
    operator delete((void *)v78);
    return v45;
  }
LABEL_142:
  operator delete((void *)v80);
  if (SHIBYTE(v77) < 0)
    goto LABEL_143;
LABEL_82:
  if (SHIBYTE(v79) < 0)
    goto LABEL_144;
  return v45;
}

void sub_240B9C9F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  MEMORY[0x24268ACF8](v44, 0x20C4093837F09);
  JUMPOUT(0x240B9CBACLL);
}

void sub_240B9CA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  int v14;
  va_list va;

  va_start(va, a14);
  sub_240B6FE78((uint64_t)va);
  close(v14);
  JUMPOUT(0x240B9CBACLL);
}

void sub_240B9CA60(void *a1)
{
  void *v1;
  size_t v2;

  __cxa_begin_catch(a1);
  munmap(v1, v2);
  __cxa_rethrow();
}

void sub_240B9CA78()
{
  int v0;

  __cxa_end_catch();
  close(v0);
  JUMPOUT(0x240B9CBACLL);
}

void sub_240B9CAC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0)
    operator delete(__p);
  if (a17 < 0)
    JUMPOUT(0x240B9CB0CLL);
  JUMPOUT(0x240B9CB18);
}

void sub_240B9CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x240B9CBB8);
  JUMPOUT(0x240B9CBBCLL);
}

void sub_240B9CB40()
{
  JUMPOUT(0x240B9CBBCLL);
}

void sub_240B9CB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_240B73210(v28 - 112);
  if (a28 < 0)
    JUMPOUT(0x240B9CBC8);
  JUMPOUT(0x240B9CBCCLL);
}

void sub_240B9CB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_240B73210(v32 - 112);
  if (a32 < 0)
    JUMPOUT(0x240B9CBD8);
  JUMPOUT(0x240B9CBDCLL);
}

void sub_240B9CB90()
{
  uint64_t v0;

  sub_240B73210(v0 - 112);
  JUMPOUT(0x240B9CBCCLL);
}

void sub_240B9CBA0()
{
  JUMPOUT(0x240B9CBCCLL);
}

void sub_240B9CBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9CBE4(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  off_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  std::string *v13;
  void *v14;
  void **v15;
  size_t v16;
  const char *v17;
  int v18;
  void *v19;
  _QWORD *v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  size_t v32;
  int v33;
  size_t v34;
  unint64_t v35;
  _QWORD *v36;
  _BYTE *v37;
  MIL::Blob::StorageReader *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t Data;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  size_t v52;
  _BYTE *v53;
  unint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  unint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  int *v62;
  char *v63;
  size_t v64;
  size_t v65;
  std::string::size_type v66;
  std::string::size_type v67;
  _BYTE *v68;
  std::string::size_type v69;
  void *v70[2];
  uint64_t v71;
  std::__fs::filesystem::path v72;
  _BYTE v73[48];
  uint64_t __dst_16;
  _OWORD v75[2];
  void *__p[2];
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  int v82;

  HIBYTE(v79) = 6;
  strcpy((char *)&v78, "offset");
  sub_240BA7A94(a4, (uint64_t)&v78, (uint64_t)&v80);
  if (v82)
    sub_240B735D8();
  v8 = v80;
  v82 = -1;
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  HIBYTE(v77) = 4;
  strcpy((char *)__p, "path");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v80);
  if (v82 != 2)
    sub_240B735D8();
  v78 = v80;
  v79 = v81;
  v81 = 0;
  v80 = 0uLL;
  v82 = -1;
  if (SHIBYTE(v77) < 0)
    operator delete(__p[0]);
  BYTE7(v75[1]) = 4;
  strcpy((char *)v75, "type");
  sub_240BA7A94(a4, (uint64_t)v75, (uint64_t)&v80);
  if (v82 != 2)
    sub_240B735D8();
  *(_OWORD *)__p = v80;
  v77 = v81;
  v81 = 0;
  v80 = 0uLL;
  v82 = -1;
  if (SBYTE7(v75[1]) < 0)
    operator delete(*(void **)&v75[0]);
  v9 = sub_240BA29C8(a3);
  BYTE7(v75[1]) = 18;
  strcpy((char *)v75, "load-constant-path");
  sub_240BB87B0(v9, (uint64_t)v75, (uint64_t)&v80);
  if (SBYTE7(v75[1]) < 0)
    operator delete(*(void **)&v75[0]);
  memset(v73, 0, 24);
  v10 = HIBYTE(v81);
  if (v81 >= 0)
    v11 = (std::string *)&v80;
  else
    v11 = (std::string *)v80;
  if (v81 < 0)
    v10 = *((_QWORD *)&v80 + 1);
  sub_240B9DA60((std::string *)v73, v11, (std::string *)((char *)v11 + v10));
  memset(&v72, 0, sizeof(v72));
  v12 = HIBYTE(v79);
  if (v79 >= 0)
    v13 = (std::string *)&v78;
  else
    v13 = (std::string *)v78;
  if (v79 < 0)
    v12 = *((_QWORD *)&v78 + 1);
  sub_240B9DA60(&v72.__pn_, v13, (std::string *)((char *)v13 + v12));
  if ((v73[23] & 0x80000000) != 0)
  {
    sub_240B6FF68(&v73[32], *(void **)v73, *(unint64_t *)&v73[8]);
  }
  else
  {
    *(_OWORD *)&v73[32] = *(_OWORD *)v73;
    __dst_16 = *(_QWORD *)&v73[16];
  }
  sub_240B9D908((std::__fs::filesystem::path *)&v73[32], &v72);
  if (SHIBYTE(__dst_16) < 0)
  {
    sub_240B6FF68(v75, *(void **)&v73[32], *(unint64_t *)&v73[40]);
  }
  else
  {
    v75[0] = *(_OWORD *)&v73[32];
    *(_QWORD *)&v75[1] = __dst_16;
  }
  if (SHIBYTE(v79) < 0)
    operator delete((void *)v78);
  v78 = v75[0];
  v79 = *(_QWORD *)&v75[1];
  BYTE7(v75[1]) = 0;
  LOBYTE(v75[0]) = 0;
  if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_32;
LABEL_58:
    operator delete(v72.__pn_.__r_.__value_.__l.__data_);
    if ((v73[23] & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_59;
  }
  operator delete(*(void **)&v73[32]);
  if (SHIBYTE(v72.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_58;
LABEL_32:
  if ((v73[23] & 0x80000000) == 0)
    goto LABEL_33;
LABEL_59:
  operator delete(*(void **)v73);
LABEL_33:
  v14 = (void *)HIBYTE(v77);
  if (v77 < 0)
    v14 = __p[1];
  if (v14 != (void *)8)
  {
LABEL_75:
    v42 = sub_240BA29C8(a3);
    BYTE7(v75[1]) = 14;
    strcpy((char *)v75, "debug-constant");
    v43 = sub_240BB8708(v42, (uint64_t)v75);
    v44 = v43;
    if (SBYTE7(v75[1]) < 0)
    {
      operator delete(*(void **)&v75[0]);
      if (!v44)
        goto LABEL_80;
    }
    else if (!v43)
    {
LABEL_80:
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)**a1 + 112))(**a1, 0);
      v45 = a2 + 1;
      if ((SHIBYTE(v81) & 0x80000000) == 0)
        goto LABEL_81;
      goto LABEL_142;
    }
    sub_240B9B0C4(**a1);
    goto LABEL_80;
  }
  v15 = __p;
  if (v77 < 0)
    v15 = (void **)__p[0];
  if (*v15 == (void *)0x626F6C625F6C696DLL)
  {
    *(_QWORD *)&v75[0] = &v78;
    v30 = sub_240B9DDDC(a3 + 392, (uint64_t)&v78, (uint64_t)&unk_240BBBF40, (__int128 **)v75);
    if (!v30[5])
    {
      v31 = operator new();
      if (SHIBYTE(v79) < 0)
      {
        sub_240B6FF68(v70, (void *)v78, *((unint64_t *)&v78 + 1));
      }
      else
      {
        *(_OWORD *)v70 = v78;
        v71 = v79;
      }
      MEMORY[0x24268AAD0](v31, v70);
      v38 = (MIL::Blob::StorageReader *)v30[5];
      v30[5] = v31;
      if (v38)
      {
        MIL::Blob::StorageReader::~StorageReader(v38);
        MEMORY[0x24268ACF8](v39, 0x20C4093837F09, v40);
      }
      if (SHIBYTE(v71) < 0)
        operator delete(v70[0]);
    }
    Data = MIL::Blob::StorageReader::GetDataView<float>();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)**a1 + 224))(**a1, Data);
    goto LABEL_75;
  }
  if (*v15 != (void *)0x7761725F70616D6DLL)
    goto LABEL_75;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 128))(**a1);
  if (v79 >= 0)
    v17 = (const char *)&v78;
  else
    v17 = (const char *)v78;
  v18 = open(v17, 0);
  if (v18 != -1)
  {
    v19 = mmap(0, v16, 1, 2, v18, v8);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)**a1 + 224))(**a1, v19);
    *(_QWORD *)&v75[0] = v19;
    v20 = (_QWORD *)operator new();
    v20[1] = 0;
    v21 = v20 + 1;
    *v20 = &off_25110C8D8;
    v20[2] = 0;
    v20[3] = v19;
    v20[4] = v16;
    *((_QWORD *)&v75[0] + 1) = v20;
    *(_QWORD *)&v73[32] = &v78;
    v22 = sub_240B9E24C(a3 + 432, (uint64_t)&v78, (uint64_t)&unk_240BBBF40, (__int128 **)&v73[32]);
    do
      v23 = __ldxr(v21);
    while (__stxr(v23 + 1, v21));
    v24 = (std::__shared_weak_count *)v22[6];
    v22[5] = (uint64_t)v19;
    v22[6] = (uint64_t)v20;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v75[0] + 1);
    if (*((_QWORD *)&v75[0] + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v75[0] + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    close(v18);
    goto LABEL_75;
  }
  v32 = 0x7FFFFFFFFFFFFFF7;
  v33 = SHIBYTE(v79);
  if (v79 >= 0)
    v34 = HIBYTE(v79);
  else
    v34 = *((_QWORD *)&v78 + 1);
  v35 = v34 + 36;
  if (v34 + 36 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  v36 = *(_QWORD **)(a3 + 32);
  if (v35 <= 0x16)
  {
    qmemcpy(v73, "Could not open external constant at ", 36);
    v37 = &v73[36];
LABEL_87:
    if (v33 >= 0)
      v50 = &v78;
    else
      v50 = (__int128 *)v78;
    memmove(v37, v50, v34);
    goto LABEL_91;
  }
  v47 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v35 | 7) != 0x17)
    v47 = v35 | 7;
  v48 = v47 + 1;
  v49 = (char *)operator new(v47 + 1);
  *(_QWORD *)&v73[8] = v34 + 36;
  *(_QWORD *)&v73[16] = v48 | 0x8000000000000000;
  *(_QWORD *)v73 = v49;
  qmemcpy(v49, "Could not open external constant at ", 36);
  v37 = v49 + 36;
  if (v34)
    goto LABEL_87;
LABEL_91:
  v37[v34] = 0;
  v51 = v73[23];
  if (v73[23] >= 0)
    v52 = 22;
  else
    v52 = (*(_QWORD *)&v73[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v73[23] < 0)
    v51 = *(_QWORD *)&v73[8];
  if (v52 == v51)
  {
    if (v52 == 0x7FFFFFFFFFFFFFF6)
      sub_240B6FFF4();
    if (v73[23] >= 0)
      v53 = v73;
    else
      v53 = *(_BYTE **)v73;
    if (v52 <= 0x3FFFFFFFFFFFFFF2)
    {
      if (v52 + 1 > 2 * v52)
        v54 = v52 + 1;
      else
        v54 = 2 * v52;
      if (v54 >= 0x17)
      {
        v58 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        v59 = v54 | 7;
        if (v59 == 23)
          v59 = v58;
        v32 = v59 + 1;
      }
      else
      {
        v32 = 23;
      }
    }
    v60 = operator new(v32);
    v61 = v60;
    if (v52)
    {
      memmove(v60, v53, v52);
      v61[v52] = 58;
      if (v52 == 22)
        goto LABEL_121;
    }
    else
    {
      *v60 = 58;
    }
    operator delete(v53);
LABEL_121:
    *(_QWORD *)v73 = v61;
    *(_QWORD *)&v73[8] = v52 + 1;
    *(_QWORD *)&v73[16] = v32 | 0x8000000000000000;
    v57 = &v61[v52 + 1];
    goto LABEL_122;
  }
  v55 = v73;
  if (v73[23] < 0)
    v55 = *(_BYTE **)v73;
  v55[v51] = 58;
  v56 = v51 + 1;
  if ((v73[23] & 0x80000000) != 0)
    *(_QWORD *)&v73[8] = v56;
  else
    v73[23] = v56 & 0x7F;
  v57 = &v55[v56];
LABEL_122:
  *v57 = 0;
  *(_OWORD *)&v73[32] = *(_OWORD *)v73;
  __dst_16 = *(_QWORD *)&v73[16];
  memset(v73, 0, 24);
  v62 = __error();
  v63 = strerror(*v62);
  v64 = strlen(v63);
  v65 = v64;
  if (__dst_16 >= 0)
    v66 = 22;
  else
    v66 = (__dst_16 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (__dst_16 >= 0)
    v67 = HIBYTE(__dst_16);
  else
    v67 = *(_QWORD *)&v73[40];
  if (v66 - v67 >= v64)
  {
    if (v64)
    {
      if (__dst_16 >= 0)
        v68 = &v73[32];
      else
        v68 = *(_BYTE **)&v73[32];
      memmove(&v68[v67], v63, v64);
      v69 = v67 + v65;
      if (SHIBYTE(__dst_16) < 0)
        *(_QWORD *)&v73[40] = v67 + v65;
      else
        HIBYTE(__dst_16) = v69 & 0x7F;
      v68[v69] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v73[32], v66, v67 + v64 - v66, v67, v67, 0, v64, v63);
  }
  v75[0] = *(_OWORD *)&v73[32];
  *(_QWORD *)&v75[1] = __dst_16;
  __dst_16 = 0;
  *(_OWORD *)&v73[32] = 0uLL;
  sub_240BB7D38(v36, 5, (uint64_t)v75);
  if ((SBYTE7(v75[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
      goto LABEL_140;
LABEL_146:
    operator delete(*(void **)&v73[32]);
    if ((v73[23] & 0x80000000) == 0)
      goto LABEL_141;
    goto LABEL_147;
  }
  operator delete(*(void **)&v75[0]);
  if (SHIBYTE(__dst_16) < 0)
    goto LABEL_146;
LABEL_140:
  if ((v73[23] & 0x80000000) == 0)
    goto LABEL_141;
LABEL_147:
  operator delete(*(void **)v73);
LABEL_141:
  v45 = -1;
  if ((SHIBYTE(v81) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v77) & 0x80000000) == 0)
      goto LABEL_82;
LABEL_143:
    operator delete(__p[0]);
    if ((SHIBYTE(v79) & 0x80000000) == 0)
      return v45;
LABEL_144:
    operator delete((void *)v78);
    return v45;
  }
LABEL_142:
  operator delete((void *)v80);
  if (SHIBYTE(v77) < 0)
    goto LABEL_143;
LABEL_82:
  if (SHIBYTE(v79) < 0)
    goto LABEL_144;
  return v45;
}

void sub_240B9D598(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  MEMORY[0x24268ACF8](v44, 0x20C4093837F09);
  JUMPOUT(0x240B9D750);
}

void sub_240B9D5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  int v14;
  va_list va;

  va_start(va, a14);
  sub_240B6FE78((uint64_t)va);
  close(v14);
  JUMPOUT(0x240B9D750);
}

void sub_240B9D604(void *a1)
{
  void *v1;
  size_t v2;

  __cxa_begin_catch(a1);
  munmap(v1, v2);
  __cxa_rethrow();
}

void sub_240B9D61C()
{
  int v0;

  __cxa_end_catch();
  close(v0);
  JUMPOUT(0x240B9D750);
}

void sub_240B9D668(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0)
    operator delete(__p);
  if (a17 < 0)
    JUMPOUT(0x240B9D6B0);
  JUMPOUT(0x240B9D6BCLL);
}

void sub_240B9D6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x240B9D75CLL);
  JUMPOUT(0x240B9D760);
}

void sub_240B9D6E4()
{
  JUMPOUT(0x240B9D760);
}

void sub_240B9D6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  sub_240B73210(v28 - 112);
  if (a28 < 0)
    JUMPOUT(0x240B9D76CLL);
  JUMPOUT(0x240B9D770);
}

void sub_240B9D710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  sub_240B73210(v32 - 112);
  if (a32 < 0)
    JUMPOUT(0x240B9D77CLL);
  JUMPOUT(0x240B9D780);
}

void sub_240B9D734()
{
  uint64_t v0;

  sub_240B73210(v0 - 112);
  JUMPOUT(0x240B9D770);
}

void sub_240B9D744()
{
  JUMPOUT(0x240B9D770);
}

void sub_240B9D74C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 89) < 0)
    operator delete(*(void **)(v32 - 112));
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  _Unwind_Resume(exception_object);
}

uint64_t *sub_240B9D788(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v8 == v16)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

std::__fs::filesystem::path *sub_240B9D908(std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  char v4;
  __int128 v5;
  int v6;
  std::__fs::filesystem::path *v7;
  size_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::__fs::filesystem::path *v11;
  size_t size;
  std::__fs::filesystem::path *v13;
  std::string::size_type v14;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if (a1 != this)
    {
      v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v4 >= 0)
          v11 = this;
        else
          v11 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
        if (v4 >= 0)
          size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
        else
          size = this->__pn_.__r_.__value_.__l.__size_;
        sub_240B734B8((void **)&a1->__pn_.__r_.__value_.__l.__data_, v11, size);
      }
      else if ((*((_BYTE *)&this->__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_240B733F4(a1, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        v5 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
        a1->__pn_.__r_.__value_.__r.__words[2] = this->__pn_.__r_.__value_.__r.__words[2];
        *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_ = v5;
      }
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v6 >= 0)
      v7 = this;
    else
      v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v6 >= 0)
      v8 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      v8 = this->__pn_.__r_.__value_.__l.__size_;
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = a1->__pn_.__r_.__value_.__l.__size_;
      v9 = (a1->__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    else
    {
      v9 = 22;
      v10 = HIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]);
    }
    if (v9 - v10 >= v8)
    {
      if (v8)
      {
        v13 = a1;
        if ((*((_BYTE *)&a1->__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
          v13 = (std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
        memmove((char *)v13 + v10, v7, v8);
        v14 = v10 + v8;
        if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
          a1->__pn_.__r_.__value_.__l.__size_ = v14;
        else
          *((_BYTE *)&a1->__pn_.__r_.__value_.__s + 23) = v14 & 0x7F;
        v13->__pn_.__r_.__value_.__s.__data_[v14] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&a1->__pn_, v9, v8 - v9 + v10, v10, v10, 0, v8, (const std::string::value_type *)v7);
    }
  }
  return a1;
}

std::string *sub_240B9DA60(std::string *this, std::string *__src, std::string *a3)
{
  int v6;
  size_t v7;
  size_t size;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  void **v13;
  size_t v14;
  std::string *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::value_type *v21;
  unint64_t v22;
  std::string *v23;
  uint64_t v24;
  uint64_t v25;
  void **p_dst;
  size_t v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  _OWORD *v32;
  std::string::size_type *v33;
  unint64_t v34;
  __int128 v35;
  std::string::value_type v36;
  std::string::size_type v37;
  void **__dst;
  size_t v40;
  int64_t v41;

  v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = (char *)a3 - (char *)__src;
  if (v6 < 0)
  {
    if (a3 == __src)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v12 = this->__r_.__value_.__r.__words[2];
    v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src)
      goto LABEL_12;
LABEL_7:
    if ((std::string *)((char *)&v11->__r_.__value_.__l.__data_ + size + 1) <= __src)
      goto LABEL_12;
    if (v7 > 0x7FFFFFFFFFFFFFF7)
      sub_240B6FFF4();
    if (v7 > 0x16)
    {
      v24 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v24 = v7 | 7;
      v25 = v24 + 1;
      v13 = (void **)operator new(v24 + 1);
      v40 = v7;
      v41 = v25 | 0x8000000000000000;
      __dst = v13;
      if (a3 == __src)
      {
LABEL_38:
        *(_BYTE *)v13 = 0;
        if (v41 >= 0)
          p_dst = (void **)&__dst;
        else
          p_dst = __dst;
        if (v41 >= 0)
          v27 = HIBYTE(v41);
        else
          v27 = v40;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          v29 = this->__r_.__value_.__l.__size_;
          v28 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        }
        else
        {
          v28 = 22;
          v29 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        if (v28 - v29 >= v27)
        {
          if (v27)
          {
            v30 = this;
            if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
              v30 = (std::string *)this->__r_.__value_.__r.__words[0];
            memmove((char *)v30 + v29, p_dst, v27);
            v31 = v29 + v27;
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            {
              this->__r_.__value_.__l.__size_ = v31;
              v30->__r_.__value_.__s.__data_[v31] = 0;
              if ((SHIBYTE(v41) & 0x80000000) == 0)
                return this;
              goto LABEL_55;
            }
            *((_BYTE *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
            v30->__r_.__value_.__s.__data_[v31] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(this, v28, v27 - v28 + v29, v29, v29, 0, v27, (const std::string::value_type *)p_dst);
        }
        if ((SHIBYTE(v41) & 0x80000000) == 0)
          return this;
LABEL_55:
        operator delete(__dst);
        return this;
      }
    }
    else
    {
      HIBYTE(v41) = (_BYTE)a3 - (_BYTE)__src;
      v13 = (void **)&__dst;
      if (a3 == __src)
        goto LABEL_38;
    }
    memcpy(v13, __src, v7);
    v13 = (void **)((char *)v13 + v7);
    goto LABEL_38;
  }
  if (a3 == __src)
    return this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v9 = 22;
  LOBYTE(v10) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  v11 = this;
  if (this <= __src)
    goto LABEL_7;
LABEL_12:
  if (v9 - size >= v7)
  {
    v20 = this;
    if ((v10 & 0x80) == 0)
      goto LABEL_31;
  }
  else
  {
    v14 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v9 < v7 + size - v9)
      sub_240B6FFF4();
    v15 = this;
    if (v6 < 0)
      v15 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v9 <= 0x3FFFFFFFFFFFFFF2)
    {
      v16 = 2 * v9;
      if (v7 + size > 2 * v9)
        v16 = v7 + size;
      v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v17 = v16 | 7;
      if (v16 >= 0x17)
        v14 = v17 + 1;
      else
        v14 = 23;
    }
    v18 = operator new(v14);
    v19 = (std::string::size_type)v18;
    if (size)
      memmove(v18, v15, size);
    if (v9 != 22)
      operator delete(v15);
    this->__r_.__value_.__l.__size_ = size;
    this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = v19;
  }
  v20 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_31:
  v21 = (char *)v20 + size;
  v22 = (char *)a3 - (char *)__src;
  if (a3 != __src)
  {
    if (v22 >= 0x20)
    {
      if ((unint64_t)((char *)v20 + size - (char *)__src) >= 0x20)
      {
        v23 = (std::string *)((char *)__src + (v22 & 0xFFFFFFFFFFFFFFE0));
        v21 += v22 & 0xFFFFFFFFFFFFFFE0;
        v32 = (_OWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + size);
        v33 = &__src->__r_.__value_.__r.__words[2];
        v34 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *v32 = v35;
          v32 += 2;
          v33 += 4;
          v34 -= 32;
        }
        while (v34);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_62;
      }
      else
      {
        v23 = __src;
      }
    }
    else
    {
      v23 = __src;
    }
    do
    {
      v36 = v23->__r_.__value_.__s.__data_[0];
      v23 = (std::string *)((char *)v23 + 1);
      *v21++ = v36;
    }
    while (v23 != a3);
  }
LABEL_62:
  *v21 = 0;
  v37 = v7 + size;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = v37;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v37 & 0x7F;
  return this;
}

void sub_240B9DDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_240B9DDDC(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = v16[1];
          if (v19 == v11)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  v23 = operator new(0x30uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  v41 = 0;
  *v23 = 0;
  v23[1] = v11;
  v24 = v23 + 2;
  v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_240B6FF68(v24, *(void **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    v23[4] = *((_QWORD *)v25 + 2);
    *(_OWORD *)v24 = v26;
  }
  v23[5] = 0;
  v41 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v40[0] = *v37;
    *v37 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v40[0])
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40[0];
    }
  }
  v16 = (uint64_t *)v40[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240B9E174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B9E190((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B9E190(uint64_t *a1)
{
  uint64_t v2;
  MIL::Blob::StorageReader *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(MIL::Blob::StorageReader **)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
      {
        MIL::Blob::StorageReader::~StorageReader(v3);
        MEMORY[0x24268ACF8]();
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_240B9E204(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B9E228(uint64_t a1)
{
  return munmap(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t *sub_240B9E24C(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = v16[1];
          if (v19 == v11)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  v23 = operator new(0x38uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  v41 = 0;
  *v23 = 0;
  v23[1] = v11;
  v24 = v23 + 2;
  v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_240B6FF68(v24, *(void **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    v23[4] = *((_QWORD *)v25 + 2);
    *(_OWORD *)v24 = v26;
  }
  v23[5] = 0;
  v23[6] = 0;
  v41 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v40[0] = *v37;
    *v37 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v40[0])
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40[0];
    }
  }
  v16 = (uint64_t *)v40[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240B9E5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B9E600((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240B9E600(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
          if ((*(char *)(v2 + 39) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
      }
      if (*(char *)(v2 + 39) < 0)
LABEL_8:
        operator delete(*(void **)(v2 + 16));
    }
LABEL_9:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_240B9E69C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B9E6C0(uint64_t a1)
{
  return munmap(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

void sub_240B9E6E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240B9E70C(uint64_t a1)
{
  return munmap(*(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
}

_QWORD *sub_240B9E730(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  int v6;
  _QWORD v7[3];
  _QWORD *v8;
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = 9;
  v9[0] = &off_25110C7F8;
  v9[1] = sub_240B9E8B0;
  v10 = v9;
  sub_240B9453C(a1, (char *)&v6, 1, 33, 0, 0, v9);
  v2 = v10;
  if (v10 == v9)
  {
    v3 = 4;
    v2 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v6 = 10;
  v7[0] = &off_25110C7F8;
  v7[1] = sub_240B9E94C;
  v8 = v7;
  sub_240B9453C(a1, (char *)&v6, 1, 33, 0, 0, v7);
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_240B9E85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9E8B0(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 168))(**a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 120))(**a1);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      *(float *)(v4 + 4 * v7) = nanf((const char *)&unk_240BBCAF5);
      v7 = sub_240B9E9E8(**a1, v7);
      --v6;
    }
    while (v6);
  }
  return a2 + 1;
}

uint64_t sub_240B9E94C(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 168))(**a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a1 + 120))(**a1);
  if (v5)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      *(double *)(v4 + 8 * v7) = nan((const char *)&unk_240BBCAF5);
      v7 = sub_240B9E9E8(**a1, v7);
      --v6;
    }
    while (v6);
  }
  return a2 + 1;
}

uint64_t sub_240B9E9E8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v6 = *(const void **)v4;
  v5 = *(_QWORD *)(v4 + 8);
  v7 = v5 - *(_QWORD *)v4;
  if (v5 == *(_QWORD *)v4)
  {
    v8 = 0;
  }
  else
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_240B70258();
    v8 = operator new(v5 - *(_QWORD *)v4);
    memcpy(v8, v6, v7);
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v11 = *(const void **)v9;
  v10 = *(_QWORD *)(v9 + 8);
  v12 = v10 - *(_QWORD *)v9;
  if (v10 == *(_QWORD *)v9)
  {
    v13 = 0;
  }
  else
  {
    if ((v12 & 0x8000000000000000) != 0)
      sub_240B70258();
    v13 = operator new(v10 - *(_QWORD *)v9);
    memcpy(v13, v11, v12);
  }
  switch(sub_240BBA100(a1))
  {
    case 1:
      v14 = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + a2;
      if (v13)
        goto LABEL_56;
      goto LABEL_57;
    case 2:
      v53 = v8[1];
      v54 = a2 / v53 % *v8;
      v55 = a2 % v53 + 1;
      if (v55 >= v53)
        v14 = *v13 + *v13 * v54;
      else
        v14 = *v13 * v54 + v13[1] * v55;
      goto LABEL_56;
    case 3:
      v31 = v8[1];
      v30 = v8[2];
      v32 = a2 / v30 % v31;
      v33 = a2 / v30 / v31 % *v8;
      v34 = a2 % v30 + 1;
      v35 = v34 >= v30;
      if (v34 < v30)
        v36 = a2 % v30 + 1;
      else
        v36 = 0;
      if (v35)
        ++v32;
      if (v32 < v31)
      {
        v37 = v33;
      }
      else
      {
        v32 = 0;
        v37 = v33 + 1;
      }
      v14 = *v13 * v37 + v13[1] * v32 + v13[2] * v36;
      goto LABEL_56;
    case 4:
      v39 = v8[2];
      v38 = v8[3];
      v40 = a2 / v38 / v39;
      v41 = a2 / v38 % v39;
      v42 = v8[1];
      v43 = v40 / v42;
      v44 = v40 % v42;
      v45 = v43 % *v8;
      v46 = a2 % v38 + 1;
      v47 = v46 >= v38;
      if (v46 < v38)
        v48 = a2 % v38 + 1;
      else
        v48 = 0;
      if (v47)
        ++v41;
      v49 = v41 >= v39;
      if (v41 < v39)
        v50 = v41;
      else
        v50 = 0;
      if (v49)
        v51 = v44 + 1;
      else
        v51 = v44;
      if (v51 < v42)
      {
        v52 = v45;
      }
      else
      {
        v51 = 0;
        v52 = v45 + 1;
      }
      v14 = *v13 * v52 + v13[1] * v51 + v13[2] * v50 + v13[3] * v48;
      goto LABEL_56;
    case 5:
      v16 = v8[3];
      v15 = v8[4];
      v18 = v8[1];
      v17 = v8[2];
      v19 = a2 / v15 / v16;
      v20 = a2 / v15 % v16;
      v21 = v19 / v17;
      v22 = v19 % v17;
      v23 = v21 / v18;
      v24 = a2 % v15 + 1;
      v25 = v24 >= v15;
      if (v24 < v15)
        v26 = a2 % v15 + 1;
      else
        v26 = 0;
      if (v25)
        ++v20;
      if (v20 < v16)
      {
        v27 = v22;
      }
      else
      {
        v20 = 0;
        v27 = v22 + 1;
      }
      if (v27 < v17)
      {
        v28 = v23;
      }
      else
      {
        v27 = 0;
        v28 = v23 + 1;
      }
      if (v28 < v18)
      {
        v29 = v23 % *v8;
      }
      else
      {
        v28 = 0;
        v29 = v23 % *v8 + 1;
      }
      v14 = v29 * *v13 + v13[1] * v28 + v13[2] * v27 + v13[3] * v20 + v13[4] * v26;
      goto LABEL_56;
    default:
      v14 = a2 + 1;
      if (!v13)
        goto LABEL_57;
LABEL_56:
      operator delete(v13);
LABEL_57:
      if (v8)
        operator delete(v8);
      return v14;
  }
}

void sub_240B9ECBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_240B9ED10(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  int __src;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  _QWORD v37[3];
  _QWORD *v38;
  _QWORD v39[3];
  _QWORD *v40;
  _QWORD v41[3];
  _QWORD *v42;
  _QWORD v43[3];
  _QWORD *v44;
  _QWORD v45[3];
  _QWORD *v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  __src = 8;
  v45[0] = &off_25110C7F8;
  v45[1] = sub_240B9F33C;
  v46 = v45;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v45);
  v2 = v46;
  if (v46 == v45)
  {
    v3 = 4;
    v2 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  __src = 9;
  v43[0] = &off_25110C7F8;
  v43[1] = sub_240B9F538;
  v44 = v43;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v43);
  v4 = v44;
  if (v44 == v43)
  {
    v5 = 4;
    v4 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  __src = 10;
  v41[0] = &off_25110C7F8;
  v41[1] = sub_240B9F734;
  v42 = v41;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v41);
  v6 = v42;
  if (v42 == v41)
  {
    v7 = 4;
    v6 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  __src = 4;
  v39[0] = &off_25110C7F8;
  v39[1] = sub_240B9F92C;
  v40 = v39;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v39);
  v8 = v40;
  if (v40 == v39)
  {
    v9 = 4;
    v8 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  __src = 5;
  v37[0] = &off_25110C7F8;
  v37[1] = sub_240B9FB24;
  v38 = v37;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v37);
  v10 = v38;
  if (v38 == v37)
  {
    v11 = 4;
    v10 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_26;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_26:
  __src = 6;
  v35[0] = &off_25110C7F8;
  v35[1] = sub_240B9FD1C;
  v36 = v35;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v35);
  v12 = v36;
  if (v36 == v35)
  {
    v13 = 4;
    v12 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_31;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_31:
  __src = 7;
  v33[0] = &off_25110C7F8;
  v33[1] = sub_240B9FF14;
  v34 = v33;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v33);
  v14 = v34;
  if (v34 == v33)
  {
    v15 = 4;
    v14 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_36;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_36:
  __src = 0;
  v31[0] = &off_25110C7F8;
  v31[1] = sub_240BA010C;
  v32 = v31;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v31);
  v16 = v32;
  if (v32 == v31)
  {
    v17 = 4;
    v16 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_41;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_41:
  __src = 1;
  v29[0] = &off_25110C7F8;
  v29[1] = sub_240BA0304;
  v30 = v29;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v29);
  v18 = v30;
  if (v30 == v29)
  {
    v19 = 4;
    v18 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_46;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_46:
  __src = 2;
  v27[0] = &off_25110C7F8;
  v27[1] = sub_240BA04FC;
  v28 = v27;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v27);
  v20 = v28;
  if (v28 == v27)
  {
    v21 = 4;
    v20 = v27;
  }
  else
  {
    if (!v28)
      goto LABEL_51;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_51:
  __src = 3;
  v25[0] = &off_25110C7F8;
  v25[1] = sub_240BA06F4;
  v26 = v25;
  sub_240B9453C(a1, 0, 0, 34, (char *)&__src, 1, v25);
  result = v26;
  if (v26 == v25)
  {
    v23 = 4;
    result = v25;
  }
  else
  {
    if (!v26)
      return result;
    v23 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v23))();
}

void sub_240B9F1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  char *v34;
  char *v36;
  uint64_t v37;

  v36 = a13;
  if (a13 == v34)
  {
    v37 = 4;
    v36 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9F33C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  void *v29[2];
  uint64_t v30;

  v25 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v26);
  if (v28 != 2)
    sub_240B735D8();
  *(_OWORD *)v29 = v26;
  v30 = v27;
  v27 = 0;
  v26 = 0uLL;
  v28 = -1;
  if (v25 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v30 >= 0)
    v8 = v29;
  else
    v8 = (void **)v29[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    _H0 = *(_WORD *)(v14 + 2 * i);
    __asm { FCVT            D0, H0 }
    printf("%10.8f ", _D0);
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v30) < 0)
    operator delete(v29[0]);
  return a2 + 1;
}

void sub_240B9F4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9F538(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10.8f ", *(float *)(v14 + 4 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240B9F6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9F734(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10.8f ", *(double *)(v14 + 8 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240B9F8E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9F92C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10hhu ", *(unsigned __int8 *)(v14 + i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240B9FADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9FB24(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10hu ", *(unsigned __int16 *)(v14 + 2 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240B9FCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9FD1C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10u ", *(_DWORD *)(v14 + 4 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240B9FECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240B9FF14(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10llu ", *(_QWORD *)(v14 + 8 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240BA00C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA010C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10hhi ", *(char *)(v14 + i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240BA02BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA0304(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10hi ", *(__int16 *)(v14 + 2 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240BA04B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA04FC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10i ", *(_DWORD *)(v14 + 4 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240BA06AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA06F4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t **a5)
{
  uint64_t v7;
  void **v8;
  uint64_t v9;
  int v10;
  const char *v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t i;
  void *__p[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  void *v23[2];
  uint64_t v24;

  v19 = 4;
  strcpy((char *)__p, "name");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2)
    sub_240B735D8();
  *(_OWORD *)v23 = v20;
  v24 = v21;
  v21 = 0;
  v20 = 0uLL;
  v22 = -1;
  if (v19 < 0)
    operator delete(__p[0]);
  v7 = **a5;
  if (v24 >= 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  v9 = sub_240BA77BC(v7);
  v10 = *(char *)(v9 + 23);
  v11 = *(const char **)v9;
  v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  if (v10 >= 0)
    v13 = (const char *)v9;
  else
    v13 = v11;
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7);
  v15 = 0;
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7); ++i)
  {
    if (!v15)
      putchar(9);
    printf("%10lli ", *(_QWORD *)(v14 + 8 * i));
    if (v15 >= 5)
    {
      putchar(10);
      v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15)
    putchar(10);
  puts("}");
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return a2 + 1;
}

void sub_240BA08A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_240BA08EC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_25110C7F8;
  v8[1] = sub_240BA0A5C;
  v9 = v8;
  sub_240B9453C(a1, 0, 0, 11, 0, 0, v8);
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v6[0] = &off_25110C7F8;
  v6[1] = sub_240BA0AA8;
  v7 = v6;
  sub_240B9453C(a1, 0, 0, 29, 0, 0, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_240BA0A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA0A5C(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 136))(v5);
    }
    while (v3 != v4);
  }
  return a2 + 1;
}

uint64_t sub_240BA0AA8(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = *v3++;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 144))(v5);
    }
    while (v3 != v4);
  }
  return a2 + 1;
}

void *sub_240BA0AF8(size_t a1)
{
  return malloc_type_malloc(a1, 0x492E9D94uLL);
}

uint64_t sub_240BA0B04(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  void *__p[2];
  char v12;
  uint64_t v13[3];
  int v14;

  v12 = 6;
  strcpy((char *)__p, "kindex");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v13);
  if (v14)
    sub_240B735D8();
  v6 = v13[0];
  v14 = -1;
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = *(_QWORD *)(a3[22] + 8 * v6);
  v8 = (const char *)sub_240BA77BC(v7);
  v9 = sub_240BA0BEC(a3, v8, v6);
  sub_240BA7A80(v7, (uint64_t)v9);
  return a2 + 1;
}

void sub_240BA0BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_240B73210((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *sub_240BA0BEC(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t *v4;
  void *v6;
  void *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  void *p_p;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::ios_base *v24;
  unint64_t v25;
  const void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const void **v34;
  uint64_t v35;
  uint64_t v36;
  void *__p;
  size_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  _BYTE v42[16];
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46[2];
  __int128 v47;
  int v48;
  uint64_t v49[19];

  v4 = (uint64_t *)a2;
  v6 = (void *)a1[37];
  if (!v6)
  {
    v19 = a1[38];
    if (!v19)
    {
      if (!MEMORY[0x24BE62340])
      {
        v20 = MEMORY[0x24BEDB870];
        v21 = MEMORY[0x24BEDB870] + 64;
        v10 = (uint64_t *)MEMORY[0x24BEDB800];
        v22 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
        v23 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
        v49[0] = MEMORY[0x24BEDB870] + 64;
        v40 = v22;
        *(_QWORD *)((char *)&v41[-1] + *(_QWORD *)(v22 - 24)) = v23;
        v24 = (std::ios_base *)((char *)&v41[-1] + *(_QWORD *)(v40 - 24));
        std::ios_base::init(v24, v41);
        v24[1].__vftable = 0;
        v24[1].__fmtflags_ = -1;
        v40 = v20 + 24;
        v49[0] = v21;
        std::streambuf::basic_streambuf();
        v14 = MEMORY[0x24BEDB848];
        v41[0] = MEMORY[0x24BEDB848] + 16;
        *(_OWORD *)v46 = 0u;
        v47 = 0u;
        v48 = 16;
        sub_240B8AA18(&v40, (uint64_t)"JIT library not loaded", 22);
        v16 = (_QWORD *)a1[4];
        if ((v48 & 0x10) != 0)
        {
          v33 = *((_QWORD *)&v47 + 1);
          if (*((_QWORD *)&v47 + 1) < v45)
          {
            *((_QWORD *)&v47 + 1) = v45;
            v33 = v45;
          }
          v34 = (const void **)&v44;
        }
        else
        {
          if ((v48 & 8) == 0)
          {
            v17 = 0;
            HIBYTE(v39) = 0;
            p_p = &__p;
            goto LABEL_42;
          }
          v34 = (const void **)v42;
          v33 = v43;
        }
        v30 = *v34;
        v17 = v33 - (_QWORD)*v34;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_240B6FFF4();
        if (v17 >= 0x17)
        {
          v35 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v35 = v17 | 7;
          v36 = v35 + 1;
          p_p = operator new(v35 + 1);
          v38 = v17;
          v39 = v36 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v39) = v33 - *(_BYTE *)v34;
          p_p = &__p;
          if (!v17)
            goto LABEL_42;
        }
LABEL_41:
        memmove(p_p, v30, v17);
        goto LABEL_42;
      }
      mlc::rt::JIT::create_orcjit();
      v27 = v40;
      v40 = 0;
      v28 = a1[38];
      a1[38] = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        v29 = v40;
        v40 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      }
      v19 = a1[38];
    }
    return (void *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t *))(*(_QWORD *)v19 + 16))(v19, *(_QWORD *)(a1[19] + 24 * a3), *(_QWORD *)(a1[19] + 24 * a3 + 8) - *(_QWORD *)(a1[19] + 24 * a3), v4);
  }
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  result = dlsym(v6, a2);
  if (!result)
  {
    v8 = MEMORY[0x24BEDB870];
    v9 = MEMORY[0x24BEDB870] + 64;
    v10 = (uint64_t *)MEMORY[0x24BEDB800];
    v11 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v12 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v49[0] = MEMORY[0x24BEDB870] + 64;
    v40 = v11;
    *(_QWORD *)((char *)&v41[-1] + *(_QWORD *)(v11 - 24)) = v12;
    v13 = (std::ios_base *)((char *)&v41[-1] + *(_QWORD *)(v40 - 24));
    std::ios_base::init(v13, v41);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    v40 = v8 + 24;
    v49[0] = v9;
    std::streambuf::basic_streambuf();
    v14 = MEMORY[0x24BEDB848];
    v41[0] = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)v46 = 0u;
    v47 = 0u;
    v48 = 16;
    sub_240B8AA18(&v40, (uint64_t)"dylib kernel symbol lookup failed ", 34);
    v15 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v15, (uint64_t)".", 1);
    v16 = (_QWORD *)a1[4];
    if ((v48 & 0x10) != 0)
    {
      v25 = *((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1) < v45)
      {
        *((_QWORD *)&v47 + 1) = v45;
        v25 = v45;
      }
      v26 = (const void **)&v44;
    }
    else
    {
      if ((v48 & 8) == 0)
      {
        v17 = 0;
        HIBYTE(v39) = 0;
        p_p = &__p;
LABEL_42:
        *((_BYTE *)p_p + v17) = 0;
        sub_240BB7D38(v16, 0xFFFF, (uint64_t)&__p);
        if (SHIBYTE(v39) < 0)
          operator delete(__p);
        v40 = *v10;
        *(_QWORD *)((char *)&v41[-1] + *(_QWORD *)(v40 - 24)) = v10[3];
        v41[0] = v14 + 16;
        if (SBYTE7(v47) < 0)
          operator delete(v46[0]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x24268ACB0](v49);
        return 0;
      }
      v26 = (const void **)v42;
      v25 = v43;
    }
    v30 = *v26;
    v17 = v25 - (_QWORD)*v26;
    if (v17 > 0x7FFFFFFFFFFFFFF7)
      sub_240B6FFF4();
    if (v17 >= 0x17)
    {
      v31 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v17 | 7) != 0x17)
        v31 = v17 | 7;
      v32 = v31 + 1;
      p_p = operator new(v31 + 1);
      v38 = v17;
      v39 = v32 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v39) = v25 - *(_BYTE *)v26;
      p_p = &__p;
      if (!v17)
        goto LABEL_42;
    }
    goto LABEL_41;
  }
  return result;
}

void sub_240BA1058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  if (a14 < 0)
    operator delete(__p);
  a15 = *v30;
  *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = v30[3];
  a16 = v31 + 16;
  if (a29 < 0)
    operator delete(a24);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v29);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA10F0(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  void *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v32[2];
  char v33;
  void *v34[2];
  _QWORD *v35;
  void *__p[2];
  _QWORD *v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[24];
  _BYTE __s2[24];
  __int128 v42;
  uint64_t v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  char v48;
  __int128 v49;
  uint64_t v50;

  HIBYTE(v37) = 5;
  strcpy((char *)__p, "index");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v42);
  if (v44)
    sub_240B735D8();
  v10 = v42;
  v44 = -1;
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  HIBYTE(v37) = 5;
  strcpy((char *)__p, "kname");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)&v42);
  if (v44 != 2)
    sub_240B735D8();
  v49 = v42;
  v50 = v43;
  v43 = 0;
  v42 = 0uLL;
  v44 = -1;
  if (SHIBYTE(v37) < 0)
    operator delete(__p[0]);
  v11 = sub_240BA0BEC((_QWORD *)a3, (const char *)&v49, v10);
  sub_240BA7698((uint64_t)&v42, &v49, *(_BYTE *)(a3 + 384));
  sub_240BA7A80((uint64_t)&v42, (uint64_t)v11);
  sub_240BA77C4((uint64_t)&v42, 0);
  sub_240BA774C((uint64_t)&v42, ((a1[1] - *a1) >> 3) + ((uint64_t)(a5[1] - *a5) >> 3));
  v12 = sub_240BA77CC((uint64_t)&v42, a1, a5);
  __s2[23] = 20;
  strcpy(__s2, "scratchbuffer_region");
  v14 = *(_QWORD *)(a3 + 80);
  v13 = *(_QWORD *)(a3 + 88);
  if (v14 != v13)
  {
    while (1)
    {
      v15 = *(unsigned __int8 *)(v14 + 23);
      if ((v15 & 0x80u) == 0)
        v16 = *(unsigned __int8 *)(v14 + 23);
      else
        v16 = *(_QWORD *)(v14 + 8);
      if (v16 == 20)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v14, __s2, *(_QWORD *)(v14 + 8)))
            break;
        }
        else
        {
          if (!*(_BYTE *)(v14 + 23))
            break;
          v17 = 0;
          while (*(unsigned __int8 *)(v14 + v17) == __s2[v17])
          {
            if (v15 == ++v17)
              goto LABEL_20;
          }
        }
      }
      v14 += 80;
      if (v14 == v13)
        goto LABEL_22;
    }
  }
LABEL_20:
  if (v14 == v13)
  {
LABEL_22:
    *((_QWORD *)&v38 + 1) = 0;
    *(_QWORD *)&v39 = 0;
    *(_OWORD *)__p = *(_OWORD *)__s2;
    v37 = *(_QWORD **)&__s2[16];
    v18 = *(_QWORD *)(a3 + 96);
    LODWORD(v38) = 0;
    *((_QWORD *)&v39 + 1) = v12;
    *(_QWORD *)v40 = 32;
    *(_OWORD *)&v40[8] = *(_OWORD *)(a3 + 24);
    if (v13 >= v18)
    {
      v20 = sub_240B83648((char **)(a3 + 80), (uint64_t)__p);
    }
    else
    {
      if (SHIBYTE(v37) < 0)
      {
        sub_240B6FF68((_BYTE *)v13, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v19 = *(_OWORD *)__s2;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)&__s2[16];
        *(_OWORD *)v13 = v19;
      }
      v21 = v38;
      v22 = v39;
      v23 = *(_OWORD *)v40;
      *(_QWORD *)(v13 + 72) = *(_QWORD *)&v40[16];
      *(_OWORD *)(v13 + 56) = v23;
      *(_OWORD *)(v13 + 40) = v22;
      *(_OWORD *)(v13 + 24) = v21;
      v20 = (char *)(v13 + 80);
      *(_QWORD *)(a3 + 88) = v13 + 80;
    }
    *(_QWORD *)(a3 + 88) = v20;
    sub_240BA7B84((uint64_t)__p);
  }
  else
  {
    *(_QWORD *)(v14 + 48) += v12;
  }
  v33 = 13;
  strcpy((char *)v32, "scratchbuffer");
  sub_240BA7A94(a4, (uint64_t)v32, (uint64_t)__p);
  if ((_DWORD)v38 != 2)
    sub_240B735D8();
  *(_OWORD *)v34 = *(_OWORD *)__p;
  v35 = v37;
  __p[1] = 0;
  v37 = 0;
  __p[0] = 0;
  LODWORD(v38) = -1;
  if (v33 < 0)
    operator delete((void *)v32[0]);
  sub_240BA16FC(a3, (uint64_t)v34, v32);
  if (v32[1])
  {
    v24 = std::__shared_weak_count::lock((std::__shared_weak_count *)v32[1]);
    if (v24)
    {
      v25 = v24;
      v26 = v32[0];
      if (v32[0])
      {
        sub_240BA8BB0(v32[0], __s2);
        v27 = operator new(8uLL);
        __p[0] = v27;
        *v27 = v12;
        __p[1] = v27 + 1;
        v37 = v27 + 1;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 56))(v26, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v28 = operator new(8uLL);
        __p[0] = v28;
        *v28 = 1;
        __p[1] = v28 + 1;
        v37 = v28 + 1;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v26 + 64))(v26, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 88))(v26, 32);
        sub_240BA8B98(v26, 0);
      }
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v32[1])
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v32[1]);
  }
  if (SHIBYTE(v35) < 0)
  {
    operator delete(v34[0]);
    if ((__s2[23] & 0x80000000) == 0)
      goto LABEL_48;
  }
  else if ((__s2[23] & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete(*(void **)__s2);
LABEL_48:
  *(_QWORD *)&v42 = off_25110C930;
  if (v48 < 0)
    operator delete(v47);
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (*((_QWORD *)&v42 + 1))
  {
    v43 = *((_QWORD *)&v42 + 1);
    operator delete(*((void **)&v42 + 1));
  }
  nullsub_34(&v42);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  return a2 + 1;
}

void sub_240BA15F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_QWORD *)(v45 + 88) = v46;
  sub_240BA7B84((uint64_t)&a25);
  if (a43 < 0)
    operator delete(__p);
  sub_240BA17E0((uint64_t)&a45);
  if (*(char *)(v47 - 89) < 0)
    operator delete(*(void **)(v47 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_240BA16FC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = *(uint64_t **)(result + 104);
  v5 = *(uint64_t **)(result + 112);
  if (v4 == v5)
  {
LABEL_22:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  while (1)
  {
    result = sub_240BA77BC(*v4);
    v7 = *(unsigned __int8 *)(result + 23);
    if ((v7 & 0x80u) == 0)
      v8 = *(unsigned __int8 *)(result + 23);
    else
      v8 = *(_QWORD *)(result + 8);
    v9 = *(unsigned __int8 *)(a2 + 23);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 8);
    if (v8 != v9)
      goto LABEL_4;
    v11 = v10 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v7 & 0x80) == 0)
      break;
    result = memcmp(*(const void **)result, v11, *(_QWORD *)(result + 8));
    if (!(_DWORD)result)
      goto LABEL_18;
LABEL_4:
    v4 += 2;
    if (v4 == v5)
      goto LABEL_22;
  }
  if (*(_BYTE *)(result + 23))
  {
    while (*(unsigned __int8 *)result == *v11)
    {
      ++result;
      ++v11;
      if (!--v7)
        goto LABEL_18;
    }
    goto LABEL_4;
  }
LABEL_18:
  v12 = v4[1];
  *a3 = *v4;
  a3[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return result;
}

uint64_t sub_240BA17E0(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_25110C930;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return nullsub_34(a1);
}

uint64_t sub_240BA1848(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  void *v10;
  void *v11;
  _QWORD **v12;
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  void *v17[2];
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  char v23;
  void *__p[2];
  char v25;
  __int128 v26;
  void *v27;

  HIBYTE(v27) = 5;
  strcpy((char *)&v26, "index");
  sub_240BA7A94(a4, (uint64_t)&v26, (uint64_t)v17);
  if (v19)
    sub_240B735D8();
  v10 = v17[0];
  v19 = -1;
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
  v25 = 5;
  strcpy((char *)__p, "kname");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v17);
  if (v19 != 2)
    sub_240B735D8();
  v26 = *(_OWORD *)v17;
  v27 = v18;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  v19 = -1;
  if (v25 < 0)
    operator delete(__p[0]);
  v11 = sub_240BA0BEC((_QWORD *)a3, (const char *)&v26, (uint64_t)v10);
  sub_240BA7698((uint64_t)v17, &v26, *(_BYTE *)(a3 + 384));
  sub_240BA7A80((uint64_t)v17, (uint64_t)v11);
  sub_240BA77C4((uint64_t)v17, 0);
  sub_240BA774C((uint64_t)v17, ((a1[1] - *a1) >> 3) + ((uint64_t)(a5[1] - *a5) >> 3));
  sub_240BA77CC((uint64_t)v17, a1, a5);
  v12 = (_QWORD **)*a1;
  v13 = (_QWORD **)a1[1];
  if ((_QWORD **)*a1 != v13)
  {
    do
    {
      v14 = (uint64_t)*v12;
      v15 = sub_240BA8C48(*v12);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 152))(v14, v15);
      ++v12;
    }
    while (v12 != v13);
  }
  v17[0] = off_25110C930;
  if (v23 < 0)
    operator delete(v22);
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v17[1])
  {
    v18 = v17[1];
    operator delete(v17[1]);
  }
  nullsub_34(v17);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
  return a2 + 1;
}

void sub_240BA1A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 57) < 0)
    operator delete(*(void **)(v27 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA1AC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_25110C910;
  *(_QWORD *)(a1 + 8) = sub_240BA1F1C;
  *(_QWORD *)(a1 + 16) = sub_240BA22EC;
  *(_QWORD *)(a1 + 24) = a1;
  *(_QWORD *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v3 = (uint64_t *)operator new();
  sub_240BA54B4(v3);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 72) = v3;
  v4 = (uint64_t **)(a1 + 72);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 424) = 1065353216;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_QWORD *)(a1 + 472) = 0;
  sub_240BAD254(v3);
  sub_240B95110(*(uint64_t **)(a1 + 72));
  sub_240B9B21C(*(uint64_t **)(a1 + 72));
  sub_240BB481C(*(uint64_t **)(a1 + 72));
  sub_240B94E7C(*(uint64_t **)(a1 + 72));
  sub_240BA08EC(*(uint64_t **)(a1 + 72));
  v5 = *(uint64_t **)(a1 + 72);
  v19[0] = &off_25110C7F8;
  v19[1] = sub_240BA0B04;
  v20 = v19;
  sub_240B9453C(v5, 0, 0, 28, 0, 0, v19);
  v6 = v20;
  if (v20 == v19)
  {
    v7 = 4;
    v6 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = *v4;
  v17[0] = &off_25110C7F8;
  v17[1] = sub_240BA10F0;
  v18 = v17;
  sub_240B9453C(v8, 0, 0, 37, 0, 0, v17);
  v9 = v18;
  if (v18 == v17)
  {
    v10 = 4;
    v9 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  v11 = *v4;
  v15[0] = &off_25110C7F8;
  v15[1] = sub_240BA1848;
  v16 = v15;
  sub_240B9453C(v11, 0, 0, 21, 0, 0, v15);
  v12 = v16;
  if (v16 == v15)
  {
    v13 = 4;
    v12 = v15;
    goto LABEL_15;
  }
  if (v16)
  {
    v13 = 5;
LABEL_15:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  return a1;
}

void sub_240BA1D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v13;
  void **v14;
  uint64_t **v15;
  void **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  v23 = a13;
  if (a13 == v21)
  {
    v24 = 4;
    v23 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  sub_240B885C0((uint64_t)(v14 + 44));
  sub_240BA47DC(v19);
  if (*(char *)(v13 + 383) < 0)
    operator delete(v14[35]);
  sub_240BA2324(v18);
  v25 = *(_QWORD *)(v13 + 304);
  *(_QWORD *)(v13 + 304) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  sub_240BA238C(v14 + 27);
  v26 = *(void **)(v13 + 272);
  if (v26)
  {
    *(_QWORD *)(v13 + 280) = v26;
    operator delete(v26);
  }
  v27 = *(void **)(v13 + 248);
  if (v27)
  {
    *(_QWORD *)(v13 + 256) = v27;
    operator delete(v27);
  }
  v28 = *(void **)(v13 + 224);
  if (v28)
  {
    *(_QWORD *)(v13 + 232) = v28;
    operator delete(v28);
  }
  sub_240BA23C0(v14 + 15);
  sub_240BA2424(v17);
  sub_240BA2498(v14 + 9);
  sub_240B6FED0(v16);
  sub_240B6FED0(v14 + 3);
  sub_240BA250C(v14);
  sub_240BA2564(v15);
  sub_240B6FED0((void **)(v13 + 48));
  v29 = *v20;
  *v20 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  nullsub_34(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA1F1C(void **a1, size_t size, size_t alignment, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  std::ios_base *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  void **v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  const void **v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *__dst[2];
  unint64_t v29;
  void *__p;
  __int128 v31;
  _QWORD v32[3];
  uint64_t v33;
  unint64_t v34;
  void *v35[2];
  __int128 v36;
  int v37;
  uint64_t v38[20];

  if (a4 == 2)
  {
    v21 = (_QWORD *)sub_240BAB2DC(a6);
    __p = operator new(0x19uLL);
    v31 = xmmword_240BBBD80;
    strcpy((char *)__p, "ANE alloc unimplemented");
    sub_240BB7D38(v21, 1, (uint64_t)&__p);
    goto LABEL_10;
  }
  if (a4 == 1)
  {
    v20 = (_QWORD *)sub_240BAB2DC(a6);
    __p = operator new(0x20uLL);
    v31 = xmmword_240BBB850;
    strcpy((char *)__p, "device alloc unimplemented");
    sub_240BB7D38(v20, 1, (uint64_t)&__p);
LABEL_10:
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
    return 0xFFFFFFFFLL;
  }
  if (a4)
    return 1;
  v7 = malloc_type_posix_memalign(a1, alignment, size, 0x8ACD2EAFuLL);
  if ((_DWORD)v7)
  {
    v8 = MEMORY[0x24BEDB870];
    v9 = MEMORY[0x24BEDB870] + 64;
    v10 = MEMORY[0x24BEDB800];
    v11 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v12 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v38[0] = MEMORY[0x24BEDB870] + 64;
    __p = v11;
    *(void **)((char *)&__p + *((_QWORD *)v11 - 3)) = v12;
    v13 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
    std::ios_base::init(v13, &v31);
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    __p = (void *)(v8 + 24);
    v38[0] = v9;
    std::streambuf::basic_streambuf();
    v14 = MEMORY[0x24BEDB848];
    *(_QWORD *)&v31 = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)v35 = 0u;
    v36 = 0u;
    v37 = 16;
    sub_240B8AA18(&__p, (uint64_t)"Error allocating ", 17);
    v15 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v15, (uint64_t)"-byte, ", 7);
    v16 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v16, (uint64_t)"-aligned memory.", 16);
    v17 = (_QWORD *)sub_240BAB2DC(a6);
    if ((v37 & 0x10) != 0)
    {
      v22 = *((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1) < v34)
      {
        *((_QWORD *)&v36 + 1) = v34;
        v22 = v34;
      }
      v23 = (const void **)&v33;
    }
    else
    {
      if ((v37 & 8) == 0)
      {
        v18 = 0;
        HIBYTE(v29) = 0;
        v19 = __dst;
        goto LABEL_26;
      }
      v23 = (const void **)v32;
      v22 = v32[2];
    }
    v24 = *v23;
    v18 = v22 - (_QWORD)*v23;
    if (v18 >= 0x7FFFFFFFFFFFFFF8)
      sub_240B6FFF4();
    if (v18 >= 0x17)
    {
      v25 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v25 = v18 | 7;
      v26 = v25 + 1;
      v19 = (void **)operator new(v25 + 1);
      __dst[1] = (void *)v18;
      v29 = v26 | 0x8000000000000000;
      __dst[0] = v19;
    }
    else
    {
      HIBYTE(v29) = v22 - *(_BYTE *)v23;
      v19 = __dst;
      if (!v18)
        goto LABEL_26;
    }
    memmove(v19, v24, v18);
LABEL_26:
    *((_BYTE *)v19 + v18) = 0;
    sub_240BB7D38(v17, 1, (uint64_t)__dst);
    if (SHIBYTE(v29) < 0)
      operator delete(__dst[0]);
    __p = *(void **)v10;
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v10 + 24);
    *(_QWORD *)&v31 = v14 + 16;
    if (SBYTE7(v36) < 0)
      operator delete(v35[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x24268ACB0](v38);
  }
  return v7;
}

void sub_240BA2274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA22EC(void *a1, int a2)
{
  if ((a2 - 1) < 2)
    return 0xFFFFFFFFLL;
  if (a2)
    return 1;
  free(a1);
  return 0;
}

uint64_t sub_240BA2324(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void **sub_240BA238C(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
  {
    dlclose(v2);
    *a1 = 0;
  }
  return a1;
}

void **sub_240BA23C0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 48;
        sub_240B70478((uint64_t)(v3 - 40));
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

_QWORD *sub_240BA2424(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*a1;
  if (*a1)
  {
    v3 = (_QWORD *)a1[1];
    v4 = (_QWORD *)*a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (_QWORD *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_240BA2498(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_240BA250C(void **a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        v3 = sub_240BA7B84(v3 - 80);
      while ((void *)v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t **sub_240BA2564(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    MEMORY[0x24268ACF8](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_240BA25C4(uint64_t a1)
{
  void **v2;
  void **i;
  void **v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;

  *(_QWORD *)a1 = off_25110C910;
  v2 = *(void ***)(a1 + 224);
  for (i = *(void ***)(a1 + 232); v2 != i; ++v2)
    BNNSFilterDestroy(*v2);
  sub_240B885C0(a1 + 432);
  sub_240BA47DC(a1 + 392);
  if (*(char *)(a1 + 383) < 0)
    operator delete(*(void **)(a1 + 360));
  v4 = *(void ***)(a1 + 336);
  if (v4)
  {
    do
    {
      v18 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v18;
    }
    while (v18);
  }
  v5 = *(void **)(a1 + 320);
  *(_QWORD *)(a1 + 320) = 0;
  if (v5)
    operator delete(v5);
  v6 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(void **)(a1 + 296);
  if (v7)
  {
    dlclose(v7);
    *(_QWORD *)(a1 + 296) = 0;
  }
  v8 = *(void **)(a1 + 272);
  if (v8)
  {
    *(_QWORD *)(a1 + 280) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 248);
  if (v9)
  {
    *(_QWORD *)(a1 + 256) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 224);
  if (v10)
  {
    *(_QWORD *)(a1 + 232) = v10;
    operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 200);
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 208);
    v13 = *(void **)(a1 + 200);
    if (v12 != v11)
    {
      do
      {
        v14 = v12 - 48;
        sub_240B70478(v12 - 40);
        v12 = v14;
      }
      while (v14 != v11);
      v13 = *(void **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 208) = v11;
    operator delete(v13);
  }
  v15 = *(_QWORD **)(a1 + 176);
  if (v15)
  {
    v16 = *(_QWORD **)(a1 + 184);
    v17 = *(void **)(a1 + 176);
    if (v16 != v15)
    {
      do
      {
        v20 = *--v16;
        v19 = v20;
        *v16 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      while (v16 != v15);
      v17 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v15;
    operator delete(v17);
  }
  v21 = *(_QWORD *)(a1 + 152);
  if (v21)
  {
    v22 = *(_QWORD *)(a1 + 160);
    v23 = *(void **)(a1 + 152);
    if (v22 != v21)
    {
      v24 = *(_QWORD *)(a1 + 160);
      do
      {
        v26 = *(void **)(v24 - 24);
        v24 -= 24;
        v25 = v26;
        if (v26)
        {
          *(_QWORD *)(v22 - 16) = v25;
          operator delete(v25);
        }
        v22 = v24;
      }
      while (v24 != v21);
      v23 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v21;
    operator delete(v23);
  }
  v27 = *(_QWORD *)(a1 + 128);
  if (v27)
  {
    v28 = *(_QWORD *)(a1 + 136);
    v29 = *(void **)(a1 + 128);
    if (v28 != v27)
    {
      do
      {
        v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v28 -= 16;
      }
      while (v28 != v27);
      v29 = *(void **)(a1 + 128);
    }
    *(_QWORD *)(a1 + 136) = v27;
    operator delete(v29);
  }
  v33 = *(_QWORD *)(a1 + 104);
  if (v33)
  {
    v34 = *(_QWORD *)(a1 + 112);
    v35 = *(void **)(a1 + 104);
    if (v34 != v33)
    {
      do
      {
        v36 = *(std::__shared_weak_count **)(v34 - 8);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v34 -= 16;
      }
      while (v34 != v33);
      v35 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v33;
    operator delete(v35);
  }
  v39 = *(_QWORD *)(a1 + 80);
  if (v39)
  {
    v40 = *(_QWORD *)(a1 + 88);
    v41 = *(void **)(a1 + 80);
    if (v40 != v39)
    {
      do
        v40 = sub_240BA7B84(v40 - 80);
      while (v40 != v39);
      v41 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v39;
    operator delete(v41);
  }
  v42 = *(uint64_t **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v42)
  {
    v43 = *v42;
    *v42 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    MEMORY[0x24268ACF8](v42, 0x20C4093837F09);
  }
  v44 = *(_QWORD *)(a1 + 48);
  if (v44)
  {
    v45 = *(_QWORD *)(a1 + 56);
    v46 = *(void **)(a1 + 48);
    if (v45 != v44)
    {
      do
      {
        v47 = *(std::__shared_weak_count **)(v45 - 8);
        if (v47)
        {
          v48 = (unint64_t *)&v47->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        v45 -= 16;
      }
      while (v45 != v44);
      v46 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v44;
    operator delete(v46);
  }
  v50 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  return nullsub_34(a1);
}

void sub_240BA298C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_240BA25C4(a1);
  j__free(v1);
}

uint64_t sub_240BA29A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_240BA29C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_240BA29D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  void **v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  void **v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  void **v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void *v99;
  void (**v101)(uint64_t, uint64_t, uint64_t);
  void (**v102)(uint64_t, uint64_t, uint64_t);
  void (**v103)(uint64_t, uint64_t, uint64_t);
  char *v104;
  char *v105;
  void *__p[2];
  __int128 v107;
  __int128 v108;

  v4 = *a2;
  v103 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110BBE8;
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  sub_240BA4868((uint64_t)__p);
  v5 = *((_QWORD *)&v108 + 1);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v108 + 1) + (_QWORD)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v108 + 1) + v108) & 0x1FF)) = v4;
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (!v6)
  {
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v108 + v7 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v7 - 1) & 0x1FF));
      if ((void *)v107 == __p[1])
        v14 = 0;
      else
        v14 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
      *((_QWORD *)&v108 + 1) = v7 - 1;
      if (v14 - (v7 + (_QWORD)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(_QWORD *)&v107 = v107 - 8;
      }
      if (sub_240BB7E28(a1[4]))
        v103[2]((uint64_t)&v103, v13, (uint64_t)a1);
      sub_240B916EC(v13, &v104);
      v15 = v104;
      v16 = v105;
      if (v104 != v105)
      {
        v17 = *((_QWORD *)&v108 + 1);
        v18 = v108;
        do
        {
          v19 = (char *)__p[1];
          v20 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
          v21 = *(_QWORD *)v15;
          if ((void *)v107 == __p[1])
            v20 = 0;
          v22 = v18 + v17;
          if (v20 == v18 + v17)
          {
            sub_240BA4868((uint64_t)__p);
            v17 = *((_QWORD *)&v108 + 1);
            v18 = v108;
            v19 = (char *)__p[1];
            v22 = v108 + *((_QWORD *)&v108 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v19[(v22 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v22 & 0x1FF)) = v21;
          *((_QWORD *)&v108 + 1) = ++v17;
          v15 += 8;
        }
        while (v15 != v16);
        v15 = v104;
      }
      if (v15)
      {
        v105 = v15;
        operator delete(v15);
      }
      v7 = *((_QWORD *)&v108 + 1);
    }
    while (*((_QWORD *)&v108 + 1));
  }
  v8 = (void **)__p[1];
  v9 = (void **)v107;
  *((_QWORD *)&v108 + 1) = 0;
  v10 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v8);
      v9 = (void **)v107;
      v8 = (void **)((char *)__p[1] + 8);
      __p[1] = v8;
      v10 = v107 - (_QWORD)v8;
    }
    while ((_QWORD)v107 - (_QWORD)v8 > 0x10uLL);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 256;
    goto LABEL_27;
  }
  if (v11 == 2)
  {
    v12 = 512;
LABEL_27:
    *(_QWORD *)&v108 = v12;
  }
  if (v8 != v9)
  {
    do
    {
      v23 = *v8++;
      operator delete(v23);
    }
    while (v8 != v9);
    if ((void *)v107 != __p[1])
      *(_QWORD *)&v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  nullsub_34(&v103);
  v24 = *a2;
  v103 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110BDD8;
  v102 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110BF88;
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  sub_240BA4868((uint64_t)__p);
  v25 = *((_QWORD *)&v108 + 1);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v108 + 1) + (_QWORD)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v108 + 1) + v108) & 0x1FF)) = v24;
  v6 = __CFADD__(v25, 1);
  v26 = v25 + 1;
  if (!v6)
  {
    do
    {
      v32 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v108 + v26 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v26 - 1) & 0x1FF));
      if ((void *)v107 == __p[1])
        v33 = 0;
      else
        v33 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
      *((_QWORD *)&v108 + 1) = v26 - 1;
      if (v33 - (v26 + (_QWORD)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(_QWORD *)&v107 = v107 - 8;
      }
      if (sub_240BB7E28(a1[4]))
      {
        v103[2]((uint64_t)&v103, v32, (uint64_t)a1);
        if (sub_240BB7E28(a1[4]))
          v102[2]((uint64_t)&v102, v32, (uint64_t)a1);
      }
      sub_240B916EC(v32, &v104);
      v34 = v104;
      v35 = v105;
      if (v104 != v105)
      {
        v36 = *((_QWORD *)&v108 + 1);
        v37 = v108;
        do
        {
          v38 = (char *)__p[1];
          v39 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
          v40 = *(_QWORD *)v34;
          if ((void *)v107 == __p[1])
            v39 = 0;
          v41 = v37 + v36;
          if (v39 == v37 + v36)
          {
            sub_240BA4868((uint64_t)__p);
            v36 = *((_QWORD *)&v108 + 1);
            v37 = v108;
            v38 = (char *)__p[1];
            v41 = v108 + *((_QWORD *)&v108 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v38[(v41 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v41 & 0x1FF)) = v40;
          *((_QWORD *)&v108 + 1) = ++v36;
          v34 += 8;
        }
        while (v34 != v35);
        v34 = v104;
      }
      if (v34)
      {
        v105 = v34;
        operator delete(v34);
      }
      v26 = *((_QWORD *)&v108 + 1);
    }
    while (*((_QWORD *)&v108 + 1));
  }
  v27 = (void **)__p[1];
  v28 = (void **)v107;
  *((_QWORD *)&v108 + 1) = 0;
  v29 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v28 = (void **)v107;
      v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      v29 = v107 - (_QWORD)v27;
    }
    while ((_QWORD)v107 - (_QWORD)v27 > 0x10uLL);
  }
  v30 = v29 >> 3;
  if (v30 == 1)
  {
    v31 = 256;
    goto LABEL_61;
  }
  if (v30 == 2)
  {
    v31 = 512;
LABEL_61:
    *(_QWORD *)&v108 = v31;
  }
  if (v27 != v28)
  {
    do
    {
      v42 = *v27++;
      operator delete(v42);
    }
    while (v27 != v28);
    if ((void *)v107 != __p[1])
      *(_QWORD *)&v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  nullsub_34(&v102);
  nullsub_34(&v103);
  v43 = *a2;
  v103 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110BFD8;
  v102 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110BC10;
  v101 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110BF38;
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  sub_240BA4868((uint64_t)__p);
  v44 = *((_QWORD *)&v108 + 1);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v108 + 1) + (_QWORD)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v108 + 1) + v108) & 0x1FF)) = v43;
  v6 = __CFADD__(v44, 1);
  v45 = v44 + 1;
  if (!v6)
  {
    do
    {
      v51 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v108 + v45 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v45 - 1) & 0x1FF));
      if ((void *)v107 == __p[1])
        v52 = 0;
      else
        v52 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
      *((_QWORD *)&v108 + 1) = v45 - 1;
      if (v52 - (v45 + (_QWORD)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(_QWORD *)&v107 = v107 - 8;
      }
      if (sub_240BB7E28(a1[4]))
      {
        v103[2]((uint64_t)&v103, v51, (uint64_t)a1);
        if (sub_240BB7E28(a1[4]))
        {
          v102[2]((uint64_t)&v102, v51, (uint64_t)a1);
          if (sub_240BB7E28(a1[4]))
            v101[2]((uint64_t)&v101, v51, (uint64_t)a1);
        }
      }
      sub_240B916EC(v51, &v104);
      v53 = v104;
      v54 = v105;
      if (v104 != v105)
      {
        v55 = *((_QWORD *)&v108 + 1);
        v56 = v108;
        do
        {
          v57 = (char *)__p[1];
          v58 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
          v59 = *(_QWORD *)v53;
          if ((void *)v107 == __p[1])
            v58 = 0;
          v60 = v56 + v55;
          if (v58 == v56 + v55)
          {
            sub_240BA4868((uint64_t)__p);
            v55 = *((_QWORD *)&v108 + 1);
            v56 = v108;
            v57 = (char *)__p[1];
            v60 = v108 + *((_QWORD *)&v108 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v57[(v60 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v60 & 0x1FF)) = v59;
          *((_QWORD *)&v108 + 1) = ++v55;
          v53 += 8;
        }
        while (v53 != v54);
        v53 = v104;
      }
      if (v53)
      {
        v105 = v53;
        operator delete(v53);
      }
      v45 = *((_QWORD *)&v108 + 1);
    }
    while (*((_QWORD *)&v108 + 1));
  }
  v46 = (void **)__p[1];
  v47 = (void **)v107;
  *((_QWORD *)&v108 + 1) = 0;
  v48 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v46);
      v47 = (void **)v107;
      v46 = (void **)((char *)__p[1] + 8);
      __p[1] = v46;
      v48 = v107 - (_QWORD)v46;
    }
    while ((_QWORD)v107 - (_QWORD)v46 > 0x10uLL);
  }
  v49 = v48 >> 3;
  if (v49 == 1)
  {
    v50 = 256;
    goto LABEL_96;
  }
  if (v49 == 2)
  {
    v50 = 512;
LABEL_96:
    *(_QWORD *)&v108 = v50;
  }
  if (v46 != v47)
  {
    do
    {
      v61 = *v46++;
      operator delete(v61);
    }
    while (v46 != v47);
    if ((void *)v107 != __p[1])
      *(_QWORD *)&v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  nullsub_34(&v101);
  nullsub_34(&v102);
  nullsub_34(&v103);
  v62 = *a2;
  v103 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110CD40;
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  sub_240BA4868((uint64_t)__p);
  v63 = *((_QWORD *)&v108 + 1);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v108 + 1) + (_QWORD)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v108 + 1) + v108) & 0x1FF)) = v62;
  v6 = __CFADD__(v63, 1);
  v64 = v63 + 1;
  if (!v6)
  {
    do
    {
      v70 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v108 + v64 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v64 - 1) & 0x1FF));
      if ((void *)v107 == __p[1])
        v71 = 0;
      else
        v71 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
      *((_QWORD *)&v108 + 1) = v64 - 1;
      if (v71 - (v64 + (_QWORD)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(_QWORD *)&v107 = v107 - 8;
      }
      if (sub_240BB7E28(a1[4]))
        v103[2]((uint64_t)&v103, v70, (uint64_t)a1);
      sub_240B916EC(v70, &v104);
      v72 = v104;
      v73 = v105;
      if (v104 != v105)
      {
        v74 = *((_QWORD *)&v108 + 1);
        v75 = v108;
        do
        {
          v76 = (char *)__p[1];
          v77 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
          v78 = *(_QWORD *)v72;
          if ((void *)v107 == __p[1])
            v77 = 0;
          v79 = v75 + v74;
          if (v77 == v75 + v74)
          {
            sub_240BA4868((uint64_t)__p);
            v74 = *((_QWORD *)&v108 + 1);
            v75 = v108;
            v76 = (char *)__p[1];
            v79 = v108 + *((_QWORD *)&v108 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v76[(v79 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v79 & 0x1FF)) = v78;
          *((_QWORD *)&v108 + 1) = ++v74;
          v72 += 8;
        }
        while (v72 != v73);
        v72 = v104;
      }
      if (v72)
      {
        v105 = v72;
        operator delete(v72);
      }
      v64 = *((_QWORD *)&v108 + 1);
    }
    while (*((_QWORD *)&v108 + 1));
  }
  v65 = (void **)__p[1];
  v66 = (void **)v107;
  *((_QWORD *)&v108 + 1) = 0;
  v67 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v65);
      v66 = (void **)v107;
      v65 = (void **)((char *)__p[1] + 8);
      __p[1] = v65;
      v67 = v107 - (_QWORD)v65;
    }
    while ((_QWORD)v107 - (_QWORD)v65 > 0x10uLL);
  }
  v68 = v67 >> 3;
  if (v68 == 1)
  {
    v69 = 256;
    goto LABEL_129;
  }
  if (v68 == 2)
  {
    v69 = 512;
LABEL_129:
    *(_QWORD *)&v108 = v69;
  }
  if (v65 != v66)
  {
    do
    {
      v80 = *v65++;
      operator delete(v80);
    }
    while (v65 != v66);
    if ((void *)v107 != __p[1])
      *(_QWORD *)&v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  nullsub_34(&v103);
  v81 = *a2;
  v103 = (void (**)(uint64_t, uint64_t, uint64_t))&unk_25110BC88;
  v107 = 0u;
  v108 = 0u;
  *(_OWORD *)__p = 0u;
  sub_240BA4868((uint64_t)__p);
  v82 = *((_QWORD *)&v108 + 1);
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v108 + 1) + (_QWORD)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v108 + 1) + v108) & 0x1FF)) = v81;
  v6 = __CFADD__(v82, 1);
  v83 = v82 + 1;
  if (!v6)
  {
    do
    {
      v89 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(v108 + v83 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v83 - 1) & 0x1FF));
      if ((void *)v107 == __p[1])
        v90 = 0;
      else
        v90 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
      *((_QWORD *)&v108 + 1) = v83 - 1;
      if (v90 - (v83 + (_QWORD)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(_QWORD *)&v107 = v107 - 8;
      }
      if (sub_240BB7E28(a1[4]))
        v103[2]((uint64_t)&v103, v89, (uint64_t)a1);
      sub_240B916EC(v89, &v104);
      v91 = v104;
      v92 = v105;
      if (v104 != v105)
      {
        v93 = *((_QWORD *)&v108 + 1);
        v94 = v108;
        do
        {
          v95 = (char *)__p[1];
          v96 = (((_QWORD)v107 - (unint64_t)__p[1]) << 6) - 1;
          v97 = *(_QWORD *)v91;
          if ((void *)v107 == __p[1])
            v96 = 0;
          v98 = v94 + v93;
          if (v96 == v94 + v93)
          {
            sub_240BA4868((uint64_t)__p);
            v93 = *((_QWORD *)&v108 + 1);
            v94 = v108;
            v95 = (char *)__p[1];
            v98 = v108 + *((_QWORD *)&v108 + 1);
          }
          *(_QWORD *)(*(_QWORD *)&v95[(v98 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v98 & 0x1FF)) = v97;
          *((_QWORD *)&v108 + 1) = ++v93;
          v91 += 8;
        }
        while (v91 != v92);
        v91 = v104;
      }
      if (v91)
      {
        v105 = v91;
        operator delete(v91);
      }
      v83 = *((_QWORD *)&v108 + 1);
    }
    while (*((_QWORD *)&v108 + 1));
  }
  v84 = (void **)__p[1];
  v85 = (void **)v107;
  *((_QWORD *)&v108 + 1) = 0;
  v86 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v84);
      v85 = (void **)v107;
      v84 = (void **)((char *)__p[1] + 8);
      __p[1] = v84;
      v86 = v107 - (_QWORD)v84;
    }
    while ((_QWORD)v107 - (_QWORD)v84 > 0x10uLL);
  }
  v87 = v86 >> 3;
  if (v87 == 1)
  {
    v88 = 256;
    goto LABEL_162;
  }
  if (v87 == 2)
  {
    v88 = 512;
LABEL_162:
    *(_QWORD *)&v108 = v88;
  }
  if (v84 != v85)
  {
    do
    {
      v99 = *v84++;
      operator delete(v99);
    }
    while (v84 != v85);
    if ((void *)v107 != __p[1])
      *(_QWORD *)&v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  return nullsub_34(&v103);
}

void sub_240BA3598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  sub_240BA4718((uint64_t)&a18);
  nullsub_34(&a12);
  _Unwind_Resume(a1);
}

void sub_240BA3664(_QWORD *a1)
{
  _DWORD *v1;
  _DWORD *i;
  _QWORD *v4;
  void *__p;
  __int128 v6;

  v1 = (_DWORD *)a1[25];
  for (i = (_DWORD *)a1[26]; v1 != i; v1 += 12)
  {
    if (*v1)
    {
      if ((*v1 - 1) < 2)
      {
        v4 = (_QWORD *)a1[4];
        __p = operator new(0x20uLL);
        v6 = xmmword_240BBBD90;
        strcpy((char *)__p, "insn metadata not implemented.");
        sub_240BB7D38(v4, 6, (uint64_t)&__p);
        if (SHIBYTE(v6) < 0)
          operator delete(__p);
        return;
      }
    }
    else
    {
      sub_240BAE9FC((uint64_t)v1, (uint64_t)a1);
    }
  }
}

void sub_240BA3724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240BA3740(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *i;
  uint64_t v4;
  unint64_t v5;

  v1 = *(uint64_t **)(a1 + 48);
  for (i = *(uint64_t **)(a1 + 56); v1 != i; v1 += 2)
  {
    v4 = *v1;
    if (*(_QWORD *)(*v1 + 80) != *(_QWORD *)(*v1 + 72))
    {
      v5 = 0;
      do
      {
        sub_240BA5724(*(uint64_t **)(a1 + 72), a1, v4, v5++);
        v4 = *v1;
      }
      while (v5 < (uint64_t)(*(_QWORD *)(*v1 + 80) - *(_QWORD *)(*v1 + 72)) >> 4);
    }
  }
}

void sub_240BA37C0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  unint64_t v9;
  const void **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  const void *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  _BYTE *v18;
  std::string::size_type v19;
  _BYTE v20[64];
  uint64_t v21;

  v1 = (uint64_t *)a1[13];
  v2 = (uint64_t *)a1[14];
  if (v1 != v2)
  {
    while (1)
    {
      v4 = *v1;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v1 + 104))(*v1) != 1
        || (sub_240BA8C40(v4) & 1) != 0
        || (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v1 + 168))(*v1))
      {
        goto LABEL_4;
      }
      v5 = (_QWORD *)a1[4];
      v6 = sub_240BA77BC(*v1);
      v7 = *(char *)(v6 + 23);
      if (v7 >= 0)
        v8 = *(unsigned __int8 *)(v6 + 23);
      else
        v8 = *(_QWORD *)(v6 + 8);
      v9 = v8 + 64;
      if (v8 + 64 >= 0x7FFFFFFFFFFFFFF8)
        sub_240B6FFF4();
      v10 = (const void **)v6;
      if (v9 <= 0x16)
        break;
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v14 = (uint64_t *)operator new(v12 + 1);
      *(_QWORD *)&v20[8] = v8 + 64;
      *(_QWORD *)&v20[16] = v13 | 0x8000000000000000;
      *(_QWORD *)v20 = v14;
      v11 = v14 + 8;
      qmemcpy(v14, "Cannot validate because the address of Client-allocated tensor '", 64);
      if (v8)
        goto LABEL_17;
LABEL_21:
      *((_BYTE *)v11 + v8) = 0;
      if (v20[23] >= 0)
        v16 = 22;
      else
        v16 = (*(_QWORD *)&v20[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v20[23] >= 0)
        v17 = v20[23];
      else
        v17 = *(_QWORD *)&v20[8];
      if (v16 - v17 >= 0xD)
      {
        v18 = v20;
        if (v20[23] < 0)
          v18 = *(_BYTE **)v20;
        qmemcpy(&v18[v17], "' is not set.", 13);
        v19 = v17 + 13;
        if ((v20[23] & 0x80000000) != 0)
          *(_QWORD *)&v20[8] = v17 + 13;
        else
          v20[23] = v19 & 0x7F;
        v18[v19] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace((std::string *)v20, v16, v17 - v16 + 13, v17, v17, 0, 0xDuLL, "' is not set.");
      }
      *(_OWORD *)&v20[32] = *(_OWORD *)v20;
      *(_QWORD *)&v20[48] = *(_QWORD *)&v20[16];
      memset(v20, 0, 24);
      sub_240BB7D38(v5, 5, (uint64_t)&v20[32]);
      if ((v20[55] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v20[32]);
        if ((v20[23] & 0x80000000) != 0)
          goto LABEL_37;
      }
      else if ((v20[23] & 0x80000000) != 0)
      {
LABEL_37:
        operator delete(*(void **)v20);
      }
LABEL_4:
      v1 += 2;
      if (v1 == v2)
        return;
    }
    qmemcpy(v20, "Cannot validate because the address of Client-allocated tensor '", sizeof(v20));
    v11 = &v21;
LABEL_17:
    if (v7 >= 0)
      v15 = v10;
    else
      v15 = *v10;
    memmove(v11, v15, v8);
    goto LABEL_21;
  }
}

void sub_240BA3A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a16 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240BA3A70(uint64_t a1)
{
  const void ***v2;
  const void ***v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  void **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  uint64_t shared_owners;
  const void ***v12;
  const void ***v13;
  _QWORD *v14;
  const void **v15;
  uint64_t v16;
  const void *v17;
  void **v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  unint64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  void **v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *__p[4];
  __int128 v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "init");
  v2 = *(const void ****)(a1 + 48);
  v3 = *(const void ****)(a1 + 56);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *v2;
      v5 = *((unsigned __int8 *)*v2 + 23);
      if ((v5 & 0x80u) == 0)
        v6 = (const void *)*((unsigned __int8 *)*v2 + 23);
      else
        v6 = (*v2)[1];
      if (v6 == (const void *)4)
      {
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*v4, __p, (size_t)(*v2)[1]))
            break;
        }
        else
        {
          if (!*((_BYTE *)*v2 + 23))
            break;
          v7 = __p;
          while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v7)
          {
            v4 = (const void **)((char *)v4 + 1);
            v7 = (void **)((char *)v7 + 1);
            if (!--v5)
              goto LABEL_14;
          }
        }
      }
      v2 += 2;
      if (v2 == v3)
        goto LABEL_21;
    }
  }
LABEL_14:
  if (v2 != v3)
  {
    v8 = (std::__shared_weak_count *)v2[1];
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      shared_owners = v8->__shared_owners_;
      std::__shared_weak_count::__release_weak(v8);
      if (shared_owners != -1)
      {
        HIBYTE(__p[2]) = 4;
        strcpy((char *)__p, "init");
        v12 = *(const void ****)(a1 + 48);
        v13 = *(const void ****)(a1 + 56);
        if (v12 != v13)
        {
          while (1)
          {
            v15 = *v12;
            v16 = *((unsigned __int8 *)*v12 + 23);
            if ((v16 & 0x80u) == 0)
              v17 = (const void *)*((unsigned __int8 *)*v12 + 23);
            else
              v17 = (*v12)[1];
            if (v17 == (const void *)4)
            {
              if ((v16 & 0x80) != 0)
              {
                if (!memcmp(*v15, __p, (size_t)(*v12)[1]))
                  break;
              }
              else
              {
                if (!*((_BYTE *)*v12 + 23))
                  break;
                v18 = __p;
                while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v18)
                {
                  v15 = (const void **)((char *)v15 + 1);
                  v18 = (void **)((char *)v18 + 1);
                  if (!--v16)
                    goto LABEL_34;
                }
              }
            }
            v12 += 2;
            if (v12 == v13)
              goto LABEL_40;
          }
        }
LABEL_34:
        if (v12 == v13 || (v19 = (std::__shared_weak_count *)v12[1]) == 0)
        {
LABEL_40:
          v20 = 0;
          v41 = 0;
          v42 = 0;
        }
        else
        {
          v20 = (uint64_t)*v12;
          v21 = (unint64_t *)&v19->__shared_weak_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
          v41 = 0;
          v42 = std::__shared_weak_count::lock(v19);
          if (v42)
            v41 = v20;
          else
            v20 = 0;
          std::__shared_weak_count::__release_weak(v19);
        }
        if (*(_QWORD *)(v20 + 80) != *(_QWORD *)(v20 + 72))
        {
          v23 = 0;
          do
          {
            sub_240BA5724(*(uint64_t **)(a1 + 72), a1, v20, v23++);
            v20 = v41;
          }
          while (v23 < (uint64_t)(*(_QWORD *)(v41 + 80) - *(_QWORD *)(v41 + 72)) >> 4);
        }
        v40 = 0u;
        memset(__p, 0, sizeof(__p));
        sub_240BA5020((uint64_t)__p);
        v24 = *(_QWORD *)(v20 + 80);
        v25 = (void **)__p[2];
        v26 = (void **)__p[1];
        *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v40 + 1) + (_QWORD)v40) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*((_QWORD *)&v40 + 1) + v40) & 0x1FF)) = 0;
        v27 = (*((_QWORD *)&v40 + 1))++;
        v28 = (v24 - *(_QWORD *)(v20 + 72)) >> 4;
        if ((*(_QWORD **)((char *)v26 + (((unint64_t)(v27 + v40) >> 6) & 0x3FFFFFFFFFFFFF8)))[((_WORD)v27 + (_WORD)v40) & 0x1FF] >= v28)
        {
          v31 = v25;
        }
        else
        {
          do
          {
            v29 = sub_240BB7E28(*(_QWORD *)(a1 + 32));
            v26 = (void **)__p[1];
            if (!v29)
              break;
            v30 = sub_240BA665C(*(int8x8_t ***)(a1 + 72), a1, v20, *(_QWORD *)(*(_QWORD *)((char *)__p[1]+ (((unint64_t)(*((_QWORD *)&v40 + 1) + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v40 + 1) + v40 - 1) & 0x1FF)));
            v26 = (void **)__p[1];
            *(_QWORD *)(*(_QWORD *)((char *)__p[1]
                                  + (((unint64_t)(*((_QWORD *)&v40 + 1) + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((_QWORD *)&v40 + 1) + v40 - 1) & 0x1FF)) = v30;
          }
          while ((*(_QWORD **)((char *)v26
                              + (((unint64_t)(*((_QWORD *)&v40 + 1) + v40 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(*((_QWORD *)&v40 + 1) + v40 - 1) & 0x1FF] < v28);
          v31 = (void **)__p[2];
        }
        *((_QWORD *)&v40 + 1) = 0;
        v32 = (char *)v31 - (char *)v26;
        if ((unint64_t)((char *)v31 - (char *)v26) >= 0x11)
        {
          do
          {
            operator delete(*v26);
            v31 = (void **)__p[2];
            v26 = (void **)((char *)__p[1] + 8);
            __p[1] = v26;
            v32 = (char *)__p[2] - (char *)v26;
          }
          while ((void *)((char *)__p[2] - (char *)v26) > (void *)0x10);
        }
        v33 = v32 >> 3;
        if (v33 == 1)
        {
          v34 = 256;
        }
        else
        {
          if (v33 != 2)
            goto LABEL_58;
          v34 = 512;
        }
        *(_QWORD *)&v40 = v34;
LABEL_58:
        if (v26 != v31)
        {
          do
          {
            v35 = *v26++;
            operator delete(v35);
          }
          while (v26 != v31);
          if (__p[2] != __p[1])
            __p[2] = (char *)__p[2] + (((char *)__p[1] - (char *)__p[2] + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if (__p[0])
          operator delete(__p[0]);
        v36 = v42;
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v38 = __ldaxr(p_shared_owners);
          while (__stlxr(v38 - 1, p_shared_owners));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        return;
      }
    }
  }
LABEL_21:
  v14 = *(_QWORD **)(a1 + 32);
  __p[0] = operator new(0x40uLL);
  *(_OWORD *)&__p[1] = xmmword_240BBBDA0;
  strcpy((char *)__p[0], "Cannot initialize VM, init function expired or does not exist");
  sub_240BB7D38(v14, 5, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_240BA3EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_240BA4718((uint64_t)&__p);
  sub_240B6FE78((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA3F04@<X0>(uint64_t result@<X0>, unsigned __int8 **a2@<X1>, const void ***a3@<X8>)
{
  const void ***v4;
  const void ***v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  const void **v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  const void **v13;
  unint64_t *v14;
  unint64_t v15;

  v4 = *(const void ****)(result + 48);
  v5 = *(const void ****)(result + 56);
  if (v4 != v5)
  {
    v6 = *((_BYTE *)a2 + 23);
    if (v6 >= 0)
      v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v7 = a2[1];
    if (v6 >= 0)
      v8 = (unsigned __int8 *)a2;
    else
      v8 = *a2;
    while (1)
    {
      v9 = *v4;
      v10 = *((unsigned __int8 *)*v4 + 23);
      if ((v10 & 0x80u) == 0)
        v11 = (unsigned __int8 *)*((unsigned __int8 *)*v4 + 23);
      else
        v11 = (unsigned __int8 *)(*v4)[1];
      if (v11 == v7)
      {
        if ((v10 & 0x80) != 0)
        {
          result = memcmp(*v9, v8, (size_t)(*v4)[1]);
          if (!(_DWORD)result)
            break;
        }
        else
        {
          if (!*((_BYTE *)*v4 + 23))
            break;
          v12 = v8;
          while (*(unsigned __int8 *)v9 == *v12)
          {
            v9 = (const void **)((char *)v9 + 1);
            ++v12;
            if (!--v10)
              goto LABEL_19;
          }
        }
      }
      v4 += 2;
      if (v4 == v5)
        goto LABEL_24;
    }
  }
LABEL_19:
  if (v4 == v5)
  {
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v13 = v4[1];
    *a3 = *v4;
    a3[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 2);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  return result;
}

void sub_240BA3FF0(uint64_t a1)
{
  const void ***v2;
  const void ***v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  void **v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  void **v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *__p[2];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  BYTE7(v29) = 6;
  strcpy((char *)__p, "deinit");
  v2 = *(const void ****)(a1 + 48);
  v3 = *(const void ****)(a1 + 56);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *v2;
      v5 = *((unsigned __int8 *)*v2 + 23);
      if ((v5 & 0x80u) == 0)
        v6 = (const void *)*((unsigned __int8 *)*v2 + 23);
      else
        v6 = (*v2)[1];
      if (v6 == (const void *)6)
      {
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*v4, __p, (size_t)(*v2)[1]))
            break;
        }
        else
        {
          if (!*((_BYTE *)*v2 + 23))
            break;
          v7 = __p;
          while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v7)
          {
            v4 = (const void **)((char *)v4 + 1);
            v7 = (void **)((char *)v7 + 1);
            if (!--v5)
              goto LABEL_14;
          }
        }
      }
      v2 += 2;
      if (v2 == v3)
        goto LABEL_20;
    }
  }
LABEL_14:
  if (v2 == v3 || (v8 = (std::__shared_weak_count *)v2[1]) == 0)
  {
LABEL_20:
    v9 = 0;
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v9 = (uint64_t)*v2;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v31 = 0;
    v32 = std::__shared_weak_count::lock(v8);
    if (v32)
      v31 = v9;
    else
      v9 = 0;
    std::__shared_weak_count::__release_weak(v8);
  }
  if (*(_QWORD *)(v9 + 80) != *(_QWORD *)(v9 + 72))
  {
    v12 = 0;
    do
    {
      sub_240BA5724(*(uint64_t **)(a1 + 72), a1, v9, v12++);
      v9 = v31;
    }
    while (v12 < (uint64_t)(*(_QWORD *)(v31 + 80) - *(_QWORD *)(v31 + 72)) >> 4);
  }
  v29 = 0u;
  v30 = 0u;
  *(_OWORD *)__p = 0u;
  sub_240BA5020((uint64_t)__p);
  v13 = *(_QWORD *)(v9 + 80);
  v14 = (void **)v29;
  v15 = (void **)__p[1];
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v30 + 1) + (_QWORD)v30) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v30 + 1) + v30) & 0x1FF)) = 0;
  v16 = (*((_QWORD *)&v30 + 1))++;
  v17 = (v13 - *(_QWORD *)(v9 + 72)) >> 4;
  if ((*(_QWORD **)((char *)v15 + (((unint64_t)(v16 + v30) >> 6) & 0x3FFFFFFFFFFFFF8)))[((_WORD)v16
                                                                                                 + (_WORD)v30) & 0x1FF] >= v17)
  {
    v20 = v14;
  }
  else
  {
    do
    {
      v18 = sub_240BB7E28(*(_QWORD *)(a1 + 32));
      v15 = (void **)__p[1];
      if (!v18)
        break;
      v19 = sub_240BA665C(*(int8x8_t ***)(a1 + 72), a1, v9, *(_QWORD *)(*(_QWORD *)((char *)__p[1]+ (((unint64_t)(*((_QWORD *)&v30 + 1) + v30 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v30 + 1) + v30 - 1) & 0x1FF)));
      v15 = (void **)__p[1];
      *(_QWORD *)(*(_QWORD *)((char *)__p[1]
                            + (((unint64_t)(*((_QWORD *)&v30 + 1) + v30 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * ((*((_QWORD *)&v30 + 1) + v30 - 1) & 0x1FF)) = v19;
    }
    while ((*(_QWORD **)((char *)v15
                        + (((unint64_t)(*((_QWORD *)&v30 + 1) + v30 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(*((_QWORD *)&v30 + 1) + v30 - 1) & 0x1FF] < v17);
    v20 = (void **)v29;
  }
  *((_QWORD *)&v30 + 1) = 0;
  v21 = (char *)v20 - (char *)v15;
  if ((unint64_t)((char *)v20 - (char *)v15) >= 0x11)
  {
    do
    {
      operator delete(*v15);
      v20 = (void **)v29;
      v15 = (void **)((char *)__p[1] + 8);
      __p[1] = v15;
      v21 = v29 - (_QWORD)v15;
    }
    while ((_QWORD)v29 - (_QWORD)v15 > 0x10uLL);
  }
  v22 = v21 >> 3;
  if (v22 == 1)
  {
    v23 = 256;
    goto LABEL_37;
  }
  if (v22 == 2)
  {
    v23 = 512;
LABEL_37:
    *(_QWORD *)&v30 = v23;
  }
  if (v15 != v20)
  {
    do
    {
      v24 = *v15++;
      operator delete(v24);
    }
    while (v15 != v20);
    if ((void *)v29 != __p[1])
      *(_QWORD *)&v29 = v29 + (((unint64_t)__p[1] - v29 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  v25 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_240BA4328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_240BA4718((uint64_t)&a9);
  sub_240B6FE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_240BA4350(uint64_t a1)
{
  const void ***v2;
  const void ***v3;
  const void **v4;
  uint64_t v5;
  const void *v6;
  void **v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  void **v12;
  void **v13;
  uint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  BYTE7(v27) = 7;
  strcpy((char *)__p, "reshape");
  v2 = *(const void ****)(a1 + 48);
  v3 = *(const void ****)(a1 + 56);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = *v2;
      v5 = *((unsigned __int8 *)*v2 + 23);
      if ((v5 & 0x80u) == 0)
        v6 = (const void *)*((unsigned __int8 *)*v2 + 23);
      else
        v6 = (*v2)[1];
      if (v6 == (const void *)7)
      {
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*v4, __p, (size_t)(*v2)[1]))
            break;
        }
        else
        {
          if (!*((_BYTE *)*v2 + 23))
            break;
          v7 = __p;
          while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v7)
          {
            v4 = (const void **)((char *)v4 + 1);
            v7 = (void **)((char *)v7 + 1);
            if (!--v5)
              goto LABEL_14;
          }
        }
      }
      v2 += 2;
      if (v2 == v3)
        goto LABEL_20;
    }
  }
LABEL_14:
  if (v2 == v3 || (v8 = (std::__shared_weak_count *)v2[1]) == 0)
  {
LABEL_20:
    v9 = 0;
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v9 = (uint64_t)*v2;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v29 = 0;
    v30 = std::__shared_weak_count::lock(v8);
    if (v30)
      v29 = v9;
    else
      v9 = 0;
    std::__shared_weak_count::__release_weak(v8);
  }
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  sub_240BA5020((uint64_t)__p);
  v12 = (void **)v27;
  v13 = (void **)__p[1];
  *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((*((_QWORD *)&v28 + 1) + (_QWORD)v28) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((_QWORD *)&v28 + 1) + v28) & 0x1FF)) = 0;
  v14 = (*((_QWORD *)&v28 + 1))++;
  v15 = (uint64_t)(*(_QWORD *)(v9 + 80) - *(_QWORD *)(v9 + 72)) >> 4;
  if ((*(_QWORD **)((char *)v13 + (((unint64_t)(v14 + v28) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v14 + v28) & 0x1FF] >= v15)
  {
    v18 = v12;
  }
  else
  {
    do
    {
      v16 = sub_240BB7E28(*(_QWORD *)(a1 + 32));
      v13 = (void **)__p[1];
      if (!v16)
        break;
      v17 = sub_240BA665C(*(int8x8_t ***)(a1 + 72), a1, v9, *(_QWORD *)(*(_QWORD *)((char *)__p[1]+ (((unint64_t)(*((_QWORD *)&v28 + 1) + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((_QWORD *)&v28 + 1) + v28 - 1) & 0x1FF)));
      v13 = (void **)__p[1];
      *(_QWORD *)(*(_QWORD *)((char *)__p[1]
                            + (((unint64_t)(*((_QWORD *)&v28 + 1) + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * ((*((_QWORD *)&v28 + 1) + v28 - 1) & 0x1FF)) = v17;
    }
    while ((*(_QWORD **)((char *)v13
                        + (((unint64_t)(*((_QWORD *)&v28 + 1) + v28 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(*((_QWORD *)&v28 + 1) + v28 - 1) & 0x1FF] < v15);
    v18 = (void **)v27;
  }
  *((_QWORD *)&v28 + 1) = 0;
  v19 = (char *)v18 - (char *)v13;
  if ((unint64_t)((char *)v18 - (char *)v13) >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v18 = (void **)v27;
      v13 = (void **)((char *)__p[1] + 8);
      __p[1] = v13;
      v19 = v27 - (_QWORD)v13;
    }
    while ((_QWORD)v27 - (_QWORD)v13 > 0x10uLL);
  }
  v20 = v19 >> 3;
  if (v20 == 1)
  {
    v21 = 256;
    goto LABEL_34;
  }
  if (v20 == 2)
  {
    v21 = 512;
LABEL_34:
    *(_QWORD *)&v28 = v21;
  }
  if (v13 != v18)
  {
    do
    {
      v22 = *v13++;
      operator delete(v22);
    }
    while (v13 != v18);
    if ((void *)v27 != __p[1])
      *(_QWORD *)&v27 = v27 + (((unint64_t)__p[1] - v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  v23 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_240BA464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_240BA4718((uint64_t)&a9);
  sub_240B6FE78((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_240BA466C(_QWORD *a1, uint64_t a2)
{
  const char *v3;
  void *v4;

  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = dlopen(v3, 262);
  *a1 = v4;
  return v4 != 0;
}

void sub_240BA46AC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_25110C930;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)nullsub_34(a1);
  j__free(v4);
}

uint64_t sub_240BA4718(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_240BA47DC(uint64_t a1)
{
  char *v2;
  void *v3;
  char *v5;
  MIL::Blob::StorageReader *v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = *(char **)v2;
      v6 = (MIL::Blob::StorageReader *)*((_QWORD *)v2 + 5);
      *((_QWORD *)v2 + 5) = 0;
      if (v6)
      {
        MIL::Blob::StorageReader::~StorageReader(v6);
        MEMORY[0x24268ACF8]();
      }
      if (v2[39] < 0)
        operator delete(*((void **)v2 + 2));
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_240BA4868(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  BOOL v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_56:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v29 = (v5 - v9) >> 2;
      if (v5 == v9)
        v29 = 1;
      if (!(v29 >> 61))
      {
        v30 = v29 >> 2;
        v31 = 8 * v29;
        v32 = (char *)operator new(8 * v29);
        v33 = &v32[8 * v30];
        v34 = &v32[v31];
        v36 = v5 - v7;
        v35 = v5 == v7;
        v5 = v33;
        if (!v35)
        {
          v5 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          v37 = v36 - 8;
          if ((unint64_t)(v36 - 8) >= 0x38)
          {
            v53 = &v32[8 * v30];
            v38 = v53;
            if ((unint64_t)(v53 - v7) >= 0x20)
            {
              v54 = (v37 >> 3) + 1;
              v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              v38 = &v33[v55];
              v7 += v55;
              v56 = (__int128 *)(v6 + 3);
              v57 = v53 + 16;
              v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v59 = *v56;
                *(v57 - 1) = *(v56 - 1);
                *v57 = v59;
                v56 += 2;
                v57 += 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_54;
            }
          }
          else
          {
            v38 = &v32[8 * v30];
          }
          do
          {
            v60 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v38 = v60;
            v38 += 8;
          }
          while (v38 != v5);
        }
        goto LABEL_54;
      }
LABEL_64:
      sub_240B7007C();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_56;
  }
  v18 = *(char **)(a1 + 8);
  v17 = *(char **)(a1 + 16);
  v19 = v17 - v18;
  v20 = (v17 - v18) >> 3;
  v21 = *(char **)(a1 + 24);
  v22 = (uint64_t)&v21[-*(_QWORD *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      *(_QWORD *)&v69 = operator new(0x1000uLL);
      sub_240BA4CFC((char **)a1, &v69);
      return;
    }
    *(_QWORD *)&v69 = operator new(0x1000uLL);
    sub_240BA4E88((void **)a1, &v69);
    v39 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v39 + 1);
    v8 = *v39;
    *(_QWORD *)(a1 + 8) = v39 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_56;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v40 = (v5 - v9) >> 2;
      if (v5 == v9)
        v40 = 1;
      if (!(v40 >> 61))
      {
        v41 = v40 >> 2;
        v42 = 8 * v40;
        v32 = (char *)operator new(8 * v40);
        v33 = &v32[8 * v41];
        v34 = &v32[v42];
        v43 = v5 - v7;
        v35 = v5 == v7;
        v5 = v33;
        if (!v35)
        {
          v5 = &v33[v43 & 0xFFFFFFFFFFFFFFF8];
          v44 = v43 - 8;
          if ((unint64_t)(v43 - 8) >= 0x38)
          {
            v61 = &v32[8 * v41];
            v45 = v61;
            if ((unint64_t)(v61 - v7) >= 0x20)
            {
              v62 = (v44 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v33[v63];
              v7 += v63;
              v64 = (__int128 *)(v39 + 3);
              v65 = v61 + 16;
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *(v65 - 1) = *(v64 - 1);
                *v65 = v67;
                v64 += 2;
                v65 += 2;
                v66 -= 4;
              }
              while (v66);
              if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_54;
            }
          }
          else
          {
            v45 = &v32[8 * v41];
          }
          do
          {
            v68 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v45 = v68;
            v45 += 8;
          }
          while (v45 != v5);
        }
LABEL_54:
        *(_QWORD *)a1 = v32;
        *(_QWORD *)(a1 + 8) = v33;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v34;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_56;
      }
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v21 == *(char **)a1)
    v24 = 1;
  else
    v24 = v23;
  v71 = a1 + 24;
  if (v24 >> 61)
    goto LABEL_64;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v20];
  *(_QWORD *)&v69 = v25;
  *((_QWORD *)&v69 + 1) = v26;
  *(_QWORD *)&v70 = v26;
  *((_QWORD *)&v70 + 1) = &v25[8 * v24];
  v27 = operator new(0x1000uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18)
        v46 = 1;
      else
        v46 = v19 >> 2;
      if (v46 >> 61)
        sub_240B7007C();
      v47 = (char *)operator new(8 * v46);
      v26 = &v47[8 * (v46 >> 2)];
      *(_QWORD *)&v69 = v47;
      *((_QWORD *)&v69 + 1) = v26;
      *((_QWORD *)&v70 + 1) = &v47[8 * v46];
      operator delete(v25);
      v17 = *(char **)(a1 + 16);
    }
    else
    {
      v28 = v20 + 2;
      if (v20 >= -1)
        v28 = v20 + 1;
      v26 -= 8 * (v28 >> 1);
      *((_QWORD *)&v69 + 1) = v26;
    }
  }
  *(_QWORD *)v26 = v27;
  *(_QWORD *)&v70 = v26 + 8;
  v48 = -7 - (_QWORD)v17;
  while (v17 != *(char **)(a1 + 8))
  {
    v17 -= 8;
    v48 += 8;
    sub_240BA4E88((void **)&v69, v17);
  }
  v49 = *(char **)a1;
  v50 = v69;
  v51 = v70;
  *(_QWORD *)&v69 = *(_QWORD *)a1;
  *((_QWORD *)&v69 + 1) = v17;
  v52 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v51;
  v70 = v52;
  if (v17 != (char *)v52)
    *(_QWORD *)&v70 = v52 + (-(v52 + v48) & 0xFFFFFFFFFFFFFFF8);
  if (v49)
    operator delete(v49);
}

void sub_240BA4C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_240BA4CFC(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_240B7007C();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_240BA4E88(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_240B7007C();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_240BA5020(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  BOOL v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_56:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v29 = (v5 - v9) >> 2;
      if (v5 == v9)
        v29 = 1;
      if (!(v29 >> 61))
      {
        v30 = v29 >> 2;
        v31 = 8 * v29;
        v32 = (char *)operator new(8 * v29);
        v33 = &v32[8 * v30];
        v34 = &v32[v31];
        v36 = v5 - v7;
        v35 = v5 == v7;
        v5 = v33;
        if (!v35)
        {
          v5 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          v37 = v36 - 8;
          if ((unint64_t)(v36 - 8) >= 0x38)
          {
            v53 = &v32[8 * v30];
            v38 = v53;
            if ((unint64_t)(v53 - v7) >= 0x20)
            {
              v54 = (v37 >> 3) + 1;
              v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              v38 = &v33[v55];
              v7 += v55;
              v56 = (__int128 *)(v6 + 3);
              v57 = v53 + 16;
              v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v59 = *v56;
                *(v57 - 1) = *(v56 - 1);
                *v57 = v59;
                v56 += 2;
                v57 += 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_54;
            }
          }
          else
          {
            v38 = &v32[8 * v30];
          }
          do
          {
            v60 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v38 = v60;
            v38 += 8;
          }
          while (v38 != v5);
        }
        goto LABEL_54;
      }
LABEL_64:
      sub_240B7007C();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_56;
  }
  v18 = *(char **)(a1 + 8);
  v17 = *(char **)(a1 + 16);
  v19 = v17 - v18;
  v20 = (v17 - v18) >> 3;
  v21 = *(char **)(a1 + 24);
  v22 = (uint64_t)&v21[-*(_QWORD *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      *(_QWORD *)&v69 = operator new(0x1000uLL);
      sub_240BA4CFC((char **)a1, &v69);
      return;
    }
    *(_QWORD *)&v69 = operator new(0x1000uLL);
    sub_240BA4E88((void **)a1, &v69);
    v39 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v39 + 1);
    v8 = *v39;
    *(_QWORD *)(a1 + 8) = v39 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_56;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v40 = (v5 - v9) >> 2;
      if (v5 == v9)
        v40 = 1;
      if (!(v40 >> 61))
      {
        v41 = v40 >> 2;
        v42 = 8 * v40;
        v32 = (char *)operator new(8 * v40);
        v33 = &v32[8 * v41];
        v34 = &v32[v42];
        v43 = v5 - v7;
        v35 = v5 == v7;
        v5 = v33;
        if (!v35)
        {
          v5 = &v33[v43 & 0xFFFFFFFFFFFFFFF8];
          v44 = v43 - 8;
          if ((unint64_t)(v43 - 8) >= 0x38)
          {
            v61 = &v32[8 * v41];
            v45 = v61;
            if ((unint64_t)(v61 - v7) >= 0x20)
            {
              v62 = (v44 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v33[v63];
              v7 += v63;
              v64 = (__int128 *)(v39 + 3);
              v65 = v61 + 16;
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *(v65 - 1) = *(v64 - 1);
                *v65 = v67;
                v64 += 2;
                v65 += 2;
                v66 -= 4;
              }
              while (v66);
              if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_54;
            }
          }
          else
          {
            v45 = &v32[8 * v41];
          }
          do
          {
            v68 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v45 = v68;
            v45 += 8;
          }
          while (v45 != v5);
        }
LABEL_54:
        *(_QWORD *)a1 = v32;
        *(_QWORD *)(a1 + 8) = v33;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v34;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_56;
      }
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v21 == *(char **)a1)
    v24 = 1;
  else
    v24 = v23;
  v71 = a1 + 24;
  if (v24 >> 61)
    goto LABEL_64;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v20];
  *(_QWORD *)&v69 = v25;
  *((_QWORD *)&v69 + 1) = v26;
  *(_QWORD *)&v70 = v26;
  *((_QWORD *)&v70 + 1) = &v25[8 * v24];
  v27 = operator new(0x1000uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18)
        v46 = 1;
      else
        v46 = v19 >> 2;
      if (v46 >> 61)
        sub_240B7007C();
      v47 = (char *)operator new(8 * v46);
      v26 = &v47[8 * (v46 >> 2)];
      *(_QWORD *)&v69 = v47;
      *((_QWORD *)&v69 + 1) = v26;
      *((_QWORD *)&v70 + 1) = &v47[8 * v46];
      operator delete(v25);
      v17 = *(char **)(a1 + 16);
    }
    else
    {
      v28 = v20 + 2;
      if (v20 >= -1)
        v28 = v20 + 1;
      v26 -= 8 * (v28 >> 1);
      *((_QWORD *)&v69 + 1) = v26;
    }
  }
  *(_QWORD *)v26 = v27;
  *(_QWORD *)&v70 = v26 + 8;
  v48 = -7 - (_QWORD)v17;
  while (v17 != *(char **)(a1 + 8))
  {
    v17 -= 8;
    v48 += 8;
    sub_240BA4E88((void **)&v69, v17);
  }
  v49 = *(char **)a1;
  v50 = v69;
  v51 = v70;
  *(_QWORD *)&v69 = *(_QWORD *)a1;
  *((_QWORD *)&v69 + 1) = v17;
  v52 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v51;
  v70 = v52;
  if (v17 != (char *)v52)
    *(_QWORD *)&v70 = v52 + (-(v52 + v48) & 0xFFFFFFFFFFFFFFF8);
  if (v49)
    operator delete(v49);
}

void sub_240BA5444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_240BA54B4(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = &off_25110C950;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 1065353216;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 1065353216;
  *a1 = v2;
  return a1;
}

void sub_240BA5518(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *__p;
  void *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  sub_240BA560C((uint64_t)&v6, a2, a3);
  sub_240BA6AA8(v3 + 8, &v6, (uint64_t)&v6);
  v4 = v16;
  if (v16 == v15)
  {
    v5 = 4;
    v4 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
}

void sub_240BA55F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_240BA5694(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA560C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  sub_240B94C60(a1, a2);
  v5 = *(_QWORD *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(_QWORD *)(a1 + 128) = a1 + 104;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
      return a1;
    }
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  *(_QWORD *)(a1 + 128) = v5;
  return a1;
}

void sub_240BA5670(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v3;

  v3 = (void *)v1[10];
  if (v3)
  {
    v1[11] = v3;
    operator delete(v3);
  }
  sub_240BBA738(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_240BA5694(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = a1 + 13;
  v3 = (_QWORD *)a1[16];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_240BA5724(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  unint64_t v48;
  char *v49;
  int v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  int v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  char *v96;
  unint64_t v97;
  char *v98;
  int v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  _OWORD *v110;
  char *v111;
  uint64_t v112;
  __int128 v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  void **v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  void *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  void *v133;
  std::ios_base *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  size_t v144;
  void **v145;
  _BYTE *v146;
  const void **v147;
  const void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  void *v162[2];
  void *v163[2];
  __int128 v164;
  void *v165[2];
  void *v166[2];
  __int128 v167;
  void *__dst[2];
  unint64_t v169;
  void **v170;
  uint64_t v171;
  void *v172[2];
  void **v173;
  void *__p;
  _BYTE *v175;
  uint64_t v176;
  _QWORD v177[2];
  __int128 v178;
  __int128 v179;
  int v180;
  uint64_t v181[19];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  _QWORD v185[3];
  _QWORD *v186;
  uint64_t v187;

  v187 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 16 * a4);
  v186 = 0;
  v183 = 0u;
  v184 = 0u;
  v182 = 0u;
  v8 = *(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16);
  if (v8)
  {
    sub_240B749A4((void **)&v183 + 1, v8 >> 4);
    v9 = *((_QWORD *)&v182 + 1);
    v8 = v182;
  }
  else
  {
    v9 = 0;
  }
  v10 = (uint64_t)(*(_QWORD *)(v7 + 48) - *(_QWORD *)(v7 + 40)) >> 4;
  v11 = (v9 - v8) >> 3;
  if (v10 <= v11)
  {
    if (v10 < v11)
      *((_QWORD *)&v182 + 1) = v8 + 8 * v10;
  }
  else
  {
    sub_240B749A4((void **)&v182, v10 - v11);
  }
  v152 = a3;
  v12 = *(char **)(v7 + 16);
  v13 = *(char **)(v7 + 24);
  v151 = a2;
  if (v13 == v12)
  {
    v12 = *(char **)(v7 + 24);
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      *(_QWORD *)(*((_QWORD *)&v183 + 1) + 8 * v15++) = *(_QWORD *)&v12[v14];
      v12 = *(char **)(v7 + 16);
      v13 = *(char **)(v7 + 24);
      v14 += 16;
    }
    while (v15 < (v13 - v12) >> 4);
  }
  v16 = *(char **)(v7 + 40);
  v17 = *(char **)(v7 + 48);
  v153 = a1;
  if (v17 == v16)
  {
    v16 = *(char **)(v7 + 48);
  }
  else
  {
    v18 = 0;
    v19 = 0;
    do
    {
      *(_QWORD *)(v182 + 8 * v19++) = *(_QWORD *)&v16[v18];
      v16 = *(char **)(v7 + 40);
      v17 = *(char **)(v7 + 48);
      v18 += 16;
    }
    while (v19 < (v17 - v16) >> 4);
    v12 = *(char **)(v7 + 16);
    v13 = *(char **)(v7 + 24);
  }
  v167 = 0u;
  *(_OWORD *)v166 = 0u;
  *(_OWORD *)v165 = 0u;
  v164 = 0u;
  *(_OWORD *)v163 = 0u;
  *(_OWORD *)v162 = 0u;
  v154 = v7;
  LODWORD(v161) = *(_DWORD *)(v7 + 8);
  if (v12 != v13)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v157 = v13;
    while (1)
    {
      v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v12 + 16))(*(_QWORD *)v12);
      v29 = v28;
      if (v25 < v24)
      {
        v159 = v24;
        *(_DWORD *)v25 = v28;
        v25 += 4;
        goto LABEL_41;
      }
      v30 = (v25 - v23) >> 2;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62)
        sub_240B70258();
      if ((v24 - v23) >> 1 > v31)
        v31 = (v24 - v23) >> 1;
      if ((unint64_t)(v24 - v23) >= 0x7FFFFFFFFFFFFFFCLL)
        v32 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      v155 = v21;
      if (v32)
      {
        if (v32 >> 62)
          sub_240B7007C();
        v33 = v32;
        v34 = operator new(4 * v32);
        v32 = v33;
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[4 * v30];
      *(_DWORD *)v35 = v29;
      v36 = v35 + 4;
      if (v25 != v23)
      {
        v37 = v25 - v23 - 4;
        if (v37 >= 0xBC)
        {
          v52 = (v25 - 4 - v23) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v34[v25 - v23 - 4 - v52] > &v34[v25 - v23 - 4])
          {
            v38 = v25;
          }
          else if (&v25[-v52 - 4] > v25 - 4)
          {
            v38 = v25;
          }
          else if ((unint64_t)(v23 - v34) >= 0x20)
          {
            v60 = (v37 >> 2) + 1;
            v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
            v38 = &v25[-v61];
            v35 -= v61;
            v62 = &v34[4 * v30 - 16];
            v63 = v25 - 16;
            v64 = v60 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *v62 = v65;
              v62 -= 2;
              v63 -= 32;
              v64 -= 8;
            }
            while (v64);
            if (v60 == (v60 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_38;
          }
          else
          {
            v38 = v25;
          }
        }
        else
        {
          v38 = v25;
        }
        do
        {
          v39 = *((_DWORD *)v38 - 1);
          v38 -= 4;
          *((_DWORD *)v35 - 1) = v39;
          v35 -= 4;
        }
        while (v38 != v23);
      }
LABEL_38:
      v162[0] = v35;
      v159 = &v34[4 * v32];
      v163[0] = v159;
      if (v23)
        operator delete(v23);
      v23 = v35;
      v25 = v36;
      v21 = v155;
LABEL_41:
      v162[1] = v25;
      v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v12 + 80))(*(_QWORD *)v12);
      v41 = v40;
      if (v22 >= v21)
      {
        v42 = (v22 - v20) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          sub_240B70258();
        if ((v21 - v20) >> 1 > v43)
          v43 = (v21 - v20) >> 1;
        if ((unint64_t)(v21 - v20) >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 62)
            sub_240B7007C();
          v45 = v44;
          v46 = operator new(4 * v44);
          v44 = v45;
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[4 * v42];
        *v47 = v41;
        v26 = v47 + 1;
        if (v22 == v20)
        {
          v27 = v157;
        }
        else
        {
          v48 = v22 - v20 - 4;
          if (v48 < 0xBC
            || (v53 = (v22 - 4 - v20) & 0xFFFFFFFFFFFFFFFCLL, &v46[v22 - v20 - 4 - v53] > &v46[v22 - v20 - 4])
            || &v22[-v53 - 4] > v22 - 4
            || (unint64_t)(v20 - v46) < 0x20)
          {
            v49 = v22;
            v27 = v157;
          }
          else
          {
            v54 = (v48 >> 2) + 1;
            v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
            v49 = &v22[-v55];
            v47 = (_DWORD *)((char *)v47 - v55);
            v56 = &v46[4 * v42 - 16];
            v57 = v22 - 16;
            v58 = v54 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v59 = *(_OWORD *)v57;
              *(v56 - 1) = *((_OWORD *)v57 - 1);
              *v56 = v59;
              v56 -= 2;
              v57 -= 32;
              v58 -= 8;
            }
            while (v58);
            v27 = v157;
            if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_58;
          }
          do
          {
            v50 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *--v47 = v50;
          }
          while (v49 != v20);
        }
LABEL_58:
        v165[0] = v47;
        v51 = &v46[4 * v44];
        v166[0] = v51;
        if (v20)
          operator delete(v20);
        v20 = (char *)v47;
        v21 = v51;
        goto LABEL_21;
      }
      *(_DWORD *)v22 = v40;
      v26 = v22 + 4;
      v27 = v157;
LABEL_21:
      v165[1] = v26;
      v12 += 16;
      v22 = (char *)v26;
      v24 = v159;
      if (v12 == v27)
      {
        v16 = *(char **)(v154 + 40);
        v17 = *(char **)(v154 + 48);
        break;
      }
    }
  }
  if (v16 != v17)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v160 = v17;
    do
    {
      v74 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v16 + 16))(*(_QWORD *)v16);
      v75 = v74;
      if (v71 < v70)
      {
        *(_DWORD *)v71 = v74;
        v71 += 4;
        goto LABEL_102;
      }
      v76 = v70;
      v77 = (v71 - v69) >> 2;
      v78 = v77 + 1;
      if ((unint64_t)(v77 + 1) >> 62)
        sub_240B70258();
      v79 = v76 - v69;
      v80 = (v76 - v69) >> 1;
      if (v80 > v78)
        v78 = v80;
      if (v79 >= 0x7FFFFFFFFFFFFFFCLL)
        v81 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v81 = v78;
      v158 = v67;
      if (v81)
      {
        if (v81 >> 62)
          sub_240B7007C();
        v82 = v81;
        v83 = operator new(4 * v81);
        v81 = v82;
      }
      else
      {
        v83 = 0;
      }
      v84 = &v83[4 * v77];
      *(_DWORD *)v84 = v75;
      v85 = v84 + 4;
      if (v71 != v69)
      {
        v86 = v71 - v69 - 4;
        if (v86 >= 0xBC)
        {
          v100 = (v71 - 4 - v69) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v83[v71 - v69 - 4 - v100] > &v83[v71 - v69 - 4])
          {
            v87 = v71;
          }
          else if (&v71[-v100 - 4] > v71 - 4)
          {
            v87 = v71;
          }
          else if ((unint64_t)(v69 - v83) >= 0x20)
          {
            v102 = (v86 >> 2) + 1;
            v103 = 4 * (v102 & 0x7FFFFFFFFFFFFFF8);
            v87 = &v71[-v103];
            v84 -= v103;
            v104 = &v83[4 * v77 - 16];
            v105 = v71 - 16;
            v106 = v102 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v107 = *(_OWORD *)v105;
              *(v104 - 1) = *((_OWORD *)v105 - 1);
              *v104 = v107;
              v104 -= 2;
              v105 -= 32;
              v106 -= 8;
            }
            while (v106);
            if (v102 == (v102 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_99;
          }
          else
          {
            v87 = v71;
          }
        }
        else
        {
          v87 = v71;
        }
        do
        {
          v88 = *((_DWORD *)v87 - 1);
          v87 -= 4;
          *((_DWORD *)v84 - 1) = v88;
          v84 -= 4;
        }
        while (v87 != v69);
      }
LABEL_99:
      v70 = &v83[4 * v81];
      v163[1] = v84;
      *((_QWORD *)&v164 + 1) = v70;
      if (v69)
        operator delete(v69);
      v69 = v84;
      v71 = v85;
      v67 = v158;
LABEL_102:
      *(_QWORD *)&v164 = v71;
      v89 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v16 + 80))(*(_QWORD *)v16);
      v90 = v89;
      if (v68 >= v67)
      {
        v91 = (v68 - v66) >> 2;
        v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 62)
          sub_240B70258();
        if ((v67 - v66) >> 1 > v92)
          v92 = (v67 - v66) >> 1;
        if ((unint64_t)(v67 - v66) >= 0x7FFFFFFFFFFFFFFCLL)
          v93 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        v156 = v70;
        if (v93)
        {
          if (v93 >> 62)
            sub_240B7007C();
          v94 = v93;
          v95 = operator new(4 * v93);
          v93 = v94;
        }
        else
        {
          v95 = 0;
        }
        v96 = &v95[4 * v91];
        *(_DWORD *)v96 = v90;
        v72 = v96 + 4;
        if (v68 == v66)
        {
          v73 = v160;
        }
        else
        {
          v97 = v68 - v66 - 4;
          v73 = v160;
          if (v97 < 0xBC)
          {
            v98 = v68;
            goto LABEL_116;
          }
          v101 = (v68 - 4 - v66) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v95[v68 - v66 - 4 - v101] > &v95[v68 - v66 - 4])
          {
            v98 = v68;
            goto LABEL_116;
          }
          if (&v68[-v101 - 4] > v68 - 4)
          {
            v98 = v68;
            goto LABEL_116;
          }
          if ((unint64_t)(v66 - v95) < 0x20)
          {
            v98 = v68;
            goto LABEL_116;
          }
          v108 = (v97 >> 2) + 1;
          v109 = 4 * (v108 & 0x7FFFFFFFFFFFFFF8);
          v98 = &v68[-v109];
          v96 -= v109;
          v110 = &v95[4 * v91 - 16];
          v111 = v68 - 16;
          v112 = v108 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v113 = *(_OWORD *)v111;
            *(v110 - 1) = *((_OWORD *)v111 - 1);
            *v110 = v113;
            v110 -= 2;
            v111 -= 32;
            v112 -= 8;
          }
          while (v112);
          if (v108 != (v108 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_116:
              v99 = *((_DWORD *)v98 - 1);
              v98 -= 4;
              *((_DWORD *)v96 - 1) = v99;
              v96 -= 4;
            }
            while (v98 != v66);
          }
        }
        v67 = &v95[4 * v93];
        v166[1] = v96;
        *((_QWORD *)&v167 + 1) = v67;
        if (v66)
          operator delete(v66);
        v66 = v96;
        v70 = v156;
        goto LABEL_82;
      }
      *(_DWORD *)v68 = v89;
      v72 = v68 + 4;
      v73 = v160;
LABEL_82:
      *(_QWORD *)&v167 = v72;
      v16 += 16;
      v68 = v72;
    }
    while (v16 != v73);
  }
  v114 = sub_240BA6FC4((_QWORD *)(*v153 + 8), &v161);
  if (v114
    || (v115 = *v153,
        v165[1] = v165[0],
        *(void **)&v167 = v166[1],
        v162[1] = v162[0],
        *(void **)&v164 = v163[1],
        (v114 = sub_240BA6FC4((_QWORD *)(v115 + 8), &v161)) != 0))
  {
    v116 = (uint64_t *)v114[18];
    if (v116)
    {
      if (v116 == v114 + 15)
      {
        v170 = __dst;
        (*(void (**)(uint64_t *, void **))(*v116 + 24))(v116, __dst);
        v117 = v170;
      }
      else
      {
        v117 = (void **)(*(uint64_t (**)(uint64_t))(*v116 + 16))(v114[18]);
        v170 = v117;
      }
      if (v117)
      {
        if (v117 == __dst)
        {
          v173 = (void **)&v171;
          (*((void (**)(void **, uint64_t *))__dst[0] + 3))(__dst, &v171);
LABEL_153:
          sub_240BA7128(&v171, v185);
          v118 = v173;
          if (v173 == (void **)&v171)
          {
            v120 = 4;
            v118 = (void **)&v171;
            v119 = v154;
          }
          else
          {
            v119 = v154;
            if (!v173)
              goto LABEL_158;
            v120 = 5;
          }
          (*((void (**)(void))*v118 + v120))();
LABEL_158:
          v121 = *v153;
          v171 = v119;
          sub_240BA6960(v172, (uint64_t)&v182);
          sub_240BA729C(v121 + 48, &v171, (uint64_t)&v171);
          v122 = (_QWORD *)*((_QWORD *)&v178 + 1);
          if (*((_QWORD **)&v178 + 1) == v177)
          {
            v123 = 4;
            v122 = v177;
          }
          else
          {
            if (!*((_QWORD *)&v178 + 1))
              goto LABEL_163;
            v123 = 5;
          }
          (*(void (**)(void))(*v122 + 8 * v123))();
LABEL_163:
          if (__p)
          {
            v175 = __p;
            operator delete(__p);
          }
          if (v172[0])
          {
            v172[1] = v172[0];
            operator delete(v172[0]);
          }
          v124 = v170;
          if (v170 == __dst)
          {
            v125 = 4;
            v124 = __dst;
          }
          else
          {
            if (!v170)
              goto LABEL_172;
            v125 = 5;
          }
          (*((void (**)(void))*v124 + v125))();
LABEL_172:
          v126 = v166[1];
          if (!v166[1])
            goto LABEL_174;
          goto LABEL_173;
        }
        v117 = (void **)(*((uint64_t (**)(void **))*v117 + 2))(v117);
      }
    }
    else
    {
      v117 = 0;
      v170 = 0;
    }
    v173 = v117;
    goto LABEL_153;
  }
  v129 = MEMORY[0x24BEDB870];
  v130 = MEMORY[0x24BEDB870] + 64;
  v131 = (uint64_t *)MEMORY[0x24BEDB800];
  v132 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v133 = *(void **)(MEMORY[0x24BEDB800] + 16);
  v181[0] = MEMORY[0x24BEDB870] + 64;
  v171 = v132;
  *(void **)((char *)&v172[-1] + *(_QWORD *)(v132 - 24)) = v133;
  v134 = (std::ios_base *)((char *)&v172[-1] + *(_QWORD *)(v171 - 24));
  std::ios_base::init(v134, v172);
  v134[1].__vftable = 0;
  v134[1].__fmtflags_ = -1;
  v171 = v129 + 24;
  v181[0] = v130;
  std::streambuf::basic_streambuf();
  v135 = MEMORY[0x24BEDB848];
  v172[0] = (void *)(MEMORY[0x24BEDB848] + 16);
  v178 = 0u;
  v179 = 0u;
  v180 = 16;
  v136 = *(char *)(v152 + 23);
  if (v136 >= 0)
    v137 = v152;
  else
    v137 = *(_QWORD *)v152;
  if (v136 >= 0)
    v138 = *(unsigned __int8 *)(v152 + 23);
  else
    v138 = *(_QWORD *)(v152 + 8);
  v139 = sub_240B8AA18(&v171, v137, v138);
  sub_240B8AA18(v139, (uint64_t)":", 1);
  v140 = (_QWORD *)std::ostream::operator<<();
  sub_240B8AA18(v140, (uint64_t)", of type ", 10);
  v141 = (_QWORD *)std::ostream::operator<<();
  v142 = sub_240B8AA18(v141, (uint64_t)", did not have a ", 17);
  sub_240B8AA18(v142, (uint64_t)"valid implementation.", 21);
  v143 = *(_QWORD **)(v151 + 32);
  if ((v180 & 0x10) != 0)
  {
    v146 = (_BYTE *)*((_QWORD *)&v179 + 1);
    if (*((_QWORD *)&v179 + 1) < v177[0])
    {
      *((_QWORD *)&v179 + 1) = v177[0];
      v146 = (_BYTE *)v177[0];
    }
    v147 = (const void **)&v176;
  }
  else
  {
    if ((v180 & 8) == 0)
    {
      v144 = 0;
      HIBYTE(v169) = 0;
      v145 = __dst;
      goto LABEL_212;
    }
    v147 = (const void **)&v173;
    v146 = v175;
  }
  v148 = *v147;
  v144 = v146 - (_BYTE *)*v147;
  if (v144 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v144 >= 0x17)
  {
    v149 = (v144 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v144 | 7) != 0x17)
      v149 = v144 | 7;
    v150 = v149 + 1;
    v145 = (void **)operator new(v149 + 1);
    __dst[1] = (void *)v144;
    v169 = v150 | 0x8000000000000000;
    __dst[0] = v145;
    goto LABEL_211;
  }
  HIBYTE(v169) = (_BYTE)v146 - *(_BYTE *)v147;
  v145 = __dst;
  if (v144)
LABEL_211:
    memmove(v145, v148, v144);
LABEL_212:
  *((_BYTE *)v145 + v144) = 0;
  sub_240BB7D38(v143, 0xFFFF, (uint64_t)__dst);
  if (SHIBYTE(v169) < 0)
    operator delete(__dst[0]);
  v171 = *v131;
  *(void **)((char *)&v172[-1] + *(_QWORD *)(v171 - 24)) = (void *)v131[3];
  v172[0] = (void *)(v135 + 16);
  if (SBYTE7(v179) < 0)
    operator delete((void *)v178);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v181);
  v126 = v166[1];
  if (v166[1])
  {
LABEL_173:
    *(_QWORD *)&v167 = v126;
    operator delete(v126);
  }
LABEL_174:
  if (v165[0])
  {
    v165[1] = v165[0];
    operator delete(v165[0]);
  }
  if (v163[1])
  {
    *(void **)&v164 = v163[1];
    operator delete(v163[1]);
  }
  if (v162[0])
  {
    v162[1] = v162[0];
    operator delete(v162[0]);
  }
  v127 = v186;
  if (v186 == v185)
  {
    v128 = 4;
    v127 = v185;
  }
  else
  {
    if (!v186)
      goto LABEL_185;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_185:
  if (*((_QWORD *)&v183 + 1))
  {
    *(_QWORD *)&v184 = *((_QWORD *)&v183 + 1);
    operator delete(*((void **)&v183 + 1));
  }
  if ((_QWORD)v182)
  {
    *((_QWORD *)&v182 + 1) = v182;
    operator delete((void *)v182);
  }
}

void sub_240BA6494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  uint64_t v39;

  if (a37 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a39);
  sub_240B94ABC(&a19);
  sub_240BA65EC(v39 - 192);
  _Unwind_Resume(a1);
}

_QWORD *sub_240BA657C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = a1 + 7;
  v3 = (_QWORD *)a1[10];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[1];
  if (v6)
  {
    a1[2] = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_240BA65EC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_240BA665C(int8x8_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 72) + 16 * a4);
  v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = (*a1)[7];
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v10 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v10 = v7 & (*(_QWORD *)&v8 - 1);
  }
  v11 = *(_QWORD **)(*(_QWORD *)&(*a1)[6] + 8 * v10);
  do
  {
    do
      v11 = (_QWORD *)*v11;
    while (v11[1] != v7);
  }
  while (v11[2] != v4);
  v14 = a2;
  v15 = a4;
  v12 = v11[12];
  if (!v12)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t *, unint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v11 + 3, &v15, &v14, v4 + 64, v11 + 6);
}

uint64_t sub_240BA674C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  sub_240BA6824(a1 + 48);
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_240BA68CC(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_240BA67B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  sub_240BA6824(a1 + 48);
  v2 = *(_QWORD **)(a1 + 24);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_240BA68CC(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    operator delete(v4);
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240BA6824(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v5 = (_QWORD *)*v2;
      v6 = (_QWORD *)v2[12];
      if (v6 == v2 + 9)
        break;
      if (v6)
      {
        v7 = 5;
LABEL_10:
        (*(void (**)(void))(*v6 + 8 * v7))();
      }
      v8 = (void *)v2[6];
      if (v8)
      {
        v2[7] = v8;
        operator delete(v8);
      }
      v9 = (void *)v2[3];
      if (v9)
      {
        v2[4] = v9;
        operator delete(v9);
      }
      operator delete(v2);
      v2 = v5;
      if (!v5)
        goto LABEL_2;
    }
    v6 = v2 + 9;
    v7 = 4;
    goto LABEL_10;
  }
LABEL_2:
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void sub_240BA68CC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = a1 + 13;
  v3 = (_QWORD *)a1[16];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)a1[10];
  if (v5)
  {
    a1[11] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[7];
  if (v6)
  {
    a1[8] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[4];
  if (v7)
  {
    a1[5] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[1];
  if (v8)
  {
    a1[2] = v8;
    operator delete(v8);
  }
}

_QWORD *sub_240BA6960(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      sub_240B70258();
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = *(_BYTE **)(a2 + 24);
  v9 = *(_BYTE **)(a2 + 32);
  v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0)
      sub_240B70258();
    v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  v14 = *(_QWORD *)(a2 + 72);
  if (v14)
  {
    if (v14 == a2 + 48)
    {
      a1[9] = a1 + 6;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 72) + 24))(*(_QWORD *)(a2 + 72));
      return a1;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  }
  a1[9] = v14;
  return a1;
}

void sub_240BA6A70(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_240BA6AA8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *result;
  unint64_t v14;
  char *v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  _DWORD *i;
  _QWORD *v21;
  uint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t prime;
  int8x8_t v29;
  unint64_t v30;
  uint8x8_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_240BA6ECC(a1 + 24, a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      result = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = result[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)result + 4) == *(_DWORD *)a2)
            {
              v16 = (char *)result[3];
              v15 = (char *)result[4];
              if (v15 - v16 == a2[2] - a2[1])
              {
                if (v16 == v15)
                {
LABEL_20:
                  v19 = (char *)result[6];
                  v18 = (char *)result[7];
                  if (v18 - v19 == a2[5] - a2[4])
                  {
                    if (v19 == v18)
                      return result;
                    for (i = (_DWORD *)a2[4]; *(_DWORD *)v19 == *i; ++i)
                    {
                      v19 += 4;
                      if (v19 == v18)
                        return result;
                    }
                  }
                }
                else
                {
                  v17 = (_DWORD *)a2[1];
                  while (*(_DWORD *)v16 == *v17)
                  {
                    v16 += 4;
                    ++v17;
                    if (v16 == v15)
                      goto LABEL_20;
                  }
                }
              }
            }
          }
          else
          {
            if (v11.u32[0] <= 1uLL)
            {
              v14 &= v10 - 1;
            }
            else if (v14 >= v10)
            {
              v14 %= v10;
            }
            if (v14 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  v21 = operator new(0x98uLL);
  v35 = v21;
  *v21 = 0;
  v21[1] = v9;
  sub_240B94C60((uint64_t)(v21 + 2), (int *)a3);
  v22 = *(_QWORD *)(a3 + 128);
  if (v22)
  {
    if (v22 == a3 + 104)
    {
      v21[18] = v21 + 15;
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
    }
    else
    {
      v21[18] = v22;
      *(_QWORD *)(a3 + 128) = 0;
    }
  }
  else
  {
    v21[18] = 0;
  }
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v10 || (float)(v24 * (float)v10) < v23)
  {
    v25 = 1;
    if (v10 >= 3)
      v25 = (v10 & (v10 - 1)) != 0;
    v26 = v25 | (2 * v10);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      prime = v27;
    else
      prime = v26;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v29)
      goto LABEL_46;
    if (prime < *(_QWORD *)&v29)
    {
      v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v29 < 3uLL || (v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        v30 = std::__next_prime(v30);
      }
      else
      {
        v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2)
          v30 = v32;
      }
      if (prime <= v30)
        prime = v30;
      if (prime < *(_QWORD *)&v29)
LABEL_46:
        sub_240B70E0C(a1, prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *v35 = *v33;
    *v33 = v35;
  }
  else
  {
    *v35 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v35;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v35)
    {
      v34 = *(_QWORD *)(*v35 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v34 >= v10)
          v34 %= v10;
      }
      else
      {
        v34 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v35;
    }
  }
  result = v35;
  ++*v7;
  return result;
}

void sub_240BA6E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240BA6E88((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA6E88(uint64_t a1)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_240BA68CC(v2 + 2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_240BA6ECC(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v2 = (unsigned int *)a2[1];
  v3 = a2[2] - (_QWORD)v2;
  if (v3)
  {
    v4 = v3 >> 2;
    if (v4 <= 1)
      v5 = 1;
    else
      v5 = v4;
    v6 = 1;
    do
    {
      v7 = *v2++;
      v6 = v7 ^ (2 * v6);
      --v5;
    }
    while (v5);
    v8 = 2 * v6;
  }
  else
  {
    v8 = 2;
  }
  v9 = (unsigned int *)a2[4];
  v10 = a2[5] - (_QWORD)v9;
  if (v10)
  {
    v11 = v10 >> 2;
    if (v11 <= 1)
      v12 = 1;
    else
      v12 = v11;
    v13 = 1;
    do
    {
      v14 = *v9++;
      v13 = v14 ^ (2 * v13);
      --v12;
    }
    while (v12);
    v15 = 4 * v13;
  }
  else
  {
    v15 = 4;
  }
  v16 = (unsigned int *)a2[7];
  v17 = a2[8] - (_QWORD)v16;
  if (v17)
  {
    v18 = v17 >> 2;
    if (v18 <= 1)
      v19 = 1;
    else
      v19 = v18;
    v20 = 1;
    do
    {
      v21 = *v16++;
      v20 = v21 ^ (2 * v20);
      --v19;
    }
    while (v19);
    v22 = 8 * v20;
  }
  else
  {
    v22 = 8;
  }
  v23 = (unsigned int *)a2[10];
  v24 = a2[11] - (_QWORD)v23;
  if (v24)
  {
    v25 = v24 >> 2;
    if (v25 <= 1)
      v26 = 1;
    else
      v26 = v25;
    v27 = 1;
    do
    {
      v28 = *v23++;
      v27 = v28 ^ (2 * v27);
      --v26;
    }
    while (v26);
    v29 = 32 * v27;
  }
  else
  {
    v29 = 32;
  }
  return v8 ^ *(int *)a2 ^ v15 ^ v22 ^ v29;
}

uint64_t *sub_240BA6FC4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t *i;
  unint64_t v9;
  char *v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  char *v14;
  _DWORD *j;

  v4 = sub_240BA6ECC((uint64_t)(a1 + 3), a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (uint64_t *)*i; i; i = (uint64_t *)*i)
    {
      v9 = i[1];
      if (v9 == v4)
      {
        if (*((_DWORD *)i + 4) == *(_DWORD *)a2)
        {
          v11 = (char *)i[3];
          v10 = (char *)i[4];
          if (v10 - v11 == a2[2] - a2[1])
          {
            if (v11 == v10)
            {
LABEL_19:
              v14 = (char *)i[6];
              v13 = (char *)i[7];
              if (v13 - v14 == a2[5] - a2[4])
              {
                if (v14 == v13)
                  return i;
                for (j = (_DWORD *)a2[4]; *(_DWORD *)v14 == *j; ++j)
                {
                  v14 += 4;
                  if (v14 == v13)
                    return i;
                }
              }
            }
            else
            {
              v12 = (_DWORD *)a2[1];
              while (*(_DWORD *)v11 == *v12)
              {
                v11 += 4;
                ++v12;
                if (v11 == v10)
                  goto LABEL_19;
              }
            }
          }
        }
      }
      else
      {
        if (v6.u32[0] <= 1uLL)
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        else if (v9 >= *(_QWORD *)&v5)
        {
          v9 %= *(_QWORD *)&v5;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

_QWORD *sub_240BA7128(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_240BA7290(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_240B700A4(a1);
}

_QWORD *sub_240BA729C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  int8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;

  v6 = HIDWORD(*a2);
  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v12 = operator new(0x68uLL);
  *v12 = 0;
  v12[1] = v8;
  v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v12 + 2) = v15;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_OWORD *)v12 + 3) = *(_OWORD *)(a3 + 32);
  v12[8] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  v17 = (_QWORD *)(a3 + 80);
  v16 = *(_QWORD *)(a3 + 80);
  if (v16)
  {
    if (v16 == a3 + 56)
    {
      v12[12] = v12 + 9;
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
      goto LABEL_24;
    }
    v12[12] = v16;
  }
  else
  {
    v17 = v12 + 12;
  }
  *v17 = 0;
LABEL_24:
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v24)
      goto LABEL_36;
    if (prime < *(_QWORD *)&v24)
    {
      v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v24 < 3uLL || (v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (prime <= v25)
        prime = v25;
      if (prime < *(_QWORD *)&v24)
LABEL_36:
        sub_240B70E0C(a1, prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v29)
  {
    *v12 = *v29;
LABEL_61:
    *v29 = v12;
    goto LABEL_62;
  }
  *v12 = *v14;
  *v14 = v12;
  *(_QWORD *)(v28 + 8 * v3) = v14;
  if (*v12)
  {
    v30 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9)
        v30 %= v9;
    }
    else
    {
      v30 &= v9 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_240BA75F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240BA760C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA760C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (!*(_BYTE *)(a1 + 16))
    {
LABEL_12:
      operator delete(v2);
      return a1;
    }
    v3 = (_QWORD *)v2[12];
    if (v3 == v2 + 9)
    {
      v4 = 4;
      v3 = v2 + 9;
    }
    else
    {
      if (!v3)
      {
LABEL_8:
        v5 = (void *)v2[6];
        if (v5)
        {
          v2[7] = v5;
          operator delete(v5);
        }
        v6 = (void *)v2[3];
        if (v6)
        {
          v2[4] = v6;
          operator delete(v6);
        }
        goto LABEL_12;
      }
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_240BA7698(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = off_25110C930;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    sub_240B6FF68((_BYTE *)v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = a3;
  return a1;
}

void sub_240BA7718(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

void sub_240BA774C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;

  if (*(_BYTE *)(a1 + 88))
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (*(_QWORD *)(a1 + 16) - v2) >> 3;
    v4 = a2 >= v3;
    v5 = a2 - v3;
    if (v5 != 0 && v4)
    {
      sub_240B749A4((void **)(a1 + 8), v5);
    }
    else if (!v4)
    {
      *(_QWORD *)(a1 + 16) = v2 + 8 * a2;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = (*(_QWORD *)(a1 + 40) - v6) >> 3;
    v8 = a2 >= v7;
    v9 = a2 - v7;
    if (v9 != 0 && v8)
    {
      sub_240B749A4((void **)(a1 + 32), v9);
    }
    else if (!v8)
    {
      *(_QWORD *)(a1 + 40) = v6 + 8 * a2;
    }
  }
}

uint64_t sub_240BA77BC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_240BA77C4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 89) = a2;
  return result;
}

uint64_t sub_240BA77CC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  _OWORD *v27;
  char *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_OWORD *);
  uint64_t v44;

  v43 = *(uint64_t (**)(_OWORD *))(a1 + 80);
  v5 = a3[1] - *a3;
  v6 = v5 >> 3;
  if (v5)
  {
    v8 = 0;
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = v5 >> 3;
    do
    {
      v12 = *(_QWORD **)(*a3 + 8 * v8);
      if (*(_BYTE *)(a1 + 88))
      {
        v10 = sub_240BA8C48(v12);
        v11 = (_QWORD *)(a1 + 8);
      }
      else
      {
        v10 = (*(uint64_t (**)(_QWORD *))(*v12 + 176))(v12);
        v11 = (_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(*v11 + 8 * v8++) = v10;
    }
    while (v9 != v8);
  }
  v14 = *a2;
  v13 = a2[1];
  v15 = v13 - *a2;
  v44 = 0;
  if (*(_BYTE *)(a1 + 89) && *(_BYTE *)(a1 + 88))
    v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 - 8) + 168))(*(_QWORD *)(v13 - 8));
  v16 = v15 >> 3;
  if (v13 != v14)
  {
    v17 = 0;
    if (v16 <= 1)
      v18 = 1;
    else
      v18 = v16;
    do
    {
      v21 = *(_QWORD **)(*a2 + 8 * v17);
      if (*(_BYTE *)(a1 + 88))
      {
        v19 = sub_240BA8C48(v21);
        v20 = (_QWORD *)(a1 + 8);
      }
      else
      {
        v19 = (*(uint64_t (**)(_QWORD *))(*v21 + 168))(v21);
        v20 = (_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(*v20 + 8 * v6 + 8 * v17++) = v19;
    }
    while (v18 != v17);
  }
  v22 = *(unsigned __int8 *)(a1 + 89);
  if (*(_BYTE *)(a1 + 89))
    v23 = -1;
  else
    v23 = 0;
  if (!*(_BYTE *)(a1 + 88))
    return v43(*(_OWORD **)(a1 + 32));
  v25 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(a1 + 16);
  v26 = v24 - v25;
  if (v24 == v25)
  {
    v28 = 0;
    v27 = 0;
  }
  else
  {
    if ((v26 & 0x8000000000000000) != 0)
      sub_240B70258();
    v27 = operator new(v24 - v25);
    bzero(v27, v26);
    v28 = (char *)v27 + v26;
  }
  v30 = v16 + v6 + v23;
  if (v30)
  {
    v31 = 0;
    v32 = *(_QWORD *)(a1 + 8);
    if (v30 < 4)
      goto LABEL_35;
    if ((unint64_t)v27 - v32 < 0x20)
      goto LABEL_35;
    v31 = v30 & 0xFFFFFFFFFFFFFFFCLL;
    v33 = (__int128 *)(v32 + 16);
    v34 = v27 + 1;
    v35 = v30 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 4;
    }
    while (v35);
    if (v30 != v31)
    {
LABEL_35:
      v37 = v16 + v6 + v23 - v31;
      v38 = 8 * v31;
      v39 = (uint64_t *)(v32 + v38);
      v40 = (_QWORD *)((char *)v27 + v38);
      do
      {
        v41 = *v39++;
        *v40++ = v41;
        --v37;
      }
      while (v37);
    }
  }
  if (v22)
    *((_QWORD *)v28 - 1) = &v44;
  v42 = v43(v27);
  if (v27)
    operator delete(v27);
  return v42;
}

void sub_240BA7A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA7A80(uint64_t result, uint64_t a2)
{
  if (!*(_QWORD *)(result + 80))
    *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t *sub_240BA7A94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  _BYTE v6[2];

  result = sub_240B74E08(a1, a2);
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 24) = -1;
  v5 = *((unsigned int *)result + 16);
  if ((_DWORD)v5 != -1)
  {
    result = (uint64_t *)((uint64_t (*)(_BYTE *, uint64_t, uint64_t *))off_25110C988[v5])(v6, a3, result + 5);
    *(_DWORD *)(a3 + 24) = v5;
  }
  return result;
}

void sub_240BA7AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v13 + 24);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_25110C960[v15])(&a13, v13);
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA7B30(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  const char *v3;

  if (*(char *)(a3 + 23) >= 0)
    v3 = (const char *)a3;
  else
    v3 = *(const char **)a3;
  return fprintf((FILE *)*MEMORY[0x24BDAC8D8], "error %d-%d:%d-%d: %s\n", a2[2], a2[6], a2[3], a2[7], v3);
}

uint64_t sub_240BA7B84(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_240BA7BB4(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;

  sub_240BB9E98(a1);
  *v6 = off_25110C9C0;
  v7 = operator new();
  *(_QWORD *)v7 = off_25110CAB8;
  *(_QWORD *)(v7 + 8) = a3;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 128) = 0u;
  *(_OWORD *)(v7 + 144) = 0u;
  *(_OWORD *)(v7 + 160) = 0u;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_OWORD *)(v7 + 224) = 0u;
  *(_QWORD *)(v7 + 240) = 0;
  *(_QWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 160) = a2 == 9;
  return a1;
}

void sub_240BA7C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_240BB9ED0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA7C68(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;

  *a1 = off_25110C9C0;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = a1[13];
  a1[13] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_240BB9ED0((uint64_t)a1);
}

void sub_240BA7CE4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  *a1 = off_25110C9C0;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  v5 = a1[13];
  a1[13] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (void *)sub_240BB9ED0((uint64_t)a1);
  j__free(v6);
}

double sub_240BA7D64(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  int v14;
  double result;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (sub_240BBA100(a2) == 1)
  {
    v4 = 0x10000;
  }
  else
  {
    v4 = 131073;
    if (sub_240BBA100(a2) != 2)
    {
      if (sub_240BBA100(a2) == 3)
      {
        v4 = 196608;
      }
      else if (sub_240BBA100(a2) == 4)
      {
        v4 = 0x40000;
      }
      else
      {
        v4 = 360448;
        if (sub_240BBA100(a2) != 5)
        {
          if (sub_240BBA100(a2) == 6)
          {
            v4 = 425984;
          }
          else if (sub_240BBA100(a2) == 7)
          {
            v4 = 491520;
          }
          else if (sub_240BBA100(a2) == 8)
          {
            v4 = 557056;
          }
          else
          {
            v4 = 0x10000;
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 60) = v4;
  memset_pattern16((void *)(a1 + 64), &unk_240BBBE30, 0x40uLL);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v5 = sub_240BBA100(a2);
  if (sub_240BBA100(a2))
  {
    v6 = a1 + 8 * v5;
    *(_QWORD *)(v6 + 56) = **(_QWORD **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    if ((unint64_t)sub_240BBA100(a2) >= 2)
    {
      *(_QWORD *)(v6 + 48) = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) + 8);
      if ((unint64_t)sub_240BBA100(a2) >= 3)
      {
        v7 = a1 + 8 * v5;
        *(_QWORD *)(v7 + 40) = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
                                         + 16);
        if ((unint64_t)sub_240BBA100(a2) >= 4)
        {
          *(_QWORD *)(v7 + 32) = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
                                           + 24);
          if ((unint64_t)sub_240BBA100(a2) >= 5)
          {
            v8 = a1 + 8 * v5;
            *(_QWORD *)(v8 + 24) = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
                                             + 32);
            if ((unint64_t)sub_240BBA100(a2) >= 6)
            {
              *(_QWORD *)(v8 + 16) = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
                                               + 40);
              if ((unint64_t)sub_240BBA100(a2) >= 7)
              {
                *(_QWORD *)(a1 + 8 * v5 + 8) = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
                                                         + 48);
                if ((unint64_t)sub_240BBA100(a2) >= 8)
                {
                  *(_QWORD *)(a1 + 8 * v5) = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2)
                                                       + 56);
                  sub_240BBA100(a2);
                }
              }
            }
          }
        }
      }
    }
  }
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
  if (v9[1] != *v9)
  {
    v10 = 0;
    v11 = (_QWORD *)(a1 + 8 * v5 + 120);
    do
    {
      *v11-- = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2) + 8 * v10);
      v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      if (v10 > 6)
        break;
      ++v10;
    }
    while (v10 < (uint64_t)(v12[1] - *v12) >> 3);
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a1 + 16);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) - 1;
  if (v13 > 0xB)
    v14 = 131080;
  else
    v14 = dword_240BBBDD4[v13];
  *(_DWORD *)(a1 + 200) = v14;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_QWORD *)(a1 + 220) = 1065353216;
  return result;
}

double sub_240BA80D0(uint64_t a1)
{
  return sub_240BA7D64(*(_QWORD *)(a1 + 104), a1);
}

void sub_240BA80DC(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  void *__p;
  char *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void **p_p;

  v2 = a1[13];
  v3 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  if (v3 > 0xA)
    v4 = 73730;
  else
    v4 = dword_240BBBE04[v3];
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 168))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v8 = *(const void **)v6;
  v7 = *(_QWORD *)(v6 + 8);
  v9 = v7 - *(_QWORD *)v6;
  if (v7 == *(_QWORD *)v6)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_240B70258();
    v10 = (char *)operator new(v7 - *(_QWORD *)v6);
    v11 = &v10[8 * (v9 >> 3)];
    memcpy(v10, v8, v9);
  }
  v12 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v14 = *(const void **)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v15 = v13 - *(_QWORD *)v12;
  if (v13 == *(_QWORD *)v12)
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    if (v15 < 0)
      sub_240B70258();
    v16 = (char *)operator new(v13 - *(_QWORD *)v12);
    v17 = &v16[8 * (v15 >> 3)];
    v45 = v16;
    v47 = v17;
    memcpy(v16, v14, v15);
    v46 = v17;
  }
  v42 = 0;
  v43 = 0;
  v44 = 0;
  __p = 0;
  v40 = 0;
  v41 = 0;
  p_p = &v42;
  if (v11 != v10)
  {
    v18 = v11;
    do
    {
      v19 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      v51 = v19;
      sub_240BA8DB8((uint64_t *)&p_p, &v51);
    }
    while (v18 != v10);
  }
  p_p = &__p;
  while (v17 != v16)
  {
    v20 = *((_QWORD *)v17 - 1);
    v17 -= 8;
    v51 = v20;
    sub_240BA8DB8((uint64_t *)&p_p, &v51);
  }
  v21 = v11 - v10;
  if (v21)
  {
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF9)
      sub_240B70258();
    v22 = (char *)operator new(2 * v21);
    v23 = v21 >> 3;
    bzero(v22, 2 * v21);
    v24 = 0;
    v21 = (uint64_t)&v22[2 * v21];
    v25 = (char *)__p;
    v26 = (char *)v42;
    if (v23 <= 1)
      v27 = 1;
    else
      v27 = v23;
    do
    {
      v28 = &v22[4 * v24];
      *(_DWORD *)v28 = 0;
      *((_DWORD *)v28 + 1) = *(_DWORD *)&v26[v24];
      *((_DWORD *)v28 + 2) = *(_DWORD *)&v25[v24];
      v24 += 4;
      --v27;
    }
    while (v27);
  }
  else
  {
    v22 = 0;
    v29 = 0;
    v30 = 0;
    v25 = (char *)__p;
    if (!__p)
      goto LABEL_27;
  }
  v40 = v25;
  operator delete(v25);
  v29 = (__int128 *)v22;
  v30 = v21;
LABEL_27:
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v16)
    operator delete(v16);
  if (v10)
    operator delete(v10);
  v31 = operator new();
  v32 = (unint64_t)(v30 - (_QWORD)v29) >> 4;
  *(_DWORD *)(v31 + 32) = v4;
  *(_DWORD *)(v31 + 36) = v32;
  *(_QWORD *)(v31 + 16) = v5;
  v33 = (_OWORD *)operator new[]();
  *(_QWORD *)(v31 + 40) = v33;
  if ((int)v32 >= 1)
  {
    v34 = ((unint64_t)(v30 - (_QWORD)v29) >> 4);
    v35 = v29;
    do
    {
      v36 = *v35++;
      *v33++ = v36;
      --v34;
    }
    while (v34);
  }
  v37 = *(_QWORD *)(v2 + 240);
  *(_QWORD *)(v2 + 240) = v31;
  if (v37)
  {
    v38 = *(_QWORD *)(v37 + 40);
    if (v38)
      MEMORY[0x24268ACE0](v38, 0x1000C80451B5BE8);
    MEMORY[0x24268ACF8](v37, 0x10A0C40A8DA58FELL);
  }
  if (v29)
    operator delete(v29);
}

void sub_240BA8440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  void *v23;

  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_240BA8504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _BYTE *v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  void *__p;
  _QWORD *v59;
  char *v60;
  void *v61;
  _QWORD *v62;
  char *v63;

  v2 = a1;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  __p = 0;
  v59 = 0;
  v60 = 0;
  v55 = *(int *)(a2 + 36);
  if ((int)v55 >= 1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = v62;
    v11 = v59;
    v54 = a2;
    while (1)
    {
      v12 = *(_QWORD *)(a2 + 40) + 16 * (~v5 + v55);
      v14 = *(int *)(v12 + 4);
      v13 = *(int *)(v12 + 8);
      v57 = (unint64_t)v6;
      if (v4 < v7)
      {
        *(_QWORD *)v4 = v14;
        v10 = v4 + 8;
        if (v3 >= v6)
          goto LABEL_25;
        goto LABEL_3;
      }
      v53 = v11;
      v15 = (v4 - v8) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
      {
        v62 = v10;
        v63 = v7;
        v60 = v6;
        v61 = v8;
        __p = v9;
        v59 = v53;
        sub_240B70258();
      }
      if ((v7 - v8) >> 2 > v16)
        v16 = (v7 - v8) >> 2;
      v17 = (unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
      if (v17)
      {
        if (v17 >> 61)
        {
          v60 = v6;
          v61 = v8;
          v62 = v10;
          v63 = v7;
          __p = v9;
          v59 = v53;
          sub_240B7007C();
        }
        v18 = v13;
        v19 = v17;
        v20 = operator new(8 * v17);
        v13 = v18;
        v17 = v19;
      }
      else
      {
        v20 = 0;
      }
      v21 = &v20[8 * v15];
      *v21 = v14;
      v22 = v21 + 1;
      if (v4 != v8)
        break;
      v11 = v53;
      v7 = &v20[8 * v17];
      if (v8)
        goto LABEL_23;
LABEL_24:
      v8 = (char *)v21;
      v10 = v22;
      a2 = v54;
      v6 = (char *)v57;
      if ((unint64_t)v3 >= v57)
      {
LABEL_25:
        v28 = (v3 - v9) >> 3;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
        {
          v62 = v10;
          v63 = v7;
          v60 = v6;
          v61 = v8;
          __p = v9;
          v59 = v11;
          sub_240B70258();
        }
        if ((v6 - v9) >> 2 > v29)
          v29 = (v6 - v9) >> 2;
        if ((unint64_t)(v6 - v9) >= 0x7FFFFFFFFFFFFFF8)
          v30 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v30 = v29;
        v56 = v7;
        v31 = v10;
        if (v30)
        {
          if (v30 >> 61)
          {
            v62 = v10;
            v63 = v7;
            v60 = (char *)v57;
            v61 = v8;
            __p = v9;
            v59 = v11;
            sub_240B7007C();
          }
          v32 = v13;
          v33 = operator new(8 * v30);
          v13 = v32;
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[8 * v28];
        *v34 = v13;
        v11 = v34 + 1;
        if (v3 != v9)
        {
          v35 = v3 - v9 - 8;
          if (v35 < 0x168)
          {
            v36 = v3;
            goto LABEL_38;
          }
          v45 = (v3 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
          if (&v33[v3 - v9 - 8 - v45] > &v33[v3 - v9 - 8])
          {
            v36 = v3;
            goto LABEL_38;
          }
          if (&v3[-v45 - 8] > v3 - 8)
          {
            v36 = v3;
            goto LABEL_38;
          }
          if ((unint64_t)(v9 - v33) < 0x20)
          {
            v36 = v3;
            goto LABEL_38;
          }
          v46 = (v35 >> 3) + 1;
          v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          v36 = &v3[-v47];
          v34 = (_QWORD *)((char *)v34 - v47);
          v48 = &v33[8 * v28 - 16];
          v49 = v3 - 16;
          v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v51 = *(_OWORD *)v49;
            *(v48 - 1) = *((_OWORD *)v49 - 1);
            *v48 = v51;
            v48 -= 2;
            v49 -= 32;
            v50 -= 4;
          }
          while (v50);
          if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_38:
              v37 = *((_QWORD *)v36 - 1);
              v36 -= 8;
              *--v34 = v37;
            }
            while (v36 != v9);
          }
        }
        v6 = &v33[8 * v30];
        if (v9)
          operator delete(v9);
        v9 = (char *)v34;
        v10 = v31;
        a2 = v54;
        v7 = v56;
        goto LABEL_4;
      }
LABEL_3:
      *(_QWORD *)v3 = v13;
      v11 = v3 + 8;
LABEL_4:
      ++v5;
      v3 = (char *)v11;
      v4 = (char *)v10;
      if (v5 >= *(int *)(a2 + 36))
      {
        v62 = v10;
        v63 = v7;
        v59 = v11;
        v60 = v6;
        v2 = a1;
        goto LABEL_63;
      }
    }
    v23 = v4 - v8 - 8;
    if (v23 < 0x168
      || (v38 = (v4 - 8 - v8) & 0xFFFFFFFFFFFFFFF8, &v20[v4 - v8 - 8 - v38] > &v20[v4 - v8 - 8])
      || &v4[-v38 - 8] > v4 - 8
      || (unint64_t)(v8 - v20) < 0x20)
    {
      v24 = v4;
      v11 = v53;
    }
    else
    {
      v39 = (v23 >> 3) + 1;
      v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      v24 = &v4[-v40];
      v21 = (_QWORD *)((char *)v21 - v40);
      v41 = &v20[8 * v15 - 16];
      v42 = v4 - 16;
      v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      v11 = v53;
      if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        v7 = &v20[8 * v17];
        if (!v8)
          goto LABEL_24;
LABEL_23:
        v26 = v7;
        v27 = v13;
        operator delete(v8);
        v13 = v27;
        v7 = v26;
        goto LABEL_24;
      }
    }
    do
    {
      v25 = *((_QWORD *)v24 - 1);
      v24 -= 8;
      *--v21 = v25;
    }
    while (v24 != v8);
    goto LABEL_22;
  }
  v9 = 0;
  v8 = 0;
LABEL_63:
  v61 = v8;
  __p = v9;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 56))(v2, &v61);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 64))(v2, &__p);
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
}

void sub_240BA89A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v23 = a20;
    if (!a20)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v23 = a20;
    if (!a20)
      goto LABEL_3;
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_240BA8A34(_QWORD *a1, char **a2)
{
  char *v2;
  int64_t v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *a2;
  v3 = a2[1] - *a2;
  if (v3)
  {
    v4 = v3 >> 3;
    v5 = (_QWORD *)a1[14];
    if (v4 <= 1)
      v4 = 1;
    do
    {
      if (!*v5)
        *v5 = *(_QWORD *)v2;
      ++v5;
      v2 += 8;
      --v4;
    }
    while (v4);
  }
  sub_240BBA138(a1, a2);
}

uint64_t sub_240BA8A7C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 112);
  if (!*(_QWORD *)(v3 + 8 * a2))
    *(_QWORD *)(v3 + 8 * a2) = a3;
  *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * a2) = a3;
  return result;
}

char **sub_240BA8A98(uint64_t a1, char **a2)
{
  char *v2;
  int64_t v3;
  unint64_t v4;
  _QWORD *v5;

  v2 = *a2;
  v3 = a2[1] - *a2;
  if (v3)
  {
    v4 = v3 >> 3;
    v5 = *(_QWORD **)(a1 + 136);
    if (v4 <= 1)
      v4 = 1;
    do
    {
      if (!*v5)
        *v5 = *(_QWORD *)v2;
      ++v5;
      v2 += 8;
      --v4;
    }
    while (v4);
  }
  return sub_240BBA1BC(a1, a2);
}

uint64_t sub_240BA8AE0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 136);
  if (!*(_QWORD *)(v3 + 8 * a2))
    *(_QWORD *)(v3 + 8 * a2) = a3;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * a2) = a3;
  return result;
}

char **sub_240BA8AFC(uint64_t a1, char **a2)
{
  char **result;

  result = (char **)(a1 + 112);
  if (result != a2)
    return (char **)sub_240BA8F28(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  return result;
}

uint64_t sub_240BA8B20(uint64_t a1)
{
  return a1 + 112;
}

char **sub_240BA8B28(uint64_t a1, char **a2)
{
  char **result;

  result = (char **)(a1 + 136);
  if (result != a2)
    return (char **)sub_240BA8F28(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  return result;
}

uint64_t sub_240BA8B4C(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_240BA8B54(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 16);
}

uint64_t sub_240BA8B60(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 16);
}

uint64_t sub_240BA8B6C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 16);
}

uint64_t sub_240BA8B78(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 16);
}

uint64_t sub_240BA8B84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 104) + 16) = a2;
  return result;
}

uint64_t sub_240BA8B90()
{
  return 0;
}

uint64_t sub_240BA8B98(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 104) + 24) = a2;
  return result;
}

uint64_t sub_240BA8BA4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 24);
}

void **sub_240BA8BB0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  v2 = *(_QWORD *)(a1 + 104);
  result = (void **)(v2 + 32);
  if ((_QWORD *)(v2 + 32) != a2)
  {
    if (*(char *)(v2 + 55) < 0)
    {
      v5 = a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (_QWORD *)*a2;
        v6 = v5;
      }
      return sub_240B734B8(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_240B733F4(result, (void *)*a2, a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      *(_QWORD *)(v2 + 48) = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

_QWORD *sub_240BA8C08@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = result[13];
  if (*(char *)(v2 + 55) < 0)
    return sub_240B6FF68((_BYTE *)a2, *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
  v3 = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 48);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t sub_240BA8C34(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104) + 56;
}

uint64_t sub_240BA8C40(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

uint64_t sub_240BA8C48(_QWORD *a1)
{
  uint64_t result;

  *(_QWORD *)(*(_QWORD *)(a1[13] + 240) + 16) = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  result = *(_QWORD *)(a1[13] + 240);
  *(_QWORD *)(result + 24) |= 1uLL;
  return result;
}

uint64_t sub_240BA8C90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 104) + 232) = a2;
  return result;
}

uint64_t sub_240BA8C9C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 232);
}

uint64_t sub_240BA8CA8()
{
  return 0;
}

uint64_t sub_240BA8CB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_25110CAB8;
  v2 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
      MEMORY[0x24268ACE0](v3, 0x1000C80451B5BE8);
    MEMORY[0x24268ACF8](v2, 0x10A0C40A8DA58FELL);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_240BA8D2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_25110CAB8;
  v2 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 40);
    if (v3)
      MEMORY[0x24268ACE0](v3, 0x1000C80451B5BE8);
    MEMORY[0x24268ACF8](v2, 0x10A0C40A8DA58FELL);
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x24268ACF8);
}

uint64_t *sub_240BA8DB8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(char **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(char **)v4;
    v10 = (uint64_t)&v6[-*(_QWORD *)v4];
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      sub_240B70258();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        sub_240B7007C();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    *v16 = *a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v17 = v6 - v9 - 4;
      if (v17 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)(v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v18 = (v17 >> 2) + 1;
      v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      v7 = &v6[-v19];
      v16 = (_DWORD *)((char *)v16 - v19);
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 16;
      v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = &v15[4 * v14];
    if (v9)
      operator delete(v9);
  }
  else
  {
    *(_DWORD *)v6 = *a2;
    v8 = v6 + 4;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

_QWORD *sub_240BA8F28(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_240B70258();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

uint64_t sub_240BA906C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v26;
  __int128 __dst;
  unint64_t v28;
  int v29;
  const char *v30;
  const char *v31;
  int v32;
  _BYTE v33[24];
  int v34;
  const char *v35;
  const char *v36;
  int v37;
  char v38[24];
  int v39;
  const char *v40;
  const char *v41;
  int v42;
  _BYTE v43[24];
  int v44;
  const char *v45;
  const char *v46;
  int v47;
  uint64_t v48;
  char v49;
  int v50;
  const char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 56;
  *(_QWORD *)a1 = off_25110CAD8;
  *(_QWORD *)&__dst = "--bnns";
  DWORD2(__dst) = 0;
  LOBYTE(v28) = 1;
  v29 = 0;
  v30 = "enable the use of BNNS";
  v31 = "--debug-constant";
  v32 = 0;
  v33[0] = 0;
  v34 = 0;
  v35 = "debugging for constant values";
  v36 = "--kcompile";
  v37 = 0;
  v38[0] = 1;
  v39 = 0;
  v40 = "enable LLVM compilation of kernels";
  v41 = "--load-constant-path";
  v42 = 2;
  memset(v43, 0, sizeof(v43));
  v44 = 2;
  v45 = "base path used for relative paths in load-constant ops";
  v46 = "--memory";
  v47 = 2;
  v48 = 0x636974617473;
  v49 = 6;
  v50 = 2;
  v51 = "method to allocate memory";
  sub_240BA9558((_QWORD *)(a1 + 72), (uint64_t)&__dst, 5uLL);
  if (v50 != -1)
    ((void (*)(__int128 **, uint64_t *))off_25110CAF8[v50])(&v26, &v48);
  v50 = -1;
  if (v44 != -1)
    ((void (*)(__int128 **, _BYTE *))off_25110CAF8[v44])(&v26, v43);
  v44 = -1;
  if (v39 != -1)
    ((void (*)(__int128 **, char *))off_25110CAF8[v39])(&v26, v38);
  v39 = -1;
  if (v34 != -1)
    ((void (*)(__int128 **, _BYTE *))off_25110CAF8[v34])(&v26, v33);
  v34 = -1;
  if (v29 != -1)
    ((void (*)(__int128 **, unint64_t *))off_25110CAF8[v29])(&v26, &v28);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if (v3 != v4)
  {
    v5 = v3 + 16;
    while (1)
    {
      v6 = v5 - 16;
      v7 = *(const char **)(v5 - 16);
      v8 = strlen(v7);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v9 = v8;
      if (v8 >= 0x17)
        break;
      HIBYTE(v28) = v8;
      p_dst = &__dst;
      if (v8)
        goto LABEL_21;
LABEL_22:
      *((_BYTE *)p_dst + v9) = 0;
      v26 = &__dst;
      v13 = sub_240BAA314(v2, (uint64_t)&__dst, (uint64_t)&unk_240BBBF40, &v26);
      v14 = v13;
      v15 = *((unsigned int *)v13 + 16);
      v16 = *(unsigned int *)(v5 + 24);
      if ((_DWORD)v15 == -1)
      {
        if ((_DWORD)v16 != -1)
        {
LABEL_26:
          v26 = (__int128 *)(v13 + 40);
          ((void (*)(__int128 **))off_25110CB28[v16])(&v26);
        }
      }
      else
      {
        if ((_DWORD)v16 != -1)
          goto LABEL_26;
        ((void (*)(__int128 **, unsigned __int8 *))off_25110CAF8[v15])(&v26, v13 + 40);
        *((_DWORD *)v14 + 16) = -1;
      }
      if (SHIBYTE(v28) < 0)
        operator delete((void *)__dst);
      v5 += 56;
      if (v6 + 56 == v4)
        goto LABEL_29;
    }
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v28 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_21:
    memmove(p_dst, v7, v9);
    goto LABEL_22;
  }
LABEL_29:
  v17 = getenv("__UNOWUD_RT");
  if (v17)
  {
    v18 = v17;
    v19 = strlen(v17);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      sub_240B6FFF4();
    v20 = v19;
    if (v19 >= 0x17)
    {
      v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v22 = v19 | 7;
      v23 = v22 + 1;
      v21 = (__int128 *)operator new(v22 + 1);
      *((_QWORD *)&__dst + 1) = v20;
      v28 = v23 | 0x8000000000000000;
      *(_QWORD *)&__dst = v21;
    }
    else
    {
      HIBYTE(v28) = v19;
      v21 = &__dst;
      if (!v19)
      {
LABEL_38:
        *((_BYTE *)v21 + v20) = 0;
        sub_240BB8814((char **)a1, &__dst);
        if (SHIBYTE(v28) < 0)
          operator delete((void *)__dst);
        return a1;
      }
    }
    memmove(v21, v18, v20);
    goto LABEL_38;
  }
  return a1;
}

void sub_240BA94D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_240BA96DC(a10);
  sub_240B86B30(a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_240BA9558(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x492492492492493)
      sub_240B70258();
    v6 = 56 * a3;
    v7 = (char *)operator new(56 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_240BA9FEC(v4, a2, a2 + v6, (uint64_t)v7);
  }
  return a1;
}

void sub_240BA9600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  void *v14;
  _DWORD *v16;
  _DWORD *v17;
  void *v18;
  uint64_t v19;

  v13[1] = v14;
  v16 = *v13;
  if (*v13)
  {
    v17 = v13[1];
    v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        v19 = *(v17 - 4);
        if ((_DWORD)v19 != -1)
          ((void (*)(char *, _DWORD *))off_25110CAF8[v19])(&a13, v17 - 10);
        *(v17 - 4) = -1;
        v17 -= 14;
      }
      while (v17 != v16);
      v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BA9684(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_25110CAF8[v2])(&v4, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void **sub_240BA96DC(void **a1)
{
  _DWORD *v2;
  _DWORD *v3;
  void *v4;
  uint64_t v5;
  char v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(v3 - 4);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, _DWORD *))off_25110CAF8[v5])(&v7, v3 - 10);
        *(v3 - 4) = -1;
        v3 -= 14;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_240BA9784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  std::ios_base *v27;
  char v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  _BYTE *v32;
  const char *v33;
  const char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  std::ios_base *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v48;
  void *__s1[2];
  int64_t v50;
  __int128 v51;
  uint64_t v52;
  int v53;
  void *__p;
  char v55;
  _QWORD v56[21];

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (v6 == v7)
    goto LABEL_32;
  do
  {
    v10 = *(const char **)v6;
    v11 = strlen(*(const char **)v6);
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      sub_240B6FFF4();
    v12 = (void *)v11;
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      v13 = operator new(v14 + 1);
      __s1[1] = v12;
      v50 = v15 | 0x8000000000000000;
      __s1[0] = v13;
LABEL_12:
      memmove(v13, v10, (size_t)v12);
      goto LABEL_13;
    }
    HIBYTE(v50) = v11;
    v13 = __s1;
    if (v11)
      goto LABEL_12;
LABEL_13:
    *((_BYTE *)v12 + (_QWORD)v13) = 0;
    if (v50 >= 0)
      v16 = (void *)HIBYTE(v50);
    else
      v16 = __s1[1];
    v17 = (void *)*(unsigned __int8 *)(a2 + 23);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = *(void **)(a2 + 8);
    if (v16 != v17)
      goto LABEL_28;
    if (v18 >= 0)
      v19 = (const char *)a2;
    else
      v19 = *(const char **)a2;
    if ((v50 & 0x8000000000000000) == 0)
    {
      if (!HIBYTE(v50))
        goto LABEL_31;
      v20 = 0;
      while (*((unsigned __int8 *)__s1 + v20) == v19[v20])
      {
        if (HIBYTE(v50) == ++v20)
          goto LABEL_31;
      }
LABEL_28:
      if (v50 < 0)
        operator delete(__s1[0]);
      goto LABEL_4;
    }
    v8 = __s1[0];
    v9 = memcmp(__s1[0], v19, (size_t)__s1[1]);
    operator delete(v8);
    if (!v9)
      goto LABEL_31;
LABEL_4:
    v6 += 56;
  }
  while (v6 != v7);
  v6 = v7;
LABEL_31:
  v3 = a3;
LABEL_32:
  if (v6 == *(_QWORD *)(a1 + 80))
  {
    if (*(char *)(a2 + 23) >= 0)
      v33 = (const char *)a2;
    else
      v33 = *(const char **)a2;
    if (*(char *)(v3 + 23) >= 0)
      v34 = (const char *)v3;
    else
      v34 = *(const char **)v3;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unknown option %s=%s\n", v33, v34);
    return;
  }
  v21 = *(_DWORD *)(v6 + 8);
  if (v21 == 2)
  {
    __s1[0] = (void *)a2;
    v35 = sub_240BAA6A0(a1 + 8, a2, (uint64_t)&unk_240BBBF40, (__int128 **)__s1);
    sub_240BAA200((void **)v35 + 5, (uint64_t)(v35 + 5), (__int128 *)v3);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_60;
LABEL_63:
    sub_240B6FF68(__s1, *(void **)a2, *(_QWORD *)(a2 + 8));
    goto LABEL_64;
  }
  if (v21 == 1)
  {
    v36 = MEMORY[0x24BEDB868];
    v37 = MEMORY[0x24BEDB868] + 64;
    v38 = MEMORY[0x24BEDB7F8];
    v39 = *(void **)(MEMORY[0x24BEDB7F8] + 8);
    v40 = *(void **)(MEMORY[0x24BEDB7F8] + 16);
    v56[0] = MEMORY[0x24BEDB868] + 64;
    __s1[0] = v39;
    *(void **)((char *)__s1 + *((_QWORD *)v39 - 3)) = v40;
    __s1[1] = 0;
    v41 = (std::ios_base *)((char *)__s1 + *((_QWORD *)__s1[0] - 3));
    std::ios_base::init(v41, &v50);
    v41[1].__vftable = 0;
    v41[1].__fmtflags_ = -1;
    __s1[0] = (void *)(v36 + 24);
    v56[0] = v37;
    sub_240BAAADC((uint64_t)&v50, (__int128 *)v3, 8);
    v48 = 0;
    *(_DWORD *)((char *)&__s1[1] + *((_QWORD *)__s1[0] - 3)) |= 1u;
    MEMORY[0x24268ABD8](__s1, &v48);
    __s1[0] = *(void **)v38;
    *(void **)((char *)__s1 + *((_QWORD *)__s1[0] - 3)) = *(void **)(v38 + 24);
    v42 = v48;
    v50 = MEMORY[0x24BEDB848] + 16;
    if (v55 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x24268ACB0](v56);
    __s1[0] = (void *)a2;
    v43 = sub_240BAA6A0(a1 + 8, a2, (uint64_t)&unk_240BBBF40, (__int128 **)__s1);
    v44 = v43;
    v45 = *((unsigned int *)v43 + 16);
    if ((_DWORD)v45 != -1)
    {
      v46 = v43 + 5;
      if ((_DWORD)v45 == 1)
      {
        *v46 = v42;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          goto LABEL_60;
        goto LABEL_63;
      }
      ((void (*)(void **, uint64_t *))off_25110CAF8[v45])(__s1, v46);
    }
    v44[5] = v42;
    *((_DWORD *)v44 + 16) = 1;
LABEL_59:
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_63;
    goto LABEL_60;
  }
  if (v21)
    goto LABEL_59;
  v22 = MEMORY[0x24BEDB868];
  v23 = MEMORY[0x24BEDB868] + 64;
  v24 = MEMORY[0x24BEDB7F8];
  v25 = *(void **)(MEMORY[0x24BEDB7F8] + 8);
  v26 = *(void **)(MEMORY[0x24BEDB7F8] + 16);
  v56[0] = MEMORY[0x24BEDB868] + 64;
  __s1[0] = v25;
  *(void **)((char *)__s1 + *((_QWORD *)v25 - 3)) = v26;
  __s1[1] = 0;
  v27 = (std::ios_base *)((char *)__s1 + *((_QWORD *)__s1[0] - 3));
  std::ios_base::init(v27, &v50);
  v27[1].__vftable = 0;
  v27[1].__fmtflags_ = -1;
  __s1[0] = (void *)(v22 + 24);
  v56[0] = v23;
  sub_240BAAADC((uint64_t)&v50, (__int128 *)v3, 8);
  LOBYTE(v48) = 0;
  *(_DWORD *)((char *)&__s1[1] + *((_QWORD *)__s1[0] - 3)) |= 1u;
  MEMORY[0x24268ABCC](__s1, &v48);
  __s1[0] = *(void **)v24;
  *(void **)((char *)__s1 + *((_QWORD *)__s1[0] - 3)) = *(void **)(v24 + 24);
  v28 = v48;
  v50 = MEMORY[0x24BEDB848] + 16;
  if (v55 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x24268ACB0](v56);
  __s1[0] = (void *)a2;
  v29 = sub_240BAA6A0(a1 + 8, a2, (uint64_t)&unk_240BBBF40, (__int128 **)__s1);
  v30 = v29;
  v31 = *((unsigned int *)v29 + 16);
  if ((_DWORD)v31 == -1)
  {
LABEL_62:
    *((_BYTE *)v30 + 40) = v28;
    *((_DWORD *)v30 + 16) = 0;
    if (*(char *)(a2 + 23) < 0)
      goto LABEL_63;
    goto LABEL_60;
  }
  v32 = v29 + 5;
  if ((_DWORD)v31)
  {
    ((void (*)(void **, _BYTE *))off_25110CAF8[v31])(__s1, v32);
    goto LABEL_62;
  }
  *v32 = v28;
  if (*(char *)(a2 + 23) < 0)
    goto LABEL_63;
LABEL_60:
  *(_OWORD *)__s1 = *(_OWORD *)a2;
  v50 = *(_QWORD *)(a2 + 16);
LABEL_64:
  if (*(char *)(v3 + 23) < 0)
  {
    sub_240B6FF68(&v51, *(void **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v51 = *(_OWORD *)v3;
    v52 = *(_QWORD *)(v3 + 16);
  }
  v53 = 2;
  sub_240BAACD4(a1 + 8, (uint64_t)__s1, (uint64_t)__s1);
  if (v53 != -1)
    ((void (*)(uint64_t *, __int128 *))off_25110CAF8[v53])(&v48, &v51);
  v53 = -1;
  if (SHIBYTE(v50) < 0)
    operator delete(__s1[0]);
}

void sub_240BA9D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_240BAAA58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_240BA9D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x240BA9D6CLL);
}

void sub_240BA9D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_240BA9DA8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240BA9DA8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_25110CAF8[v2])(&v4, a1 + 24);
  *(_DWORD *)(a1 + 48) = -1;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_240BA9E10(uint64_t a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;
  _BYTE *p_s1;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned __int8 *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  const char *v20;
  void *__s1;
  size_t __n;
  int64_t v23;

  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  if (v4 != v5)
  {
    while (1)
    {
      v8 = *(const char **)v4;
      v9 = strlen(*(const char **)v4);
      if (v9 >= 0x7FFFFFFFFFFFFFF8)
        sub_240B6FFF4();
      v10 = v9;
      if (v9 >= 0x17)
        break;
      HIBYTE(v23) = v9;
      p_s1 = &__s1;
      if (v9)
        goto LABEL_12;
LABEL_13:
      p_s1[v10] = 0;
      if (v23 >= 0)
        v14 = HIBYTE(v23);
      else
        v14 = __n;
      v15 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      v16 = (char)v15;
      if ((char)v15 < 0)
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if ((unsigned __int8 *)v14 == v15)
      {
        if (v16 >= 0)
          v17 = a2;
        else
          v17 = *(const char **)a2;
        if (v23 < 0)
        {
          v6 = __s1;
          v7 = memcmp(__s1, v17, __n);
          operator delete(v6);
          if (!v7)
            goto LABEL_31;
          goto LABEL_4;
        }
        if (!HIBYTE(v23))
          goto LABEL_31;
        v18 = 0;
        while (*((unsigned __int8 *)&__s1 + v18) == v17[v18])
        {
          if (HIBYTE(v23) == ++v18)
            goto LABEL_31;
        }
      }
      if (v23 < 0)
        operator delete(__s1);
LABEL_4:
      v4 += 56;
      if (v4 == v5)
      {
        v4 = v5;
        goto LABEL_31;
      }
    }
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_s1 = operator new(v12 + 1);
    __n = v10;
    v23 = v13 | 0x8000000000000000;
    __s1 = p_s1;
LABEL_12:
    memmove(p_s1, v8, v10);
    goto LABEL_13;
  }
LABEL_31:
  if (v4 != *(_QWORD *)(a1 + 80))
    return *(unsigned int *)(v4 + 8);
  if (a2[23] >= 0)
    v20 = a2;
  else
    v20 = *(const char **)a2;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unknown RT option key %s!\n", v20);
  return 0;
}

void sub_240BA9FD8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_240B87C24(a1);
  j__free(v1);
}

uint64_t sub_240BA9FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[2];

  v4 = a4;
  v12 = a4;
  if (a2 != a3)
  {
    v6 = a2 + 16;
    do
    {
      v8 = v6 - 16;
      v7 = *(_QWORD *)(v6 - 16);
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 - 8);
      *(_QWORD *)v4 = v7;
      *(_BYTE *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 40) = -1;
      v9 = *(unsigned int *)(v6 + 24);
      v10 = v4;
      if ((_DWORD)v9 != -1)
      {
        ((void (*)(_BYTE *, uint64_t, uint64_t))off_25110CB10[v9])(v13, v4 + 16, v6);
        *(_DWORD *)(v4 + 40) = v9;
        v10 = v12;
      }
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(v6 + 32);
      v4 = v10 + 56;
      v12 = v10 + 56;
      v6 += 56;
    }
    while (v8 + 56 != a3);
  }
  return v4;
}

void sub_240BAA0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = *(unsigned int *)(v19 + 40);
  if ((_DWORD)v22 != -1)
    ((void (*)(char *, uint64_t))off_25110CAF8[v22])(&a19, v20);
  *(_DWORD *)(v19 + 40) = -1;
  sub_240B87B88((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_240BAA118(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_25110CAF8[v5])(&v6, v4);
  }
  *(_BYTE *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

uint64_t sub_240BAA184(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_25110CAF8[v5])(&v6, v4);
  }
  *(_QWORD *)v4 = *a3;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

void **sub_240BAA1F8(void ***a1, uint64_t a2, __int128 *a3)
{
  return sub_240BAA200(*a1, a2, a3);
}

void **sub_240BAA200(void **result, uint64_t a2, __int128 *a3)
{
  int v3;
  char v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  size_t v8;
  __int128 v9;
  uint64_t v10;
  char v11;

  v3 = *((_DWORD *)result + 6);
  if (v3 != 2)
  {
    v6 = (uint64_t)result;
    if (*((char *)a3 + 23) < 0)
    {
      result = (void **)sub_240B6FF68(&v9, *(void **)a3, *((_QWORD *)a3 + 1));
      v3 = *(_DWORD *)(v6 + 24);
      if (v3 == -1)
      {
LABEL_11:
        *(_OWORD *)v6 = v9;
        *(_QWORD *)(v6 + 16) = v10;
        *(_DWORD *)(v6 + 24) = 2;
        return result;
      }
    }
    else
    {
      v9 = *a3;
      v10 = *((_QWORD *)a3 + 2);
      if (v3 == -1)
        goto LABEL_11;
    }
    result = (void **)((uint64_t (*)(char *, uint64_t))off_25110CAF8[v3])(&v11, v6);
    goto LABEL_11;
  }
  if ((__int128 *)a2 != a3)
  {
    v4 = *((_BYTE *)a3 + 23);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v4 >= 0)
        v7 = a3;
      else
        v7 = *(__int128 **)a3;
      if (v4 >= 0)
        v8 = *((unsigned __int8 *)a3 + 23);
      else
        v8 = *((_QWORD *)a3 + 1);
      return sub_240B734B8((void **)a2, v7, v8);
    }
    else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
    {
      return (void **)sub_240B733F4((_QWORD *)a2, *(void **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v5 = *a3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

unsigned __int8 *sub_240BAA314(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 *v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = *((_QWORD *)v16 + 1);
          if (v19 == v11)
          {
            v20 = v16[39];
            if ((v20 & 0x80u) == 0)
              v21 = v16[39];
            else
              v21 = *((_QWORD *)v16 + 3);
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((_QWORD *)v16 + 3)))
                  return v16;
              }
              else
              {
                if (!v16[39])
                  return v16;
                v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  v23 = (_QWORD *)(a1 + 16);
  v16 = (unsigned __int8 *)operator new(0x48uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v11;
  v24 = *a4;
  v25 = **a4;
  *((_QWORD *)v16 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v25;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = 0;
  v16[40] = 0;
  *((_DWORD *)v16 + 16) = 0;
  v41 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    v28 = 1;
    if (v12 >= 3)
      v28 = (v12 & (v12 - 1)) != 0;
    v29 = v28 | (2 * v12);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v36 = *(_QWORD *)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v16 = *v37;
LABEL_73:
    *v37 = v16;
    goto LABEL_74;
  }
  *(_QWORD *)v16 = *v23;
  *v23 = v16;
  *(_QWORD *)(v36 + 8 * v4) = v23;
  if (*(_QWORD *)v16)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12)
        v38 %= v12;
    }
    else
    {
      v38 &= v12 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240BAA688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B87030((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240BAA6A0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = v16[1];
          if (v19 == v11)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  v23 = (char *)operator new(0x48uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  v41 = 0;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = v11;
  v24 = v23 + 16;
  v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_240B6FF68(v24, *(void **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    *((_QWORD *)v23 + 4) = *((_QWORD *)v25 + 2);
    *(_OWORD *)v24 = v26;
  }
  v23[40] = 0;
  *((_DWORD *)v23 + 16) = 0;
  v41 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v40[0] = *v37;
    *v37 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v40[0])
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40[0];
    }
  }
  v16 = (uint64_t *)v40[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240BAAA3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B87030((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240BAAA58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7F8];
  v3 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F8];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x24268ACB0](a1 + 120);
  return a1;
}

uint64_t sub_240BAAADC(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  __int128 v7;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  if ((__int128 *)(v6 + 64) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_240B733F4((_QWORD *)(v6 + 64), *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v7 = *a2;
      *(_QWORD *)(v6 + 80) = *((_QWORD *)a2 + 2);
      *(_OWORD *)(v6 + 64) = v7;
    }
  }
  sub_240BAAB90(a1);
  return a1;
}

void sub_240BAAB6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

std::string *sub_240BAAB90(uint64_t a1)
{
  std::string *result;
  unint64_t v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  result = (std::string *)(a1 + 64);
  v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v4 = result;
    v5 = *(unsigned __int8 *)(a1 + 87);
    v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v4 = *(std::string **)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0)
    return result;
  *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v7 = (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v3 >= v7)
    {
      result = *(std::string **)(a1 + 64);
      *(_QWORD *)(a1 + 72) = v7;
LABEL_14:
      result->__r_.__value_.__s.__data_[v7] = 0;
      LODWORD(v8) = *(char *)(a1 + 87);
      if ((v8 & 0x80000000) != 0)
        goto LABEL_15;
LABEL_12:
      v8 = v8;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = 22;
    if (v3 > 0x15)
    {
      *(_BYTE *)(a1 + 87) = 22;
      goto LABEL_14;
    }
  }
  result = std::string::append(result, v7 - v3, 0);
  LODWORD(v8) = *(char *)(a1 + 87);
  if ((v8 & 0x80000000) == 0)
    goto LABEL_12;
LABEL_15:
  v8 = *(_QWORD *)(a1 + 72);
LABEL_16:
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
  if ((*(_BYTE *)(a1 + 96) & 3) != 0)
  {
    if (v5 >> 31)
    {
      v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
      v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
      v5 = v5 - v10 - 0x7FFFFFFF;
      *(_QWORD *)(a1 + 48) = v4;
    }
    if (v5)
      *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
  }
  return result;
}

uint64_t *sub_240BAACD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD v35[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v35, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_240BAB050(a1, v10, a3, (uint64_t)v35);
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *(_QWORD *)v35[0] = *v32;
    *v32 = v35[0];
  }
  else
  {
    *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v35[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v35[0])
    {
      v33 = *(_QWORD *)(*(_QWORD *)v35[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11)
          v33 %= v11;
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v35[0];
    }
  }
  v15 = (uint64_t *)v35[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240BAB038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B87030((uint64_t *)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_240BAB050@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;
  uint64_t v10;
  char v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_240B6FF68(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  v8[40] = 0;
  *((_DWORD *)v8 + 16) = -1;
  v10 = *(unsigned int *)(a3 + 48);
  if ((_DWORD)v10 != -1)
  {
    result = (_BYTE *)((uint64_t (*)(char *))off_25110CB40[v10])(&v11);
    *((_DWORD *)v8 + 16) = v10;
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_240BAB10C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_240B87030(v1);
  _Unwind_Resume(a1);
}

void sub_240BAB124(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void sub_240BAB130(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

__n128 sub_240BAB13C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t sub_240BAB158(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = off_25110CB68;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = sub_240BB84D8(0x1E0uLL);
  sub_240BA25C0(v4, a2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_240BAB1B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  j__free(v2);
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240BAB1D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;

  *a1 = off_25110CB68;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return nullsub_34(a1);
}

void sub_240BAB254(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  *a1 = off_25110CB68;
  v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[3];
  a1[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (void *)nullsub_34(a1);
  j__free(v6);
}

uint64_t sub_240BAB2D4(uint64_t a1, uint64_t *a2)
{
  return sub_240BA29A0(*(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_240BAB2DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_240BAB2E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p;
  __int128 v9;

  v4 = *(_QWORD **)(a1 + 24);
  v5 = v4[10];
  v6 = v4[11];
  if (v5 == v6)
  {
LABEL_4:
    v4[1] = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = a3;
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) = a4;
  }
  else
  {
    while (!*(_QWORD *)(v5 + 40))
    {
      v5 += 80;
      if (v5 == v6)
        goto LABEL_4;
    }
    v7 = *(_QWORD **)(a1 + 16);
    __p = operator new(0x28uLL);
    v9 = xmmword_240BBBE40;
    strcpy((char *)__p, "Allocator cannot be set after loading.");
    sub_240BB7D38(v7, 1, (uint64_t)&__p);
    if (SHIBYTE(v9) < 0)
      operator delete(__p);
  }
}

void sub_240BAB398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BAB3B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *v11;
  void **v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD v22[2];
  _QWORD v23[10];
  std::ios_base v24;
  uint64_t v25;
  int v26;

  v4 = (uint64_t *)sub_240BB6CD0(a2);
  v6 = *v4;
  v5 = v4[1];
  v7 = v5 - *v4;
  std::streambuf::basic_streambuf();
  v23[8] = v6;
  v23[9] = v7;
  v23[3] = v6;
  v23[4] = v5;
  v23[2] = v6;
  v22[1] = 0;
  v23[0] = &off_25110CC20;
  v24.__vftable = (std::ios_base_vtbl *)&unk_25110CD20;
  std::ios_base::init(&v24, v23);
  v26 = -1;
  v22[0] = &off_25110CB98;
  v23[0] = &off_25110CC20;
  v25 = 0;
  v24.__vftable = (std::ios_base_vtbl *)&unk_25110CCA8;
  sub_240B91554((uint64_t)v22, &v20);
  if (!v20)
  {
    v13 = *(_QWORD **)(a1 + 16);
    v18 = operator new(0x20uLL);
    v19 = xmmword_240BBB860;
    strcpy((char *)v18, "Could not parse program.");
    sub_240BB7D38(v13, 5, (uint64_t)&v18);
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      goto LABEL_14;
    v11 = v18;
LABEL_13:
    operator delete(v11);
    goto LABEL_14;
  }
  sub_240BA29D0(*(uint64_t **)(a1 + 24), &v20);
  if (sub_240BB7E28(*(_QWORD *)(a1 + 16)))
  {
    v8 = sub_240BB6CD8(a2);
    v9 = *(_QWORD *)(a1 + 24) + 152;
    if (v9 != v8)
      sub_240BAC8E8(v9, *(char ***)v8, *(_QWORD *)(v8 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 8) - *(_QWORD *)v8) >> 3));
    sub_240BB6CE0(a2, (uint64_t)&v18);
    sub_240BACDD0(*(_QWORD *)(a1 + 24) + 320, (uint64_t *)&v18);
    v10 = (void **)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      do
      {
        v12 = (void **)*v10;
        if (*((char *)v10 + 39) < 0)
          operator delete(v10[2]);
        operator delete(v10);
        v10 = v12;
      }
      while (v12);
    }
    v11 = v18;
    v18 = 0;
    if (v11)
      goto LABEL_13;
  }
LABEL_14:
  v14 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::istream::~istream();
  MEMORY[0x24268ACB0](&v24);
  return std::streambuf::~streambuf();
}

void sub_240BAB5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  sub_240B6FE78((uint64_t)&a17);
  sub_240BAB648((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_240BAB648(uint64_t a1)
{
  uint64_t v2;

  v2 = std::istream::~istream();
  MEMORY[0x24268ACB0](v2 + 96);
  std::streambuf::~streambuf();
  return a1;
}

void sub_240BAB684(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  void *v24[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];

  if (*(_DWORD *)(a1 + 8))
  {
    v2 = MEMORY[0x24BEDB870];
    v3 = MEMORY[0x24BEDB870] + 64;
    v4 = (uint64_t *)MEMORY[0x24BEDB800];
    v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
    v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
    v27[0] = MEMORY[0x24BEDB870] + 64;
    v19 = v5;
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v5 - 24)) = v6;
    v7 = (std::ios_base *)((char *)&v19 + *(_QWORD *)(v19 - 24));
    std::ios_base::init(v7, &v20);
    v7[1].__vftable = 0;
    v7[1].__fmtflags_ = -1;
    v19 = v2 + 24;
    v27[0] = v3;
    std::streambuf::basic_streambuf();
    v8 = MEMORY[0x24BEDB848];
    v20 = MEMORY[0x24BEDB848] + 16;
    *(_OWORD *)v24 = 0u;
    v25 = 0u;
    v26 = 16;
    sub_240B8AA18(&v19, (uint64_t)"Cannot load binary; it has already been loaded.", 47);
    v9 = *(_QWORD **)(a1 + 16);
    if ((v26 & 0x10) != 0)
    {
      v12 = *((_QWORD *)&v25 + 1);
      if (*((_QWORD *)&v25 + 1) < v23)
      {
        *((_QWORD *)&v25 + 1) = v23;
        v12 = v23;
      }
      v13 = (const void **)&v22;
    }
    else
    {
      if ((v26 & 8) == 0)
      {
        v10 = 0;
        HIBYTE(v18) = 0;
        v11 = __p;
        goto LABEL_20;
      }
      v13 = (const void **)v21;
      v12 = v21[2];
    }
    v14 = *v13;
    v10 = v12 - (_QWORD)*v13;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
      sub_240B6FFF4();
    if (v10 >= 0x17)
    {
      v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v15 = v10 | 7;
      v16 = v15 + 1;
      v11 = operator new(v15 + 1);
      __p[1] = (void *)v10;
      v18 = v16 | 0x8000000000000000;
      __p[0] = v11;
    }
    else
    {
      HIBYTE(v18) = v12 - *(_BYTE *)v13;
      v11 = __p;
      if (!v10)
        goto LABEL_20;
    }
    memmove(v11, v14, v10);
LABEL_20:
    *((_BYTE *)v11 + v10) = 0;
    sub_240BB7D38(v9, 5, (uint64_t)__p);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    v19 = *v4;
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v4[3];
    v20 = v8 + 16;
    if (SBYTE7(v25) < 0)
      operator delete(v24[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x24268ACB0](v27);
    return;
  }
  sub_240BA3A70(*(_QWORD *)(a1 + 24));
  if (sub_240BB7E28(*(_QWORD *)(a1 + 16)))
  {
    sub_240BA3664(*(_QWORD **)(a1 + 24));
    if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40))
    {
      sub_240BA3740(*(_QWORD *)(a1 + 24));
      *(_DWORD *)(a1 + 8) = 1;
    }
  }
}

void sub_240BAB8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_240BAB93C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  void *v24[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];

  if (*(_DWORD *)(a1 + 8) == 1)
  {
    sub_240BA3FF0(*(_QWORD *)(a1 + 24));
    return;
  }
  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  v4 = (uint64_t *)MEMORY[0x24BEDB800];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v27[0] = MEMORY[0x24BEDB870] + 64;
  v19 = v5;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v19 + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v7, &v20);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v19 = v2 + 24;
  v27[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x24BEDB848];
  v20 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v26 = 16;
  sub_240B8AA18(&v19, (uint64_t)"Cannot unload binary; it has not been loaded.", 45);
  v9 = *(_QWORD **)(a1 + 16);
  if ((v26 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1) < v23)
    {
      *((_QWORD *)&v25 + 1) = v23;
      v12 = v23;
    }
    v13 = (const void **)&v22;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v18) = 0;
      v11 = __p;
      goto LABEL_18;
    }
    v13 = (const void **)v21;
    v12 = v21[2];
  }
  v14 = *v13;
  v10 = v12 - (_QWORD)*v13;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    __p[1] = (void *)v10;
    v18 = v16 | 0x8000000000000000;
    __p[0] = v11;
  }
  else
  {
    HIBYTE(v18) = v12 - *(_BYTE *)v13;
    v11 = __p;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v11, v14, v10);
LABEL_18:
  *((_BYTE *)v11 + v10) = 0;
  sub_240BB7D38(v9, 5, (uint64_t)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v19 = *v4;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v4[3];
  v20 = v8 + 16;
  if (SBYTE7(v25) < 0)
    operator delete(v24[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v27);
}

void sub_240BABB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_240BABBE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  void *v24[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];

  if (*(_DWORD *)(a1 + 8) == 1)
  {
    sub_240BA37C0(*(_QWORD **)(a1 + 24));
    return;
  }
  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  v4 = (uint64_t *)MEMORY[0x24BEDB800];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v27[0] = MEMORY[0x24BEDB870] + 64;
  v19 = v5;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v19 + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v7, &v20);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v19 = v2 + 24;
  v27[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x24BEDB848];
  v20 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v26 = 16;
  sub_240B8AA18(&v19, (uint64_t)"Cannot validate binary; it hasn't been loaded.", 46);
  v9 = *(_QWORD **)(a1 + 16);
  if ((v26 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1) < v23)
    {
      *((_QWORD *)&v25 + 1) = v23;
      v12 = v23;
    }
    v13 = (const void **)&v22;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v18) = 0;
      v11 = __p;
      goto LABEL_18;
    }
    v13 = (const void **)v21;
    v12 = v21[2];
  }
  v14 = *v13;
  v10 = v12 - (_QWORD)*v13;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    __p[1] = (void *)v10;
    v18 = v16 | 0x8000000000000000;
    __p[0] = v11;
  }
  else
  {
    HIBYTE(v18) = v12 - *(_BYTE *)v13;
    v11 = __p;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v11, v14, v10);
LABEL_18:
  *((_BYTE *)v11 + v10) = 0;
  sub_240BB7D38(v9, 5, (uint64_t)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v19 = *v4;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v4[3];
  v20 = v8 + 16;
  if (SBYTE7(v25) < 0)
    operator delete(v24[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v27);
}

void sub_240BABE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a15);
  _Unwind_Resume(a1);
}

int64_t sub_240BABE84(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  int64_t v4;
  const void **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v15;
  const void **v16;
  std::__shared_weak_count *v17;

  v1 = *(_QWORD *)(a1 + 24);
  v15 = 4;
  strcpy((char *)__p, "main");
  sub_240BA3F04(v1, (unsigned __int8 **)__p, &v16);
  if ((v15 & 0x80000000) == 0)
  {
    v2 = v17;
    if (v17)
      goto LABEL_3;
    return 0;
  }
  operator delete(__p[0]);
  v2 = v17;
  if (!v17)
    return 0;
LABEL_3:
  if (v2->__shared_owners_ == -1)
    goto LABEL_23;
  v3 = std::__shared_weak_count::lock(v2);
  v4 = (int64_t)v3;
  if (!v3)
    goto LABEL_19;
  v5 = v16;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    if (v5)
      goto LABEL_9;
LABEL_23:
    v4 = 0;
    v12 = v17;
    if (!v17)
      return v4;
    goto LABEL_20;
  }
  if (!v5)
    goto LABEL_23;
LABEL_9:
  if (v17 && (v8 = std::__shared_weak_count::lock(v17)) != 0)
  {
    v9 = v8;
    v4 = ((_BYTE *)v16[4] - (_BYTE *)v16[3]) >> 4;
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v17;
      if (!v17)
        return v4;
      goto LABEL_20;
    }
  }
  else
  {
    v4 = (uint64_t)(MEMORY[0x20] - MEMORY[0x18]) >> 4;
  }
LABEL_19:
  v12 = v17;
  if (v17)
LABEL_20:
    std::__shared_weak_count::__release_weak(v12);
  return v4;
}

void sub_240BABFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240BABFFC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void **v9;
  BOOL v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v19;
  const void **v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 24);
  v19 = 4;
  strcpy((char *)__p, "main");
  sub_240BA3F04(v5, (unsigned __int8 **)__p, &v20);
  if ((v19 & 0x80000000) == 0)
  {
    v6 = v21;
    if (v21)
      goto LABEL_3;
LABEL_16:
    v8 = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  v6 = v21;
  if (!v21)
    goto LABEL_16;
LABEL_3:
  v7 = std::__shared_weak_count::lock(v6);
  v8 = v7;
  v9 = v20;
  if (!v7)
    v9 = 0;
  if (!v21 || (v21->__shared_owners_ != -1 ? (v10 = v9 == 0) : (v10 = 1), v10))
  {
LABEL_17:
    *a3 = 0;
    a3[1] = 0;
    if (!v8)
      goto LABEL_22;
    goto LABEL_18;
  }
  v11 = v9[3];
  *a3 = 0;
  a3[1] = 0;
  v12 = v11[a2];
  v13 = *((_QWORD *)&v11[a2] + 1);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)a3 = v12;
  if (v7)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_22:
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_240BAC118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int64_t sub_240BAC134(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  int64_t v4;
  const void **v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v15;
  const void **v16;
  std::__shared_weak_count *v17;

  v1 = *(_QWORD *)(a1 + 24);
  v15 = 4;
  strcpy((char *)__p, "main");
  sub_240BA3F04(v1, (unsigned __int8 **)__p, &v16);
  if ((v15 & 0x80000000) == 0)
  {
    v2 = v17;
    if (v17)
      goto LABEL_3;
    return 0;
  }
  operator delete(__p[0]);
  v2 = v17;
  if (!v17)
    return 0;
LABEL_3:
  if (v2->__shared_owners_ == -1)
    goto LABEL_23;
  v3 = std::__shared_weak_count::lock(v2);
  v4 = (int64_t)v3;
  if (!v3)
    goto LABEL_19;
  v5 = v16;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    if (v5)
      goto LABEL_9;
LABEL_23:
    v4 = 0;
    v12 = v17;
    if (!v17)
      return v4;
    goto LABEL_20;
  }
  if (!v5)
    goto LABEL_23;
LABEL_9:
  if (v17 && (v8 = std::__shared_weak_count::lock(v17)) != 0)
  {
    v9 = v8;
    v4 = ((_BYTE *)v16[7] - (_BYTE *)v16[6]) >> 4;
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
      v12 = v17;
      if (!v17)
        return v4;
      goto LABEL_20;
    }
  }
  else
  {
    v4 = (uint64_t)(MEMORY[0x38] - MEMORY[0x30]) >> 4;
  }
LABEL_19:
  v12 = v17;
  if (v17)
LABEL_20:
    std::__shared_weak_count::__release_weak(v12);
  return v4;
}

void sub_240BAC290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240BAC2AC(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void **v9;
  BOOL v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v19;
  const void **v20;
  std::__shared_weak_count *v21;

  v5 = *(_QWORD *)(a1 + 24);
  v19 = 4;
  strcpy((char *)__p, "main");
  sub_240BA3F04(v5, (unsigned __int8 **)__p, &v20);
  if ((v19 & 0x80000000) == 0)
  {
    v6 = v21;
    if (v21)
      goto LABEL_3;
LABEL_16:
    v8 = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  v6 = v21;
  if (!v21)
    goto LABEL_16;
LABEL_3:
  v7 = std::__shared_weak_count::lock(v6);
  v8 = v7;
  v9 = v20;
  if (!v7)
    v9 = 0;
  if (!v21 || (v21->__shared_owners_ != -1 ? (v10 = v9 == 0) : (v10 = 1), v10))
  {
LABEL_17:
    *a3 = 0;
    a3[1] = 0;
    if (!v8)
      goto LABEL_22;
    goto LABEL_18;
  }
  v11 = v9[6];
  *a3 = 0;
  a3[1] = 0;
  v12 = v11[a2];
  v13 = *((_QWORD *)&v11[a2] + 1);
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)a3 = v12;
  if (v7)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_22:
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

void sub_240BAC3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240BAC3E4(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  const void **v4;
  std::__shared_weak_count *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  const void **v12;
  std::__shared_weak_count *v13;
  const void **v14;
  std::__shared_weak_count *v15;

  v2 = *(_QWORD *)(a1 + 24);
  v11 = 4;
  strcpy((char *)__p, "main");
  sub_240BA3F04(v2, (unsigned __int8 **)__p, &v12);
  v14 = 0;
  v15 = 0;
  if (!v13)
  {
    v3 = 0;
    v4 = 0;
    goto LABEL_8;
  }
  v3 = std::__shared_weak_count::lock(v13);
  v15 = v3;
  if (!v3)
  {
    v4 = 0;
    v5 = v13;
    if (!v13)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = v12;
  v14 = v12;
  v5 = v13;
  if (v13)
LABEL_7:
    std::__shared_weak_count::__release_weak(v5);
LABEL_8:
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = 0;
  v7 = ((_BYTE *)v4[10] - (_BYTE *)v4[9]) >> 4;
  while (v6 < v7 && sub_240BB7E28(*(_QWORD *)(a1 + 16)))
    v6 = sub_240BA665C(*(int8x8_t ***)(*(_QWORD *)(a1 + 24) + 72), *(_QWORD *)(a1 + 24), (uint64_t)v4, v6);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_240BAC510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_240BAC540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  void *v24[2];
  __int128 v25;
  int v26;
  uint64_t v27[19];

  if (*(_DWORD *)(a1 + 8) == 1)
  {
    sub_240BA4350(*(_QWORD *)(a1 + 24));
    return;
  }
  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  v4 = (uint64_t *)MEMORY[0x24BEDB800];
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v27[0] = MEMORY[0x24BEDB870] + 64;
  v19 = v5;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v19 + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v7, &v20);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v19 = v2 + 24;
  v27[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x24BEDB848];
  v20 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v26 = 16;
  sub_240B8AA18(&v19, (uint64_t)"Cannot reshape binary; it has not been loaded.", 46);
  v9 = *(_QWORD **)(a1 + 16);
  if ((v26 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1) < v23)
    {
      *((_QWORD *)&v25 + 1) = v23;
      v12 = v23;
    }
    v13 = (const void **)&v22;
  }
  else
  {
    if ((v26 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v18) = 0;
      v11 = __p;
      goto LABEL_18;
    }
    v13 = (const void **)v21;
    v12 = v21[2];
  }
  v14 = *v13;
  v10 = v12 - (_QWORD)*v13;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    __p[1] = (void *)v10;
    v18 = v16 | 0x8000000000000000;
    __p[0] = v11;
  }
  else
  {
    HIBYTE(v18) = v12 - *(_BYTE *)v13;
    v11 = __p;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v11, v14, v10);
LABEL_18:
  *((_BYTE *)v11 + v10) = 0;
  sub_240BB7D38(v9, 5, (uint64_t)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v19 = *v4;
  *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = v4[3];
  v20 = v8 + 16;
  if (SBYTE7(v25) < 0)
    operator delete(v24[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v27);
}

void sub_240BAC78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_240BAC7E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(a1 + 24);
  return v2[19] != v2[20] || sub_240BA466C(v2 + 37, a2);
}

void sub_240BAC804()
{
  uint64_t v0;

  v0 = std::istream::~istream();
  MEMORY[0x24268ACB0](v0 + 96);
  std::streambuf::~streambuf();
  JUMPOUT(0x24268ACF8);
}

uint64_t sub_240BAC850(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x24268ACB0](v1 + 96);
  return std::streambuf::~streambuf();
}

void sub_240BAC890(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x24268ACB0](v1 + 96);
  std::streambuf::~streambuf();
  JUMPOUT(0x24268ACF8);
}

void sub_240BAC8E8(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  char **v6;
  uint64_t v8;
  uint64_t v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char *v14;
  char *v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char **v26;
  char *v27;
  char *v28;

  v6 = a2;
  v9 = a1 + 16;
  v8 = *(_QWORD *)(a1 + 16);
  v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      v11 = *(char ***)(a1 + 8);
      v12 = *(char ***)a1;
      if (v11 != v10)
      {
        v13 = *(char ***)(a1 + 8);
        do
        {
          v15 = *(v13 - 3);
          v13 -= 3;
          v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          v11 = v13;
        }
        while (v13 != v10);
        v12 = *(char ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v10;
      operator delete(v12);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_40;
    v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v21 = 2 * v20;
    if (2 * v20 <= __sz)
      v21 = __sz;
    v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_40:
      sub_240B70258();
    v23 = 3 * v22;
    v24 = operator new(24 * v22);
    *(_QWORD *)a1 = v24;
    *(_QWORD *)(a1 + 8) = v24;
    *(_QWORD *)(a1 + 16) = &v24[v23];
    v25 = sub_240BACB40(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(_QWORD *)(a1 + 8) = v25;
    return;
  }
  v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10)
          sub_240BACC9C(v10, *v6, v6[1], v6[1] - *v6);
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      v10 = *(char ***)(a1 + 8);
    }
    v25 = sub_240BACB40(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    v19 = *(char ***)a1;
    do
    {
      if (v6 != v10)
        sub_240BACC9C(v10, *v6, v6[1], v6[1] - *v6);
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    v16 = *(char ***)(a1 + 8);
    if (v16 == v19)
      goto LABEL_39;
    goto LABEL_35;
  }
  v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    v26 = v16;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(_QWORD *)(a1 + 8) = v19;
}

void sub_240BACB30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_240BACB38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_240BACB40(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if ((v10 & 0x8000000000000000) != 0)
          sub_240B70258();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[v10];
        a4[2] = &v11[v10];
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_240BACC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_240BACC30((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_240BACC30(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

_QWORD *sub_240BACC9C(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_23;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_23:
      sub_240B70258();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v16 = &v9[v12];
    goto LABEL_22;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v16 = &v9[a3 - v15];
LABEL_22:
  v7[1] = v16;
  return result;
}

void sub_240BACDD0(uint64_t a1, uint64_t *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;

  if (*(_QWORD *)(a1 + 24))
  {
    v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0)
          operator delete(v4[2]);
        operator delete(v4);
        v4 = v16;
      }
      while (v16);
    }
    *(_QWORD *)(a1 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *a2;
  *a2 = 0;
  v8 = *(void **)a1;
  *(_QWORD *)a1 = v7;
  if (v8)
    operator delete(v8);
  v11 = a2[2];
  v10 = a2 + 2;
  v9 = v11;
  v12 = *(v10 - 1);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  v13 = v10[1];
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    v14 = *(_QWORD *)(v9 + 8);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v14 %= v15;
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v14) = a1 + 16;
    *v10 = 0;
    v10[1] = 0;
  }
}

void sub_240BACED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  void **v9;
  void **v10;
  uint64_t v11;
  void *v12;
  void *__p[2];
  char v14;
  void *__dst[2];
  uint64_t v16;
  void *v17[2];
  void *v18;
  void **v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == 2)
  {
    sub_240B6F8C8(a2, (uint64_t)v17);
    v14 = 4;
    strcpy((char *)__p, "name");
    v19 = __p;
    v5 = sub_240B73C48((uint64_t)v17, (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v19);
    if (*((_DWORD *)v5 + 16) != 2)
      sub_240B735D8();
    if ((char)v5[63] < 0)
    {
      sub_240B6FF68(__dst, *((void **)v5 + 5), *((_QWORD *)v5 + 6));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v5 + 40);
      v16 = *((_QWORD *)v5 + 7);
    }
    if (v14 < 0)
      operator delete(__p[0]);
    v14 = 4;
    strcpy((char *)__p, "slot");
    v19 = __p;
    v6 = sub_240B73C48((uint64_t)v17, (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v19);
    if (*((_DWORD *)v6 + 16))
      sub_240B735D8();
    v7 = *((_QWORD *)v6 + 5);
    if (v14 < 0)
      operator delete(__p[0]);
    v8 = (uint64_t)(*(_QWORD *)(a3 + 280) - *(_QWORD *)(a3 + 272)) >> 4;
    if (v7 + 1 > v8)
      sub_240BAD12C((char **)(a3 + 272), v7 + 1 - v8);
    if (SHIBYTE(v16) < 0)
    {
      operator delete(__dst[0]);
      v9 = (void **)v18;
      if (!v18)
        goto LABEL_23;
    }
    else
    {
      v9 = (void **)v18;
      if (!v18)
      {
LABEL_23:
        v12 = v17[0];
        v17[0] = 0;
        if (v12)
          operator delete(v12);
        return;
      }
    }
    do
    {
      v10 = (void **)*v9;
      v11 = *((unsigned int *)v9 + 16);
      if ((_DWORD)v11 != -1)
        ((void (*)(void **, void **))off_25110CD58[v11])(__dst, v9 + 5);
      *((_DWORD *)v9 + 16) = -1;
      if (*((char *)v9 + 39) < 0)
        operator delete(v9[2]);
      operator delete(v9);
      v9 = v10;
    }
    while (v10);
    goto LABEL_23;
  }
}

void sub_240BAD0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  sub_240B70478((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_240BAD118()
{
  void *v0;

  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_240BAD12C(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_240B70258();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_240B7007C();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *sub_240BAD254(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v20[0] = &off_25110C7F8;
  v20[1] = sub_240BAD538;
  v21 = v20;
  sub_240B9453C(a1, 0, 0, 6, 0, 0, v20);
  v2 = v21;
  if (v21 == v20)
  {
    v3 = 4;
    v2 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v18[0] = &off_25110C7F8;
  v18[1] = sub_240BADD6C;
  v19 = v18;
  sub_240B9453C(a1, 0, 0, 9, 0, 0, v18);
  v4 = v19;
  if (v19 == v18)
  {
    v5 = 4;
    v4 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v16[0] = &off_25110C7F8;
  v16[1] = sub_240BAE1E8;
  v17 = v16;
  sub_240B9453C(a1, 0, 0, 7, 0, 0, v16);
  v6 = v17;
  if (v17 == v16)
  {
    v7 = 4;
    v6 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_16;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_16:
  v14[0] = &off_25110C7F8;
  v14[1] = sub_240BAE440;
  v15 = v14;
  sub_240B9453C(a1, 0, 0, 10, 0, 0, v14);
  v8 = v15;
  if (v15 == v14)
  {
    v9 = 4;
    v8 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_21;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_21:
  v12[0] = &off_25110C7F8;
  v12[1] = sub_240BAE51C;
  v13 = v12;
  sub_240B9453C(a1, 0, 0, 8, 0, 0, v12);
  result = v13;
  if (v13 == v12)
  {
    v11 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v11 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v11))();
}

void sub_240BAD490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a13;
  if (a13 == v25)
  {
    v28 = 4;
    v27 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BAD538(_QWORD **a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD **a5)
{
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void **v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  void *v23;
  size_t v24;
  int v25;
  void **v26;
  void *v27;
  int v28;
  BOOL v29;
  size_t v30;
  size_t v31;
  void *v32;
  const void *v33;
  size_t v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  std::ios_base *v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  size_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  const void **v58;
  const void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v63;
  void *v64;
  size_t v65;
  void *filter;
  void *v67[2];
  char v68;
  void *v69[2];
  int64_t v70;
  void *v71[2];
  uint64_t v72;
  void *__p[2];
  unint64_t v74;
  int v75;
  void *in[2];
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  int v84;
  _QWORD v85[22];

  v85[19] = *MEMORY[0x24BDAC8D0];
  HIBYTE(v74) = 4;
  strcpy((char *)__p, "filt");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)in);
  if (v78)
    sub_240B735D8();
  v10 = in[0];
  v78 = -1;
  if (SHIBYTE(v74) < 0)
    operator delete(__p[0]);
  v11 = *(_QWORD *)(a3 + 224);
  HIBYTE(v74) = 10;
  strcpy((char *)__p, "batch_size");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)in);
  if (v78)
    sub_240B735D8();
  v12 = in[0];
  v78 = -1;
  if (SHIBYTE(v74) < 0)
    operator delete(__p[0]);
  HIBYTE(v74) = 4;
  strcpy((char *)__p, "kind");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)in);
  if (v78 != 2)
    sub_240B735D8();
  *(_OWORD *)v71 = *(_OWORD *)in;
  v72 = v77;
  in[1] = 0;
  v77 = 0;
  in[0] = 0;
  v78 = -1;
  if (SHIBYTE(v74) < 0)
    operator delete(__p[0]);
  v13 = (void *)HIBYTE(v72);
  if (v72 < 0)
    v13 = v71[1];
  if (v13 != (void *)10)
  {
    if (v13 == (void *)15)
    {
      v14 = v71;
      if (v72 < 0)
        v14 = (void **)v71[0];
      v15 = *v14;
      v16 = *(uint64_t *)((char *)v14 + 7);
      v17 = v15 == (void *)0x73616364616F7242 && v16 == 0x6C754D74614D7473;
      v18 = *a5;
      if (v17)
      {
        filter = *(void **)(v11 + 8 * (_QWORD)v10);
        v19 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 176))(*v18);
        v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
        v21 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 176))((*a5)[1]);
        v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[1] + 120))((*a5)[1]);
        v23 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
        v24 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 120))(**a1);
        v25 = BNNSFilterApplyTwoInputBatch(filter, (size_t)v12, v19, v20, v21, v22, v23, v24);
        goto LABEL_35;
      }
    }
    else
    {
      v18 = *a5;
    }
    goto LABEL_34;
  }
  v26 = v71;
  if (v72 < 0)
    v26 = (void **)v71[0];
  v27 = *v26;
  v28 = *((unsigned __int16 *)v26 + 4);
  v29 = v27 == (void *)0x74656D6874697241 && v28 == 25449;
  v18 = *a5;
  if (!v29)
  {
LABEL_34:
    v32 = *(void **)(v11 + 8 * (_QWORD)v10);
    v33 = (const void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v18 + 176))(*v18);
    v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 120))(**a5);
    v35 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
    v36 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 120))(**a1);
    v25 = BNNSFilterApplyBatch(v32, (size_t)v12, v33, v34, v35, v36);
    goto LABEL_35;
  }
  in[0] = 0;
  in[1] = 0;
  v77 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v74 = 0;
  if (a5[1] == v18)
  {
    v31 = 0;
  }
  else
  {
    v30 = 0;
    do
    {
      in[v30] = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v18[v30] + 176))(v18[v30]);
      __p[v30] = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a5)[v30] + 120))((*a5)[v30]);
      ++v30;
      v18 = *a5;
      v31 = a5[1] - *a5;
    }
    while (v30 < v31);
  }
  v63 = *(void **)(v11 + 8 * (_QWORD)v10);
  v64 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v65 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 120))(**a1);
  v25 = BNNSArithmeticFilterApplyBatch(v63, (size_t)v12, v31, (const void **)in, (const size_t *)__p, v64, v65);
LABEL_35:
  if (v25)
  {
    v37 = a3;
    v38 = MEMORY[0x24BEDB870];
    v39 = MEMORY[0x24BEDB870] + 64;
    v40 = MEMORY[0x24BEDB800];
    v41 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v42 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v85[0] = MEMORY[0x24BEDB870] + 64;
    in[0] = v41;
    *(void **)((char *)in + *((_QWORD *)v41 - 3)) = v42;
    v43 = (std::ios_base *)((char *)in + *((_QWORD *)in[0] - 3));
    std::ios_base::init(v43, &in[1]);
    v43[1].__vftable = 0;
    v43[1].__fmtflags_ = -1;
    in[0] = (void *)(v38 + 24);
    v85[0] = v39;
    std::streambuf::basic_streambuf();
    v44 = MEMORY[0x24BEDB848];
    in[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    v82 = 0u;
    v83 = 0u;
    v84 = 16;
    v68 = 4;
    strcpy((char *)v67, "name");
    sub_240BA7A94(a4, (uint64_t)v67, (uint64_t)__p);
    if (v75 != 2)
      sub_240B735D8();
    *(_OWORD *)v69 = *(_OWORD *)__p;
    v70 = v74;
    __p[1] = 0;
    v74 = 0;
    __p[0] = 0;
    v75 = -1;
    if (v68 < 0)
      operator delete(v67[0]);
    if (v72 >= 0)
      v45 = v71;
    else
      v45 = (void **)v71[0];
    if (v72 >= 0)
      v46 = HIBYTE(v72);
    else
      v46 = (uint64_t)v71[1];
    v47 = sub_240B8AA18(in, (uint64_t)v45, v46);
    v48 = sub_240B8AA18(v47, (uint64_t)" '", 2);
    if (v70 >= 0)
      v49 = v69;
    else
      v49 = (void **)v69[0];
    if (v70 >= 0)
      v50 = HIBYTE(v70);
    else
      v50 = (uint64_t)v69[1];
    v51 = sub_240B8AA18(v48, (uint64_t)v49, v50);
    sub_240B8AA18(v51, (uint64_t)"' failed (code ", 15);
    v52 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v52, (uint64_t)").", 2);
    v53 = *(_QWORD **)(v37 + 32);
    if ((v84 & 0x10) != 0)
    {
      v57 = *((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1) < v81)
      {
        *((_QWORD *)&v83 + 1) = v81;
        v57 = v81;
      }
      v58 = (const void **)&v80;
    }
    else
    {
      if ((v84 & 8) == 0)
      {
        v54 = 0;
        HIBYTE(v74) = 0;
        v55 = __p;
        goto LABEL_68;
      }
      v58 = (const void **)&v78;
      v57 = v79;
    }
    v59 = *v58;
    v54 = v57 - (_QWORD)*v58;
    if (v54 >= 0x7FFFFFFFFFFFFFF8)
      sub_240B6FFF4();
    if (v54 >= 0x17)
    {
      v60 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v54 | 7) != 0x17)
        v60 = v54 | 7;
      v61 = v60 + 1;
      v55 = operator new(v60 + 1);
      __p[1] = (void *)v54;
      v74 = v61 | 0x8000000000000000;
      __p[0] = v55;
    }
    else
    {
      HIBYTE(v74) = v57 - *(_BYTE *)v58;
      v55 = __p;
      if (!v54)
      {
LABEL_68:
        *((_BYTE *)v55 + v54) = 0;
        sub_240BB7D38(v53, 2, (uint64_t)__p);
        if (SHIBYTE(v74) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v70) & 0x80000000) == 0)
            goto LABEL_70;
        }
        else if ((SHIBYTE(v70) & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        operator delete(v69[0]);
LABEL_70:
        in[0] = *(void **)v40;
        *(void **)((char *)in + *((_QWORD *)in[0] - 3)) = *(void **)(v40 + 24);
        in[1] = (void *)(v44 + 16);
        if (SBYTE7(v83) < 0)
          operator delete((void *)v82);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x24268ACB0](v85);
        v56 = 0;
        if (SHIBYTE(v72) < 0)
          goto LABEL_73;
        return v56;
      }
    }
    memmove(v55, v59, v54);
    goto LABEL_68;
  }
  v56 = a2 + 1;
  if (SHIBYTE(v72) < 0)
LABEL_73:
    operator delete(v71[0]);
  return v56;
}

void sub_240BADC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BADD6C(_QWORD **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t i;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *j;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  void *__p[2];
  void *v41;
  void *v42[3];
  int v43;

  HIBYTE(v41) = 6;
  strcpy((char *)__p, "cindex");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v42);
  if (v43)
    sub_240B735D8();
  v43 = -1;
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  v39 = 4;
  strcpy((char *)v38, "func");
  sub_240BA7A94(a4, (uint64_t)v38, (uint64_t)v42);
  if (v43 != 2)
    sub_240B735D8();
  *(_OWORD *)__p = *(_OWORD *)v42;
  v41 = v42[2];
  memset(v42, 0, sizeof(v42));
  v43 = -1;
  if (v39 < 0)
    operator delete(v38[0]);
  v11 = *a5;
  v10 = a5[1];
  v12 = a1[1] - *a1;
  v13 = (v10 - *a5) >> 3;
  if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 128))(**a1) >= 16 * (v13 + v12 - 1))
  {
    v36 = a3;
    v37 = a2;
    v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
    v16 = v15;
    if (v12 != 1)
    {
      v17 = (_QWORD *)(v15 + 8);
      for (i = 1; i != v12; ++i)
      {
        *(v17 - 1) = sub_240BBA100((*a1)[i]);
        *v17 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)(*a1)[i] + 40))((*a1)[i]);
        v17 += 2;
      }
    }
    if (v10 != v11)
    {
      v19 = 0;
      if (v13 <= 1)
        v13 = 1;
      v20 = (_QWORD *)(v16 + 16 * v12 - 8);
      do
      {
        *(v20 - 1) = sub_240BBA100(*(_QWORD *)(*a5 + 8 * v19));
        *v20 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a5 + 8 * v19) + 40))(*(_QWORD *)(*a5 + 8 * v19));
        v20 += 2;
        ++v19;
      }
      while (v13 != v19);
    }
    if ((BNNSGraphContextSetDynamicShapes_v2() & 0x80000000) == 0)
    {
      v21 = *a1;
      v22 = a1[1];
      if (*a1 != v22)
      {
        do
        {
          v23 = *v21;
          v24 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v21 + 48))(*v21);
          v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
          v26 = *v24;
          v27 = (v24[1] - *v24) >> 3;
          *(_QWORD *)(*v24 + 8 * (v27 - 1)) = 1;
          if (v27 != 1)
          {
            v28 = v26 - 16;
            v29 = *v25 - 8;
            v30 = 1;
            do
            {
              v30 *= *(_QWORD *)(v29 + 8 * v27);
              *(_QWORD *)(v28 + 8 * v27--) = v30;
            }
            while (v27 != 1);
          }
          ++v21;
        }
        while (v21 != v22);
        v31 = *a1;
        for (j = a1[1]; v31 != j; ++v31)
          (*(void (**)(_QWORD))(*(_QWORD *)*v31 + 136))(*v31);
      }
      v33 = v37 + 1;
      if (SHIBYTE(v41) < 0)
        goto LABEL_33;
      return v33;
    }
    v34 = *(_QWORD **)(v36 + 32);
    v42[0] = operator new(0x38uLL);
    *(_OWORD *)&v42[1] = xmmword_240BBBE50;
    strcpy((char *)v42[0], "BNNSGraphContextSetDynamicShapes returned an error");
    sub_240BB7D38(v34, 2, (uint64_t)v42);
  }
  else
  {
    v14 = *(_QWORD **)(a3 + 32);
    v42[0] = operator new(0x88uLL);
    *(_OWORD *)&v42[1] = xmmword_240BBBE60;
    strcpy((char *)v42[0], "Not enough memory allocated for BNNS shape inference args. This is likely a compiler bug, please file a radar against MLCompiler|all.");
    sub_240BB7D38(v14, 0xFFFF, (uint64_t)v42);
  }
  if (SHIBYTE(v42[2]) < 0)
    operator delete(v42[0]);
  v33 = 0;
  if (SHIBYTE(v41) < 0)
LABEL_33:
    operator delete(__p[0]);
  return v33;
}

void sub_240BAE158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BAE1E8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v18[2];
  char v19;
  void *__p[2];
  uint64_t v21;
  std::__shared_weak_count *v22[2];
  uint64_t v23;
  int v24;

  HIBYTE(v21) = 6;
  strcpy((char *)__p, "cindex");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v22);
  if (v24)
    sub_240B735D8();
  v7 = v22[0];
  v24 = -1;
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  v19 = 5;
  strcpy((char *)v18, "graph");
  sub_240BA7A94(a4, (uint64_t)v18, (uint64_t)v22);
  if (v24 != 2)
    sub_240B735D8();
  *(_OWORD *)__p = *(_OWORD *)v22;
  v21 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v24 = -1;
  if (v19 < 0)
    operator delete(v18[0]);
  sub_240BA16FC(a3, (uint64_t)__p, (uint64_t *)v22);
  if (v22[1])
  {
    v8 = std::__shared_weak_count::lock(v22[1]);
    v18[1] = v8;
    if (v8)
    {
      v9 = v8;
      v10 = v22[0];
      v18[0] = v22[0];
      if (v22[0])
      {
        ((void (*)(std::__shared_weak_count *))v22[0]->__vftable[4].~__shared_weak_count_0)(v22[0]);
        ((void (*)(std::__shared_weak_count *))v10->__vftable[3].~__shared_weak_count_0)(v10);
        v11 = BNNSGraphContextMake();
        v12 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 16 * (_QWORD)v7);
        *v12 = v11;
        v12[1] = v13;
        v14 = a2 + 1;
      }
      else
      {
        v14 = 0;
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      v14 = 0;
    }
    if (v22[1])
      std::__shared_weak_count::__release_weak(v22[1]);
  }
  else
  {
    v14 = 0;
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  return v14;
}

void sub_240BAE3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,std::__shared_weak_count *a24)
{
  sub_240B6FE78((uint64_t)&a10);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_240BAE440(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  void *__p[2];
  char v10;
  _QWORD v11[3];
  int v12;

  v10 = 6;
  strcpy((char *)__p, "cindex");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v11);
  if (v12)
    sub_240B735D8();
  v6 = v11[0];
  v12 = -1;
  if (v10 < 0)
    operator delete(__p[0]);
  BNNSGraphContextDestroy_v2();
  v7 = (_QWORD *)(*(_QWORD *)(a3 + 272) + 16 * v6);
  result = a2 + 1;
  *v7 = 0;
  v7[1] = 0;
  return result;
}

void sub_240BAE4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_240B73210((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_240BAE51C(_QWORD **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  std::ios_base *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  size_t v35;
  __int128 *p_dst;
  unint64_t v38;
  const void **v39;
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *__p[2];
  __int128 v51;
  int v52;
  uint64_t v53[19];
  __int128 __dst;
  unint64_t v55;

  HIBYTE(v55) = 6;
  strcpy((char *)&__dst, "cindex");
  sub_240BA7A94(a4, (uint64_t)&__dst, (uint64_t)&v44);
  if (v46)
    sub_240B735D8();
  v46 = -1;
  if (SHIBYTE(v55) < 0)
    operator delete((void *)__dst);
  HIBYTE(v55) = 14;
  strcpy((char *)&__dst, "workspace_size");
  sub_240BA7A94(a4, (uint64_t)&__dst, (uint64_t)&v44);
  if (v46)
    sub_240B735D8();
  v10 = v44;
  v46 = -1;
  if (SHIBYTE(v55) < 0)
    operator delete((void *)__dst);
  v43 = a2;
  if (v10 >= 1)
    (*(void (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  v11 = v10 != 0;
  v12 = (uint64_t)*a1;
  if (v11 >= a1[1] - *a1)
  {
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(_QWORD *)(v12 + 8 * v11);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 168))(v15);
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 128))(v15);
      ++v14;
      v18 = (uint64_t *)(*(_QWORD *)(a3 + 248) + v13);
      *v18 = v16;
      v18[1] = v17;
      ++v11;
      v12 = (uint64_t)*a1;
      v13 += 16;
    }
    while (v11 < a1[1] - *a1);
  }
  v19 = *a5;
  if ((unint64_t)(a5[1] - *a5) >= 9)
  {
    v20 = 16 * v14;
    v21 = 1;
    do
    {
      v22 = *(_QWORD *)(v19 + 8 * v21);
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 176))(v22);
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 128))(v22);
      v25 = (uint64_t *)(*(_QWORD *)(a3 + 248) + v20);
      *v25 = v23;
      v25[1] = v24;
      ++v21;
      v19 = *a5;
      v20 += 16;
    }
    while (v21 < (a5[1] - *a5) >> 3);
  }
  if (!BNNSGraphContextExecute_v2())
    return v43 + 1;
  v26 = MEMORY[0x24BEDB870];
  v27 = MEMORY[0x24BEDB870] + 64;
  v28 = (uint64_t *)MEMORY[0x24BEDB800];
  v29 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v30 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  v53[0] = MEMORY[0x24BEDB870] + 64;
  v44 = v29;
  *(uint64_t *)((char *)&v44 + *(_QWORD *)(v29 - 24)) = v30;
  v31 = (std::ios_base *)((char *)&v44 + *(_QWORD *)(v44 - 24));
  std::ios_base::init(v31, &v45);
  v31[1].__vftable = 0;
  v31[1].__fmtflags_ = -1;
  v44 = v26 + 24;
  v53[0] = v27;
  std::streambuf::basic_streambuf();
  v32 = MEMORY[0x24BEDB848];
  v45 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v51 = 0u;
  v52 = 16;
  sub_240B8AA18(&v44, (uint64_t)"BNNSGraphExecute failed (code ", 30);
  v33 = (_QWORD *)std::ostream::operator<<();
  sub_240B8AA18(v33, (uint64_t)")", 1);
  v34 = *(_QWORD **)(a3 + 32);
  if ((v52 & 0x10) != 0)
  {
    v38 = *((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1) < v49)
    {
      *((_QWORD *)&v51 + 1) = v49;
      v38 = v49;
    }
    v39 = (const void **)&v48;
  }
  else
  {
    if ((v52 & 8) == 0)
    {
      v35 = 0;
      HIBYTE(v55) = 0;
      p_dst = &__dst;
      goto LABEL_34;
    }
    v39 = (const void **)&v46;
    v38 = v47;
  }
  v40 = *v39;
  v35 = v38 - (_QWORD)*v39;
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v35 >= 0x17)
  {
    v41 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v41 = v35 | 7;
    v42 = v41 + 1;
    p_dst = (__int128 *)operator new(v41 + 1);
    *((_QWORD *)&__dst + 1) = v35;
    v55 = v42 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v55) = v38 - *(_BYTE *)v39;
    p_dst = &__dst;
    if (!v35)
      goto LABEL_34;
  }
  memmove(p_dst, v40, v35);
LABEL_34:
  *((_BYTE *)p_dst + v35) = 0;
  sub_240BB7D38(v34, 2, (uint64_t)&__dst);
  if (SHIBYTE(v55) < 0)
    operator delete((void *)__dst);
  v44 = *v28;
  *(uint64_t *)((char *)&v44 + *(_QWORD *)(v44 - 24)) = v28[3];
  v45 = v32 + 16;
  if (SBYTE7(v51) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v53);
  return 0;
}

void sub_240BAE970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 - 89) < 0)
    operator delete(*(void **)(v4 - 112));
  sub_240B8A994((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_240BAE9FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::string::size_type v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void **v26;
  uint64_t v27;
  void *v28;
  char *v29;
  size_t v30;
  int v31;
  size_t size;
  size_t v33;
  _QWORD *v34;
  std::string *p_dst;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  std::string *v39;
  size_t v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string::size_type v45;
  size_t v46;
  unint64_t v47;
  std::string *v48;
  unint64_t v49;
  std::string *v50;
  size_t v51;
  _BYTE *v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  std::string::size_type v56;
  void *v57;
  std::string::size_type v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  int v63;
  std::string __dst;
  std::string v65;
  std::string v66;
  void *__p[2];
  char *v68;
  std::string v69;
  std::string v70;
  _QWORD v71[3];
  _QWORD *v72;
  void *v73[2];
  char v74;
  _QWORD v75[3];
  _QWORD *v76;
  void *v77[2];
  char v78;
  _QWORD v79[3];
  _QWORD *v80;
  void *v81[2];
  char v82;
  _QWORD v83[3];
  _QWORD *v84;
  void *v85[2];
  char v86;
  _QWORD v87[3];
  _QWORD *v88;
  void *v89[2];
  char v90;
  _QWORD v91[3];
  _QWORD *v92;
  uint64_t v93;

  v93 = *MEMORY[0x24BDAC8D0];
  HIBYTE(v68) = 4;
  v3 = (_QWORD *)(a1 + 8);
  strcpy((char *)__p, "name");
  sub_240BA7A94((_QWORD *)(a1 + 8), (uint64_t)__p, (uint64_t)&v70);
  if (LODWORD(v71[0]) != 2)
    sub_240B735D8();
  v4 = v70.__r_.__value_.__r.__words[0];
  v5 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
  memset(&v70, 0, sizeof(v70));
  LODWORD(v71[0]) = -1;
  if (SHIBYTE(v68) < 0)
    operator delete(__p[0]);
  HIBYTE(v68) = 4;
  strcpy((char *)__p, "kind");
  v62 = (void *)v4;
  v63 = v5;
  sub_240BA7A94(v3, (uint64_t)__p, (uint64_t)&v70);
  if (LODWORD(v71[0]) != 2)
    sub_240B735D8();
  v69 = v70;
  memset(&v70, 0, sizeof(v70));
  LODWORD(v71[0]) = -1;
  if (SHIBYTE(v68) < 0)
    operator delete(__p[0]);
  *((_BYTE *)&v70.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v70, "Activation");
  v71[0] = &off_25110CDB8;
  v71[1] = sub_240BAF538;
  v74 = 15;
  v72 = v71;
  strcpy((char *)v73, "BroadcastMatMul");
  v75[0] = &off_25110CDB8;
  v75[1] = sub_240BAFB68;
  v78 = 11;
  v76 = v75;
  strcpy((char *)v77, "Convolution");
  v79[0] = &off_25110CDB8;
  v79[1] = sub_240BB05A4;
  v82 = 14;
  v80 = v79;
  strcpy((char *)v81, "FullyConnected");
  v83[0] = &off_25110CDB8;
  v83[1] = sub_240BB12D8;
  v84 = v83;
  v86 = 7;
  strcpy((char *)v85, "Permute");
  v87[0] = &off_25110CDB8;
  v87[1] = sub_240BB1A80;
  v90 = 10;
  v88 = v87;
  strcpy((char *)v89, "Arithmetic");
  v91[0] = &off_25110CDB8;
  v91[1] = sub_240BB1EEC;
  v92 = v91;
  sub_240BB2AD4((uint64_t)__p, (uint64_t)&v70, 6);
  v7 = v92;
  if (v92 == v91)
  {
    v8 = 4;
    v7 = v91;
  }
  else
  {
    if (!v92)
      goto LABEL_12;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v7 + 8 * v8))(v7, v6);
LABEL_12:
  if (v90 < 0)
    operator delete(v89[0]);
  v9 = v88;
  if (v88 == v87)
  {
    v10 = 4;
    v9 = v87;
  }
  else
  {
    if (!v88)
      goto LABEL_19;
    v10 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v9 + 8 * v10))(v9, v6);
LABEL_19:
  if (v86 < 0)
    operator delete(v85[0]);
  v11 = v84;
  if (v84 == v83)
  {
    v13 = 4;
    v11 = v83;
    v12 = v3;
  }
  else
  {
    v12 = v3;
    if (!v84)
      goto LABEL_26;
    v13 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v11 + 8 * v13))(v11, v6);
LABEL_26:
  if (v82 < 0)
    operator delete(v81[0]);
  v14 = v80;
  if (v80 == v79)
  {
    v15 = 4;
    v14 = v79;
  }
  else
  {
    if (!v80)
      goto LABEL_33;
    v15 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v14 + 8 * v15))(v14, v6);
LABEL_33:
  if (v78 < 0)
    operator delete(v77[0]);
  v16 = v76;
  if (v76 == v75)
  {
    v17 = 4;
    v16 = v75;
  }
  else
  {
    if (!v76)
      goto LABEL_40;
    v17 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v16 + 8 * v17))(v16, v6);
LABEL_40:
  if (v74 < 0)
    operator delete(v73[0]);
  v18 = v72;
  if (v72 == v71)
  {
    v20 = 4;
    v18 = v71;
    v19 = a2;
  }
  else
  {
    v19 = a2;
    if (!v72)
      goto LABEL_47;
    v20 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v18 + 8 * v20))(v18, v6);
LABEL_47:
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  v21 = sub_240BB4468(__p, (uint64_t)&v69);
  if (v21)
  {
    sub_240B72000((uint64_t)&v70, (uint64_t)v12);
    v22 = v21[8];
    if (!v22)
      sub_240B82B78();
    v24 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v22 + 48))(v22, &v70, v19);
    v25 = (void **)v70.__r_.__value_.__r.__words[2];
    if (v70.__r_.__value_.__r.__words[2])
    {
      do
      {
        v26 = (void **)*v25;
        v27 = *((unsigned int *)v25 + 16);
        if ((_DWORD)v27 != -1)
          ((void (*)(std::string *, void **))off_25110CD80[v27])(&v66, v25 + 5);
        *((_DWORD *)v25 + 16) = -1;
        if (*((char *)v25 + 39) < 0)
          operator delete(v25[2]);
        operator delete(v25);
        v25 = v26;
      }
      while (v26);
    }
    v28 = (void *)v70.__r_.__value_.__r.__words[0];
    v70.__r_.__value_.__r.__words[0] = 0;
    if (v28)
      operator delete(v28);
    v29 = v68;
    if (!v68)
      goto LABEL_135;
LABEL_146:
    while (1)
    {
      v59 = *(char **)v29;
      v60 = (char *)*((_QWORD *)v29 + 8);
      if (v60 == v29 + 40)
        break;
      if (v60)
      {
        v61 = 5;
LABEL_150:
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v60 + 8 * v61))(v60, v23);
      }
      if (v29[39] < 0)
        operator delete(*((void **)v29 + 2));
      operator delete(v29);
      v29 = v59;
      if (!v59)
        goto LABEL_135;
    }
    v60 = v29 + 40;
    v61 = 4;
    goto LABEL_150;
  }
  *((_BYTE *)&v65.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v65, "name");
  sub_240BA7A94(v12, (uint64_t)&v65, (uint64_t)&v70);
  if (LODWORD(v71[0]) != 2)
    sub_240B735D8();
  v66 = v70;
  memset(&v70, 0, sizeof(v70));
  LODWORD(v71[0]) = -1;
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  v30 = 0x7FFFFFFFFFFFFFF7;
  v31 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
  else
    size = v66.__r_.__value_.__l.__size_;
  v33 = size + 23;
  if (size + 23 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  v34 = *(_QWORD **)(v19 + 32);
  if (size >= 0xFFFFFFFFFFFFFFE9)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = size + 23;
LABEL_74:
    if (v31 >= 0)
      v38 = &v66;
    else
      v38 = (std::string *)v66.__r_.__value_.__r.__words[0];
    memmove(p_dst, v38, size);
    goto LABEL_78;
  }
  v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17)
    v36 = v33 | 7;
  v37 = v36 + 1;
  p_dst = (std::string *)operator new(v36 + 1);
  __dst.__r_.__value_.__l.__size_ = size + 23;
  __dst.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (size)
    goto LABEL_74;
LABEL_78:
  strcpy((char *)p_dst + size, ": unknown filter type '");
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &v69;
  else
    v39 = (std::string *)v69.__r_.__value_.__r.__words[0];
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
  else
    v40 = v69.__r_.__value_.__l.__size_;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = 22;
  else
    v41 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v42 = __dst.__r_.__value_.__l.__size_;
  if (v41 - v42 >= v40)
  {
    if (v40)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &__dst;
      else
        v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      memmove((char *)v43 + v42, v39, v40);
      v44 = v42 + v40;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        __dst.__r_.__value_.__l.__size_ = v42 + v40;
      else
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v44 & 0x7F;
      v43->__r_.__value_.__s.__data_[v44] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&__dst, v41, v42 + v40 - v41, v42, v42, 0, v40, (const std::string::value_type *)v39);
  }
  v65 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = 22;
  else
    v45 = (v65.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  else
    v46 = v65.__r_.__value_.__l.__size_;
  if (v45 - v46 >= 2)
  {
    v50 = &v65;
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = (std::string *)v65.__r_.__value_.__r.__words[0];
    *(_WORD *)((char *)&v50->__r_.__value_.__l.__data_ + v46) = 11815;
    v51 = v46 + 2;
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      v65.__r_.__value_.__l.__size_ = v46 + 2;
    else
      *((_BYTE *)&v65.__r_.__value_.__s + 23) = v51 & 0x7F;
    v52 = (char *)v50 + v51;
  }
  else
  {
    v47 = v46 + 2;
    if (0x7FFFFFFFFFFFFFF6 - v45 < v46 + 2 - v45)
      sub_240B6FFF4();
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v65;
    else
      v48 = (std::string *)v65.__r_.__value_.__r.__words[0];
    if (v45 <= 0x3FFFFFFFFFFFFFF2)
    {
      v49 = 2 * v45;
      if (v47 > 2 * v45)
        v49 = v46 + 2;
      if (v49 >= 0x17)
      {
        v53 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        v54 = v49 | 7;
        if (v54 == 23)
          v54 = v53;
        v30 = v54 + 1;
      }
      else
      {
        v30 = 23;
      }
    }
    v55 = operator new(v30);
    v56 = (std::string::size_type)v55;
    if (v46)
      memmove(v55, v48, v46);
    *(_WORD *)(v56 + v46) = 11815;
    if (v45 != 22)
      operator delete(v48);
    v65.__r_.__value_.__l.__size_ = v46 + 2;
    v65.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    v65.__r_.__value_.__r.__words[0] = v56;
    v52 = (_BYTE *)(v56 + v47);
  }
  *v52 = 0;
  v70 = v65;
  memset(&v65, 0, sizeof(v65));
  sub_240BB7D38(v34, 5, (uint64_t)&v70);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v70.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_132:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_133;
LABEL_155:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v31 & 0x80000000) == 0)
        goto LABEL_134;
      goto LABEL_156;
    }
  }
  else if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_132;
  }
  operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_155;
LABEL_133:
  if ((v31 & 0x80000000) == 0)
    goto LABEL_134;
LABEL_156:
  operator delete(v66.__r_.__value_.__l.__data_);
LABEL_134:
  v24 = 0;
  v29 = v68;
  if (v68)
    goto LABEL_146;
LABEL_135:
  v57 = __p[0];
  __p[0] = 0;
  if (v57)
    operator delete(v57);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  HIBYTE(v68) = 4;
  strcpy((char *)__p, "slot");
  sub_240BA7A94(v12, (uint64_t)__p, (uint64_t)&v70);
  if (LODWORD(v71[0]))
    sub_240B735D8();
  v58 = v70.__r_.__value_.__r.__words[0];
  LODWORD(v71[0]) = -1;
  if (SHIBYTE(v68) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(v19 + 224) + 8 * v58) = v24;
  if (v63 < 0)
    operator delete(v62);
}

void sub_240BAF3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, int a11, int a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  int v51;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v51 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((v51 & 0x80000000) == 0)
  {
LABEL_6:
    sub_240B75EE0((uint64_t)&a31);
    if (a44 < 0)
      operator delete(a39);
    if (a12 < 0)
    {
      operator delete(a10);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  operator delete(a28);
  goto LABEL_6;
}

uint64_t sub_240BAF538(_QWORD *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  void *v23;
  float v24;
  float v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v32[2];
  char v33;
  void *__p[4];
  _BYTE v35[24];
  _BYTE v36[24];
  int v37;
  void *v38;
  _BYTE *v39;
  _BYTE v40[24];
  int v41;
  void *v42;
  _BYTE *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = 0;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v44 = 0u;
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "inputs");
  sub_240BA7A94(a1, (uint64_t)__p, (uint64_t)v40);
  sub_240BB2B58((uint64_t)v40, a2, (uint64_t **)&v42);
  if (v41 != -1)
    ((void (*)(void **, _BYTE *))off_25110CD80[v41])(&v38, v40);
  v41 = -1;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "outputs");
  sub_240BA7A94(a1, (uint64_t)__p, (uint64_t)v36);
  sub_240BB2B58((uint64_t)v36, a2, (uint64_t **)&v38);
  if (v37 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_25110CD80[v37])(v35, v36);
  v37 = -1;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (v43 - (_BYTE *)v42 == 8)
  {
    if (v39 - (_BYTE *)v38 == 8)
    {
      v4 = (__int128 *)sub_240BA8C34(*(_QWORD *)v42);
      v5 = *v4;
      v6 = v4[2];
      v45 = v4[1];
      v46 = v6;
      v44 = v5;
      v7 = v4[3];
      v8 = v4[4];
      v9 = v4[6];
      v49 = v4[5];
      v50 = v9;
      v47 = v7;
      v48 = v8;
      v10 = v4[7];
      v11 = v4[8];
      v12 = v4[10];
      v53 = v4[9];
      v54 = v12;
      v51 = v10;
      v52 = v11;
      v13 = (__int128 *)sub_240BA8C34(*(_QWORD *)v38);
      v14 = *v13;
      v15 = v13[2];
      v56 = v13[1];
      v57 = v15;
      v55 = v14;
      v16 = v13[3];
      v17 = v13[4];
      v18 = v13[6];
      v60 = v13[5];
      v61 = v18;
      v58 = v16;
      v59 = v17;
      v19 = v13[7];
      v20 = v13[8];
      v21 = v13[10];
      v64 = v13[9];
      v65 = v21;
      v62 = v19;
      v63 = v20;
      v33 = 3;
      LODWORD(v32[0]) = 7627617;
      sub_240BA7A94(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3]) != 2)
        sub_240B735D8();
      *(_OWORD *)v35 = *(_OWORD *)__p;
      *(void **)&v35[16] = __p[2];
      memset(__p, 0, 24);
      LODWORD(__p[3]) = -1;
      if (v33 < 0)
        operator delete(v32[0]);
      v22 = sub_240BB2E5C((uint64_t)v35);
      v33 = 5;
      strcpy((char *)v32, "alpha");
      sub_240BA7A94(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3]) != 1)
        sub_240B735D8();
      v23 = __p[0];
      LODWORD(__p[3]) = -1;
      if (v33 < 0)
        operator delete(v32[0]);
      v33 = 4;
      strcpy((char *)v32, "beta");
      sub_240BA7A94(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3]) != 1)
        sub_240B735D8();
      v24 = *(double *)&v23;
      v25 = *(double *)__p;
      LODWORD(__p[3]) = -1;
      if (v33 < 0)
        operator delete(v32[0]);
      *(_QWORD *)&v66 = __PAIR64__(LODWORD(v24), v22);
      *((_QWORD *)&v66 + 1) = LODWORD(v25) | 0x100000000;
      v67 = 0u;
      v68 = 0u;
      v33 = 4;
      strcpy((char *)v32, "axis");
      sub_240BA7A94(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3]))
        sub_240B735D8();
      v26 = (char)__p[0];
      LODWORD(__p[3]) = -1;
      if (v33 < 0)
        operator delete(v32[0]);
      LODWORD(v69) = 1 << v26;
      if ((v35[23] & 0x80000000) != 0)
        operator delete(*(void **)v35);
      memset(__p, 0, sizeof(__p));
      LODWORD(__p[0]) = 1;
      __p[1] = *(void **)(a2 + 472);
      v27 = MEMORY[0x24268AA10](&v44, __p);
      if (!v27)
      {
        v28 = *(_QWORD **)(a2 + 32);
        *(_QWORD *)v35 = operator new(0x20uLL);
        *(_OWORD *)&v35[8] = xmmword_240BBBE90;
        strcpy(*(char **)v35, "Error creating BNNSFilter");
        sub_240BB7D38(v28, 0xFFFF, (uint64_t)v35);
        if ((v35[23] & 0x80000000) != 0)
          operator delete(*(void **)v35);
      }
      goto LABEL_33;
    }
    v30 = *(_QWORD **)(a2 + 32);
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_240BBBE80;
    strcpy((char *)__p[0], "ICE: activation produces 1 output");
    sub_240BB7D38(v30, 0xFFFF, (uint64_t)__p);
  }
  else
  {
    v29 = *(_QWORD **)(a2 + 32);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_240BBBE70;
    strcpy((char *)__p[0], "ICE: activation takes 1 input");
    sub_240BB7D38(v29, 0xFFFF, (uint64_t)__p);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v27 = 0;
LABEL_33:
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  return v27;
}

void sub_240BAFA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (a28 < 0)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a41)
    operator delete(a41);
  _Unwind_Resume(exception_object);
}

void *sub_240BAFB68(_QWORD *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  size_t *v15;
  size_t *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  size_t *v20;
  BOOL v21;
  size_t *v22;
  size_t v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  size_t *v35;
  size_t *v36;
  size_t v37;
  uint64_t v38;
  size_t *v39;
  BOOL v40;
  size_t *v41;
  size_t v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  size_t *v54;
  size_t *v55;
  size_t v56;
  uint64_t v57;
  size_t *v58;
  BOOL v59;
  size_t *v60;
  size_t v61;
  float v62;
  float v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v70;
  __int128 v71;
  _BYTE v72[24];
  int v73;
  BNNSFilterParameters __p;
  _BYTE v75[24];
  int v76;
  void *v77;
  _BYTE *v78;
  _BYTE v79[24];
  int v80;
  void *v81;
  _BYTE *v82;
  BNNSLayerParametersBroadcastMatMul layer_params;

  bzero(&layer_params, 0x220uLL);
  HIBYTE(__p.alloc_memory) = 6;
  strcpy((char *)&__p, "inputs");
  sub_240BA7A94(a1, (uint64_t)&__p, (uint64_t)v79);
  sub_240BB2B58((uint64_t)v79, a2, (uint64_t **)&v81);
  if (v80 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_25110CD80[v80])(v72, v79);
  v80 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0)
    operator delete(*(void **)&__p.flags);
  HIBYTE(__p.alloc_memory) = 7;
  strcpy((char *)&__p, "outputs");
  sub_240BA7A94(a1, (uint64_t)&__p, (uint64_t)v75);
  sub_240BB2B58((uint64_t)v75, a2, (uint64_t **)&v77);
  if (v76 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_25110CD80[v76])(v72, v75);
  v76 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0)
    operator delete(*(void **)&__p.flags);
  if (v82 - (_BYTE *)v81 == 16)
  {
    if (v78 - (_BYTE *)v77 == 8)
    {
      v4 = (__int128 *)sub_240BA8C34(*(_QWORD *)v81);
      v5 = *v4;
      v6 = v4[2];
      *(_OWORD *)&layer_params.iA_desc.size[1] = v4[1];
      *(_OWORD *)&layer_params.iA_desc.size[3] = v6;
      *(_OWORD *)&layer_params.iA_desc.flags = v5;
      v7 = v4[3];
      v8 = v4[4];
      v9 = v4[6];
      *(_OWORD *)&layer_params.iA_desc.stride[1] = v4[5];
      *(_OWORD *)&layer_params.iA_desc.stride[3] = v9;
      *(_OWORD *)&layer_params.iA_desc.size[5] = v7;
      *(_OWORD *)&layer_params.iA_desc.size[7] = v8;
      v10 = v4[7];
      v11 = v4[8];
      v12 = v4[10];
      *(_OWORD *)&layer_params.iA_desc.data_type = v4[9];
      *(_OWORD *)&layer_params.iA_desc.table_data_type = v12;
      *(_OWORD *)&layer_params.iA_desc.stride[5] = v10;
      *(_OWORD *)&layer_params.iA_desc.stride[7] = v11;
      v13 = sub_240BBA100(*(_QWORD *)v81);
      if ((unint64_t)(v13 - 1) < 5)
        layer_params.iA_desc.layout = dword_240BBBF08[v13 - 1];
      v14 = sub_240BBA100(*(_QWORD *)v81);
      if (v14)
      {
        v15 = (size_t *)((char *)&layer_params.iA_desc + 8 * v14);
        if (v15 > layer_params.iA_desc.size)
        {
          v16 = &layer_params.iA_desc.size[1];
          do
          {
            v17 = *(v16 - 1);
            *(v16 - 1) = *v15;
            *v15-- = v17;
            v18 = v16++ >= v15;
          }
          while (!v18);
        }
      }
      v19 = sub_240BBA100(*(_QWORD *)v81);
      v20 = &layer_params.iA_desc.size[v19 + 7];
      if (v19)
        v21 = v20 > layer_params.iA_desc.stride;
      else
        v21 = 0;
      if (v21)
      {
        v22 = &layer_params.iA_desc.stride[1];
        do
        {
          v23 = *(v22 - 1);
          *(v22 - 1) = *v20;
          *v20-- = v23;
          v18 = v22++ >= v20;
        }
        while (!v18);
      }
      v24 = (__int128 *)sub_240BA8C34(*((_QWORD *)v81 + 1));
      v25 = *v24;
      v26 = v24[2];
      *(_OWORD *)&layer_params.iB_desc.size[1] = v24[1];
      *(_OWORD *)&layer_params.iB_desc.size[3] = v26;
      *(_OWORD *)&layer_params.iB_desc.flags = v25;
      v27 = v24[3];
      v28 = v24[4];
      v29 = v24[6];
      *(_OWORD *)&layer_params.iB_desc.stride[1] = v24[5];
      *(_OWORD *)&layer_params.iB_desc.stride[3] = v29;
      *(_OWORD *)&layer_params.iB_desc.size[5] = v27;
      *(_OWORD *)&layer_params.iB_desc.size[7] = v28;
      v30 = v24[7];
      v31 = v24[8];
      v32 = v24[10];
      *(_OWORD *)&layer_params.iB_desc.data_type = v24[9];
      *(_OWORD *)&layer_params.iB_desc.table_data_type = v32;
      *(_OWORD *)&layer_params.iB_desc.stride[5] = v30;
      *(_OWORD *)&layer_params.iB_desc.stride[7] = v31;
      v33 = sub_240BBA100(*((_QWORD *)v81 + 1));
      if ((unint64_t)(v33 - 1) <= 4)
        layer_params.iB_desc.layout = dword_240BBBF08[v33 - 1];
      v34 = sub_240BBA100(*((_QWORD *)v81 + 1));
      if (v34)
      {
        v35 = (size_t *)((char *)&layer_params.iB_desc + 8 * v34);
        if (v35 > layer_params.iB_desc.size)
        {
          v36 = &layer_params.iB_desc.size[1];
          do
          {
            v37 = *(v36 - 1);
            *(v36 - 1) = *v35;
            *v35-- = v37;
            v18 = v36++ >= v35;
          }
          while (!v18);
        }
      }
      v38 = sub_240BBA100(*((_QWORD *)v81 + 1));
      v39 = &layer_params.iB_desc.size[v38 + 7];
      if (v38)
        v40 = v39 > layer_params.iB_desc.stride;
      else
        v40 = 0;
      if (v40)
      {
        v41 = &layer_params.iB_desc.stride[1];
        do
        {
          v42 = *(v41 - 1);
          *(v41 - 1) = *v39;
          *v39-- = v42;
          v18 = v41++ >= v39;
        }
        while (!v18);
      }
      v43 = (__int128 *)sub_240BA8C34(*(_QWORD *)v77);
      v44 = *v43;
      v45 = v43[2];
      *(_OWORD *)&layer_params.o_desc.size[1] = v43[1];
      *(_OWORD *)&layer_params.o_desc.size[3] = v45;
      *(_OWORD *)&layer_params.o_desc.flags = v44;
      v46 = v43[3];
      v47 = v43[4];
      v48 = v43[6];
      *(_OWORD *)&layer_params.o_desc.stride[1] = v43[5];
      *(_OWORD *)&layer_params.o_desc.stride[3] = v48;
      *(_OWORD *)&layer_params.o_desc.size[5] = v46;
      *(_OWORD *)&layer_params.o_desc.size[7] = v47;
      v49 = v43[7];
      v50 = v43[8];
      v51 = v43[10];
      *(_OWORD *)&layer_params.o_desc.data_type = v43[9];
      *(_OWORD *)&layer_params.o_desc.table_data_type = v51;
      *(_OWORD *)&layer_params.o_desc.stride[5] = v49;
      *(_OWORD *)&layer_params.o_desc.stride[7] = v50;
      v52 = sub_240BBA100(*(_QWORD *)v77);
      if ((unint64_t)(v52 - 1) <= 4)
        layer_params.o_desc.layout = dword_240BBBF08[v52 - 1];
      v53 = sub_240BBA100(*(_QWORD *)v77);
      if (v53)
      {
        v54 = (size_t *)((char *)&layer_params.o_desc + 8 * v53);
        if (v54 > layer_params.o_desc.size)
        {
          v55 = &layer_params.o_desc.size[1];
          do
          {
            v56 = *(v55 - 1);
            *(v55 - 1) = *v54;
            *v54-- = v56;
            v18 = v55++ >= v54;
          }
          while (!v18);
        }
      }
      v57 = sub_240BBA100(*(_QWORD *)v77);
      v58 = &layer_params.o_desc.size[v57 + 7];
      if (v57)
        v59 = v58 > layer_params.o_desc.stride;
      else
        v59 = 0;
      if (v59)
      {
        v60 = &layer_params.o_desc.stride[1];
        do
        {
          v61 = *(v60 - 1);
          *(v60 - 1) = *v58;
          *v58-- = v61;
          v18 = v60++ >= v58;
        }
        while (!v18);
      }
      v72[23] = 5;
      strcpy(v72, "alpha");
      sub_240BA7A94(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory) != 1)
        sub_240B735D8();
      v62 = *(double *)&__p.flags;
      layer_params.alpha = v62;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      v72[23] = 4;
      strcpy(v72, "beta");
      sub_240BA7A94(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory) != 1)
        sub_240B735D8();
      v63 = *(double *)&__p.flags;
      layer_params.beta = v63;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      v72[23] = 6;
      strcpy(v72, "transA");
      sub_240BA7A94(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory))
        sub_240B735D8();
      layer_params.transA = *(_QWORD *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      v72[23] = 6;
      strcpy(v72, "transB");
      sub_240BA7A94(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory))
        sub_240B735D8();
      layer_params.transB = *(_QWORD *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      v72[23] = 9;
      strcpy(v72, "quadratic");
      sub_240BA7A94(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory))
        sub_240B735D8();
      layer_params.quadratic = *(_QWORD *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      v72[23] = 12;
      strcpy(v72, "a_is_weights");
      sub_240BA7A94(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory))
        sub_240B735D8();
      layer_params.a_is_weights = *(_QWORD *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      v72[23] = 12;
      strcpy(v72, "b_is_weights");
      sub_240BA7A94(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory))
        sub_240B735D8();
      layer_params.b_is_weights = *(_QWORD *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      memset(&__p, 0, sizeof(__p));
      __p.flags = 1;
      v70 = operator new(0x20uLL);
      v71 = xmmword_240BBB850;
      strcpy((char *)v70, "low_precision_accumulation");
      sub_240BA7A94(a1, (uint64_t)&v70, (uint64_t)v72);
      if (v73)
        sub_240B735D8();
      v64 = *(_QWORD *)v72;
      v73 = -1;
      if (SHIBYTE(v71) < 0)
        operator delete(v70);
      if (v64)
        __p.flags = 3145729;
      __p.n_threads = *(_QWORD *)(a2 + 472);
      v65 = BNNSFilterCreateLayerBroadcastMatMul(&layer_params, &__p);
      if (!v65)
      {
        v66 = *(_QWORD **)(a2 + 32);
        *(_QWORD *)v72 = operator new(0x20uLL);
        *(_OWORD *)&v72[8] = xmmword_240BBBE90;
        strcpy(*(char **)v72, "Error creating BNNSFilter");
        sub_240BB7D38(v66, 0xFFFF, (uint64_t)v72);
        if ((v72[23] & 0x80000000) != 0)
          operator delete(*(void **)v72);
      }
      goto LABEL_90;
    }
    v68 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&__p.flags = operator new(0x28uLL);
    *(_OWORD *)&__p.n_threads = xmmword_240BBBE40;
    strcpy(*(char **)&__p.flags, "ICE: BroadcastMatMul produces 1 output");
    sub_240BB7D38(v68, 0xFFFF, (uint64_t)&__p);
  }
  else
  {
    v67 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&__p.flags = operator new(0x28uLL);
    *(_OWORD *)&__p.n_threads = xmmword_240BBBEA0;
    strcpy(*(char **)&__p.flags, "ICE: BroadcastMatMul takes 2 inputs");
    sub_240BB7D38(v67, 0xFFFF, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.alloc_memory) < 0)
    operator delete(*(void **)&__p.flags);
  v65 = 0;
LABEL_90:
  if (v77)
  {
    v78 = v77;
    operator delete(v77);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  return v65;
}

void sub_240BB046C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (a21 < 0)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a41)
    operator delete(a41);
  _Unwind_Resume(exception_object);
}

void *sub_240BB05A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  uint64_t *v41;
  BNNSActivationFunction v42;
  double v43;
  float v44;
  float v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  void *v49;
  _QWORD *v51;
  const void *v52;
  size_t v53;
  size_t *v54;
  size_t v55;
  const void *v56;
  size_t n_threads;
  int64_t v58;
  size_t *v59;
  size_t v60;
  size_t *v61;
  _QWORD *v62;
  __n128 v63;
  size_t *v64;
  _QWORD *v65;
  _QWORD *v66;
  const void *v67;
  size_t v68;
  _OWORD *v69;
  __int128 v70;
  uint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  void *v78[2];
  BNNSAlloc alloc_memory;
  int v80;
  _BYTE v81[24];
  BNNSFilterParameters filter_params;
  BNNSLayerParametersConvolution __p;
  _BYTE v84[24];
  int v85;
  char *v86;
  uint64_t *v87;
  _BYTE v88[24];
  int v89;
  char *v90;
  uint64_t *v91;

  HIBYTE(__p.i_desc.size[1]) = 6;
  strcpy((char *)&__p, "inputs");
  sub_240BA7A94(a1, (uint64_t)&__p, (uint64_t)v88);
  sub_240BB2B58((uint64_t)v88, a2, (uint64_t **)&v90);
  if (v89 != -1)
    ((void (*)(BNNSFilterParameters *, _BYTE *))off_25110CD80[v89])(&filter_params, v88);
  v89 = -1;
  if (SHIBYTE(__p.i_desc.size[1]) < 0)
    operator delete(*(void **)&__p.i_desc.flags);
  HIBYTE(__p.i_desc.size[1]) = 7;
  strcpy((char *)&__p, "outputs");
  sub_240BA7A94(a1, (uint64_t)&__p, (uint64_t)v84);
  sub_240BB2B58((uint64_t)v84, a2, (uint64_t **)&v86);
  if (v85 != -1)
    ((void (*)(BNNSFilterParameters *, _BYTE *))off_25110CD80[v85])(&filter_params, v84);
  v85 = -1;
  if (SHIBYTE(__p.i_desc.size[1]) < 0)
    operator delete(*(void **)&__p.i_desc.flags);
  if ((((char *)v91 - v90) & 0xFFFFFFFFFFFFFFF0) != 0x10)
  {
    v46 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&__p.i_desc.flags = operator new(0x20uLL);
    *(_OWORD *)__p.i_desc.size = xmmword_240BBBE70;
    strcpy(*(char **)&__p.i_desc.flags, "ICE: conv takes 2-3 arguments");
    sub_240BB7D38(v46, 0xFFFF, (uint64_t)&__p);
LABEL_29:
    if ((SHIBYTE(__p.i_desc.size[1]) & 0x80000000) == 0)
      goto LABEL_32;
    v48 = *(void **)&__p.i_desc.flags;
LABEL_31:
    operator delete(v48);
    goto LABEL_32;
  }
  if ((char *)v87 - v86 != 8)
  {
    v47 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&__p.i_desc.flags = operator new(0x20uLL);
    *(_OWORD *)__p.i_desc.size = xmmword_240BBBEB0;
    strcpy(*(char **)&__p.i_desc.flags, "ICE: conv produces 1 output");
    sub_240BB7D38(v47, 0xFFFF, (uint64_t)&__p);
    goto LABEL_29;
  }
  memset(&__p.bias, 0, 312);
  v4 = sub_240BA8C34(*((_QWORD *)v90 + 1));
  if (!*(_QWORD *)(v4 + 136))
  {
    v51 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&filter_params.flags = operator new(0x30uLL);
    *(_OWORD *)&filter_params.n_threads = xmmword_240BBBEC0;
    strcpy(*(char **)&filter_params.flags, "Weight data uninitialized in BNNS metadata");
    sub_240BB7D38(v51, 0xFFFF, (uint64_t)&filter_params);
    if ((SHIBYTE(filter_params.alloc_memory) & 0x80000000) == 0)
      goto LABEL_32;
    v48 = *(void **)&filter_params.flags;
    goto LABEL_31;
  }
  v5 = (__int128 *)sub_240BA8C34(*(_QWORD *)v90);
  v6 = *v5;
  v7 = v5[2];
  *(_OWORD *)&__p.i_desc.size[1] = v5[1];
  *(_OWORD *)&__p.i_desc.size[3] = v7;
  *(_OWORD *)&__p.i_desc.flags = v6;
  v8 = v5[3];
  v9 = v5[4];
  v10 = v5[6];
  *(_OWORD *)&__p.i_desc.stride[1] = v5[5];
  *(_OWORD *)&__p.i_desc.stride[3] = v10;
  *(_OWORD *)&__p.i_desc.size[5] = v8;
  *(_OWORD *)&__p.i_desc.size[7] = v9;
  v11 = v5[7];
  v12 = v5[8];
  v13 = v5[10];
  *(_OWORD *)&__p.i_desc.data_type = v5[9];
  *(_OWORD *)&__p.i_desc.table_data_type = v13;
  *(_OWORD *)&__p.i_desc.stride[5] = v11;
  *(_OWORD *)&__p.i_desc.stride[7] = v12;
  v14 = *(_OWORD *)v4;
  v15 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)&__p.w_desc.size[1] = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&__p.w_desc.size[3] = v15;
  *(_OWORD *)&__p.w_desc.flags = v14;
  v16 = *(_OWORD *)(v4 + 48);
  v17 = *(_OWORD *)(v4 + 64);
  v18 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&__p.w_desc.stride[1] = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&__p.w_desc.stride[3] = v18;
  *(_OWORD *)&__p.w_desc.size[5] = v16;
  *(_OWORD *)&__p.w_desc.size[7] = v17;
  v19 = *(_OWORD *)(v4 + 112);
  v20 = *(_OWORD *)(v4 + 128);
  v21 = *(_OWORD *)(v4 + 160);
  *(_OWORD *)&__p.w_desc.data_type = *(_OWORD *)(v4 + 144);
  *(_OWORD *)&__p.w_desc.table_data_type = v21;
  *(_OWORD *)&__p.w_desc.stride[5] = v19;
  *(_OWORD *)&__p.w_desc.stride[7] = v20;
  v22 = (__int128 *)sub_240BA8C34(*(_QWORD *)v86);
  v23 = *v22;
  v24 = v22[2];
  *(_OWORD *)&__p.o_desc.size[1] = v22[1];
  *(_OWORD *)&__p.o_desc.size[3] = v24;
  *(_OWORD *)&__p.o_desc.flags = v23;
  v25 = v22[3];
  v26 = v22[4];
  v27 = v22[6];
  *(_OWORD *)&__p.o_desc.stride[1] = v22[5];
  *(_OWORD *)&__p.o_desc.stride[3] = v27;
  *(_OWORD *)&__p.o_desc.size[5] = v25;
  *(_OWORD *)&__p.o_desc.size[7] = v26;
  v28 = v22[7];
  v29 = v22[8];
  v30 = v22[10];
  *(_OWORD *)&__p.o_desc.data_type = v22[9];
  *(_OWORD *)&__p.o_desc.table_data_type = v30;
  *(_OWORD *)&__p.o_desc.stride[5] = v28;
  *(_OWORD *)&__p.o_desc.stride[7] = v29;
  if ((char *)v91 - v90 == 24)
  {
    v31 = (__int128 *)sub_240BA8C34(*((_QWORD *)v90 + 2));
    v32 = *v31;
    v33 = v31[2];
    *(_OWORD *)&__p.bias.size[1] = v31[1];
    *(_OWORD *)&__p.bias.size[3] = v33;
    *(_OWORD *)&__p.bias.flags = v32;
    v34 = v31[3];
    v35 = v31[4];
    v36 = v31[6];
    *(_OWORD *)&__p.bias.stride[1] = v31[5];
    *(_OWORD *)&__p.bias.stride[3] = v36;
    *(_OWORD *)&__p.bias.size[5] = v34;
    *(_OWORD *)&__p.bias.size[7] = v35;
    v37 = v31[7];
    v38 = v31[8];
    v39 = v31[10];
    *(_OWORD *)&__p.bias.data_type = v31[9];
    *(_OWORD *)&__p.bias.table_data_type = v39;
    *(_OWORD *)&__p.bias.stride[5] = v37;
    *(_OWORD *)&__p.bias.stride[7] = v38;
  }
  HIBYTE(filter_params.alloc_memory) = 3;
  filter_params.flags = 7627617;
  v40 = sub_240B74E08(a1, (uint64_t)&filter_params);
  v41 = v40;
  if (SHIBYTE(filter_params.alloc_memory) < 0)
  {
    operator delete(*(void **)&filter_params.flags);
    if (v41)
      goto LABEL_16;
LABEL_41:
    memset(&__p.activation.ioffset, 0, 32);
    *(_QWORD *)&__p.activation.function = 0x3F80000000000000;
    *(_QWORD *)&__p.activation.beta = 0x100000000;
    goto LABEL_42;
  }
  if (!v40)
    goto LABEL_41;
LABEL_16:
  v81[23] = 3;
  strcpy(v81, "act");
  sub_240BA7A94(a1, (uint64_t)v81, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory) != 2)
    sub_240B735D8();
  *(_OWORD *)v78 = *(_OWORD *)&filter_params.flags;
  alloc_memory = filter_params.alloc_memory;
  memset(&filter_params, 0, 24);
  LODWORD(filter_params.free_memory) = -1;
  if ((v81[23] & 0x80000000) != 0)
    operator delete(*(void **)v81);
  v42 = sub_240BB2E5C((uint64_t)v78);
  v81[23] = 9;
  strcpy(v81, "act_alpha");
  sub_240BA7A94(a1, (uint64_t)v81, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory) != 1)
    sub_240B735D8();
  v43 = *(double *)&filter_params.flags;
  LODWORD(filter_params.free_memory) = -1;
  if ((v81[23] & 0x80000000) != 0)
    operator delete(*(void **)v81);
  v81[23] = 8;
  strcpy(v81, "act_beta");
  sub_240BA7A94(a1, (uint64_t)v81, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory) != 1)
    sub_240B735D8();
  v44 = v43;
  v45 = *(double *)&filter_params.flags;
  LODWORD(filter_params.free_memory) = -1;
  if ((v81[23] & 0x80000000) != 0)
    operator delete(*(void **)v81);
  __p.activation.function = v42;
  __p.activation.alpha = v44;
  __p.activation.beta = v45;
  __p.activation.iscale = 1;
  memset(&__p.activation.ioffset, 0, 32);
  if (SHIBYTE(alloc_memory) < 0)
    operator delete(v78[0]);
LABEL_42:
  HIBYTE(alloc_memory) = 7;
  strcpy((char *)v78, "strides");
  sub_240BA7A94(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0)
    operator delete(v78[0]);
  if (LODWORD(filter_params.free_memory) != 4)
    sub_240B735D8();
  v78[0] = 0;
  v78[1] = 0;
  alloc_memory = 0;
  v52 = *(const void **)&filter_params.flags;
  v53 = filter_params.n_threads - *(_QWORD *)&filter_params.flags;
  if (filter_params.n_threads == *(_QWORD *)&filter_params.flags)
  {
    v62 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)v81 = operator new(0x20uLL);
    *(_OWORD *)&v81[8] = xmmword_240BBBE90;
    strcpy(*(char **)v81, "ICE: conv with no strides");
    v63 = sub_240BB7D38(v62, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) == 0)
      goto LABEL_63;
    v64 = *(size_t **)v81;
LABEL_62:
    operator delete(v64);
LABEL_63:
    if (LODWORD(filter_params.free_memory) != -1)
LABEL_64:
      ((void (*)(void **, BNNSFilterParameters *, __n128))off_25110CD80[LODWORD(filter_params.free_memory)])(v78, &filter_params, v63);
LABEL_32:
    v49 = 0;
    goto LABEL_33;
  }
  if ((v53 & 0x8000000000000000) != 0)
    sub_240B70258();
  v54 = (size_t *)operator new(filter_params.n_threads - *(_QWORD *)&filter_params.flags);
  memcpy(v54, v52, v53);
  if (v53 >= 0x18)
  {
    v65 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)v81 = operator new(0x30uLL);
    *(_OWORD *)&v81[8] = xmmword_240BBBEC0;
    strcpy(*(char **)v81, "ICE: BNNS does not support >2D convolution");
    sub_240BB7D38(v65, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) != 0)
      operator delete(*(void **)v81);
    v64 = v54;
    goto LABEL_62;
  }
  v55 = *v54;
  __p.x_stride = v54[1];
  __p.y_stride = v55;
  operator delete(v54);
  if (LODWORD(filter_params.free_memory) != -1)
    ((void (*)(void **, BNNSFilterParameters *))off_25110CD80[LODWORD(filter_params.free_memory)])(v78, &filter_params);
  HIBYTE(alloc_memory) = 8;
  strcpy((char *)v78, "dilation");
  sub_240BA7A94(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0)
    operator delete(v78[0]);
  if (LODWORD(filter_params.free_memory) != 4)
    sub_240B735D8();
  v78[0] = 0;
  v78[1] = 0;
  alloc_memory = 0;
  v56 = *(const void **)&filter_params.flags;
  n_threads = filter_params.n_threads;
  v58 = filter_params.n_threads - *(_QWORD *)&filter_params.flags;
  if (filter_params.n_threads != *(_QWORD *)&filter_params.flags)
  {
    if (v58 < 0)
      sub_240B70258();
    v59 = (size_t *)operator new(filter_params.n_threads - *(_QWORD *)&filter_params.flags);
    v78[0] = v59;
    v78[1] = v59;
    alloc_memory = (BNNSAlloc)&v59[v58 >> 3];
    memcpy(v59, v56, v58);
    v60 = *v59;
    __p.x_dilation_stride = v59[1];
    __p.y_dilation_stride = v60;
    v61 = v59;
    goto LABEL_56;
  }
  v66 = *(_QWORD **)(a2 + 32);
  *(_QWORD *)v81 = operator new(0x20uLL);
  *(_OWORD *)&v81[8] = xmmword_240BBB850;
  strcpy(*(char **)v81, "ICE: conv with no dilation");
  sub_240BB7D38(v66, 0xFFFF, (uint64_t)v81);
  if ((v81[23] & 0x80000000) != 0)
  {
    v61 = *(size_t **)v81;
LABEL_56:
    operator delete(v61);
  }
  if (LODWORD(filter_params.free_memory) != -1)
    ((void (*)(void **, BNNSFilterParameters *))off_25110CD80[LODWORD(filter_params.free_memory)])(v78, &filter_params);
  if ((const void *)n_threads == v56)
    goto LABEL_32;
  HIBYTE(alloc_memory) = 3;
  LODWORD(v78[0]) = 6578544;
  sub_240BA7A94(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0)
    operator delete(v78[0]);
  if (LODWORD(filter_params.free_memory) != 4)
    sub_240B735D8();
  v78[0] = 0;
  v78[1] = 0;
  alloc_memory = 0;
  v67 = *(const void **)&filter_params.flags;
  v68 = filter_params.n_threads - *(_QWORD *)&filter_params.flags;
  if (filter_params.n_threads == *(_QWORD *)&filter_params.flags)
  {
    v74 = *(_QWORD **)(a2 + 32);
    sub_240B9AC68(v81, "ICE: conv with no padding specification");
    v63 = sub_240BB7D38(v74, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) == 0)
      goto LABEL_94;
    v75 = *(void **)v81;
LABEL_93:
    operator delete(v75);
LABEL_94:
    if (LODWORD(filter_params.free_memory) == -1)
      goto LABEL_32;
    goto LABEL_64;
  }
  if ((v68 & 0x8000000000000000) != 0)
    sub_240B70258();
  v69 = operator new(filter_params.n_threads - *(_QWORD *)&filter_params.flags);
  memcpy(v69, v67, v68);
  if (v68 != 32)
  {
    v76 = *(_QWORD **)(a2 + 32);
    sub_240B9AC68(v81, "ICE: Must provide 2D asymmetric pad for convolution");
    sub_240BB7D38(v76, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) != 0)
      operator delete(*(void **)v81);
    v75 = v69;
    goto LABEL_93;
  }
  v70 = v69[1];
  *(_OWORD *)__p.pad = *v69;
  *(_OWORD *)&__p.pad[2] = v70;
  operator delete(v69);
  sub_240B73210((uint64_t)&filter_params);
  sub_240B9AC68(v78, "groups");
  sub_240BA7A94(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0)
    operator delete(v78[0]);
  if (LODWORD(filter_params.free_memory))
    sub_240B735D8();
  __p.groups = *(_QWORD *)&filter_params.flags;
  sub_240B73210((uint64_t)&filter_params);
  sub_240B9AC68(v78, "transposed");
  sub_240BA7A94(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory))
    sub_240B735D8();
  v71 = *(_QWORD *)&filter_params.flags;
  sub_240B73210((uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0)
    operator delete(v78[0]);
  memset(&filter_params, 0, sizeof(filter_params));
  filter_params.flags = 1;
  sub_240B9AC68(v81, "low_precision_accumulation");
  sub_240BA7A94(a1, (uint64_t)v81, (uint64_t)v78);
  if (v80)
    sub_240B735D8();
  v72 = v78[0];
  sub_240B73210((uint64_t)v78);
  if ((v81[23] & 0x80000000) != 0)
    operator delete(*(void **)v81);
  if (v72)
    filter_params.flags = 3145729;
  filter_params.n_threads = *(_QWORD *)(a2 + 472);
  if (v71)
    v73 = BNNSFilterCreateLayerTransposedConvolution(&__p, &filter_params);
  else
    v73 = (void *)MEMORY[0x24268AA34](&__p, &filter_params);
  v49 = v73;
  if (!v73)
  {
    v77 = *(_QWORD **)(a2 + 32);
    sub_240B9AC68(v78, "Error creating BNNSFilter");
    sub_240BB7D38(v77, 0xFFFF, (uint64_t)v78);
    if (SHIBYTE(alloc_memory) < 0)
      operator delete(v78[0]);
  }
LABEL_33:
  if (v86)
  {
    v87 = (uint64_t *)v86;
    operator delete(v86);
  }
  if (v90)
  {
    v91 = (uint64_t *)v90;
    operator delete(v90);
  }
  return v49;
}

void sub_240BB10A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  void *v37;
  void *v38;

  if (a14 < 0)
    operator delete(__p);
  v37 = *(void **)(v35 - 160);
  if (v37)
  {
    *(_QWORD *)(v35 - 152) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(v35 - 104);
  if (v38)
  {
    *(_QWORD *)(v35 - 96) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void *sub_240BB12D8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  uint64_t *v45;
  uint64_t *v46;
  BNNSActivationFunction v47;
  double v48;
  float v49;
  float v50;
  uint64_t v51;
  _QWORD *v52;
  _BYTE v53[24];
  int v54;
  _BYTE v55[24];
  BNNSFilterParameters __p;
  _BYTE v57[24];
  int v58;
  void *v59;
  _BYTE *v60;
  _BYTE v61[24];
  int v62;
  void *v63;
  _BYTE *v64;
  BNNSLayerParametersFullyConnected layer_params;

  bzero(&layer_params, 0x2F0uLL);
  HIBYTE(__p.alloc_memory) = 6;
  strcpy((char *)&__p, "inputs");
  sub_240BA7A94(a1, (uint64_t)&__p, (uint64_t)v61);
  sub_240BB2B58((uint64_t)v61, a2, (uint64_t **)&v63);
  if (v62 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_25110CD80[v62])(v53, v61);
  v62 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0)
    operator delete(*(void **)&__p.flags);
  HIBYTE(__p.alloc_memory) = 7;
  strcpy((char *)&__p, "outputs");
  sub_240BA7A94(a1, (uint64_t)&__p, (uint64_t)v57);
  sub_240BB2B58((uint64_t)v57, a2, (uint64_t **)&v59);
  if (v58 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_25110CD80[v58])(v53, v57);
  v58 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0)
    operator delete(*(void **)&__p.flags);
  if ((unint64_t)(v64 - (_BYTE *)v63 - 9) >= 0x17)
  {
    v40 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&__p.flags = operator new(0x30uLL);
    *(_OWORD *)&__p.n_threads = xmmword_240BBBED0;
    strcpy(*(char **)&__p.flags, "ICE: FullyConnected takes at least 2 inputs");
    sub_240BB7D38(v40, 0xFFFF, (uint64_t)&__p);
  }
  else if (v60 - (_BYTE *)v59 == 8)
  {
    v4 = sub_240BA8C34(*((_QWORD *)v63 + 1));
    if (*(_QWORD *)(v4 + 136))
    {
      v5 = (__int128 *)sub_240BA8C34(*(_QWORD *)v63);
      v6 = *v5;
      v7 = v5[2];
      *(_OWORD *)&layer_params.i_desc.size[1] = v5[1];
      *(_OWORD *)&layer_params.i_desc.size[3] = v7;
      *(_OWORD *)&layer_params.i_desc.flags = v6;
      v8 = v5[3];
      v9 = v5[4];
      v10 = v5[6];
      *(_OWORD *)&layer_params.i_desc.stride[1] = v5[5];
      *(_OWORD *)&layer_params.i_desc.stride[3] = v10;
      *(_OWORD *)&layer_params.i_desc.size[5] = v8;
      *(_OWORD *)&layer_params.i_desc.size[7] = v9;
      v11 = v5[7];
      v12 = v5[8];
      v13 = v5[10];
      *(_OWORD *)&layer_params.i_desc.data_type = v5[9];
      *(_OWORD *)&layer_params.i_desc.table_data_type = v13;
      *(_OWORD *)&layer_params.i_desc.stride[5] = v11;
      *(_OWORD *)&layer_params.i_desc.stride[7] = v12;
      v14 = *(_OWORD *)v4;
      v15 = *(_OWORD *)(v4 + 32);
      *(_OWORD *)&layer_params.w_desc.size[1] = *(_OWORD *)(v4 + 16);
      *(_OWORD *)&layer_params.w_desc.size[3] = v15;
      *(_OWORD *)&layer_params.w_desc.flags = v14;
      v16 = *(_OWORD *)(v4 + 48);
      v17 = *(_OWORD *)(v4 + 64);
      v18 = *(_OWORD *)(v4 + 96);
      *(_OWORD *)&layer_params.w_desc.stride[1] = *(_OWORD *)(v4 + 80);
      *(_OWORD *)&layer_params.w_desc.stride[3] = v18;
      *(_OWORD *)&layer_params.w_desc.size[5] = v16;
      *(_OWORD *)&layer_params.w_desc.size[7] = v17;
      v19 = *(_OWORD *)(v4 + 112);
      v20 = *(_OWORD *)(v4 + 128);
      v21 = *(_OWORD *)(v4 + 160);
      *(_OWORD *)&layer_params.w_desc.data_type = *(_OWORD *)(v4 + 144);
      *(_OWORD *)&layer_params.w_desc.table_data_type = v21;
      *(_OWORD *)&layer_params.w_desc.stride[5] = v19;
      *(_OWORD *)&layer_params.w_desc.stride[7] = v20;
      v22 = (__int128 *)sub_240BA8C34(*(_QWORD *)v59);
      v23 = *v22;
      v24 = v22[2];
      *(_OWORD *)&layer_params.o_desc.size[1] = v22[1];
      *(_OWORD *)&layer_params.o_desc.size[3] = v24;
      *(_OWORD *)&layer_params.o_desc.flags = v23;
      v25 = v22[3];
      v26 = v22[4];
      v27 = v22[6];
      *(_OWORD *)&layer_params.o_desc.stride[1] = v22[5];
      *(_OWORD *)&layer_params.o_desc.stride[3] = v27;
      *(_OWORD *)&layer_params.o_desc.size[5] = v25;
      *(_OWORD *)&layer_params.o_desc.size[7] = v26;
      v28 = v22[7];
      v29 = v22[8];
      v30 = v22[10];
      *(_OWORD *)&layer_params.o_desc.data_type = v22[9];
      *(_OWORD *)&layer_params.o_desc.table_data_type = v30;
      *(_OWORD *)&layer_params.o_desc.stride[5] = v28;
      *(_OWORD *)&layer_params.o_desc.stride[7] = v29;
      if (v64 - (_BYTE *)v63 == 24)
      {
        v31 = (__int128 *)sub_240BA8C34(*((_QWORD *)v63 + 2));
        v32 = *v31;
        v33 = v31[2];
        *(_OWORD *)&layer_params.bias.size[1] = v31[1];
        *(_OWORD *)&layer_params.bias.size[3] = v33;
        *(_OWORD *)&layer_params.bias.flags = v32;
        v34 = v31[3];
        v35 = v31[4];
        v36 = v31[6];
        *(_OWORD *)&layer_params.bias.stride[1] = v31[5];
        *(_OWORD *)&layer_params.bias.stride[3] = v36;
        *(_OWORD *)&layer_params.bias.size[5] = v34;
        *(_OWORD *)&layer_params.bias.size[7] = v35;
        v37 = v31[7];
        v38 = v31[8];
        v39 = v31[10];
        *(_OWORD *)&layer_params.bias.data_type = v31[9];
        *(_OWORD *)&layer_params.bias.table_data_type = v39;
        *(_OWORD *)&layer_params.bias.stride[5] = v37;
        *(_OWORD *)&layer_params.bias.stride[7] = v38;
      }
      else
      {
        memset(&layer_params.bias, 0, sizeof(layer_params.bias));
      }
      HIBYTE(__p.alloc_memory) = 3;
      __p.flags = 7627617;
      v45 = sub_240B74E08(a1, (uint64_t)&__p);
      v46 = v45;
      if (SHIBYTE(__p.alloc_memory) < 0)
      {
        operator delete(*(void **)&__p.flags);
        if (v46)
          goto LABEL_28;
      }
      else if (v45)
      {
LABEL_28:
        v55[23] = 3;
        strcpy(v55, "act");
        sub_240BA7A94(a1, (uint64_t)v55, (uint64_t)&__p);
        if (LODWORD(__p.free_memory) != 2)
          sub_240B735D8();
        *(_OWORD *)v53 = *(_OWORD *)&__p.flags;
        *(_QWORD *)&v53[16] = __p.alloc_memory;
        memset(&__p, 0, 24);
        LODWORD(__p.free_memory) = -1;
        if ((v55[23] & 0x80000000) != 0)
          operator delete(*(void **)v55);
        v47 = sub_240BB2E5C((uint64_t)v53);
        v55[23] = 9;
        strcpy(v55, "act_alpha");
        sub_240BA7A94(a1, (uint64_t)v55, (uint64_t)&__p);
        if (LODWORD(__p.free_memory) != 1)
          sub_240B735D8();
        v48 = *(double *)&__p.flags;
        LODWORD(__p.free_memory) = -1;
        if ((v55[23] & 0x80000000) != 0)
          operator delete(*(void **)v55);
        v55[23] = 8;
        strcpy(v55, "act_beta");
        sub_240BA7A94(a1, (uint64_t)v55, (uint64_t)&__p);
        if (LODWORD(__p.free_memory) != 1)
          sub_240B735D8();
        v49 = v48;
        v50 = *(double *)&__p.flags;
        LODWORD(__p.free_memory) = -1;
        if ((v55[23] & 0x80000000) != 0)
          operator delete(*(void **)v55);
        layer_params.activation.function = v47;
        layer_params.activation.alpha = v49;
        layer_params.activation.beta = v50;
        layer_params.activation.iscale = 1;
        memset(&layer_params.activation.ioffset, 0, 32);
        if ((v53[23] & 0x80000000) != 0)
          operator delete(*(void **)v53);
        goto LABEL_41;
      }
      memset(&layer_params.activation.iscale, 0, 36);
      layer_params.activation.function = BNNSActivationFunctionIdentity;
      *(_QWORD *)&layer_params.activation.alpha = 1065353216;
LABEL_41:
      memset(&__p, 0, sizeof(__p));
      __p.flags = 1;
      *(_QWORD *)v55 = operator new(0x20uLL);
      *(_OWORD *)&v55[8] = xmmword_240BBB850;
      strcpy(*(char **)v55, "low_precision_accumulation");
      sub_240BA7A94(a1, (uint64_t)v55, (uint64_t)v53);
      if (v54)
        sub_240B735D8();
      v51 = *(_QWORD *)v53;
      v54 = -1;
      if ((v55[23] & 0x80000000) != 0)
        operator delete(*(void **)v55);
      if (v51)
        __p.flags = 3145729;
      __p.n_threads = *(_QWORD *)(a2 + 472);
      v43 = BNNSFilterCreateLayerFullyConnected(&layer_params, &__p);
      if (!v43)
      {
        v52 = *(_QWORD **)(a2 + 32);
        *(_QWORD *)v53 = operator new(0x20uLL);
        *(_OWORD *)&v53[8] = xmmword_240BBBE90;
        strcpy(*(char **)v53, "Error creating BNNSFilter");
        sub_240BB7D38(v52, 0xFFFF, (uint64_t)v53);
        if ((v53[23] & 0x80000000) != 0)
          operator delete(*(void **)v53);
      }
      goto LABEL_20;
    }
    v42 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&__p.flags = operator new(0x30uLL);
    *(_OWORD *)&__p.n_threads = xmmword_240BBBEC0;
    strcpy(*(char **)&__p.flags, "Weight data uninitialized in BNNS metadata");
    sub_240BB7D38(v42, 0xFFFF, (uint64_t)&__p);
  }
  else
  {
    v41 = *(_QWORD **)(a2 + 32);
    *(_QWORD *)&__p.flags = operator new(0x28uLL);
    *(_OWORD *)&__p.n_threads = xmmword_240BBBEE0;
    strcpy(*(char **)&__p.flags, "ICE: FullyConnected produces 1 output");
    sub_240BB7D38(v41, 0xFFFF, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.alloc_memory) < 0)
    operator delete(*(void **)&__p.flags);
  v43 = 0;
LABEL_20:
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  return v43;
}

void sub_240BB1944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (a14 < 0)
    operator delete(__p);
  if (a34)
    operator delete(a34);
  if (a41)
    operator delete(a41);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BB1A80(_QWORD *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v28;
  __int128 v29;
  void *__p[4];
  _BYTE v31[24];
  int v32;
  void *v33[3];
  _BYTE v34[24];
  int v35;
  void *v36[3];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[64];

  memset(v59, 0, sizeof(v59));
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "inputs");
  sub_240BA7A94(a1, (uint64_t)__p, (uint64_t)v34);
  sub_240BB2B58((uint64_t)v34, a2, (uint64_t **)v36);
  if (v35 != -1)
    ((void (*)(void **, _BYTE *))off_25110CD80[v35])(v33, v34);
  v35 = -1;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "outputs");
  sub_240BA7A94(a1, (uint64_t)__p, (uint64_t)v31);
  sub_240BB2B58((uint64_t)v31, a2, (uint64_t **)v33);
  if (v32 != -1)
    ((void (*)(void **, _BYTE *))off_25110CD80[v32])(&v28, v31);
  v32 = -1;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v4 = (__int128 *)sub_240BA8C34(*(_QWORD *)v36[0]);
  v5 = *v4;
  v6 = v4[2];
  v38 = v4[1];
  v39 = v6;
  v37 = v5;
  v7 = v4[3];
  v8 = v4[4];
  v9 = v4[6];
  v42 = v4[5];
  v43 = v9;
  v40 = v7;
  v41 = v8;
  v10 = v4[7];
  v11 = v4[8];
  v12 = v4[10];
  v46 = v4[9];
  v47 = v12;
  v44 = v10;
  v45 = v11;
  v13 = (__int128 *)sub_240BA8C34(*(_QWORD *)v33[0]);
  v14 = *v13;
  v15 = v13[2];
  v49 = v13[1];
  v50 = v15;
  v48 = v14;
  v16 = v13[3];
  v17 = v13[4];
  v18 = v13[6];
  v53 = v13[5];
  v54 = v18;
  v51 = v16;
  v52 = v17;
  v19 = v13[7];
  v20 = v13[8];
  v21 = v13[10];
  v57 = v13[9];
  v58 = v21;
  v55 = v19;
  v56 = v20;
  HIBYTE(v29) = 7;
  strcpy((char *)&v28, "permute");
  sub_240BA7A94(a1, (uint64_t)&v28, (uint64_t)__p);
  if (LODWORD(__p[3]) != 4)
    sub_240B735D8();
  v22 = __p[0];
  v23 = __p[1];
  memset(__p, 0, 24);
  LODWORD(__p[3]) = -1;
  if (SHIBYTE(v29) < 0)
    operator delete(v28);
  if ((unint64_t)(v23 - v22) >= 0x48)
  {
    v26 = *(_QWORD **)(a2 + 32);
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_240BBBED0;
    strcpy((char *)__p[0], "ICE: too many permute axes for BNNS permute");
    sub_240BB7D38(v26, 0xFFFF, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    v24 = 0;
  }
  else
  {
    if (v23 != v22)
      memmove(v59, v22, v23 - v22);
    memset(__p, 0, sizeof(__p));
    LODWORD(__p[0]) = 1;
    __p[1] = *(void **)(a2 + 472);
    v24 = MEMORY[0x24268AA4C](&v37, __p);
    if (!v24)
    {
      v25 = *(_QWORD **)(a2 + 32);
      v28 = operator new(0x20uLL);
      v29 = xmmword_240BBBE90;
      strcpy((char *)v28, "Error creating BNNSFilter");
      sub_240BB7D38(v25, 0xFFFF, (uint64_t)&v28);
      if (SHIBYTE(v29) < 0)
        operator delete(v28);
    }
  }
  if (v22)
    operator delete(v22);
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  return v24;
}

void sub_240BB1E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  void *v35;

  if (a15 < 0)
    operator delete(__p);
  if (v35)
    operator delete(v35);
  if (a27)
    operator delete(a27);
  if (a34)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BB1EEC(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 *v19;
  int v20;
  void **v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void **v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69[2];
  uint64_t v70;
  _BYTE v71[24];
  int v72;
  void *v73[3];
  _BYTE v74[24];
  int v75;
  void *v76[3];
  _OWORD v77[9];
  int v78;
  _BYTE v79[28];
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  int v116;
  _OWORD v117[11];
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _BYTE v129[24];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  _OWORD v142[11];
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _BYTE v154[24];
  _OWORD v155[4];
  _OWORD v156[2];
  _BYTE v157[32];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  memset(v155, 0, sizeof(v155));
  BYTE7(v59) = 6;
  strcpy((char *)__p, "inputs");
  sub_240BA7A94(a1, (uint64_t)__p, (uint64_t)v74);
  sub_240BB2B58((uint64_t)v74, a2, (uint64_t **)v76);
  if (v75 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_25110CD80[v75])(v157, v74);
  v75 = -1;
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  BYTE7(v59) = 7;
  strcpy((char *)__p, "outputs");
  sub_240BA7A94(a1, (uint64_t)__p, (uint64_t)v71);
  sub_240BB2B58((uint64_t)v71, a2, (uint64_t **)v73);
  if (v72 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_25110CD80[v72])(v157, v71);
  v72 = -1;
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  v157[23] = 4;
  strcpy(v157, "func");
  sub_240BA7A94(a1, (uint64_t)v157, (uint64_t)__p);
  if (DWORD2(v59) != 2)
    sub_240B735D8();
  *(_OWORD *)v69 = *(_OWORD *)__p;
  v70 = v59;
  __p[1] = 0;
  *(_QWORD *)&v59 = 0;
  __p[0] = 0;
  DWORD2(v59) = -1;
  if ((v157[23] & 0x80000000) != 0)
    operator delete(*(void **)v157);
  v157[23] = 4;
  strcpy(v157, "nary");
  sub_240BA7A94(a1, (uint64_t)v157, (uint64_t)__p);
  if (DWORD2(v59))
    sub_240B735D8();
  v4 = __p[0];
  DWORD2(v59) = -1;
  if ((v157[23] & 0x80000000) != 0)
    operator delete(*(void **)v157);
  if (v4 == (void *)1)
  {
    v15 = (_OWORD *)sub_240BA8C34(*(_QWORD *)v76[0]);
    v65 = v15[7];
    v66 = v15[8];
    v67 = v15[9];
    v68 = v15[10];
    v61 = v15[3];
    v62 = v15[4];
    v63 = v15[5];
    v64 = v15[6];
    *(_OWORD *)__p = *v15;
    v59 = v15[1];
    v60 = v15[2];
    v16 = (_OWORD *)sub_240BA8C34(*(_QWORD *)v73[0]);
    v163 = v16[7];
    v164 = v16[8];
    v165 = v16[9];
    v166 = v16[10];
    v159 = v16[3];
    v160 = v16[4];
    v161 = v16[5];
    v162 = v16[6];
    *(_OWORD *)v157 = *v16;
    *(_OWORD *)&v157[16] = v16[1];
    v158 = v16[2];
    *(_OWORD *)&v154[8] = 0u;
    v142[1] = v59;
    v142[0] = *(_OWORD *)__p;
    v142[5] = v63;
    v142[4] = v62;
    v142[2] = v60;
    v142[3] = v61;
    v143 = 1;
    v142[10] = v68;
    v142[9] = v67;
    v142[8] = v66;
    v142[6] = v64;
    v142[7] = v65;
    v151 = v163;
    v152 = v164;
    v153 = v165;
    *(_OWORD *)v154 = v166;
    v149 = v161;
    v150 = v162;
    v147 = v159;
    v148 = v160;
    v144 = *(_OWORD *)v157;
    v145 = *(_OWORD *)&v157[16];
    v146 = v158;
    *(_DWORD *)&v154[16] = 1;
    *((_QWORD *)&v155[0] + 1) = v142;
  }
  else if (v4 == (void *)2)
  {
    v12 = (_OWORD *)sub_240BA8C34(*(_QWORD *)v76[0]);
    v65 = v12[7];
    v66 = v12[8];
    v67 = v12[9];
    v68 = v12[10];
    v61 = v12[3];
    v62 = v12[4];
    v63 = v12[5];
    v64 = v12[6];
    *(_OWORD *)__p = *v12;
    v59 = v12[1];
    v60 = v12[2];
    v13 = (_OWORD *)sub_240BA8C34(*((_QWORD *)v76[0] + 1));
    v163 = v13[7];
    v164 = v13[8];
    v165 = v13[9];
    v166 = v13[10];
    v159 = v13[3];
    v160 = v13[4];
    v161 = v13[5];
    v162 = v13[6];
    *(_OWORD *)v157 = *v13;
    *(_OWORD *)&v157[16] = v13[1];
    v158 = v13[2];
    v14 = (__int128 *)sub_240BA8C34(*(_QWORD *)v73[0]);
    v52 = v14[8];
    v54 = v14[9];
    v56 = v14[10];
    v44 = v14[4];
    v46 = v14[5];
    v48 = v14[6];
    v50 = v14[7];
    v36 = *v14;
    v38 = v14[1];
    v40 = v14[2];
    v42 = v14[3];
    *(_OWORD *)&v129[8] = 0u;
    v117[8] = v66;
    v117[9] = v67;
    v118 = 1;
    v117[10] = v68;
    v117[4] = v62;
    v117[5] = v63;
    v117[7] = v65;
    v117[6] = v64;
    v117[0] = *(_OWORD *)__p;
    v117[1] = v59;
    v117[3] = v61;
    v117[2] = v60;
    v126 = v163;
    v127 = v164;
    v128 = v165;
    *(_OWORD *)v129 = v166;
    v124 = v161;
    v125 = v162;
    v122 = v159;
    v123 = v160;
    v119 = *(_OWORD *)v157;
    v120 = *(_OWORD *)&v157[16];
    v121 = v158;
    v137 = v50;
    v138 = v52;
    v139 = v54;
    v140 = v56;
    v133 = v42;
    v134 = v44;
    v135 = v46;
    v136 = v48;
    v130 = v36;
    v131 = v38;
    *(_DWORD *)&v129[16] = 1;
    v132 = v40;
    v141 = 1;
    *((_QWORD *)&v155[0] + 1) = v117;
  }
  else if (v4 == (void *)3)
  {
    v5 = sub_240BA8C34(*(_QWORD *)v76[0]);
    v33 = *(_OWORD *)(v5 + 96);
    v34 = *(_OWORD *)(v5 + 112);
    v35 = *(_OWORD *)(v5 + 128);
    v29 = *(_OWORD *)(v5 + 32);
    v30 = *(_OWORD *)(v5 + 48);
    v31 = *(_OWORD *)(v5 + 64);
    v32 = *(_OWORD *)(v5 + 80);
    v27 = *(_OWORD *)v5;
    v28 = *(_OWORD *)(v5 + 16);
    v6 = *(_DWORD *)(v5 + 144);
    v156[0] = *(_OWORD *)(v5 + 148);
    v7 = (void *)HIBYTE(v70);
    if (v70 < 0)
      v7 = v69[1];
    *(_OWORD *)((char *)v156 + 12) = *(_OWORD *)(v5 + 160);
    if (v7 == (void *)6)
    {
      v8 = v70 >= 0 ? v69 : (void **)v69[0];
      v9 = 1936026725;
      v10 = bswap32(*(_DWORD *)v8);
      if (v10 == 1936026725 && (v10 = bswap32(*((unsigned __int16 *)v8 + 2)) >> 16, v9 = 25460, v10 == 25460))
        v11 = 0;
      else
        v11 = v10 < v9 ? -1 : 1;
      if (!v11)
        v6 = 1048584;
    }
    v17 = (_OWORD *)sub_240BA8C34(*((_QWORD *)v76[0] + 1));
    v65 = v17[7];
    v66 = v17[8];
    v67 = v17[9];
    v68 = v17[10];
    v61 = v17[3];
    v62 = v17[4];
    v63 = v17[5];
    v64 = v17[6];
    *(_OWORD *)__p = *v17;
    v59 = v17[1];
    v60 = v17[2];
    v18 = (_OWORD *)sub_240BA8C34(*((_QWORD *)v76[0] + 2));
    v163 = v18[7];
    v164 = v18[8];
    v165 = v18[9];
    v166 = v18[10];
    v159 = v18[3];
    v160 = v18[4];
    v161 = v18[5];
    v162 = v18[6];
    *(_OWORD *)v157 = *v18;
    *(_OWORD *)&v157[16] = v18[1];
    v158 = v18[2];
    v19 = (__int128 *)sub_240BA8C34(*(_QWORD *)v73[0]);
    v53 = v19[8];
    v55 = v19[9];
    v57 = v19[10];
    v45 = v19[4];
    v47 = v19[5];
    v49 = v19[6];
    v51 = v19[7];
    v37 = *v19;
    v39 = v19[1];
    v41 = v19[2];
    v43 = v19[3];
    bzero(&v80, 0x230uLL);
    v77[6] = v33;
    v77[7] = v34;
    v77[8] = v35;
    v77[2] = v29;
    v77[3] = v30;
    v77[4] = v31;
    v77[5] = v32;
    v77[0] = v27;
    v77[1] = v28;
    *(_OWORD *)v79 = v156[0];
    *(_OWORD *)&v79[12] = *(_OWORD *)((char *)v156 + 12);
    v88 = v65;
    v89 = v66;
    v90 = v67;
    v91 = v68;
    v86 = v63;
    v87 = v64;
    v84 = v61;
    v85 = v62;
    v81 = *(_OWORD *)__p;
    v78 = v6;
    v82 = v59;
    v83 = v60;
    v80 = 1;
    v92 = 1;
    v101 = v164;
    v102 = v165;
    v103 = v166;
    v97 = v160;
    v98 = v161;
    v100 = v163;
    v99 = v162;
    v93 = *(_OWORD *)v157;
    v94 = *(_OWORD *)&v157[16];
    v96 = v159;
    v95 = v158;
    v104 = 1;
    v113 = v53;
    v114 = v55;
    v115 = v57;
    v109 = v45;
    v110 = v47;
    v111 = v49;
    v112 = v51;
    v105 = v37;
    v106 = v39;
    v107 = v41;
    v108 = v43;
    v116 = 1;
    *((_QWORD *)&v155[0] + 1) = v77;
  }
  v157[23] = 6;
  strcpy(v157, "select");
  *(_DWORD *)&v157[24] = 31;
  *(_OWORD *)__p = 0u;
  v59 = 0u;
  LODWORD(v60) = 1065353216;
  sub_240BB3ACC((uint64_t)__p, (uint64_t)v157, (uint64_t)v157);
  if ((v157[23] & 0x80000000) != 0)
    operator delete(*(void **)v157);
  v20 = *((_DWORD *)sub_240BB3E80(__p, (uint64_t)v69) + 10);
  v21 = (void **)v59;
  if ((_QWORD)v59)
  {
    do
    {
      v26 = (void **)*v21;
      if (*((char *)v21 + 39) < 0)
        operator delete(v21[2]);
      operator delete(v21);
      v21 = v26;
    }
    while (v26);
  }
  v22 = __p[0];
  __p[0] = 0;
  if (v22)
    operator delete(v22);
  memset((char *)&v155[1] + 12, 0, 36);
  LODWORD(v155[0]) = v20;
  LODWORD(v155[1]) = 0;
  *(_QWORD *)((char *)&v155[1] + 4) = 1065353216;
  *(_OWORD *)__p = 0u;
  v59 = 0u;
  LODWORD(__p[0]) = 1;
  v23 = MEMORY[0x24268AA1C](v155, __p);
  if (v23
    || (v24 = *(_QWORD **)(a2 + 32),
        *(_QWORD *)v157 = operator new(0x20uLL),
        *(_OWORD *)&v157[8] = xmmword_240BBBE90,
        strcpy(*(char **)v157, "Error creating BNNSFilter"),
        sub_240BB7D38(v24, 0xFFFF, (uint64_t)v157),
        (v157[23] & 0x80000000) == 0))
  {
    if ((SHIBYTE(v70) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
  operator delete(*(void **)v157);
  if (SHIBYTE(v70) < 0)
LABEL_43:
    operator delete(v69[0]);
LABEL_44:
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  return v23;
}

void sub_240BB2980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  void *v72;
  void *v73;

  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(__p);
  v72 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v72;
    operator delete(v72);
  }
  v73 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

void sub_240BB2A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_240B73210((uint64_t)&STACK[0x210]);
  if (a54 < 0)
    JUMPOUT(0x240BB2A70);
  JUMPOUT(0x240BB2A74);
}

void sub_240BB2AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_240B73210((uint64_t)&STACK[0x248]);
  if (a54 < 0)
    JUMPOUT(0x240BB2A80);
  JUMPOUT(0x240BB2A84);
}

uint64_t sub_240BB2AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_240BB4000(a1, a2, a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_240BB2B38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = *(uint64_t **)(v1 + 16);
  if (v3)
    sub_240BBA7F0(v3);
  sub_240BBA6A8((void **)v1);
  _Unwind_Resume(a1);
}

void sub_240BB2B58(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  void **v5;
  void **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void **v35;
  void *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void *__p;
  void **v42;
  uint64_t v43;

  if (*(_DWORD *)(a1 + 24) != 3)
    sub_240B735D8();
  __p = 0;
  v42 = 0;
  v43 = 0;
  sub_240B700B4((char *)&__p, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (void **)__p;
  v6 = v42;
  if (__p == v42)
  {
    if (__p)
      goto LABEL_43;
    return;
  }
  do
  {
    sub_240BA16FC(a2, (uint64_t)v5, &v37);
    v39 = 0;
    v40 = 0;
    if (!v38)
    {
      v7 = 0;
      goto LABEL_13;
    }
    v40 = std::__shared_weak_count::lock(v38);
    if (!v40)
    {
      v7 = 0;
      v8 = v38;
      if (!v38)
        goto LABEL_13;
LABEL_12:
      std::__shared_weak_count::__release_weak(v8);
      goto LABEL_13;
    }
    v7 = v37;
    v39 = v37;
    v8 = v38;
    if (v38)
      goto LABEL_12;
LABEL_13:
    v10 = a3[1];
    v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 < v9)
    {
      *v10 = v7;
      v11 = v10 + 1;
      goto LABEL_37;
    }
    v12 = a2;
    v13 = *a3;
    v14 = (char *)v10 - (char *)*a3;
    v15 = v14 >> 3;
    v16 = (v14 >> 3) + 1;
    if (v16 >> 61)
      sub_240B70258();
    v17 = v9 - (_QWORD)v13;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        sub_240B7007C();
      v19 = v18;
      v20 = operator new(8 * v18);
      v18 = v19;
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[8 * v15];
    *v21 = v7;
    v11 = v21 + 1;
    if (v10 == v13)
    {
      a2 = v12;
      goto LABEL_35;
    }
    v22 = (char *)v10 - (char *)v13 - 8;
    if (v22 >= 0x58)
    {
      v23 = (char *)v10 - v20 - v14;
      a2 = v12;
      if (v23 >= 0x20)
      {
        v24 = (v22 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v26 = &v10[v25 / 0xFFFFFFFFFFFFFFF8];
        v21 = (uint64_t *)((char *)v21 - v25);
        v27 = &v20[8 * v15 - 16];
        v28 = v10 - 2;
        v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *v27 = v30;
          v27 -= 2;
          v28 -= 4;
          v29 -= 4;
        }
        while (v29);
        v10 = v26;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_34;
      }
    }
    else
    {
      a2 = v12;
    }
    do
    {
      v31 = *--v10;
      *--v21 = v31;
    }
    while (v10 != v13);
LABEL_34:
    v10 = *a3;
LABEL_35:
    *a3 = v21;
    a3[1] = v11;
    a3[2] = (uint64_t *)&v20[8 * v18];
    if (v10)
      operator delete(v10);
LABEL_37:
    a3[1] = v11;
    v32 = v40;
    if (v40)
    {
      p_shared_owners = (unint64_t *)&v40->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v5 += 3;
  }
  while (v5 != v6);
  v5 = (void **)__p;
  if (__p)
  {
LABEL_43:
    v35 = v42;
    v36 = v5;
    if (v42 != v5)
    {
      do
      {
        if (*((char *)v35 - 1) < 0)
          operator delete(*(v35 - 3));
        v35 -= 3;
      }
      while (v35 != v5);
      v36 = __p;
    }
    v42 = v5;
    operator delete(v36);
  }
}

void sub_240BB2E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_240B6FE78((uint64_t)va);
  v6 = *(void **)v4;
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(v4 + 8) = v6;
    operator delete(v6);
  }
  sub_240B731A0((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_240BB2E5C(uint64_t a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;
  void **v8;
  void *__p[2];
  void *v10[2];
  int v11;
  _BYTE v12[8];
  void *__dst[2];
  uint64_t v14;
  _DWORD v15[5];
  char v16;
  int v17;
  char v18[24];
  int v19;
  char v20[24];
  int v21;
  _DWORD v22[5];
  char v23;
  int v24;
  char v25[24];
  int v26;
  char *v27;
  __int128 v28;
  int v29;
  char *v30;
  __int128 v31;
  int v32;
  char v33[24];
  int v34;
  char v35[24];
  int v36;
  char v37[24];
  int v38;
  char v39[24];
  int v40;
  char v41[24];
  int v42;
  char v43[24];
  int v44;
  char v45[24];
  int v46;
  char v47[24];
  int v48;
  char v49[24];
  int v50;
  char v51[24];
  int v52;
  char v53[24];
  int v54;
  char v55[24];
  int v56;
  char v57[24];
  int v58;
  char v59[24];
  int v60;
  char v61[24];
  int v62;
  char v63[24];
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a1 + 23) < 0)
  {
    sub_240B6FF68(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v14 = *(_QWORD *)(a1 + 16);
  }
  if (v14 >= 0)
    v1 = (void **)((char *)__dst + HIBYTE(v14));
  else
    v1 = (void **)((char *)__dst[0] + (unint64_t)__dst[1]);
  if (v14 >= 0)
    v2 = __dst;
  else
    v2 = (void **)__dst[0];
  for (; v2 != v1; v2 = (void **)((char *)v2 + 1))
    *(_BYTE *)v2 = __tolower(*(char *)v2);
  v16 = 3;
  v15[0] = 7561825;
  v17 = 6;
  v18[23] = 16;
  strcpy(v18, "channel-saturate");
  v20[23] = 5;
  v19 = 10;
  strcpy(v20, "clamp");
  v23 = 3;
  v21 = 8;
  v22[0] = 7695461;
  v24 = 18;
  v25[23] = 8;
  strcpy(v25, "identity");
  v26 = 0;
  v27 = (char *)operator new(0x19uLL);
  v28 = xmmword_240BBBD80;
  strcpy(v27, "integer-linear-saturate");
  v29 = 9;
  v30 = (char *)operator new(0x19uLL);
  v31 = xmmword_240BBBD80;
  strcpy(v30, "integer_linear_saturate");
  v32 = 9;
  v33[23] = 10;
  strcpy(v33, "leaky-relu");
  v34 = 2;
  v35[23] = 10;
  strcpy(v35, "leaky_relu");
  v36 = 2;
  v37[23] = 9;
  strcpy(v37, "leakyrelu");
  v38 = 2;
  v39[23] = 6;
  strcpy(v39, "linear");
  v40 = 7;
  v41[23] = 4;
  strcpy(v41, "null");
  v42 = 0;
  v43[23] = 4;
  strcpy(v43, "tanh");
  v44 = 4;
  v45[23] = 4;
  strcpy(v45, "relu");
  v46 = 1;
  v47[23] = 8;
  strcpy(v47, "saturate");
  v48 = 9;
  v49[23] = 11;
  strcpy(v49, "scaled-tanh");
  v50 = 5;
  v51[23] = 11;
  strcpy(v51, "scaled_tanh");
  v52 = 5;
  v53[23] = 7;
  strcpy(v53, "sigmoid");
  v54 = 3;
  v55[23] = 7;
  strcpy(v55, "softmax");
  v56 = 11;
  v57[23] = 8;
  strcpy(v57, "softplus");
  v58 = 16;
  v59[23] = 8;
  strcpy(v59, "softsign");
  v60 = 17;
  v61[23] = 16;
  strcpy(v61, "thresholded_relu");
  v62 = 28;
  v63[23] = 4;
  strcpy(v63, "tanh");
  v64 = 4;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = 1065353216;
  sub_240BB3520((uint64_t)__p, (uint64_t)v15, (uint64_t)v15);
  sub_240BB3520((uint64_t)__p, (uint64_t)v18, (uint64_t)v18);
  sub_240BB3520((uint64_t)__p, (uint64_t)v20, (uint64_t)v20);
  sub_240BB3520((uint64_t)__p, (uint64_t)v22, (uint64_t)v22);
  sub_240BB3520((uint64_t)__p, (uint64_t)v25, (uint64_t)v25);
  sub_240BB3520((uint64_t)__p, (uint64_t)&v27, (uint64_t)&v27);
  sub_240BB3520((uint64_t)__p, (uint64_t)&v30, (uint64_t)&v30);
  sub_240BB3520((uint64_t)__p, (uint64_t)v33, (uint64_t)v33);
  sub_240BB3520((uint64_t)__p, (uint64_t)v35, (uint64_t)v35);
  sub_240BB3520((uint64_t)__p, (uint64_t)v37, (uint64_t)v37);
  sub_240BB3520((uint64_t)__p, (uint64_t)v39, (uint64_t)v39);
  sub_240BB3520((uint64_t)__p, (uint64_t)v41, (uint64_t)v41);
  sub_240BB3520((uint64_t)__p, (uint64_t)v43, (uint64_t)v43);
  sub_240BB3520((uint64_t)__p, (uint64_t)v45, (uint64_t)v45);
  sub_240BB3520((uint64_t)__p, (uint64_t)v47, (uint64_t)v47);
  sub_240BB3520((uint64_t)__p, (uint64_t)v49, (uint64_t)v49);
  sub_240BB3520((uint64_t)__p, (uint64_t)v51, (uint64_t)v51);
  sub_240BB3520((uint64_t)__p, (uint64_t)v53, (uint64_t)v53);
  sub_240BB3520((uint64_t)__p, (uint64_t)v55, (uint64_t)v55);
  sub_240BB3520((uint64_t)__p, (uint64_t)v57, (uint64_t)v57);
  sub_240BB3520((uint64_t)__p, (uint64_t)v59, (uint64_t)v59);
  sub_240BB3520((uint64_t)__p, (uint64_t)v61, (uint64_t)v61);
  sub_240BB3520((uint64_t)__p, (uint64_t)v63, (uint64_t)v63);
  v3 = 92;
  do
  {
    if (SHIBYTE(__dst[v3 + 1]) < 0)
      operator delete(*(void **)&v12[v3 * 8]);
    v3 -= 4;
  }
  while (v3 * 8);
  v4 = *((unsigned int *)sub_240BB38D4(__p, (uint64_t)__dst) + 10);
  v5 = (void **)v10[0];
  if (v10[0])
  {
    do
    {
      v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0)
        operator delete(v5[2]);
      operator delete(v5);
      v5 = v8;
    }
    while (v8);
  }
  v6 = __p[0];
  __p[0] = 0;
  if (v6)
    operator delete(v6);
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
  return v4;
}

void sub_240BB3488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_240BA2324((uint64_t)&a11);
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_240BB3520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v37, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  v22 = (char *)operator new(0x30uLL);
  v37[0] = v22;
  v37[1] = a1 + 16;
  v38 = 0;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v10;
  v23 = v22 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_240B6FF68(v23, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)a3;
    *((_QWORD *)v22 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v22 + 10) = *(_DWORD *)(a3 + 24);
  v38 = 1;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v37[0] = *v34;
    *v34 = v37[0];
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v37[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v37[0])
    {
      v35 = *(_QWORD *)(*(_QWORD *)v37[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v35 >= v11)
          v35 %= v11;
      }
      else
      {
        v35 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v37[0];
    }
  }
  v15 = (uint64_t *)v37[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240BB38B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B74388((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240BB38D4(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v8 == v16)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_240BB3A58()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240BB3A6C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_25110CDB8;
  result[1] = v3;
  return result;
}

uint64_t sub_240BB3AA0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_25110CDB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_240BB3ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t *sub_240BB3ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  float v24;
  float v25;
  _BOOL8 v26;
  unint64_t v27;
  unint64_t v28;
  size_t prime;
  int8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v37[2];
  char v38;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v37, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  v22 = (char *)operator new(0x30uLL);
  v37[0] = v22;
  v37[1] = a1 + 16;
  v38 = 0;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v10;
  v23 = v22 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_240B6FF68(v23, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)a3;
    *((_QWORD *)v22 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v22 + 10) = *(_DWORD *)(a3 + 24);
  v38 = 1;
  v24 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    v26 = 1;
    if (v11 >= 3)
      v26 = (v11 & (v11 - 1)) != 0;
    v27 = v26 | (2 * v11);
    v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28)
      prime = v28;
    else
      prime = v27;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v30)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v30)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v30 < 3uLL || (v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (prime <= v31)
        prime = v31;
      if (prime < *(_QWORD *)&v30)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v34)
  {
    *(_QWORD *)v37[0] = *v34;
    *v34 = v37[0];
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v37[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v37[0])
    {
      v35 = *(_QWORD *)(*(_QWORD *)v37[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v35 >= v11)
          v35 %= v11;
      }
      else
      {
        v35 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v37[0];
    }
  }
  v15 = (uint64_t *)v37[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240BB3E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B74388((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240BB3E80(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v8 == v16)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t *sub_240BB4000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  int8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD v35[3];

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_240B709D4((uint64_t)v35, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v5[23];
        if (v16 >= 0)
          v17 = v5[23];
        else
          v17 = *((_QWORD *)v5 + 1);
        if (v16 < 0)
          v5 = *(_BYTE **)v5;
        do
        {
          v18 = v15[1];
          if (v18 == v10)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_240BB437C(a1, v10, a3, (uint64_t)v35);
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v28)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v28)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v28 < 3uLL || (v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (prime <= v29)
        prime = v29;
      if (prime < *(_QWORD *)&v28)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *(_QWORD *)v35[0] = *v32;
    *v32 = v35[0];
  }
  else
  {
    *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v35[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v35[0])
    {
      v33 = *(_QWORD *)(*(_QWORD *)v35[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11)
          v33 %= v11;
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v35[0];
    }
  }
  v15 = (uint64_t *)v35[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_240BB4364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B82848((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_240BB437C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  v9 = v8;
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_240B6FF68((_BYTE *)v8 + 16, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  result = *(_QWORD *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      goto LABEL_9;
    }
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_240BB443C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_240B82848(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_240BB4468(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v8 == v16)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t sub_240BB45F0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  return result;
}

void sub_240BB4608()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 16));
}

void sub_240BB4610()
{
  void *v0;

  operator delete(v0);
}

uint64_t sub_240BB4618(uint64_t **a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD **a5)
{
  size_t v8;
  __CVBuffer *v9;
  uint64_t v10;
  void *BaseAddressOfPlane;
  void *__p[2];
  char v14;
  size_t v15[3];
  int v16;

  v14 = 11;
  strcpy((char *)__p, "plane_index");
  sub_240BA7A94(a4, (uint64_t)__p, (uint64_t)v15);
  if (v16)
    sub_240B735D8();
  v8 = v15[0];
  v16 = -1;
  if (v14 < 0)
    operator delete(__p[0]);
  v9 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a5 + 176))(**a5);
  v10 = **a1;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v9, v8);
  (*(void (**)(uint64_t, void *))(*(_QWORD *)v10 + 224))(v10, BaseAddressOfPlane);
  return a2 + 1;
}

void sub_240BB46EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_240B73210((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_240BB4718(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  __CVBuffer *v7;
  size_t PlaneCount;
  size_t i;
  uint64_t v10;
  void *BaseAddressOfPlane;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  BNNSNDArrayDescriptor v22;

  v7 = (__CVBuffer *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 168))(**a1);
  if (CVPixelBufferIsPlanar(v7))
  {
    PlaneCount = CVPixelBufferGetPlaneCount(v7);
    if (!PlaneCount)
      return a2 + 1;
  }
  else
  {
    PlaneCount = 1;
  }
  for (i = 0; i != PlaneCount; ++i)
  {
    v10 = *(_QWORD *)(*a5 + 8 * i);
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v7, i);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    v12 = sub_240BA8C34(v10);
    v13 = *(_OWORD *)(v12 + 144);
    v14 = *(_OWORD *)(v12 + 160);
    v15 = *(_OWORD *)(v12 + 112);
    *(_OWORD *)&v22.stride[7] = *(_OWORD *)(v12 + 128);
    v16 = *(_OWORD *)v12;
    v17 = *(_OWORD *)(v12 + 32);
    *(_OWORD *)&v22.size[1] = *(_OWORD *)(v12 + 16);
    *(_OWORD *)&v22.size[3] = v17;
    *(_OWORD *)&v22.flags = v16;
    v18 = *(_OWORD *)(v12 + 48);
    v19 = *(_OWORD *)(v12 + 64);
    v20 = *(_OWORD *)(v12 + 96);
    *(_OWORD *)&v22.stride[1] = *(_OWORD *)(v12 + 80);
    *(_OWORD *)&v22.stride[3] = v20;
    *(_OWORD *)&v22.size[5] = v18;
    *(_OWORD *)&v22.size[7] = v19;
    *(_OWORD *)&v22.data_type = v13;
    *(_OWORD *)&v22.table_data_type = v14;
    *(_OWORD *)&v22.stride[5] = v15;
    v22.data = BaseAddressOfPlane;
    BNNSCopy(&v22, (const BNNSNDArrayDescriptor *)v12, 0);
  }
  return a2 + 1;
}

_QWORD *sub_240BB481C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v8[0] = &off_25110C7F8;
  v8[1] = sub_240BB4618;
  v9 = v8;
  sub_240B9453C(a1, 0, 0, 43, 0, 0, v8);
  v2 = v9;
  if (v9 == v8)
  {
    v3 = 4;
    v2 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v6[0] = &off_25110C7F8;
  v6[1] = sub_240BB4718;
  v7 = v6;
  sub_240B9453C(a1, 0, 0, 44, 0, 0, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_240BB4938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_240BB498C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_240BB49DC(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_25110CDF0, MEMORY[0x24BEDAB00]);
}

void sub_240BB49C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_240BB49DC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t mlc_tensor_destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  v1 = *(_QWORD *)(a1 + 576);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_data(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 32);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_name(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 64);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_type(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 96);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_rank(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 128);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_dimension(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 616);
  v5 = a2;
  v6 = v2;
  v3 = *(_QWORD *)(a1 + 160);
  if (!v3)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t mlc_tensor_stride(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 616);
  v5 = a2;
  v6 = v2;
  v3 = *(_QWORD *)(a1 + 192);
  if (!v3)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

uint64_t mlc_tensor_set_dimension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 616);
  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 448);
  if (!v3)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6, &v5);
}

uint64_t mlc_tensor_set_stride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 616);
  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 480);
  if (!v3)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6, &v5);
}

uint64_t mlc_tensor_alloc(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 224);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_set_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *(_QWORD *)(a1 + 616);
  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 544);
  if (!v3)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v7, &v6, &v5);
}

uint64_t mlc_tensor_alignment(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 256);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_location(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 288);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_event(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 616);
  v1 = *(_QWORD *)(a1 + 320);
  if (!v1)
    sub_240B82B78();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

double sub_240BB4D70(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = off_25110C138;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  return result;
}

void sub_240BB4D98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  std::ios_base *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  void **p_dst;
  uint64_t v19;
  const void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  std::ios_base *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  void **v41;
  uint64_t v42;
  const void **v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  std::ios_base *v56;
  uint64_t v57;
  _QWORD *v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  const void **v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  void *v68;
  void **v69;
  void **v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  std::ios_base *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  size_t v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  std::ios_base *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  size_t v98;
  void **v99;
  uint64_t v100;
  const void **v101;
  uint64_t v102;
  const void **v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  void *v113;
  char *v114;
  void *v115;
  void *v116;
  void **v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t i;
  uint64_t v128;
  size_t v129;
  size_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  char *v135;
  void **v136;
  std::__shared_weak_count *v137;
  unint64_t *p_shared_owners;
  unint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void **v152;
  void *v153;
  void **v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  __int128 v159;
  uint64_t v160;
  char *v161;
  _QWORD *v162;
  void **__dst;
  _BYTE v164[24];
  size_t __sz;
  std::__shared_weak_count *v166;
  uint64_t (**v167)();
  uint64_t v168;
  _QWORD v169[10];
  std::ios_base v170;
  uint64_t v171;
  int v172;
  void *v173[2];
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  std::ios_base v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  void **v185;
  void *__p[4];
  __int128 v187;
  _QWORD v188[8];
  _QWORD v189[22];

  v189[19] = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v7 = (_QWORD *)a1[1];
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_240BBBF30;
    strcpy((char *)__p[0], "Deserializing 0-byte buffer?");
    sub_240BB7D38(v7, 5, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return;
  }
  std::streambuf::basic_streambuf();
  v169[2] = a2;
  v169[3] = a2;
  v169[8] = a2;
  v169[9] = a3;
  v169[4] = a2 + a3;
  v169[0] = &off_25110CC20;
  v170.__vftable = (std::ios_base_vtbl *)&unk_25110CD20;
  v168 = 0;
  std::ios_base::init(&v170, v169);
  v172 = -1;
  v167 = &off_25110CB98;
  v169[0] = &off_25110CC20;
  v171 = 0;
  v170.__vftable = (std::ios_base_vtbl *)&unk_25110CCA8;
  v6 = (_QWORD *)a1[1];
  std::streambuf::basic_streambuf();
  v178 = a2;
  v179 = a3;
  v176 = a2;
  v177 = a2 + a3;
  v160 = a2 + a3;
  v175 = a2;
  v173[1] = 0;
  *(_QWORD *)&v174 = &off_25110CC20;
  v180.__vftable = (std::ios_base_vtbl *)&unk_25110CD20;
  v173[0] = &unk_25110CCF8;
  std::ios_base::init(&v180, &v174);
  v182 = -1;
  v173[0] = &off_25110CB98;
  *(_QWORD *)&v174 = &off_25110CC20;
  v181 = 0;
  v180.__vftable = (std::ios_base_vtbl *)&unk_25110CCA8;
  LODWORD(__sz) = 0;
  std::istream::read();
  v156 = a2;
  v157 = v6;
  v162 = a1;
  v8 = MEMORY[0x24BEDB870];
  v9 = MEMORY[0x24BEDB870] + 64;
  v10 = *(void **)(MEMORY[0x24BEDB800] + 8);
  v11 = *(void **)(MEMORY[0x24BEDB800] + 16);
  v189[0] = MEMORY[0x24BEDB870] + 64;
  __p[0] = v10;
  *(void **)((char *)__p + *((_QWORD *)v10 - 3)) = v11;
  v12 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
  std::ios_base::init(v12, &__p[1]);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  __p[0] = (void *)(v8 + 24);
  v189[0] = v9;
  std::streambuf::basic_streambuf();
  v13 = MEMORY[0x24BEDB848];
  __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  memset(&v188[3], 0, 32);
  LODWORD(v188[7]) = 16;
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = MEMORY[0x24BEDB800];
  v16 = sub_240B8AA18(v14, (uint64_t)"-byte binary does not begin with the proper magic. ", 51);
  sub_240B8AA18(v16, (uint64_t)"Invalid pointer given for binary data.", 38);
  if ((v188[7] & 0x10) != 0)
  {
    v19 = v188[6];
    if (v188[6] < v188[1])
    {
      v188[6] = v188[1];
      v19 = v188[1];
    }
    v20 = (const void **)v188;
  }
  else
  {
    if ((v188[7] & 8) == 0)
    {
      v17 = 0;
      v164[15] = 0;
      p_dst = (void **)&__dst;
      goto LABEL_21;
    }
    v20 = (const void **)&__p[3];
    v19 = *((_QWORD *)&v187 + 1);
  }
  v21 = *v20;
  v17 = v19 - (_QWORD)*v20;
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    p_dst = (void **)operator new(v22 + 1);
    *(_QWORD *)v164 = v17;
    *(_QWORD *)&v164[8] = v23 | 0x8000000000000000;
    __dst = p_dst;
    v15 = MEMORY[0x24BEDB800];
  }
  else
  {
    v164[15] = v19 - *(_BYTE *)v20;
    p_dst = (void **)&__dst;
    if (!v17)
      goto LABEL_20;
  }
  memmove(p_dst, v21, v17);
LABEL_20:
  v13 = MEMORY[0x24BEDB848];
LABEL_21:
  *((_BYTE *)p_dst + v17) = 0;
  sub_240BB7D38(v157, 5, (uint64_t)&__dst);
  v24 = v162;
  if ((v164[15] & 0x80000000) != 0)
    operator delete(__dst);
  __p[0] = *(void **)v15;
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v15 + 24);
  __p[1] = (void *)(v13 + 16);
  if (SHIBYTE(v188[5]) < 0)
    operator delete((void *)v188[3]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v189);
  std::istream::~istream();
  MEMORY[0x24268ACB0](&v180);
  std::streambuf::~streambuf();
  if (!sub_240BB7E28((uint64_t)v157))
  {
    v28 = 0;
    v29 = 0;
    v161 = 0;
    v30 = 0;
    goto LABEL_51;
  }
  std::streambuf::basic_streambuf();
  v178 = v156;
  v179 = a3;
  v176 = v156;
  v177 = v160;
  v175 = v156;
  v173[1] = 0;
  *(_QWORD *)&v174 = &off_25110CC20;
  v180.__vftable = (std::ios_base_vtbl *)&unk_25110CD20;
  v173[0] = &unk_25110CCF8;
  std::ios_base::init(&v180, &v174);
  v182 = -1;
  v173[0] = &off_25110CB98;
  *(_QWORD *)&v174 = &off_25110CC20;
  v181 = 0;
  v180.__vftable = (std::ios_base_vtbl *)&unk_25110CCA8;
  *__error() = 0;
  v25 = (void **)((char *)v173 + *((_QWORD *)v173[0] - 4));
  v26 = v25[8];
  v27 = v26 + v25[9];
  v25[2] = v26;
  v25[3] = v26;
  v25[4] = v27;
  LODWORD(__sz) = -1;
  std::istream::read();
  if ((*((_BYTE *)&v175 + *((_QWORD *)v173[0] - 3)) & 5) != 0 || (_DWORD)__sz != 1885728080)
  {
    v31 = MEMORY[0x24BEDB870];
    v32 = MEMORY[0x24BEDB870] + 64;
    v33 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v34 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v189[0] = MEMORY[0x24BEDB870] + 64;
    __p[0] = v33;
    *(void **)((char *)__p + *((_QWORD *)v33 - 3)) = v34;
    v35 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v35, &__p[1]);
    v35[1].__vftable = 0;
    v35[1].__fmtflags_ = -1;
    __p[0] = (void *)(v31 + 24);
    v189[0] = v32;
    std::streambuf::basic_streambuf();
    v36 = MEMORY[0x24BEDB848];
    __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    memset(&v188[3], 0, 32);
    LODWORD(v188[7]) = 16;
    v37 = sub_240B8AA18(__p, (uint64_t)"Segment table starts with 0x", 28);
    *(_DWORD *)((char *)v37 + *(_QWORD *)(*v37 - 24) + 8) = *(_DWORD *)((_BYTE *)v37 + *(_QWORD *)(*v37 - 24) + 8) & 0xFFFFFFB5 | 8;
    v38 = (_QWORD *)std::ostream::operator<<();
    v39 = sub_240B8AA18(v38, (uint64_t)" instead ", 9);
    sub_240B8AA18(v39, (uint64_t)"of magic value.", 15);
    if ((v188[7] & 0x10) != 0)
    {
      v42 = v188[6];
      if (v188[6] < v188[1])
      {
        v188[6] = v188[1];
        v42 = v188[1];
      }
      v43 = (const void **)v188;
    }
    else
    {
      if ((v188[7] & 8) == 0)
      {
        v40 = 0;
        v164[15] = 0;
        v41 = (void **)&__dst;
        goto LABEL_45;
      }
      v43 = (const void **)&__p[3];
      v42 = *((_QWORD *)&v187 + 1);
    }
    v44 = *v43;
    v40 = v42 - (_QWORD)*v43;
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      sub_240B6FFF4();
    if (v40 >= 0x17)
    {
      v45 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v45 = v40 | 7;
      v46 = v45 + 1;
      v41 = (void **)operator new(v45 + 1);
      *(_QWORD *)v164 = v40;
      *(_QWORD *)&v164[8] = v46 | 0x8000000000000000;
      __dst = v41;
      v36 = MEMORY[0x24BEDB848];
    }
    else
    {
      v164[15] = v42 - *(_BYTE *)v43;
      v41 = (void **)&__dst;
      if (!v40)
        goto LABEL_45;
    }
    memmove(v41, v44, v40);
LABEL_45:
    *((_BYTE *)v41 + v40) = 0;
    sub_240BB7D38(v157, 5, (uint64_t)&__dst);
    v24 = v162;
    if ((v164[15] & 0x80000000) != 0)
      operator delete(__dst);
    __p[0] = *(void **)MEMORY[0x24BEDB800];
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
    __p[1] = (void *)(v36 + 16);
    if (SHIBYTE(v188[5]) < 0)
      operator delete((void *)v188[3]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x24268ACB0](v189);
    v28 = 0;
    v29 = 0;
    v161 = 0;
    v30 = 0;
    goto LABEL_50;
  }
  __p[0] = 0;
  std::istream::read();
  v28 = (char *)__p[0];
  std::istream::read();
  v29 = (char *)__p[0];
  std::istream::read();
  v161 = (char *)__p[0];
  std::istream::read();
  v30 = (char *)__p[0];
LABEL_50:
  std::istream::~istream();
  MEMORY[0x24268ACB0](&v180);
  std::streambuf::~streambuf();
LABEL_51:
  if (!sub_240BB7E28(v24[1]))
    goto LABEL_179;
  v47 = (_QWORD *)v24[1];
  v48 = (uint64_t (***)())((char *)&v167 + (_QWORD)*(v167 - 4));
  v49 = v48[8];
  v50 = v49 + v48[9];
  v48[2] = v49;
  v48[3] = &v28[v49];
  v48[4] = v50;
  __sz = 0;
  std::istream::read();
  v158 = v30;
  v155 = v29;
  v51 = MEMORY[0x24BEDB870];
  v52 = MEMORY[0x24BEDB870] + 64;
  v53 = MEMORY[0x24BEDB800];
  v54 = *(void **)(MEMORY[0x24BEDB800] + 8);
  v55 = *(void **)(MEMORY[0x24BEDB800] + 16);
  v189[0] = MEMORY[0x24BEDB870] + 64;
  __p[0] = v54;
  *(void **)((char *)__p + *((_QWORD *)v54 - 3)) = v55;
  v56 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
  std::ios_base::init(v56, &__p[1]);
  v56[1].__vftable = 0;
  v56[1].__fmtflags_ = -1;
  __p[0] = (void *)(v51 + 24);
  v189[0] = v52;
  std::streambuf::basic_streambuf();
  v57 = MEMORY[0x24BEDB848];
  __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
  memset(&v188[3], 0, 32);
  LODWORD(v188[7]) = 16;
  sub_240B8AA18(__p, (uint64_t)"'", 1);
  v58 = (_QWORD *)std::ostream::operator<<();
  sub_240B8AA18(v58, (uint64_t)"'-byte buffer is too large for listing.", 39);
  if ((v188[7] & 0x10) != 0)
  {
    v61 = v188[6];
    if (v188[6] < v188[1])
    {
      v188[6] = v188[1];
      v61 = v188[1];
    }
    v62 = (const void **)v188;
  }
  else
  {
    if ((v188[7] & 8) == 0)
    {
      v59 = 0;
      BYTE7(v174) = 0;
      v60 = v173;
      goto LABEL_67;
    }
    v62 = (const void **)&__p[3];
    v61 = *((_QWORD *)&v187 + 1);
  }
  v63 = *v62;
  v59 = v61 - (_QWORD)*v62;
  if (v59 > 0x7FFFFFFFFFFFFFF7)
    sub_240B6FFF4();
  if (v59 >= 0x17)
  {
    v64 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v64 = v59 | 7;
    v65 = v64 + 1;
    v60 = operator new(v64 + 1);
    v173[1] = (void *)v59;
    *(_QWORD *)&v174 = v65 | 0x8000000000000000;
    v173[0] = v60;
    goto LABEL_66;
  }
  BYTE7(v174) = v61 - *(_BYTE *)v62;
  v60 = v173;
  if (v59)
LABEL_66:
    memmove(v60, v63, v59);
LABEL_67:
  *((_BYTE *)v60 + v59) = 0;
  sub_240BB7D38(v47, 5, (uint64_t)v173);
  v66 = v162;
  if (SBYTE7(v174) < 0)
    operator delete(v173[0]);
  *(_OWORD *)v164 = 0uLL;
  __dst = 0;
  __p[0] = *(void **)v53;
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v53 + 24);
  __p[1] = (void *)(v57 + 16);
  if (SHIBYTE(v188[5]) < 0)
    operator delete((void *)v188[3]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x24268ACB0](v189);
  v67 = v158;
  v68 = (void *)v162[2];
  if (v68)
  {
    v162[3] = v68;
    operator delete(v68);
    v162[2] = 0;
    v162[3] = 0;
    v162[4] = 0;
  }
  v69 = __dst;
  v162[2] = __dst;
  v70 = *(void ***)v164;
  *(_OWORD *)(v162 + 3) = *(_OWORD *)v164;
  if (v69 == v70)
    goto LABEL_179;
  v71 = (_QWORD *)v162[1];
  v72 = (uint64_t (***)())((char *)&v167 + (_QWORD)*(v167 - 4));
  v73 = v72[8];
  v74 = v73 + v72[9];
  v72[2] = v73;
  v72[3] = &v155[v73];
  v72[4] = v74;
  __sz = 0;
  std::istream::read();
  sub_240BB6EAC(v173, __sz);
  if (__sz)
  {
    v185 = 0;
    std::istream::read();
    if (v168 == 8)
    {
      v89 = MEMORY[0x24BEDB870];
      v90 = MEMORY[0x24BEDB870] + 64;
      v91 = MEMORY[0x24BEDB800];
      v92 = *(void **)(MEMORY[0x24BEDB800] + 8);
      v93 = *(void **)(MEMORY[0x24BEDB800] + 16);
      v189[0] = MEMORY[0x24BEDB870] + 64;
      __p[0] = v92;
      *(void **)((char *)__p + *((_QWORD *)v92 - 3)) = v93;
      v94 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
      std::ios_base::init(v94, &__p[1]);
      v94[1].__vftable = 0;
      v94[1].__fmtflags_ = -1;
      __p[0] = (void *)(v89 + 24);
      v189[0] = v90;
      std::streambuf::basic_streambuf();
      v95 = MEMORY[0x24BEDB848];
      __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
      memset(&v188[3], 0, 32);
      LODWORD(v188[7]) = 16;
      v96 = (_QWORD *)std::ostream::operator<<();
      sub_240B8AA18(v96, (uint64_t)"-byte kernel #", 14);
      v97 = (_QWORD *)std::ostream::operator<<();
      sub_240B8AA18(v97, (uint64_t)" is too large for binary.", 25);
      if ((v188[7] & 0x10) != 0)
      {
        v102 = v188[6];
        if (v188[6] < v188[1])
        {
          v188[6] = v188[1];
          v102 = v188[1];
        }
        v103 = (const void **)v188;
      }
      else
      {
        if ((v188[7] & 8) == 0)
        {
          v98 = 0;
          v164[15] = 0;
          v99 = (void **)&__dst;
          goto LABEL_108;
        }
        v103 = (const void **)&__p[3];
        v102 = *((_QWORD *)&v187 + 1);
      }
      v108 = *v103;
      v98 = v102 - (_QWORD)*v103;
      if (v98 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      if (v98 >= 0x17)
      {
        v109 = v95;
        v110 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v98 | 7) != 0x17)
          v110 = v98 | 7;
        v111 = v110 + 1;
        v99 = (void **)operator new(v110 + 1);
        *(_QWORD *)v164 = v98;
        *(_QWORD *)&v164[8] = v111 | 0x8000000000000000;
        __dst = v99;
        v95 = v109;
      }
      else
      {
        v164[15] = v102 - *(_BYTE *)v103;
        v99 = (void **)&__dst;
        if (!v98)
          goto LABEL_108;
      }
      memmove(v99, v108, v98);
LABEL_108:
      *((_BYTE *)v99 + v98) = 0;
      sub_240BB7D38(v71, 5, (uint64_t)&__dst);
      v66 = v162;
      if ((v164[15] & 0x80000000) != 0)
        operator delete(__dst);
      __p[0] = *(void **)v91;
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v91 + 24);
      __p[1] = (void *)(v95 + 16);
      if (SHIBYTE(v188[5]) < 0)
        operator delete((void *)v188[3]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x24268ACB0](v189);
LABEL_118:
      v76 = (char *)v173[0];
      v75 = 0uLL;
      if (v173[0])
      {
        v112 = v173[1];
        v113 = v173[0];
        if (v173[1] != v173[0])
        {
          v114 = (char *)v173[1];
          do
          {
            v116 = (void *)*((_QWORD *)v114 - 3);
            v114 -= 24;
            v115 = v116;
            if (v116)
            {
              *(v112 - 2) = v115;
              operator delete(v115);
            }
            v112 = v114;
          }
          while (v114 != v76);
          v113 = v173[0];
        }
        v173[1] = v76;
        operator delete(v113);
        v76 = 0;
        v75 = 0uLL;
      }
      goto LABEL_126;
    }
    v77 = MEMORY[0x24BEDB870];
    v78 = MEMORY[0x24BEDB870] + 64;
    v79 = MEMORY[0x24BEDB800];
    v80 = *(void **)(MEMORY[0x24BEDB800] + 8);
    v81 = *(void **)(MEMORY[0x24BEDB800] + 16);
    v189[0] = MEMORY[0x24BEDB870] + 64;
    __p[0] = v80;
    *(void **)((char *)__p + *((_QWORD *)v80 - 3)) = v81;
    v82 = (std::ios_base *)((char *)__p + *((_QWORD *)__p[0] - 3));
    std::ios_base::init(v82, &__p[1]);
    v82[1].__vftable = 0;
    v82[1].__fmtflags_ = -1;
    __p[0] = (void *)(v77 + 24);
    v189[0] = v78;
    std::streambuf::basic_streambuf();
    v83 = MEMORY[0x24BEDB848];
    __p[1] = (void *)(MEMORY[0x24BEDB848] + 16);
    memset(&v188[3], 0, 32);
    LODWORD(v188[7]) = 16;
    sub_240B8AA18(__p, (uint64_t)"Read only ", 10);
    v84 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v84, (uint64_t)" bytes (instead of ", 19);
    v85 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v85, (uint64_t)") for kernel ", 13);
    v86 = (_QWORD *)std::ostream::operator<<();
    sub_240B8AA18(v86, (uint64_t)".", 1);
    if ((v188[7] & 0x10) != 0)
    {
      v100 = v188[6];
      if (v188[6] < v188[1])
      {
        v188[6] = v188[1];
        v100 = v188[1];
      }
      v101 = (const void **)v188;
    }
    else
    {
      if ((v188[7] & 8) == 0)
      {
        v87 = 0;
        v164[15] = 0;
        v88 = (void **)&__dst;
        goto LABEL_113;
      }
      v101 = (const void **)&__p[3];
      v100 = *((_QWORD *)&v187 + 1);
    }
    v104 = *v101;
    v87 = v100 - (_QWORD)*v101;
    if (v87 > 0x7FFFFFFFFFFFFFF7)
      sub_240B6FFF4();
    if (v87 >= 0x17)
    {
      v105 = v83;
      v106 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v87 | 7) != 0x17)
        v106 = v87 | 7;
      v107 = v106 + 1;
      v88 = (void **)operator new(v106 + 1);
      *(_QWORD *)v164 = v87;
      *(_QWORD *)&v164[8] = v107 | 0x8000000000000000;
      __dst = v88;
      v83 = v105;
    }
    else
    {
      v164[15] = v100 - *(_BYTE *)v101;
      v88 = (void **)&__dst;
      if (!v87)
        goto LABEL_113;
    }
    memmove(v88, v104, v87);
LABEL_113:
    *((_BYTE *)v88 + v87) = 0;
    sub_240BB7D38(v71, 5, (uint64_t)&__dst);
    v66 = v162;
    if ((v164[15] & 0x80000000) != 0)
      operator delete(__dst);
    __p[0] = *(void **)v79;
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(v79 + 24);
    __p[1] = (void *)(v83 + 16);
    if (SHIBYTE(v188[5]) < 0)
      operator delete((void *)v188[3]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x24268ACB0](v189);
    v67 = v158;
    goto LABEL_118;
  }
  v75 = *(_OWORD *)v173;
  v76 = (char *)v174;
LABEL_126:
  v117 = (void **)(v66 + 5);
  v118 = v66[5];
  if (v118)
  {
    v159 = v75;
    v119 = v66[6];
    v120 = (void *)v66[5];
    if (v119 != v118)
    {
      v121 = v66[6];
      do
      {
        v123 = *(void **)(v121 - 24);
        v121 -= 24;
        v122 = v123;
        if (v123)
        {
          *(_QWORD *)(v119 - 16) = v122;
          operator delete(v122);
        }
        v119 = v121;
      }
      while (v121 != v118);
      v120 = *v117;
      v66 = v162;
    }
    v66[6] = v118;
    operator delete(v120);
    *v117 = 0;
    v117[1] = 0;
    v117[2] = 0;
    v75 = v159;
  }
  *(_OWORD *)(v66 + 5) = v75;
  v66[7] = v76;
  v124 = (uint64_t (***)())((char *)&v167 + (_QWORD)*(v167 - 4));
  v125 = v124[8];
  v126 = v125 + v124[9];
  v124[2] = v125;
  v124[3] = &v67[v125];
  v124[4] = v126;
  v185 = 0;
  std::istream::read();
  *(_OWORD *)v173 = 0u;
  v174 = 0u;
  LODWORD(v175) = 1065353216;
  std::istream::read();
  if (v185)
  {
    for (i = 0; i < (unint64_t)v185; ++i)
    {
      v184 = 0;
      std::istream::read();
      memset(v189, 0, 144);
      v187 = 0u;
      memset(v188, 0, sizeof(v188));
      memset(__p, 0, sizeof(__p));
      std::istream::read();
      v183 = 0;
      std::istream::read();
      v128 = v183;
      v129 = strlen((const char *)__p);
      if (v129 > 0x7FFFFFFFFFFFFFF7)
        sub_240B6FFF4();
      v130 = v129;
      if (v129 >= 0x17)
      {
        v132 = (v129 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v129 | 7) != 0x17)
          v132 = v129 | 7;
        v133 = v132 + 1;
        v131 = (void **)operator new(v132 + 1);
        *(_QWORD *)v164 = v130;
        *(_QWORD *)&v164[8] = v133 | 0x8000000000000000;
        __dst = v131;
      }
      else
      {
        v164[15] = v129;
        v131 = (void **)&__dst;
        if (!v129)
          goto LABEL_145;
      }
      memcpy(v131, __p, v130);
LABEL_145:
      *((_BYTE *)v131 + v130) = 0;
      __sz = (size_t)&__dst;
      *((_QWORD *)sub_240BB6F74((uint64_t)v173, (uint64_t)&__dst, (uint64_t)&unk_240BBBF40, (__int128 **)&__sz) + 5) = v128;
      if ((v164[15] & 0x80000000) != 0)
        operator delete(__dst);
    }
  }
  sub_240BB74D8(v162 + 8);
  v134 = (uint64_t *)v174;
  if (!(_QWORD)v174)
    goto LABEL_177;
  v135 = &v161[v156];
  do
  {
    while (1)
    {
      if (*((char *)v134 + 39) < 0)
      {
        sub_240B6FF68(__p, (void *)v134[2], v134[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v134 + 1);
        __p[2] = (void *)v134[4];
      }
      __p[3] = (void *)v134[5];
      v136 = (void **)&v135[(unint64_t)__p[3]];
      __sz = (size_t)&v135[(unint64_t)__p[3]];
      v137 = (std::__shared_weak_count *)operator new();
      v137->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v137->__shared_owners_;
      v137->__vftable = (std::__shared_weak_count_vtbl *)&off_25110CE18;
      v137->__shared_weak_owners_ = 0;
      v137[1].__vftable = (std::__shared_weak_count_vtbl *)v136;
      v166 = v137;
      __dst = v136;
      *(_QWORD *)v164 = v137;
      do
        v139 = __ldxr(p_shared_owners);
      while (__stxr(v139 + 1, p_shared_owners));
      *(_QWORD *)&v164[8] = 0;
      *(_QWORD *)&v164[16] = 0;
      v185 = __p;
      v140 = sub_240BB75C8((uint64_t)(v162 + 8), (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v185);
      v141 = v140;
      do
        v142 = __ldxr(p_shared_owners);
      while (__stxr(v142 + 1, p_shared_owners));
      v143 = (std::__shared_weak_count *)v140[6];
      v140[5] = (uint64_t)v136;
      v140[6] = (uint64_t)v137;
      if (v143)
      {
        v144 = (unint64_t *)&v143->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (!v145)
        {
          ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
          std::__shared_weak_count::__release_weak(v143);
        }
      }
      *(_OWORD *)(v141 + 7) = *(_OWORD *)&v164[8];
      v146 = *(std::__shared_weak_count **)v164;
      if (!*(_QWORD *)v164)
        goto LABEL_167;
      v147 = (unint64_t *)(*(_QWORD *)v164 + 8);
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
        v149 = v166;
        if (!v166)
          goto LABEL_149;
      }
      else
      {
LABEL_167:
        v149 = v166;
        if (!v166)
          goto LABEL_149;
      }
      v150 = (unint64_t *)&v149->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
LABEL_149:
      if (SHIBYTE(__p[2]) < 0)
        break;
      v134 = (uint64_t *)*v134;
      if (!v134)
        goto LABEL_176;
    }
    operator delete(__p[0]);
    v134 = (uint64_t *)*v134;
  }
  while (v134);
LABEL_176:
  v152 = (void **)v174;
  if ((_QWORD)v174)
  {
    do
    {
      v154 = (void **)*v152;
      if (*((char *)v152 + 39) < 0)
        operator delete(v152[2]);
      operator delete(v152);
      v152 = v154;
    }
    while (v154);
  }
LABEL_177:
  v153 = v173[0];
  v173[0] = 0;
  if (v153)
    operator delete(v153);
LABEL_179:
  std::istream::~istream();
  MEMORY[0x24268ACB0](&v170);
  std::streambuf::~streambuf();
}

void sub_240BB6960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  if (a25 < 0)
    operator delete(__p);
  sub_240B8A994((uint64_t)&STACK[0x290]);
  sub_240BA2498(&a60);
  JUMPOUT(0x240BB6CC0);
}

void sub_240BB6C3C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x240BB6CC8);
}

void sub_240BB6C54()
{
  __cxa_end_catch();
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  JUMPOUT(0x240BB6CB8);
}

void sub_240BB6CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_240BA2324((uint64_t)&a57);
  sub_240BAB648((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_240BB6CD0(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_240BB6CD8(uint64_t a1)
{
  return a1 + 40;
}

void sub_240BB6CE0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *i;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  void **v16;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = *(uint64_t **)(a1 + 80); i; i = (uint64_t *)*i)
  {
    while (1)
    {
      if (*((char *)i + 39) < 0)
      {
        sub_240B6FF68(__p, (void *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)i + 1);
        v12 = i[4];
      }
      v5 = i[5];
      v4 = (std::__shared_weak_count *)i[6];
      v13 = v5;
      v14 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        v5 = v13;
      }
      v15 = *(_OWORD *)(i + 7);
      v16 = __p;
      sub_240BB7984(a2, (uint64_t)__p, (uint64_t)&unk_240BBBF40, (__int128 **)&v16)[5] = v5;
      v8 = v14;
      if (v14)
      {
        v9 = (unint64_t *)&v14->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (SHIBYTE(v12) < 0)
        break;
      i = (uint64_t *)*i;
      if (!i)
        return;
    }
    operator delete(__p[0]);
  }
}

void sub_240BB6E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_240BA2324(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_240BB6E38(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_6;
    }
  }
  if (*(char *)(a1 + 23) < 0)
LABEL_6:
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_240BB6EAC(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_240B70258();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_240BB6F54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_QWORD *)v1)
    sub_240BBA890((void **)(v1 + 8), *(char **)v1, (void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_240BB6F74(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  void **v15;
  unsigned __int8 *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 *v24;
  __int128 v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t prime;
  int8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = *((_QWORD *)v16 + 1);
          if (v19 == v11)
          {
            v20 = v16[39];
            if ((v20 & 0x80u) == 0)
              v21 = v16[39];
            else
              v21 = *((_QWORD *)v16 + 3);
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((_QWORD *)v16 + 3)))
                  return v16;
              }
              else
              {
                if (!v16[39])
                  return v16;
                v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  v23 = (_QWORD *)(a1 + 16);
  v16 = (unsigned __int8 *)operator new(0x30uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v11;
  v24 = *a4;
  v25 = **a4;
  *((_QWORD *)v16 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v25;
  *((_QWORD *)v24 + 1) = 0;
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v16 + 5) = 0;
  v41 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    v28 = 1;
    if (v12 >= 3)
      v28 = (v12 & (v12 - 1)) != 0;
    v29 = v28 | (2 * v12);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = v30;
    else
      prime = v29;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v32)
      goto LABEL_49;
    if (prime < *(_QWORD *)&v32)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v32 < 3uLL || (v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (prime <= v33)
        prime = v33;
      if (prime < *(_QWORD *)&v32)
LABEL_49:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v36 = *(_QWORD *)a1;
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v16 = *v37;
LABEL_73:
    *v37 = v16;
    goto LABEL_74;
  }
  *(_QWORD *)v16 = *v23;
  *v23 = v16;
  *(_QWORD *)(v36 + 8 * v4) = v23;
  if (*(_QWORD *)v16)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12)
        v38 %= v12;
    }
    else
    {
      v38 &= v12 - 1;
    }
    v37 = (_QWORD *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240BB72E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B74388((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_240BB72FC(void **a1, size_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (v4 - v5 < a2)
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 + a2;
    if ((uint64_t)(v8 + a2) < 0)
      sub_240B70258();
    v10 = v4 - v7;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v13 = &v12[v8];
    v14 = &v12[v11];
    v15 = &v12[v8 + a2];
    bzero(&v12[v8], a2);
    if (v5 == v7)
    {
      v12 += v8;
      goto LABEL_32;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v12) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v16 = 0;
        goto LABEL_24;
      }
      v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      v17 = v5 - 16;
      v18 = &v12[v5 - 16 - v7];
      v19 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v8 == v16)
        goto LABEL_31;
      if ((v8 & 0x18) != 0)
      {
LABEL_24:
        v6 = &v5[-(v8 & 0xFFFFFFFFFFFFFFF8)];
        v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v21 = &v5[-v16 - 8];
        v22 = &v12[v21 - v7];
        v23 = v16 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v24 = *(_QWORD *)v21;
          v21 -= 8;
          *(_QWORD *)v22 = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_31;
        goto LABEL_29;
      }
      v13 -= v16;
      v6 = &v5[-v16];
    }
LABEL_29:
    v25 = v13 - 1;
    do
    {
      v26 = *--v6;
      *v25-- = v26;
    }
    while (v6 != v7);
LABEL_31:
    v6 = (char *)*a1;
LABEL_32:
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v14;
    if (v6)
      operator delete(v6);
    return;
  }
  if (a2)
  {
    bzero(v5, a2);
    v6 = &v5[a2];
  }
  a1[1] = v6;
}

void sub_240BB74D8(_QWORD *a1)
{
  char *v2;
  uint64_t v3;
  uint64_t i;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a1[3])
  {
    v2 = (char *)a1[2];
    if (v2)
    {
      do
      {
        v5 = *(char **)v2;
        v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        if (v2[39] < 0)
          operator delete(*((void **)v2 + 2));
        operator delete(v2);
        v2 = v5;
      }
      while (v5);
    }
    a1[2] = 0;
    v3 = a1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void sub_240BB759C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24268ACF8);
}

uint64_t *sub_240BB75C8(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = v16[1];
          if (v19 == v11)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  v23 = (char *)operator new(0x48uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  v41 = 0;
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = v11;
  v24 = v23 + 16;
  v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_240B6FF68(v24, *(void **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    *((_QWORD *)v23 + 4) = *((_QWORD *)v25 + 2);
    *(_OWORD *)v24 = v26;
  }
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  v41 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v40[0] = *v37;
    *v37 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v40[0])
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40[0];
    }
  }
  v16 = (uint64_t *)v40[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240BB7968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B9E600((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_240BB7984(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t prime;
  int8x8_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD v40[2];
  char v41;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_240B709D4((uint64_t)v40, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = *v15;
      if (*v15)
      {
        v17 = v6[23];
        if (v17 >= 0)
          v18 = v6[23];
        else
          v18 = *((_QWORD *)v6 + 1);
        if (v17 < 0)
          v6 = *(_BYTE **)v6;
        do
        {
          v19 = v16[1];
          if (v19 == v11)
          {
            v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0)
              v21 = *((unsigned __int8 *)v16 + 39);
            else
              v21 = v16[3];
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3]))
                  return v16;
              }
              else
              {
                if (!*((_BYTE *)v16 + 39))
                  return v16;
                v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22)
                    return v16;
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  v23 = operator new(0x30uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  v41 = 0;
  *v23 = 0;
  v23[1] = v11;
  v24 = v23 + 2;
  v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_240B6FF68(v24, *(void **)v25, *((_QWORD *)v25 + 1));
  }
  else
  {
    v26 = *v25;
    v23[4] = *((_QWORD *)v25 + 2);
    *(_OWORD *)v24 = v26;
  }
  v23[5] = 0;
  v41 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    v29 = 1;
    if (v12 >= 3)
      v29 = (v12 & (v12 - 1)) != 0;
    v30 = v29 | (2 * v12);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      prime = v31;
    else
      prime = v30;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v33)
      goto LABEL_52;
    if (prime < *(_QWORD *)&v33)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v33 < 3uLL || (v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime < *(_QWORD *)&v33)
LABEL_52:
        sub_240B70E0C(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v37 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v37)
  {
    *(_QWORD *)v40[0] = *v37;
    *v37 = v40[0];
  }
  else
  {
    *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v40[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v40[0])
    {
      v38 = *(_QWORD *)(*(_QWORD *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12)
          v38 %= v12;
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v40[0];
    }
  }
  v16 = (uint64_t *)v40[0];
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_240BB7D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_240B74388((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_240BB7D38(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 result;
  __n128 v11;
  uint64_t v12;

  if (*(char *)(a3 + 23) < 0)
  {
    sub_240B6FF68(&v11, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    v11 = *(__n128 *)a3;
    v12 = *(_QWORD *)(a3 + 16);
  }
  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_240BB7F48((uint64_t)a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  *(_DWORD *)v8 = a2;
  result = v11;
  *(_QWORD *)(v8 + 24) = v12;
  *(__n128 *)(v8 + 8) = result;
  ++a1[5];
  return result;
}

void sub_240BB7E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_240BB7E28(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) == 0;
}

uint64_t sub_240BB7E38(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((*(_QWORD *)(a1 + 32) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * (*(_QWORD *)(a1 + 32) & 0x7FLL);
}

void sub_240BB7E58(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  void **v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (!*(_QWORD *)(a1 + 40))
    sub_240BB498C("deque");
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v3 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v3 & 0x7F);
  *a2 = *(_DWORD *)v4;
  v5 = a2 + 2;
  v6 = (void **)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
  {
    sub_240B6FF68(v5, *v6, *(_QWORD *)(v4 + 16));
    v3 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v3 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v3 & 0x7F);
    if (*(char *)(v8 + 31) < 0)
    {
      operator delete(*(void **)(v8 + 8));
      v3 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = *(_OWORD *)v6;
    *((_QWORD *)v5 + 2) = *(_QWORD *)(v4 + 24);
    *(_OWORD *)v5 = v7;
  }
  v9 = *(_QWORD *)(a1 + 40) - 1;
  v10 = v3 + 1;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v9;
  if (v10 >= 0x100)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 128;
  }
}

void sub_240BB7F48(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  BOOL v35;
  int64_t v36;
  unint64_t v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  __int128 *v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_56:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v29 = (v5 - v9) >> 2;
      if (v5 == v9)
        v29 = 1;
      if (!(v29 >> 61))
      {
        v30 = v29 >> 2;
        v31 = 8 * v29;
        v32 = (char *)operator new(8 * v29);
        v33 = &v32[8 * v30];
        v34 = &v32[v31];
        v36 = v5 - v7;
        v35 = v5 == v7;
        v5 = v33;
        if (!v35)
        {
          v5 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          v37 = v36 - 8;
          if ((unint64_t)(v36 - 8) >= 0x38)
          {
            v53 = &v32[8 * v30];
            v38 = v53;
            if ((unint64_t)(v53 - v7) >= 0x20)
            {
              v54 = (v37 >> 3) + 1;
              v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              v38 = &v33[v55];
              v7 += v55;
              v56 = (__int128 *)(v6 + 3);
              v57 = v53 + 16;
              v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v59 = *v56;
                *(v57 - 1) = *(v56 - 1);
                *v57 = v59;
                v56 += 2;
                v57 += 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_54;
            }
          }
          else
          {
            v38 = &v32[8 * v30];
          }
          do
          {
            v60 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v38 = v60;
            v38 += 8;
          }
          while (v38 != v5);
        }
        goto LABEL_54;
      }
LABEL_64:
      sub_240B7007C();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_56;
  }
  v18 = *(char **)(a1 + 8);
  v17 = *(char **)(a1 + 16);
  v19 = v17 - v18;
  v20 = (v17 - v18) >> 3;
  v21 = *(char **)(a1 + 24);
  v22 = (uint64_t)&v21[-*(_QWORD *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      *(_QWORD *)&v69 = operator new(0x1000uLL);
      sub_240BA4CFC((char **)a1, &v69);
      return;
    }
    *(_QWORD *)&v69 = operator new(0x1000uLL);
    sub_240BA4E88((void **)a1, &v69);
    v39 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v39 + 1);
    v8 = *v39;
    *(_QWORD *)(a1 + 8) = v39 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_56;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v40 = (v5 - v9) >> 2;
      if (v5 == v9)
        v40 = 1;
      if (!(v40 >> 61))
      {
        v41 = v40 >> 2;
        v42 = 8 * v40;
        v32 = (char *)operator new(8 * v40);
        v33 = &v32[8 * v41];
        v34 = &v32[v42];
        v43 = v5 - v7;
        v35 = v5 == v7;
        v5 = v33;
        if (!v35)
        {
          v5 = &v33[v43 & 0xFFFFFFFFFFFFFFF8];
          v44 = v43 - 8;
          if ((unint64_t)(v43 - 8) >= 0x38)
          {
            v61 = &v32[8 * v41];
            v45 = v61;
            if ((unint64_t)(v61 - v7) >= 0x20)
            {
              v62 = (v44 >> 3) + 1;
              v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              v45 = &v33[v63];
              v7 += v63;
              v64 = (__int128 *)(v39 + 3);
              v65 = v61 + 16;
              v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v67 = *v64;
                *(v65 - 1) = *(v64 - 1);
                *v65 = v67;
                v64 += 2;
                v65 += 2;
                v66 -= 4;
              }
              while (v66);
              if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_54;
            }
          }
          else
          {
            v45 = &v32[8 * v41];
          }
          do
          {
            v68 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v45 = v68;
            v45 += 8;
          }
          while (v45 != v5);
        }
LABEL_54:
        *(_QWORD *)a1 = v32;
        *(_QWORD *)(a1 + 8) = v33;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v34;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_56;
      }
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v21 == *(char **)a1)
    v24 = 1;
  else
    v24 = v23;
  v71 = a1 + 24;
  if (v24 >> 61)
    goto LABEL_64;
  v25 = (char *)operator new(8 * v24);
  v26 = &v25[8 * v20];
  *(_QWORD *)&v69 = v25;
  *((_QWORD *)&v69 + 1) = v26;
  *(_QWORD *)&v70 = v26;
  *((_QWORD *)&v70 + 1) = &v25[8 * v24];
  v27 = operator new(0x1000uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18)
        v46 = 1;
      else
        v46 = v19 >> 2;
      if (v46 >> 61)
        sub_240B7007C();
      v47 = (char *)operator new(8 * v46);
      v26 = &v47[8 * (v46 >> 2)];
      *(_QWORD *)&v69 = v47;
      *((_QWORD *)&v69 + 1) = v26;
      *((_QWORD *)&v70 + 1) = &v47[8 * v46];
      operator delete(v25);
      v17 = *(char **)(a1 + 16);
    }
    else
    {
      v28 = v20 + 2;
      if (v20 >= -1)
        v28 = v20 + 1;
      v26 -= 8 * (v28 >> 1);
      *((_QWORD *)&v69 + 1) = v26;
    }
  }
  *(_QWORD *)v26 = v27;
  *(_QWORD *)&v70 = v26 + 8;
  v48 = -7 - (_QWORD)v17;
  while (v17 != *(char **)(a1 + 8))
  {
    v17 -= 8;
    v48 += 8;
    sub_240BA4E88((void **)&v69, v17);
  }
  v49 = *(char **)a1;
  v50 = v69;
  v51 = v70;
  *(_QWORD *)&v69 = *(_QWORD *)a1;
  *((_QWORD *)&v69 + 1) = v17;
  v52 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v51;
  v70 = v52;
  if (v17 != (char *)v52)
    *(_QWORD *)&v70 = v52 + (-(v52 + v48) & 0xFFFFFFFFFFFFFFF8);
  if (v49)
    operator delete(v49);
}

void sub_240BB836C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  void *v11;

  operator delete(v11);
  if (!__p)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t mlc_event_create()
{
  uint64_t result;

  result = operator new();
  *(_DWORD *)result = -65849;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t mlc_event_record(uint64_t result)
{
  if (result)
    atomic_store(1uLL, (unint64_t *)(result + 8));
  return result;
}

uint64_t mlc_event_reset(uint64_t result)
{
  if (result)
    atomic_store(0, (unint64_t *)(result + 8));
  return result;
}

unint64_t mlc_event_query(uint64_t a1)
{
  if (a1)
    return atomic_load((unint64_t *)(a1 + 8));
  else
    return -1;
}

unint64_t mlc_event_wait(uint64_t a1)
{
  unint64_t *v2;
  __int128 v6;

  if (!a1)
    return -1;
  v6 = xmmword_240BBB810;
  v2 = (unint64_t *)(a1 + 8);
  while (!atomic_load((unint64_t *)(a1 + 8)))
    nanosleep((const timespec *)&v6, 0);
  return atomic_load(v2);
}

uint64_t mlc_event_destroy(uint64_t result)
{
  if (result)
    JUMPOUT(0x24268ACF8);
  return result;
}

void *sub_240BB84D8(size_t size)
{
  void *memptr;

  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x10uLL, size, 0x54CC857uLL))
    return 0;
  else
    return memptr;
}

void sub_240BB8518(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  uint64_t *v15;
  uint64_t v16;
  const char *v17;
  void *__p;
  size_t v19;
  unint64_t v20;
  char v21;

  v5 = (_QWORD *)(a1 + 8);
  v6 = sub_240BB9978((_QWORD *)(a1 + 8), a2);
  if (v6)
    goto LABEL_18;
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = v8 + 2;
  if (v8 + 2 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  if (v9 >= 0x17)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v11 = v9 | 7;
    v12 = v11 + 1;
    v13 = (char *)operator new(v11 + 1);
    v19 = v8 + 2;
    v20 = v12 | 0x8000000000000000;
    __p = v13;
    *(_WORD *)v13 = 11565;
    v10 = v13 + 2;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    HIBYTE(v20) = v8 + 2;
    v10 = (char *)&__p + 2;
    __p = (void *)11565;
    if (!v8)
      goto LABEL_16;
  }
  if (v7 >= 0)
    v14 = (const char *)a2;
  else
    v14 = *(const char **)a2;
  memmove(v10, v14, v8);
LABEL_16:
  v10[v8] = 0;
  v15 = sub_240BB9978(v5, (uint64_t)&__p);
  v6 = v15;
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p);
    if (v6)
    {
LABEL_18:
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 24) = -1;
      v16 = *((unsigned int *)v6 + 16);
      if ((_DWORD)v16 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t *))off_25110CE58[v16])(&v21, a3, v6 + 5);
        *(_DWORD *)(a3 + 24) = v16;
      }
      return;
    }
  }
  else if (v15)
  {
    goto LABEL_18;
  }
  if (*(char *)(a2 + 23) >= 0)
    v17 = (const char *)a2;
  else
    v17 = *(const char **)a2;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "ICE: option '%s' not found.\n", v17);
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_240BB86B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_240BB86CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v13;

  v13 = *(unsigned int *)(v11 + 24);
  if ((_DWORD)v13 != -1)
    ((void (*)(char *, uint64_t))off_25110CE40[v13])(&a11, v11);
  *(_DWORD *)(v11 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_240BB8708(uint64_t a1, uint64_t a2)
{
  _BYTE v3[24];
  int v4;

  sub_240BB8518(a1, a2, (uint64_t)v3);
  if (v4)
    sub_240B735D8();
  return v3[0];
}

void sub_240BB8744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_240BB8758((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_240BB8758(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_25110CE40[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

double sub_240BB87B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v5;
  uint64_t v6;
  int v7;

  sub_240BB8518(a1, a2, (uint64_t)&v5);
  if (v7 != 2)
    sub_240B735D8();
  result = *(double *)&v5;
  *(_OWORD *)a3 = v5;
  *(_QWORD *)(a3 + 16) = v6;
  return result;
}

void sub_240BB8800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_240BB8758((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_240BB8814(char **a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  std::ios_base *v10;
  std::string::value_type v11;
  std::string::value_type v12;
  std::string::size_type size;
  std::string::size_type v14;
  char *v15;
  __int128 v16;
  std::string::size_type v17;
  std::string *v18;
  size_t v19;
  char *v20;
  __int128 v21;
  std::string::size_type v22;
  std::string *v23;
  size_t v24;
  char *v25;
  __int128 v26;
  std::string::size_type v27;
  void *v28;
  void *v29;
  uint64_t v30;
  std::string *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char v35;
  std::ios_base *v36;
  const std::locale::facet *v37;
  std::string *p_dst;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  std::string __p;
  std::string v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[8];
  void *v53;
  char v54;
  _QWORD v55[19];
  char *v56;
  char *v57;
  unint64_t v58;
  std::locale v59;
  std::string v60;
  std::string *v61;
  std::string __dst;
  std::string v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 7;
  v43 = (uint64_t **)(a1 + 6);
  sub_240B878CC((uint64_t)(a1 + 6), a1[7]);
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v5 = MEMORY[0x24BEDB868];
  v6 = MEMORY[0x24BEDB868] + 64;
  v7 = MEMORY[0x24BEDB7F8];
  v8 = *(void **)(MEMORY[0x24BEDB7F8] + 8);
  v9 = *(void **)(MEMORY[0x24BEDB7F8] + 16);
  v55[0] = MEMORY[0x24BEDB868] + 64;
  v50 = v8;
  v46 = v9;
  v47 = v8;
  *(void **)((char *)&v50 + *((_QWORD *)v8 - 3)) = v9;
  v51 = 0;
  v10 = (std::ios_base *)((char *)&v50 + *((_QWORD *)v50 - 3));
  std::ios_base::init(v10, v52);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v50 = (void *)(v5 + 24);
  v55[0] = v6;
  sub_240BAAADC((uint64_t)v52, a2, 8);
  v11 = 0;
  memset(&v49, 0, sizeof(v49));
  memset(&__p, 0, sizeof(__p));
  do
  {
    v12 = std::istream::get();
    if (v12 <= 33)
    {
      if (v12 != -1)
      {
        if (v12 != 32 || v11)
        {
LABEL_3:
          std::string::append(&v49, 1uLL, v12);
          continue;
        }
        size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v49.__r_.__value_.__l.__size_;
        if (!size)
        {
LABEL_21:
          v11 = 0;
          continue;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_240B6FF68(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
            goto LABEL_52;
LABEL_19:
          v63 = v49;
        }
        else
        {
          __dst = __p;
          if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_19;
LABEL_52:
          sub_240B6FF68(&v63, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
        }
        v20 = v57;
        if ((unint64_t)v57 >= v58)
        {
          v57 = sub_240BB96E0((void **)&v56, (uint64_t)&__dst);
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v63.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_58;
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_58;
          }
LABEL_55:
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else
        {
          v21 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *((_QWORD *)v57 + 2) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
          *(_OWORD *)v20 = v21;
          memset(&__dst, 0, sizeof(__dst));
          v22 = v63.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v20 + 24) = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
          *((_QWORD *)v20 + 5) = v22;
          memset(&v63, 0, sizeof(v63));
          v57 = v20 + 48;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_55;
        }
LABEL_58:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = &v49;
          else
            v23 = (std::string *)v49.__r_.__value_.__r.__words[0];
          if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
          else
            v24 = v49.__r_.__value_.__l.__size_;
          sub_240B734B8((void **)&__p.__r_.__value_.__l.__data_, v23, v24);
        }
        else
        {
          if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            __p = v49;
LABEL_70:
            v11 = 0;
LABEL_71:
            *((_BYTE *)&v49.__r_.__value_.__s + 23) = 0;
            v49.__r_.__value_.__s.__data_[0] = 0;
            continue;
          }
          sub_240B733F4(&__p, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
        }
        if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_70;
        v11 = 0;
        goto LABEL_73;
      }
    }
    else
    {
      if (v12 == 34 || v12 == 39)
      {
        if (v12 == v11)
          goto LABEL_21;
        if (v11)
          goto LABEL_3;
        v11 = v12;
        continue;
      }
      if (v12 != 92)
        goto LABEL_3;
      v12 = std::istream::get();
      if (v12 != -1)
        goto LABEL_3;
    }
    v14 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = v49.__r_.__value_.__l.__size_;
    if (v14)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_240B6FF68(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_30;
LABEL_27:
        v63 = v49;
      }
      else
      {
        __dst = __p;
        if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_27;
LABEL_30:
        sub_240B6FF68(&v63, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
      }
      v15 = v57;
      if ((unint64_t)v57 >= v58)
      {
        v57 = sub_240BB96E0((void **)&v56, (uint64_t)&__dst);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v63.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_36;
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
LABEL_33:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_36;
      }
      v16 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((_QWORD *)v57 + 2) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)v15 = v16;
      memset(&__dst, 0, sizeof(__dst));
      v17 = v63.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v15 + 24) = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
      *((_QWORD *)v15 + 5) = v17;
      memset(&v63, 0, sizeof(v63));
      v57 = v15 + 48;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_33;
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v49;
        else
          v18 = (std::string *)v49.__r_.__value_.__r.__words[0];
        if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
        else
          v19 = v49.__r_.__value_.__l.__size_;
        sub_240B734B8((void **)&__p.__r_.__value_.__l.__data_, v18, v19);
      }
      else
      {
        if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          __p = v49;
          goto LABEL_71;
        }
        sub_240B733F4(&__p, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
      }
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_71;
LABEL_73:
      v49.__r_.__value_.__l.__size_ = 0;
      *v49.__r_.__value_.__l.__data_ = 0;
    }
  }
  while ((*((_BYTE *)&v52[2] + *((_QWORD *)v50 - 3)) & 2) == 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    sub_240B6FF68(&v60, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v60 = __p;
  v61 = (std::string *)&unk_240BBCAF5;
  sub_240BB9890((uint64_t)&__dst, (__int128 *)&v60);
  v25 = v57;
  if ((unint64_t)v57 < v58)
  {
    v26 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *((_QWORD *)v57 + 2) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
    *(_OWORD *)v25 = v26;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    v27 = v63.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v25 + 24) = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
    *((_QWORD *)v25 + 5) = v27;
    __dst.__r_.__value_.__r.__words[2] = 0;
    memset(&v63, 0, sizeof(v63));
    v57 = v25 + 48;
    goto LABEL_87;
  }
  v57 = sub_240BB96E0((void **)&v56, (uint64_t)&__dst);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v63.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_81;
LABEL_87:
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_88;
LABEL_82:
    operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_83;
LABEL_89:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_84:
      operator delete(v49.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_87;
LABEL_81:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_82;
LABEL_88:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
LABEL_83:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_84;
  }
  v28 = *(void **)v7;
  v50 = v28;
  v29 = *(void **)(v7 + 24);
  *(void **)((char *)&v50 + *((_QWORD *)v28 - 3)) = v29;
  v30 = MEMORY[0x24BEDB848];
  v52[0] = MEMORY[0x24BEDB848] + 16;
  if (v54 < 0)
    operator delete(v53);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x24268ACB0](v55);
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v31 = &v60;
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25110CEC8;
  v61 = &v60;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_25110CE80;
  v33 = v56;
  v32 = v57;
  v34 = 4;
  if (v56 == v57)
  {
LABEL_150:
    (*(void (**)(void))(v31->__r_.__value_.__r.__words[0] + 8 * v34))();
    goto LABEL_151;
  }
  v35 = 0;
  v45 = MEMORY[0x24BEDB868] + 64;
  v44 = v30 + 16;
  while (2)
  {
    if (!v61)
LABEL_169:
      sub_240B82B78();
    if (!(*(unsigned int (**)(std::string *, char *))(v61->__r_.__value_.__r.__words[0] + 48))(v61, v33))
    {
      if (!v63.__r_.__value_.__r.__words[0])
        goto LABEL_169;
      if (!(*(unsigned int (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_
                                                                           + 48))(v63.__r_.__value_.__r.__words[0], v33))goto LABEL_107;
      if (!v63.__r_.__value_.__r.__words[0])
        goto LABEL_169;
      if (((*(uint64_t (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_ + 48))(v63.__r_.__value_.__r.__words[0], v33 + 24) & 1) == 0)
      {
        if (v33[47] < 0)
        {
          if (!*((_QWORD *)v33 + 4))
            goto LABEL_134;
        }
        else if (!v33[47])
        {
          goto LABEL_134;
        }
        if ((*((unsigned int (**)(char **, char *))*a1 + 3))(a1, v33))
        {
          (*((void (**)(char **, char *, char *))*a1 + 2))(a1, v33, v33 + 24);
LABEL_140:
          v35 = 1;
          goto LABEL_96;
        }
      }
      else
      {
LABEL_107:
        if (!v63.__r_.__value_.__r.__words[0])
          goto LABEL_169;
        if (!(*(unsigned int (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_
                                                                             + 48))(v63.__r_.__value_.__r.__words[0], v33))goto LABEL_111;
        if (!v63.__r_.__value_.__r.__words[0])
          goto LABEL_169;
        if (!(*(unsigned int (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_
                                                                             + 48))(v63.__r_.__value_.__r.__words[0], v33 + 24))
        {
LABEL_111:
          if (!v63.__r_.__value_.__r.__words[0])
            goto LABEL_169;
          if (((*(uint64_t (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_
                                                                          + 48))(v63.__r_.__value_.__r.__words[0], v33) & 1) == 0)
          {
            if (!v63.__r_.__value_.__r.__words[0])
              goto LABEL_169;
            if ((*(unsigned int (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_
                                                                                + 48))(v63.__r_.__value_.__r.__words[0], v33 + 24))
            {
              if ((v35 & 1) != 0)
                goto LABEL_95;
              if (v33[23] < 0)
              {
                if (!*((_QWORD *)v33 + 1))
                  goto LABEL_95;
              }
              else if (!v33[23])
              {
                goto LABEL_95;
              }
LABEL_145:
              sub_240BB9D14(v43, (const void **)v33, (uint64_t)v33);
              goto LABEL_95;
            }
          }
          if (!v63.__r_.__value_.__r.__words[0])
            goto LABEL_169;
          if (((*(uint64_t (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_
                                                                          + 48))(v63.__r_.__value_.__r.__words[0], v33) & 1) != 0)goto LABEL_96;
          if (!v63.__r_.__value_.__r.__words[0])
            goto LABEL_169;
          if (((*(uint64_t (**)(std::string::size_type, char *))(*(_QWORD *)v63.__r_.__value_.__l.__data_
                                                                          + 48))(v63.__r_.__value_.__r.__words[0], v33 + 24) & 1) != 0)goto LABEL_96;
          if (v33[23] < 0)
          {
            if (*((_QWORD *)v33 + 1))
              goto LABEL_144;
          }
          else if (v33[23])
          {
            goto LABEL_144;
          }
          if (v33[47] < 0)
          {
            if (*((_QWORD *)v33 + 4))
              goto LABEL_139;
          }
          else if (v33[47])
          {
LABEL_139:
            sub_240BB9D14(v43, (const void **)v33 + 3, (uint64_t)(v33 + 24));
            goto LABEL_140;
          }
LABEL_144:
          if ((v35 & 1) != 0)
            goto LABEL_95;
          goto LABEL_145;
        }
      }
LABEL_134:
      HIBYTE(v52[0]) = 4;
      strcpy((char *)&v50, "true");
      (*((void (**)(char **, char *, void **))*a1 + 2))(a1, v33, &v50);
      if (SHIBYTE(v52[0]) < 0)
        operator delete(v50);
      goto LABEL_95;
    }
    v55[0] = v45;
    v50 = v47;
    *(void **)((char *)&v50 + *((_QWORD *)v47 - 3)) = v46;
    v51 = 0;
    v36 = (std::ios_base *)((char *)&v50 + *((_QWORD *)v50 - 3));
    std::ios_base::init(v36, v52);
    v36[1].__vftable = 0;
    v36[1].__fmtflags_ = -1;
    v50 = (void *)(MEMORY[0x24BEDB868] + 24);
    v55[0] = MEMORY[0x24BEDB868] + 64;
    sub_240BAAADC((uint64_t)v52, (__int128 *)v33, 8);
    memset(&v49, 0, sizeof(v49));
    memset(&__p, 0, sizeof(__p));
    sub_240BB94D0(&v50, (uint64_t)&v49, 0x3Du);
    std::ios_base::getloc((const std::ios_base *)((char *)&v50 + *((_QWORD *)v50 - 3)));
    v37 = std::locale::use_facet(&v59, MEMORY[0x24BEDB350]);
    LOBYTE(v36) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
    std::locale::~locale(&v59);
    sub_240BB94D0(&v50, (uint64_t)&__p, v36);
    (*((void (**)(char **, std::string *, std::string *))*a1 + 2))(a1, &v49, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_127;
    }
    else
    {
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_101;
LABEL_127:
      operator delete(v49.__r_.__value_.__l.__data_);
    }
LABEL_101:
    v50 = v28;
    *(void **)((char *)&v50 + *((_QWORD *)v28 - 3)) = v29;
    v52[0] = v44;
    if (v54 < 0)
      operator delete(v53);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x24268ACB0](v55);
LABEL_95:
    v35 = 0;
LABEL_96:
    v33 += 48;
    if (v33 != v32)
      continue;
    break;
  }
  v31 = v61;
  if (v61 == &v60)
  {
    v34 = 4;
    v31 = &v60;
    goto LABEL_150;
  }
  if (v61)
  {
    v34 = 5;
    goto LABEL_150;
  }
LABEL_151:
  p_dst = (std::string *)v63.__r_.__value_.__r.__words[0];
  if ((std::string *)v63.__r_.__value_.__l.__data_ == &__dst)
  {
    v39 = 4;
    p_dst = &__dst;
LABEL_155:
    (*(void (**)(void))(p_dst->__r_.__value_.__r.__words[0] + 8 * v39))();
  }
  else if (v63.__r_.__value_.__r.__words[0])
  {
    v39 = 5;
    goto LABEL_155;
  }
  v40 = v56;
  if (v56)
  {
    v41 = v57;
    v42 = v56;
    if (v57 == v56)
    {
LABEL_165:
      v57 = v40;
      operator delete(v42);
      return;
    }
    while (2)
    {
      if (*(v41 - 1) < 0)
      {
        operator delete(*((void **)v41 - 3));
        if (*(v41 - 25) < 0)
          goto LABEL_163;
      }
      else if (*(v41 - 25) < 0)
      {
LABEL_163:
        operator delete(*((void **)v41 - 6));
      }
      v41 -= 48;
      if (v41 == v40)
      {
        v42 = v56;
        goto LABEL_165;
      }
      continue;
    }
  }
}

void sub_240BB9318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  sub_240BAAA58((uint64_t)&a27);
  sub_240BB9654((void **)(v32 - 208));
  _Unwind_Resume(a1);
}

_QWORD *sub_240BB94D0(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x24268ABB4](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_240BB95FC(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x240BB95C8);
  }
  __cxa_rethrow();
}

void sub_240BB9640(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void **sub_240BB9654(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

char *sub_240BB96E0(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  char *v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_240B70258();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_240B7007C();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_23;
  }
  do
  {
    v14 = *((_OWORD *)v13 - 3);
    *((_QWORD *)v8 - 4) = *((_QWORD *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((_QWORD *)v13 - 5) = 0;
    *((_QWORD *)v13 - 4) = 0;
    *((_QWORD *)v13 - 6) = 0;
    v15 = *(_OWORD *)(v13 - 24);
    *((_QWORD *)v8 - 1) = *((_QWORD *)v13 - 1);
    *(_OWORD *)(v8 - 24) = v15;
    v8 -= 48;
    *((_QWORD *)v13 - 2) = 0;
    *((_QWORD *)v13 - 1) = 0;
    *((_QWORD *)v13 - 3) = 0;
    v13 -= 48;
  }
  while (v13 != v12);
  v16 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    while (1)
    {
      if (*(v13 - 1) < 0)
      {
        operator delete(*((void **)v13 - 3));
        if (*(v13 - 25) < 0)
LABEL_20:
          operator delete(*((void **)v13 - 6));
      }
      else if (*(v13 - 25) < 0)
      {
        goto LABEL_20;
      }
      v13 -= 48;
      if (v13 == v16)
      {
        v13 = v16;
        break;
      }
    }
  }
  if (v13)
LABEL_23:
    operator delete(v13);
  return v11;
}

uint64_t sub_240BB9890(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  void *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v4 = (void *)(a1 + 24);
  v5 = (const char *)*((_QWORD *)a2 + 3);
  v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_240B6FFF4();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v4 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v6;
    if (!v6)
      goto LABEL_9;
  }
  memmove(v4, v5, v7);
LABEL_9:
  *((_BYTE *)v4 + v7) = 0;
  return a1;
}

void sub_240BB995C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_240BB9978(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_240B709D4((uint64_t)&v21, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v11 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v11 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = v2[23];
    if (v14 >= 0)
      v15 = v2[23];
    else
      v15 = *((_QWORD *)v2 + 1);
    if (v14 < 0)
      v2 = *(_BYTE **)v2;
    do
    {
      v16 = v13[1];
      if (v8 == v16)
      {
        v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v13 + 39);
        else
          v18 = v13[3];
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3]))
              return v13;
          }
          else
          {
            if (!*((_BYTE *)v13 + 39))
              return v13;
            v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19)
                return v13;
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(_QWORD *)&v7 - 1;
        }
        else if (v16 >= *(_QWORD *)&v7)
        {
          v16 %= *(_QWORD *)&v7;
        }
        if (v16 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_240BB9AFC()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240BB9B10()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_25110CE80;
  return result;
}

void sub_240BB9B34(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25110CE80;
}

uint64_t sub_240BB9B4C(uint64_t a1, const void **a2, const void *a3)
{
  unint64_t v3;
  int v4;
  const void **v5;
  size_t v6;
  unsigned int v7;
  _BOOL8 v8;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  void *v19;
  char v21[24];
  const void *__dst[2];
  unsigned __int8 v23;

  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  v5 = (const void **)*a2;
  if ((v3 & 0x80u) != 0)
    v3 = (unint64_t)a2[1];
  if (v3 >= 2)
    v6 = 2;
  else
    v6 = v3;
  v23 = v6;
  if (v6)
  {
    if (v4 < 0)
      a2 = v5;
    memcpy(__dst, a2, v6);
    v7 = v23;
    a3 = __dst[1];
  }
  else
  {
    v7 = 0;
  }
  v8 = 0;
  *((_BYTE *)__dst + v6) = 0;
  v21[23] = 2;
  strcpy(v21, "--");
  if ((v7 & 0x80u) == 0)
    v9 = v7;
  else
    v9 = (unint64_t)a3;
  if (v9 == 2)
  {
    if ((v7 & 0x80) != 0)
    {
      v19 = (void *)__dst[0];
      v8 = memcmp(__dst[0], v21, (size_t)a3) == 0;
      goto LABEL_26;
    }
    if (!v7)
      return 1;
    v10 = v7 - 1;
    v11 = __dst;
    v12 = v21;
    do
    {
      v14 = *(unsigned __int8 *)v11;
      v11 = (const void **)((char *)v11 + 1);
      v13 = v14;
      v16 = *v12++;
      v15 = v16;
      v18 = v10-- != 0;
      v8 = v13 == v15;
    }
    while (v13 == v15 && v18);
  }
  if ((v7 & 0x80) != 0)
  {
    v19 = (void *)__dst[0];
LABEL_26:
    operator delete(v19);
  }
  return v8;
}

void sub_240BB9C64()
{
  JUMPOUT(0x24268ACF8);
}

_QWORD *sub_240BB9C78()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_25110CEC8;
  return result;
}

void sub_240BB9C9C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_25110CEC8;
}

BOOL sub_240BB9CB4(uint64_t a1, void **a2)
{
  int v2;
  size_t v3;
  void *v4;
  _BYTE *v5;
  BOOL v6;

  v2 = *((char *)a2 + 23);
  if (v2 >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  if (!v3)
    return 0;
  if (v2 >= 0)
    v4 = a2;
  else
    v4 = *a2;
  v5 = memchr(v4, 61, v3);
  if (v5)
    v6 = v5 - (_BYTE *)v4 == -1;
  else
    v6 = 1;
  return !v6;
}

uint64_t **sub_240BB9D14(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  _BYTE *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_29;
      }
    }
  }
  v10 = a1 + 1;
LABEL_29:
  v20 = operator new(0x38uLL);
  v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_240B6FF68(v21, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v20[6] = *(_QWORD *)(a3 + 16);
  }
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  sub_240B8772C(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_240BB9E84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_240BB9E98(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_25110CF10;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 12;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t sub_240BB9ED0(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_25110CF10;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return nullsub_34(a1);
}

uint64_t sub_240BB9F38(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_25110CF10;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return nullsub_34(a1);
}

void sub_240BB9FA0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_25110CF10;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(void **)(a1 + 32);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  v4 = (void *)nullsub_34(a1);
  j__free(v4);
}

void **sub_240BBA00C(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 56);
  if (result != a2)
  {
    if (*(char *)(a1 + 79) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return sub_240B734B8(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_240B733F4(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

uint64_t sub_240BBA064(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_240BBA06C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) = a2;
  return result;
}

void sub_240BBA074(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = a1[1];
  v6 = a1[2];
  v4 = (uint64_t)(a1 + 1);
  v14 = 0;
  v7 = (v6 - v5) >> 3;
  v8 = a2 >= v7;
  v9 = a2 > v7;
  v10 = a2 - v7;
  if (v9)
  {
    sub_240BBA33C(v4, v10, &v14);
  }
  else if (!v8)
  {
    a1[2] = v5 + 8 * a2;
  }
  v11 = a1[4];
  v12 = a1[5];
  v14 = 0;
  v13 = (v12 - v11) >> 3;
  if (a2 <= v13)
  {
    if (a2 < v13)
      a1[5] = v11 + 8 * a2;
  }
  else
  {
    sub_240BBA33C((uint64_t)(a1 + 4), a2 - v13, &v14);
  }
}

uint64_t sub_240BBA100(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return (uint64_t)(v1[1] - *v1) >> 3;
}

uint64_t sub_240BBA128(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_240BBA130(uint64_t a1)
{
  return a1 + 32;
}

void sub_240BBA138(_QWORD *a1, char **a2)
{
  char **v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = (char **)(a1 + 1);
  if (v4 != a2)
    sub_240BA8F28(v4, *a2, a2[1], (a2[1] - *a2) >> 3);
  v5 = (a2[1] - *a2) >> 3;
  v8 = 0;
  v6 = a1[4];
  v7 = (a1[5] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7)
      a1[5] = v6 + 8 * v5;
  }
  else
  {
    sub_240BBA33C((uint64_t)(a1 + 4), v5 - v7, &v8);
  }
}

char **sub_240BBA1BC(uint64_t a1, char **a2)
{
  char **result;

  result = (char **)(a1 + 32);
  if (result != a2)
    return (char **)sub_240BA8F28(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  return result;
}

uint64_t sub_240BBA1E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t sub_240BBA1E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_240BBA1F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_240BBA1F8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_240BBA200(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_240BBA208(uint64_t result, int a2)
{
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t sub_240BBA210(uint64_t a1)
{
  int32x4_t *v1;
  int32x4_t *v2;
  unint64_t v3;
  int v4;
  int32x4_t *v5;
  uint64_t v7;
  int32x4_t *v8;
  int32x4_t v9;
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  int v17;

  v2 = *(int32x4_t **)(a1 + 8);
  v1 = *(int32x4_t **)(a1 + 16);
  if (v2 == v1)
    return 1;
  v3 = (char *)v1 - (char *)v2 - 8;
  if (v3 >= 0x38)
  {
    v7 = (v3 >> 3) + 1;
    v5 = (int32x4_t *)((char *)v2 + 8 * (v7 & 0x3FFFFFFFFFFFFFF8));
    v8 = v2 + 2;
    v9.i64[0] = 0x100000001;
    v9.i64[1] = 0x100000001;
    v10 = v7 & 0x3FFFFFFFFFFFFFF8;
    v11.i64[0] = 0x100000001;
    v11.i64[1] = 0x100000001;
    do
    {
      v13 = v8[-2];
      v12 = v8[-1];
      v15 = *v8;
      v14 = v8[1];
      v8 += 4;
      v9 = vmulq_s32(v9, vuzp1q_s32(v13, v12));
      v11 = vmulq_s32(v11, vuzp1q_s32(v15, v14));
      v10 -= 8;
    }
    while (v10);
    v16 = (int8x16_t)vmulq_s32(v11, v9);
    *(int32x2_t *)v16.i8 = vmul_s32(*(int32x2_t *)v16.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    v4 = v16.i32[0] * v16.i32[1];
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFF8))
      return v4;
  }
  else
  {
    v4 = 1;
    v5 = *(int32x4_t **)(a1 + 8);
  }
  do
  {
    v17 = v5->i32[0];
    v5 = (int32x4_t *)((char *)v5 + 8);
    v4 *= v17;
  }
  while (v5 != v1);
  return v4;
}

uint64_t sub_240BBA2B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = v2 - v1;
  if (v2 == v1)
  {
    v6 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = v3 >> 3;
    if (v7 <= 1)
      v7 = 1;
    do
    {
      if (*(_QWORD *)(v1 + 8 * v4) > v5)
      {
        v6 = v4;
        v5 = *(_QWORD *)(v1 + 8 * v4);
      }
      ++v4;
    }
    while (v7 != v4);
  }
  v8 = 8 * v6;
  v9 = *(_QWORD *)(v1 + v8);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v8);
  v11 = *(int *)(a1 + 84);
  if (v11 > 0xC)
    v12 = 0;
  else
    v12 = qword_240BBBF60[v11];
  return v10 * v9 * v12;
}

void sub_240BBA33C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int64x2_t *v18;
  uint64_t v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3)
        goto LABEL_43;
      v17 = v16 + 1;
      v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      v18 = (int64x2_t *)(v7 + 16);
      v19 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = vdupq_lane_s64(*a3, 0);
        v18[-1] = v20;
        *v18 = v20;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    v9 = *(uint64_t **)a1;
    v10 = v7 - *(_QWORD *)a1;
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (v12 >> 61)
      sub_240B70258();
    v13 = v6 - (_QWORD)v9;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_240B7007C();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v21 = (unint64_t)&v15[8 * v11];
    v22 = (uint64_t *)(v21 + 8 * a2);
    v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v24 = (uint64_t *)v21;
    if (v23 < 0x13)
      goto LABEL_44;
    if (v21 < (unint64_t)(a3 + 1))
    {
      v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3)
        goto LABEL_44;
    }
    v25 = v23 + 1;
    v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    v26 = vdupq_lane_s64(*a3, 0);
    v27 = (int64x2_t *)&v15[8 * v11 + 16];
    v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_44:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      v29 = v7 - (_QWORD)v9 - 8;
      if (v29 < 0x58)
        goto LABEL_45;
      if (v7 - (unint64_t)&v15[v10] < 0x20)
        goto LABEL_45;
      v30 = (v29 >> 3) + 1;
      v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      v32 = &v15[8 * v11 - 16];
      v33 = (__int128 *)(v7 - 16);
      v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
        {
          v36 = *--v8;
          *(_QWORD *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(_QWORD *)a1 = v21;
    *(_QWORD *)(a1 + 8) = v22;
    *(_QWORD *)(a1 + 16) = &v15[8 * v14];
    if (v9)
      operator delete(v9);
  }
}

void sub_240BBA5A4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_240BBA5B8(uint64_t a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = *(char **)(a1 + 48);
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          sub_240B74428();
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 -= 16;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *(_QWORD *)(a1 + 48) = a2;
  sub_240B74418(v6);
}

void sub_240BBA630(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    do
    {
      v8 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          sub_240B74428();
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v5 -= 16;
    }
    while (v5 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  sub_240B74418(v6);
}

void sub_240BBA6A8(void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    operator delete(v2);
}

void sub_240BBA6C0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  do
  {
    v2 = *(char **)__p;
    v3 = (char *)*((_QWORD *)__p + 8);
    if (v3 == __p + 40)
    {
      v3 = __p + 40;
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_6;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
    if (__p[39] < 0)
      operator delete(*((void **)__p + 2));
    operator delete(__p);
    __p = v2;
  }
  while (v2);
}

void sub_240BBA738(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void sub_240BBA78C(uint64_t *a1)
{
  void **v1;
  char *v2;
  void *v3;

  v3 = (void *)sub_240BB45F0(a1);
  if (v3)
    operator delete(v3);
  if (*v2 < 0)
    operator delete(*v1);
  sub_240BB45E8();
}

void sub_240BBA7BC(uint64_t **a1)
{
  uint64_t *v2;

  do
  {
    v2 = *a1;
    if (*((char *)a1 + 39) < 0)
      sub_240BB4608();
    sub_240BB4610();
    a1 = (uint64_t **)v2;
  }
  while (v2);
  sub_240BB45E8();
}

void sub_240BBA7F0(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  do
  {
    v2 = (uint64_t *)*a1;
    v3 = (uint64_t *)a1[8];
    if (v3 == a1 + 5)
    {
      v3 = a1 + 5;
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_6;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
    if (*((char *)a1 + 39) < 0)
      sub_240BB4608();
    sub_240BB4610();
    a1 = v2;
  }
  while (v2);
  sub_240BB45E8();
}

void sub_240BBA854(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v3 = (void *)sub_240BB45F0(a1);
  if (v3)
    operator delete(v3);
  do
  {
    if (*(char *)(v2 - 9) < 0)
      operator delete(*(void **)(v2 - 32));
    v2 -= 32;
  }
  while (v2 != v1);
  sub_240BB45E8();
}

void sub_240BBA890(void **a1, char *a2, void **a3)
{
  char *v5;
  void *v6;
  char *v8;
  void *v9;
  void *v10;

  v5 = (char *)*a1;
  v6 = a2;
  if (v5 != a2)
  {
    v8 = v5;
    do
    {
      v10 = (void *)*((_QWORD *)v8 - 3);
      v8 -= 24;
      v9 = v10;
      if (v10)
      {
        *((_QWORD *)v5 - 2) = v9;
        operator delete(v9);
      }
      v5 = v8;
    }
    while (v8 != a2);
    v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

int BNNSArithmeticFilterApplyBatch(void *filter, size_t batch_size, size_t number_of_inputs, const void **in, const size_t *in_stride, void *out, size_t out_stride)
{
  return MEMORY[0x24BDB27E8](filter, batch_size, number_of_inputs, in, in_stride, out, out_stride);
}

int BNNSCopy(BNNSNDArrayDescriptor *dest, const BNNSNDArrayDescriptor *src, const BNNSFilterParameters *filter_params)
{
  return MEMORY[0x24BDB27F8](dest, src, filter_params);
}

int BNNSFilterApplyBatch(void *filter, size_t batch_size, const void *in, size_t in_stride, void *out, size_t out_stride)
{
  return MEMORY[0x24BDB2828](filter, batch_size, in, in_stride, out, out_stride);
}

int BNNSFilterApplyTwoInputBatch(void *filter, size_t batch_size, const void *inA, size_t inA_stride, const void *inB, size_t inB_stride, void *out, size_t out_stride)
{
  return MEMORY[0x24BDB2838](filter, batch_size, inA, inA_stride, inB, inB_stride, out, out_stride);
}

void *__cdecl BNNSFilterCreateLayerActivation(const BNNSLayerParametersActivation *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2840](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerArithmetic(const BNNSLayerParametersArithmetic *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2848](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerBroadcastMatMul(const BNNSLayerParametersBroadcastMatMul *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2850](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerConvolution(const BNNSLayerParametersConvolution *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2858](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerFullyConnected(const BNNSLayerParametersFullyConnected *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2860](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerPermute(const BNNSLayerParametersPermute *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2868](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerTransposedConvolution(const BNNSLayerParametersConvolution *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x24BDB2870](layer_params, filter_params);
}

void BNNSFilterDestroy(void *filter)
{
  MEMORY[0x24BDB2878](filter);
}

uint64_t BNNSGraphContextDestroy_v2()
{
  return MEMORY[0x24BDB28D0]();
}

uint64_t BNNSGraphContextExecute_v2()
{
  return MEMORY[0x24BDB28D8]();
}

uint64_t BNNSGraphContextMake()
{
  return MEMORY[0x24BDB28E8]();
}

uint64_t BNNSGraphContextSetDynamicShapes_v2()
{
  return MEMORY[0x24BDB28F8]();
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x24BDC5288](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52D8](pixelBuffer);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x24BDC52F8](pixelBuffer);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t MIL::Blob::StorageReader::StorageReader()
{
  return MEMORY[0x24BE61738]();
}

void MIL::Blob::StorageReader::~StorageReader(MIL::Blob::StorageReader *this)
{
  MEMORY[0x24BE61740](this);
}

uint64_t mlc::rt::JIT::create_orcjit()
{
  return MEMORY[0x24BE62340]();
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp16>()
{
  return MEMORY[0x24BE61E00]();
}

uint64_t MIL::Blob::StorageReader::GetDataView<float>()
{
  return MEMORY[0x24BE61E08]();
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned char>()
{
  return MEMORY[0x24BE61E10]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA00](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x24BEDAA18](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x24BEDAC08](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x24BEDAC50](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x24BEDACC8](this, __c);
}

uint64_t std::istream::get()
{
  return MEMORY[0x24BEDAE08]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x24BEDAE18]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x24BEDAE50]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x24BEDAE70]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x24BEDAE78]();
}

{
  return MEMORY[0x24BEDAEC0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x24BEDAF10]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF18]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

{
  return MEMORY[0x24BEDAF60]();
}

{
  return MEMORY[0x24BEDAF80]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x24BEDB620](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_25110B950();
}

void operator delete(void *__p)
{
  off_25110B958(__p);
}

uint64_t operator delete()
{
  return off_25110B960();
}

uint64_t operator new[]()
{
  return off_25110B968();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_25110B970(__sz);
}

uint64_t operator new()
{
  return off_25110B978();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x24BDAD9D8](*(_QWORD *)&a1);
}

void dispatch_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCD0](queue, context, work);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x24BDADCD8](queue, context, work);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

int dlclose(void *__handle)
{
  return MEMORY[0x24BDAE060](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x24BDAE5F0](a1);
}

void longjmp(jmp_buf a1, int a2)
{
  MEMORY[0x24BDAEB00](a1, *(_QWORD *)&a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x24BDAEFA8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x24BDAEFF0](a1, a2);
}

double nan(const char *a1)
{
  double result;

  MEMORY[0x24BDAEFF8](a1);
  return result;
}

float nanf(const char *a1)
{
  float result;

  MEMORY[0x24BDAF000](a1);
  return result;
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x24BDAF010](__rqtp, __rmtp);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x24BDAF228](a1, *(_QWORD *)&a2);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int putchar(int a1)
{
  return MEMORY[0x24BDAF9F0](*(_QWORD *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x24BDAF9F8](a1);
}

int setjmp(jmp_buf a1)
{
  return MEMORY[0x24BDAFD30](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x24BDAFF78](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x24BDAFFD0](a1, a2);
  return result;
}

