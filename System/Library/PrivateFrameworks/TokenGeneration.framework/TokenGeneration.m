uint64_t AutomationJSON.samplingStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (**v10)(uint64_t, uint64_t);
  int v11;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.SamplingStrategyConfiguration?);
  v2 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v13 - v5;
  AutomationJSON.samplingStrategyConfiguration.getter();
  v7 = type metadata accessor for AutomationJSON.SamplingStrategyConfiguration();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
  {
    outlined init with copy of AutomationJSON.SamplingStrategyConfiguration?((uint64_t)v6, (uint64_t)v4);
    v10 = *(uint64_t (***)(uint64_t, uint64_t))(v7 - 8);
    v11 = v10[11]((uint64_t)v4, v7);
    if (v11 == *MEMORY[0x24BEB8A78])
    {
      OUTLINED_FUNCTION_0(v10[12]);
      v8 = *v4;
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 == *MEMORY[0x24BEB8A88])
    {
      OUTLINED_FUNCTION_0(v10[12]);
      v9 = 0;
      v8 = *v4;
      goto LABEL_9;
    }
    if (v11 == *MEMORY[0x24BEB8A80])
    {
      v8 = 0;
      v9 = 2;
      goto LABEL_9;
    }
    OUTLINED_FUNCTION_0(v10[1]);
  }
  v8 = 0;
  v9 = -1;
LABEL_9:
  *(_QWORD *)a1 = v8;
  *(_BYTE *)(a1 + 8) = v9;
  return outlined destroy of AutomationJSON.SamplingStrategyConfiguration?((uint64_t)v6);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2495A73F4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t outlined destroy of AutomationJSON.SamplingStrategyConfiguration?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.SamplingStrategyConfiguration?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AutomationJSON.SamplingStrategyConfiguration?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutomationJSON.SamplingStrategyConfiguration?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t default argument 2 of TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x24BEE4AF8];
}

{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 3 of TokenGenerator.complete(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 5 of TokenGenerator.complete(prompt:promptTemplateInfo:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t default argument 4 of TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)()
{
  return MEMORY[0x24BEE4AF8];
}

void default argument 1 of TokenGenerator.complete(prompt:parameters:tools:toolChoice:documents:constraint:metadata:)(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  *(_WORD *)(a1 + 129) = 514;
}

uint64_t OUTLINED_FUNCTION_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t static CachePolicy.== infix(_:_:)()
{
  return 1;
}

Swift::Int CachePolicy.hashValue.getter()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CachePolicy()
{
  return CachePolicy.hashValue.getter();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CachePolicy()
{
  Hasher.init(_seed:)();
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type CachePolicy and conformance CachePolicy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CachePolicy and conformance CachePolicy;
  if (!lazy protocol witness table cache variable for type CachePolicy and conformance CachePolicy)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CachePolicy, &type metadata for CachePolicy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CachePolicy and conformance CachePolicy);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CachePolicy()
{
  return 1;
}

ValueMetadata *type metadata accessor for CachePolicy()
{
  return &type metadata for CachePolicy;
}

uint64_t InferenceRequestHandler.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  OUTLINED_FUNCTION_90();
  return v1;
}

_QWORD *InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *result;

  v20 = (_QWORD *)OUTLINED_FUNCTION_16();
  v20[2] = a16;
  v20[3] = a17;
  v20[4] = a18;
  v20[5] = a19;
  v20[6] = a10;
  v20[7] = a11;
  v21 = (_QWORD *)OUTLINED_FUNCTION_16();
  v21[2] = a16;
  v21[3] = a17;
  v21[4] = a18;
  v21[5] = a19;
  v21[6] = a12;
  v21[7] = a13;
  result = (_QWORD *)OUTLINED_FUNCTION_16();
  result[2] = a16;
  result[3] = a17;
  result[4] = a18;
  result[5] = a19;
  result[6] = a14;
  result[7] = a15;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:);
  a9[9] = v20;
  a9[10] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:);
  a9[11] = v21;
  a9[12] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:);
  a9[13] = result;
  return result;
}

uint64_t sub_248B0A580()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t (*InferenceRequestHandler.ResponseStream.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;

  v8 = *(_QWORD *)(a3 - 8);
  v9 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (char *)swift_allocObject();
  *((_QWORD *)v10 + 2) = a2;
  *((_QWORD *)v10 + 3) = a3;
  *((_QWORD *)v10 + 4) = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(&v10[v9], a1, a3);
  return partial apply for closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
}

void partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)()
{
  closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)();
}

uint64_t InferenceRequestHandler.handleRequest(data:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 1256) = a3;
  *(_QWORD *)(v4 + 1248) = a2;
  *(_QWORD *)(v4 + 1240) = a1;
  *(_QWORD *)(v4 + 1264) = type metadata accessor for TokenGenerationError(0);
  *(_QWORD *)(v4 + 1272) = OUTLINED_FUNCTION_118();
  *(_QWORD *)(v4 + 1280) = OUTLINED_FUNCTION_141();
  *(_QWORD *)(v4 + 1288) = OUTLINED_FUNCTION_141();
  type metadata accessor for CompletePromptTemplateRequest(0);
  *(_QWORD *)(v4 + 1296) = OUTLINED_FUNCTION_98();
  type metadata accessor for CompletePromptRequest(0);
  *(_QWORD *)(v4 + 1304) = OUTLINED_FUNCTION_98();
  *(_QWORD *)(v4 + 1312) = type metadata accessor for OneShotRequest(0);
  *(_QWORD *)(v4 + 1320) = OUTLINED_FUNCTION_118();
  *(_QWORD *)(v4 + 1328) = OUTLINED_FUNCTION_141();
  *(_QWORD *)(v4 + 1336) = *(_QWORD *)v3;
  *(_OWORD *)(v4 + 1344) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v4 + 1360) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v4 + 1376) = *(_OWORD *)(v3 + 40);
  *(_QWORD *)(v4 + 1392) = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v4 + 1400) = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v4 + 1408) = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v4 + 1416) = *(_QWORD *)(v3 + 104);
  OUTLINED_FUNCTION_134();
  return swift_task_switch();
}

uint64_t InferenceRequestHandler.handleRequest(data:configuration:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v32;
  uint64_t v33[10];
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_70();
  v35 = v1;
  v36 = v2;
  v34 = v0;
  if (one-time initialization token for inference != -1)
    swift_once();
  OUTLINED_FUNCTION_157();
  v3 = OUTLINED_FUNCTION_200();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Log.inference);
  v0[178] = v4;
  OUTLINED_FUNCTION_154();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_172();
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_164();
  v6 = OUTLINED_FUNCTION_220();
  v32 = (int *)v0[176];
  if (v6)
  {
    v7 = v0[167];
    v8 = OUTLINED_FUNCTION_2();
    v33[0] = OUTLINED_FUNCTION_2();
    *(_DWORD *)v8 = 136315394;
    OUTLINED_FUNCTION_189();
    v0[153] = OUTLINED_FUNCTION_182(v7, v9, v33);
    OUTLINED_FUNCTION_180();
    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_54();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_15();
    swift_release();
    OUTLINED_FUNCTION_177();
    *(_WORD *)(v8 + 12) = 2080;
    v0[154] = OUTLINED_FUNCTION_92(34, 0x8000000248BCAAC0, v33);
    OUTLINED_FUNCTION_28();
    OUTLINED_FUNCTION_22(&dword_248B08000, v4, v5, "%s:%s", (uint8_t *)v8);
    OUTLINED_FUNCTION_107();
    OUTLINED_FUNCTION_0_0();
  }
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_15();
  swift_release();
  OUTLINED_FUNCTION_127();

  if (one-time initialization token for decoder != -1)
    swift_once();
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type OneShotRequest and conformance OneShotRequest, (void (*)(uint64_t))type metadata accessor for OneShotRequest);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  outlined init with copy of TokenGenerationError(v0[166], v0[165], type metadata accessor for OneShotRequest);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v11 = v0 + 2;
      outlined init with take of TokenGenerationError(v0[165], v0[163], type metadata accessor for CompletePromptRequest);
      v12 = (_QWORD *)OUTLINED_FUNCTION_135();
      v0[188] = v12;
      *v12 = v0;
      v12[1] = InferenceRequestHandler.handleRequest(data:configuration:);
      v13 = (_QWORD *)v0[163];
    }
    else
    {
      v11 = v0 + 87;
      outlined init with take of TokenGenerationError(v0[165], v0[162], type metadata accessor for CompletePromptTemplateRequest);
      v30 = (_QWORD *)OUTLINED_FUNCTION_135();
      v0[190] = v30;
      *v30 = v0;
      v30[1] = InferenceRequestHandler.handleRequest(data:configuration:);
      v13 = (_QWORD *)v0[162];
    }
    v28 = v0[157];
    v29 = v11;
  }
  else
  {
    v14 = (int *)v0[169];
    v15 = (uint64_t *)v0[165];
    v16 = *v15;
    v17 = v15[1];
    v0[179] = v17;
    v18 = v15[2];
    v0[180] = v18;
    v19 = v15[3];
    v0[181] = v19;
    v20 = v15[4];
    v21 = v15[5];
    v0[182] = v21;
    v22 = v15[6];
    v23 = v15[7];
    v0[183] = v23;
    v25 = v15[8];
    v24 = v15[9];
    v0[184] = v24;
    v26 = v15[10];
    v0[185] = v26;
    v0[128] = v16;
    v0[129] = v17;
    v0[130] = v18;
    v0[131] = v19;
    v0[132] = v20;
    v0[133] = v21;
    v0[134] = v22;
    v0[135] = v23;
    v0[136] = v25;
    v0[137] = v24;
    v0[138] = v26;
    v32 = (int *)((char *)v14 + *v14);
    v27 = (_QWORD *)swift_task_alloc();
    v0[186] = v27;
    *v27 = v0;
    v27[1] = InferenceRequestHandler.handleRequest(data:configuration:);
    v28 = v0[157];
    v29 = v0 + 104;
    v13 = v0 + 128;
  }
  return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t))v32)(v29, v13, v28);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1496) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_213();
  }
  OUTLINED_FUNCTION_134();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];

  log = *(NSObject **)(v0 + 1424);
  v27 = *(_QWORD *)(v0 + 832);
  v30 = *(_QWORD *)(v0 + 840);
  v1 = *(_QWORD *)(v0 + 848);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 880);
  v4 = *(_QWORD *)(v0 + 896);
  v5 = *(_QWORD *)(v0 + 904);
  v6 = *(_QWORD *)(v0 + 912);
  v7 = *(_QWORD *)(v0 + 920);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v26 = v5;
  v32 = v1;
  v29 = v2;
  v28 = v4;
  outlined copy of PromptRenderingEnvelope?(v30, v1);
  Logger.logObject.getter();
  v8 = OUTLINED_FUNCTION_164();
  if (OUTLINED_FUNCTION_220())
  {
    v9 = *(_QWORD *)(v0 + 1344);
    v10 = *(_QWORD *)(v0 + 1336);
    type = v8;
    v11 = OUTLINED_FUNCTION_2();
    v33[0] = OUTLINED_FUNCTION_2();
    *(_DWORD *)v11 = 136315650;
    OUTLINED_FUNCTION_11();
    *(_QWORD *)(v0 + 1200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, v33);
    OUTLINED_FUNCTION_102();
    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_203();
    swift_release();
    OUTLINED_FUNCTION_177();
    swift_release();
    swift_release();
    swift_release();
    *(_WORD *)(v11 + 12) = 2080;
    *(_QWORD *)(v0 + 1208) = OUTLINED_FUNCTION_92(34, 0x8000000248BCAAC0, v33);
    OUTLINED_FUNCTION_102();
    *(_WORD *)(v11 + 22) = 2048;
    *(_QWORD *)(v0 + 1216) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_199();
    outlined consume of PromptRenderingEnvelope?(v12, v13);
    _os_log_impl(&dword_248B08000, log, type, "%s:%s:countTokens:response\ncount: %ld", (uint8_t *)v11, 0x20u);
    OUTLINED_FUNCTION_107();
    OUTLINED_FUNCTION_0_0();
  }
  v14 = *(_QWORD *)(v0 + 1392);
  v15 = *(_QWORD *)(v0 + 1376);
  v16 = *(_QWORD *)(v0 + 1360);
  OUTLINED_FUNCTION_209();
  OUTLINED_FUNCTION_54();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125();
  v17 = v30;
  OUTLINED_FUNCTION_199();
  outlined consume of PromptRenderingEnvelope?(v18, v19);

  *(_QWORD *)(v0 + 928) = v27;
  *(_QWORD *)(v0 + 936) = v30;
  *(_QWORD *)(v0 + 944) = v32;
  *(_QWORD *)(v0 + 952) = v15;
  *(_QWORD *)(v0 + 960) = v16;
  *(_QWORD *)(v0 + 968) = v29;
  *(_QWORD *)(v0 + 976) = v3;
  *(_QWORD *)(v0 + 984) = v14;
  *(_QWORD *)(v0 + 992) = v28;
  *(_QWORD *)(v0 + 1000) = v26;
  *(_QWORD *)(v0 + 1008) = v6;
  *(_QWORD *)(v0 + 1016) = v7;
  if (one-time initialization token for encoder != -1)
    swift_once();
  v20 = *(_QWORD *)(v0 + 1496);
  lazy protocol witness table accessor for type CountTokensResponse and conformance CountTokensResponse();
  v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v31 = v22;
  outlined destroy of TokenGenerationError(*(_QWORD *)(v0 + 1328), type metadata accessor for OneShotRequest);
  outlined consume of PromptRenderingEnvelope?(v17, v32);
  if (v20)
  {
    *(_QWORD *)(v0 + 1136) = v20;
    OUTLINED_FUNCTION_36();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_147();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v21, v31);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_146();
  *v2 = *v1;
  *(_QWORD *)(v3 + 1512) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_58();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15[10];
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_70();
  v17 = v1;
  v18 = v2;
  v16 = v0;
  v3 = v0[178];
  OUTLINED_FUNCTION_27();
  memcpy(v4, v5, 0x88uLL);
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_80();
  Logger.logObject.getter();
  v6 = OUTLINED_FUNCTION_164();
  if (OUTLINED_FUNCTION_142(v3))
  {
    v7 = v0[167];
    v8 = OUTLINED_FUNCTION_2();
    v15[0] = OUTLINED_FUNCTION_2();
    *(_DWORD *)v8 = 136315394;
    OUTLINED_FUNCTION_189();
    v0[145] = OUTLINED_FUNCTION_182(v7, v9, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_18();
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_203();
    swift_release();
    OUTLINED_FUNCTION_177();
    swift_release();
    *(_WORD *)(v8 + 12) = 2080;
    v0[146] = OUTLINED_FUNCTION_92(34, 0x8000000248BCAAC0, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_22(&dword_248B08000, v3, v6, "%s:%s:completePrompt:response", (uint8_t *)v8);
    OUTLINED_FUNCTION_107();
    OUTLINED_FUNCTION_0_0();
  }
  OUTLINED_FUNCTION_196();
  OUTLINED_FUNCTION_209();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125();

  OUTLINED_FUNCTION_99(v0 + 70);
  if (one-time initialization token for encoder != -1)
    swift_once();
  v10 = v0[189];
  lazy protocol witness table accessor for type CompletePromptResponse and conformance CompletePromptResponse();
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  outlined destroy of TokenGenerationError(v0[163], type metadata accessor for CompletePromptRequest);
  OUTLINED_FUNCTION_187(v11, type metadata accessor for OneShotRequest);
  OUTLINED_FUNCTION_67();
  if (v10)
  {
    v0[142] = v10;
    OUTLINED_FUNCTION_150();
  }
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_147();
  v12 = OUTLINED_FUNCTION_184();
  return v13(v12);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_146();
  *v2 = *v1;
  *(_QWORD *)(v3 + 1528) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_58();
}

{
  _QWORD *v0;
  const void *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t type;
  NSObject *log;
  uint64_t v42;
  _QWORD v43[19];

  OUTLINED_FUNCTION_196();
  memcpy(v0 + 53, v1, 0x88uLL);
  OUTLINED_FUNCTION_153();
  OUTLINED_FUNCTION_153();
  OUTLINED_FUNCTION_153();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_153();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v37 = v0[177];
    v33 = v0[175];
    v35 = v0[176];
    v4 = v0[167];
    log = v2;
    v5 = OUTLINED_FUNCTION_2();
    v42 = OUTLINED_FUNCTION_2();
    *(_DWORD *)v5 = 136315907;
    type = v3;
    OUTLINED_FUNCTION_189();
    v0[143] = OUTLINED_FUNCTION_182(v4, v6, &v42);
    OUTLINED_FUNCTION_28();
    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_127();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_120();
    swift_release();
    swift_release();
    *(_WORD *)(v5 + 12) = 2080;
    v0[139] = OUTLINED_FUNCTION_92(34, 0x8000000248BCAAC0, &v42);
    OUTLINED_FUNCTION_28();
    *(_WORD *)(v5 + 22) = 2081;
    OUTLINED_FUNCTION_99(v43);
    CompletePromptResponse.tokens.getter();
    v8 = v7;
    v9 = type metadata accessor for Token();
    MEMORY[0x2495A6B54](v8, v9);
    v10 = OUTLINED_FUNCTION_61();
    v0[140] = OUTLINED_FUNCTION_160(v10, v11, v12, v13, v14, v15, v16, v17, v31, v33, v35, v37, (uint64_t)(v0 + 139));
    OUTLINED_FUNCTION_197();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_67();
    OUTLINED_FUNCTION_67();
    *(_WORD *)(v5 + 32) = 2080;
    OUTLINED_FUNCTION_99(v43);
    CompletePromptResponse.toolCalls.getter();
    MEMORY[0x2495A6B54]();
    v18 = OUTLINED_FUNCTION_61();
    v0[141] = OUTLINED_FUNCTION_160(v18, v19, v20, v21, v22, v23, v24, v25, v32, v34, v36, v38, v39);
    OUTLINED_FUNCTION_197();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_67();
    OUTLINED_FUNCTION_67();
    _os_log_impl(&dword_248B08000, log, type, "%s:%s:completePromptTemplate:response\ntokens: %{private}s\ntoolCalls: %s", (uint8_t *)v5, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0_0();
  }
  OUTLINED_FUNCTION_157();
  OUTLINED_FUNCTION_209();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_127();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_125();
  OUTLINED_FUNCTION_222();
  OUTLINED_FUNCTION_67();
  OUTLINED_FUNCTION_67();
  OUTLINED_FUNCTION_67();
  OUTLINED_FUNCTION_67();

  OUTLINED_FUNCTION_99(v0 + 36);
  if (one-time initialization token for encoder != -1)
    swift_once();
  v26 = v0[191];
  lazy protocol witness table accessor for type CompletePromptResponse and conformance CompletePromptResponse();
  dispatch thunk of JSONEncoder.encode<A>(_:)();
  outlined destroy of TokenGenerationError(v0[162], type metadata accessor for CompletePromptTemplateRequest);
  OUTLINED_FUNCTION_187(v27, type metadata accessor for OneShotRequest);
  OUTLINED_FUNCTION_67();
  if (v26)
  {
    v0[142] = v26;
    OUTLINED_FUNCTION_128();
  }
  OUTLINED_FUNCTION_87();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_147();
  v28 = OUTLINED_FUNCTION_184();
  return v29(v28);
}

void InferenceRequestHandler.handleRequest(data:configuration:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_70();
  outlined destroy of TokenGenerationError(*(_QWORD *)(v0 + 1328), type metadata accessor for OneShotRequest);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_213();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_78(*(_QWORD *)(v0 + 1496));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_210();
  outlined destroy of TokenGenerationError(*(_QWORD *)(v0 + 1304), type metadata accessor for CompletePromptRequest);
  OUTLINED_FUNCTION_89(v1, type metadata accessor for OneShotRequest);
  OUTLINED_FUNCTION_78(*(_QWORD *)(v0 + 1512));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_210();
  outlined destroy of TokenGenerationError(*(_QWORD *)(v0 + 1296), type metadata accessor for CompletePromptTemplateRequest);
  OUTLINED_FUNCTION_89(v1, type metadata accessor for OneShotRequest);
  OUTLINED_FUNCTION_78(*(_QWORD *)(v0 + 1528));
}

#error "248B0CC4C: call analysis failed (funcsize=141)"

#error "248B0D0E0: call analysis failed (funcsize=135)"

#error "248B0D55C: call analysis failed (funcsize=135)"

void InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int EnumCaseMultiPayload;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (**v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (*v63)();
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (**v67)();
  void (*v68)();
  uint64_t (*v69)(uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t);
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t (*v78)(uint64_t *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113[8];
  char v114[8];

  v88 = a3;
  v100 = a1;
  v101 = a2;
  v102 = a4;
  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_178();
  v83 = v6;
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>, Data>);
  v7 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  OUTLINED_FUNCTION_174();
  v84 = v8;
  type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_178();
  v82 = v10;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<InferenceRequestHandler.ResponseStream<DocumentRegistration>, Data>);
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x24BDAC7A8](v81);
  OUTLINED_FUNCTION_174();
  v79 = v11;
  v99 = type metadata accessor for StreamingRequest(0);
  OUTLINED_FUNCTION_159();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v90 = (uint64_t *)((char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x24BDAC7A8](v13);
  v98 = (char *)&v75 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v97 = (uint64_t)&v75 - v17;
  v18 = v4[1];
  v95 = *v4;
  v19 = v4[3];
  v20 = v4[5];
  v21 = v4[7];
  v76 = (uint64_t (*)(uint64_t, uint64_t))v4[8];
  v77 = (uint64_t (*)(uint64_t, uint64_t))v4[10];
  v22 = v4[11];
  v78 = (uint64_t (*)(uint64_t *, uint64_t))v4[12];
  v23 = v4[13];
  if (one-time initialization token for inference != -1)
    swift_once();
  v24 = OUTLINED_FUNCTION_200();
  v25 = __swift_project_value_buffer(v24, (uint64_t)static Log.inference);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_80();
  OUTLINED_FUNCTION_208();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_19();
  OUTLINED_FUNCTION_33();
  v87 = v25;
  Logger.logObject.getter();
  v26 = OUTLINED_FUNCTION_164();
  v103 = v21;
  v94 = v26;
  v27 = os_log_type_enabled(v25, v26);
  v85 = v7;
  v92 = v22;
  v96 = v20;
  v91 = v23;
  v89 = v18;
  if (v27)
  {
    v28 = OUTLINED_FUNCTION_2();
    v93 = v19;
    v29 = v28;
    v104 = OUTLINED_FUNCTION_2();
    *(_DWORD *)v29 = 136315394;
    OUTLINED_FUNCTION_72();
    v112 = OUTLINED_FUNCTION_77(v95, v30, &v104);
    OUTLINED_FUNCTION_180();
    OUTLINED_FUNCTION_29();
    swift_release();
    OUTLINED_FUNCTION_139();
    OUTLINED_FUNCTION_17();
    swift_release();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_18();
    *(_WORD *)(v29 + 12) = 2080;
    v112 = OUTLINED_FUNCTION_53((uint64_t)"handleStreamingRequest(data:configuration:)");
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_22(&dword_248B08000, v25, (os_log_type_t)v94, "%s:%s", (uint8_t *)v29);
    OUTLINED_FUNCTION_107();
    OUTLINED_FUNCTION_0_0();
  }

  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_125();
  OUTLINED_FUNCTION_15();
  OUTLINED_FUNCTION_112();
  v31 = (uint64_t)v98;
  if (one-time initialization token for decoder != -1)
    swift_once();
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest, (void (*)(uint64_t))type metadata accessor for StreamingRequest);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v32 = v89;
  v33 = v97;
  outlined init with take of TokenGenerationError(v31, v97, type metadata accessor for StreamingRequest);
  v34 = v33;
  v35 = v90;
  OUTLINED_FUNCTION_167(v34, (uint64_t)v90);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    OUTLINED_FUNCTION_201((uint64_t)v35, type metadata accessor for CompletePromptRequest, (uint64_t)v113);
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_162();
    OUTLINED_FUNCTION_208();
    swift_retain();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_10();
    OUTLINED_FUNCTION_19();
    v41 = OUTLINED_FUNCTION_207();
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = OUTLINED_FUNCTION_2();
      v101 = OUTLINED_FUNCTION_2();
      v104 = v101;
      *(_DWORD *)v43 = 136315394;
      OUTLINED_FUNCTION_72();
      v112 = OUTLINED_FUNCTION_77(v95, v44, &v104);
      OUTLINED_FUNCTION_102();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_15();
      OUTLINED_FUNCTION_222();
      swift_release();
      OUTLINED_FUNCTION_139();
      OUTLINED_FUNCTION_158();
      OUTLINED_FUNCTION_18();
      *(_WORD *)(v43 + 12) = 2080;
      v45 = OUTLINED_FUNCTION_53((uint64_t)"handleStreamingRequest(data:configuration:)");
      OUTLINED_FUNCTION_205(v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_22(&dword_248B08000, v41, v42, "%s:%s:completePrompt", (uint8_t *)v43);
      OUTLINED_FUNCTION_107();
      OUTLINED_FUNCTION_0_0();
    }

    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_24();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_139();
    OUTLINED_FUNCTION_158();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_123();
    v104 = v76(v31, v88);
    v105 = v70;
    OUTLINED_FUNCTION_171();
    OUTLINED_FUNCTION_124(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<CompletePromptResponseElement> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>);
    OUTLINED_FUNCTION_132();
    OUTLINED_FUNCTION_109();
    v71 = swift_allocObject();
    OUTLINED_FUNCTION_121(v71);
    v72 = OUTLINED_FUNCTION_223();
    v73 = v102;
    v102[3] = v72;
    OUTLINED_FUNCTION_124(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<Data> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<Data>);
    v73[4] = v74;
    *v73 = closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
    v73[1] = &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>;
    v69 = type metadata accessor for CompletePromptRequest;
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    OUTLINED_FUNCTION_201((uint64_t)v35, type metadata accessor for CompletePromptTemplateRequest, (uint64_t)v114);
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_162();
    OUTLINED_FUNCTION_208();
    swift_retain();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_12();
    OUTLINED_FUNCTION_19();
    v37 = OUTLINED_FUNCTION_207();
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = OUTLINED_FUNCTION_2();
      v101 = OUTLINED_FUNCTION_2();
      v104 = v101;
      *(_DWORD *)v39 = 136315394;
      OUTLINED_FUNCTION_154();
      v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v32, &v104);
      OUTLINED_FUNCTION_102();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_8();
      OUTLINED_FUNCTION_17();
      OUTLINED_FUNCTION_29();
      OUTLINED_FUNCTION_139();
      OUTLINED_FUNCTION_158();
      OUTLINED_FUNCTION_18();
      *(_WORD *)(v39 + 12) = 2080;
      v40 = OUTLINED_FUNCTION_53((uint64_t)"handleStreamingRequest(data:configuration:)");
      OUTLINED_FUNCTION_205(v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_22(&dword_248B08000, v37, v38, "%s:%s:completePromptTemplate", (uint8_t *)v39);
      OUTLINED_FUNCTION_107();
      OUTLINED_FUNCTION_0_0();
    }

    OUTLINED_FUNCTION_8();
    OUTLINED_FUNCTION_222();
    OUTLINED_FUNCTION_24();
    OUTLINED_FUNCTION_17();
    OUTLINED_FUNCTION_139();
    OUTLINED_FUNCTION_158();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_123();
    v104 = v77(v31, v88);
    v105 = v64;
    OUTLINED_FUNCTION_171();
    OUTLINED_FUNCTION_124(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<CompletePromptResponseElement> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>);
    OUTLINED_FUNCTION_132();
    OUTLINED_FUNCTION_109();
    v65 = swift_allocObject();
    OUTLINED_FUNCTION_121(v65);
    v66 = OUTLINED_FUNCTION_223();
    v67 = (void (**)())v102;
    v102[3] = v66;
    OUTLINED_FUNCTION_124(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<Data> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<Data>);
    v67[4] = v68;
    *v67 = partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
    v67[1] = (void (*)())&demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>;
    v69 = type metadata accessor for CompletePromptTemplateRequest;
LABEL_16:
    outlined destroy of TokenGenerationError(v31, v69);
    goto LABEL_17;
  }
  v47 = *v35;
  v46 = v35[1];
  v48 = v35;
  v49 = v35[2];
  v50 = v48[3];
  v51 = v48[4];
  v52 = v48[5];
  v53 = v48[6];
  v54 = (void (**)())v102;
  v55 = v48[7];
  v104 = v47;
  v105 = v46;
  v106 = v49;
  v107 = v50;
  v108 = v51;
  v109 = v52;
  v110 = v53;
  v111 = v55;
  v56 = v78(&v104, v88);
  v58 = v57;
  OUTLINED_FUNCTION_152();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_213();
  OUTLINED_FUNCTION_112();
  v104 = v56;
  v105 = v58;
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_124(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<DocumentRegistration> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<DocumentRegistration>);
  v59 = v79;
  AsyncMapSequence.init(_:transform:)();
  v60 = v80;
  v61 = (*(unsigned __int8 *)(v80 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
  v62 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v60 + 32))(v62 + v61, v59, v81);
  v54[3] = (void (*)())OUTLINED_FUNCTION_223();
  OUTLINED_FUNCTION_124(&lazy protocol witness table cache variable for type InferenceRequestHandler.ResponseStream<Data> and conformance InferenceRequestHandler.ResponseStream<A>, &demangling cache variable for type metadata for InferenceRequestHandler.ResponseStream<Data>);
  v54[4] = v63;
  *v54 = partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
  v54[1] = (void (*)())v62;
LABEL_17:
  outlined destroy of TokenGenerationError(v97, type metadata accessor for StreamingRequest);
}

uint64_t closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[7] = a1;
  v2 = type metadata accessor for InferenceError();
  v1[8] = v2;
  v1[9] = *(_QWORD *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v3 = type metadata accessor for InferenceError.Context();
  v1[11] = v3;
  v1[12] = *(_QWORD *)(v3 - 8);
  v1[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (one-time initialization token for inference != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 56);
  v2 = OUTLINED_FUNCTION_200();
  __swift_project_value_buffer(v2, (uint64_t)static Log.inference);
  MEMORY[0x2495A7370](v1);
  MEMORY[0x2495A7370](v1);
  v3 = Logger.logObject.getter();
  static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_142(v3))
  {
    v4 = (_DWORD *)OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_2();
    *v4 = 138412290;
    OUTLINED_FUNCTION_128();
  }
  OUTLINED_FUNCTION_73();
  OUTLINED_FUNCTION_73();

  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 72);
  swift_getErrorValue();
  Error.localizedDescription.getter();
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_170(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  OUTLINED_FUNCTION_216(*MEMORY[0x24BE689A0], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 104));
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_181(v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  swift_willThrow();
  OUTLINED_FUNCTION_217(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  OUTLINED_FUNCTION_188(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_42();
  return OUTLINED_FUNCTION_62(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error);
  return v5();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1;
  OUTLINED_FUNCTION_176(&v4);
  if (!v0)
    **(_BYTE **)(v2 + 16) = 0;
  return OUTLINED_FUNCTION_115((uint64_t (*)(void))v1[1]);
}

uint64_t closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for URL();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  type metadata accessor for DocumentRegistration.InternalStatus();
  v2[7] = swift_task_alloc();
  v2[8] = type metadata accessor for DocumentRegistrationEnvelope(0);
  v2[9] = swift_task_alloc();
  v4 = type metadata accessor for DocumentRegistration();
  v2[10] = v4;
  v2[11] = *(_QWORD *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = type metadata accessor for RegisterDocumentResponseElement(0);
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 32);
  v20 = *(_QWORD *)(v0 + 120);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v9(v2, *(_QWORD *)(v0 + 24), v3);
  v9(v1, v2, v3);
  DocumentRegistration.internalStatus.getter();
  DocumentRegistrationStatusEnvelope.init(sealing:)(v6, v5);
  DocumentRegistration.url.getter();
  v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v5 + *(int *)(v18 + 20), v7, v19);
  v10(v2, v3);
  outlined init with take of TokenGenerationError(v5, v20, type metadata accessor for DocumentRegistrationEnvelope);
  if (one-time initialization token for encoder != -1)
    swift_once();
  v11 = *(_QWORD *)(v0 + 120);
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type RegisterDocumentResponseElement and conformance RegisterDocumentResponseElement, (void (*)(uint64_t))type metadata accessor for RegisterDocumentResponseElement);
  v12 = OUTLINED_FUNCTION_211();
  if (v11)
  {
    OUTLINED_FUNCTION_149();
    return swift_unexpectedError();
  }
  else
  {
    v15 = v12;
    v16 = v13;
    v17 = *(uint64_t **)(v0 + 16);
    OUTLINED_FUNCTION_187(v12, type metadata accessor for RegisterDocumentResponseElement);
    *v17 = v15;
    v17[1] = v16;
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_147();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t closure #3 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 152) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v2 + 184) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v2 + 128) = a1;
  *(_OWORD *)(v2 + 216) = v5;
  *(_QWORD *)(v2 + 232) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(v2 + 121) = *(_BYTE *)(a2 + 104);
  return swift_task_switch();
}

uint64_t closure #3 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;

  OUTLINED_FUNCTION_41();
  if (one-time initialization token for encoder != -1)
    swift_once();
  lazy protocol witness table accessor for type CompletePromptResponseElement and conformance CompletePromptResponseElement();
  v2 = OUTLINED_FUNCTION_211();
  if (v0)
  {
    OUTLINED_FUNCTION_149();
    return OUTLINED_FUNCTION_101();
  }
  else
  {
    v5 = *(uint64_t **)(v1 + 128);
    *v5 = v2;
    v5[1] = v3;
    return OUTLINED_FUNCTION_100(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t closure #4 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a2;
  *(_OWORD *)(v2 + 152) = v3;
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v2 + 184) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v2 + 128) = a1;
  *(_OWORD *)(v2 + 216) = v5;
  *(_QWORD *)(v2 + 232) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(v2 + 121) = *(_BYTE *)(a2 + 104);
  return swift_task_switch();
}

uint64_t closure #4 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;

  OUTLINED_FUNCTION_41();
  if (one-time initialization token for encoder != -1)
    swift_once();
  lazy protocol witness table accessor for type CompletePromptResponseElement and conformance CompletePromptResponseElement();
  v2 = OUTLINED_FUNCTION_211();
  if (v0)
  {
    OUTLINED_FUNCTION_149();
    return OUTLINED_FUNCTION_101();
  }
  else
  {
    v5 = *(uint64_t **)(v1 + 128);
    *v5 = v2;
    v5[1] = v3;
    return OUTLINED_FUNCTION_100(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  OUTLINED_FUNCTION_212();
  v25 = v19;
  v20 = (_QWORD *)OUTLINED_FUNCTION_16();
  v20[2] = a11;
  v20[3] = a12;
  v20[4] = a13;
  v20[5] = a14;
  v20[6] = a7;
  v20[7] = a8;
  v21 = (_QWORD *)OUTLINED_FUNCTION_16();
  v21[2] = a11;
  v21[3] = a12;
  v21[4] = a13;
  v21[5] = a14;
  v21[6] = a9;
  v21[7] = v25;
  v22 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v22 + 16) = v16;
  *(_QWORD *)(v22 + 24) = v14;
  v23 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v23 + 16) = v16;
  *(_QWORD *)(v23 + 24) = v14;
  *v15 = v16;
  v15[1] = v14;
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = &async function pointer to partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  v15[7] = v22;
  v15[8] = partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:);
  v15[9] = v20;
  v15[10] = partial apply for closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  v15[11] = v23;
  v15[12] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:);
  v15[13] = v21;
  return OUTLINED_FUNCTION_214();
}

{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v25;

  OUTLINED_FUNCTION_212();
  v25 = v18;
  v19 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v19 + 16) = v16;
  *(_QWORD *)(v19 + 24) = v14;
  v20 = (_QWORD *)OUTLINED_FUNCTION_16();
  v20[2] = a11;
  v20[3] = a12;
  v20[4] = a13;
  v20[5] = a14;
  v20[6] = a7;
  v20[7] = a8;
  v21 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v14;
  v22 = (_QWORD *)OUTLINED_FUNCTION_16();
  v22[2] = a11;
  v22[3] = a12;
  v22[4] = a13;
  v22[5] = a14;
  v22[6] = a9;
  v22[7] = v25;
  *v15 = v16;
  v15[1] = v14;
  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  v15[6] = &async function pointer to partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  v15[7] = v19;
  v15[8] = partial apply for closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  v15[9] = v20;
  v15[10] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:);
  v15[11] = v21;
  v15[12] = partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:);
  v15[13] = v22;
  return OUTLINED_FUNCTION_214();
}

void closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;

  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_145();
  v4 = OUTLINED_FUNCTION_195(v1, v2, v3);
  OUTLINED_FUNCTION_168(v4, (uint64_t)&type metadata for CompletePromptResponseElement);
  OUTLINED_FUNCTION_97();
}

uint64_t closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for InferenceError.Context();
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t (*closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

uint64_t closure #1 in closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  v4 = type metadata accessor for InferenceError.Context();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_133();
  _StringGuts.grow(_:)(56);
  OUTLINED_FUNCTION_113(v1, v2, v3, v4, v5, v6, v7, v8, v13, v14, v15);
  OUTLINED_FUNCTION_175(54, 0x8000000248BCAB20);
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_59();
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
  v9 = OUTLINED_FUNCTION_3();
  v11 = OUTLINED_FUNCTION_103(v9, v10);
  OUTLINED_FUNCTION_131(v11, *MEMORY[0x24BE68968]);
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_155();
  OUTLINED_FUNCTION_42();
  return OUTLINED_FUNCTION_74(*(uint64_t (**)(void))(v0 + 8));
}

void InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_83();
  v7 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v0;
  v8 = (_QWORD *)OUTLINED_FUNCTION_16();
  v8[2] = v5;
  v8[3] = v2;
  v8[4] = v4;
  v8[5] = v3;
  v9 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v0;
  v10 = OUTLINED_FUNCTION_16();
  v18 = OUTLINED_FUNCTION_110(v10, v11, v12, v13, v14, v15, v16, v17, v19, v20, v21, v22);
  v1[6] = &async function pointer to partial apply for closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  v1[7] = v7;
  v1[8] = partial apply for closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  v1[9] = v8;
  v1[10] = partial apply for closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  v1[11] = v9;
  OUTLINED_FUNCTION_148(v18, (uint64_t)partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:));
  OUTLINED_FUNCTION_93();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_83();
  v7 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v0;
  v8 = (_QWORD *)OUTLINED_FUNCTION_16();
  v8[2] = v5;
  v8[3] = v2;
  v8[4] = v4;
  v8[5] = v3;
  v9 = OUTLINED_FUNCTION_16();
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v0;
  v10 = OUTLINED_FUNCTION_16();
  v18 = OUTLINED_FUNCTION_110(v10, v11, v12, v13, v14, v15, v16, v17, v19, v20, v21, v22);
  v1[6] = &async function pointer to partial apply for closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  v1[7] = v7;
  v1[8] = partial apply for closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  v1[9] = v8;
  v1[10] = partial apply for closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:);
  v1[11] = v9;
  OUTLINED_FUNCTION_148(v18, (uint64_t)partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:));
  OUTLINED_FUNCTION_93();
}

uint64_t closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for InferenceError();
  v5[4] = v6;
  v5[5] = *(_QWORD *)(v6 - 8);
  v5[6] = swift_task_alloc();
  v7 = type metadata accessor for InferenceError.Context();
  v5[7] = v7;
  v5[8] = *(_QWORD *)(v7 - 8);
  v5[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t (*closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  v21 = a3;
  v8 = type metadata accessor for AsyncMapSequence();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - v10;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v20 - v16;
  v21(a1, a2);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, a5);
  AsyncSequence.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v17, a5);
  v18 = MEMORY[0x2495A740C](MEMORY[0x24BEE6F08], v8);
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v11, (uint64_t)&type metadata for CompletePromptResponseElement, v8, v18);
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for Token();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 16))(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  CompletePromptResponseElement.init(token:)();
  OUTLINED_FUNCTION_71();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t (*closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

uint64_t closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[2] = a2;
  v3[3] = a3;
  v4 = type metadata accessor for InferenceError();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v3[6] = swift_task_alloc();
  v5 = type metadata accessor for InferenceError.Context();
  v3[7] = v5;
  v3[8] = *(_QWORD *)(v5 - 8);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t (*closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  type metadata accessor for DocumentRegistration();
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)specialized partial apply;
}

uint64_t closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  v4 = type metadata accessor for InferenceError.Context();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v3;
  uint64_t v4;

  v3[2] = a2;
  v3[3] = a3;
  v4 = type metadata accessor for InferenceError.Context();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_133();
  _StringGuts.grow(_:)(61);
  OUTLINED_FUNCTION_113(v1, v2, v3, v4, v5, v6, v7, v8, v13, v14, v15);
  OUTLINED_FUNCTION_175(59, 0x8000000248BCAB60);
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_59();
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
  v9 = OUTLINED_FUNCTION_3();
  v11 = OUTLINED_FUNCTION_103(v9, v10);
  OUTLINED_FUNCTION_131(v11, *MEMORY[0x24BE68968]);
  OUTLINED_FUNCTION_161();
  OUTLINED_FUNCTION_155();
  OUTLINED_FUNCTION_42();
  return OUTLINED_FUNCTION_74(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t (*closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void (*v11)(uint64_t);
  uint64_t v13;

  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v10, (uint64_t)&type metadata for CompletePromptResponseElement, a5, a6);
}

void (*closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  type metadata accessor for DocumentRegistration();
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
}

uint64_t (*closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t)))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x24BDAC7A8](a1);
  v6 = type metadata accessor for AsyncMapSequence();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - v7;
  a3(a1, a2);
  AsyncSequence.map<A>(_:)();
  v9 = MEMORY[0x2495A740C](MEMORY[0x24BEE6F08], v6);
  return InferenceRequestHandler.ResponseStream.init<A>(_:)((uint64_t)v8, (uint64_t)&type metadata for CompletePromptResponseElement, v6, v9);
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[5];

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  UUID.init()();
  v16 = UUID.uuidString.getter();
  v6 = v5;
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v2, v4);
  UUID.init()();
  v8 = UUID.uuidString.getter();
  v10 = v9;
  v7(v1, v4);
  v11 = Token.text.getter();
  v13 = v12;
  v17[3] = &type metadata for PromptCompletionEventCandidateTextDelta;
  v17[4] = &protocol witness table for PromptCompletionEventCandidateTextDelta;
  v14 = OUTLINED_FUNCTION_16();
  v17[0] = v14;
  *(_QWORD *)(v14 + 16) = v16;
  *(_QWORD *)(v14 + 24) = v6;
  *(_QWORD *)(v14 + 32) = v8;
  *(_QWORD *)(v14 + 40) = v10;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = v11;
  *(_QWORD *)(v14 + 64) = v13;
  *(_OWORD *)(v14 + 72) = xmmword_248BBF000;
  CompletePromptResponseElement.init(_:)((uint64_t)v17);
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_42();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void (*closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  swift_bridgeObjectRetain();
  AsyncThrowingStream.init<>(unfolding:)();
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  return partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:);
}

uint64_t closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[2] = a2;
  v3[3] = a3;
  v4 = type metadata accessor for InferenceError();
  v3[4] = v4;
  v3[5] = *(_QWORD *)(v4 - 8);
  v3[6] = swift_task_alloc();
  v5 = type metadata accessor for InferenceError.Context();
  v3[7] = v5;
  v3[8] = *(_QWORD *)(v5 - 8);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  _StringGuts.grow(_:)(56);
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  OUTLINED_FUNCTION_175(54, 0x8000000248BCAB20);
  OUTLINED_FUNCTION_143();
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_170(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16));
  OUTLINED_FUNCTION_216(*MEMORY[0x24BE68968], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 104));
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
  OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_181(v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  swift_willThrow();
  OUTLINED_FUNCTION_217(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_188(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_42();
  return OUTLINED_FUNCTION_62(*(uint64_t (**)(void))(v0 + 8));
}

void closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_145();
  v2 = *(_OWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 56);
  v8[0] = *(_OWORD *)v1;
  v8[1] = v2;
  v9 = v3;
  v10 = *(_OWORD *)(v1 + 40);
  v11 = v4;
  OUTLINED_FUNCTION_195((uint64_t)v8, v5, v6);
  v7 = type metadata accessor for DocumentRegistration();
  OUTLINED_FUNCTION_168(v7, v7);
  OUTLINED_FUNCTION_97();
}

void specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_88(a1, a2);
  OUTLINED_FUNCTION_173();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_63(v4, v6);
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_111();
  OUTLINED_FUNCTION_219();
  OUTLINED_FUNCTION_204(v5);
  OUTLINED_FUNCTION_215();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_138();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_88(a1, a2);
  OUTLINED_FUNCTION_173();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_63(v4, v6);
  *(_QWORD *)(v2 + 24) = OUTLINED_FUNCTION_111();
  OUTLINED_FUNCTION_219();
  OUTLINED_FUNCTION_204(v5);
  OUTLINED_FUNCTION_215();
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_138();
}

uint64_t closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2[3] = swift_getAssociatedTypeWitness();
  a2[4] = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1Tm(a2);
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

uint64_t InferenceRequestHandler.ResponseStream.makeAsyncIterator()@<X0>(void (*a1)(__int128 *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  __int128 v4[2];

  a1(v4);
  return outlined init with take of AsyncIteratorProtocol(v4, a2);
}

uint64_t InferenceRequestHandler.ResponseStream.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v3[10] = type metadata accessor for TokenGenerationError(0);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t InferenceRequestHandler.ResponseStream.AsyncIterator.next()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_163();
  static Task<>.checkCancellation()();
  __swift_mutable_project_boxed_opaque_existential_1(v0[9], *(_QWORD *)(v0[9] + 24));
  v0[13] = swift_getAssociatedTypeWitness();
  v1 = type metadata accessor for Optional();
  v0[14] = v1;
  v0[15] = *(_QWORD *)(v1 - 8);
  v0[16] = OUTLINED_FUNCTION_98();
  v2 = (_QWORD *)swift_task_alloc();
  v0[17] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = InferenceRequestHandler.ResponseStream.AsyncIterator.next();
  OUTLINED_FUNCTION_179();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_146();
  *v2 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_58();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  OUTLINED_FUNCTION_163();
  v1 = *(_QWORD *)(v0 + 104);
  if (__swift_getEnumTagSinglePayload(*(_QWORD *)(v0 + 128), 1, v1) == 1)
  {
    OUTLINED_FUNCTION_198(*(_QWORD *)(v0 + 120));
    OUTLINED_FUNCTION_42();
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  else
  {
    *(_QWORD *)(v0 + 40) = v1;
    __swift_allocate_boxed_opaque_existential_1Tm((uint64_t *)(v0 + 16));
    OUTLINED_FUNCTION_179();
    v2();
    OUTLINED_FUNCTION_42();
  }
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = swift_dynamicCast();
  __swift_storeEnumTagSinglePayload(v3, v6 ^ 1u, 1, v5);
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  return OUTLINED_FUNCTION_38(*(uint64_t (**)(void))(v0 + 8));
}

void InferenceRequestHandler.ResponseStream.AsyncIterator.next()()
{
  uint64_t v0;

  OUTLINED_FUNCTION_163();
  swift_task_dealloc();
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 144);
  OUTLINED_FUNCTION_36();
}

uint64_t sub_248B1078C()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (OUTLINED_FUNCTION_6())
  {
    v2 = *(_QWORD *)(v1 + 96);
    OUTLINED_FUNCTION_52();
    OUTLINED_FUNCTION_140(v2);
    OUTLINED_FUNCTION_59();
    lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (void (*)(uint64_t))MEMORY[0x24BE689F0]);
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_75();
    OUTLINED_FUNCTION_129(v3, *MEMORY[0x24BE68978]);
    OUTLINED_FUNCTION_85();
    OUTLINED_FUNCTION_221();

  }
  else
  {

    OUTLINED_FUNCTION_85();
  }
  swift_task_dealloc();
  OUTLINED_FUNCTION_71();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_185();
  return OUTLINED_FUNCTION_38(v4);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance InferenceRequestHandler.ResponseStream<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for AsyncIteratorProtocol.next() in conformance InferenceRequestHandler.ResponseStream<A>.AsyncIterator;
  return InferenceRequestHandler.ResponseStream.AsyncIterator.next()(a1, a2);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance InferenceRequestHandler.ResponseStream<A>.AsyncIterator()
{
  uint64_t v0;

  OUTLINED_FUNCTION_81();
  return OUTLINED_FUNCTION_114(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t _s15TokenGeneration23InferenceRequestHandlerV14ResponseStream33_6CE5FDA809054AFDA0F170337ADF1236LLV13AsyncIteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = _s15TokenGeneration23InferenceRequestHandlerV14ResponseStream33_6CE5FDA809054AFDA0F170337ADF1236LLV13AsyncIteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s15TokenGeneration23InferenceRequestHandlerV14ResponseStream33_6CE5FDA809054AFDA0F170337ADF1236LLV13AsyncIteratorVy_x_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1;
  OUTLINED_FUNCTION_176(&v4);
  if (v0)
    **(_QWORD **)(v2 + 24) = *(_QWORD *)(v2 + 16);
  return OUTLINED_FUNCTION_115((uint64_t (*)(void))v1[1]);
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance InferenceRequestHandler.ResponseStream<A>@<X0>(uint64_t a1@<X8>)
{
  void (**v1)(__int128 *__return_ptr);

  InferenceRequestHandler.ResponseStream.makeAsyncIterator()(*v1, a1);
  return swift_release();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t ObjectType;

  OUTLINED_FUNCTION_134();
  v9 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v6, v7, v8, 1, a1, a2);
  v10 = v15[0];
  if (v9)
  {
    v11 = v9;
    ObjectType = swift_getObjectType();
    v15[0] = v11;
    v12 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v15[0] = a1;
    v15[1] = a2;
    v13 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  return v10;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t outlined retain of CompletePromptResponse(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of PromptRenderingEnvelope?(v4, v2);
  return a1;
}

uint64_t outlined copy of PromptRenderingEnvelope?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined release of CompletePromptResponse(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PromptRenderingEnvelope?(v4, v2);
  return a1;
}

uint64_t outlined consume of PromptRenderingEnvelope?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CompletePromptResponse and conformance CompletePromptResponse()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponse, &type metadata for CompletePromptResponse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponse, &type metadata for CompletePromptResponse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponse, &type metadata for CompletePromptResponse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse and conformance CompletePromptResponse);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CountTokensResponse and conformance CountTokensResponse()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse;
  if (!lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensResponse, &type metadata for CountTokensResponse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse;
  if (!lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensResponse, &type metadata for CountTokensResponse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse;
  if (!lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensResponse, &type metadata for CountTokensResponse);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse and conformance CountTokensResponse);
  }
  return result;
}

uint64_t sub_248B113BC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance InferenceRequestHandler.ResponseStream<A>.AsyncIterator;
  return closure #1 in InferenceRequestHandler.handleStreamingRequest(data:configuration:)(v2);
}

uint64_t sub_248B1142C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_122();
  v3 = swift_task_alloc();
  v4 = (_QWORD *)OUTLINED_FUNCTION_69(v3);
  *v4 = v2;
  v4[1] = partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error);
  return ((uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)
                                                 + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@error @owned Error)))(v0, v1);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2495A7400](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void outlined init with copy of TokenGenerationError(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_169(a1, a2, a3);
  OUTLINED_FUNCTION_218(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  OUTLINED_FUNCTION_104();
}

uint64_t sub_248B11528()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncMapSequence<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>, Data>);
}

void partial apply for specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_111();
  v1 = OUTLINED_FUNCTION_51(v0);
  OUTLINED_FUNCTION_191(v1);
  OUTLINED_FUNCTION_97();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_111();
  v1 = OUTLINED_FUNCTION_51(v0);
  OUTLINED_FUNCTION_191(v1);
  OUTLINED_FUNCTION_97();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_111();
  v1 = OUTLINED_FUNCTION_51(v0);
  OUTLINED_FUNCTION_192(v1);
  OUTLINED_FUNCTION_97();
}

{
  uint64_t v0;
  uint64_t v1;

  v0 = OUTLINED_FUNCTION_111();
  v1 = OUTLINED_FUNCTION_51(v0);
  OUTLINED_FUNCTION_192(v1);
  OUTLINED_FUNCTION_97();
}

uint64_t sub_248B1157C()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncMapSequence<InferenceRequestHandler.ResponseStream<CompletePromptResponseElement>, Data>);
}

uint64_t sub_248B11588()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncMapSequence<InferenceRequestHandler.ResponseStream<DocumentRegistration>, Data>);
}

void partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)()
{
  closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:completePromptTemplate:streamPromptCompletion:streamPromptTemplateCompletion:registerDocuments:)();
}

uint64_t partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_76();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_26(v1);
  return closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(v2, v3, v4, v5, v6);
}

uint64_t (*partial apply for closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;

  return closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_76();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_26(v1);
  return closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_76();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_26(v1);
  return closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(v2, v3, v4, v5, v6);
}

uint64_t sub_248B116A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t (*partial apply for closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  return closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16));
}

{
  uint64_t *v2;

  return closure #2 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, v2[4], v2[5], v2[2], v2[3]);
}

uint64_t (*partial apply for closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;

  return closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

{
  uint64_t v2;

  return closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t (*partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;

  return closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void (*partial apply for closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;

  return closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_76();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_26(v1);
  return closure #1 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(v2, v3, v4, v5, v6);
}

uint64_t (*partial apply for closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  return closure #2 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 48));
}

void (*partial apply for closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;

  return closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t destroy for InferenceRequestHandler()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for InferenceRequestHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v3 = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for InferenceRequestHandler(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_retain();
  swift_release();
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_retain();
  swift_release();
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  swift_retain();
  swift_release();
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_retain();
  swift_release();
  v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy112_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x70uLL);
}

uint64_t assignWithTake for InferenceRequestHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  v4 = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequestHandler(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 112))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceRequestHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InferenceRequestHandler()
{
  return &type metadata for InferenceRequestHandler;
}

uint64_t type metadata instantiation function for InferenceRequestHandler.ResponseStream()
{
  return swift_allocateGenericValueMetadata();
}

_QWORD *initializeBufferWithCopyOfBuffer for InferenceRequestHandler.ResponseStream(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for InferenceRequestHandler.ResponseStream()
{
  return swift_release();
}

_QWORD *assignWithCopy for InferenceRequestHandler.ResponseStream(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for InferenceRequestHandler.ResponseStream(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequestHandler.ResponseStream(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceRequestHandler.ResponseStream(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for InferenceRequestHandler.ResponseStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceRequestHandler.ResponseStream);
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in InferenceRequestHandler.ResponseStream<A>()
{
  JUMPOUT(0x2495A740CLL);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in InferenceRequestHandler.ResponseStream<A>.AsyncIterator()
{
  return MEMORY[0x24BEE3F20];
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

void __swift_allocate_boxed_opaque_existential_1Tm(uint64_t *a1)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
    *a1 = swift_allocBox();
  OUTLINED_FUNCTION_104();
}

uint64_t outlined init with take of AsyncIteratorProtocol(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_248B11CD4()
{
  uint64_t v0;

  OUTLINED_FUNCTION_91(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8));
  OUTLINED_FUNCTION_179();
  return OUTLINED_FUNCTION_117();
}

uint64_t partial apply for closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) - 8) + 80);
  return closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(v1 + ((v2 + 40) & ~v2), a1);
}

uint64_t partial apply for closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_122();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_21(v1);
  return closure #1 in closure #3 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(v2, v3, v4);
}

uint64_t sub_248B11D74()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t sub_248B11DC8()
{
  uint64_t v0;
  unint64_t v1;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 80);
  if (v1 >> 60 != 15)
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 72), v1);
  return swift_deallocObject();
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_248B11E58()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_122();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_21(v1);
  return closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(v2, v3, v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_122();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_21(v1);
  return closure #1 in closure #4 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(v2, v3, v4);
}

uint64_t sub_248B11EC8()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
}

uint64_t partial apply for closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_122();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_21(v1);
  return closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(v2, v3, v4);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_122();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_21(v1);
  return closure #1 in closure #3 in InferenceRequestHandler.init<A>(identifier:countTokens:completePrompt:streamPromptCompletion:)(v2, v3, v4);
}

uint64_t sub_248B11F68()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t sub_248B11FC0()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
}

uint64_t sub_248B12018()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t partial apply for closure #1 in closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_122();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)OUTLINED_FUNCTION_69(v0);
  v2 = OUTLINED_FUNCTION_21(v1);
  return closure #1 in closure #4 in InferenceRequestHandler.init<A, B>(identifier:countTokens:completePrompt:streamPromptCompletion:registerDocuments:)(v2, v3, v4);
}

uint64_t sub_248B12070()
{
  return objectdestroy_20Tm(&demangling cache variable for type metadata for AsyncThrowingStream<CompletePromptResponseElement, Error>);
}

uint64_t objectdestroy_20Tm(uint64_t *a1)
{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(a1);
  OUTLINED_FUNCTION_91(*(_QWORD *)(v1 - 8));
  OUTLINED_FUNCTION_179();
  return OUTLINED_FUNCTION_117();
}

void outlined init with take of TokenGenerationError(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_169(a1, a2, a3);
  OUTLINED_FUNCTION_218(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  OUTLINED_FUNCTION_104();
}

void lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    OUTLINED_FUNCTION_202();
  }
  OUTLINED_FUNCTION_104();
}

void outlined destroy of TokenGenerationError(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_198(*(_QWORD *)(v2 - 8));
  OUTLINED_FUNCTION_104();
}

unint64_t lazy protocol witness table accessor for type CompletePromptResponseElement and conformance CompletePromptResponseElement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponseElement, &type metadata for CompletePromptResponseElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponseElement, &type metadata for CompletePromptResponseElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponseElement, &type metadata for CompletePromptResponseElement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement and conformance CompletePromptResponseElement);
  }
  return result;
}

void lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    OUTLINED_FUNCTION_202();
  }
  OUTLINED_FUNCTION_104();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2495A73C4](a1, v6, a5);
}

uint64_t initializeBufferWithCopyOfBuffer for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_0Tm(a1);
}

uint64_t __swift_destroy_boxed_opaque_existential_0Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t initializeWithCopy for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_0Tm(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for InferenceRequestHandler.ResponseStream.AsyncIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for InferenceRequestHandler.ResponseStream.AsyncIterator);
}

void OUTLINED_FUNCTION_0_0()
{
  JUMPOUT(0x2495A74C0);
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_2()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_3()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_5()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_6()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_7()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_8()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_10()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_11()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_12()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_15()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_16()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_18()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_19()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_21(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void OUTLINED_FUNCTION_22(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_23(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1152) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_25()
{
  return InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
}

uint64_t OUTLINED_FUNCTION_26(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = v1;
  return v3;
}

uint64_t OUTLINED_FUNCTION_28()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_29()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

BOOL OUTLINED_FUNCTION_31(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_32()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_33()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_34()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v1;
  outlined destroy of TokenGenerationError(v3, v0);
}

uint64_t OUTLINED_FUNCTION_35(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_36()
{
  JUMPOUT(0x2495A7370);
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_38(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_39()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_40()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2112;
}

__n128 OUTLINED_FUNCTION_41()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 136);
  v1 = *(_BYTE *)(v0 + 121);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 48) = v3;
  v4 = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 80) = v4;
  result = *(__n128 *)(v0 + 216);
  *(__n128 *)(v0 + 96) = result;
  *(_QWORD *)(v0 + 112) = v2;
  *(_BYTE *)(v0 + 120) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_42()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_43()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t (*v13)(_QWORD);

  outlined init with copy of TokenGenerationError(a13, a2, v13);
}

void OUTLINED_FUNCTION_45(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id a19)
{

}

uint64_t OUTLINED_FUNCTION_46()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_47(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return type metadata accessor for InferenceError();
}

uint64_t OUTLINED_FUNCTION_49()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_50()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_51(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 16) & ~v2);
}

void OUTLINED_FUNCTION_52()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_53@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, (a1 - 32) | 0x8000000000000000, (uint64_t *)(v1 - 168));
}

uint64_t OUTLINED_FUNCTION_54()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_55(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1192) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_56(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  outlined init with copy of TokenGenerationError(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_57()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_58()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_59()
{
  return type metadata accessor for InferenceError();
}

void OUTLINED_FUNCTION_60()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2112;
  JUMPOUT(0x2495A7370);
}

uint64_t OUTLINED_FUNCTION_61()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_62(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_63@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
}

uint64_t OUTLINED_FUNCTION_64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  unint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a11);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, (uint64_t *)va);
}

BOOL OUTLINED_FUNCTION_65(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_66()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_67()
{
  uint64_t v0;

  return outlined release of CompletePromptResponse(v0);
}

uint64_t OUTLINED_FUNCTION_68()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_69(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_71()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_72()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_73()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_74(uint64_t (*a1)(void))
{
  return a1();
}

void OUTLINED_FUNCTION_75()
{
  TokenGenerationError.inferenceErrorContext.getter();
}

uint64_t OUTLINED_FUNCTION_77(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

void OUTLINED_FUNCTION_78(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1136) = a1;
  JUMPOUT(0x2495A7370);
}

void OUTLINED_FUNCTION_79(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of TokenGenerationError(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_80()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_81()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_82()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_84()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_85()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_86()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_87()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_88(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

void OUTLINED_FUNCTION_89(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of TokenGenerationError(v2, a2);
}

uint64_t OUTLINED_FUNCTION_90()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_91@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v3 + (v2 & ~v1));
}

uint64_t OUTLINED_FUNCTION_92(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3);
}

uint64_t OUTLINED_FUNCTION_94()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_95()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

void OUTLINED_FUNCTION_96()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of TokenGenerationError(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_98()
{
  return swift_task_alloc();
}

void *OUTLINED_FUNCTION_99(void *a1)
{
  const void *v1;

  return memcpy(a1, v1, 0x88uLL);
}

uint64_t OUTLINED_FUNCTION_100(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_101()
{
  return swift_unexpectedError();
}

uint64_t OUTLINED_FUNCTION_102()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_103(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_105(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

void OUTLINED_FUNCTION_106(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of TokenGenerationError(v2, a2);
}

uint64_t OUTLINED_FUNCTION_107()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_110(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(result + 16) = v15;
  *(_QWORD *)(result + 24) = v12;
  *v13 = v15;
  v13[1] = v12;
  v13[2] = v14;
  v13[3] = a10;
  v13[4] = a11;
  v13[5] = a12;
  return result;
}

uint64_t OUTLINED_FUNCTION_111()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_112()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_113(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v12;
  Swift::String v13;

  v13._countAndFlagsBits = v12;
  v13._object = v11;
  String.append(_:)(v13);
}

uint64_t OUTLINED_FUNCTION_114(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_115(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_116(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1192) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_117()
{
  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_118()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_119(_QWORD *a1)
{
  void (*v1)(uint64_t);

  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(a1, v1);
}

uint64_t OUTLINED_FUNCTION_120()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_121(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(a1 + v1, v4, v2);
}

void OUTLINED_FUNCTION_124(_QWORD *a1, uint64_t *a2)
{
  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(a1, a2);
}

uint64_t OUTLINED_FUNCTION_125()
{
  return swift_release();
}

void OUTLINED_FUNCTION_126()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_127()
{
  return swift_release();
}

void OUTLINED_FUNCTION_128()
{
  JUMPOUT(0x2495A7370);
}

uint64_t OUTLINED_FUNCTION_129(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_131(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_132()
{
  return AsyncMapSequence.init(_:transform:)();
}

uint64_t OUTLINED_FUNCTION_135()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_136()
{
  return dispatch thunk of AsyncSequence.makeAsyncIterator()();
}

uint64_t OUTLINED_FUNCTION_137()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_139()
{
  return swift_release();
}

void OUTLINED_FUNCTION_140(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  outlined init with take of TokenGenerationError(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_141()
{
  return swift_task_alloc();
}

BOOL OUTLINED_FUNCTION_142(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_143()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_144()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_146()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_147()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = a2;
  *(_QWORD *)(v2 + 104) = a1;
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_149()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_150()
{
  JUMPOUT(0x2495A7370);
}

void OUTLINED_FUNCTION_151()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of TokenGenerationError(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_152()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_153()
{
  uint64_t v0;

  return outlined retain of CompletePromptResponse(v0);
}

uint64_t OUTLINED_FUNCTION_154()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_155()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_158()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  unint64_t v14;
  va_list va;

  va_start(va, a13);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_161()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_162()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_164()
{
  return static os_log_type_t.default.getter();
}

uint64_t OUTLINED_FUNCTION_165()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_166()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_167(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of TokenGenerationError(a1, a2, v2);
}

uint64_t (*OUTLINED_FUNCTION_168(uint64_t a1, uint64_t a2))@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return InferenceRequestHandler.ResponseStream.init<A>(_:)(v4, a2, v3, v2);
}

uint64_t OUTLINED_FUNCTION_169(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t OUTLINED_FUNCTION_170@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_171()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_172()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_174()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 - 256) = v1;
}

void OUTLINED_FUNCTION_175(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  String.append(_:)(*(Swift::String *)(&a2 - 1));
}

uint64_t OUTLINED_FUNCTION_176@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_177()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_180()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_181@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_182(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_183(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1152) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_184()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_185()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_186()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_187(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of TokenGenerationError(v2, a2);
}

uint64_t OUTLINED_FUNCTION_188@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_189()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_190()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

void OUTLINED_FUNCTION_191(uint64_t a1)
{
  uint64_t *v1;

  specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(a1, v1);
}

void OUTLINED_FUNCTION_192(uint64_t a1)
{
  uint64_t *v1;

  specialized closure #1 in InferenceRequestHandler.ResponseStream.init<A>(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_195(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_197()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_198@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_200()
{
  return type metadata accessor for Logger();
}

void OUTLINED_FUNCTION_201(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  outlined init with take of TokenGenerationError(a1, *(_QWORD *)(a3 - 256), a2);
}

void OUTLINED_FUNCTION_202()
{
  JUMPOUT(0x2495A740CLL);
}

uint64_t OUTLINED_FUNCTION_203()
{
  return swift_release();
}

void OUTLINED_FUNCTION_204(uint64_t a1)
{
  uint64_t *v1;

  v1[4] = a1;
  __swift_allocate_boxed_opaque_existential_1Tm(v1);
}

uint64_t OUTLINED_FUNCTION_205(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_207()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_208()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_209()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_211()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_213()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_214()
{
  return swift_bridgeObjectRetain_n();
}

void OUTLINED_FUNCTION_215()
{
  _QWORD *v0;
  uint64_t *v1;

  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(v0, v1);
}

uint64_t OUTLINED_FUNCTION_216@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_217@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_218@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void OUTLINED_FUNCTION_219()
{
  _QWORD *v0;
  uint64_t *v1;

  lazy protocol witness table accessor for type AsyncThrowingStream<(), Error> and conformance AsyncThrowingStream<A, B>(v0, v1);
}

BOOL OUTLINED_FUNCTION_220()
{
  os_log_type_t v0;
  NSObject *v1;

  return os_log_type_enabled(v1, v0);
}

void OUTLINED_FUNCTION_221()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of TokenGenerationError(v0, v1);
}

uint64_t OUTLINED_FUNCTION_222()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_223()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v9[10] = v12;
  v9[11] = v8;
  v9[8] = a8;
  v9[9] = v11;
  v9[6] = a5;
  v9[7] = a7;
  v9[4] = a3;
  v9[5] = a4;
  v9[2] = a1;
  v9[3] = a2;
  return swift_task_switch();
}

uint64_t InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);

  if (one-time initialization token for encoder != -1)
    swift_once();
  type metadata accessor for OneShotRequest(0);
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type OneShotRequest and conformance OneShotRequest, type metadata accessor for OneShotRequest, (uint64_t)&protocol conformance descriptor for OneShotRequest);
  v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[12] = v1;
  v0[13] = v2;
  v3 = v1;
  v4 = v2;
  v7 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(**(int **)(v0[9] + 32)
                                                                                        + *(_QWORD *)(v0[9] + 32));
  v5 = (_QWORD *)swift_task_alloc();
  v0[14] = v5;
  *v5 = v0;
  v5[1] = InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:);
  return v7(v0[3], v0[4], v3, v4, v0[6], v0[7], v0[9]);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  static WireFormat.decode<A>(_:from:)();
  outlined consume of Data._Representation(v2, v1);
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  return OUTLINED_FUNCTION_114(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t InferenceSessionProtocol.request<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v6 = *(_QWORD **)v3;
  *(_QWORD *)(*(_QWORD *)v3 + 120) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    v7 = v6[12];
    v8 = v6[13];
    v6[16] = a2;
    v6[17] = a1;
    outlined consume of Data._Representation(v7, v8);
  }
  return swift_task_switch();
}

uint64_t InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a6;
  v47 = a4;
  v43 = a2;
  v44 = a3;
  v42 = a1;
  v52 = a7;
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>);
  v53 = a5;
  v45 = lazy protocol witness table accessor for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>();
  v11 = type metadata accessor for AsyncThrowingMapSequence();
  v51 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v48 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v46 = (uint64_t)&v39 - v15;
  v49 = *(_QWORD *)(v10 - 8);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v39 - v19;
  if (one-time initialization token for encoder != -1)
    swift_once();
  type metadata accessor for StreamingRequest(0);
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest, type metadata accessor for StreamingRequest, (uint64_t)&protocol conformance descriptor for StreamingRequest);
  v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v23 = v22;
  v40 = a8;
  v41 = a9;
  v24 = v50;
  v25 = v47;
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v50 + 40))(v42, v43, v21, v22, v44, v47, v50);
  outlined consume of Data._Representation(v21, v23);
  v26 = v49;
  (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v18, v20, v10);
  v27 = (_QWORD *)swift_allocObject();
  v28 = v53;
  v27[2] = v25;
  v27[3] = v28;
  v29 = v40;
  v27[4] = v24;
  v27[5] = v29;
  v27[6] = v41;
  v30 = v46;
  AsyncSequence.map<A>(_:)();
  swift_release();
  v31 = v51;
  v32 = v48;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v48, v30, v11);
  v33 = MEMORY[0x2495A740C](MEMORY[0x24BEE7090], v11);
  AsyncThrowingStream<>.init<A>(_:)(v32, v28, v11, v33, v34, v35, v36, v37, v39, v40, v41, v42, v43, v44, v45, v46, v47, v48, v49,
    v50);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v20, v10);
}

uint64_t closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = a6;
  *(_QWORD *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 40) = *a2;
  return swift_task_switch();
}

uint64_t closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)()
{
  uint64_t v0;

  static WireFormat.decode<A>(_:from:)();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

void static ModelCatalog.AssetKey.tokenizer.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_6_0(a1);
}

void static ModelCatalog.AssetKey.adaptor.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_6_0(a1);
}

void static ModelCatalog.AssetKey.foundation.getter(_QWORD *a1@<X8>)
{
  OUTLINED_FUNCTION_6_0(a1);
}

uint64_t ModelCatalog.AssetKey.hash(into:)()
{
  OUTLINED_FUNCTION_90();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static ModelCatalog.AssetKey.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void ModelCatalog.AssetKey.hashValue.getter()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_3_0();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_0();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ModelCatalog.AssetKey()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_3_0();
  swift_bridgeObjectRelease();
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_0();
}

unint64_t lazy protocol witness table accessor for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey;
  if (!lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelCatalog.AssetKey, &type metadata for ModelCatalog.AssetKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey;
  if (!lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelCatalog.AssetKey, &type metadata for ModelCatalog.AssetKey);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelCatalog.AssetKey and conformance ModelCatalog.AssetKey);
  }
  return result;
}

uint64_t dispatch thunk of InferenceSessionProtocol.requestPrewarm()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InferenceSessionProtocol.modelInfo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InferenceSessionProtocol.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a7 + 32)
                                                                                              + *(_QWORD *)(a7 + 32));
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 16) = v15;
  *v15 = v7;
  v15[1] = dispatch thunk of InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:);
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  OUTLINED_FUNCTION_81();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(a1, a2);
}

uint64_t dispatch thunk of InferenceSessionProtocol.streamingRequest(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

ValueMetadata *type metadata accessor for ModelCatalog()
{
  return &type metadata for ModelCatalog;
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelCatalog.AssetKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ModelCatalog.AssetKey()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for ModelCatalog.AssetKey(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ModelCatalog.AssetKey(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelCatalog.AssetKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelCatalog.AssetKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelCatalog.AssetKey()
{
  return &type metadata for ModelCatalog.AssetKey;
}

unint64_t lazy protocol witness table accessor for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>;
  if (!lazy protocol witness table cache variable for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AsyncThrowingStream<Data, Error>);
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE6D38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AsyncThrowingStream<Data, Error> and conformance AsyncThrowingStream<A, B>);
  }
  return result;
}

uint64_t sub_248B13C34()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(uint64_t a1, _OWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = protocol witness for AsyncIteratorProtocol.next() in conformance InferenceRequestHandler.ResponseStream<A>.AsyncIterator;
  return closure #1 in InferenceSessionProtocol.streamingRequest<A>(loggingIdentifier:payload:requiredAssets:expectedResponse:)(a1, a2, v6, v7, v8, v9);
}

uint64_t lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2495A740C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_6_0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  a1[1] = v2;
}

uint64_t one-time initialization function for assets(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_1(a1, static Log.assets);
}

uint64_t one-time initialization function for generator(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.generator);
}

uint64_t one-time initialization function for schema(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_1(a1, static Log.schema);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t one-time initialization function for inference(uint64_t a1)
{
  return one-time initialization function for assets(a1, static Log.inference);
}

uint64_t one-time initialization function for prompt(uint64_t a1)
{
  return OUTLINED_FUNCTION_0_1(a1, static Log.prompt);
}

uint64_t one-time initialization function for assets(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t a1, uint64_t *a2)
{
  return one-time initialization function for assets(a1, a2);
}

uint64_t ModelBundle.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

BOOL static ModelBundle.ModelType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ModelBundle.ModelType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ModelBundle.ModelType.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  char v10;

  v0 = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_1_0(v0, v1, v2, v3, v4, v5, v6, v7, v9, v10);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelBundle.ModelType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ModelBundle.modelType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

TokenGeneration::ModelBundle __swiftcall ModelBundle.init(preverifiedIdentifier:)(Swift::String preverifiedIdentifier)
{
  Swift::String *v1;
  uint64_t v2;
  void *v3;
  TokenGeneration::ModelBundle::ModelType v4;
  TokenGeneration::ModelBundle result;

  *v1 = preverifiedIdentifier;
  OUTLINED_FUNCTION_0_2((uint64_t)v1);
  result.identifier._object = v3;
  result.identifier._countAndFlagsBits = v2;
  result.modelType.value = v4;
  return result;
}

TokenGeneration::ModelBundle __swiftcall ModelBundle.init(preverifiedIdentifier:modelType:)(Swift::String preverifiedIdentifier, TokenGeneration::ModelBundle::ModelType modelType)
{
  uint64_t v2;
  char v3;
  TokenGeneration::ModelBundle result;

  v3 = *(_BYTE *)modelType;
  *(Swift::String *)v2 = preverifiedIdentifier;
  *(_BYTE *)(v2 + 16) = v3;
  result.identifier = preverifiedIdentifier;
  result.modelType.value = modelType;
  return result;
}

TokenGeneration::ModelBundle_optional __swiftcall ModelBundle.init(identifier:)(Swift::String identifier)
{
  Swift::String *v1;
  uint64_t v2;
  void *v3;
  TokenGeneration::ModelBundle::ModelType v4;
  TokenGeneration::ModelBundle_optional result;

  *v1 = identifier;
  OUTLINED_FUNCTION_0_2((uint64_t)v1);
  result.value.identifier._object = v3;
  result.value.identifier._countAndFlagsBits = v2;
  result.value.modelType.value = v4;
  return result;
}

void static ModelBundle.summarization.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000017;
  a1[1] = 0x8000000248BCAF30;
  OUTLINED_FUNCTION_0_2((uint64_t)a1);
}

void static ModelBundle.summarizationLarge.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000001DLL;
  a1[1] = 0x8000000248BCAF50;
  OUTLINED_FUNCTION_0_2((uint64_t)a1);
}

void ModelBundle.hash(into:)()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

uint64_t static ModelBundle.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  char v5;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    if (v2 == 2)
    {
      if (v3 != 2)
        return 0;
    }
    else if (v3 == 2 || ((v3 ^ v2) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

Swift::Int ModelBundle.hashValue.getter()
{
  uint64_t v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  char v12;

  v1 = *(unsigned __int8 *)(v0 + 16);
  OUTLINED_FUNCTION_2_1();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    OUTLINED_FUNCTION_1_0(v2, v3, v4, v5, v6, v7, v8, v9, v11, v12);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelBundle()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ModelBundle.ModelType and conformance ModelBundle.ModelType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelBundle.ModelType and conformance ModelBundle.ModelType;
  if (!lazy protocol witness table cache variable for type ModelBundle.ModelType and conformance ModelBundle.ModelType)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelBundle.ModelType, &type metadata for ModelBundle.ModelType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelBundle.ModelType and conformance ModelBundle.ModelType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelBundle and conformance ModelBundle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelBundle and conformance ModelBundle;
  if (!lazy protocol witness table cache variable for type ModelBundle and conformance ModelBundle)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelBundle, &type metadata for ModelBundle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelBundle and conformance ModelBundle);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ModelBundle(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ModelBundle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelBundle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelBundle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelBundle()
{
  return &type metadata for ModelBundle;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ModelBundle.ModelType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelBundle.ModelType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248B144EC + 4 * byte_248BBF1D9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248B14520 + 4 * byte_248BBF1D4[v4]))();
}

uint64_t sub_248B14520(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B14528(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B14530);
  return result;
}

uint64_t sub_248B1453C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B14544);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_248B14548(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B14550(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ModelBundle.ModelType(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ModelBundle.ModelType(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ModelBundle.ModelType()
{
  return &type metadata for ModelBundle.ModelType;
}

void OUTLINED_FUNCTION_0_2(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 16) = 2;
}

void OUTLINED_FUNCTION_1_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return Hasher.init(_seed:)();
}

ValueMetadata *type metadata accessor for ModelManagerSession()
{
  return &type metadata for ModelManagerSession;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D58LL4data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v19 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v19;
  result = specialized _NativeSet.startIndex.getter(a1);
  v5 = result;
  v7 = v6;
  v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != v7)
      goto LABEL_14;
    v18 = v9;
    v10 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v5);
    v11 = *v10;
    v12 = v10[1];
    v14 = *(_QWORD *)(v19 + 16);
    v13 = *(_QWORD *)(v19 + 24);
    swift_bridgeObjectRetain();
    if (v14 >= v13 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
    *(_QWORD *)(v19 + 16) = v14 + 1;
    v15 = v19 + 16 * v14;
    *(_QWORD *)(v15 + 32) = v11;
    *(_QWORD *)(v15 + 40) = v12;
    result = specialized _NativeSet.index(after:)(v5, v7, v18 & 1, a1);
    v5 = result;
    v7 = v16;
    v9 = v17 & 1;
    if (!--v1)
    {
      outlined consume of Set<ModelCatalog.AssetKey>.Index._Variant(result, v16, v9);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ModelManagerSession.requestPrewarm()()
{
  void *v0;

  Session.requestPrewarm()();
  if (v0)
  {
    ModelManagerSession.attemptUnwrappingGenerationError(_:)(v0);
    swift_willThrow();

  }
}

void *ModelManagerSession.attemptUnwrappingGenerationError(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(_BYTE *, uint64_t);
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE v56[12];
  int v57;
  _QWORD *v58;
  uint64_t v59;
  void (*v60)(_BYTE *, _BYTE *, uint64_t);
  void (*v61)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGenerationError?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v56[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v56[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = type metadata accessor for InferenceError();
  v63 = *(_QWORD *)(v65 - 8);
  v8 = MEMORY[0x24BDAC7A8](v65);
  v62 = &v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = &v56[-v11];
  MEMORY[0x24BDAC7A8](v10);
  v64 = &v56[-v13];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelManagerError?);
  MEMORY[0x24BDAC7A8](v14);
  v16 = &v56[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for ModelManagerError();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = &v56[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v19);
  v23 = &v56[-v22];
  v67 = (uint64_t)a1;
  MEMORY[0x2495A7370](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v17);
    outlined destroy of ResponseAsyncIterator<Data>?((uint64_t)v16, &demangling cache variable for type metadata for ModelManagerError?);
    if (one-time initialization token for generator != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Log.generator);
    MEMORY[0x2495A7370](a1);
    MEMORY[0x2495A7370](a1);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      v48 = swift_slowAlloc();
      v67 = v48;
      *(_DWORD *)v47 = 136315138;
      swift_getErrorValue();
      swift_getDynamicType();
      v49 = _typeName(_:qualified:)();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_248B08000, v45, v46, "Received unexpected error type from model manager: %s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2495A74C0](v48, -1, -1);
      MEMORY[0x2495A74C0](v47, -1, -1);
    }
    else
    {

    }
    goto LABEL_15;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v17);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 32))(v23, v16, v17);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(v21, v23, v17);
  if ((*(unsigned int (**)(_BYTE *, uint64_t))(v18 + 88))(v21, v17) != *MEMORY[0x24BE688B0])
  {
    v51 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
    v51(v23, v17);
    v51(v21, v17);
LABEL_15:
    MEMORY[0x2495A7370](a1);
    return a1;
  }
  (*(void (**)(_BYTE *, uint64_t))(v18 + 96))(v21, v17);
  v25 = v63;
  v24 = v64;
  v26 = v21;
  v27 = v5;
  v28 = v65;
  v60 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v63 + 32);
  v60(v64, v26, v65);
  v61 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v25 + 16);
  v61(v12, v24, v28);
  TokenGenerationError.init(_:)();
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v27) == 1)
  {
    outlined destroy of ResponseAsyncIterator<Data>?((uint64_t)v4, &demangling cache variable for type metadata for TokenGenerationError?);
    if (one-time initialization token for generator != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Log.generator);
    v30 = v62;
    v31 = v28;
    v61(v62, v24, v28);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc();
      v58 = (_QWORD *)swift_slowAlloc();
      v59 = swift_slowAlloc();
      v67 = v59;
      *(_DWORD *)v35 = 136315650;
      v66 = v31;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceError.Type);
      v36 = String.init<A>(describing:)();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 12) = 2080;
      v66 = v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TokenGenerationError.Type);
      v57 = v34;
      v38 = String.init<A>(describing:)();
      v66 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v35 + 22) = 2112;
      lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      swift_allocError();
      v61(v40, v30, v65);
      v41 = _swift_stdlib_bridgeErrorToNSError();
      v66 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v42 = v58;
      *v58 = v41;
      v31 = v65;
      (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v30, v65);
      _os_log_impl(&dword_248B08000, v32, (os_log_type_t)v57, "Received %s that couldn't be converted to a %s:%@", (uint8_t *)v35, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x2495A74C0](v42, -1, -1);
      v43 = v59;
      swift_arrayDestroy();
      MEMORY[0x2495A74C0](v43, -1, -1);
      MEMORY[0x2495A74C0](v35, -1, -1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v63 + 8))(v30, v31);
    }

    lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    a1 = (void *)swift_allocError();
    v60(v54, v64, v31);
  }
  else
  {
    outlined init with take of TokenGenerationError((uint64_t)v4, (uint64_t)v7);
    lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, type metadata accessor for TokenGenerationError, (uint64_t)&protocol conformance descriptor for TokenGenerationError);
    v52 = v24;
    a1 = (void *)swift_allocError();
    outlined init with take of TokenGenerationError((uint64_t)v7, v53);
    (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v52, v28);
  }
  (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v23, v17);
  return a1;
}

Swift::Void __swiftcall ModelManagerSession.cancel()()
{
  Session.cancel()();
}

TokenGeneration::ModelBundle __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ModelManagerSession.modelInfo()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  TokenGeneration::ModelBundle::ModelType v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  TokenGeneration::ModelBundle result;

  v2 = v0;
  v3 = type metadata accessor for ModelInstance();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Session.fetchModelInfo()();
  if (v1)
  {
    ModelManagerSession.attemptUnwrappingGenerationError(_:)(v1);
    swift_willThrow();

  }
  else
  {
    v10 = ModelInstance.assetBundleIdentifier.getter();
    v12 = v11;
    v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    *(_QWORD *)v2 = v10;
    *(_QWORD *)(v2 + 8) = v12;
    *(_BYTE *)(v2 + 16) = 2;
  }
  result.identifier._object = v8;
  result.identifier._countAndFlagsBits = v7;
  result.modelType.value = v9;
  return result;
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  v6[3] = a1;
  v6[4] = a2;
  v7 = type metadata accessor for Request();
  v6[9] = v7;
  v6[10] = *(_QWORD *)(v7 - 8);
  v6[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[7];
  v3 = v0[5];
  v2 = v0[6];
  OUTLINED_FUNCTION_32();
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D584data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_n(v1);
  specialized Set.init<A>(_:)(v4);
  outlined copy of Data._Representation(v3, v2);
  swift_bridgeObjectRetain();
  Request.init(session:loggingIdentifier:clientData:requiredAssetTypes:)();
  v5 = (_QWORD *)swift_task_alloc();
  v0[12] = v5;
  *v5 = v0;
  v5[1] = ModelManagerSession.request(loggingIdentifier:data:requiredAssets:);
  return Request.execute()();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_9_0(*(_QWORD *)(v0 + 80));
  OUTLINED_FUNCTION_71();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 112));
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 104);
  OUTLINED_FUNCTION_198(*(_QWORD *)(v0 + 80));
  OUTLINED_FUNCTION_6_1();
  swift_willThrow();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(*v3 + 104) = v2;
  swift_task_dealloc();
  if (!v2)
  {
    *(_QWORD *)(v6 + 112) = a2;
    *(_QWORD *)(v6 + 120) = a1;
  }
  return OUTLINED_FUNCTION_2_2();
}

uint64_t ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26[1] = a1;
  v30 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v27 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v26 - v14;
  v16 = type metadata accessor for Request();
  v28 = *(_QWORD *)(v16 - 8);
  v29 = v16;
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_32();
  v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy15TokenGeneration12ModelCatalogV8AssetKeyVG_SSs5NeverOTg504_s15d12Generation19f152ManagerSessionV13createRequest33_F61778B4E28C3CEC7B6F3BC34FB92D584data17loggingIdentifier14requiredAssets0cD8Services0G0V10Foundation4DataV_SSShyAA0C7g2V8hI61VGtFSSARcfu_33_5a67a6ab5d0529bb814399356235ce33ARSSTf3nnnpk_nTf1cn_n(a4);
  specialized Set.init<A>(_:)(v17);
  outlined copy of Data._Representation(a2, a3);
  swift_bridgeObjectRetain();
  Request.init(session:loggingIdentifier:clientData:requiredAssetTypes:)();
  Request.executeStream()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  v18 = swift_allocBox();
  v20 = v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>);
  __swift_storeEnumTagSinglePayload(v20, 1, 1, v21);
  v22 = v27;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v27, v15, v10);
  v23 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v24 + v23, v22, v10);
  *(_QWORD *)(v24 + ((v12 + v23 + 7) & 0xFFFFFFFFFFFFFFF8)) = a5;
  OUTLINED_FUNCTION_32();
  swift_retain();
  AsyncThrowingStream.init<>(unfolding:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  OUTLINED_FUNCTION_9_0(v28);
  return swift_release();
}

uint64_t closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[14] = a3;
  v4[15] = a4;
  v4[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_projectBox();
  return swift_task_switch();
}

uint64_t closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  OUTLINED_FUNCTION_3_1();
  outlined init with copy of ResponseAsyncIterator<Data>?(v1, v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>);
  LODWORD(v1) = OUTLINED_FUNCTION_5_0(v2);
  outlined destroy of ResponseAsyncIterator<Data>?(v2, &demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  if ((_DWORD)v1 == 1)
  {
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 128);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>);
    ResponseStream.makeAsyncIterator()();
    __swift_storeEnumTagSinglePayload(v5, 0, 1, v3);
    OUTLINED_FUNCTION_3_1();
    outlined assign with take of ResponseAsyncIterator<Data>?(v5, v4);
  }
  v6 = *(_QWORD *)(v0 + 144);
  OUTLINED_FUNCTION_3_1();
  if (OUTLINED_FUNCTION_5_0(v6))
  {
    swift_endAccess();
    *(_OWORD *)*(_QWORD *)(v0 + 104) = xmmword_248BBF000;
    swift_task_dealloc();
    OUTLINED_FUNCTION_71();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v8;
    *v8 = v0;
    v8[1] = closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:);
    return ResponseAsyncIterator.next()();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_endAccess();
  return OUTLINED_FUNCTION_2_2();
}

{
  uint64_t v0;

  *(_OWORD *)*(_QWORD *)(v0 + 104) = *(_OWORD *)(v0 + 88);
  swift_task_dealloc();
  OUTLINED_FUNCTION_71();
  return OUTLINED_FUNCTION_114(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);
  swift_endAccess();
  OUTLINED_FUNCTION_6_1();
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void protocol witness for InferenceSessionProtocol.requestPrewarm() in conformance ModelManagerSession()
{
  ModelManagerSession.requestPrewarm()();
}

unint64_t protocol witness for InferenceSessionProtocol.modelInfo() in conformance ModelManagerSession()
{
  return (unint64_t)ModelManagerSession.modelInfo()();
}

void protocol witness for InferenceSessionProtocol.cancel() in conformance ModelManagerSession()
{
  ModelManagerSession.cancel()();
}

uint64_t protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;

  v12 = *v5;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession;
  return ModelManagerSession.request(loggingIdentifier:data:requiredAssets:)(a1, a2, a3, a4, a5, v12);
}

uint64_t protocol witness for InferenceSessionProtocol.request(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = OUTLINED_FUNCTION_81();
  if (!v2)
  {
    v6 = a1;
    v7 = a2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v6, v7);
}

uint64_t protocol witness for InferenceSessionProtocol.streamingRequest(loggingIdentifier:data:requiredAssets:) in conformance ModelManagerSession@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t *v5;

  return ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(a1, a2, a3, a4, *v5, a5);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_248B15978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseStream<Data>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = protocol witness for AsyncIteratorProtocol.next() in conformance InferenceRequestHandler.ResponseStream<A>.AsyncIterator;
  return closure #1 in ModelManagerSession.streamingRequest(loggingIdentifier:data:requiredAssets:)(a1, v6, v7, v8);
}

uint64_t outlined init with copy of ResponseAsyncIterator<Data>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ResponseAsyncIterator<Data>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseAsyncIterator<Data>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResponseAsyncIterator<Data>?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_198(*(_QWORD *)(v3 - 8));
  return a1;
}

uint64_t outlined init with take of TokenGenerationError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TokenGenerationError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  if (v5 + 1 < (unint64_t)(result + 63) >> 6)
  {
    v10 = *(_QWORD *)(v6 + 8 * v9);
    if (v10)
      return __clz(__rbit64(v10)) + (v9 << 6);
    v11 = (unint64_t)(result + 63) >> 6;
    v9 = v5 + 2;
    if (v5 + 2 < v11)
    {
      v10 = *(_QWORD *)(v6 + 8 * v9);
      if (v10)
        return __clz(__rbit64(v10)) + (v9 << 6);
      while (v5 + 3 < v11)
      {
        v10 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v10)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v10)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  uint64_t i;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v2 = 64;
  for (i = 9; i - 7 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    v1 = *(_QWORD *)(a1 + 8 * i);
    v2 += 64;
    if (v1)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t outlined consume of Set<ModelCatalog.AssetKey>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_5_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void *OUTLINED_FUNCTION_6_1()
{
  void *v0;

  return ModelManagerSession.attemptUnwrappingGenerationError(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_9_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t initializeBufferWithCopyOfBuffer for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for TokenGenerationOverrides(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for TokenGenerationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationOverrides()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B15EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationOverrides()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B15F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TokenGenerationOverrides()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TokenGenerationOverrides;
  if (!type metadata singleton initialization cache for TokenGenerationOverrides)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for TokenGenerationOverrides()
{
  unint64_t v0;

  type metadata accessor for Overridable<Bool>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Overridable<Bool>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Overridable<Bool>)
  {
    v0 = type metadata accessor for Overridable();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Overridable<Bool>);
  }
}

void Prompt.Turn.role.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *Prompt.Turn.role.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*Prompt.Turn.role.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.locale.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v1 + *(int *)(OUTLINED_FUNCTION_313() + 20);
  return outlined init with copy of Locale?(v2, v0);
}

uint64_t type metadata accessor for Prompt.Turn(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.Turn);
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Prompt.Turn.locale.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for Prompt.Turn(0) + 20);
  return outlined assign with take of Locale?(a1, v3);
}

uint64_t outlined assign with take of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*Prompt.Turn.locale.modify())()
{
  type metadata accessor for Prompt.Turn(0);
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.content.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_7_0();
  v28 = v1;
  v29 = v2;
  v26 = OUTLINED_FUNCTION_248();
  v3 = *(_QWORD *)(v26 - 8);
  v4 = MEMORY[0x24BDAC7A8](v26);
  v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v24 - v7;
  v9 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for Prompt.Turn(0) + 24));
  v10 = *(_QWORD *)(v9 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v27 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_88_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    OUTLINED_FUNCTION_117_0();
    v13 = v9 + v12;
    v14 = *(_QWORD *)(v3 + 72);
    v24 = v9;
    v25 = v14;
    do
    {
      OUTLINED_FUNCTION_232(v13, (uint64_t)v8);
      v15 = OUTLINED_FUNCTION_186_0();
      OUTLINED_FUNCTION_232(v15, v16);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined destroy of Prompt.Turn.Segment((uint64_t)v6, type metadata accessor for Prompt.Turn.Segment);
        v17 = 0;
        v18 = 0xE000000000000000;
      }
      else
      {
        v17 = *v6;
        v18 = v6[1];
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v8, type metadata accessor for Prompt.Turn.Segment);
      v11 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v14 = v25;
        v11 = v27;
      }
      v20 = *(_QWORD *)(v11 + 16);
      v19 = *(_QWORD *)(v11 + 24);
      if (v20 >= v19 >> 1)
      {
        v22 = OUTLINED_FUNCTION_277(v19);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22, v20 + 1, 1);
        v14 = v25;
        v11 = v27;
      }
      *(_QWORD *)(v11 + 16) = v20 + 1;
      v21 = v11 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v17;
      *(_QWORD *)(v21 + 40) = v18;
      v13 += v14;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  v27 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  OUTLINED_FUNCTION_312();
  BidirectionalCollection<>.joined(separator:)();
  OUTLINED_FUNCTION_227();
  return OUTLINED_FUNCTION_90_0();
}

uint64_t type metadata accessor for Prompt.Turn.Segment(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for Prompt.Turn.Segment);
}

uint64_t type metadata accessor for Prompt.Turn(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void key path setter for Prompt.Turn.content : Prompt.Turn()
{
  swift_bridgeObjectRetain();
  Prompt.Turn.content.setter();
}

void Prompt.Turn.content.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_270();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>);
  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Prompt.Turn.Segment(0) - 8) + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_248BBF340;
  v6 = (_QWORD *)(v5 + v4);
  *v6 = v2;
  v6[1] = v0;
  OUTLINED_FUNCTION_188_0();
  v7 = *(int *)(OUTLINED_FUNCTION_70_0() + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v7) = v5;
  OUTLINED_FUNCTION_22_0();
}

void Prompt.Turn.content.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = Prompt.Turn.content.getter();
  a1[1] = v3;
  OUTLINED_FUNCTION_104();
}

void Prompt.Turn.content.modify()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_97_0();
  v2 = v1;
  v4 = v3[1];
  v5 = v3[2];
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>);
  OUTLINED_FUNCTION_248();
  OUTLINED_FUNCTION_156();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_248BBF340;
  v8 = (_QWORD *)(v7 + v0);
  *v8 = v6;
  v8[1] = v4;
  OUTLINED_FUNCTION_188_0();
  v9 = *(int *)(OUTLINED_FUNCTION_70_0() + 24);
  if ((v2 & 1) != 0)
  {
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_39_0();
    *(_QWORD *)(v5 + v9) = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_39_0();
    *(_QWORD *)(v5 + v9) = v7;
    OUTLINED_FUNCTION_138();
  }
}

uint64_t Prompt.Turn.segments.getter()
{
  type metadata accessor for Prompt.Turn(0);
  return swift_bridgeObjectRetain();
}

void Prompt.Turn.segments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_70_0() + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_97();
}

uint64_t (*Prompt.Turn.segments.modify())()
{
  type metadata accessor for Prompt.Turn(0);
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.toolCalls.getter()
{
  type metadata accessor for Prompt.Turn(0);
  return swift_bridgeObjectRetain();
}

void Prompt.Turn.toolCalls.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(OUTLINED_FUNCTION_70_0() + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  OUTLINED_FUNCTION_97();
}

uint64_t (*Prompt.Turn.toolCalls.modify())()
{
  type metadata accessor for Prompt.Turn(0);
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.Turn.toolResult.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)(v1 + *(int *)(OUTLINED_FUNCTION_313() + 36));
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  *v0 = *v2;
  v0[1] = v4;
  v0[2] = v5;
  v0[3] = v6;
  return outlined copy of Prompt.ToolCallResult?(v3, v4);
}

__n128 Prompt.Turn.toolResult.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __n128 result;
  __int128 v6;

  v6 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for Prompt.Turn(0) + 36));
  outlined consume of Prompt.ToolCallResult?(*v4, v4[1]);
  *(_OWORD *)v4 = v6;
  v4[2] = v2;
  v4[3] = v3;
  OUTLINED_FUNCTION_218_0();
  return result;
}

uint64_t (*Prompt.Turn.toolResult.modify())()
{
  type metadata accessor for Prompt.Turn(0);
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void static Prompt.Turn.user(segments:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  OUTLINED_FUNCTION_97_0();
  OUTLINED_FUNCTION_254();
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_33_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_17_0();
  *v0 = 2;
  OUTLINED_FUNCTION_169_0();
  *(_QWORD *)&v0[v4] = MEMORY[0x24BEE4AF8];
  *v5 = 0u;
  v5[1] = 0u;
  v0[*(int *)(v1 + 28)] = 0;
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_135_0();
  OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_138();
}

void static Prompt.Turn.user(segments:locale:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_158_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_27_0(v2, v9);
  v3 = type metadata accessor for Prompt.Turn(0);
  v4 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_52_0(v4, v5, v6, v4);
  *v0 = 2;
  OUTLINED_FUNCTION_166_0();
  *(_QWORD *)&v0[v7] = MEMORY[0x24BEE4AF8];
  *v8 = 0u;
  v8[1] = 0u;
  v0[*(int *)(v3 + 28)] = 0;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_136_0();
  OUTLINED_FUNCTION_22_0();
}

void static Prompt.Turn.response(segments:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_254();
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_33_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_17_0();
  *v0 = 1;
  OUTLINED_FUNCTION_169_0();
  *(_QWORD *)&v0[v4] = MEMORY[0x24BEE4AF8];
  *v5 = 0u;
  v5[1] = 0u;
  v0[*(int *)(v1 + 28)] = 0;
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_135_0();
  OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_4_1();
}

void static Prompt.Turn.response(segments:locale:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_158_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_27_0(v2, v9);
  v3 = type metadata accessor for Prompt.Turn(0);
  v4 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_52_0(v4, v5, v6, v4);
  *v0 = 1;
  OUTLINED_FUNCTION_166_0();
  *(_QWORD *)&v0[v7] = MEMORY[0x24BEE4AF8];
  *v8 = 0u;
  v8[1] = 0u;
  v0[*(int *)(v3 + 28)] = 0;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_136_0();
  OUTLINED_FUNCTION_22_0();
}

void static Prompt.Turn.instructions(segments:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;

  OUTLINED_FUNCTION_97_0();
  OUTLINED_FUNCTION_254();
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_33_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_17_0();
  *v0 = 0;
  OUTLINED_FUNCTION_169_0();
  *(_QWORD *)&v0[v4] = MEMORY[0x24BEE4AF8];
  *v5 = 0u;
  v5[1] = 0u;
  v0[*(int *)(v1 + 28)] = 0;
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_135_0();
  OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_138();
}

void static Prompt.Turn.instructions(segments:locale:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;

  OUTLINED_FUNCTION_158_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_27_0(v2, v9);
  v3 = type metadata accessor for Prompt.Turn(0);
  v4 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_52_0(v4, v5, v6, v4);
  *v0 = 0;
  OUTLINED_FUNCTION_166_0();
  *(_QWORD *)&v0[v7] = MEMORY[0x24BEE4AF8];
  *v8 = 0u;
  v8[1] = 0u;
  v0[*(int *)(v3 + 28)] = 0;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_136_0();
  OUTLINED_FUNCTION_22_0();
}

void static Prompt.Turn.toolCalls(_:)()
{
  uint64_t v0;
  _BYTE *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_254();
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_33_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_17_0();
  v6 = &v1[v5];
  *v1 = 1;
  *(_QWORD *)&v1[v2[6]] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v1[v2[8]] = v0;
  *v6 = 0u;
  v6[1] = 0u;
  v1[v2[7]] = 0;
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_135_0();
  OUTLINED_FUNCTION_140_0();
  OUTLINED_FUNCTION_4_1();
}

void static Prompt.Turn.toolCalls(_:locale:)()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_158_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_27_0(v3, v10);
  v4 = (int *)type metadata accessor for Prompt.Turn(0);
  v5 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_52_0(v5, v6, v7, v5);
  v9 = &v1[v8];
  *v1 = 1;
  *(_QWORD *)&v1[v4[6]] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v1[v4[8]] = v0;
  *v9 = 0u;
  v9[1] = 0u;
  v1[v4[7]] = 0;
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_136_0();
  OUTLINED_FUNCTION_22_0();
}

void static Prompt.Turn.toolCallResult(_:)()
{
  _BYTE *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_7_0();
  v2 = v1;
  v19 = v3;
  v4 = (int *)OUTLINED_FUNCTION_70_0();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_145();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_192_0();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v18 - v8;
  v10 = *v2;
  v11 = v2[1];
  v12 = v2[2];
  v13 = v2[3];
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_202_0((uint64_t)v9);
  OUTLINED_FUNCTION_299((uint64_t)v9);
  OUTLINED_FUNCTION_202_0((uint64_t)&v0[v4[5]]);
  v14 = &v0[v4[9]];
  *v0 = 3;
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[v4[6]] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v0[v4[8]] = v15;
  *v14 = v10;
  v14[1] = v11;
  v14[2] = v12;
  v14[3] = v13;
  v0[v4[7]] = 0;
  OUTLINED_FUNCTION_72();
  swift_bridgeObjectRetain();
  v16 = OUTLINED_FUNCTION_233();
  outlined assign with take of Locale?(v16, v17);
  outlined init with take of TokenGenerationError((uint64_t)v0, v19, type metadata accessor for Prompt.Turn);
  outlined destroy of Locale?((uint64_t)v9, &demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_4_1();
}

void static Prompt.Turn.toolCallResult(_:locale:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  OUTLINED_FUNCTION_97_0();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_145();
  v9 = *v4;
  v8 = v4[1];
  v11 = v4[2];
  v10 = v4[3];
  outlined init with copy of Locale?(v2, v0);
  v12 = (int *)type metadata accessor for Prompt.Turn(0);
  v13 = (uint64_t)&v6[v12[5]];
  v14 = OUTLINED_FUNCTION_29_0();
  __swift_storeEnumTagSinglePayload(v13, 1, 1, v14);
  v15 = &v6[v12[9]];
  *v6 = 3;
  v16 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v6[v12[6]] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v6[v12[8]] = v16;
  *v15 = v9;
  v15[1] = v8;
  v15[2] = v11;
  v15[3] = v10;
  v6[v12[7]] = 0;
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_10_0();
  outlined assign with take of Locale?(v0, v13);
  OUTLINED_FUNCTION_138();
}

void Prompt.Turn.init(role:segments:)(char *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;

  v5 = *a1;
  v6 = (int *)OUTLINED_FUNCTION_70_0();
  v7 = (uint64_t)&a3[v6[5]];
  v8 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_171_0(v7, v9, v10, v8);
  v11 = v6[9];
  *a3 = v5;
  *(_QWORD *)&a3[v6[6]] = a2;
  v12 = &a3[v11];
  a3[v6[7]] = 0;
  *(_QWORD *)&a3[v6[8]] = MEMORY[0x24BEE4AF8];
  *v12 = 0u;
  v12[1] = 0u;
  OUTLINED_FUNCTION_22_0();
}

void Prompt.Turn.init(role:content:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  char v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;

  OUTLINED_FUNCTION_97_0();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = *v7;
  v9 = (int *)type metadata accessor for Prompt.Turn(0);
  v10 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_52_0(v10, v11, v12, v10);
  v14 = &v6[v13];
  *v6 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>);
  type metadata accessor for Prompt.Turn.Segment(0);
  OUTLINED_FUNCTION_156();
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_248BBF340;
  v16 = (_QWORD *)(v15 + v0);
  *v16 = v4;
  v16[1] = v2;
  OUTLINED_FUNCTION_188_0();
  *(_QWORD *)&v6[v9[6]] = v15;
  v6[v9[7]] = 0;
  *(_QWORD *)&v6[v9[8]] = MEMORY[0x24BEE4AF8];
  *v14 = 0u;
  v14[1] = 0u;
  OUTLINED_FUNCTION_138();
}

void one-time initialization function for defaultSystemInstructions()
{
  int *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v0 = (int *)type metadata accessor for Prompt.Turn(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer((uint64_t)v0, static Prompt.Turn.defaultSystemInstructions);
  v6 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)static Prompt.Turn.defaultSystemInstructions);
  v7 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v7);
  v8 = (uint64_t)&v2[v0[5]];
  __swift_storeEnumTagSinglePayload(v8, 1, 1, v7);
  v9 = &v2[v0[9]];
  *v2 = 0;
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v2[v0[6]] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v2[v0[8]] = v10;
  *v9 = 0u;
  v9[1] = 0u;
  v2[v0[7]] = 1;
  outlined assign with take of Locale?((uint64_t)v5, v8);
  outlined init with take of TokenGenerationError((uint64_t)v2, v6, type metadata accessor for Prompt.Turn);
}

void static Prompt.Turn.defaultSystemInstructions.getter(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultSystemInstructions != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_70_0();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Prompt.Turn.defaultSystemInstructions);
  OUTLINED_FUNCTION_184_0(v3, a1);
  OUTLINED_FUNCTION_104();
}

void static Prompt.Turn.defaultSystemInstructions(locale:)(_BYTE *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OUTLINED_FUNCTION_195_0();
  outlined init with copy of Locale?(v5, v6);
  v7 = (int *)OUTLINED_FUNCTION_70_0();
  v8 = (uint64_t)&a1[v7[5]];
  v9 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_171_0(v8, v10, v11, v9);
  v12 = &a1[v7[9]];
  *a1 = 1;
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&a1[v7[6]] = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&a1[v7[8]] = v13;
  *v12 = 0u;
  v12[1] = 0u;
  a1[v7[7]] = 1;
  outlined assign with take of Locale?((uint64_t)v4, v8);
  OUTLINED_FUNCTION_22_0();
}

BOOL static Prompt.Turn.Role.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void Prompt.Turn.Role.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
  OUTLINED_FUNCTION_104();
}

void Prompt.Turn.Role.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  OUTLINED_FUNCTION_2_1();
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void Prompt.Turn.Segment.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);

  OUTLINED_FUNCTION_97_0();
  v3 = OUTLINED_FUNCTION_247();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_145();
  outlined init with copy of TokenGenerationError(v0, v2, v6);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    OUTLINED_FUNCTION_275(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
    OUTLINED_FUNCTION_272();
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8880], MEMORY[0x24BEB8890]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  }
  else
  {
    OUTLINED_FUNCTION_69_0();
    OUTLINED_FUNCTION_260();
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_186();
  }
  OUTLINED_FUNCTION_138();
}

void static Prompt.Turn.Segment.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  OUTLINED_FUNCTION_7_0();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  v28 = OUTLINED_FUNCTION_247();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_145_0();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_33_0();
  MEMORY[0x24BDAC7A8](v31);
  v33 = (uint64_t *)((char *)&a9 - v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
  OUTLINED_FUNCTION_3_2();
  v35 = MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&a9 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = &v37[*(int *)(v35 + 48)];
  OUTLINED_FUNCTION_232(v27, (uint64_t)v37);
  OUTLINED_FUNCTION_232(v25, (uint64_t)v38);
  OUTLINED_FUNCTION_194();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of TokenGenerationError((uint64_t)v37, v21, type metadata accessor for Prompt.Turn.Segment);
    if (OUTLINED_FUNCTION_292() == 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v20, v38, v28);
      OUTLINED_FUNCTION_186_0();
      static Prompt.ImageAttachment.== infix(_:_:)();
      v39 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v39(v20, v28);
      v40 = ((uint64_t (*)(uint64_t, uint64_t))v39)(v21, v28);
      OUTLINED_FUNCTION_303(v40, type metadata accessor for Prompt.Turn.Segment);
      goto LABEL_15;
    }
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v21, v28);
LABEL_7:
    outlined destroy of Locale?((uint64_t)v37, &demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
    goto LABEL_15;
  }
  outlined init with copy of TokenGenerationError((uint64_t)v37, (uint64_t)v33, type metadata accessor for Prompt.Turn.Segment);
  v42 = *v33;
  v41 = v33[1];
  if (OUTLINED_FUNCTION_292() == 1)
  {
    OUTLINED_FUNCTION_61();
    goto LABEL_7;
  }
  if (v42 == *(_QWORD *)v38 && v41 == *((_QWORD *)v38 + 1))
  {
    v44 = OUTLINED_FUNCTION_18();
  }
  else
  {
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_39_0();
    v44 = OUTLINED_FUNCTION_61();
  }
  OUTLINED_FUNCTION_303(v44, type metadata accessor for Prompt.Turn.Segment);
LABEL_15:
  OUTLINED_FUNCTION_4_1();
}

void Prompt.Turn.Segment.hashValue.getter()
{
  Prompt.Turn.Segment.hashValue.getter((void (*)(_BYTE *))Prompt.Turn.Segment.hash(into:));
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Turn.Segment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Turn.Segment(a1, a2, a3, (void (*)(_BYTE *))Prompt.Turn.Segment.hash(into:));
}

void Prompt.Turn.hash(into:)()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_97_0();
  v3 = OUTLINED_FUNCTION_29_0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_68_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_118_0();
  OUTLINED_FUNCTION_155_0(*v0);
  v6 = (int *)OUTLINED_FUNCTION_70_0();
  OUTLINED_FUNCTION_299((uint64_t)&v0[v6[5]]);
  if (__swift_getEnumTagSinglePayload(v2, 1, v3) == 1)
  {
    OUTLINED_FUNCTION_96_0(0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v2, v3);
    OUTLINED_FUNCTION_96_0(1u);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
    dispatch thunk of Hashable.hash(into:)();
    v7 = OUTLINED_FUNCTION_193();
    v8(v7);
  }
  OUTLINED_FUNCTION_90();
  v9 = OUTLINED_FUNCTION_90_0();
  specialized Array<A>.hash(into:)(v9, v10);
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_96_0(v0[v6[7]]);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_61();
  if (*(_QWORD *)&v0[v6[9] + 8])
  {
    OUTLINED_FUNCTION_96_0(1u);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_194();
    String.hash(into:)();
    OUTLINED_FUNCTION_39_0();
  }
  else
  {
    OUTLINED_FUNCTION_96_0(0);
  }
  OUTLINED_FUNCTION_138();
}

void static Prompt.Turn.== infix(_:_:)()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  char v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 *v29;
  char v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_270();
  v4 = OUTLINED_FUNCTION_29_0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_68_0();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_145();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_192_0();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v49 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v49 - v13;
  if (*v1 != *v0)
    goto LABEL_31;
  v15 = OUTLINED_FUNCTION_70_0();
  v16 = v1;
  v17 = v0;
  v18 = v15;
  v19 = *(int *)(v15 + 20);
  v49 = v16;
  outlined init with copy of Locale?((uint64_t)&v16[v19], (uint64_t)v14);
  v50 = v18;
  outlined init with copy of Locale?((uint64_t)&v17[*(int *)(v18 + 20)], (uint64_t)v12);
  v20 = v2 + *(int *)(v6 + 48);
  outlined init with copy of Locale?((uint64_t)v14, v2);
  outlined init with copy of Locale?((uint64_t)v12, v20);
  OUTLINED_FUNCTION_201_0(v2);
  if (v21)
  {
    OUTLINED_FUNCTION_189_0((uint64_t)v12);
    OUTLINED_FUNCTION_189_0((uint64_t)v14);
    OUTLINED_FUNCTION_201_0(v20);
    if (v21)
    {
      outlined destroy of Locale?(v2, &demangling cache variable for type metadata for Locale?);
      goto LABEL_12;
    }
LABEL_10:
    outlined destroy of Locale?(v2, &demangling cache variable for type metadata for (Locale?, Locale?));
    goto LABEL_31;
  }
  OUTLINED_FUNCTION_299(v2);
  OUTLINED_FUNCTION_201_0(v20);
  if (v21)
  {
    outlined destroy of Locale?((uint64_t)v12, &demangling cache variable for type metadata for Locale?);
    outlined destroy of Locale?((uint64_t)v14, &demangling cache variable for type metadata for Locale?);
    v22 = OUTLINED_FUNCTION_233();
    v23(v22);
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v20, v4);
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE0]);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  v25 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v25(v3, v4);
  OUTLINED_FUNCTION_189_0((uint64_t)v12);
  OUTLINED_FUNCTION_189_0((uint64_t)v14);
  v26 = OUTLINED_FUNCTION_233();
  ((void (*)(uint64_t))v25)(v26);
  OUTLINED_FUNCTION_189_0(v2);
  if ((v24 & 1) == 0)
    goto LABEL_31;
LABEL_12:
  v27 = v17;
  v29 = v49;
  v28 = v50;
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD *)&v49[*(int *)(v50 + 24)], *(_QWORD *)&v17[*(int *)(v50 + 24)]) & 1) == 0)goto LABEL_31;
  if (v29[*(int *)(v28 + 28)] != v17[*(int *)(v28 + 28)])
    goto LABEL_31;
  specialized static Array<A>.== infix(_:_:)();
  if ((v30 & 1) == 0)
    goto LABEL_31;
  v31 = *(int *)(v28 + 36);
  v32 = &v29[v31];
  v33 = *(_QWORD *)&v29[v31];
  v34 = *(_QWORD *)&v29[v31 + 8];
  v35 = *(_QWORD *)&v29[v31 + 16];
  v36 = *((_QWORD *)v32 + 3);
  v37 = &v27[v31];
  v38 = *((_QWORD *)v37 + 1);
  v39 = *((_QWORD *)v37 + 2);
  v40 = *((_QWORD *)v37 + 3);
  if (!v34)
  {
    if (!v38)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!v38)
  {
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_10_0();
LABEL_30:
    v43 = OUTLINED_FUNCTION_291();
    outlined copy of Prompt.ToolCallResult?(v43, v44);
    v45 = OUTLINED_FUNCTION_237();
    outlined consume of Prompt.ToolCallResult?(v45, v46);
    v47 = OUTLINED_FUNCTION_291();
    outlined consume of Prompt.ToolCallResult?(v47, v48);
    goto LABEL_31;
  }
  v41 = v33 == *(_QWORD *)v37 && v34 == v38;
  if ((v41 || (OUTLINED_FUNCTION_24_0() & 1) != 0) && (v35 != v39 || v36 != v40))
  {
    OUTLINED_FUNCTION_261();
    OUTLINED_FUNCTION_24_0();
  }
LABEL_31:
  OUTLINED_FUNCTION_4_1();
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = type metadata accessor for Prompt.ImageAttachment();
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
  MEMORY[0x24BDAC7A8](v45);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for Prompt.Turn.Segment(0);
  v8 = MEMORY[0x24BDAC7A8](v44);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v43 = (uint64_t *)((char *)&v39 - v10);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v48 = (uint64_t)&v39 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v39 - v15;
  v46 = a1;
  v47 = a2;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v17 || v46 == v47)
    return 1;
  v39 = v14;
  v18 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = *(_QWORD *)(v13 + 72);
  while (1)
  {
    outlined init with copy of TokenGenerationError(v46 + v18, (uint64_t)v16, type metadata accessor for Prompt.Turn.Segment);
    v20 = v48;
    outlined init with copy of TokenGenerationError(v47 + v18, v48, type metadata accessor for Prompt.Turn.Segment);
    v21 = &v7[*(int *)(v45 + 48)];
    outlined init with copy of TokenGenerationError((uint64_t)v16, (uint64_t)v7, type metadata accessor for Prompt.Turn.Segment);
    outlined init with copy of TokenGenerationError(v20, (uint64_t)v21, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() != 1)
      break;
    v22 = v7;
    v23 = (uint64_t)v7;
    v24 = v39;
    outlined init with copy of TokenGenerationError(v23, v39, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v24, v42);
      v7 = v22;
      goto LABEL_22;
    }
    v26 = v40;
    v25 = v41;
    v27 = v21;
    v28 = v42;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v27, v42);
    v29 = static Prompt.ImageAttachment.== infix(_:_:)();
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v26, v28);
    v30((char *)v24, v28);
    v7 = v22;
    if ((v29 & 1) == 0)
      goto LABEL_19;
LABEL_17:
    outlined destroy of Prompt.Turn.Segment((uint64_t)v7, type metadata accessor for Prompt.Turn.Segment);
    outlined destroy of Prompt.Turn.Segment(v48, type metadata accessor for Prompt.Turn.Segment);
    outlined destroy of Prompt.Turn.Segment((uint64_t)v16, type metadata accessor for Prompt.Turn.Segment);
    v18 += v19;
    if (!--v17)
      return 1;
  }
  v31 = v43;
  outlined init with copy of TokenGenerationError((uint64_t)v7, (uint64_t)v43, type metadata accessor for Prompt.Turn.Segment);
  v33 = *v31;
  v32 = v31[1];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v34 = *(_QWORD *)v21;
    v35 = *((_QWORD *)v21 + 1);
    if (v33 == v34 && v32 == v35)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {
LABEL_19:
        outlined destroy of Prompt.Turn.Segment((uint64_t)v7, type metadata accessor for Prompt.Turn.Segment);
        goto LABEL_23;
      }
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  outlined destroy of Locale?((uint64_t)v7, &demangling cache variable for type metadata for (Prompt.Turn.Segment, Prompt.Turn.Segment));
LABEL_23:
  outlined destroy of Prompt.Turn.Segment(v48, type metadata accessor for Prompt.Turn.Segment);
  outlined destroy of Prompt.Turn.Segment((uint64_t)v16, type metadata accessor for Prompt.Turn.Segment);
  return 0;
}

{
  uint64_t v2;
  unint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unint64_t *)(a2 + 56);
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v16 = v2;
      v6 = *(i - 1);
      v5 = *i;
      v7 = *(v3 - 1);
      v8 = *v3;
      OUTLINED_FUNCTION_90();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_290(v6);
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_189();
      outlined copy of FinishReason(v7, v8);
      v9 = OUTLINED_FUNCTION_261();
      specialized static Array<A>.== infix(_:_:)(v9, v10);
      if ((v11 & 1) == 0 || (OUTLINED_FUNCTION_237(), specialized static Array<A>.== infix(_:_:)(), (v12 & 1) == 0))
      {
LABEL_28:
        OUTLINED_FUNCTION_152();
        OUTLINED_FUNCTION_186();
        outlined consume of FinishReason(v7, v8);
        OUTLINED_FUNCTION_112();
        OUTLINED_FUNCTION_61();
        OUTLINED_FUNCTION_86_0(v6);
        return 0;
      }
      if (!v5)
        break;
      if (v5 == 1)
      {
        if (v8 != 1)
          goto LABEL_28;
        goto LABEL_15;
      }
      if (v5 == 2)
      {
        if (v8 != 2)
          goto LABEL_28;
LABEL_15:
        OUTLINED_FUNCTION_112();
        OUTLINED_FUNCTION_61();
LABEL_16:
        OUTLINED_FUNCTION_152();
        OUTLINED_FUNCTION_186();
        OUTLINED_FUNCTION_86_0(v6);
        goto LABEL_17;
      }
      if (v8 < 3)
        goto LABEL_28;
      if (v6 == v7 && v5 == v8)
      {
        OUTLINED_FUNCTION_152();
        OUTLINED_FUNCTION_186();
        OUTLINED_FUNCTION_86_0(v6);
        goto LABEL_16;
      }
      v15 = OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_186();
      outlined consume of FinishReason(v7, v8);
      OUTLINED_FUNCTION_112();
      OUTLINED_FUNCTION_61();
      OUTLINED_FUNCTION_86_0(v6);
      if ((v15 & 1) == 0)
        return 0;
LABEL_17:
      v3 += 4;
      v2 = v16 - 1;
      if (v16 == 1)
        return 1;
    }
    if (v8)
      goto LABEL_28;
    goto LABEL_15;
  }
  return 1;
}

{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *i;
  int v5;
  int v6;
  BOOL v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (unsigned __int8 *)(a2 + 48);
    for (i = (unsigned __int8 *)(a1 + 48); ; i += 24)
    {
      v5 = *i;
      v6 = *v3;
      v7 = *((_QWORD *)i - 2) == *((_QWORD *)v3 - 2) && *((_QWORD *)i - 1) == *((_QWORD *)v3 - 1);
      if (!v7 && (OUTLINED_FUNCTION_24_0() & 1) == 0)
        break;
      if (v5 == 2)
      {
        if (v6 != 2)
          return 0;
      }
      else if (v6 == 2 || ((v6 ^ v5) & 1) != 0)
      {
        return 0;
      }
      v3 += 24;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == *(_QWORD *)(a2 + 16))
  {
    if (!v6 || a1 == a2)
      return 1;
    v7 = a2 + 56;
    for (i = a1 + 56; ; i += 32)
    {
      OUTLINED_FUNCTION_214_0();
      v9 = v9 && v2 == v3;
      if (!v9 && (OUTLINED_FUNCTION_24_0() & 1) == 0)
        break;
      if (v4 >> 60 != 15)
      {
        if (v5 >> 60 != 15)
          __asm { BR              X8 }
LABEL_17:
        v11 = OUTLINED_FUNCTION_119_0();
        outlined consume of Data?(v11, v12);
        return 0;
      }
      if (v5 >> 60 != 15)
        goto LABEL_17;
      v7 += 32;
      if (!--v6)
        return 1;
    }
  }
  return 0;
}

void specialized static Array<A>.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_242(*MEMORY[0x24BDAC8D0]);
  if (v19 && v16 && v30 != v31)
  {
    v17 = 0;
    v26 = 0;
    do
    {
      v8 = OUTLINED_FUNCTION_56_0(v8, v9, v10, v11, v12, v13, v14, v15, v25, v26, v27, v28, v29, v30);
      v19 = v19 && v4 == v7;
      v20 = *(_QWORD *)(v18 + 88);
      v29 = *(_QWORD *)(v18 + 80);
      if (!v19)
      {
        v8 = OUTLINED_FUNCTION_24_0();
        if ((v8 & 1) == 0)
          break;
      }
      v27 = v7;
      v28 = v4;
      if (v6 != v3 || v36 != v35)
      {
        v8 = OUTLINED_FUNCTION_24_0();
        if ((v8 & 1) == 0)
          break;
      }
      v9 = v33;
      v11 = v34;
      if (v1 != v2 || v33 != v34)
      {
        v8 = OUTLINED_FUNCTION_24_0();
        if ((v8 & 1) == 0)
          break;
      }
      if (v5 >> 60 != 15)
      {
        if (v20 >> 60 != 15)
          __asm { BR              X8 }
LABEL_28:
        v23 = OUTLINED_FUNCTION_104_0(v8, v9, v10, v11, v12, v13, v14, v15, v25, v26, v7, v28, v29);
        outlined consume of Data?(v23, v24);
        break;
      }
      v4 = v0;
      if (v20 >> 60 != 15)
        goto LABEL_28;
      v17 += 64;
    }
    while (v32 != 1);
  }
  OUTLINED_FUNCTION_125_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  OUTLINED_FUNCTION_242(*MEMORY[0x24BDAC8D0]);
  if (v19 && v16 && v30 != v31)
  {
    v17 = 0;
    v26 = 0;
    do
    {
      v8 = OUTLINED_FUNCTION_56_0(v8, v9, v10, v11, v12, v13, v14, v15, v25, v26, v27, v28, v29, v30);
      v19 = v19 && v4 == v7;
      v20 = *(_QWORD *)(v18 + 88);
      v29 = *(_QWORD *)(v18 + 80);
      if (!v19)
      {
        v8 = OUTLINED_FUNCTION_24_0();
        if ((v8 & 1) == 0)
          break;
      }
      v27 = v7;
      v28 = v4;
      if (v6 != v3 || v36 != v35)
      {
        v8 = OUTLINED_FUNCTION_24_0();
        if ((v8 & 1) == 0)
          break;
      }
      v9 = v33;
      v11 = v34;
      if (v1 != v2 || v33 != v34)
      {
        v8 = OUTLINED_FUNCTION_24_0();
        if ((v8 & 1) == 0)
          break;
      }
      if (v5 >> 60 != 15)
      {
        if (v20 >> 60 != 15)
          __asm { BR              X8 }
LABEL_28:
        v23 = OUTLINED_FUNCTION_104_0(v8, v9, v10, v11, v12, v13, v14, v15, v25, v26, v7, v28, v29);
        outlined consume of Data?(v23, v24);
        break;
      }
      v4 = v0;
      if (v20 >> 60 != 15)
        goto LABEL_28;
      v17 += 64;
    }
    while (v32 != 1);
  }
  OUTLINED_FUNCTION_125_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_7_0();
  v1 = v0;
  v3 = v2;
  v19 = *MEMORY[0x24BDAC8D0];
  v16 = type metadata accessor for DocumentEnvelope(0);
  OUTLINED_FUNCTION_241();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_239();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v15 - v10;
  v12 = *(_QWORD *)(v3 + 16);
  if (v12 == *(_QWORD *)(v1 + 16) && v12 && v3 != v1)
  {
    v15[1] = v1;
    v15[2] = 0;
    v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = *(_QWORD *)(v9 + 72);
    v15[3] = v3;
    v15[4] = v14;
    v17 = v7;
    v18 = (uint64_t)v15 - v10;
    OUTLINED_FUNCTION_314(v3 + v13, (uint64_t)v15 - v10);
    OUTLINED_FUNCTION_314(v1 + v13, v7);
    if ((MEMORY[0x2495A5978](v11, v7) & 1) != 0)
      __asm { BR              X8 }
    OUTLINED_FUNCTION_93_0(v17);
    OUTLINED_FUNCTION_93_0(v18);
  }
  OUTLINED_FUNCTION_4_1();
}

{
  specialized static Array<A>.== infix(_:_:)();
}

{
  specialized static Array<A>.== infix(_:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  char v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);

  OUTLINED_FUNCTION_7_0();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v4(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v29 - v14;
  v16 = *(_QWORD *)(v9 + 16);
  if (v16 == *(_QWORD *)(v7 + 16) && v16 && v9 != v7)
  {
    v32 = v13;
    v33 = v12;
    v34 = v5;
    v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v29 = *(_QWORD *)(v12 + 72);
    v30 = v9;
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
    v18 = v16 - 1;
    v19 = v13;
    do
    {
      v31(v15, v9 + v17, v10);
      v20 = v7;
      OUTLINED_FUNCTION_280(v19, v7 + v17);
      v21 = v3;
      v22 = v3;
      v23 = v1;
      lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(v22, v34, v1);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      v25 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v25(v19, v10);
      v26 = OUTLINED_FUNCTION_233();
      ((void (*)(uint64_t))v25)(v26);
      v28 = v18-- != 0;
      if ((v24 & 1) == 0)
        break;
      v17 += v29;
      v1 = v23;
      v3 = v21;
      v7 = v20;
      v9 = v30;
    }
    while (v28);
  }
  OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v13;
  uint64_t v14;

  OUTLINED_FUNCTION_132_0();
  v2 = *(_QWORD *)(v0 + 16);
  if (v2 == *(_QWORD *)(v1 + 16) && v2 && v0 != v1)
  {
    v3 = (unint64_t *)(v1 + 56);
    v4 = (unint64_t *)(v0 + 56);
    do
    {
      v14 = v2;
      v5 = *(v4 - 3);
      v6 = *(v4 - 1);
      v7 = *v4;
      v8 = *(v3 - 3);
      v9 = *(v3 - 1);
      v10 = *v3;
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_11();
      OUTLINED_FUNCTION_290(v6);
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_77_0();
      outlined copy of FinishReason(v9, v10);
      if ((specialized static Array<A>.== infix(_:_:)(v5, v8) & 1) == 0
        || (specialized static Array<A>.== infix(_:_:)(), (v11 & 1) == 0))
      {
LABEL_28:
        OUTLINED_FUNCTION_37_0();
        OUTLINED_FUNCTION_112();
        outlined consume of FinishReason(v9, v10);
        OUTLINED_FUNCTION_186();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_81_0();
        break;
      }
      if (v7)
      {
        if (v7 == 1)
        {
          if (v10 != 1)
            goto LABEL_27;
          OUTLINED_FUNCTION_264(v6);
          OUTLINED_FUNCTION_264(v9);
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_112();
          OUTLINED_FUNCTION_264(v9);
        }
        else if (v7 == 2)
        {
          if (v10 != 2)
            goto LABEL_27;
          OUTLINED_FUNCTION_265(v6);
          OUTLINED_FUNCTION_265(v9);
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_112();
          OUTLINED_FUNCTION_265(v9);
        }
        else
        {
          if (v10 < 3)
          {
LABEL_27:
            OUTLINED_FUNCTION_91_0();
            goto LABEL_28;
          }
          if (v6 != v9 || v7 != v10)
          {
            v13 = OUTLINED_FUNCTION_24_0();
            OUTLINED_FUNCTION_91_0();
            OUTLINED_FUNCTION_37_0();
            OUTLINED_FUNCTION_112();
            outlined consume of FinishReason(v9, v10);
            OUTLINED_FUNCTION_186();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_81_0();
            if ((v13 & 1) == 0)
              break;
            goto LABEL_25;
          }
          outlined copy of FinishReason(v6, v7);
          OUTLINED_FUNCTION_290(v6);
          OUTLINED_FUNCTION_81_0();
          OUTLINED_FUNCTION_81_0();
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_112();
          OUTLINED_FUNCTION_81_0();
        }
      }
      else
      {
        if (v10)
          goto LABEL_27;
        OUTLINED_FUNCTION_273(v6);
        OUTLINED_FUNCTION_273(v9);
        OUTLINED_FUNCTION_37_0();
        OUTLINED_FUNCTION_112();
        OUTLINED_FUNCTION_273(v9);
      }
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_112();
      OUTLINED_FUNCTION_81_0();
LABEL_25:
      v3 += 4;
      v4 += 4;
      v2 = v14 - 1;
    }
    while (v14 != 1);
  }
  OUTLINED_FUNCTION_128_0();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  v27 = OUTLINED_FUNCTION_253();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_144_0();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ToolDescriptionEnvelope.ToolTypeEnvelope, ToolDescriptionEnvelope.ToolTypeEnvelope));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_68_0();
  type metadata accessor for ToolDescriptionEnvelope(0);
  OUTLINED_FUNCTION_241();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_239();
  v13 = v11 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v25 - v16;
  v29 = v0;
  v30 = v4;
  v18 = *(_QWORD *)(v0 + 16);
  if (v18 != *(_QWORD *)(v4 + 16) || !v18 || v29 == v30)
    goto LABEL_27;
  v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v26 = *(_QWORD *)(v15 + 72);
  while (1)
  {
    OUTLINED_FUNCTION_79(v29 + v19, (uint64_t)v17);
    OUTLINED_FUNCTION_79(v30 + v19, v13);
    v20 = v2 + *(int *)(v28 + 48);
    OUTLINED_FUNCTION_184_0((uint64_t)v17, v2);
    OUTLINED_FUNCTION_184_0(v13, v20);
    if (__swift_getEnumTagSinglePayload(v2, 1, v27) != 1)
      break;
    OUTLINED_FUNCTION_121_0(v20);
    if (!v23)
      goto LABEL_25;
LABEL_21:
    OUTLINED_FUNCTION_252(v2);
    outlined destroy of Prompt.Turn.Segment(v13, type metadata accessor for ToolDescriptionEnvelope);
    outlined destroy of Prompt.Turn.Segment((uint64_t)v17, type metadata accessor for ToolDescriptionEnvelope);
    v19 += v26;
    if (!--v18)
      goto LABEL_27;
  }
  v21 = OUTLINED_FUNCTION_193();
  OUTLINED_FUNCTION_184_0(v21, v22);
  OUTLINED_FUNCTION_121_0(v20);
  if (!v23)
  {
    outlined init with take of TokenGenerationError(v20, (uint64_t)v1, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    v23 = *v8 == *v1 && v8[1] == v1[1];
    if (!v23 && (OUTLINED_FUNCTION_24_0() & 1) == 0
      || (v8[2] == v1[2] ? (v24 = v8[3] == v1[3]) : (v24 = 0),
          !v24 && (OUTLINED_FUNCTION_24_0() & 1) == 0 || (static GenerationSchema.== infix(_:_:)() & 1) == 0))
    {
      OUTLINED_FUNCTION_93_0((uint64_t)v1);
      OUTLINED_FUNCTION_93_0((uint64_t)v8);
      outlined destroy of Prompt.Turn.Segment(v2, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      goto LABEL_26;
    }
    OUTLINED_FUNCTION_252((uint64_t)v1);
    OUTLINED_FUNCTION_252((uint64_t)v8);
    goto LABEL_21;
  }
  outlined destroy of Prompt.Turn.Segment((uint64_t)v8, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
LABEL_25:
  outlined destroy of Locale?(v2, &demangling cache variable for type metadata for (ToolDescriptionEnvelope.ToolTypeEnvelope, ToolDescriptionEnvelope.ToolTypeEnvelope));
LABEL_26:
  OUTLINED_FUNCTION_93_0(v13);
  OUTLINED_FUNCTION_93_0((uint64_t)v17);
LABEL_27:
  OUTLINED_FUNCTION_4_1();
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6 == *(_QWORD *)(a2 + 16) && v6 && a1 != a2)
  {
    v7 = a2 + 56;
    v8 = a1 + 56;
    do
    {
      OUTLINED_FUNCTION_214_0();
      v9 = v9 && v2 == v3;
      if (!v9 && (OUTLINED_FUNCTION_24_0() & 1) == 0)
        break;
      if (v4 >> 60 != 15)
      {
        if (v5 >> 60 != 15)
          __asm { BR              X8 }
LABEL_17:
        v10 = OUTLINED_FUNCTION_119_0();
        outlined consume of Data?(v10, v11);
        break;
      }
      if (v5 >> 60 != 15)
        goto LABEL_17;
      v8 += 32;
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  OUTLINED_FUNCTION_146_0();
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16) && v2 && a1 != a2 && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
    __asm { BR              X8 }
  OUTLINED_FUNCTION_146_0();
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return OUTLINED_FUNCTION_179_0(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[2];
  if (v2 == a2[2])
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a1[6];
    v4 = a1[7];
    v14 = a1[9];
    v5 = a2[6];
    v6 = a2[7];
    v7 = a1[4] == a2[4] && a1[5] == a2[5];
    if (v7
      || (v13 = a2[7],
          v8 = a1[7],
          v9 = a2[6],
          v10 = _stringCompareWithSmolCheck(_:_:expecting:)(),
          v5 = v9,
          v4 = v8,
          v6 = v13,
          (v10 & 1) != 0))
    {
      if (v4)
      {
        if (!v6)
          return 0;
        v11 = v3 == v5 && v4 == v6;
        if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          return 0;
LABEL_18:
        __asm { BR              X8 }
      }
      if (!v6)
        goto LABEL_18;
    }
  }
  return 0;
}

void specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  BOOL v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;

  v2 = a1[2];
  if (v2 == a2[2]
    && v2
    && a1 != a2
    && (a1[4] == a2[4] ? (v5 = a1[5] == a2[5]) : (v5 = 0),
        (v5 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v6 & 1) != 0)) && v2 != 1))
  {
    v7 = a2 + 7;
    v8 = a1 + 7;
    v9 = 1;
    while (v9 < v2)
    {
      v10 = *(v8 - 1) == *(v7 - 1) && *v8 == *v7;
      if (v10 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
      {
        ++v9;
        v7 += 2;
        v8 += 2;
        if (v2 != v9)
          continue;
      }
      goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
LABEL_18:
    OUTLINED_FUNCTION_97();
  }
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

void specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  BOOL v41;

  OUTLINED_FUNCTION_7_0();
  a19 = v20;
  a20 = v21;
  v23 = v22;
  v25 = v24;
  type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  OUTLINED_FUNCTION_241();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_239();
  v29 = v27 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&a9 - v32;
  v34 = *(_QWORD *)(v25 + 16);
  if (v34 == *(_QWORD *)(v23 + 16) && v34 && v25 != v23)
  {
    v35 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    v36 = *(_QWORD *)(v31 + 72);
    v37 = v34 - 1;
    do
    {
      outlined init with copy of TokenGenerationError(v25 + v35, (uint64_t)v33, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      outlined init with copy of TokenGenerationError(v23 + v35, v29, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      OUTLINED_FUNCTION_186_0();
      static PromptEnvelope.DelimiterEnvelope.== infix(_:_:)();
      v39 = v38;
      outlined destroy of Prompt.Turn.Segment(v29, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      outlined destroy of Prompt.Turn.Segment((uint64_t)v33, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      v41 = v37-- != 0;
      if ((v39 & 1) == 0)
        break;
      v35 += v36;
    }
    while (v41);
  }
  OUTLINED_FUNCTION_4_1();
}

void Prompt.Turn.hashValue.getter()
{
  Prompt.Turn.Segment.hashValue.getter((void (*)(_BYTE *))Prompt.Turn.hash(into:));
}

void Prompt.Turn.Segment.hashValue.getter(void (*a1)(_BYTE *))
{
  _BYTE v2[72];

  OUTLINED_FUNCTION_2_1();
  a1(v2);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Turn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Turn.Segment(a1, a2, a3, (void (*)(_BYTE *))Prompt.Turn.hash(into:));
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.Turn.Segment(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *))
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  a4(v5);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void Prompt.ToolCall.id.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void Prompt.ToolCall.id.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*Prompt.ToolCall.id.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.ToolCall.kind.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[3];
  v3 = v1[4];
  v4 = v1[5];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 Prompt.ToolCall.kind.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v5 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_213();
  *(_OWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  OUTLINED_FUNCTION_218_0();
  return result;
}

uint64_t (*Prompt.ToolCall.kind.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void Prompt.ToolCall._userInfo.getter()
{
  uint64_t v0;
  unint64_t v1;

  v0 = OUTLINED_FUNCTION_90_0();
  outlined copy of Data?(v0, v1);
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void Prompt.ToolCall._userInfo.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  outlined consume of Data?(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*Prompt.ToolCall._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

double Prompt.ToolCall.init(id:kind:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *a3;
  v5 = *((_QWORD *)a3 + 2);
  v6 = *((_QWORD *)a3 + 3);
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_OWORD *)(a4 + 16) = v4;
  *(_QWORD *)(a4 + 32) = v5;
  *(_QWORD *)(a4 + 40) = v6;
  result = 0.0;
  *(_OWORD *)(a4 + 48) = xmmword_248BBF000;
  return result;
}

void Prompt.ToolCall.init(id:text:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];

  OUTLINED_FUNCTION_7_0();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v6 = type metadata accessor for String.Encoding();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  v10 = String.data(using:allowLossyConversion:)();
  v12 = v11;
  OUTLINED_FUNCTION_61();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v12 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data?(v10, v12);
    OUTLINED_FUNCTION_222();
    v13 = v17[2];
    v14 = v17[3];
    v15 = v17[4];
    v16 = v17[5];
    *(_QWORD *)v5 = v3;
    *(_QWORD *)(v5 + 8) = v1;
    *(_QWORD *)(v5 + 16) = v13;
    *(_QWORD *)(v5 + 24) = v14;
    *(_QWORD *)(v5 + 32) = v15;
    *(_QWORD *)(v5 + 40) = v16;
    *(_OWORD *)(v5 + 48) = xmmword_248BBF000;
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_10_0();
    outlined copy of Data?(0, 0xF000000000000000);
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_310();
    OUTLINED_FUNCTION_4_1();
  }
}

uint64_t Prompt.ToolCall.Kind.hash(into:)()
{
  OUTLINED_FUNCTION_155_0(0);
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_194();
  OUTLINED_FUNCTION_120_0();
  return OUTLINED_FUNCTION_124_0();
}

void static Prompt.ToolCall.Kind.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  OUTLINED_FUNCTION_123_0(a1);
  v7 = v7 && v5 == v6;
  if ((v7 || (OUTLINED_FUNCTION_24_0() & 1) != 0) && (v1 != v3 || v2 != v4))
    OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_97();
}

Swift::Int Prompt.ToolCall.Kind.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_176_0();
  OUTLINED_FUNCTION_112();
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ToolCall.Kind()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t (*Prompt.ToolCall.Function.name.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t (*Prompt.ToolCall.Function.arguments.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.ToolCall.Function.Envelope.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t static Prompt.ToolCall.Function.Envelope.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12;
  char v13;
  uint64_t result;

  v12 = a1 == a5 && a2 == a6;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

BOOL static Prompt.ToolCall.Function.Envelope.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Prompt.ToolCall.Function.Envelope.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t Prompt.ToolCall.Function.Envelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656D75677261 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t Prompt.ToolCall.Function.Envelope.CodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int Prompt.ToolCall.Function.Envelope.CodingKeys.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t Prompt.ToolCall.Function.Envelope.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t Prompt.ToolCall.Function.Envelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E656D75677261;
  else
    return 1701667182;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.ToolCall.Function.Envelope.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Prompt.ToolCall.Function.Envelope.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  char *v0;

  return Prompt.ToolCall.Function.Envelope.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Prompt.ToolCall.Function.Envelope.CodingKeys(uint64_t a1)
{
  char *v1;

  Prompt.ToolCall.Function.Envelope.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  char *v0;

  return Prompt.ToolCall.Function.Envelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Prompt.ToolCall.Function.Envelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Prompt.ToolCall.Function.Envelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  return Prompt.ToolCall.Function.Envelope.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Prompt.ToolCall.Function.Envelope.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Prompt.ToolCall.Function.Envelope.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Prompt.ToolCall.Function.Envelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v12[0] = a4;
  v12[1] = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Prompt.ToolCall.Function.Envelope.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Prompt.ToolCall.Function.Envelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Prompt.ToolCall.Function.Envelope.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Prompt.ToolCall.Function.Envelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    v11 = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Prompt.ToolCall.Function.Envelope()
{
  return Prompt.ToolCall.Function.Envelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Prompt.ToolCall.Function.Envelope()
{
  return Prompt.ToolCall.Function.Envelope.hash(into:)();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Prompt.ToolCall.Function.Envelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = Prompt.ToolCall.Function.Envelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Prompt.ToolCall.Function.Envelope(_QWORD *a1)
{
  uint64_t *v1;

  return Prompt.ToolCall.Function.Envelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Prompt.ToolCall.Function.Envelope(uint64_t *a1, uint64_t *a2)
{
  return static Prompt.ToolCall.Function.Envelope.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void Prompt.ToolCall.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  OUTLINED_FUNCTION_7_0();
  v1 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_120_0();
  OUTLINED_FUNCTION_152();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_289();
  OUTLINED_FUNCTION_199_0();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_177_0();
  OUTLINED_FUNCTION_46_0();
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    OUTLINED_FUNCTION_4_1();
  }
  else
  {
    Hasher._combine(_:)(1u);
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_137_0();
    Data.hash(into:)();
    v2 = OUTLINED_FUNCTION_195_0();
    outlined consume of Data?(v2, v3);
  }
}

void static Prompt.ToolCall.== infix(_:_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  OUTLINED_FUNCTION_132_0();
  v2 = v0[2];
  v4 = v0[3];
  v3 = v0[4];
  v5 = v0[5];
  v6 = v0[7];
  v7 = v1[2];
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[5];
  v11 = *v0 == *v1 && v0[1] == v1[1];
  v12 = v1[7];
  if (v11 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v13 & 1) != 0))
  {
    v14 = v2 == v7 && v4 == v8;
    if (v14 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v15 & 1) != 0))
    {
      v16 = v3 == v9 && v5 == v10;
      if (v16 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v17 & 1) != 0))
      {
        if (v6 >> 60 == 15)
        {
          if (v12 >> 60 == 15)
            goto LABEL_22;
        }
        else if (v12 >> 60 != 15)
        {
          v26 = OUTLINED_FUNCTION_137_0();
          outlined copy of Data?(v26, v27);
          v28 = OUTLINED_FUNCTION_236();
          outlined copy of Data?(v28, v29);
          v30 = OUTLINED_FUNCTION_137_0();
          MEMORY[0x2495A59A8](v30);
          v31 = OUTLINED_FUNCTION_236();
          outlined consume of Data?(v31, v32);
          v33 = OUTLINED_FUNCTION_137_0();
          outlined consume of Data?(v33, v34);
          goto LABEL_22;
        }
        v18 = OUTLINED_FUNCTION_260();
        outlined copy of Data?(v18, v19);
        v20 = OUTLINED_FUNCTION_186_0();
        outlined copy of Data?(v20, v21);
        v22 = OUTLINED_FUNCTION_260();
        outlined consume of Data?(v22, v23);
        v24 = OUTLINED_FUNCTION_186_0();
        outlined consume of Data?(v24, v25);
      }
    }
  }
LABEL_22:
  OUTLINED_FUNCTION_128_0();
}

Swift::Int Prompt.ToolCall.hashValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_176_0();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_198_0();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_72();
  String.hash(into:)();
  OUTLINED_FUNCTION_227();
  if (v1 >> 60 == 15)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_305();
    Data.hash(into:)();
    v2 = OUTLINED_FUNCTION_195_0();
    outlined consume of Data?(v2, v3);
  }
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ToolCall()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
  return Hasher._finalize()();
}

void Prompt.ToolCallResult.toolCallID.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void Prompt.ToolCallResult.toolCallID.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*Prompt.ToolCallResult.toolCallID.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void Prompt.ToolCallResult.content.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void Prompt.ToolCallResult.content.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*Prompt.ToolCallResult.content.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Prompt.ToolCallResult.init(toolCallID:content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t Prompt.ToolCall.Function.hash(into:)()
{
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_194();
  String.hash(into:)();
  return OUTLINED_FUNCTION_124_0();
}

void static Prompt.ToolCall.Function.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  BOOL v9;

  OUTLINED_FUNCTION_123_0(a1);
  v7 = v7 && v5 == v6;
  if ((v7 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v8 & 1) != 0))
    && (v1 == v3 ? (v9 = v2 == v4) : (v9 = 0), !v9))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    OUTLINED_FUNCTION_97();
  }
}

void Prompt.ToolCall.Function.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_229();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Prompt.ToolCall.Function.Envelope()
{
  Hasher.init(_seed:)();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_229();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

void static Prompt.transcript(turns:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);
  _QWORD v41[10];
  int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  OUTLINED_FUNCTION_7_0();
  v3 = v2;
  type metadata accessor for Prompt.StringInterpolation();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_118_0();
  v5 = OUTLINED_FUNCTION_247();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_89_0();
  v7 = type metadata accessor for Prompt();
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_178();
  v56 = v9;
  v59 = OUTLINED_FUNCTION_248();
  v41[3] = *(_QWORD *)(v59 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_178();
  v60 = v11;
  v12 = type metadata accessor for Prompt.SpecialToken();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v41 - v18;
  v49 = OUTLINED_FUNCTION_70_0();
  v61 = *(_QWORD *)(v49 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_178();
  v51 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)v41 - v24;
  OUTLINED_FUNCTION_312();
  Prompt.init(stringLiteral:)();
  v26 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_171_0((uint64_t)v25, v27, v28, v26);
  v48 = *(_QWORD *)(v3 + 16);
  if (v48)
  {
    v43 = v25;
    OUTLINED_FUNCTION_117_0();
    v47 = v3 + v29;
    v46 = *(_QWORD *)(v30 + 72);
    v41[0] = v3;
    OUTLINED_FUNCTION_90();
    v42 = 0;
    v31 = 0;
    v45 = v13;
    v52 = 0x8000000248BCAF70;
    v41[5] = v0;
    v54 = v19;
    v32 = v49;
    v33 = v51;
    v41[2] = v1;
    v41[1] = v5;
    v44 = v6;
    v53 = v12;
    do
    {
      v50 = v31;
      OUTLINED_FUNCTION_79(v47 + v46 * v31, v33);
      if (*(_BYTE *)(v33 + *(int *)(v32 + 28)) != 1)
        __asm { BR              X9 }
      static Prompt.SpecialToken.Chat.defaultInstructions(locale:)();
      OUTLINED_FUNCTION_83_0();
      v34 = v5;
      v35 = v12;
      v36 = *(void (**)(char *, uint64_t))(v45 + 8);
      v36(v19, v35);
      v33 = v51;
      static Prompt.SpecialToken.Chat.turnEnd(locale:)();
      OUTLINED_FUNCTION_83_0();
      v55 = v36;
      v36(v19, v35);
      v12 = v35;
      v5 = v34;
      v37 = OUTLINED_FUNCTION_195_0();
      v39 = v38;
      outlined destroy of Prompt.Turn.Segment(v37, v40);
      v31 = v39;
    }
    while (v39 != v48);
    OUTLINED_FUNCTION_114_0();
    v25 = v43;
    if ((v42 & 1) != 0)
    {
      static Prompt.SpecialToken.Chat.response(locale:)();
      OUTLINED_FUNCTION_83_0();
      OUTLINED_FUNCTION_138_0();
    }
  }
  outlined destroy of Locale?((uint64_t)v25, &demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_4_1();
}

void Prompt.turns()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  int v93;
  unsigned __int8 v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  BOOL v98;
  unsigned int v99;
  unsigned __int8 *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  __int128 v118;
  unsigned __int8 *v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t);
  int v146;
  uint64_t v147;
  void (*v148)(uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t, uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t (*v155)(uint64_t, uint64_t, uint64_t);
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _BOOL8 v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  _BYTE v217[32];
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  __int128 v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BOOL4 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  uint64_t v249[2];
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  uint64_t v254;
  void (*v255)(uint64_t, uint64_t, uint64_t);
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;

  OUTLINED_FUNCTION_7_0();
  a19 = v24;
  a20 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_238();
  OUTLINED_FUNCTION_170_0(v28);
  v29 = type metadata accessor for Prompt.SpecialToken();
  OUTLINED_FUNCTION_222_0(v29, (uint64_t)&v272);
  v244 = v30;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_178();
  OUTLINED_FUNCTION_170_0(v32);
  v33 = type metadata accessor for Prompt.ImageAttachment();
  OUTLINED_FUNCTION_222_0(v33, (uint64_t)&v273);
  v250 = v34;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_178();
  OUTLINED_FUNCTION_170_0(v36);
  v37 = type metadata accessor for Prompt.AttachmentContent();
  OUTLINED_FUNCTION_222_0(v37, (uint64_t)&a14);
  v262 = v38;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_238();
  v261 = v41;
  v42 = OUTLINED_FUNCTION_248();
  OUTLINED_FUNCTION_222_0(v42, (uint64_t)&a12);
  v254 = v43;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_238();
  OUTLINED_FUNCTION_170_0(v50);
  v51 = type metadata accessor for Prompt.Attachment();
  v52 = *(_QWORD *)(v51 - 8);
  v263 = v51;
  v264 = v52;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v54);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v57);
  OUTLINED_FUNCTION_238();
  v267 = v58;
  v59 = OUTLINED_FUNCTION_70_0();
  OUTLINED_FUNCTION_222_0(v59, (uint64_t)&v246);
  v221 = v60;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v61);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v62);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v63);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v64);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v65);
  OUTLINED_FUNCTION_238();
  v226 = v66;
  v224 = 0;
  v269 = type metadata accessor for Prompt.Delimiter();
  v67 = *(_QWORD *)(v269 - 8);
  MEMORY[0x24BDAC7A8](v269);
  OUTLINED_FUNCTION_31_0();
  v270 = v68;
  MEMORY[0x24BDAC7A8](v69);
  OUTLINED_FUNCTION_78_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v70);
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v71);
  OUTLINED_FUNCTION_78_0();
  v266 = v72;
  v74 = MEMORY[0x24BDAC7A8](v73);
  v76 = &v217[-v75];
  MEMORY[0x24BDAC7A8](v74);
  v78 = &v217[-v77];
  v258 = v20;
  v79 = *(_QWORD *)(Prompt.delimiters.getter() + 16);
  v260 = v67;
  if (v79)
  {
    OUTLINED_FUNCTION_117_0();
    v257 = v80;
    v22 = (char *)(v80 + v81);
    v82 = *(_QWORD *)(v67 + 72);
    v268 = MEMORY[0x24BEE4AF8];
    v23 = 24;
    do
    {
      OUTLINED_FUNCTION_280((uint64_t)v78, (uint64_t)v22);
      v83 = OUTLINED_FUNCTION_195_0();
      OUTLINED_FUNCTION_280(v83, v84);
      init(delimiter:) in TurnDelimiter #1 in Prompt.turns()((uint64_t)v76, &v271);
      OUTLINED_FUNCTION_223_0(v260);
      v21 = v271;
      if ((v271 & 0xFF00) != 0x200)
      {
        v265 = v272;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_116_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v268 = v89;
        }
        v86 = *(_QWORD *)(v268 + 16);
        v85 = *(_QWORD *)(v268 + 24);
        if (v86 >= v85 >> 1)
        {
          OUTLINED_FUNCTION_277(v85);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v268 = v90;
        }
        v87 = v268;
        *(_QWORD *)(v268 + 16) = v86 + 1;
        v88 = v87 + 24 * v86;
        *(_BYTE *)(v88 + 32) = v21;
        *(_BYTE *)(v88 + 33) = BYTE1(v21) & 1;
        *(_BYTE *)(v88 + 34) = BYTE2(v21) & 1;
        *(_OWORD *)(v88 + 40) = v265;
      }
      v22 += v82;
      --v79;
    }
    while (v79);
    OUTLINED_FUNCTION_114_0();
  }
  else
  {
    swift_bridgeObjectRelease();
    v268 = MEMORY[0x24BEE4AF8];
  }
  v91 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v265 = *(_QWORD *)(v268 + 16);
  if ((_QWORD)v265)
  {
    v92 = 0;
    v22 = 0;
    v21 = 0;
    v93 = *(unsigned __int8 *)(v268 + 32);
    v94 = *(_BYTE *)(v268 + 34);
    v96 = *(char **)(v268 + 40);
    v95 = *(_QWORD *)(v268 + 48);
    v257 = v268 + 32;
    LODWORD(v23) = 2;
    v97 = 1;
    while (1)
    {
      v98 = v93 != 4 && v23 == 2;
      v99 = v94 & 1;
      if (v98)
      {
        v92 = v93;
        v22 = v96;
        v21 = v95;
        v23 = v99;
      }
      else
      {
        v23 = v23;
      }
      if (v97 == (_QWORD)v265)
        break;
      v100 = (unsigned __int8 *)(v257 + 24 * v97);
      while (1)
      {
        v93 = *v100;
        v94 = v100[2];
        v96 = (char *)*((_QWORD *)v100 + 1);
        v95 = *((_QWORD *)v100 + 2);
        ++v97;
        if (v23 == 2 || v100[1] != 1)
          break;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_116_0();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v91 = v106;
        }
        v102 = *(_QWORD *)(v91 + 16);
        v101 = *(_QWORD *)(v91 + 24);
        v103 = v91;
        if (v102 >= v101 >> 1)
        {
          OUTLINED_FUNCTION_278(v101);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          v103 = v107;
        }
        *(_QWORD *)(v103 + 16) = v102 + 1;
        v91 = v103;
        v104 = v103 + 48 * v102;
        *(_BYTE *)(v104 + 32) = v92;
        v100 += 24;
        v105 = v23 & 1;
        *(_QWORD *)(v104 + 40) = v22;
        *(_QWORD *)(v104 + 48) = v96;
        v23 = 2;
        *(_QWORD *)(v104 + 56) = v21;
        *(_QWORD *)(v104 + 64) = v95;
        *(_BYTE *)(v104 + 72) = v105;
        v21 = 0;
        v22 = 0;
        v92 = 0;
        if ((_QWORD)v265 == v97)
          goto LABEL_29;
      }
    }
  }
LABEL_29:
  swift_bridgeObjectRelease();
  v227 = *(_QWORD *)(v91 + 16);
  if (!v227)
  {
    OUTLINED_FUNCTION_296();
    v111 = v91;
    v91 = String.count.getter();
    OUTLINED_FUNCTION_61();
    v112 = v111;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v109 = v262;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_133;
    goto LABEL_32;
  }
  OUTLINED_FUNCTION_165_0();
  v109 = v262;
  v108 = v263;
  v110 = v264;
  OUTLINED_FUNCTION_226();
LABEL_35:
  v225 = v91 + 32;
  v247 = *MEMORY[0x24BEB8898];
  OUTLINED_FUNCTION_40_0();
  v117 = 0;
  *(_QWORD *)&v118 = 136315138;
  v230 = v118;
  v229 = MEMORY[0x24BEE4AD8] + 8;
  v231 = MEMORY[0x24BEE4AF8];
  v223 = v91;
  do
  {
    if (v117 >= *(_QWORD *)(v91 + 16))
      goto LABEL_131;
    v228 = v117;
    v119 = (unsigned __int8 *)(v225 + 48 * v117);
    if (v119[40] != 1)
    {
      v242 = *v119;
      v241 = *((_QWORD *)v119 + 1);
      v240 = (char *)*((_QWORD *)v119 + 2);
      v125 = *((_QWORD *)v119 + 3);
      v124 = (void (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v119 + 4);
      v268 = v125;
      v255 = v124;
      v126 = Prompt.attachments.getter();
      v127 = MEMORY[0x24BEE4AF8];
      v271 = MEMORY[0x24BEE4AF8];
      *(_QWORD *)&v265 = *(_QWORD *)(v126 + 16);
      if (!(_QWORD)v265)
        goto LABEL_59;
      v21 = 0;
      while (1)
      {
        if (v21 >= *(_QWORD *)(v126 + 16))
        {
          __break(1u);
LABEL_127:
          __break(1u);
          goto LABEL_128;
        }
        OUTLINED_FUNCTION_263();
        v129 = v128;
        v130 = v267;
        OUTLINED_FUNCTION_250(v267, (uint64_t)&v22[v128 + v109 * v21]);
        v91 = v110;
        v131 = Prompt.Attachment.priority.getter();
        v23 = v252;
        OUTLINED_FUNCTION_250(v252, v130);
        if (v268 >= v131)
        {
          OUTLINED_FUNCTION_163_0(v23);
          v110 = v91;
        }
        else
        {
          v132 = Prompt.Attachment.priority.getter();
          OUTLINED_FUNCTION_163_0(v23);
          v110 = v91;
          if (v132 < (uint64_t)v255)
          {
            OUTLINED_FUNCTION_249(v234, v267);
            if ((OUTLINED_FUNCTION_276() & 1) == 0)
            {
              OUTLINED_FUNCTION_240();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v132 = v271;
            }
            v23 = *(_QWORD *)(v132 + 16);
            v133 = *(_QWORD *)(v132 + 24);
            if (v23 >= v133 >> 1)
            {
              OUTLINED_FUNCTION_225(v133);
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v132 = v271;
            }
            *(_QWORD *)(v132 + 16) = v23 + 1;
            v108 = v263;
            OUTLINED_FUNCTION_249((uint64_t)&v22[v132 + v23 * v109], v234);
            v271 = v132;
            v110 = v264;
            goto LABEL_57;
          }
        }
        OUTLINED_FUNCTION_163_0(v267);
LABEL_57:
        OUTLINED_FUNCTION_226();
        ++v21;
        v109 = v262;
        v126 = v129;
        if ((_QWORD)v265 == v21)
        {
          v127 = v271;
          OUTLINED_FUNCTION_165_0();
LABEL_59:
          swift_bridgeObjectRelease();
          v271 = v127;
          OUTLINED_FUNCTION_172();
          v134 = v224;
          specialized MutableCollection<>.sort(by:)(&v271);
          if (v134)
          {
            swift_release();
            __break(1u);
            JUMPOUT(0x248B1F418);
          }
          v224 = 0;
          OUTLINED_FUNCTION_222();
          v135 = *(_QWORD *)(v271 + 16);
          if (v135)
          {
            OUTLINED_FUNCTION_117_0();
            v136 = v108;
            v239 = v137;
            v23 = v137 + v138;
            *(_QWORD *)&v265 = *(_QWORD *)(v139 + 72);
            v22 = *(char **)(v139 + 16);
            v140 = v241;
            v141 = MEMORY[0x24BEE4AF8];
            v142 = v235;
            v253 = v22;
            while (1)
            {
              ((void (*)(uint64_t, unint64_t, uint64_t))v22)(v142, v23, v136);
              if (v140 != OUTLINED_FUNCTION_271())
                break;
              Prompt.Attachment.content.getter();
              v144 = OUTLINED_FUNCTION_194();
              v146 = v145(v144);
              if (v146 == v247)
              {
                v147 = OUTLINED_FUNCTION_194();
                v148(v147);
                v149 = OUTLINED_FUNCTION_137_0();
                OUTLINED_FUNCTION_275(v149, v150, v151);
                v152 = v248;
                v153 = OUTLINED_FUNCTION_210_0();
                OUTLINED_FUNCTION_275(v153, v154, v155);
                swift_storeEnumTagMultiPayload();
                outlined init with copy of TokenGenerationError(v152, v249[0], type metadata accessor for Prompt.Turn.Segment);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  OUTLINED_FUNCTION_134_0(0, *(_QWORD *)(v141 + 16) + 1);
                  v141 = v165;
                }
                v157 = *(_QWORD *)(v141 + 16);
                v156 = *(_QWORD *)(v141 + 24);
                if (v157 >= v156 >> 1)
                {
                  OUTLINED_FUNCTION_134_0(v156 > 1, v157 + 1);
                  v141 = v166;
                }
                OUTLINED_FUNCTION_110_0();
                OUTLINED_FUNCTION_224(v249[0], v158);
                OUTLINED_FUNCTION_93_0(v248);
                (*(void (**)(uint64_t, uint64_t))(v250 + 8))(v249[1], v251);
              }
              else
              {
                v257 = v141;
                if (one-time initialization token for prompt != -1)
                  swift_once();
                v159 = OUTLINED_FUNCTION_200();
                __swift_project_value_buffer(v159, (uint64_t)static Log.prompt);
                ((void (*)(uint64_t, uint64_t, uint64_t))v22)(v233, v142, v263);
                v160 = Logger.logObject.getter();
                v161 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v160, v161))
                {
                  v162 = OUTLINED_FUNCTION_2();
                  v271 = OUTLINED_FUNCTION_2();
                  *(_DWORD *)v162 = v230;
                  Prompt.Attachment.content.getter();
                  OUTLINED_FUNCTION_165_0();
                  v163 = String.init<A>(describing:)();
                  *(_QWORD *)(v162 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v164, &v271);
                  OUTLINED_FUNCTION_61();
                  OUTLINED_FUNCTION_197_0();
                  OUTLINED_FUNCTION_283(&dword_248B08000, v160, v161, "Unknown prompt attachment type: %s");
                  swift_arrayDestroy();
                  OUTLINED_FUNCTION_0_0();
                }
                OUTLINED_FUNCTION_197_0();

                OUTLINED_FUNCTION_165_0();
                v141 = v257;
                v109 = v262;
                (*(void (**)(uint64_t, unint64_t))(v262 + 8))(v261, v21);
                v142 = v235;
              }
              v140 = OUTLINED_FUNCTION_271();
              v136 = v263;
              OUTLINED_FUNCTION_223_0(v264);
              v23 += v265;
              if (!--v135)
              {
                v257 = v141;
                swift_release();
                OUTLINED_FUNCTION_226();
                goto LABEL_79;
              }
            }
            OUTLINED_FUNCTION_143_0();
            OUTLINED_FUNCTION_281();
            OUTLINED_FUNCTION_111_0();
            v91 = OUTLINED_FUNCTION_262();
            OUTLINED_FUNCTION_39_0();
            Prompt.string.getter();
            OUTLINED_FUNCTION_127_0();
            OUTLINED_FUNCTION_111_0();
            OUTLINED_FUNCTION_271();
            v143 = OUTLINED_FUNCTION_95_0();
            OUTLINED_FUNCTION_112();
            OUTLINED_FUNCTION_154_0();
            if (v143 >> 14 >= v91 >> 14)
            {
              OUTLINED_FUNCTION_73_0();
              OUTLINED_FUNCTION_61();
              OUTLINED_FUNCTION_105_0();
            }
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            OUTLINED_FUNCTION_116_0();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            v112 = v215;
LABEL_32:
            v115 = *(_QWORD *)(v112 + 16);
            v114 = *(_QWORD *)(v112 + 24);
            v227 = v115 + 1;
            v21 = v256;
            v108 = v263;
            v110 = v264;
            v23 = v259;
            if (v115 >= v114 >> 1)
            {
              OUTLINED_FUNCTION_277(v114);
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              v112 = v216;
            }
            *(_QWORD *)(v112 + 16) = v227;
            v116 = v112 + 48 * v115;
            *(_BYTE *)(v116 + 32) = 2;
            *(_QWORD *)(v116 + 40) = 0;
            *(_QWORD *)(v116 + 48) = v91;
            v91 = v112;
            *(_OWORD *)(v116 + 56) = xmmword_248BBF350;
            *(_BYTE *)(v116 + 72) = 0;
            goto LABEL_35;
          }
          swift_release();
          v257 = MEMORY[0x24BEE4AF8];
          v140 = v241;
LABEL_79:
          v22 = v240;
          if ((char *)v140 != v240)
          {
            OUTLINED_FUNCTION_296();
            Prompt.string.getter();
            OUTLINED_FUNCTION_111_0();
            v91 = String.index(_:offsetBy:)();
            OUTLINED_FUNCTION_186();
            Prompt.string.getter();
            OUTLINED_FUNCTION_281();
            OUTLINED_FUNCTION_111_0();
            v167 = OUTLINED_FUNCTION_262();
            OUTLINED_FUNCTION_39_0();
            Prompt.string.getter();
            if (v167 >> 14 < v91 >> 14)
              goto LABEL_132;
            OUTLINED_FUNCTION_195_0();
            v168 = String.subscript.getter();
            v170 = v169;
            v172 = v171;
            v174 = v173;
            OUTLINED_FUNCTION_61();
            v175 = MEMORY[0x2495A6A58](v168, v170, v172, v174);
            v177 = v176;
            OUTLINED_FUNCTION_112();
            v178 = v218;
            *v218 = v175;
            v178[1] = v177;
            OUTLINED_FUNCTION_188_0();
            outlined init with copy of TokenGenerationError((uint64_t)v178, v219, type metadata accessor for Prompt.Turn.Segment);
            if ((OUTLINED_FUNCTION_207_0() & 1) == 0)
            {
              v206 = OUTLINED_FUNCTION_116_0();
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v206, v207, v208, v209);
              v257 = v210;
            }
            OUTLINED_FUNCTION_162_0();
            if (v122)
            {
              v211 = OUTLINED_FUNCTION_278(v179);
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v211, v212, v213, v257);
              v257 = v214;
            }
            *(_QWORD *)(v257 + 16) = v175;
            OUTLINED_FUNCTION_64_0();
            OUTLINED_FUNCTION_224(v219, v180);
            OUTLINED_FUNCTION_93_0((uint64_t)v218);
          }
          v91 = Prompt.delimiters.getter();
          v271 = MEMORY[0x24BEE4AF8];
          *(_QWORD *)&v265 = *(_QWORD *)(v91 + 16);
          if (!(_QWORD)v265)
          {
            v187 = MEMORY[0x24BEE4AF8];
            goto LABEL_101;
          }
          v181 = 0;
          while (2)
          {
            if (v181 >= *(_QWORD *)(v91 + 16))
              goto LABEL_127;
            OUTLINED_FUNCTION_263();
            v182 = v266;
            OUTLINED_FUNCTION_250(v266, (uint64_t)&v22[v91 + v109 * v181]);
            v183 = v23;
            v184 = Prompt.Delimiter.priority.getter();
            OUTLINED_FUNCTION_250(v183, v182);
            if (v184 < v268)
            {
              OUTLINED_FUNCTION_163_0(v183);
              v23 = v183;
              goto LABEL_92;
            }
            v185 = Prompt.Delimiter.priority.getter();
            OUTLINED_FUNCTION_163_0(v183);
            v23 = v183;
            if ((uint64_t)v255 >= v185)
            {
              OUTLINED_FUNCTION_249(v232, v266);
              if ((OUTLINED_FUNCTION_276() & 1) == 0)
              {
                OUTLINED_FUNCTION_240();
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v185 = v271;
              }
              v23 = *(_QWORD *)(v185 + 16);
              v186 = *(_QWORD *)(v185 + 24);
              if (v23 >= v186 >> 1)
              {
                OUTLINED_FUNCTION_225(v186);
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                v185 = v271;
              }
              *(_QWORD *)(v185 + 16) = v23 + 1;
              OUTLINED_FUNCTION_249((uint64_t)&v22[v185 + v23 * v109], v232);
              v271 = v185;
              OUTLINED_FUNCTION_226();
            }
            else
            {
LABEL_92:
              OUTLINED_FUNCTION_163_0(v266);
            }
            if ((_QWORD)v265 == ++v181)
            {
              v187 = v271;
              OUTLINED_FUNCTION_165_0();
LABEL_101:
              OUTLINED_FUNCTION_213();
              v188 = *(_QWORD *)(v187 + 16);
              if (!v188)
              {
                OUTLINED_FUNCTION_222();
                v241 = 0;
                v237 = MEMORY[0x24BEE4AF8];
LABEL_123:
                OUTLINED_FUNCTION_37_0();
                __asm { BR              X8 }
              }
              v189 = 0;
              v190 = 0;
              v268 = 0;
              v191 = 0;
              v241 = 0;
              v238 = 0;
              v239 = 0;
              v240 = 0;
              OUTLINED_FUNCTION_117_0();
              v220 = v187;
              v193 = v187 + v192;
              v253 = *(char **)(v194 + 72);
              v255 = *(void (**)(uint64_t, uint64_t, uint64_t))(v194 + 16);
              v236 = v242 != 1;
              v109 = 1;
              v195 = 1;
              v237 = MEMORY[0x24BEE4AF8];
              while (1)
              {
                v255(v270, v193, v269);
                *(_QWORD *)&v265 = v188;
                if (v190)
                {
                  if ((v195 & 1) == 0)
                  {
                    OUTLINED_FUNCTION_143_0();
                    OUTLINED_FUNCTION_127_0();
                    OUTLINED_FUNCTION_111_0();
                    v91 = String.index(_:offsetBy:)();
                    OUTLINED_FUNCTION_112();
                    Prompt.string.getter();
                    OUTLINED_FUNCTION_127_0();
                    OUTLINED_FUNCTION_111_0();
                    Prompt.Delimiter.position.getter();
                    v196 = OUTLINED_FUNCTION_95_0();
                    OUTLINED_FUNCTION_112();
                    OUTLINED_FUNCTION_154_0();
                    if (v196 >> 14 >= v91 >> 14)
                    {
                      OUTLINED_FUNCTION_73_0();
                      OUTLINED_FUNCTION_61();
                      OUTLINED_FUNCTION_105_0();
                    }
                    goto LABEL_129;
                  }
                  if ((v109 & 1) == 0)
                  {
                    outlined consume of Prompt.ToolCallResult?(v241, v238);
                    OUTLINED_FUNCTION_143_0();
                    OUTLINED_FUNCTION_281();
                    OUTLINED_FUNCTION_111_0();
                    v91 = OUTLINED_FUNCTION_262();
                    OUTLINED_FUNCTION_39_0();
                    Prompt.string.getter();
                    OUTLINED_FUNCTION_127_0();
                    OUTLINED_FUNCTION_111_0();
                    Prompt.Delimiter.position.getter();
                    v197 = OUTLINED_FUNCTION_95_0();
                    OUTLINED_FUNCTION_112();
                    OUTLINED_FUNCTION_154_0();
                    if (v197 >> 14 >= v91 >> 14)
                    {
                      OUTLINED_FUNCTION_73_0();
                      OUTLINED_FUNCTION_61();
                      OUTLINED_FUNCTION_105_0();
                    }
                    goto LABEL_130;
                  }
                  OUTLINED_FUNCTION_37_0();
                  OUTLINED_FUNCTION_234();
                }
                else
                {
                  v188 = v191;
                  v191 = v109;
                  v22 = v189;
                }
                v198 = v243;
                Prompt.Delimiter.token.getter();
                v199 = Prompt.SpecialToken.instance.getter();
                v201 = v200;
                (*(void (**)(uint64_t, uint64_t))(v244 + 8))(v198, v245);
                v190 = v201;
                if (v201)
                {
                  swift_bridgeObjectRelease();
                  v202 = Prompt.Delimiter.position.getter();
                  OUTLINED_FUNCTION_152_0();
                  v203 = v268;
                  if ((_DWORD)v242 != 1)
                    v203 = v202;
                  v268 = v203;
                  v109 = ((_DWORD)v242 == 1) & v191;
                  if ((_DWORD)v242 == 1)
                    v191 = v202;
                  else
                    v191 = v188;
                  v195 &= v236;
                  v22 = (char *)v199;
                }
                else
                {
                  OUTLINED_FUNCTION_152_0();
                  v109 = v191;
                  v191 = v188;
                }
                v193 += (uint64_t)v253;
                v189 = v22;
                v188 = v265 - 1;
                if ((_QWORD)v265 == 1)
                {
                  swift_release();
                  OUTLINED_FUNCTION_165_0();
                  OUTLINED_FUNCTION_226();
                  goto LABEL_123;
                }
              }
            }
            continue;
          }
        }
      }
    }
    if (one-time initialization token for defaultSystemInstructions != -1)
      swift_once();
    v120 = __swift_project_value_buffer(v222, (uint64_t)static Prompt.Turn.defaultSystemInstructions);
    OUTLINED_FUNCTION_269(v120, (uint64_t)v249);
    if ((OUTLINED_FUNCTION_207_0() & 1) == 0)
    {
      OUTLINED_FUNCTION_126_0();
      OUTLINED_FUNCTION_268(v204);
    }
    OUTLINED_FUNCTION_162_0();
    if (v122)
    {
      OUTLINED_FUNCTION_133_0(v121);
      OUTLINED_FUNCTION_268(v205);
    }
    *(_QWORD *)(v231 + 16) = v91;
    OUTLINED_FUNCTION_64_0();
    OUTLINED_FUNCTION_258(v226, v123);
    v117 = v228 + 1;
    v91 = v223;
  }
  while (v228 + 1 != v227);
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_4_1();
}

uint64_t init(delimiter:) in TurnDelimiter #1 in Prompt.turns()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  void (*v15)(_BYTE *, uint64_t);
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _BYTE v31[12];
  int v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for Prompt.SpecialToken();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEB87B8];
  v6 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = &v31[-v11];
  MEMORY[0x24BDAC7A8](v10);
  v14 = &v31[-v13];
  v34 = Prompt.Delimiter.position.getter();
  v33 = Prompt.Delimiter.priority.getter();
  Prompt.Delimiter.token.getter();
  static Prompt.SpecialToken.Chat.turnEnd.getter();
  v32 = static Prompt.SpecialToken.== infix(_:_:)();
  v15 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v15(v12, v4);
  v15(v14, v4);
  Prompt.Delimiter.token.getter();
  static Prompt.SpecialToken.Chat.defaultInstructions.getter();
  v16 = static Prompt.SpecialToken.== infix(_:_:)();
  v15(v12, v4);
  v15(v14, v4);
  Prompt.Delimiter.token.getter();
  static Prompt.SpecialToken.Chat.instructions.getter();
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.SpecialToken and conformance Prompt.SpecialToken, v5, MEMORY[0x24BEB87D0]);
  v17 = dispatch thunk of static Equatable.== infix(_:_:)();
  v15(v14, v4);
  if ((v17 & 1) != 0
    || (static Prompt.SpecialToken.Chat.defaultInstructions.getter(),
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v15(v14, v4),
        (v18 & 1) != 0))
  {
    v19 = type metadata accessor for Prompt.Delimiter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v15)(v9, v4);
    v21 = 0;
  }
  else
  {
    static Prompt.SpecialToken.Chat.user.getter();
    v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    v15(v14, v4);
    if ((v25 & 1) != 0)
    {
      v26 = type metadata accessor for Prompt.Delimiter();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
      result = ((uint64_t (*)(_BYTE *, uint64_t))v15)(v9, v4);
      v21 = 2;
    }
    else
    {
      static Prompt.SpecialToken.Chat.response.getter();
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      v15(v14, v4);
      if ((v27 & 1) != 0)
      {
        v28 = type metadata accessor for Prompt.Delimiter();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(a1, v28);
        result = ((uint64_t (*)(_BYTE *, uint64_t))v15)(v9, v4);
        v21 = 1;
      }
      else
      {
        static Prompt.SpecialToken.Chat.tool.getter();
        v29 = dispatch thunk of static Equatable.== infix(_:_:)();
        v30 = type metadata accessor for Prompt.Delimiter();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(a1, v30);
        v15(v14, v4);
        result = ((uint64_t (*)(_BYTE *, uint64_t))v15)(v9, v4);
        v21 = 3;
        if ((v29 & 1) == 0)
          v21 = 4;
      }
    }
  }
  v22 = 256;
  if ((v32 & 1) == 0)
    v22 = 0;
  v23 = 0x10000;
  if ((v16 & 1) == 0)
    v23 = 0;
  *a2 = v23 | v22 | v21;
  v24 = v33;
  a2[1] = v34;
  a2[2] = v24;
  return result;
}

void closure #1 in static Data.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_248B1F7EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  BOOL *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  __int16 v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v40 = v37;
  v41 = v38;
  v42 = BYTE2(v38);
  v43 = BYTE3(v38);
  v44 = BYTE4(v38);
  v45 = BYTE5(v38);
  if (!v36)
  {
    __break(1u);
    JUMPOUT(0x248B1F970);
  }
  result = memcmp(v36, &v40, BYTE6(v38));
  *v35 = (_DWORD)result == 0;
  return result;
}

uint64_t specialized __DataStorage.withUnsafeBytes<A>(in:apply:)(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = __DataStorage._bytes.getter();
  v8 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

uint64_t outlined copy of Prompt.ToolCallResult?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of Prompt.ToolCallResult?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x2495A740C](a3, v5), a1);
  }
  OUTLINED_FUNCTION_104();
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_97_0();
  OUTLINED_FUNCTION_153_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_206_0();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  OUTLINED_FUNCTION_205_0();
  if (v5)
  {
    OUTLINED_FUNCTION_175_0(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_16();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 48);
  }
  v16 = OUTLINED_FUNCTION_203_0();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_125();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  void (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_251();
  if ((v9 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v13 != v14)
    {
      OUTLINED_FUNCTION_206_0();
      if (v13)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  else
  {
    v12 = v8;
  }
  v15 = *(_QWORD *)(v0 + 16);
  if (v12 <= v15)
    v16 = *(_QWORD *)(v0 + 16);
  else
    v16 = v12;
  if (!v16)
    goto LABEL_17;
  OUTLINED_FUNCTION_175_0(v7, v8, v9, v10, v11);
  v4(0);
  v17 = (_QWORD *)OUTLINED_FUNCTION_100_0();
  v18 = _swift_stdlib_malloc_size(v17);
  if (!v5)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v6 == 0x8000000000000000 && v5 == -1)
    goto LABEL_22;
  v17[2] = v15;
  v17[3] = 2 * ((uint64_t)(v18 - v6) / v5);
LABEL_17:
  v20 = ((uint64_t (*)(_QWORD))v4)(0);
  v21 = OUTLINED_FUNCTION_157_0(v20);
  if ((v3 & 1) != 0)
  {
    v2(v21);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v21);
  }
  OUTLINED_FUNCTION_125();
  OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_153_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_206_0();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  OUTLINED_FUNCTION_205_0();
  if (v5)
  {
    OUTLINED_FUNCTION_175_0(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_16();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 64);
  }
  v16 = OUTLINED_FUNCTION_203_0();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_125();
  OUTLINED_FUNCTION_22_0();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_153_0();
  if ((v6 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_206_0();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  OUTLINED_FUNCTION_205_0();
  if (v5)
  {
    OUTLINED_FUNCTION_175_0(v9, v10, v11, v12, v13);
    v14 = (_QWORD *)OUTLINED_FUNCTION_16();
    v15 = _swift_stdlib_malloc_size(v14);
    v14[2] = v4;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 32);
  }
  v16 = OUTLINED_FUNCTION_203_0();
  if ((v3 & 1) != 0)
  {
    v2(v16);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v16);
  }
  OUTLINED_FUNCTION_125();
  OUTLINED_FUNCTION_22_0();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_251();
  if ((v9 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v13 != v14)
    {
      OUTLINED_FUNCTION_206_0();
      if (v13)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  else
  {
    v12 = v8;
  }
  v15 = *(_QWORD *)(v0 + 16);
  if (v12 <= v15)
    v16 = *(_QWORD *)(v0 + 16);
  else
    v16 = v12;
  if (!v16)
    goto LABEL_17;
  OUTLINED_FUNCTION_175_0(v7, v8, v9, v10, v11);
  __swift_instantiateConcreteTypeFromMangledName(v4);
  v17 = (_QWORD *)OUTLINED_FUNCTION_100_0();
  v18 = _swift_stdlib_malloc_size(v17);
  if (!v5)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v6 == 0x8000000000000000 && v5 == -1)
    goto LABEL_22;
  v17[2] = v15;
  v17[3] = 2 * ((uint64_t)(v18 - v6) / v5);
LABEL_17:
  v20 = __swift_instantiateConcreteTypeFromMangledName(v4);
  v21 = OUTLINED_FUNCTION_157_0(v20);
  if ((v3 & 1) != 0)
  {
    v2(v21);
    *(_QWORD *)(v0 + 16) = 0;
  }
  else
  {
    v1(v21);
  }
  OUTLINED_FUNCTION_125();
  OUTLINED_FUNCTION_4_1();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = swift_allocObject();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptEnvelope.AttachmentEnvelope>);
    v10 = swift_allocObject();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v8;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v8, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)();
  }
  swift_release();
  return v10;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_release();
  return v10;
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for Prompt.Attachment() - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(0)
                 - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    v3 = v4;
  }
  v5 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v3;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  Swift::Int v14;
  unint64_t v15;
  char *v16;
  char *v17;
  Swift::Int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  void (*v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;

  v2 = v1;
  v4 = type metadata accessor for Prompt.Attachment();
  v145 = *(_QWORD **)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v130 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v141 = (char *)&v124 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v136 = (char *)&v124 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v137 = (char *)&v124 - v11;
  v12 = a1[1];
  v13 = _minimumMergeRunLength(_:)(v12);
  if (v13 >= v12)
  {
    if ((v12 & 0x8000000000000000) == 0)
    {
      if (v12)
        specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v12, 1, a1);
      return;
    }
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }
  v14 = v13;
  v126 = specialized static Array._allocateUninitialized(_:)(v12 / 2);
  v127 = v12;
  v132 = v15;
  if (v12 <= 0)
  {
    v17 = (char *)MEMORY[0x24BEE4AF8];
    v68 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_102:
    if (v68 < 2)
      goto LABEL_116;
    v118 = *a1;
    while (1)
    {
      v119 = v68 - 2;
      if (v68 < 2)
        break;
      if (!v118)
        goto LABEL_148;
      v120 = *(_QWORD *)&v17[16 * v119 + 32];
      v121 = *(_QWORD *)&v17[16 * v68 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v118 + v145[9] * v120, v118 + v145[9] * *(_QWORD *)&v17[16 * v68 + 16], v118 + v145[9] * v121, v132);
      if (v2)
        goto LABEL_114;
      if (v121 < v120)
        goto LABEL_135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v17);
      if (v119 >= *((_QWORD *)v17 + 2))
        goto LABEL_136;
      v122 = &v17[16 * v119 + 32];
      *(_QWORD *)v122 = v120;
      *((_QWORD *)v122 + 1) = v121;
      v123 = *((_QWORD *)v17 + 2);
      if (v68 > v123)
        goto LABEL_137;
      memmove(&v17[16 * v68 + 16], &v17[16 * v68 + 32], 16 * (v123 - v68));
      *((_QWORD *)v17 + 2) = v123 - 1;
      v68 = v123 - 1;
      if (v123 <= 2)
        goto LABEL_116;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
  v125 = v14;
  v16 = 0;
  v17 = (char *)MEMORY[0x24BEE4AF8];
  v18 = v12;
  v138 = a1;
  v140 = v4;
  while (1)
  {
    v19 = (uint64_t)v16;
    v20 = v16 + 1;
    v128 = v17;
    v131 = v16;
    if ((uint64_t)(v16 + 1) >= v18)
    {
      v27 = (uint64_t)(v16 + 1);
    }
    else
    {
      v129 = *a1;
      v21 = v129;
      v22 = v145[9];
      v143 = v18;
      v144 = v22;
      v23 = (char *)v145[2];
      ((void (*)(char *, uint64_t, uint64_t))v23)(v137, v129 + v22 * (_QWORD)v20, v4);
      v24 = v21 + v22 * v19;
      v25 = v136;
      v139 = v23;
      ((void (*)(char *, uint64_t, uint64_t))v23)(v136, v24, v4);
      v142 = (void (*)(char *, uint64_t, uint64_t))Prompt.Attachment.priority.getter();
      v135 = Prompt.Attachment.priority.getter();
      v26 = (void (*)(char *, uint64_t))v145[1];
      v26(v25, v4);
      v26(v137, v4);
      v27 = v19 + 2;
      if (v19 + 2 < v143)
      {
        v124 = v2;
        v28 = v129;
        v133 = v144 * v27;
        v134 = v144 * (_QWORD)v20;
        while (1)
        {
          v29 = v27;
          v30 = (uint64_t)v142 < v135;
          v31 = v137;
          v32 = v139;
          v33 = v140;
          ((void (*)(char *, uint64_t, uint64_t))v139)(v137, v28 + v133, v140);
          v34 = v136;
          ((void (*)(char *, uint64_t, uint64_t))v32)(v136, v28 + v134, v33);
          v35 = Prompt.Attachment.priority.getter();
          LODWORD(v32) = v35 >= Prompt.Attachment.priority.getter();
          v26(v34, v33);
          v26(v31, v33);
          if (v30 == (_DWORD)v32)
            break;
          v27 = v29 + 1;
          v28 += v144;
          if (v29 + 1 >= v143)
          {
            v18 = v143;
            v27 = v143;
            v17 = v128;
            a1 = v138;
            v4 = v140;
            v2 = v124;
            v19 = (uint64_t)v131;
            goto LABEL_13;
          }
        }
        v17 = v128;
        a1 = v138;
        v4 = v140;
        v2 = v124;
        v27 = v29;
        v19 = (uint64_t)v131;
      }
      v18 = v143;
LABEL_13:
      if ((uint64_t)v142 < v135)
      {
        if (v27 < v19)
          goto LABEL_141;
        if (v19 < v27)
        {
          v36 = v19;
          v37 = 0;
          v38 = v144;
          v39 = v144 * (v27 - 1);
          v40 = v27 * v144;
          v41 = v36;
          v42 = v36 * v144;
          v139 = (char *)v27;
          do
          {
            if (v41 != v27 + v37 - 1)
            {
              v43 = v2;
              v44 = v129;
              if (!v129)
                goto LABEL_147;
              v45 = v129 + v42;
              v135 = v129 + v39;
              v46 = v140;
              v142 = (void (*)(char *, uint64_t, uint64_t))v145[4];
              v142(v130, v129 + v42, v140);
              if (v42 < v39 || v45 >= v44 + v40)
              {
                v48 = v135;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v48 = v135;
                if (v42 != v39)
                  swift_arrayInitWithTakeBackToFront();
              }
              v142((char *)v48, (uint64_t)v130, v46);
              v17 = v128;
              v2 = v43;
              v27 = (uint64_t)v139;
              v38 = v144;
            }
            ++v41;
            --v37;
            v39 -= v38;
            v40 -= v38;
            v42 += v38;
          }
          while (v41 < v27 + v37);
          a1 = v138;
          v4 = v140;
          v19 = (uint64_t)v131;
          v18 = v143;
        }
      }
    }
    if (v27 < v18)
    {
      if (__OFSUB__(v27, v19))
        goto LABEL_139;
      if (v27 - v19 < v125)
      {
        if (__OFADD__(v19, v125))
          goto LABEL_142;
        if (v19 + v125 >= v18)
          v49 = v18;
        else
          v49 = v19 + v125;
        if (v49 < v19)
          goto LABEL_143;
        if (v27 != v49)
        {
          v124 = v2;
          v50 = v145[9];
          v133 = v145[2];
          v134 = v50;
          v144 = v50 * (v27 - 1);
          v51 = v27 * v50;
          v129 = v49;
          do
          {
            v52 = 0;
            v139 = (char *)v27;
            v135 = v51;
            while (1)
            {
              v142 = (void (*)(char *, uint64_t, uint64_t))v19;
              v53 = v138;
              v54 = *v138;
              v55 = v51 + v52 + *v138;
              v56 = v137;
              v57 = (void (*)(char *, uint64_t, uint64_t))v133;
              ((void (*)(char *, uint64_t, uint64_t))v133)(v137, v55, v4);
              v58 = v136;
              v57(v136, v144 + v52 + v54, v4);
              v143 = Prompt.Attachment.priority.getter();
              v59 = Prompt.Attachment.priority.getter();
              v60 = (void (*)(char *, uint64_t))v145[1];
              v60(v58, v4);
              v60(v56, v4);
              if (v143 >= v59)
                break;
              v61 = *v53;
              if (!*v53)
                goto LABEL_145;
              v51 = v135;
              v62 = (char *)(v61 + v144 + v52);
              v63 = (void (*)(char *, uint64_t, uint64_t))v145[4];
              v4 = v140;
              v63(v141, v61 + v135 + v52, v140);
              swift_arrayInitWithTakeFrontToBack();
              v63(v62, (uint64_t)v141, v4);
              v52 -= v134;
              v19 = (uint64_t)v142 + 1;
              v64 = v139;
              if (v139 == (char *)v142 + 1)
                goto LABEL_46;
            }
            v64 = v139;
            v4 = v140;
            v51 = v135;
LABEL_46:
            v27 = (uint64_t)(v64 + 1);
            v144 += v134;
            v51 += v134;
            v19 = (uint64_t)v131;
          }
          while (v27 != v129);
          v27 = v129;
          v2 = v124;
          v17 = v128;
          a1 = v138;
        }
      }
    }
    if (v27 < v19)
      goto LABEL_138;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v139 = (char *)v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    v67 = *((_QWORD *)v17 + 2);
    v66 = *((_QWORD *)v17 + 3);
    v68 = v67 + 1;
    if (v67 >= v66 >> 1)
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v66 > 1), v67 + 1, 1, v17);
    *((_QWORD *)v17 + 2) = v68;
    v69 = v17 + 32;
    v70 = &v17[16 * v67 + 32];
    v71 = v139;
    *(_QWORD *)v70 = v131;
    *((_QWORD *)v70 + 1) = v71;
    if (v67)
      break;
    v68 = 1;
LABEL_96:
    v18 = a1[1];
    v16 = v139;
    if ((uint64_t)v139 >= v18)
      goto LABEL_102;
  }
  while (1)
  {
    v72 = v68 - 1;
    if (v68 >= 4)
    {
      v77 = &v69[16 * v68];
      v78 = *((_QWORD *)v77 - 8);
      v79 = *((_QWORD *)v77 - 7);
      v83 = __OFSUB__(v79, v78);
      v80 = v79 - v78;
      if (v83)
        goto LABEL_123;
      v82 = *((_QWORD *)v77 - 6);
      v81 = *((_QWORD *)v77 - 5);
      v83 = __OFSUB__(v81, v82);
      v75 = v81 - v82;
      v76 = v83;
      if (v83)
        goto LABEL_124;
      v84 = v68 - 2;
      v85 = &v69[16 * v68 - 32];
      v87 = *(_QWORD *)v85;
      v86 = *((_QWORD *)v85 + 1);
      v83 = __OFSUB__(v86, v87);
      v88 = v86 - v87;
      if (v83)
        goto LABEL_125;
      v83 = __OFADD__(v75, v88);
      v89 = v75 + v88;
      if (v83)
        goto LABEL_127;
      if (v89 >= v80)
      {
        v107 = &v69[16 * v72];
        v109 = *(_QWORD *)v107;
        v108 = *((_QWORD *)v107 + 1);
        v83 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v83)
          goto LABEL_133;
        v100 = v75 < v110;
        goto LABEL_85;
      }
    }
    else
    {
      if (v68 != 3)
      {
        v101 = *((_QWORD *)v17 + 4);
        v102 = *((_QWORD *)v17 + 5);
        v83 = __OFSUB__(v102, v101);
        v94 = v102 - v101;
        v95 = v83;
        goto LABEL_79;
      }
      v74 = *((_QWORD *)v17 + 4);
      v73 = *((_QWORD *)v17 + 5);
      v83 = __OFSUB__(v73, v74);
      v75 = v73 - v74;
      v76 = v83;
    }
    if ((v76 & 1) != 0)
      goto LABEL_126;
    v84 = v68 - 2;
    v90 = &v69[16 * v68 - 32];
    v92 = *(_QWORD *)v90;
    v91 = *((_QWORD *)v90 + 1);
    v93 = __OFSUB__(v91, v92);
    v94 = v91 - v92;
    v95 = v93;
    if (v93)
      goto LABEL_128;
    v96 = &v69[16 * v72];
    v98 = *(_QWORD *)v96;
    v97 = *((_QWORD *)v96 + 1);
    v83 = __OFSUB__(v97, v98);
    v99 = v97 - v98;
    if (v83)
      goto LABEL_130;
    if (__OFADD__(v94, v99))
      goto LABEL_132;
    if (v94 + v99 >= v75)
    {
      v100 = v75 < v99;
LABEL_85:
      if (v100)
        v72 = v84;
      goto LABEL_87;
    }
LABEL_79:
    if ((v95 & 1) != 0)
      goto LABEL_129;
    v103 = &v69[16 * v72];
    v105 = *(_QWORD *)v103;
    v104 = *((_QWORD *)v103 + 1);
    v83 = __OFSUB__(v104, v105);
    v106 = v104 - v105;
    if (v83)
      goto LABEL_131;
    if (v106 < v94)
      goto LABEL_96;
LABEL_87:
    v111 = v72 - 1;
    if (v72 - 1 >= v68)
    {
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    v112 = *a1;
    if (!*a1)
      goto LABEL_146;
    v113 = &v69[16 * v111];
    v114 = *(_QWORD *)v113;
    v115 = &v69[16 * v72];
    v116 = *((_QWORD *)v115 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)(v112 + v145[9] * *(_QWORD *)v113, v112 + v145[9] * *(_QWORD *)v115, v112 + v145[9] * v116, v132);
    if (v2)
      break;
    if (v116 < v114)
      goto LABEL_120;
    if (v72 > *((_QWORD *)v17 + 2))
      goto LABEL_121;
    *(_QWORD *)v113 = v114;
    *(_QWORD *)&v69[16 * v111 + 8] = v116;
    v117 = *((_QWORD *)v17 + 2);
    if (v72 >= v117)
      goto LABEL_122;
    v68 = v117 - 1;
    memmove(&v69[16 * v72], v115 + 16, 16 * (v117 - 1 - v72));
    *((_QWORD *)v17 + 2) = v117 - 1;
    a1 = v138;
    v4 = v140;
    if (v117 <= 2)
      goto LABEL_96;
  }
LABEL_114:
  swift_bridgeObjectRelease();
  if (v127 >= -1)
    goto LABEL_117;
  __break(1u);
LABEL_116:
  swift_bridgeObjectRelease();
  if (v127 >= -1)
  {
LABEL_117:
    *(_QWORD *)(v126 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  Swift::Int v38;
  Swift::Int v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  char v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  unint64_t v180;
  Swift::Int v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;

  v3 = type metadata accessor for Prompt.Attachment();
  v209 = *(_QWORD *)(v3 - 8);
  v210 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v208 = (char *)&v181 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Prompt.Delimiter();
  v206 = *(_QWORD *)(v5 - 8);
  v207 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v205 = (char *)&v181 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(0);
  v197 = *(_QWORD *)(v215 - 8);
  v7 = MEMORY[0x24BDAC7A8](v215);
  v193 = (uint64_t)&v181 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v211 = (uint64_t)&v181 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v200 = (uint64_t)&v181 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v201 = (char *)&v181 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v216 = (uint64_t)&v181 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v212 = (uint64_t)&v181 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v181 - v20;
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v181 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v198 = (uint64_t)&v181 - v26;
  v27 = MEMORY[0x24BDAC7A8](v25);
  v196 = (uint64_t)&v181 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v185 = (uint64_t)&v181 - v30;
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v181 - v32;
  v34 = MEMORY[0x24BDAC7A8](v31);
  v187 = (uint64_t)&v181 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v186 = (uint64_t)&v181 - v36;
  v214 = a1;
  v37 = a1[1];
  v38 = _minimumMergeRunLength(_:)(v37);
  if (v38 >= v37)
  {
    if (v37 < 0)
      goto LABEL_156;
    if (v37)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v37, 1, v214);
    return;
  }
  v39 = v38;
  v199 = v1;
  v183 = specialized static Array._allocateUninitialized(_:)(v37 / 2, (void (*)(_QWORD))type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
  v184 = v37;
  v195 = v40;
  if (v37 <= 0)
    goto LABEL_120;
  v181 = v39;
  v182 = v33;
  v191 = v24;
  v192 = v21;
  v41 = 0;
  v42 = (char *)MEMORY[0x24BEE4AF8];
  v43 = v37;
  while (1)
  {
    v44 = v41;
    v45 = v41 + 1;
    v194 = v42;
    if (v41 + 1 >= v43)
    {
      ++v41;
      v55 = (uint64_t)v201;
    }
    else
    {
      v46 = *v214;
      v47 = *(_QWORD *)(v197 + 72);
      v48 = v186;
      outlined init with copy of TokenGenerationError(*v214 + v47 * v45, v186, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      v188 = v46;
      v213 = v47;
      outlined init with copy of TokenGenerationError(v46 + v47 * v41, v187, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      v49 = (uint64_t)v182;
      outlined init with copy of TokenGenerationError(v48, (uint64_t)v182, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v50 = v208;
        v51 = v209;
        v52 = v49;
        v53 = v210;
        (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v208, v52, v210);
        v54 = Prompt.Attachment.position.getter();
      }
      else
      {
        v50 = v205;
        v51 = v206;
        v56 = v49;
        v53 = v207;
        (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v205, v56, v207);
        v54 = Prompt.Delimiter.position.getter();
      }
      v204 = v54;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v53);
      v57 = v185;
      outlined init with copy of TokenGenerationError(v187, v185, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v58 = v208;
        v59 = v209;
        v60 = v57;
        v61 = v210;
        (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v208, v60, v210);
        v62 = Prompt.Attachment.position.getter();
      }
      else
      {
        v58 = v205;
        v59 = v206;
        v63 = v57;
        v61 = v207;
        (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v205, v63, v207);
        v62 = Prompt.Delimiter.position.getter();
      }
      v203 = v62;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v61);
      _s15TokenGeneration0aB5ErrorOWOhTm_0(v187, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      _s15TokenGeneration0aB5ErrorOWOhTm_0(v186, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      v41 += 2;
      if (v44 + 2 < v43)
      {
        v190 = v213 * v45;
        v64 = v188;
        v65 = v213 * v41;
        v202 = v43;
        while (1)
        {
          v66 = v196;
          outlined init with copy of TokenGenerationError(v64 + v65, v196, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          outlined init with copy of TokenGenerationError(v64 + v190, v198, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          v67 = (uint64_t)v191;
          outlined init with copy of TokenGenerationError(v66, (uint64_t)v191, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v68 = v208;
            v69 = v209;
            v70 = v210;
            (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v208, v67, v210);
            v71 = Prompt.Attachment.position.getter();
          }
          else
          {
            v68 = v205;
            v69 = v206;
            v70 = v207;
            (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v205, v67, v207);
            v71 = Prompt.Delimiter.position.getter();
          }
          v72 = v71;
          (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
          v73 = v41;
          v74 = (uint64_t)v192;
          outlined init with copy of TokenGenerationError(v198, (uint64_t)v192, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            v75 = v208;
            v76 = v209;
            v77 = v74;
            v78 = v210;
            (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v208, v77, v210);
            v79 = Prompt.Attachment.position.getter();
          }
          else
          {
            v75 = v205;
            v76 = v206;
            v80 = v74;
            v78 = v207;
            (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v205, v80, v207);
            v79 = Prompt.Delimiter.position.getter();
          }
          v81 = v79;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v75, v78);
          v82 = v204 < v203;
          _s15TokenGeneration0aB5ErrorOWOhTm_0(v198, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          _s15TokenGeneration0aB5ErrorOWOhTm_0(v196, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
          v42 = v194;
          if (v82 == v72 >= v81)
            break;
          v41 = v73 + 1;
          v64 += v213;
          v43 = v202;
          if (v73 + 1 >= v202)
          {
            v41 = v202;
            goto LABEL_24;
          }
        }
        v41 = v73;
        v43 = v202;
      }
LABEL_24:
      v55 = (uint64_t)v201;
      if (v204 < v203)
      {
        if (v41 < v44)
          goto LABEL_157;
        if (v44 < v41)
        {
          v202 = v43;
          v83 = 0;
          v84 = v213 * (v41 - 1);
          v85 = v41 * v213;
          v86 = v44;
          v87 = v44 * v213;
          do
          {
            if (v86 != v41 + v83 - 1)
            {
              v88 = v188;
              if (!v188)
                goto LABEL_163;
              v89 = v188 + v87;
              v204 = v188 + v84;
              outlined init with take of TokenGenerationError(v188 + v87, v193, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              if (v87 < v84 || v89 >= v88 + v85)
              {
                v91 = v204;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                v91 = v204;
                if (v87 != v84)
                  swift_arrayInitWithTakeBackToFront();
              }
              outlined init with take of TokenGenerationError(v193, v91, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
            }
            ++v86;
            --v83;
            v84 -= v213;
            v85 -= v213;
            v87 += v213;
          }
          while (v86 < v41 + v83);
          v42 = v194;
          v55 = (uint64_t)v201;
          v43 = v202;
        }
      }
    }
    if (v41 < v43)
    {
      if (__OFSUB__(v41, v44))
        goto LABEL_155;
      if (v41 - v44 < v181)
      {
        if (__OFADD__(v44, v181))
          goto LABEL_158;
        if (v44 + v181 >= v43)
          v92 = v43;
        else
          v92 = v44 + v181;
        if (v92 < v44)
        {
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        if (v41 != v92)
        {
          v93 = *(_QWORD *)(v197 + 72);
          v213 = v93 * (v41 - 1);
          v202 = v93;
          v94 = v41 * v93;
          v189 = v44;
          v190 = v92;
          do
          {
            v95 = 0;
            v96 = v44;
            v203 = v41;
            v204 = v94;
            while (1)
            {
              v97 = *v214;
              v98 = v94 + v95 + *v214;
              v99 = v212;
              outlined init with copy of TokenGenerationError(v98, v212, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              outlined init with copy of TokenGenerationError(v213 + v95 + v97, v216, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              outlined init with copy of TokenGenerationError(v99, v55, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                v100 = v208;
                v101 = v209;
                v102 = v55;
                v103 = v210;
                (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v208, v102, v210);
                v104 = Prompt.Attachment.position.getter();
                (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v103);
              }
              else
              {
                v105 = v205;
                v106 = v206;
                v107 = v55;
                v108 = v207;
                (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v205, v107, v207);
                v104 = Prompt.Delimiter.position.getter();
                (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v108);
              }
              v109 = v200;
              outlined init with copy of TokenGenerationError(v216, v200, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                v110 = v208;
                v111 = v209;
                v112 = v109;
                v113 = v210;
                (*(void (**)(char *, uint64_t, uint64_t))(v209 + 32))(v208, v112, v210);
                v114 = Prompt.Attachment.position.getter();
              }
              else
              {
                v110 = v205;
                v111 = v206;
                v115 = v109;
                v113 = v207;
                (*(void (**)(char *, uint64_t, uint64_t))(v206 + 32))(v205, v115, v207);
                v114 = Prompt.Delimiter.position.getter();
              }
              v116 = v114;
              (*(void (**)(char *, uint64_t))(v111 + 8))(v110, v113);
              _s15TokenGeneration0aB5ErrorOWOhTm_0(v216, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              _s15TokenGeneration0aB5ErrorOWOhTm_0(v212, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              v55 = (uint64_t)v201;
              if (v104 >= v116)
                break;
              v117 = *v214;
              v94 = v204;
              if (!*v214)
                goto LABEL_161;
              v118 = v117 + v213 + v95;
              outlined init with take of TokenGenerationError(v117 + v204 + v95, v211, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              swift_arrayInitWithTakeFrontToBack();
              outlined init with take of TokenGenerationError(v211, v118, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
              v119 = v203;
              v95 -= v202;
              if (v203 == ++v96)
                goto LABEL_63;
            }
            v119 = v203;
            v94 = v204;
LABEL_63:
            v41 = v119 + 1;
            v213 += v202;
            v94 += v202;
            v44 = v189;
          }
          while (v41 != v190);
          v41 = v190;
          v42 = v194;
        }
      }
    }
    if (v41 < v44)
      goto LABEL_154;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v42 + 2) + 1, 1, v42);
    v121 = *((_QWORD *)v42 + 2);
    v120 = *((_QWORD *)v42 + 3);
    v122 = v121 + 1;
    if (v121 >= v120 >> 1)
      v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v120 > 1), v121 + 1, 1, v42);
    *((_QWORD *)v42 + 2) = v122;
    v123 = v42 + 32;
    v124 = &v42[16 * v121 + 32];
    *(_QWORD *)v124 = v44;
    *((_QWORD *)v124 + 1) = v41;
    if (v121)
      break;
    v122 = 1;
LABEL_113:
    v43 = v214[1];
    if (v41 >= v43)
      goto LABEL_121;
  }
  while (1)
  {
    v125 = v122 - 1;
    if (v122 >= 4)
    {
      v130 = &v123[16 * v122];
      v131 = *((_QWORD *)v130 - 8);
      v132 = *((_QWORD *)v130 - 7);
      v136 = __OFSUB__(v132, v131);
      v133 = v132 - v131;
      if (v136)
        goto LABEL_139;
      v135 = *((_QWORD *)v130 - 6);
      v134 = *((_QWORD *)v130 - 5);
      v136 = __OFSUB__(v134, v135);
      v128 = v134 - v135;
      v129 = v136;
      if (v136)
        goto LABEL_140;
      v137 = v122 - 2;
      v138 = &v123[16 * v122 - 32];
      v140 = *(_QWORD *)v138;
      v139 = *((_QWORD *)v138 + 1);
      v136 = __OFSUB__(v139, v140);
      v141 = v139 - v140;
      if (v136)
        goto LABEL_141;
      v136 = __OFADD__(v128, v141);
      v142 = v128 + v141;
      if (v136)
        goto LABEL_143;
      if (v142 >= v133)
      {
        v160 = &v123[16 * v125];
        v162 = *(_QWORD *)v160;
        v161 = *((_QWORD *)v160 + 1);
        v136 = __OFSUB__(v161, v162);
        v163 = v161 - v162;
        if (v136)
          goto LABEL_149;
        v153 = v128 < v163;
        goto LABEL_102;
      }
    }
    else
    {
      if (v122 != 3)
      {
        v154 = *((_QWORD *)v42 + 4);
        v155 = *((_QWORD *)v42 + 5);
        v136 = __OFSUB__(v155, v154);
        v147 = v155 - v154;
        v148 = v136;
        goto LABEL_96;
      }
      v127 = *((_QWORD *)v42 + 4);
      v126 = *((_QWORD *)v42 + 5);
      v136 = __OFSUB__(v126, v127);
      v128 = v126 - v127;
      v129 = v136;
    }
    if ((v129 & 1) != 0)
      goto LABEL_142;
    v137 = v122 - 2;
    v143 = &v123[16 * v122 - 32];
    v145 = *(_QWORD *)v143;
    v144 = *((_QWORD *)v143 + 1);
    v146 = __OFSUB__(v144, v145);
    v147 = v144 - v145;
    v148 = v146;
    if (v146)
      goto LABEL_144;
    v149 = &v123[16 * v125];
    v151 = *(_QWORD *)v149;
    v150 = *((_QWORD *)v149 + 1);
    v136 = __OFSUB__(v150, v151);
    v152 = v150 - v151;
    if (v136)
      goto LABEL_146;
    if (__OFADD__(v147, v152))
      goto LABEL_148;
    if (v147 + v152 >= v128)
    {
      v153 = v128 < v152;
LABEL_102:
      if (v153)
        v125 = v137;
      goto LABEL_104;
    }
LABEL_96:
    if ((v148 & 1) != 0)
      goto LABEL_145;
    v156 = &v123[16 * v125];
    v158 = *(_QWORD *)v156;
    v157 = *((_QWORD *)v156 + 1);
    v136 = __OFSUB__(v157, v158);
    v159 = v157 - v158;
    if (v136)
      goto LABEL_147;
    if (v159 < v147)
      goto LABEL_113;
LABEL_104:
    v164 = v125 - 1;
    if (v125 - 1 >= v122)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }
    if (!*v214)
      goto LABEL_162;
    v165 = v41;
    v166 = v42;
    v167 = &v123[16 * v164];
    v168 = *(_QWORD *)v167;
    v169 = &v123[16 * v125];
    v170 = *((_QWORD *)v169 + 1);
    v171 = v199;
    specialized _merge<A>(low:mid:high:buffer:by:)(*v214 + *(_QWORD *)(v197 + 72) * *(_QWORD *)v167, *v214 + *(_QWORD *)(v197 + 72) * *(_QWORD *)v169, *v214 + *(_QWORD *)(v197 + 72) * v170, v195);
    v199 = v171;
    if (v171)
      break;
    if (v170 < v168)
      goto LABEL_136;
    if (v125 > *((_QWORD *)v166 + 2))
      goto LABEL_137;
    *(_QWORD *)v167 = v168;
    *(_QWORD *)&v123[16 * v164 + 8] = v170;
    v172 = *((_QWORD *)v166 + 2);
    if (v125 >= v172)
      goto LABEL_138;
    v42 = v166;
    v122 = v172 - 1;
    memmove(&v123[16 * v125], v169 + 16, 16 * (v172 - 1 - v125));
    *((_QWORD *)v166 + 2) = v172 - 1;
    v41 = v165;
    if (v172 <= 2)
      goto LABEL_113;
  }
LABEL_118:
  swift_bridgeObjectRelease();
  if (v184 >= -1)
    goto LABEL_133;
  __break(1u);
LABEL_120:
  v42 = (char *)MEMORY[0x24BEE4AF8];
  v122 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_121:
  if (v122 >= 2)
  {
    v173 = *v214;
    v174 = v199;
    v175 = v195;
    while (1)
    {
      v176 = v122 - 2;
      if (v122 < 2)
        break;
      if (!v173)
        goto LABEL_164;
      v177 = *(_QWORD *)&v42[16 * v176 + 32];
      v178 = *(_QWORD *)&v42[16 * v122 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)(v173 + *(_QWORD *)(v197 + 72) * v177, v173 + *(_QWORD *)(v197 + 72) * *(_QWORD *)&v42[16 * v122 + 16], v173 + *(_QWORD *)(v197 + 72) * v178, v175);
      if (v174)
        goto LABEL_118;
      if (v178 < v177)
        goto LABEL_151;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v42);
      if (v176 >= *((_QWORD *)v42 + 2))
        goto LABEL_152;
      v179 = &v42[16 * v176 + 32];
      *(_QWORD *)v179 = v177;
      *((_QWORD *)v179 + 1) = v178;
      v180 = *((_QWORD *)v42 + 2);
      if (v122 > v180)
        goto LABEL_153;
      memmove(&v42[16 * v122 + 16], &v42[16 * v122 + 32], 16 * (v180 - v122));
      *((_QWORD *)v42 + 2) = v180 - 1;
      v122 = v180 - 1;
      if (v180 <= 2)
        goto LABEL_132;
    }
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
    goto LABEL_159;
  }
LABEL_132:
  swift_bridgeObjectRelease();
  if (v184 >= -1)
  {
LABEL_133:
    *(_QWORD *)(v183 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;

  v33 = a1;
  v7 = type metadata accessor for Prompt.Attachment();
  v41 = *(_QWORD **)(v7 - 8);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v36 = (char *)&v31 - v11;
  result = MEMORY[0x24BDAC7A8](v10);
  v35 = (char *)&v31 - v13;
  v39 = a3;
  v32 = a2;
  if (a3 != a2)
  {
    v14 = v41[9];
    v34 = (void (*)(char *, uint64_t, uint64_t))v41[2];
    v44 = v14 * (v39 - 1);
    v37 = v14;
    v15 = v14 * v39;
    v43 = a4;
    while (2)
    {
      v16 = 0;
      v17 = v33;
      v38 = v15;
      do
      {
        v18 = *v43;
        v19 = v15 + v16 + *v43;
        v21 = v34;
        v20 = v35;
        v34(v35, v19, v7);
        v22 = v7;
        v23 = v36;
        v21(v36, v44 + v16 + v18, v22);
        v42 = Prompt.Attachment.priority.getter();
        v24 = Prompt.Attachment.priority.getter();
        v25 = (void (*)(char *, uint64_t))v41[1];
        v26 = v23;
        v7 = v22;
        v25(v26, v22);
        v27 = v20;
        v15 = v38;
        result = ((uint64_t (*)(char *, uint64_t))v25)(v27, v22);
        if (v42 >= v24)
          break;
        v28 = *v43;
        if (!*v43)
        {
          __break(1u);
          return result;
        }
        v29 = v28 + v44 + v16;
        v30 = (void (*)(char *, uint64_t, uint64_t))v41[4];
        v30(v40, v28 + v15 + v16, v22);
        swift_arrayInitWithTakeFrontToBack();
        result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(v29, v40, v22);
        v16 -= v37;
        ++v17;
      }
      while (v39 != v17);
      v44 += v37;
      v15 += v37;
      if (++v39 != v32)
        continue;
      break;
    }
  }
  return result;
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  BOOL v14;
  int64_t v15;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  unint64_t v30;
  BOOL v31;
  unint64_t v33;
  BOOL v34;
  void (*v36)(char *);
  char *v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(char *);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  unint64_t v48;
  char *v50;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(char *);
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v64 = type metadata accessor for Prompt.Attachment();
  v8 = MEMORY[0x24BDAC7A8](v64);
  v61 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v60 = (char *)&v52 - v10;
  v62 = v11;
  v12 = *(_QWORD *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  v13 = a2 - a1;
  v14 = a2 - a1 == 0x8000000000000000 && v12 == -1;
  if (v14)
    goto LABEL_78;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1)
    goto LABEL_79;
  v17 = v13 / v12;
  v18 = v15 / v12;
  if (v13 / v12 >= v15 / v12)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v15 / v12);
    v19 = (char *)(a4 + v18 * v12);
    if (v18 * v12 < 1 || a1 >= a2)
      goto LABEL_72;
    v56 = -v12;
    v36 = *(void (**)(char *))(v62 + 16);
    v54 = a1;
    v55 = v36;
    v53 = a4;
    v59 = v12;
    v37 = v60;
    while (1)
    {
      v38 = a3;
      v40 = v55;
      v39 = v56;
      v63 = a3 + v56;
      v58 = &v19[v56];
      v41 = v64;
      v55(v37);
      v42 = v61;
      v57 = a2 + v39;
      v40(v61);
      v43 = Prompt.Attachment.priority.getter();
      v44 = Prompt.Attachment.priority.getter();
      v45 = *(void (**)(char *, uint64_t))(v62 + 8);
      v45(v42, v41);
      v45(v37, v41);
      if (v43 >= v44)
      {
        a3 = v63;
        if (v38 >= (unint64_t)v19 && v63 < (unint64_t)v19)
        {
          v14 = v38 == (_QWORD)v19;
          v12 = v59;
          v48 = v54;
          v19 = v58;
          if (!v14)
            swift_arrayInitWithTakeBackToFront();
          a4 = v53;
          goto LABEL_68;
        }
        v19 = v58;
      }
      else
      {
        a3 = v63;
        if (v38 >= a2 && v63 < a2)
        {
          v48 = v54;
          if (v38 == a2)
          {
            a2 = v57;
          }
          else
          {
            a2 = v57;
            swift_arrayInitWithTakeBackToFront();
          }
          a4 = v53;
          goto LABEL_66;
        }
        a2 = v57;
      }
      swift_arrayInitWithTakeFrontToBack();
      a4 = v53;
      v48 = v54;
LABEL_66:
      v12 = v59;
LABEL_68:
      if ((unint64_t)v19 <= a4 || a2 <= v48)
        goto LABEL_72;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v13 / v12);
  v19 = (char *)(a4 + v17 * v12);
  if (v17 * v12 >= 1 && a2 < a3)
  {
    v21 = a2;
    v22 = v61;
    v58 = *(char **)(v62 + 16);
    v59 = v12;
    v63 = a3;
    v57 = (unint64_t)v19;
    do
    {
      v23 = v60;
      v24 = v64;
      v25 = v58;
      ((void (*)(char *, unint64_t, uint64_t))v58)(v60, v21, v64);
      ((void (*)(char *, unint64_t, uint64_t))v25)(v22, a4, v24);
      v26 = Prompt.Attachment.priority.getter();
      v27 = Prompt.Attachment.priority.getter();
      v28 = a4;
      v29 = *(void (**)(char *, uint64_t))(v62 + 8);
      v29(v22, v24);
      v29(v23, v24);
      if (v26 >= v27)
      {
        v12 = v59;
        a4 = v28 + v59;
        if (a1 >= v28 && a1 < a4)
        {
          v33 = v63;
          if (a1 != v28)
            swift_arrayInitWithTakeBackToFront();
          v30 = v21;
          goto LABEL_35;
        }
        swift_arrayInitWithTakeFrontToBack();
        v30 = v21;
      }
      else
      {
        v12 = v59;
        v30 = v21 + v59;
        v31 = a1 < v21 || a1 >= v30;
        a4 = v28;
        if (!v31)
        {
          v33 = v63;
          if (a1 != v21)
            swift_arrayInitWithTakeBackToFront();
          goto LABEL_35;
        }
        swift_arrayInitWithTakeFrontToBack();
      }
      v33 = v63;
LABEL_35:
      v19 = (char *)v57;
      a1 += v12;
      v34 = a4 >= v57 || v30 >= v33;
      v21 = v30;
    }
    while (!v34);
  }
LABEL_72:
  v50 = &v19[-a4];
  if (v12 != -1 || v50 != (char *)0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, (uint64_t)v50 / v12);
    return;
  }
LABEL_80:
  __break(1u);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v60;
  BOOL v61;
  int64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;

  v8 = type metadata accessor for Prompt.Attachment();
  v98 = *(_QWORD *)(v8 - 8);
  v99 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v97 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Prompt.Delimiter();
  v95 = *(_QWORD *)(v10 - 8);
  v96 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v94 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)(0);
  v12 = MEMORY[0x24BDAC7A8](v105);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v88 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v104 = (uint64_t)&v88 - v19;
  v20 = MEMORY[0x24BDAC7A8](v18);
  v101 = (uint64_t)&v88 - v21;
  v22 = MEMORY[0x24BDAC7A8](v20);
  v92 = (uint64_t)&v88 - v23;
  v24 = MEMORY[0x24BDAC7A8](v22);
  v91 = (char *)&v88 - v25;
  v26 = MEMORY[0x24BDAC7A8](v24);
  v103 = (char *)&v88 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v100 = (unint64_t)&v88 - v29;
  v30 = *(_QWORD *)(v28 + 72);
  if (!v30)
  {
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  v31 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v30 == -1)
    goto LABEL_90;
  v33 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v30 == -1)
    goto LABEL_91;
  v35 = v31 / v30;
  v36 = v33 / v30;
  v93 = *(_QWORD *)(v28 + 72);
  if (v31 / v30 >= v33 / v30)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v33 / v30);
    v37 = a4 + v36 * v30;
    if (v36 * v30 < 1 || a1 >= a2)
      goto LABEL_52;
    v65 = -v30;
    v103 = v14;
    v91 = v17;
    v92 = -v30;
    v89 = a4;
    while (1)
    {
      v66 = a3;
      v102 = v37;
      v100 = v37 + v65;
      v67 = v101;
      outlined init with copy of TokenGenerationError(v37 + v65, v101, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      v68 = a2 + v65;
      outlined init with copy of TokenGenerationError(a2 + v65, v104, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      outlined init with copy of TokenGenerationError(v67, (uint64_t)v17, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v70 = v97;
        v69 = v98;
        v71 = v99;
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v97, v17, v99);
        v72 = Prompt.Attachment.position.getter();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
      }
      else
      {
        v73 = v94;
        v74 = v95;
        v75 = v96;
        (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v17, v96);
        v72 = Prompt.Delimiter.position.getter();
        v76 = *(void (**)(char *, uint64_t))(v74 + 8);
        v14 = v103;
        v76(v73, v75);
      }
      outlined init with copy of TokenGenerationError(v104, (uint64_t)v14, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v78 = v97;
        v77 = v98;
        v79 = v99;
        (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v97, v14, v99);
        v80 = Prompt.Attachment.position.getter();
        (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v79);
      }
      else
      {
        v81 = v94;
        v82 = v95;
        v83 = v96;
        (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v94, v14, v96);
        v80 = Prompt.Delimiter.position.getter();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v83);
      }
      v65 = v92;
      a3 = v66 + v92;
      _s15TokenGeneration0aB5ErrorOWOhTm_0(v104, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      _s15TokenGeneration0aB5ErrorOWOhTm_0(v101, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (v72 < v80)
      {
        v84 = v66 < a2 || a3 >= a2;
        v30 = v93;
        v14 = v103;
        v17 = v91;
        if (v84)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v66 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        a2 = v68;
        a4 = v89;
        v37 = v102;
        goto LABEL_83;
      }
      v14 = v103;
      v85 = v66 < v102 || a3 >= v102;
      v30 = v93;
      v17 = v91;
      if (v85)
      {
        v86 = v100;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (v66 == v102)
        {
          v37 = v100;
          goto LABEL_82;
        }
        v86 = v100;
        swift_arrayInitWithTakeBackToFront();
      }
      v37 = v86;
LABEL_82:
      a4 = v89;
LABEL_83:
      if (v37 <= a4 || a2 <= a1)
        goto LABEL_52;
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v31 / v30);
  v37 = a4 + v35 * v30;
  if (v35 * v30 >= 1 && a2 < a3)
  {
    v90 = a3;
    v102 = a4 + v35 * v30;
    do
    {
      v39 = v100;
      outlined init with copy of TokenGenerationError(a2, v100, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      outlined init with copy of TokenGenerationError(a4, (uint64_t)v103, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      v40 = v39;
      v41 = (uint64_t)v91;
      outlined init with copy of TokenGenerationError(v40, (uint64_t)v91, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v42 = v97;
        v43 = v98;
        v44 = v41;
        v45 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v97, v44, v99);
        v46 = Prompt.Attachment.position.getter();
      }
      else
      {
        v42 = v94;
        v43 = v95;
        v47 = v41;
        v45 = v96;
        (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v94, v47, v96);
        v46 = Prompt.Delimiter.position.getter();
      }
      v48 = v46;
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v45);
      v49 = v92;
      outlined init with copy of TokenGenerationError((uint64_t)v103, v92, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v50 = v97;
        v51 = v98;
        v52 = v49;
        v53 = v99;
        (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v97, v52, v99);
        v54 = Prompt.Attachment.position.getter();
      }
      else
      {
        v50 = v94;
        v51 = v95;
        v55 = v49;
        v53 = v96;
        (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(v94, v55, v96);
        v54 = Prompt.Delimiter.position.getter();
      }
      v56 = v54;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v53);
      _s15TokenGeneration0aB5ErrorOWOhTm_0((uint64_t)v103, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      _s15TokenGeneration0aB5ErrorOWOhTm_0(v100, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
      v30 = v93;
      if (v48 >= v56)
      {
        if (a1 < a4 || a1 >= a4 + v93)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v57 = a2;
        a4 += v30;
      }
      else
      {
        v57 = a2 + v93;
        if (a1 >= a2 && a1 < v57)
        {
          v60 = v90;
          if (a1 != a2)
            swift_arrayInitWithTakeBackToFront();
          goto LABEL_41;
        }
        swift_arrayInitWithTakeFrontToBack();
      }
      v60 = v90;
LABEL_41:
      v37 = v102;
      a1 += v30;
      v61 = a4 >= v102 || v57 >= v60;
      a2 = v57;
    }
    while (!v61);
  }
LABEL_52:
  v63 = v37 - a4;
  if (v30 != -1 || v63 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4, v63 / v30);
    return;
  }
LABEL_92:
  __break(1u);
}

void specialized Array<A>.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  OUTLINED_FUNCTION_132_0();
  OUTLINED_FUNCTION_8_0(v2, v3);
  if (v0)
  {
    v4 = v1 + 48;
    do
    {
      v5 = *(_QWORD *)(v4 + 32);
      v6 = *(_QWORD *)(v4 + 40);
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_77_0();
      outlined copy of Data?(v5, v6);
      OUTLINED_FUNCTION_72_0();
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_69_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_120_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_198_0();
      OUTLINED_FUNCTION_37_0();
      if (v6 >> 60 == 15)
      {
        OUTLINED_FUNCTION_66_0();
      }
      else
      {
        OUTLINED_FUNCTION_62_0();
        OUTLINED_FUNCTION_60_0();
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_288();
      }
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_186();
      outlined consume of Data?(v5, v6);
      v4 += 64;
      --v0;
    }
    while (v0);
  }
  OUTLINED_FUNCTION_128_0();
}

{
  specialized Array<A>.hash(into:)();
}

{
  specialized Array<A>.hash(into:)();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  uint64_t (*v4)(uint64_t);
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_97_0();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = *(_QWORD *)(v6 + 16);
  OUTLINED_FUNCTION_155_0(v8);
  if (v8)
  {
    v9 = *(_QWORD *)(v5(0) - 8);
    v10 = v7 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(v3, v5, v1);
    do
    {
      dispatch thunk of Hashable.hash(into:)();
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  OUTLINED_FUNCTION_138();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  OUTLINED_FUNCTION_132_0();
  OUTLINED_FUNCTION_8_0(v2, v3);
  if (v0)
  {
    v4 = v1 + 48;
    do
    {
      v5 = *(_QWORD *)(v4 + 32);
      v6 = *(_QWORD *)(v4 + 40);
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_77_0();
      outlined copy of Data?(v5, v6);
      OUTLINED_FUNCTION_72_0();
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_69_0();
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_120_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_198_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_18();
      if (v6 >> 60 == 15)
      {
        OUTLINED_FUNCTION_66_0();
      }
      else
      {
        OUTLINED_FUNCTION_62_0();
        OUTLINED_FUNCTION_60_0();
        OUTLINED_FUNCTION_58_0();
        OUTLINED_FUNCTION_288();
      }
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_186();
      outlined consume of Data?(v5, v6);
      v4 += 64;
      --v0;
    }
    while (v0);
  }
  OUTLINED_FUNCTION_128_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  OUTLINED_FUNCTION_97_0();
  OUTLINED_FUNCTION_8_0(v2, v3);
  if (v0)
  {
    v4 = (unint64_t *)(v1 + 56);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      OUTLINED_FUNCTION_69_0();
      OUTLINED_FUNCTION_63_0();
      outlined copy of Data?(v5, v6);
      OUTLINED_FUNCTION_176_0();
      OUTLINED_FUNCTION_112();
      if (v6 >> 60 == 15)
      {
        OUTLINED_FUNCTION_66_0();
      }
      else
      {
        OUTLINED_FUNCTION_62_0();
        OUTLINED_FUNCTION_286();
        OUTLINED_FUNCTION_212_0();
        OUTLINED_FUNCTION_285();
      }
      v4 += 4;
      OUTLINED_FUNCTION_112();
      outlined consume of Data?(v5, v6);
      --v0;
    }
    while (v0);
  }
  OUTLINED_FUNCTION_138();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_8_0(v2, v3);
  if (v0)
  {
    v4 = v1 + 40;
    do
    {
      v5 = *(_QWORD *)(v4 + 16);
      v6 = *(_QWORD *)(v4 + 24);
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_63_0();
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_72_0();
      OUTLINED_FUNCTION_186();
      if (v5)
      {
        OUTLINED_FUNCTION_62_0();
        OUTLINED_FUNCTION_189();
        OUTLINED_FUNCTION_120_0();
        OUTLINED_FUNCTION_152();
      }
      else
      {
        OUTLINED_FUNCTION_66_0();
      }
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_58_0();
      OUTLINED_FUNCTION_98_0(v6);
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_186();
      OUTLINED_FUNCTION_98_0(v6);
      v4 += 48;
      --v0;
    }
    while (v0);
  }
  OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_7_0();
  v2 = v1;
  v3 = type metadata accessor for DocumentEnvelope(0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_145();
  v5 = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_155_0(v5);
  if (v5)
  {
    OUTLINED_FUNCTION_117_0();
    v7 = v2 + v6;
    v8 = *(_QWORD *)(v4 + 72);
    v9 = MEMORY[0x24BDCDAF0];
    do
    {
      OUTLINED_FUNCTION_314(v7, v0);
      type metadata accessor for URL();
      lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], v9);
      dispatch thunk of Hashable.hash(into:)();
      v10 = v0 + *(int *)(v3 + 20);
      v11 = *(_QWORD *)v10;
      outlined copy of Data._Representation(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
      OUTLINED_FUNCTION_90_0();
      Data.hash(into:)();
      OUTLINED_FUNCTION_282(v11);
      OUTLINED_FUNCTION_298(v0);
      v7 += v8;
      --v5;
    }
    while (v5);
  }
  OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  OUTLINED_FUNCTION_253();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_144_0();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  v7 = OUTLINED_FUNCTION_89_0();
  v8 = type metadata accessor for ToolDescriptionEnvelope(v7);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_68_0();
  v10 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v10);
  if (v10)
  {
    OUTLINED_FUNCTION_117_0();
    v12 = v4 + v11;
    v13 = *(_QWORD *)(v9 + 72);
    do
    {
      outlined init with copy of TokenGenerationError(v12, v2, type metadata accessor for ToolDescriptionEnvelope);
      v14 = OUTLINED_FUNCTION_193();
      outlined init with copy of TokenGenerationError(v14, v15, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      OUTLINED_FUNCTION_121_0(v1);
      if (v16)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        outlined init with take of TokenGenerationError(v1, v0, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        Hasher._combine(_:)(1uLL);
        OUTLINED_FUNCTION_11();
        OUTLINED_FUNCTION_177_0();
        OUTLINED_FUNCTION_46_0();
        OUTLINED_FUNCTION_11();
        OUTLINED_FUNCTION_177_0();
        OUTLINED_FUNCTION_46_0();
        type metadata accessor for GenerationSchema();
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema, (uint64_t (*)(uint64_t))MEMORY[0x24BE3B648], MEMORY[0x24BE3B660]);
        dispatch thunk of Hashable.hash(into:)();
        outlined destroy of Prompt.Turn.Segment(v0, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
      }
      OUTLINED_FUNCTION_93_0(v2);
      v12 += v13;
      --v10;
    }
    while (v10);
  }
  OUTLINED_FUNCTION_4_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt *v4;
  Swift::UInt v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::UInt v8;

  OUTLINED_FUNCTION_97_0();
  OUTLINED_FUNCTION_8_0(v2, v3);
  if (v0)
  {
    v4 = (Swift::UInt *)(v1 + 64);
    do
    {
      v5 = *((unsigned __int8 *)v4 - 32);
      v6 = *(v4 - 3);
      v7 = *(v4 - 1);
      v8 = *v4;
      OUTLINED_FUNCTION_69_0();
      Hasher._combine(_:)(v5);
      OUTLINED_FUNCTION_60_0();
      OUTLINED_FUNCTION_58_0();
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      OUTLINED_FUNCTION_98_0(v6);
      v4 += 5;
      --v0;
    }
    while (v0);
  }
  OUTLINED_FUNCTION_138();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  v5 = OUTLINED_FUNCTION_29_0();
  v18 = *(_QWORD *)(v5 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_145();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_89_0();
  v20 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(v8);
  v9 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_118_0();
  v10 = *(_QWORD *)(v4 + 16);
  OUTLINED_FUNCTION_155_0(v10);
  if (v10)
  {
    OUTLINED_FUNCTION_117_0();
    v12 = v4 + v11;
    v19 = *(_QWORD *)(v9 + 72);
    do
    {
      OUTLINED_FUNCTION_184_0(v12, (uint64_t)v2);
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_90_0();
      OUTLINED_FUNCTION_120_0();
      OUTLINED_FUNCTION_152();
      if (v2[3])
      {
        OUTLINED_FUNCTION_96_0(1u);
        OUTLINED_FUNCTION_189();
        OUTLINED_FUNCTION_120_0();
        OUTLINED_FUNCTION_152();
      }
      else
      {
        OUTLINED_FUNCTION_96_0(0);
      }
      OUTLINED_FUNCTION_155_0(v2[4]);
      Hasher._combine(_:)(v2[5]);
      outlined init with copy of Locale?((uint64_t)v2 + *(int *)(v20 + 32), v1);
      OUTLINED_FUNCTION_121_0(v1);
      if (v13)
      {
        OUTLINED_FUNCTION_96_0(0);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v0, v1, v5);
        OUTLINED_FUNCTION_96_0(1u);
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Locale and conformance Locale, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
        dispatch thunk of Hashable.hash(into:)();
        v14 = OUTLINED_FUNCTION_186_0();
        v15(v14);
      }
      v16 = OUTLINED_FUNCTION_233();
      outlined destroy of Prompt.Turn.Segment(v16, v17);
      v12 += v19;
      --v10;
    }
    while (v10);
  }
  OUTLINED_FUNCTION_4_1();
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for Prompt.ImageAttachment();
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Prompt.Turn.Segment(0);
  v6 = *(_QWORD *)(v19 - 8);
  v7 = MEMORY[0x24BDAC7A8](v19);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v16 - v10;
  v12 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v12);
  if (v12)
  {
    v13 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v18 = *(_QWORD *)(v6 + 72);
    do
    {
      outlined init with copy of TokenGenerationError(v13, (uint64_t)v11, type metadata accessor for Prompt.Turn.Segment);
      outlined init with copy of TokenGenerationError((uint64_t)v11, (uint64_t)v9, type metadata accessor for Prompt.Turn.Segment);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v15 = v16;
        v14 = v17;
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v5, v9, v17);
        Hasher._combine(_:)(1uLL);
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8880], MEMORY[0x24BEB8890]);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v14);
      }
      else
      {
        Hasher._combine(_:)(0);
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v11, type metadata accessor for Prompt.Turn.Segment);
      v13 += v18;
      --v12;
    }
    while (v12);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_180_0(a1, a2);
  v19 = v3;
  if (v3)
  {
    v4 = 0;
    v18 = v2 + 32;
    do
    {
      v5 = (_QWORD *)(v18 + 32 * v4);
      v6 = *v5;
      v7 = v5[1];
      v8 = v5[3];
      Hasher._combine(_:)(*(_QWORD *)(*v5 + 16));
      v9 = *(_QWORD *)(v6 + 16);
      v21 = v8;
      v22 = v7;
      if (v9)
      {
        OUTLINED_FUNCTION_40_0();
        OUTLINED_FUNCTION_88_0();
        OUTLINED_FUNCTION_255();
        v10 = (unint64_t *)(v6 + 56);
        do
        {
          v11 = *(v10 - 1);
          v12 = *v10;
          OUTLINED_FUNCTION_69_0();
          OUTLINED_FUNCTION_63_0();
          outlined copy of Data?(v11, v12);
          OUTLINED_FUNCTION_261();
          OUTLINED_FUNCTION_289();
          OUTLINED_FUNCTION_199_0();
          if (v12 >> 60 == 15)
          {
            OUTLINED_FUNCTION_66_0();
          }
          else
          {
            OUTLINED_FUNCTION_62_0();
            OUTLINED_FUNCTION_53_0(v11);
            OUTLINED_FUNCTION_209_0();
            OUTLINED_FUNCTION_149_0();
          }
          v10 += 4;
          OUTLINED_FUNCTION_199_0();
          OUTLINED_FUNCTION_149_0();
          --v9;
        }
        while (v9);
      }
      else
      {
        OUTLINED_FUNCTION_40_0();
        OUTLINED_FUNCTION_88_0();
        OUTLINED_FUNCTION_255();
      }
      Hasher._combine(_:)(*(_QWORD *)(v22 + 16));
      v13 = *(_QWORD *)(v22 + 16);
      if (v13)
      {
        v20 = v4;
        OUTLINED_FUNCTION_76_0();
        v14 = v22 + 48;
        do
        {
          v15 = *(_QWORD *)(v14 + 32);
          v16 = *(_QWORD *)(v14 + 40);
          OUTLINED_FUNCTION_63_0();
          OUTLINED_FUNCTION_11();
          OUTLINED_FUNCTION_40_0();
          outlined copy of Data?(v15, v16);
          OUTLINED_FUNCTION_210_0();
          OUTLINED_FUNCTION_198_0();
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_69_0();
          OUTLINED_FUNCTION_63_0();
          OUTLINED_FUNCTION_40_0();
          OUTLINED_FUNCTION_177_0();
          OUTLINED_FUNCTION_46_0();
          OUTLINED_FUNCTION_40_0();
          OUTLINED_FUNCTION_211_0();
          OUTLINED_FUNCTION_46_0();
          OUTLINED_FUNCTION_18();
          if (v16 >> 60 == 15)
          {
            OUTLINED_FUNCTION_66_0();
          }
          else
          {
            OUTLINED_FUNCTION_62_0();
            OUTLINED_FUNCTION_316();
            OUTLINED_FUNCTION_213_0();
            OUTLINED_FUNCTION_151_0();
          }
          OUTLINED_FUNCTION_213();
          OUTLINED_FUNCTION_46_0();
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_151_0();
          v14 += 64;
          --v13;
        }
        while (v13);
        OUTLINED_FUNCTION_39_0();
        v4 = v20;
      }
      if (v21)
      {
        if (v21 != 1)
        {
          if (v21 == 2)
          {
            Hasher._combine(_:)(3uLL);
          }
          else
          {
            OUTLINED_FUNCTION_272();
            OUTLINED_FUNCTION_10_0();
            OUTLINED_FUNCTION_72_0();
            OUTLINED_FUNCTION_256();
          }
          goto LABEL_26;
        }
        v17 = 2;
      }
      else
      {
        v17 = 0;
      }
      Hasher._combine(_:)(v17);
LABEL_26:
      ++v4;
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_213();
      OUTLINED_FUNCTION_256();
    }
    while (v4 != v19);
  }
  OUTLINED_FUNCTION_139_0();
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::UInt *v4;
  Swift::UInt v5;

  OUTLINED_FUNCTION_8_0(a1, a2);
  if (v2)
  {
    v4 = (Swift::UInt *)(v3 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_97();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_0(a1, a2);
  if (v2)
  {
    v4 = v3 + 40;
    do
    {
      OUTLINED_FUNCTION_76_0();
      OUTLINED_FUNCTION_185_0();
      OUTLINED_FUNCTION_39_0();
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_22_0();
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;

  OUTLINED_FUNCTION_8_0(a1, a2);
  if (v2)
  {
    v4 = (unsigned __int8 *)(v3 + 48);
    do
    {
      v5 = *v4;
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_210_0();
      OUTLINED_FUNCTION_72_0();
      if (v5 == 2)
      {
        OUTLINED_FUNCTION_66_0();
      }
      else
      {
        OUTLINED_FUNCTION_62_0();
        Hasher._combine(_:)(v5 & 1);
      }
      v4 += 24;
      OUTLINED_FUNCTION_186();
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_22_0();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_180_0(a1, a2);
  v19 = v3;
  if (v3)
  {
    v4 = 0;
    v18 = v2 + 32;
    do
    {
      v5 = (_QWORD *)(v18 + 32 * v4);
      v7 = *v5;
      v6 = v5[1];
      v8 = v5[3];
      Hasher._combine(_:)(*(_QWORD *)(*v5 + 16));
      v9 = *(_QWORD *)(v7 + 16);
      v21 = v8;
      if (v9)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_300();
        OUTLINED_FUNCTION_11();
        v10 = (unint64_t *)(v7 + 56);
        do
        {
          v11 = *(v10 - 1);
          v12 = *v10;
          OUTLINED_FUNCTION_69_0();
          OUTLINED_FUNCTION_63_0();
          outlined copy of Data?(v11, v12);
          OUTLINED_FUNCTION_210_0();
          OUTLINED_FUNCTION_289();
          OUTLINED_FUNCTION_199_0();
          if (v12 >> 60 == 15)
          {
            OUTLINED_FUNCTION_66_0();
          }
          else
          {
            OUTLINED_FUNCTION_62_0();
            OUTLINED_FUNCTION_53_0(v11);
            OUTLINED_FUNCTION_209_0();
            OUTLINED_FUNCTION_149_0();
          }
          v10 += 4;
          OUTLINED_FUNCTION_199_0();
          OUTLINED_FUNCTION_149_0();
          --v9;
        }
        while (v9);
        OUTLINED_FUNCTION_46_0();
        v8 = v21;
      }
      else
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_300();
      }
      Hasher._combine(_:)(*(_QWORD *)(v6 + 16));
      v13 = *(_QWORD *)(v6 + 16);
      if (v13)
      {
        v20 = v4;
        OUTLINED_FUNCTION_76_0();
        v14 = v6 + 48;
        do
        {
          v15 = *(_QWORD *)(v14 + 32);
          v16 = *(_QWORD *)(v14 + 40);
          OUTLINED_FUNCTION_63_0();
          OUTLINED_FUNCTION_11();
          OUTLINED_FUNCTION_40_0();
          outlined copy of Data?(v15, v16);
          OUTLINED_FUNCTION_261();
          OUTLINED_FUNCTION_198_0();
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_69_0();
          OUTLINED_FUNCTION_11();
          OUTLINED_FUNCTION_177_0();
          OUTLINED_FUNCTION_46_0();
          OUTLINED_FUNCTION_40_0();
          OUTLINED_FUNCTION_211_0();
          OUTLINED_FUNCTION_213();
          if (v16 >> 60 == 15)
          {
            OUTLINED_FUNCTION_66_0();
          }
          else
          {
            OUTLINED_FUNCTION_62_0();
            OUTLINED_FUNCTION_316();
            OUTLINED_FUNCTION_213_0();
            OUTLINED_FUNCTION_151_0();
          }
          OUTLINED_FUNCTION_213();
          OUTLINED_FUNCTION_46_0();
          OUTLINED_FUNCTION_37_0();
          OUTLINED_FUNCTION_151_0();
          v14 += 64;
          --v13;
        }
        while (v13);
        OUTLINED_FUNCTION_39_0();
        v4 = v20;
        v8 = v21;
      }
      if (v8)
      {
        if (v8 != 1)
        {
          if (v8 == 2)
          {
            Hasher._combine(_:)(3uLL);
          }
          else
          {
            OUTLINED_FUNCTION_272();
            OUTLINED_FUNCTION_88_0();
            OUTLINED_FUNCTION_260();
            OUTLINED_FUNCTION_176_0();
            OUTLINED_FUNCTION_304();
          }
          goto LABEL_26;
        }
        v17 = 2;
      }
      else
      {
        v17 = 0;
      }
      Hasher._combine(_:)(v17);
LABEL_26:
      ++v4;
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_46_0();
      OUTLINED_FUNCTION_304();
    }
    while (v4 != v19);
  }
  OUTLINED_FUNCTION_139_0();
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void outlined destroy of Prompt.Turn.Segment(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_174_0(v2);
  OUTLINED_FUNCTION_104();
}

uint64_t outlined consume of Prompt.ToolCall?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a7, a8);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.Turn.Role and conformance Prompt.Turn.Role()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.Turn.Role and conformance Prompt.Turn.Role;
  if (!lazy protocol witness table cache variable for type Prompt.Turn.Role and conformance Prompt.Turn.Role)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.Turn.Role, &type metadata for Prompt.Turn.Role);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.Turn.Role and conformance Prompt.Turn.Role);
  }
  return result;
}

void base witness table accessor for Equatable in Prompt.Turn.Segment()
{
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.Turn.Segment and conformance Prompt.Turn.Segment, type metadata accessor for Prompt.Turn.Segment, (uint64_t)&protocol conformance descriptor for Prompt.Turn.Segment);
}

void base witness table accessor for Equatable in Prompt.Turn()
{
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.Turn and conformance Prompt.Turn, type metadata accessor for Prompt.Turn, (uint64_t)&protocol conformance descriptor for Prompt.Turn);
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Kind, &type metadata for Prompt.ToolCall.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Kind and conformance Prompt.ToolCall.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Function, &type metadata for Prompt.ToolCall.Function);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function and conformance Prompt.ToolCall.Function);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall and conformance Prompt.ToolCall()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall and conformance Prompt.ToolCall;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall and conformance Prompt.ToolCall)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall, &type metadata for Prompt.ToolCall);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall and conformance Prompt.ToolCall);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCallResult, &type metadata for Prompt.ToolCallResult);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCallResult and conformance Prompt.ToolCallResult);
  }
  return result;
}

void sub_248B21CDC(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = Prompt.Turn.content.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_104();
}

_QWORD *initializeBufferWithCopyOfBuffer for Prompt.Turn(_BYTE *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
    v13 = a3[7];
    *(_QWORD *)((char *)v4 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
    *((_BYTE *)v4 + v13) = *((_BYTE *)a2 + v13);
    v14 = a3[9];
    *(_QWORD *)((char *)v4 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = *(_QWORD *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v17)
    {
      *v15 = *v16;
      v15[1] = v17;
      v18 = v16[3];
      v15[2] = v16[2];
      v15[3] = v18;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v19 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v19;
    }
  }
  return v4;
}

uint64_t destroy for Prompt.Turn(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Locale();
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + *(int *)(a2 + 36) + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_BYTE *initializeWithCopy for Prompt.Turn(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  a1[v11] = a2[v11];
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(_QWORD *)&a2[v12 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15)
  {
    *v13 = *v14;
    v13[1] = v15;
    v16 = v14[3];
    v13[2] = v14[2];
    v13[3] = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v17 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v17;
  }
  return a1;
}

_BYTE *assignWithCopy for Prompt.Turn(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 24))(v7, v8, v9);
LABEL_7:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = a3[9];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_QWORD *)&a1[v14 + 8];
  v18 = v16[1];
  if (v17)
  {
    if (v18)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15[2] = v16[2];
      v15[3] = v16[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Prompt.ToolCallResult((uint64_t)v15);
      v19 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v19;
    }
  }
  else if (v18)
  {
    *v15 = *v16;
    v15[1] = v16[1];
    v15[2] = v16[2];
    v15[3] = v16[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v20 = *((_OWORD *)v16 + 1);
    *(_OWORD *)v15 = *(_OWORD *)v16;
    *((_OWORD *)v15 + 1) = v20;
  }
  return a1;
}

uint64_t outlined destroy of Prompt.ToolCallResult(uint64_t a1)
{
  destroy for Prompt.ToolCall.Kind(a1, &type metadata for Prompt.ToolCallResult);
  return a1;
}

_BYTE *initializeWithTake for Prompt.Turn(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  v11 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  a1[v11] = a2[v11];
  v12 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  return a1;
}

_BYTE *assignWithTake for Prompt.Turn(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (EnumTagSinglePayload)
  {
    if (!v11)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  v12 = *(_QWORD *)(v9 - 8);
  if (v11)
  {
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v7, v9);
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 40))(v7, v8, v9);
LABEL_7:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_bridgeObjectRelease();
  v14 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_bridgeObjectRelease();
  v15 = a3[9];
  v16 = (uint64_t)&a1[v15];
  v17 = &a2[v15];
  if (!*(_QWORD *)&a1[v15 + 8])
  {
LABEL_11:
    v20 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v20;
    return a1;
  }
  v18 = *((_QWORD *)v17 + 1);
  if (!v18)
  {
    outlined destroy of Prompt.ToolCallResult(v16);
    goto LABEL_11;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = v18;
  swift_bridgeObjectRelease();
  v19 = *((_QWORD *)v17 + 3);
  *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
  *(_QWORD *)(v16 + 24) = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.Turn()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B224C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v6);
  else
    OUTLINED_FUNCTION_97();
}

uint64_t storeEnumTagSinglePayload for Prompt.Turn()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B22548(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1 + *(int *)(a4 + 20), a2, a2, v8);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
    OUTLINED_FUNCTION_97();
  }
}

void type metadata completion function for Prompt.Turn()
{
  unint64_t v0;

  type metadata accessor for Locale?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Locale?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Locale?)
  {
    type metadata accessor for Locale();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale?);
  }
}

uint64_t getEnumTagSinglePayload for Prompt.Turn.Role(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.Turn.Role(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_248B2277C + 4 * byte_248BBF36D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_248B227B0 + 4 * byte_248BBF368[v4]))();
}

uint64_t sub_248B227B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B227B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B227C0);
  return result;
}

uint64_t sub_248B227CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B227D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_248B227D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B227E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for Prompt.Turn.Role(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void type metadata accessor for Prompt.Turn.Role()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t *initializeBufferWithCopyOfBuffer for Prompt.Turn.Segment(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Prompt.ImageAttachment();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Prompt.Turn.Segment(uint64_t a1)
{
  uint64_t v2;

  if (swift_getEnumCaseMultiPayload() != 1)
    return swift_bridgeObjectRelease();
  v2 = type metadata accessor for Prompt.ImageAttachment();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

_QWORD *initializeWithCopy for Prompt.Turn.Segment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Prompt.ImageAttachment();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for Prompt.Turn.Segment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Prompt.ImageAttachment();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for Prompt.Turn.Segment(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Prompt.ImageAttachment();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for Prompt.Turn.Segment(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for Prompt.Turn.Segment);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Prompt.ImageAttachment();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for Prompt.Turn.Segment()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for Prompt.Turn.Segment()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Prompt.ImageAttachment();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for Prompt.ToolCall(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >> 60 != 15)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 48), v3);
  return result;
}

uint64_t initializeWithCopy for Prompt.ToolCall(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a2 + 6;
  v7 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    outlined copy of Data._Representation(*v6, v7);
    *(_QWORD *)(a1 + 48) = v8;
    *(_QWORD *)(a1 + 56) = v7;
  }
  return a1;
}

_QWORD *assignWithCopy for Prompt.ToolCall(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 6;
  v5 = a2[7];
  if (a1[7] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      v8 = a1[6];
      v9 = a1[7];
      a1[6] = v7;
      a1[7] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[6] = v6;
  a1[7] = v5;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for Prompt.ToolCall(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2 + 6;
  v8 = a1[7];
  if (v8 >> 60 != 15)
  {
    v9 = a2[7];
    if (v9 >> 60 != 15)
    {
      v10 = a1[6];
      a1[6] = *v7;
      a1[7] = v9;
      outlined consume of Data._Representation(v10, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 6));
  }
  *((_OWORD *)a1 + 3) = *(_OWORD *)v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for Prompt.ToolCall(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.ToolCall(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for Prompt.ToolCall()
{
  OUTLINED_FUNCTION_181_0();
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTag for Prompt.ToolCall.Kind()
{
  return 0;
}

void type metadata accessor for Prompt.ToolCall.Kind()
{
  OUTLINED_FUNCTION_181_0();
}

void type metadata accessor for Prompt.ToolCall.Function()
{
  OUTLINED_FUNCTION_181_0();
}

void type metadata accessor for Prompt.ToolCallResult()
{
  OUTLINED_FUNCTION_181_0();
}

void outlined destroy of Locale?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_174_0(v2);
  OUTLINED_FUNCTION_104();
}

uint64_t outlined copy of FinishReason(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of FinishReason(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Function.Envelope, &unk_2519D2E00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Function.Envelope, &unk_2519D2E00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope and conformance Prompt.ToolCall.Function.Envelope);
  }
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TurnSpan #1 in Prompt.turns()(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 40);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TurnSpan #1 in Prompt.turns()(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for TurnSpan #1 in Prompt.turns()()
{
  return &unk_2519D2BC0;
}

uint64_t destroy for Prompt.ToolCall.Kind()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeWithCopy for Prompt.ToolCall.Kind(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_104();
}

_QWORD *assignWithCopy for Prompt.ToolCall.Kind(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_213();
  return a1;
}

void assignWithTake for Prompt.ToolCall.Kind(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_104();
}

uint64_t getEnumTagSinglePayload for Prompt.ToolCall.Kind(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Prompt.ToolCall.Kind(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for Prompt.ToolCall.Function.Envelope()
{
  return &unk_2519D2E00;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TurnDelimiter #1 in Prompt.turns()(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 1);
      v4 = v3 >= 2;
      v2 = (v3 + 2147483646) & 0x7FFFFFFF;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TurnDelimiter #1 in Prompt.turns()(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

void *type metadata accessor for TurnDelimiter #1 in Prompt.turns()()
{
  return &unk_2519D2C50;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Function.Envelope.CodingKeys, &unk_2519D2D70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Function.Envelope.CodingKeys, &unk_2519D2D70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Function.Envelope.CodingKeys, &unk_2519D2D70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Prompt.ToolCall.Function.Envelope.CodingKeys, &unk_2519D2D70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Prompt.ToolCall.Function.Envelope.CodingKeys and conformance Prompt.ToolCall.Function.Envelope.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Prompt.ToolCall.Function.Envelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248B24194 + 4 * byte_248BBF377[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_248B241C8 + 4 * byte_248BBF372[v4]))();
}

uint64_t sub_248B241C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B241D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B241D8);
  return result;
}

uint64_t sub_248B241E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B241ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_248B241F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B241F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Prompt.ToolCall.Function.Envelope.CodingKeys()
{
  return &unk_2519D2D70;
}

uint64_t OUTLINED_FUNCTION_0_3()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  outlined copy of Data?(v1, v2);
  outlined copy of Data?(v0, v3);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_3()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

void OUTLINED_FUNCTION_5_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

void OUTLINED_FUNCTION_8_0(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(_QWORD *)(a2 + 16));
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_11_0(uint64_t a1, unint64_t a2)
{
  outlined copy of Data?(a1, a2);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_12_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 - 712);
  __swift_storeEnumTagSinglePayload(v2, 1, 1, a1);
  return outlined init with copy of Locale?(v2, *(_QWORD *)(v1 - 688));
}

uint64_t OUTLINED_FUNCTION_13_0(uint64_t a1, unint64_t a2)
{
  outlined copy of Data?(a1, a2);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_15_0()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data?(v1, v0);
  outlined copy of Data?(v1, v0);
  return __DataStorage._bytes.getter();
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0 + *(int *)(type metadata accessor for Prompt.Turn(0) + 20);
  return __swift_storeEnumTagSinglePayload(v2, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data?(v1, v0);
  outlined copy of Data?(v1, v0);
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_23_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + a1;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  closure #1 in static Data.== infix(_:_:)(v2, v5, v1, v3);
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_27_0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  return outlined init with copy of Locale?(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0));
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_storeEnumTagSinglePayload(v1, 1, 1, v2);
  return outlined init with copy of Locale?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_35_0()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data?(v1, v0);
  outlined copy of Data?(v1, v0);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_37_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_41_0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  outlined consume of Data?(v1, v2);
  outlined consume of Data?(v0, v3);
  outlined consume of Data?(v1, v2);
  outlined consume of Data?(v0, v3);
  outlined consume of Data?(v0, v3);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_44_0(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data._Representation(a1, v1);
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_46_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_52_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return __swift_storeEnumTagSinglePayload(v4, 1, 1, a4);
}

uint64_t OUTLINED_FUNCTION_53_0(uint64_t a1)
{
  unint64_t v1;

  return outlined copy of Data._Representation(a1, v1);
}

uint64_t OUTLINED_FUNCTION_54_0()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data?(v1, v0);
  return outlined copy of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_55_0()
{
  unint64_t v0;
  uint64_t v1;

  outlined consume of Data?(v1, v0);
  return outlined consume of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_56_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  return *(_QWORD *)(a14 + v14 + 32);
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  uint64_t v0;
  unint64_t v1;

  outlined copy of Data?(v0, v1);
  return __DataStorage._bytes.getter();
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  outlined consume of Data?(v0, v3);
  outlined consume of Data?(v1, v2);
  outlined consume of Data?(v0, v3);
  outlined consume of Data?(v0, v3);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t result;

  v2 = v0;
  v3 = *(_BYTE **)(v1 - 728);
  result = __swift_storeEnumTagSinglePayload((uint64_t)&v3[*(int *)(*(_QWORD *)(v1 - 656) + 20)], 1, 1, v2);
  *v3 = 1;
  return result;
}

void OUTLINED_FUNCTION_62_0()
{
  Hasher._combine(_:)(1u);
}

uint64_t OUTLINED_FUNCTION_63_0()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_65_0()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_66_0()
{
  Hasher._combine(_:)(0);
}

void OUTLINED_FUNCTION_69_0()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_70_0()
{
  return type metadata accessor for Prompt.Turn(0);
}

uint64_t OUTLINED_FUNCTION_71_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of Prompt.ToolCallResult?(*(_QWORD *)(v1 - 440), v0);
}

uint64_t OUTLINED_FUNCTION_72_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return String.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  uint64_t v0;
  unint64_t v1;

  outlined copy of Data?(v0, v1);
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_79_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of FinishReason(v0, v1);
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  uint64_t v0;
  unint64_t v1;

  outlined copy of Data?(v0, v1);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return static Prompt.+= infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  outlined consume of Data?(v1, v2);
  outlined consume of Data?(v0, v3);
  return outlined consume of Data?(v0, v3);
}

uint64_t OUTLINED_FUNCTION_85_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_86_0(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of FinishReason(a1, v1);
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_90_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  outlined copy of FinishReason(v0, v1);
  outlined copy of FinishReason(v2, v3);
  outlined consume of FinishReason(v0, v1);
  return outlined consume of FinishReason(v2, v3);
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  outlined consume of Data?(v0, v1);
  outlined consume of Data?(v3, v2);
  outlined consume of Data?(v3, v2);
  return outlined consume of Data?(v0, v1);
}

void OUTLINED_FUNCTION_93_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(a1, v1);
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_95_0()
{
  return String.index(_:offsetBy:)();
}

void OUTLINED_FUNCTION_96_0(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_98_0(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data._Representation(a1, v1);
}

uint64_t OUTLINED_FUNCTION_100_0()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_102_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3 + a1;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  closure #1 in static Data.== infix(_:_:)(v3, v5, v2, v1);
}

void OUTLINED_FUNCTION_103_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3 + a1;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  closure #1 in static Data.== infix(_:_:)(v3, v5, v2, v1);
}

uint64_t OUTLINED_FUNCTION_104_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  outlined copy of Data?(v13, v14);
  outlined copy of Data?(a13, v15);
  outlined consume of Data?(v13, v14);
  return a13;
}

void OUTLINED_FUNCTION_105_0()
{
  JUMPOUT(0x2495A6A58);
}

void OUTLINED_FUNCTION_107_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3 + a1;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  closure #1 in static Data.== infix(_:_:)(v3, v5, v2, v1);
}

void OUTLINED_FUNCTION_108_0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3 + a1;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  closure #1 in static Data.== infix(_:_:)(v3, v5, v2, v1);
}

uint64_t OUTLINED_FUNCTION_109_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(*(_QWORD *)(v1 - 720) + *(int *)(*(_QWORD *)(v1 - 656) + 20), 1, 1, v0);
}

void OUTLINED_FUNCTION_110_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
}

uint64_t OUTLINED_FUNCTION_111_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_114_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_115_0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  outlined consume of Data?(v0, v1);
  outlined consume of Data?(v2, v3);
  return outlined consume of Data?(v2, v3);
}

uint64_t OUTLINED_FUNCTION_116_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_119_0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;

  outlined copy of Data?(v0, v1);
  outlined copy of Data?(v3, v2);
  outlined consume of Data?(v0, v1);
  return v3;
}

uint64_t OUTLINED_FUNCTION_120_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_121_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_123_0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_124_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_126_0()
{
  uint64_t v0;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(*(_QWORD *)(v0 - 568) + 16) + 1, 1, *(_QWORD *)(v0 - 568));
}

uint64_t OUTLINED_FUNCTION_127_0()
{
  return Prompt.string.getter();
}

Swift::Int OUTLINED_FUNCTION_130_0()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_131_0(int a1, int a2, size_t a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char __s1)
{
  const void *v23;

  return memcmp(&__s1, v23, a3);
}

void OUTLINED_FUNCTION_133_0(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1, *(_QWORD *)(v2 - 568));
}

void OUTLINED_FUNCTION_134_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of Locale?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_136_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of Locale?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_137_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_138_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 200))(v0, v1);
}

void OUTLINED_FUNCTION_140_0()
{
  uint64_t *v0;
  uint64_t v1;

  outlined destroy of Locale?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_141_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_142_0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  outlined consume of Data?(v0, v1);
  outlined consume of Data?(v2, v3);
  return outlined consume of Data?(v2, v3);
}

uint64_t OUTLINED_FUNCTION_143_0()
{
  return Prompt.string.getter();
}

uint64_t OUTLINED_FUNCTION_144_0()
{
  return type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
}

uint64_t OUTLINED_FUNCTION_145_0()
{
  return type metadata accessor for Prompt.Turn.Segment(0);
}

uint64_t OUTLINED_FUNCTION_147_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_151_0()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_152_0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 264) + 8))(v0, *(_QWORD *)(v1 - 176));
}

uint64_t OUTLINED_FUNCTION_154_0()
{
  return Prompt.string.getter();
}

void OUTLINED_FUNCTION_155_0(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_157_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  return v1 + ((v2 + 32) & ~v2);
}

uint64_t OUTLINED_FUNCTION_159_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_160_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_163_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_164_0()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of Data?(v1, v0);
  outlined copy of Data?(v1, v0);
  return swift_retain();
}

void OUTLINED_FUNCTION_166_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + *(int *)(v1 + 24)) = v0;
}

uint64_t OUTLINED_FUNCTION_167_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_168_0()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_169_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + *(int *)(v2 + 24)) = v0;
}

uint64_t OUTLINED_FUNCTION_170_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_171_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
}

uint64_t OUTLINED_FUNCTION_174_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_175_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return __swift_instantiateConcreteTypeFromMangledName(a5);
}

uint64_t OUTLINED_FUNCTION_176_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_177_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_179_0(_QWORD *a1, _QWORD *a2)
{
  return specialized static Array<A>.== infix(_:_:)(a1, a2);
}

void OUTLINED_FUNCTION_180_0(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(_QWORD *)(a2 + 16));
}

uint64_t OUTLINED_FUNCTION_183_0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,__int16 a21,char __s2,uint64_t a23,char __s1)
{
  size_t v24;

  return memcmp(&__s1, &__s2, v24);
}

void OUTLINED_FUNCTION_184_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of TokenGenerationError(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_185_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_186_0()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_187_0()
{
  unint64_t v0;

  return v0 >> 24;
}

uint64_t OUTLINED_FUNCTION_188_0()
{
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_189_0(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Locale?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_190_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16)
{
  uint64_t v16;

  return outlined consume of Data._Representation(v16, a16);
}

uint64_t OUTLINED_FUNCTION_193()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_194()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_195_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_197_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 232) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_198_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_199_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_201_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_202_0(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_203_0()
{
  uint64_t v0;

  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_204_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_207_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_209_0()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_210_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_211_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_212_0()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_213_0()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_214_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 - 24);
}

uint64_t OUTLINED_FUNCTION_216_0(const void *a1, uint64_t a2, size_t a3)
{
  const void *v3;

  return memcmp(a1, v3, a3);
}

void OUTLINED_FUNCTION_219_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  closure #1 in static Data.== infix(_:_:)(a1, a2, v3, v2);
}

uint64_t OUTLINED_FUNCTION_221_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_222_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_223_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

void OUTLINED_FUNCTION_224(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of TokenGenerationError(a1, a2, v2);
}

BOOL OUTLINED_FUNCTION_225@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_227()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_228()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_229()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_230(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data._Representation(a1, v1);
}

void OUTLINED_FUNCTION_232(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of TokenGenerationError(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_233()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_234()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 184) = 0;
}

uint64_t OUTLINED_FUNCTION_235(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_236()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_237()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_240()
{
  return 0;
}

void OUTLINED_FUNCTION_242(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
}

uint64_t OUTLINED_FUNCTION_244()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_245()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_246()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_247()
{
  return type metadata accessor for Prompt.ImageAttachment();
}

uint64_t OUTLINED_FUNCTION_248()
{
  return type metadata accessor for Prompt.Turn.Segment(0);
}

uint64_t OUTLINED_FUNCTION_249(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_250(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_252(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(a1, v1);
}

uint64_t OUTLINED_FUNCTION_253()
{
  return type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
}

uint64_t OUTLINED_FUNCTION_255()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of FinishReason(v1, v0);
}

uint64_t OUTLINED_FUNCTION_256()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of FinishReason(v1, v0);
}

void OUTLINED_FUNCTION_258(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of TokenGenerationError(a1, a2, v2);
}

unint64_t OUTLINED_FUNCTION_259()
{
  unint64_t v0;

  return v0 >> 24;
}

uint64_t OUTLINED_FUNCTION_260()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_261()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_262()
{
  return String.index(_:offsetBy:)();
}

uint64_t OUTLINED_FUNCTION_264(uint64_t a1)
{
  return outlined consume of FinishReason(a1, 1uLL);
}

uint64_t OUTLINED_FUNCTION_265(uint64_t a1)
{
  return outlined consume of FinishReason(a1, 2uLL);
}

uint64_t OUTLINED_FUNCTION_266()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_268(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 568) = result;
  return result;
}

void OUTLINED_FUNCTION_269(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of TokenGenerationError(a1, *(_QWORD *)(a2 - 256), v2);
}

uint64_t OUTLINED_FUNCTION_271()
{
  return Prompt.Attachment.position.getter();
}

void OUTLINED_FUNCTION_272()
{
  Hasher._combine(_:)(1uLL);
}

uint64_t OUTLINED_FUNCTION_273(uint64_t a1)
{
  return outlined consume of FinishReason(a1, 0);
}

uint64_t OUTLINED_FUNCTION_274()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_275@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_276()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

BOOL OUTLINED_FUNCTION_277@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL OUTLINED_FUNCTION_278@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_279(uint64_t a1, uint64_t a2, size_t a3)
{
  const void *v3;
  uint64_t v4;

  return memcmp((const void *)(v4 - 112), v3, a3);
}

uint64_t OUTLINED_FUNCTION_280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_281()
{
  return Prompt.string.getter();
}

uint64_t OUTLINED_FUNCTION_282(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data._Representation(a1, v1);
}

void OUTLINED_FUNCTION_283(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_284()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of Locale?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_285()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_286()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

void OUTLINED_FUNCTION_287()
{
  JUMPOUT(0x2495A7370);
}

uint64_t OUTLINED_FUNCTION_288()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_289()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_290(uint64_t a1)
{
  unint64_t v1;

  return outlined copy of FinishReason(a1, v1);
}

uint64_t OUTLINED_FUNCTION_291()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_292()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_293(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;

  return outlined copy of Data._Representation(v10, a10);
}

uint64_t OUTLINED_FUNCTION_294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;

  return outlined consume of Data._Representation(v7, a7);
}

uint64_t OUTLINED_FUNCTION_295()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_296()
{
  return Prompt.string.getter();
}

uint64_t OUTLINED_FUNCTION_297(const void *a1, uint64_t a2, size_t a3)
{
  const void *v3;

  return memcmp(a1, v3, a3);
}

void OUTLINED_FUNCTION_298(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(a1, v1);
}

uint64_t OUTLINED_FUNCTION_299(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of Locale?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_300()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of FinishReason(v1, v0);
}

uint64_t OUTLINED_FUNCTION_302()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

void OUTLINED_FUNCTION_303(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Prompt.Turn.Segment(v2, a2);
}

uint64_t OUTLINED_FUNCTION_304()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of FinishReason(v0, v1);
}

uint64_t OUTLINED_FUNCTION_305()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

uint64_t OUTLINED_FUNCTION_306()
{
  return __DataStorage._offset.getter();
}

uint64_t OUTLINED_FUNCTION_308()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_310()
{
  return outlined consume of Data?(0, 0xF000000000000000);
}

uint64_t OUTLINED_FUNCTION_312()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_313()
{
  return type metadata accessor for Prompt.Turn(0);
}

void OUTLINED_FUNCTION_314(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of TokenGenerationError(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_315()
{
  return static Prompt.+= infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_316()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of Data._Representation(v0, v1);
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS15TokenGeneration16PromptCompletionV10AggregatorV09CandidateI033_D174D4387BF6B304FA76AEBF3D593BFDLLV_G_AJ0J0Vs5NeverOTg504_s15e12Generation16gh3V10i15V6finishACyFAC9j10VAE0gE033_klmnopQ11BFDLLVXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v26 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v26;
    v4 = specialized Dictionary.Values.startIndex.getter(v2);
    if ((v4 & 0x8000000000000000) == 0)
    {
      v6 = v4;
      if (v4 < 1 << *(_BYTE *)(v2 + 32))
      {
        v7 = v2 + 64;
        v20 = v2 + 64;
        v21 = v2;
        while ((*(_QWORD *)(v7 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
        {
          if (v5 != *(_DWORD *)(v2 + 36))
            goto LABEL_24;
          v22 = v5;
          v8 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 32 * v6);
          v10 = *v8;
          v9 = v8[1];
          v11 = v3;
          v13 = v8[2];
          v12 = v8[3];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          outlined copy of FinishReason?(v13, v12);
          v25 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
          swift_bridgeObjectRelease();
          if (v12 == 3)
            v14 = 0;
          else
            v14 = v13;
          if (v12 == 3)
            v15 = 0;
          else
            v15 = v12;
          v23 = v15;
          v24 = v14;
          outlined copy of FinishReason?(v13, v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v16 = v12;
          v3 = v11;
          outlined consume of FinishReason?(v13, v16);
          v17 = *(_QWORD *)(v11 + 16);
          if (v17 >= *(_QWORD *)(v11 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v3 = v11;
          }
          *(_QWORD *)(v3 + 16) = v17 + 1;
          v18 = (_QWORD *)(v3 + 32 * v17);
          v18[4] = v10;
          v18[5] = v25;
          v18[6] = v24;
          v18[7] = v23;
          v2 = v21;
          if ((uint64_t)v6 >= -(-1 << *(_BYTE *)(v21 + 32)))
            goto LABEL_25;
          v7 = v20;
          if ((*(_QWORD *)(v20 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
            goto LABEL_26;
          if (v22 != *(_DWORD *)(v21 + 36))
            goto LABEL_27;
          v19 = _HashTable.occupiedBucket(after:)();
          if (!--v1)
            return;
          v6 = v19;
          if ((v19 & 0x8000000000000000) == 0)
          {
            v5 = *(_DWORD *)(v21 + 36);
            if (v19 < 1 << *(_BYTE *)(v21 + 32))
              continue;
          }
          goto LABEL_28;
        }
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
      }
    }
LABEL_28:
    __break(1u);
  }
}

uint64_t PromptCompletion.modelInformation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 PromptCompletion.modelInformation.setter(uint64_t a1)
{
  __n128 *v1;
  uint64_t v2;
  unint64_t v3;
  __n128 result;
  __n128 v5;

  OUTLINED_FUNCTION_75_0(a1);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = v5;
  *v1 = v5;
  v1[1].n128_u64[0] = v3;
  return result;
}

uint64_t (*PromptCompletion.modelInformation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.candidates.getter()
{
  return swift_bridgeObjectRetain();
}

void PromptCompletion.candidates.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  OUTLINED_FUNCTION_104();
}

uint64_t (*PromptCompletion.candidates.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletion.usage.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

__n128 PromptCompletion.usage.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*PromptCompletion.usage.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.renderedPrompt.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  OUTLINED_FUNCTION_32_1();
  return outlined init with copy of Prompt.Rendering?(v1 + v3, a1);
}

uint64_t type metadata accessor for PromptCompletion(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletion);
}

uint64_t outlined init with copy of Prompt.Rendering?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PromptCompletion.renderedPrompt.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for PromptCompletion(0) + 28);
  return outlined assign with take of Prompt.Rendering?(a1, v3);
}

uint64_t outlined assign with take of Prompt.Rendering?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*PromptCompletion.renderedPrompt.modify())()
{
  type metadata accessor for PromptCompletion(0);
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletion.init(modelInformation:candidates:usage:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;
  __int128 v14;

  OUTLINED_FUNCTION_75_0(a1);
  v6 = *(_QWORD *)(v5 + 16);
  v8 = *v7;
  v9 = v7[1];
  OUTLINED_FUNCTION_32_1();
  v11 = a3 + v10;
  v12 = OUTLINED_FUNCTION_19_0();
  __swift_storeEnumTagSinglePayload(v11, 1, 1, v12);
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v6;
  *(_QWORD *)(a3 + 24) = a2;
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = v9;
  OUTLINED_FUNCTION_39_1();
  return result;
}

uint64_t PromptCompletion.init(modelInformation:candidates:usage:renderedPrompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  OUTLINED_FUNCTION_75_0(a1);
  v8 = *(_QWORD *)(v7 + 16);
  v10 = *v9;
  v11 = v9[1];
  OUTLINED_FUNCTION_32_1();
  v13 = a4 + v12;
  v14 = OUTLINED_FUNCTION_19_0();
  __swift_storeEnumTagSinglePayload(v13, 1, 1, v14);
  *(_OWORD *)a4 = v16;
  *(_QWORD *)(a4 + 16) = v8;
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = v10;
  *(_QWORD *)(a4 + 40) = v11;
  return outlined assign with take of Prompt.Rendering?(a3, v13);
}

void PromptCompletion.Candidate.segments.setter()
{
  uint64_t v0;
  _QWORD *v1;

  OUTLINED_FUNCTION_72_1();
  *v1 = v0;
  OUTLINED_FUNCTION_104();
}

uint64_t (*PromptCompletion.Candidate.segments.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.Candidate.toolCalls.getter()
{
  return swift_bridgeObjectRetain();
}

void PromptCompletion.Candidate.toolCalls.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  OUTLINED_FUNCTION_104();
}

uint64_t (*PromptCompletion.Candidate.toolCalls.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletion.Candidate.finishReason.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of FinishReason(v2, v3);
}

void PromptCompletion.Candidate.finishReason.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  outlined consume of FinishReason(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletion.Candidate.finishReason.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletion.Candidate.init(segments:toolCalls:finishReason:)(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  a4->n128_u64[0] = a1;
  a4->n128_u64[1] = a2;
  OUTLINED_FUNCTION_78_1(a4, *a3);
}

void PromptCompletion.Candidate.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_88_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_189();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_152();
  switch(v1)
  {
    case 0:
      v2 = 0;
      goto LABEL_7;
    case 1:
      v2 = 2;
      goto LABEL_7;
    case 2:
      v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      OUTLINED_FUNCTION_22_0();
      return;
  }
  Hasher._combine(_:)(1uLL);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_44_1();
  v3 = OUTLINED_FUNCTION_195_0();
  outlined consume of FinishReason(v3, v4);
}

uint64_t static PromptCompletion.Candidate.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v9[2];
  uint64_t v10[2];

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) != 0
    && (OUTLINED_FUNCTION_90_0(), specialized static Array<A>.== infix(_:_:)(), (v6 & 1) != 0))
  {
    v10[0] = v2;
    v10[1] = v3;
    v9[0] = v4;
    v9[1] = v5;
    static FinishReason.== infix(_:_:)(v10, v9);
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

void static FinishReason.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (!v3)
  {
    if (!v5)
    {
      v3 = 0;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v3 == 1)
  {
    if (v5 == 1)
    {
      v3 = 1;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v3 != 2)
  {
    if (v5 >= 3 && (v2 != v4 || v3 != v5))
      OUTLINED_FUNCTION_24_0();
    goto LABEL_12;
  }
  if (v5 != 2)
  {
LABEL_12:
    outlined copy of FinishReason(v4, v5);
    outlined copy of FinishReason(v2, v3);
    goto LABEL_13;
  }
  v3 = 2;
LABEL_13:
  outlined consume of FinishReason(v2, v3);
  outlined consume of FinishReason(v4, v5);
  OUTLINED_FUNCTION_22_0();
}

void PromptCompletion.Candidate.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_76_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_88_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_112();
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(1uLL);
        OUTLINED_FUNCTION_10_0();
        OUTLINED_FUNCTION_44_1();
        v3 = OUTLINED_FUNCTION_195_0();
        outlined consume of FinishReason(v3, v4);
        goto LABEL_9;
      }
      v2 = 3;
    }
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
LABEL_9:
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Candidate()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = 2;
    }
    else
    {
      if (v2 != 2)
      {
        Hasher._combine(_:)(1uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of FinishReason(v1, v2);
        return Hasher._finalize()();
      }
      v3 = 3;
    }
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t PromptCompletion.Segment.content.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  swift_bridgeObjectRetain();
  v6 = OUTLINED_FUNCTION_90_0();
  return outlined copy of Data?(v6, v7);
}

__n128 PromptCompletion.Segment.content.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __int128 v6;

  OUTLINED_FUNCTION_75_0(a1);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_30_1();
  *(_OWORD *)v1 = v6;
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  OUTLINED_FUNCTION_39_1();
  return result;
}

uint64_t (*PromptCompletion.Segment.content.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletion.Segment.init(content:)(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;

  v2 = a1->n128_u64[1];
  a2->n128_u64[0] = a1->n128_u64[0];
  a2->n128_u64[1] = v2;
  OUTLINED_FUNCTION_78_1(a2, a1[1]);
}

void PromptCompletion.Segment.hash(into:)()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;

  OUTLINED_FUNCTION_37_1();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_152();
  if (v0 >> 60 == 15)
  {
    OUTLINED_FUNCTION_20_0(0);
    OUTLINED_FUNCTION_22_0();
  }
  else
  {
    OUTLINED_FUNCTION_20_0(1u);
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    v1 = OUTLINED_FUNCTION_195_0();
    OUTLINED_FUNCTION_7_1(v1, v2);
  }
}

uint64_t static PromptCompletion.Segment.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  OUTLINED_FUNCTION_11_1(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11, v12, v13, v14, v15);
  return v8 & 1;
}

uint64_t static PromptCompletion.Content.== infix(_:_:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  OUTLINED_FUNCTION_11_1(a1, a2, a3, a4, a5, a6, a7, a8, v10, v11, v12, v13, v14, v15);
  return v8 & 1;
}

void PromptCompletion.Segment.hashValue.getter()
{
  char v0;

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_50_1();
  if (v0)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_30_1();
  }
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.Segment()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
  return Hasher._finalize()();
}

void PromptCompletion.Content.hash(into:)()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;

  OUTLINED_FUNCTION_37_1();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_152();
  if (v0 >> 60 == 15)
  {
    OUTLINED_FUNCTION_20_0(0);
    OUTLINED_FUNCTION_22_0();
  }
  else
  {
    OUTLINED_FUNCTION_20_0(1u);
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    v1 = OUTLINED_FUNCTION_195_0();
    OUTLINED_FUNCTION_7_1(v1, v2);
  }
}

void static PromptCompletion.TextContent.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[3];
  v5 = *a1 == *a2 && a1[1] == a2[1];
  if (v5 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
  {
    if (v3 >> 60 == 15)
    {
      if (v4 >> 60 == 15)
        goto LABEL_12;
    }
    else if (v4 >> 60 != 15)
    {
      v8 = OUTLINED_FUNCTION_42_0();
      MEMORY[0x2495A59A8](v8);
      OUTLINED_FUNCTION_61_1();
      outlined consume of Data?(v2, v3);
      goto LABEL_12;
    }
    v6 = OUTLINED_FUNCTION_42_0();
    outlined consume of Data?(v6, v7);
    OUTLINED_FUNCTION_61_1();
  }
LABEL_12:
  OUTLINED_FUNCTION_22_0();
}

void PromptCompletion.Content.hashValue.getter()
{
  char v0;

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_64_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_50_1();
  if (v0)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_30_1();
  }
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

void PromptCompletion.TextContent.value.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletion.TextContent.value.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletion.TextContent.value.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletion.TextContent._userInfo.getter()
{
  uint64_t v0;
  unint64_t v1;

  v0 = OUTLINED_FUNCTION_90_0();
  outlined copy of Data?(v0, v1);
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletion.TextContent._userInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  outlined consume of Data?(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletion.TextContent._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletion.TextContent.init(value:)(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  a3->n128_u64[0] = a1;
  a3->n128_u64[1] = a2;
  OUTLINED_FUNCTION_78_1(a3, (__n128)xmmword_248BBF000);
}

void PromptCompletion.TextContent.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_152();
  if (v1 >> 60 == 15)
  {
    OUTLINED_FUNCTION_20_0(0);
    OUTLINED_FUNCTION_22_0();
  }
  else
  {
    OUTLINED_FUNCTION_20_0(1u);
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    v2 = OUTLINED_FUNCTION_195_0();
    OUTLINED_FUNCTION_7_1(v2, v3);
  }
}

void PromptCompletion.TextContent.hashValue.getter()
{
  char v0;

  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_50_1();
  if (v0)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_30_1();
  }
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion.TextContent()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    outlined consume of Data?(v1, v2);
  }
  return Hasher._finalize()();
}

uint64_t static PromptCompletion.collecting<A>(events:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v4[15] = a3;
  v4[16] = a4;
  v4[13] = a1;
  v4[14] = a2;
  v4[17] = type metadata accessor for PromptCompletion(0);
  v4[18] = OUTLINED_FUNCTION_98();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  v4[19] = OUTLINED_FUNCTION_98();
  v6 = OUTLINED_FUNCTION_45_1();
  v4[20] = v6;
  v4[21] = *(_QWORD *)(v6 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = *(_QWORD *)(a3 - 8);
  v4[25] = OUTLINED_FUNCTION_98();
  v7 = OUTLINED_FUNCTION_45_1();
  v4[26] = v7;
  v4[27] = *(_QWORD *)(v7 - 8);
  v4[28] = OUTLINED_FUNCTION_98();
  v4[29] = type metadata accessor for PromptCompletion.Aggregator(0);
  v4[30] = OUTLINED_FUNCTION_98();
  return swift_task_switch();
}

uint64_t static PromptCompletion.collecting<A>(events:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(v0 + 232);
  v1 = *(_QWORD **)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 112);
  *v1 = MEMORY[0x24BEE4AF8];
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = -1;
  v1[4] = -1;
  v1[5] = Dictionary.init(dictionaryLiteral:)();
  v7 = *(int *)(v2 + 28);
  *(_DWORD *)(v0 + 280) = v7;
  v8 = (uint64_t)v1 + v7;
  v9 = OUTLINED_FUNCTION_19_0();
  *(_QWORD *)(v0 + 248) = v9;
  OUTLINED_FUNCTION_171_0(v8, v10, v11, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  *(_QWORD *)(v0 + 256) = swift_getAssociatedConformanceWitness();
  v12 = (_QWORD *)swift_task_alloc();
  OUTLINED_FUNCTION_15_1(v12);
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = (__int128 *)OUTLINED_FUNCTION_195_0();
    outlined init with take of AsyncIteratorProtocol(v1, v2);
    PromptCompletion.Aggregator.receive(event:)();
    __swift_destroy_boxed_opaque_existential_0Tm(v0 + 56);
    *(_QWORD *)(v0 + 256) = swift_getAssociatedConformanceWitness();
    v3 = (_QWORD *)swift_task_alloc();
    OUTLINED_FUNCTION_15_1(v3);
    return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
  }
  else
  {
    v5 = *(uint64_t **)(v0 + 240);
    v6 = *(_QWORD **)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 104);
    v7 = (uint64_t)v5 + *(int *)(v0 + 280);
    (*(void (**)(void))(*(_QWORD *)(v0 + 216) + 8))();
    v8 = *v5;
    v18 = v5[1];
    v9 = v5[2];
    v10 = v5[5];
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_154();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS15TokenGeneration16PromptCompletionV10AggregatorV09CandidateI033_D174D4387BF6B304FA76AEBF3D593BFDLLV_G_AJ0J0Vs5NeverOTg504_s15e12Generation16gh3V10i15V6finishACyFAC9j10VAE0gE033_klmnopQ11BFDLLVXEfU_Tf1cn_n(v10);
    v12 = v11;
    OUTLINED_FUNCTION_199_0();
    v14 = v5[3];
    v13 = v5[4];
    outlined init with copy of Prompt.Rendering?(v7, v16);
    v15 = (uint64_t)v6 + *(int *)(v17 + 28);
    __swift_storeEnumTagSinglePayload(v15, 1, 1, v19);
    *v6 = v8;
    v6[1] = v18;
    v6[2] = v9;
    v6[3] = v12;
    v6[4] = v14;
    v6[5] = v13;
    outlined assign with take of Prompt.Rendering?(v16, v15);
    outlined init with take of PromptCompletion((uint64_t)v6, v20, (void (*)(_QWORD))type metadata accessor for PromptCompletion);
    outlined destroy of TokenGenerationError((uint64_t)v5, type metadata accessor for PromptCompletion.Aggregator);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 32);
  v1(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
  swift_getAssociatedConformanceWitness();
  v2 = _getErrorEmbeddedNSError<A>(_:)();
  v3 = *(_QWORD *)(v0 + 176);
  if (v2)
  {
    OUTLINED_FUNCTION_198(*(_QWORD *)(v0 + 168));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 160);
    swift_allocError();
    v1(v5, v3, v4);
  }
  v6 = *(_QWORD *)(v0 + 240);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
  outlined destroy of TokenGenerationError(v6, type metadata accessor for PromptCompletion.Aggregator);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PromptCompletion.Aggregator.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = MEMORY[0x24BEE4AF8];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = -1;
  a1[4] = -1;
  a1[5] = Dictionary.init(dictionaryLiteral:)();
  v2 = (uint64_t)a1 + *(int *)(type metadata accessor for PromptCompletion.Aggregator(0) + 28);
  v3 = OUTLINED_FUNCTION_19_0();
  return __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
}

void PromptCompletion.Aggregator.receive(event:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  __int128 v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD v69[3];
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _BYTE v93[48];

  OUTLINED_FUNCTION_7_0();
  v2 = v0;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_60_1();
  type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  OUTLINED_FUNCTION_3_2();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v69 - v10;
  outlined init with copy of PromptCompletionEvent(v4, (uint64_t)v93);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if (OUTLINED_FUNCTION_1_2())
  {
    v71 = v85;
    v12 = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)v2 = v71;
    *(_QWORD *)(v2 + 16) = v12;
LABEL_24:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v93);
    OUTLINED_FUNCTION_4_1();
    return;
  }
  if (swift_dynamicCast())
  {
    outlined init with take of PromptCompletion((uint64_t)v11, (uint64_t)v9, (void (*)(_QWORD))type metadata accessor for PromptCompletionEventRenderedPrompt);
    v13 = OUTLINED_FUNCTION_19_0();
    v14 = OUTLINED_FUNCTION_66_1();
    v15(v14);
    outlined destroy of TokenGenerationError((uint64_t)v9, type metadata accessor for PromptCompletionEventRenderedPrompt);
    __swift_storeEnumTagSinglePayload(v1, 0, 1, v13);
    v16 = type metadata accessor for PromptCompletion.Aggregator(0);
    outlined assign with take of Prompt.Rendering?(v1, v2 + *(int *)(v16 + 28));
    goto LABEL_24;
  }
  if (OUTLINED_FUNCTION_1_2())
  {
    v17 = v85;
    swift_bridgeObjectRelease();
    *(_OWORD *)(v2 + 24) = v17;
    goto LABEL_24;
  }
  if (!OUTLINED_FUNCTION_1_2())
  {
    if (!OUTLINED_FUNCTION_1_2())
    {
      if (!OUTLINED_FUNCTION_1_2())
      {
        if (one-time initialization token for generator == -1)
        {
LABEL_34:
          v63 = type metadata accessor for Logger();
          __swift_project_value_buffer(v63, (uint64_t)static Log.generator);
          outlined init with copy of PromptCompletionEvent(v4, (uint64_t)&v83);
          v64 = Logger.logObject.getter();
          v65 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v64, v65))
          {
            v66 = (uint8_t *)OUTLINED_FUNCTION_2();
            v72 = OUTLINED_FUNCTION_2();
            *(_DWORD *)v66 = 136315138;
            __swift_project_boxed_opaque_existential_1(&v83, *((uint64_t *)&v85 + 1));
            swift_getDynamicType();
            v67 = _typeName(_:qualified:)();
            v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, &v72);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_37_0();
            __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v83);
            _os_log_impl(&dword_248B08000, v64, v65, "Unhandled event: %s", v66, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_0_0();
          }
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)&v83);

          goto LABEL_24;
        }
LABEL_40:
        swift_once();
        goto LABEL_34;
      }
      v42 = v85;
      *(_QWORD *)&v71 = v84;
      v43 = *((_QWORD *)&v85 + 1);
      v44 = v86;
      OUTLINED_FUNCTION_88_0();
      v45 = OUTLINED_FUNCTION_68_1();
      v4 = *(_QWORD *)(v2 + 40);
      v72 = v4;
      *(_QWORD *)(v2 + 40) = 0x8000000000000000;
      OUTLINED_FUNCTION_59_1(v42);
      OUTLINED_FUNCTION_53_1();
      v50 = v48 + v49;
      if (!__OFADD__(v48, v49))
      {
        v51 = v46;
        v52 = v47;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, PromptCompletion.Aggregator.CandidateAggregator>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v45, v50))
        {
          v53 = OUTLINED_FUNCTION_59_1(v42);
          if ((v52 & 1) != (v54 & 1))
            goto LABEL_41;
          v51 = v53;
        }
        OUTLINED_FUNCTION_41_1();
        v55 = *(_QWORD **)(v2 + 40);
        if ((v52 & 1) == 0)
        {
          specialized _NativeDictionary._insert(at:key:value:)(v51, v42, v43, MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], 0, 3, v55);
          OUTLINED_FUNCTION_88_0();
        }
        v56 = v55[7] + 32 * v51;
        v57 = OUTLINED_FUNCTION_66_1();
        outlined copy of FinishReason(v57, v58);
        v59 = OUTLINED_FUNCTION_90_0();
        outlined consume of FinishReason?(v59, v60);
        *(_OWORD *)(v56 + 16) = v44;
        OUTLINED_FUNCTION_114_0();
        OUTLINED_FUNCTION_18();
        v61 = OUTLINED_FUNCTION_66_1();
        outlined consume of FinishReason(v61, v62);
        goto LABEL_24;
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v30 = v85;
    v72 = v83;
    v69[2] = v84;
    v73 = v84;
    v74 = v85;
    v69[1] = *((_QWORD *)&v86 + 1);
    v75 = v86;
    v76 = v87;
    v77 = v88;
    v78 = v89;
    v79 = v90;
    v80 = v91;
    *(_QWORD *)&v71 = v91;
    v70 = v92;
    v81 = v92;
    OUTLINED_FUNCTION_10_0();
    v31 = OUTLINED_FUNCTION_68_1();
    OUTLINED_FUNCTION_67_0();
    OUTLINED_FUNCTION_71_1();
    OUTLINED_FUNCTION_53_1();
    v36 = v34 + v35;
    if (!__OFADD__(v34, v35))
    {
      v37 = v32;
      v38 = v33;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, PromptCompletion.Aggregator.CandidateAggregator>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v31, v36))
      {
        v39 = OUTLINED_FUNCTION_71_1();
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_41;
        v37 = v39;
      }
      OUTLINED_FUNCTION_41_1();
      v41 = *(_QWORD **)(v2 + 40);
      if ((v38 & 1) == 0)
      {
        specialized _NativeDictionary._insert(at:key:value:)(v37, v30, *((uint64_t *)&v30 + 1), MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], 0, 3, v41);
        OUTLINED_FUNCTION_10_0();
      }
      PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(&v72);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_199_0();
      OUTLINED_FUNCTION_114_0();
      OUTLINED_FUNCTION_114_0();
      goto LABEL_23;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v18 = v85;
  v72 = v83;
  v73 = v84;
  v74 = v85;
  v75 = v86;
  v76 = v87;
  *(_QWORD *)&v71 = v88;
  v77 = v88;
  v70 = v89;
  v78 = v89;
  OUTLINED_FUNCTION_88_0();
  v19 = OUTLINED_FUNCTION_68_1();
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_59_1(v18);
  OUTLINED_FUNCTION_53_1();
  v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
    goto LABEL_38;
  }
  v25 = v20;
  v26 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, PromptCompletion.Aggregator.CandidateAggregator>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v19, v24))
  {
LABEL_12:
    OUTLINED_FUNCTION_41_1();
    v29 = *(_QWORD **)(v2 + 40);
    if ((v26 & 1) == 0)
    {
      specialized _NativeDictionary._insert(at:key:value:)(v25, v18, *((uint64_t *)&v18 + 1), MEMORY[0x24BEE4AF8], MEMORY[0x24BEE4B00], 0, 3, v29);
      OUTLINED_FUNCTION_88_0();
    }
    PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(&v72);
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_152();
LABEL_23:
    OUTLINED_FUNCTION_18();
    outlined consume of Data?(v71, v70);
    goto LABEL_24;
  }
  v27 = OUTLINED_FUNCTION_59_1(v18);
  if ((v26 & 1) == (v28 & 1))
  {
    v25 = v27;
    goto LABEL_12;
  }
LABEL_41:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void PromptCompletion.Aggregator.finish()()
{
  uint64_t *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_7_0();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  v7 = v0[1];
  v8 = v0[2];
  v9 = v0[5];
  OUTLINED_FUNCTION_88_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_76_0();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSD6ValuesVySS15TokenGeneration16PromptCompletionV10AggregatorV09CandidateI033_D174D4387BF6B304FA76AEBF3D593BFDLLV_G_AJ0J0Vs5NeverOTg504_s15e12Generation16gh3V10i15V6finishACyFAC9j10VAE0gE033_klmnopQ11BFDLLVXEfU_Tf1cn_n(v9);
  v11 = v10;
  OUTLINED_FUNCTION_37_0();
  v12 = v0[3];
  v13 = v0[4];
  v14 = type metadata accessor for PromptCompletion.Aggregator(0);
  outlined init with copy of Prompt.Rendering?((uint64_t)v0 + *(int *)(v14 + 28), (uint64_t)v5);
  OUTLINED_FUNCTION_32_1();
  v16 = (uint64_t)v2 + v15;
  v17 = OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_171_0(v16, v18, v19, v17);
  *v2 = v6;
  v2[1] = v7;
  v2[2] = v8;
  v2[3] = v11;
  v2[4] = v12;
  v2[5] = v13;
  outlined assign with take of Prompt.Rendering?((uint64_t)v5, v16);
  OUTLINED_FUNCTION_4_1();
}

TokenGeneration::ModelInformation __swiftcall ModelInformation.init(assets:systemVersion:)(Swift::OpaquePointer assets, Swift::String_optional systemVersion)
{
  uint64_t v2;
  TokenGeneration::ModelInformation result;

  *(Swift::OpaquePointer *)v2 = assets;
  *(Swift::String_optional *)(v2 + 8) = systemVersion;
  result.systemVersion = systemVersion;
  result.assets = assets;
  return result;
}

TokenGeneration::Usage __swiftcall Usage.init(promptTokenCount:completionTokenCount:)(Swift::Int promptTokenCount, Swift::Int completionTokenCount)
{
  Swift::Int *v2;
  TokenGeneration::Usage result;

  *v2 = promptTokenCount;
  v2[1] = completionTokenCount;
  result.completionTokenCount = completionTokenCount;
  result.promptTokenCount = promptTokenCount;
  return result;
}

void PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  Swift::String v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void *v20;
  uint64_t *v21;

  v4 = a1[4];
  v5 = a1[5];
  v6 = (void *)a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = *v1;
  v10 = *(_QWORD *)(*v1 + 16);
  if ((uint64_t)v4 < v10)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_5;
    __break(1u);
  }
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v2 = *(_QWORD *)(*v1 + 16);
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
  v10 = v2 + 1;
  v9 = *v1;
  *(_QWORD *)(v9 + 16) = v2 + 1;
  v11 = v9 + 32 * v2;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0xE000000000000000;
  *(_OWORD *)(v11 + 48) = xmmword_248BBF000;
LABEL_5:
  if (v4 >= v10)
  {
    __break(1u);
LABEL_12:
    specialized _ArrayBuffer._consumeAndCreateNew()(v9);
    v9 = v18;
    goto LABEL_9;
  }
  v12 = (_QWORD *)(v9 + 32 * v4);
  v2 = v12[6];
  v3 = v12[7];
  v19 = v1;
  v20 = (void *)v12[4];
  v21 = (uint64_t *)v12[5];
  swift_bridgeObjectRetain_n();
  outlined copy of Data?(v2, v3);
  v13._countAndFlagsBits = v5;
  v13._object = v6;
  String.append(_:)(v13);
  v6 = v20;
  v1 = v21;
  v14 = v7;
  v5 = v8;
  if (v8 >> 60 == 15)
  {
    outlined copy of Data?(v2, v3);
    v14 = v7;
    v7 = v2;
    v5 = v3;
  }
  outlined copy of Data?(v14, v8);
  swift_bridgeObjectRetain();
  outlined copy of Data?(v7, v5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_12;
LABEL_9:
  if (v4 >= *(_QWORD *)(v9 + 16))
  {
    __break(1u);
  }
  else
  {
    v15 = (_QWORD *)(v9 + 32 * v4);
    v16 = v15[6];
    v17 = v15[7];
    v15[4] = v6;
    v15[5] = v1;
    v15[6] = v7;
    v15[7] = v5;
    swift_bridgeObjectRelease();
    outlined consume of Data?(v16, v17);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v2, v3);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v7, v5);
    *v19 = v9;
  }
}

uint64_t PromptCompletion.Aggregator.CandidateAggregator.consume(event:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[8];

  v3 = a1[4];
  v2 = a1[5];
  v5 = a1[6];
  v4 = a1[7];
  v6 = (void *)a1[9];
  v23 = a1[8];
  v7 = a1[11];
  v28 = a1[10];
  v8 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  v24 = v3;
  if (v9 && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2), (v11 & 1) != 0))
  {
    v12 = (uint64_t *)(*(_QWORD *)(v8 + 56) + (v10 << 6));
    v13 = v12[1];
    v22 = *v12;
    v4 = v12[3];
    v25 = v12[2];
    v14 = v12[4];
    v15 = v12[5];
    v16 = v12[6];
    v17 = v12[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = v17;
    v27 = v16;
    outlined copy of Data?(v16, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = v5;
    swift_bridgeObjectRetain();
    v14 = 0;
    v26 = 0xF000000000000000;
    v27 = 0;
    v15 = 0xE000000000000000;
    v22 = v3;
    v13 = v2;
  }
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v23;
  v18._object = v6;
  String.append(_:)(v18);
  if (v7 >> 60 == 15)
    v19 = 0;
  else
    v19 = v28;
  if (v7 >> 60 == 15)
    v20 = 0xF000000000000000;
  else
    v20 = v7;
  v29[0] = v22;
  v29[1] = v13;
  v29[2] = v25;
  v29[3] = v4;
  v29[4] = v14;
  v29[5] = v15;
  v29[6] = v19;
  v29[7] = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v28, v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data?(v19, v20);
  specialized Dictionary._Variant.setValue(_:forKey:)(v29, v24, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v27, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of Data?(v19, v20);
}

void PromptCompletion.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  uint64_t v35;

  OUTLINED_FUNCTION_7_0();
  a19 = v22;
  a20 = v23;
  v24 = v20;
  v26 = v25;
  v27 = OUTLINED_FUNCTION_19_0();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_60_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&a9 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v24[2];
  OUTLINED_FUNCTION_154();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_199_0();
  if (v32)
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_189();
    String.hash(into:)();
    OUTLINED_FUNCTION_152();
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  v33 = v24[3];
  OUTLINED_FUNCTION_189();
  specialized Array<A>.hash(into:)(v26, v33);
  OUTLINED_FUNCTION_152();
  v34 = v24[5];
  Hasher._combine(_:)(v24[4]);
  Hasher._combine(_:)(v34);
  OUTLINED_FUNCTION_32_1();
  outlined init with copy of Prompt.Rendering?((uint64_t)v24 + v35, (uint64_t)v31);
  if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v27) == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v21, v31, v27);
    OUTLINED_FUNCTION_62_0();
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8998], MEMORY[0x24BEB89A8]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v21, v27);
  }
  OUTLINED_FUNCTION_4_1();
}

BOOL static PromptCompletion.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  _BOOL8 result;
  char v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_7_0();
  v41 = v0;
  v42 = v1;
  v3 = v2;
  v5 = v4;
  v40 = OUTLINED_FUNCTION_19_0();
  v38 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_178();
  v37 = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.Rendering?, Prompt.Rendering?));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_178();
  v39 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  OUTLINED_FUNCTION_3_2();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v37 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v37 - v17;
  v19 = *(_QWORD *)(v5 + 8);
  v20 = *(_QWORD *)(v5 + 16);
  v21 = *(_QWORD *)(v3 + 8);
  v22 = *(_QWORD *)(v3 + 16);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD **)v5, *(_QWORD **)v3) & 1) == 0)
    return 0;
  if (!v20)
  {
    if (v22)
      return 0;
    goto LABEL_11;
  }
  if (!v22)
    return 0;
  v23 = v19 == v21 && v20 == v22;
  if (v23 || (v24 = OUTLINED_FUNCTION_24_0(), result = 0, (v24 & 1) != 0))
  {
LABEL_11:
    specialized static Array<A>.== infix(_:_:)();
    if ((v26 & 1) == 0)
      return 0;
    if (*(_QWORD *)(v5 + 32) != *(_QWORD *)(v3 + 32) || *(_QWORD *)(v5 + 40) != *(_QWORD *)(v3 + 40))
      return 0;
    v28 = type metadata accessor for PromptCompletion(0);
    outlined init with copy of Prompt.Rendering?(v5 + *(int *)(v28 + 28), (uint64_t)v18);
    outlined init with copy of Prompt.Rendering?(v3 + *(int *)(v28 + 28), (uint64_t)v16);
    v29 = *(int *)(v7 + 48);
    v30 = v39;
    v31 = v39 + v29;
    outlined init with copy of Prompt.Rendering?((uint64_t)v18, v39);
    outlined init with copy of Prompt.Rendering?((uint64_t)v16, v31);
    v32 = v40;
    if (__swift_getEnumTagSinglePayload(v30, 1, v40) == 1)
    {
      OUTLINED_FUNCTION_57_1((uint64_t)v16);
      OUTLINED_FUNCTION_57_1((uint64_t)v18);
      if (__swift_getEnumTagSinglePayload(v31, 1, v32) == 1)
      {
        outlined destroy of Prompt.Rendering?(v30, &demangling cache variable for type metadata for Prompt.Rendering?);
        return 1;
      }
      goto LABEL_22;
    }
    outlined init with copy of Prompt.Rendering?(v30, (uint64_t)v13);
    if (__swift_getEnumTagSinglePayload(v31, 1, v32) == 1)
    {
      OUTLINED_FUNCTION_57_1((uint64_t)v16);
      OUTLINED_FUNCTION_57_1((uint64_t)v18);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v32);
LABEL_22:
      outlined destroy of Prompt.Rendering?(v30, &demangling cache variable for type metadata for (Prompt.Rendering?, Prompt.Rendering?));
      return 0;
    }
    v34 = v37;
    v33 = v38;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v37, v31, v32);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8998], MEMORY[0x24BEB89B0]);
    v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v36(v34, v32);
    OUTLINED_FUNCTION_73_1((uint64_t)v16);
    OUTLINED_FUNCTION_73_1((uint64_t)v18);
    v36((uint64_t)v13, v32);
    OUTLINED_FUNCTION_73_1(v30);
    return (v35 & 1) != 0;
  }
  return result;
}

void static ModelInformation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if ((specialized static Array<A>.== infix(_:_:)(*(_QWORD **)a1, *(_QWORD **)a2) & 1) != 0
    && v3
    && v5
    && (v2 != v4 || v3 != v5))
  {
    OUTLINED_FUNCTION_24_0();
  }
  OUTLINED_FUNCTION_97();
}

BOOL static Usage.== infix(_:_:)(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x10uLL) == 0;
}

Swift::Int PromptCompletion.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[11];

  OUTLINED_FUNCTION_2_1();
  PromptCompletion.hash(into:)((uint64_t)v9, v0, v1, v2, v3, v4, v5, v6, v8, v9[0], v9[1], v9[2], v9[3], v9[4], v9[5], v9[6], v9[7], v9[8], v9[9],
    v9[10]);
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletion()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[11];

  Hasher.init(_seed:)();
  PromptCompletion.hash(into:)((uint64_t)v9, v0, v1, v2, v3, v4, v5, v6, v8, v9[0], v9[1], v9[2], v9[3], v9[4], v9[5], v9[6], v9[7], v9[8], v9[9],
    v9[10]);
  return Hasher._finalize()();
}

void ModelInformation.identifier.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_69_1();
  if (v0)
    OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

uint64_t key path setter for ModelInformation.identifier : ModelInformation()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return ModelInformation.identifier.setter(v0, v0);
}

void ModelInformation.identifier.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v1;
  OUTLINED_FUNCTION_69_1();
  if (v4)
  {
    v5 = *(_QWORD *)(v3 + 32);
    v6 = swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a1 = v5;
  a1[1] = v6;
  OUTLINED_FUNCTION_104();
}

void ModelInformation.identifier.modify(uint64_t a1, char a2)
{
  ModelInformation.identifier.modify(a1, a2, (void (*)(void))ModelInformation.identifier.setter);
}

void ModelInformation.version.getter()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_69_1();
  if (v1 && *(_QWORD *)(v0 + 56))
    OUTLINED_FUNCTION_40_0();
  else
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_104();
}

uint64_t key path getter for ModelInformation.identifier : ModelInformation@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

void ModelInformation.identifier.setter()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;

  swift_bridgeObjectRelease();
  if (one-time initialization token for assets != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Log.assets);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)OUTLINED_FUNCTION_2();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_248B08000, oslog, v1, "Using deprecated setter. No change made.", v2, 2u);
    OUTLINED_FUNCTION_0_0();
  }

}

void ModelInformation.version.modify(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v1;
  OUTLINED_FUNCTION_69_1();
  if (v4 && *(_QWORD *)(v3 + 56))
  {
    v5 = *(_QWORD *)(v3 + 48);
    v6 = swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = 0;
    v6 = 0xE000000000000000;
  }
  *a1 = v5;
  a1[1] = v6;
  OUTLINED_FUNCTION_104();
}

void ModelInformation.version.modify(uint64_t a1, char a2)
{
  ModelInformation.identifier.modify(a1, a2, (void (*)(void))ModelInformation.version.setter);
}

void ModelInformation.identifier.modify(uint64_t a1, char a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v5 = OUTLINED_FUNCTION_90();
    ((void (*)(uint64_t, uint64_t))a3)(v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    a3();
    OUTLINED_FUNCTION_104();
  }
}

void ModelInformation.assets.setter()
{
  uint64_t v0;
  _QWORD *v1;

  OUTLINED_FUNCTION_72_1();
  *v1 = v0;
  OUTLINED_FUNCTION_104();
}

uint64_t (*ModelInformation.assets.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void ModelInformation.systemVersion.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void ModelInformation.systemVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*ModelInformation.systemVersion.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

TokenGeneration::ModelInformation __swiftcall ModelInformation.init(identifier:version:systemVersion:)(Swift::String identifier, Swift::String version, Swift::String_optional systemVersion)
{
  uint64_t v3;
  void *object;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Class isa;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t countAndFlagsBits;
  TokenGeneration::ModelInformation result;

  object = version._object;
  countAndFlagsBits = version._countAndFlagsBits;
  v5 = identifier._object;
  v6 = identifier._countAndFlagsBits;
  v7 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformation.Asset>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_248BBF340;
  Dictionary.init(dictionaryLiteral:)();
  v9 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_76_0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = OUTLINED_FUNCTION_81_1(v9, sel_dataWithJSONObject_options_error_, (uint64_t)isa);

  if (!v11)
  {
    v23 = 0;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  v12 = 0;
  v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = v14;

  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_76_0();
  v16 = OUTLINED_FUNCTION_90_0();
  outlined copy of Data._Representation(v16, v17);
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_18();
  v18 = OUTLINED_FUNCTION_90_0();
  v20 = (void *)outlined consume of Data._Representation(v18, v19);
  *(_QWORD *)(v8 + 32) = v6;
  *(_QWORD *)(v8 + 40) = v5;
  *(_QWORD *)(v8 + 48) = countAndFlagsBits;
  *(_QWORD *)(v8 + 56) = object;
  *(_QWORD *)(v8 + 64) = v13;
  *(_QWORD *)(v8 + 72) = v15;
  *(_QWORD *)v7 = v8;
  *(Swift::String_optional *)(v7 + 8) = systemVersion;
  result.systemVersion.value._object = v22;
  result.systemVersion.value._countAndFlagsBits = v21;
  result.assets._rawValue = v20;
  return result;
}

uint64_t ModelInformation.Asset.init(identifier:version:metadata:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v10;
  Class isa;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  void *v18;

  v10 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_76_0();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_152();
  v12 = OUTLINED_FUNCTION_81_1(v10, sel_dataWithJSONObject_options_error_, (uint64_t)isa);

  v13 = 0;
  if (!v12)
  {
    v18 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_40_0();
  outlined copy of Data._Representation(v14, v16);
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_18();
  result = outlined consume of Data._Representation(v14, v16);
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  a5[4] = v14;
  a5[5] = v16;
  return result;
}

void ModelInformation.Asset.identifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void ModelInformation.Asset.identifier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*ModelInformation.Asset.identifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void ModelInformation.Asset.version.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void ModelInformation.Asset.version.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*ModelInformation.Asset.version.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t ModelInformation.Asset.metadata.getter()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  uint64_t result;
  void *v5;

  v0 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_90_0();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v2 = OUTLINED_FUNCTION_81_1(v0, sel_JSONObjectWithData_options_error_, (uint64_t)isa);

  v3 = 0;
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    swift_dynamicCast();
    return 0;
  }
  else
  {
    v5 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t ModelInformation.Asset.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_154();
  String.hash(into:)();
  OUTLINED_FUNCTION_199_0();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_76_1();
    OUTLINED_FUNCTION_39_0();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  OUTLINED_FUNCTION_305();
  OUTLINED_FUNCTION_3_3();
  v2 = OUTLINED_FUNCTION_195_0();
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t static ModelInformation.Asset.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v2 = a1[2];
  v3 = a1[3];
  v5 = a2[2];
  v4 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
  {
    if (v3)
    {
      if (v4)
      {
        v7 = v2 == v5 && v3 == v4;
        if (v7 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
LABEL_16:
          JUMPOUT(0x2495A59A8);
      }
    }
    else if (!v4)
    {
      goto LABEL_16;
    }
  }
  return 0;
}

Swift::Int ModelInformation.Asset.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_2_1();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  OUTLINED_FUNCTION_37_0();
  if (v1)
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_76_1();
    OUTLINED_FUNCTION_39_0();
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  OUTLINED_FUNCTION_305();
  OUTLINED_FUNCTION_3_3();
  v2 = OUTLINED_FUNCTION_195_0();
  outlined consume of Data._Representation(v2, v3);
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformation.Asset()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[5];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

void ModelInformation.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  OUTLINED_FUNCTION_88_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_112();
  if (v1)
  {
    OUTLINED_FUNCTION_20_0(1u);
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_74_1();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_20_0(0);
    OUTLINED_FUNCTION_22_0();
  }
}

void ModelInformation.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_76_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_39_0();
  if (v1)
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_74_1();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformation()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t Usage.promptTokenCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t Usage.promptTokenCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*Usage.promptTokenCount.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Usage.completionTokenCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t Usage.completionTokenCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*Usage.completionTokenCount.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t Usage.totalTokenCount.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  result = *v0 + v1;
  if (__OFADD__(*v0, v1))
    __break(1u);
  return result;
}

void Usage.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  OUTLINED_FUNCTION_97();
}

void Usage.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  OUTLINED_FUNCTION_2_1();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Usage()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void FinishReason.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  switch(v1)
  {
    case 0:
      v2 = 0;
      goto LABEL_7;
    case 1:
      v2 = 2;
      goto LABEL_7;
    case 2:
      v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      OUTLINED_FUNCTION_97();
      return;
  }
  Hasher._combine(_:)(1uLL);
  OUTLINED_FUNCTION_66_1();
  String.hash(into:)();
}

void FinishReason.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  OUTLINED_FUNCTION_2_1();
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(1uLL);
        OUTLINED_FUNCTION_44_1();
        goto LABEL_9;
      }
      v2 = 3;
    }
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
LABEL_9:
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FinishReason()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(1uLL);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      v2 = 3;
    }
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = OUTLINED_FUNCTION_130_0();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *v3 = v9;
  return swift_bridgeObjectRelease();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + (result << 6));
  v7 = a4[1];
  *v6 = *a4;
  v6[1] = v7;
  v8 = a4[3];
  v6[2] = a4[2];
  v6[3] = v8;
  v9 = a5[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a5[2] = v11;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a8[(result >> 6) + 8] |= 1 << result;
  v8 = (_QWORD *)(a8[6] + 16 * result);
  *v8 = a2;
  v8[1] = a3;
  v9 = (_QWORD *)(a8[7] + 32 * result);
  *v9 = a4;
  v9[1] = a5;
  v9[2] = a6;
  v9[3] = a7;
  v10 = a8[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a8[2] = v12;
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t type metadata accessor for PromptCompletion.Aggregator(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletion.Aggregator);
}

uint64_t outlined init with copy of PromptCompletionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined consume of FinishReason?(uint64_t a1, unint64_t a2)
{
  if (a2 != 3)
    return outlined consume of FinishReason(a1, a2);
  return a1;
}

void outlined init with take of PromptCompletion(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  void (*v4)(uint64_t);

  a3(0);
  v3 = OUTLINED_FUNCTION_90_0();
  v4(v3);
  OUTLINED_FUNCTION_104();
}

void outlined destroy of Prompt.Rendering?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_198(*(_QWORD *)(v2 - 8));
  OUTLINED_FUNCTION_104();
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletion.Candidate, &type metadata for PromptCompletion.Candidate);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Candidate and conformance PromptCompletion.Candidate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Segment and conformance PromptCompletion.Segment()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletion.Segment and conformance PromptCompletion.Segment;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Segment and conformance PromptCompletion.Segment)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletion.Segment, &type metadata for PromptCompletion.Segment);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Segment and conformance PromptCompletion.Segment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.Content and conformance PromptCompletion.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletion.Content and conformance PromptCompletion.Content;
  if (!lazy protocol witness table cache variable for type PromptCompletion.Content and conformance PromptCompletion.Content)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletion.Content, &type metadata for PromptCompletion.Content);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.Content and conformance PromptCompletion.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent;
  if (!lazy protocol witness table cache variable for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletion.TextContent, &type metadata for PromptCompletion.TextContent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletion.TextContent and conformance PromptCompletion.TextContent);
  }
  return result;
}

void base witness table accessor for Equatable in PromptCompletion()
{
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type PromptCompletion and conformance PromptCompletion, type metadata accessor for PromptCompletion, (uint64_t)&protocol conformance descriptor for PromptCompletion);
}

unint64_t lazy protocol witness table accessor for type ModelInformation.Asset and conformance ModelInformation.Asset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformation.Asset and conformance ModelInformation.Asset;
  if (!lazy protocol witness table cache variable for type ModelInformation.Asset and conformance ModelInformation.Asset)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformation.Asset, &type metadata for ModelInformation.Asset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformation.Asset and conformance ModelInformation.Asset);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformation and conformance ModelInformation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformation and conformance ModelInformation;
  if (!lazy protocol witness table cache variable for type ModelInformation and conformance ModelInformation)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformation, &type metadata for ModelInformation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformation and conformance ModelInformation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Usage and conformance Usage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Usage and conformance Usage;
  if (!lazy protocol witness table cache variable for type Usage and conformance Usage)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Usage, &type metadata for Usage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Usage and conformance Usage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReason and conformance FinishReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReason and conformance FinishReason;
  if (!lazy protocol witness table cache variable for type FinishReason and conformance FinishReason)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReason, &type metadata for FinishReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReason and conformance FinishReason);
  }
  return result;
}

uint64_t sub_248B292D0@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for ModelInformation.identifier : ModelInformation((uint64_t (*)(void))ModelInformation.identifier.getter, a1);
}

uint64_t sub_248B292F0@<X0>(uint64_t *a1@<X8>)
{
  return key path getter for ModelInformation.identifier : ModelInformation((uint64_t (*)(void))ModelInformation.version.getter, a1);
}

uint64_t initializeBufferWithCopyOfBuffer for PromptCompletion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v7 = *(int *)(a3 + 28);
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Prompt.Rendering();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t destroy for PromptCompletion(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Prompt.Rendering();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Prompt.Rendering();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithCopy for PromptCompletion(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Prompt.Rendering();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for Prompt.Rendering();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for PromptCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v7 = *(int *)(a3 + 28);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Prompt.Rendering();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for PromptCompletion()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void type metadata completion function for PromptCompletion()
{
  type metadata completion function for PromptCompletion();
}

{
  unint64_t v0;

  type metadata accessor for Prompt.Rendering?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Prompt.Rendering?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Prompt.Rendering?)
  {
    type metadata accessor for Prompt.Rendering();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Prompt.Rendering?);
  }
}

unint64_t destroy for PromptCompletion.Candidate(uint64_t a1)
{
  unint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 24);
  if (result >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeWithCopy for PromptCompletion.Candidate(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >= 3)
  {
    a1[2] = *v4;
    a1[3] = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
  }
  return a1;
}

_QWORD *assignWithCopy for PromptCompletion.Candidate(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  if (a1[3] >= 3uLL)
  {
    if (v4 >= 3)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v4 < 3)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of String(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE0D00] - 8) + 8))();
  return a1;
}

_QWORD *assignWithTake for PromptCompletion.Candidate(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  if (a1[3] >= 3uLL)
  {
    v5 = a2[3];
    if (v5 >= 3)
    {
      a1[2] = *v4;
      a1[3] = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
  return a1;
}

void type metadata accessor for PromptCompletion.Candidate()
{
  OUTLINED_FUNCTION_181_0();
}

void type metadata accessor for PromptCompletion.Segment()
{
  OUTLINED_FUNCTION_181_0();
}

void type metadata accessor for PromptCompletion.Content()
{
  OUTLINED_FUNCTION_181_0();
}

void destroy for PromptCompletion.Segment(uint64_t a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >> 60 == 15)
    OUTLINED_FUNCTION_104();
  else
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), v2);
}

void initializeWithCopy for PromptCompletion.Segment(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    v6 = *(_QWORD *)v4;
    OUTLINED_FUNCTION_40_1();
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v5;
  }
  OUTLINED_FUNCTION_97();
}

void assignWithCopy for PromptCompletion.Segment(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  v5 = a2[3];
  if (a1[3] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      OUTLINED_FUNCTION_40_1();
      v8 = a1[2];
      v9 = a1[3];
      a1[2] = v7;
      a1[3] = v5;
      outlined consume of Data._Representation(v8, v9);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  v6 = *v4;
  OUTLINED_FUNCTION_40_1();
  a1[2] = v6;
  a1[3] = v5;
LABEL_8:
  OUTLINED_FUNCTION_97();
}

void assignWithTake for PromptCompletion.Segment(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2 + 2;
  v6 = a1[3];
  if (v6 >> 60 != 15)
  {
    v7 = a2[3];
    if (v7 >> 60 != 15)
    {
      v8 = a1[2];
      a1[2] = *v5;
      a1[3] = v7;
      outlined consume of Data._Representation(v8, v6);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
LABEL_6:
  OUTLINED_FUNCTION_97();
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Segment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      return OUTLINED_FUNCTION_62_1(result);
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for PromptCompletion.TextContent()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t initializeBufferWithCopyOfBuffer for PromptCompletion.Aggregator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 40) = a2[5];
    v7 = *(int *)(a3 + 28);
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Prompt.Rendering();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t destroy for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Prompt.Rendering();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(int *)(a3 + 28);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for Prompt.Rendering();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for PromptCompletion.Aggregator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Prompt.Rendering();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 28);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Prompt.Rendering();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for PromptCompletion.Aggregator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for Prompt.Rendering();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.Aggregator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_97();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 28), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Aggregator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void __swift_store_extra_inhabitant_indexTm(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_97();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 28), a2, a2, v7);
  }
}

void type metadata completion function for PromptCompletion.Aggregator()
{
  type metadata completion function for PromptCompletion();
}

uint64_t destroy for ModelInformation()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void initializeBufferWithCopyOfBuffer for ModelInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_104();
}

_QWORD *assignWithCopy for ModelInformation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ModelInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelInformation(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ModelInformation()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t destroy for ModelInformation.Asset(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

_QWORD *initializeWithCopy for ModelInformation.Asset(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  v6 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v5, v6);
  a1[4] = v5;
  a1[5] = v6;
  return a1;
}

_QWORD *assignWithCopy for ModelInformation.Asset(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = a2[4];
  v4 = a2[5];
  outlined copy of Data._Representation(v5, v4);
  v6 = a1[4];
  v7 = a1[5];
  a1[4] = v5;
  a1[5] = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for ModelInformation.Asset(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a1[4];
  v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelInformation.Asset(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelInformation.Asset(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for ModelInformation.Asset()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t getEnumTagSinglePayload for Usage(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Usage(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for Usage()
{
  OUTLINED_FUNCTION_181_0();
}

unint64_t destroy for FinishReason(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

void initializeBufferWithCopyOfBuffer for FinishReason(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_104();
}

_QWORD *assignWithCopy for FinishReason(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FinishReason(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FinishReason(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FinishReason(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for FinishReason(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for FinishReason(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for FinishReason()
{
  OUTLINED_FUNCTION_181_0();
}

unint64_t destroy for PromptCompletion.Aggregator.CandidateAggregator(uint64_t a1)
{
  unint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 24);
  if (result >= 4)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for PromptCompletion.Aggregator.CandidateAggregator(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 < 4)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v4;
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for PromptCompletion.Aggregator.CandidateAggregator(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a1[3];
  v5 = a2[3];
  if (v4 == 3)
  {
    if (v5 >= 4)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v5 == 3)
  {
    outlined destroy of FinishReason((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v4 >= 3)
  {
    if (v5 >= 3)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String((uint64_t)(a1 + 2));
    goto LABEL_11;
  }
  if (v5 < 3)
  {
LABEL_11:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
LABEL_8:
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of FinishReason(uint64_t a1)
{
  destroy for FinishReason(a1);
  return a1;
}

_QWORD *assignWithTake for PromptCompletion.Aggregator.CandidateAggregator(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  v5 = a1[3];
  v6 = a2[3];
  if (v5 != 3)
  {
    if (v6 == 3)
    {
      outlined destroy of FinishReason((uint64_t)(a1 + 2));
    }
    else if (v5 >= 3)
    {
      if (v6 >= 3)
      {
        a1[2] = *v4;
        a1[3] = v6;
        swift_bridgeObjectRelease();
        return a1;
      }
      outlined destroy of String((uint64_t)(a1 + 2));
    }
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletion.Candidate(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletion.Candidate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      return OUTLINED_FUNCTION_62_1(result);
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PromptCompletion.Aggregator.CandidateAggregator()
{
  return &type metadata for PromptCompletion.Aggregator.CandidateAggregator;
}

uint64_t outlined copy of FinishReason?(uint64_t a1, unint64_t a2)
{
  if (a2 != 3)
    return outlined copy of FinishReason(a1, a2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_2()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_3_3()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_7_1(uint64_t a1, unint64_t a2)
{
  return outlined consume of Data?(a1, a2);
}

void OUTLINED_FUNCTION_11_1(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, uint64_t a12, uint64_t a13, __int128 a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = a1[1];
  v15 = *a2;
  v16 = a2[1];
  a12 = *a1;
  a13 = v14;
  a14 = *((_OWORD *)a1 + 1);
  a9 = v15;
  a10 = v16;
  a11 = *((_OWORD *)a2 + 1);
  static PromptCompletion.TextContent.== infix(_:_:)(&a12, &a9);
}

uint64_t OUTLINED_FUNCTION_15_1(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 264) = a1;
  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return type metadata accessor for Prompt.Rendering();
}

void OUTLINED_FUNCTION_20_0(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  uint64_t v0;
  unint64_t v1;

  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  return type metadata accessor for PromptCompletion(0);
}

void OUTLINED_FUNCTION_37_1()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_40_1()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_41_1()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 40) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_42_0()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  outlined copy of Data?(v1, v0);
  outlined copy of Data?(v3, v2);
  return v1;
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_45_1()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_57_1(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Prompt.Rendering?(a1, v1);
}

unint64_t OUTLINED_FUNCTION_59_1(uint64_t a1)
{
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_61_1()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_62_1(uint64_t result)
{
  *(_BYTE *)(result + 32) = 1;
  return result;
}

void OUTLINED_FUNCTION_64_1()
{
  Hasher._combine(_:)(0);
}

uint64_t OUTLINED_FUNCTION_66_1()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_67_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 232) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 40) = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_68_1()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

unint64_t OUTLINED_FUNCTION_71_1()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_72_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_73_1(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Prompt.Rendering?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_74_1()
{
  return String.hash(into:)();
}

__n128 OUTLINED_FUNCTION_75_0(uint64_t a1)
{
  return *(__n128 *)a1;
}

uint64_t OUTLINED_FUNCTION_76_1()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_78_1(__n128 *a1@<X8>, __n128 a2@<Q0>)
{
  a1[1] = a2;
}

id OUTLINED_FUNCTION_81_1(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 0);
}

double PromptCompletionEventCandidateTextDelta.init(responseIdentifier:candidateIdentifier:segmentIndex:textDelta:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  double result;

  *(_QWORD *)a8 = a1;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_QWORD *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  result = 0.0;
  *(_OWORD *)(a8 + 56) = xmmword_248BBF000;
  return result;
}

uint64_t PromptCompletionStream.init<A>(streamResponse:bufferResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v27 = a3;
  v11 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a4);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  AsyncThrowingStream<>.init<A>(_:)((uint64_t)v13, v18, a4, a5, v19, v20, v21, v22, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36,
    v37);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a6, v17, v14);
  result = type metadata accessor for PromptCompletionStream(0);
  v24 = (_QWORD *)(a6 + *(int *)(result + 20));
  v25 = v27;
  *v24 = a2;
  v24[1] = v25;
  return result;
}

void PromptCompletionStream.makeAsyncIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  JUMPOUT(0x2495A6C44);
}

uint64_t PromptCompletionStream.AsyncIterator.next()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_20_1();
}

uint64_t PromptCompletionStream.AsyncIterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  static Task<>.checkCancellation()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  *v1 = v0;
  v1[1] = PromptCompletionStream.AsyncIterator.next();
  return AsyncThrowingStream.Iterator.next()();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_11_2();
  return OUTLINED_FUNCTION_114(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance PromptCompletionStream.AsyncIterator(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for AsyncIteratorProtocol.next() in conformance PromptCompletionStream.AsyncIterator;
  return PromptCompletionStream.AsyncIterator.next()(a1);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance PromptCompletionStream.AsyncIterator()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_114(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = a4;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration22PromptCompletionStreamV13AsyncIteratorV_Tg5Tu
                                                          + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration22PromptCompletionStreamV13AsyncIteratorV_Tg5Tu);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v10(a1, a2, a3);
}

uint64_t _s15TokenGeneration22PromptCompletionStreamV13AsyncIteratorVScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (v0)
    **(_QWORD **)(v2 + 16) = v0;
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t PromptCompletionStream.collect()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_20_1();
}

uint64_t PromptCompletionStream.collect()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t (*v5)(_QWORD);

  v1 = v0[3];
  v2 = (_QWORD *)(v1 + *(int *)(type metadata accessor for PromptCompletionStream(0) + 20));
  v5 = (uint64_t (*)(_QWORD))(*(int *)*v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  v0[4] = v3;
  *v3 = v0;
  v3[1] = PromptCompletionStream.AsyncIterator.next();
  return v5(v0[2]);
}

uint64_t type metadata accessor for PromptCompletionStream(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionStream);
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance PromptCompletionStream()
{
  PromptCompletionStream.makeAsyncIterator()();
}

uint64_t sub_248B2B590()
{
  uint64_t v0;

  return outlined destroy of PromptCompletionStream(v0);
}

void PromptCompletionEventModelInformation.responseIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventModelInformation.responseIdentifier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventModelInformation.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventModelInformation.modelInformation.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[3];
  v3 = v1[4];
  *a1 = v1[2];
  a1[1] = v2;
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 PromptCompletionEventModelInformation.modelInformation.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_213();
  result = v4;
  v1[1] = v4;
  v1[2].n128_u64[0] = v2;
  return result;
}

uint64_t (*PromptCompletionEventModelInformation.modelInformation.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void __swiftcall PromptCompletionEventModelInformation.init(responseIdentifier:modelInformation:)(TokenGeneration::PromptCompletionEventModelInformation *__return_ptr retstr, Swift::String responseIdentifier, TokenGeneration::ModelInformation modelInformation)
{
  void *v3;

  v3 = *(void **)modelInformation.assets._rawValue;
  retstr->responseIdentifier = responseIdentifier;
  retstr->modelInformation.assets._rawValue = v3;
  retstr->modelInformation.systemVersion = *(Swift::String_optional *)((char *)modelInformation.assets._rawValue + 8);
}

void PromptCompletionEventModelInformation.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_77_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_37_0();
  if (v1)
  {
    OUTLINED_FUNCTION_20_0(1u);
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_49_1();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_20_0(0);
    OUTLINED_FUNCTION_138();
  }
}

uint64_t static PromptCompletionEventModelInformation.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  char v14;

  v1 = OUTLINED_FUNCTION_34_0(a1);
  v5 = v3[3];
  v4 = v3[4];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v1 == *v2 && v3[1] == v2[1];
  if (v8 || (OUTLINED_FUNCTION_24_0(), result = OUTLINED_FUNCTION_204_0(), (v10 & 1) != 0))
  {
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_40_0();
    v11 = (_QWORD *)OUTLINED_FUNCTION_57_2();
    if ((specialized static Array<A>.== infix(_:_:)(v11, v12) & 1) != 0)
    {
      if (!v4)
      {
        OUTLINED_FUNCTION_39_0();
        OUTLINED_FUNCTION_186();
        if (!v7)
          goto LABEL_21;
LABEL_16:
        OUTLINED_FUNCTION_61();
        OUTLINED_FUNCTION_213();
        return 0;
      }
      if (v7)
      {
        if (v5 != v6 || v4 != v7)
        {
          v14 = OUTLINED_FUNCTION_24_0();
          OUTLINED_FUNCTION_39_0();
          OUTLINED_FUNCTION_186();
          OUTLINED_FUNCTION_61();
          OUTLINED_FUNCTION_213();
          return (v14 & 1) != 0;
        }
        OUTLINED_FUNCTION_39_0();
        OUTLINED_FUNCTION_186();
LABEL_21:
        OUTLINED_FUNCTION_61();
        OUTLINED_FUNCTION_213();
        return 1;
      }
    }
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_186();
    goto LABEL_16;
  }
  return result;
}

void PromptCompletionEventModelInformation.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_189();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_152();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_49_1();
    OUTLINED_FUNCTION_213();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventModelInformation()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void PromptCompletionEventCandidateTextDelta.responseIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateTextDelta.responseIdentifier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateTextDelta.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateTextDelta.candidateIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateTextDelta.candidateIdentifier.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateTextDelta.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateTextDelta.segmentIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t PromptCompletionEventCandidateTextDelta.segmentIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*PromptCompletionEventCandidateTextDelta.segmentIndex.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateTextDelta.textDelta.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateTextDelta.textDelta.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateTextDelta.textDelta.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateTextDelta._userInfo.getter()
{
  uint64_t v0;

  outlined copy of Data?(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateTextDelta._userInfo.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  outlined consume of Data?(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateTextDelta._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateTextDelta.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 64);
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_154();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_199_0();
  OUTLINED_FUNCTION_52_1(v1);
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_213();
  if (v2 >> 60 == 15)
  {
    OUTLINED_FUNCTION_20_0(0);
  }
  else
  {
    OUTLINED_FUNCTION_20_0(1u);
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    v3 = OUTLINED_FUNCTION_195_0();
    outlined consume of Data?(v3, v4);
  }
}

void static PromptCompletionEventCandidateTextDelta.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  char v17;
  BOOL v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v1 = OUTLINED_FUNCTION_34_0(a1);
  v4 = v3[2];
  v6 = v3[3];
  v5 = v3[4];
  v7 = v3[5];
  v8 = v3[6];
  v9 = v2[2];
  v10 = v2[3];
  v11 = v2[4];
  v12 = v2[5];
  v13 = v2[6];
  v30 = v2[7];
  v14 = v1 == *v2 && v3[1] == v2[1];
  v31 = v2[8];
  v32 = v3[8];
  if (v14 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v15 & 1) != 0))
  {
    if (v4 == v9 && v6 == v10)
    {
      if (v5 != v11)
        goto LABEL_25;
    }
    else
    {
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_204_0();
      if ((v17 & 1) == 0 || v5 != v11)
        goto LABEL_25;
    }
    v18 = v7 == v12 && v8 == v13;
    if (v18 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v19 & 1) != 0))
    {
      if (v32 >> 60 == 15)
      {
        v20 = v31;
        if (v31 >> 60 == 15)
          goto LABEL_25;
      }
      else
      {
        v20 = v31;
        if (v31 >> 60 != 15)
        {
          v25 = OUTLINED_FUNCTION_57_2();
          outlined copy of Data?(v25, v26);
          outlined copy of Data?(v30, v31);
          v27 = OUTLINED_FUNCTION_57_2();
          MEMORY[0x2495A59A8](v27);
          outlined consume of Data?(v30, v31);
          v28 = OUTLINED_FUNCTION_57_2();
          outlined consume of Data?(v28, v29);
          goto LABEL_25;
        }
      }
      v21 = OUTLINED_FUNCTION_260();
      outlined copy of Data?(v21, v22);
      outlined copy of Data?(v30, v20);
      v23 = OUTLINED_FUNCTION_260();
      outlined consume of Data?(v23, v24);
      outlined consume of Data?(v30, v20);
    }
  }
LABEL_25:
  OUTLINED_FUNCTION_93();
}

Swift::Int PromptCompletionEventCandidateTextDelta.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 64);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_37_0();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
  swift_bridgeObjectRelease();
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    v3 = OUTLINED_FUNCTION_195_0();
    outlined consume of Data?(v3, v4);
  }
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateTextDelta()
{
  _QWORD *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;

  v1 = v0[4];
  v2 = v0[7];
  v3 = v0[8];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v3);
    Data.hash(into:)();
    outlined consume of Data?(v2, v3);
  }
  return Hasher._finalize()();
}

void PromptCompletionEventCandidateToolCallDelta.responseIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateToolCallDelta.responseIdentifier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateToolCallDelta.candidateIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateToolCallDelta.candidateIdentifier.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateToolCallDelta.toolCallIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateToolCallDelta.toolCallIdentifier.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.toolCallIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateToolCallDelta.functionName.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateToolCallDelta.functionName.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = v2;
  *(_QWORD *)(v1 + 56) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.functionName.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateToolCallDelta.argumentsDelta.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateToolCallDelta.argumentsDelta.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = v2;
  *(_QWORD *)(v1 + 72) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta.argumentsDelta.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateToolCallDelta._userInfo.getter()
{
  uint64_t v0;

  outlined copy of Data?(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateToolCallDelta._userInfo.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_270();
  outlined consume of Data?(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88));
  *(_QWORD *)(v1 + 80) = v2;
  *(_QWORD *)(v1 + 88) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateToolCallDelta._userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

double PromptCompletionEventCandidateToolCallDelta.init(responseIdentifier:candidateIdentifier:toolCallIdentifier:functionName:argumentsDelta:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  double result;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_QWORD *)(a9 + 64) = a10;
  *(_QWORD *)(a9 + 72) = a11;
  result = 0.0;
  *(_OWORD *)(a9 + 80) = xmmword_248BBF000;
  return result;
}

void PromptCompletionEventCandidateToolCallDelta.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  OUTLINED_FUNCTION_154();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_199_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_56_1();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_88_0();
  String.hash(into:)();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_10_0();
  String.hash(into:)();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_76_0();
  String.hash(into:)();
  OUTLINED_FUNCTION_39_0();
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    OUTLINED_FUNCTION_93();
  }
  else
  {
    Hasher._combine(_:)(1u);
    OUTLINED_FUNCTION_305();
    OUTLINED_FUNCTION_3_3();
    OUTLINED_FUNCTION_195_0();
    OUTLINED_FUNCTION_93();
    outlined consume of Data?(v2, v3);
  }
}

uint64_t static PromptCompletionEventCandidateToolCallDelta.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  BOOL v17;
  char v18;
  BOOL v19;
  char v20;
  BOOL v21;
  char v22;
  BOOL v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = OUTLINED_FUNCTION_34_0(a1);
  v4 = v3[2];
  v6 = v3[3];
  v5 = v3[4];
  v7 = v3[5];
  v37 = v3[7];
  v38 = v3[6];
  v35 = v3[9];
  v36 = v3[8];
  v8 = v2[2];
  v9 = v2[3];
  v10 = v2[4];
  v11 = v2[5];
  v12 = v2[6];
  v13 = v2[7];
  v34 = v2[8];
  v32 = v3[11];
  v33 = v2[9];
  v14 = v1 == *v2 && v3[1] == v2[1];
  v29 = v2[10];
  v30 = v3[10];
  v31 = v2[11];
  if (v14 || (OUTLINED_FUNCTION_24_0(), result = OUTLINED_FUNCTION_204_0(), (v16 & 1) != 0))
  {
    v17 = v4 == v8 && v6 == v9;
    if (v17 || (OUTLINED_FUNCTION_24_0(), result = OUTLINED_FUNCTION_204_0(), (v18 & 1) != 0))
    {
      v19 = v5 == v10 && v7 == v11;
      if (v19
        || (OUTLINED_FUNCTION_195_0(), OUTLINED_FUNCTION_24_0(), result = OUTLINED_FUNCTION_204_0(), (v20 & 1) != 0))
      {
        v21 = v38 == v12 && v37 == v13;
        if (v21 || (OUTLINED_FUNCTION_24_0(), result = OUTLINED_FUNCTION_204_0(), (v22 & 1) != 0))
        {
          v23 = v36 == v34 && v35 == v33;
          if (v23 || (OUTLINED_FUNCTION_24_0(), result = OUTLINED_FUNCTION_204_0(), (v24 & 1) != 0))
          {
            if (v32 >> 60 == 15)
            {
              v25 = v31;
              if (v31 >> 60 == 15)
                return 1;
            }
            else
            {
              v25 = v31;
              if (v31 >> 60 != 15)
              {
                outlined copy of Data?(v30, v32);
                outlined copy of Data?(v29, v31);
                v28 = MEMORY[0x2495A59A8](v30, v32, v29, v31);
                outlined consume of Data?(v29, v31);
                outlined consume of Data?(v30, v32);
                return (v28 & 1) != 0;
              }
            }
            outlined copy of Data?(v30, v32);
            outlined copy of Data?(v29, v25);
            v26 = OUTLINED_FUNCTION_90_0();
            outlined consume of Data?(v26, v27);
            outlined consume of Data?(v29, v25);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

Swift::Int PromptCompletionEventCandidateToolCallDelta.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  PromptCompletionEventCandidateToolCallDelta.hash(into:)();
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateToolCallDelta()
{
  Hasher.init(_seed:)();
  PromptCompletionEventCandidateToolCallDelta.hash(into:)();
  return Hasher._finalize()();
}

void PromptCompletionEventCandidateFinished.responseIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateFinished.responseIdentifier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateFinished.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void PromptCompletionEventCandidateFinished.candidateIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventCandidateFinished.candidateIdentifier.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_13_1();
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateFinished.candidateIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventCandidateFinished.finishReason.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  a1[1] = v3;
  return outlined copy of FinishReason(v2, v3);
}

void PromptCompletionEventCandidateFinished.finishReason.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  outlined consume of FinishReason(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventCandidateFinished.finishReason.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletionEventCandidateFinished.init(responseIdentifier:candidateIdentifier:finishReason:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X4>, __n128 *a6@<X8>)
{
  __n128 result;

  a6->n128_u64[0] = a1;
  a6->n128_u64[1] = a2;
  a6[1].n128_u64[0] = a3;
  a6[1].n128_u64[1] = a4;
  result = *a5;
  a6[2] = *a5;
  return result;
}

void PromptCompletionEventCandidateFinished.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 40);
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_154();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_199_0();
  switch(v1)
  {
    case 0:
      v2 = 0;
      goto LABEL_7;
    case 1:
      v2 = 2;
      goto LABEL_7;
    case 2:
      v2 = 3;
LABEL_7:
      OUTLINED_FUNCTION_52_1(v2);
      OUTLINED_FUNCTION_138();
      return;
  }
  OUTLINED_FUNCTION_52_1(1uLL);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_44_1();
  v3 = OUTLINED_FUNCTION_195_0();
  outlined consume of FinishReason(v3, v4);
}

uint64_t static PromptCompletionEventCandidateFinished.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  char v11;
  BOOL v12;
  char v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = OUTLINED_FUNCTION_35_1(a1);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  v15 = *(_OWORD *)(v5 + 32);
  v16 = *(_OWORD *)(v6 + 32);
  v9 = v3 == *(_QWORD *)v5 && v4 == *(_QWORD *)(v5 + 8);
  if (v9 || (OUTLINED_FUNCTION_24_0(), v10 = OUTLINED_FUNCTION_204_0(), (v11 & 1) != 0))
  {
    v12 = v1 == v7 && v2 == v8;
    if (v12 || (OUTLINED_FUNCTION_90_0(), OUTLINED_FUNCTION_24_0(), v10 = OUTLINED_FUNCTION_204_0(), (v13 & 1) != 0))
    {
      v17 = v15;
      v18 = v16;
      static FinishReason.== infix(_:_:)((uint64_t *)&v18, (uint64_t *)&v17);
    }
  }
  return v10 & 1;
}

Swift::Int PromptCompletionEventCandidateFinished.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 40);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_37_0();
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = 2;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(1uLL);
        OUTLINED_FUNCTION_10_0();
        OUTLINED_FUNCTION_44_1();
        v3 = OUTLINED_FUNCTION_195_0();
        outlined consume of FinishReason(v3, v4);
        return OUTLINED_FUNCTION_130_0();
      }
      v2 = 3;
    }
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventCandidateFinished()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = 2;
    }
    else
    {
      if (v2 != 2)
      {
        Hasher._combine(_:)(1uLL);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        outlined consume of FinishReason(v1, v2);
        return Hasher._finalize()();
      }
      v3 = 3;
    }
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void PromptCompletionEventUsage.responseIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventUsage.responseIdentifier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventUsage.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

__n128 PromptCompletionEventUsage.usage.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[1];
  *a1 = result;
  return result;
}

__n128 PromptCompletionEventUsage.usage.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*PromptCompletionEventUsage.usage.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

TokenGeneration::PromptCompletionEventUsage __swiftcall PromptCompletionEventUsage.init(responseIdentifier:usage:)(Swift::String responseIdentifier, TokenGeneration::Usage usage)
{
  uint64_t v2;
  TokenGeneration::PromptCompletionEventUsage result;

  *(Swift::String *)v2 = responseIdentifier;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)usage.promptTokenCount;
  result.usage = usage;
  result.responseIdentifier = responseIdentifier;
  return result;
}

void PromptCompletionEventUsage.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_39_0();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

void static PromptCompletionEventUsage.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = OUTLINED_FUNCTION_35_1(a1);
  if (v1 != *v3 || v2 != v3[1])
  {
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_204_0();
  }
  OUTLINED_FUNCTION_97();
}

void PromptCompletionEventUsage.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_44_1();
  OUTLINED_FUNCTION_186();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventUsage()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void PromptCompletionEventRenderedPrompt.responseIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void PromptCompletionEventRenderedPrompt.responseIdentifier.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_221_0();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_97();
}

uint64_t (*PromptCompletionEventRenderedPrompt.responseIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventRenderedPrompt.renderedPrompt.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_1_3();
  v0 = OUTLINED_FUNCTION_90_0();
  return OUTLINED_FUNCTION_10_1(v0, v1, v2, v3);
}

uint64_t PromptCompletionEventRenderedPrompt.renderedPrompt.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_1_3();
  v0 = OUTLINED_FUNCTION_260();
  return OUTLINED_FUNCTION_10_1(v0, v1, v2, v3);
}

uint64_t (*PromptCompletionEventRenderedPrompt.renderedPrompt.modify())()
{
  type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t PromptCompletionEventRenderedPrompt.init(responseIdentifier:renderedPrompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  *a3 = a1;
  a3[1] = a2;
  OUTLINED_FUNCTION_1_3();
  v3 = OUTLINED_FUNCTION_260();
  return OUTLINED_FUNCTION_10_1(v3, v4, v5, v6);
}

void PromptCompletionEventRenderedPrompt.hash(into:)()
{
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_40_2();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_1_3();
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8998], MEMORY[0x24BEB89A8]);
  OUTLINED_FUNCTION_195_0();
  dispatch thunk of Hashable.hash(into:)();
  OUTLINED_FUNCTION_97();
}

uint64_t static PromptCompletionEventRenderedPrompt.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  if (!v2 && (OUTLINED_FUNCTION_24_0() & 1) == 0)
    return 0;
  type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  return static Prompt.Rendering.== infix(_:_:)();
}

Swift::Int PromptCompletionEventRenderedPrompt.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_44_1();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_1_3();
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8998], MEMORY[0x24BEB89A8]);
  dispatch thunk of Hashable.hash(into:)();
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEventRenderedPrompt()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Prompt.Rendering();
  lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type Prompt.Rendering and conformance Prompt.Rendering, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8998], MEMORY[0x24BEB89A8]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t type metadata accessor for PromptCompletionEventRenderedPrompt(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionEventRenderedPrompt);
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in PromptCompletionStream()
{
  return lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type PromptCompletionStream.AsyncIterator and conformance PromptCompletionStream.AsyncIterator, type metadata accessor for PromptCompletionStream.AsyncIterator, (uint64_t)&protocol conformance descriptor for PromptCompletionStream.AsyncIterator);
}

uint64_t type metadata accessor for PromptCompletionStream.AsyncIterator(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for PromptCompletionStream.AsyncIterator);
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEventModelInformation, &type metadata for PromptCompletionEventModelInformation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventModelInformation and conformance PromptCompletionEventModelInformation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEventCandidateTextDelta, &type metadata for PromptCompletionEventCandidateTextDelta);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateTextDelta and conformance PromptCompletionEventCandidateTextDelta);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEventCandidateToolCallDelta, &type metadata for PromptCompletionEventCandidateToolCallDelta);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateToolCallDelta and conformance PromptCompletionEventCandidateToolCallDelta);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEventCandidateFinished, &type metadata for PromptCompletionEventCandidateFinished);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventCandidateFinished and conformance PromptCompletionEventCandidateFinished);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage;
  if (!lazy protocol witness table cache variable for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEventUsage, &type metadata for PromptCompletionEventUsage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEventUsage and conformance PromptCompletionEventUsage);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in PromptCompletionEventRenderedPrompt()
{
  return lazy protocol witness table accessor for type StreamingRequest and conformance StreamingRequest(&lazy protocol witness table cache variable for type PromptCompletionEventRenderedPrompt and conformance PromptCompletionEventRenderedPrompt, type metadata accessor for PromptCompletionEventRenderedPrompt, (uint64_t)&protocol conformance descriptor for PromptCompletionEventRenderedPrompt);
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletionStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for PromptCompletionStream(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PromptCompletionStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStream()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B2D2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    OUTLINED_FUNCTION_19_1(a1, a2, v6);
  }
  else
  {
    OUTLINED_FUNCTION_55_1(*(_QWORD *)(a1 + *(int *)(a3 + 20)));
    OUTLINED_FUNCTION_97();
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStream()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B2D324(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_54_1();
  if (*(_DWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>)
                             - 8)
                 + 84) == a3)
  {
    v8 = OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_18_1(v8, v9, v10, v11);
  }
  else
  {
    *(_QWORD *)(v5 + *(int *)(a4 + 20)) = (v4 - 1);
    OUTLINED_FUNCTION_97();
  }
}

void type metadata completion function for PromptCompletionStream()
{
  unint64_t v0;

  type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>(319, &lazy cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>, MEMORY[0x24BEE6D28]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PromptCompletionStream.AsyncIterator(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PromptCompletionStream.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStream.AsyncIterator()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B2D5A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_54_1();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStream.AsyncIterator()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B2D5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_54_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  v0 = OUTLINED_FUNCTION_53_2();
  return __swift_storeEnumTagSinglePayload(v0, v1, v2, v3);
}

void type metadata completion function for PromptCompletionStream.AsyncIterator()
{
  unint64_t v0;

  type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>(319, (unint64_t *)&lazy cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator, (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))MEMORY[0x24BEE6D08]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for AsyncThrowingStream<PromptCompletionEvent, Error>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for PromptCompletionEvent);
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    v8 = a3(a1, v6, v7, MEMORY[0x24BEE3F20]);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t destroy for PromptCompletionEventModelInformation()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PromptCompletionEventModelInformation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PromptCompletionEventModelInformation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptCompletionEventModelInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventModelInformation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventModelInformation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for PromptCompletionEventModelInformation()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t destroy for PromptCompletionEventCandidateTextDelta(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >> 60 != 15)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 56), v3);
  return result;
}

uint64_t initializeWithCopy for PromptCompletionEventCandidateTextDelta(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = (uint64_t *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v5;
  }
  else
  {
    v7 = *v5;
    outlined copy of Data._Representation(*v5, v6);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v6;
  }
  return a1;
}

_QWORD *assignWithCopy for PromptCompletionEventCandidateTextDelta(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 7;
  v5 = a2[8];
  if (a1[8] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      v8 = a1[7];
      v9 = a1[8];
      a1[7] = v7;
      a1[8] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 7));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 7) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[7] = v6;
  a1[8] = v5;
  return a1;
}

void *__swift_memcpy72_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x48uLL);
}

uint64_t assignWithTake for PromptCompletionEventCandidateTextDelta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 64);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *v6;
      *(_QWORD *)(a1 + 64) = v8;
      outlined consume of Data._Representation(v9, v7);
      return a1;
    }
    outlined destroy of Data(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventCandidateTextDelta(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 72))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventCandidateTextDelta(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for PromptCompletionEventCandidateTextDelta()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t destroy for PromptCompletionEventCandidateToolCallDelta(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(a1 + 88);
  if (v3 >> 60 != 15)
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 80), v3);
  return result;
}

uint64_t initializeWithCopy for PromptCompletionEventCandidateToolCallDelta(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  v5 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v5;
  v6 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v6;
  v7 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v7;
  v8 = a2 + 10;
  v9 = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    outlined copy of Data._Representation(*v8, v9);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v9;
  }
  return a1;
}

_QWORD *assignWithCopy for PromptCompletionEventCandidateToolCallDelta(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2 + 10;
  v5 = a2[11];
  if (a1[11] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      outlined copy of Data._Representation(*v4, v5);
      v8 = a1[10];
      v9 = a1[11];
      a1[10] = v7;
      a1[11] = v5;
      outlined consume of Data._Representation(v8, v9);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 10));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  outlined copy of Data._Representation(*v4, v5);
  a1[10] = v6;
  a1[11] = v5;
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

_QWORD *assignWithTake for PromptCompletionEventCandidateToolCallDelta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2 + 10;
  v10 = a1[11];
  if (v10 >> 60 != 15)
  {
    v11 = a2[11];
    if (v11 >> 60 != 15)
    {
      v12 = a1[10];
      a1[10] = *v9;
      a1[11] = v11;
      outlined consume of Data._Representation(v12, v10);
      return a1;
    }
    outlined destroy of Data((uint64_t)(a1 + 10));
  }
  *((_OWORD *)a1 + 5) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventCandidateToolCallDelta(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventCandidateToolCallDelta(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for PromptCompletionEventCandidateToolCallDelta()
{
  OUTLINED_FUNCTION_181_0();
}

unint64_t destroy for PromptCompletionEventCandidateFinished(uint64_t a1)
{
  unint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = *(_QWORD *)(a1 + 40);
  if (result >= 3)
    return swift_bridgeObjectRelease();
  return result;
}

_QWORD *initializeWithCopy for PromptCompletionEventCandidateFinished(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2 + 4;
  v6 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 >= 3)
  {
    a1[4] = *v5;
    a1[5] = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    *((_OWORD *)a1 + 2) = *(_OWORD *)v5;
  }
  return a1;
}

_QWORD *assignWithCopy for PromptCompletionEventCandidateFinished(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[5];
  if (a1[5] >= 3uLL)
  {
    if (v4 >= 3)
    {
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String((uint64_t)(a1 + 4));
    goto LABEL_6;
  }
  if (v4 < 3)
  {
LABEL_6:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    return a1;
  }
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithTake for PromptCompletionEventCandidateFinished(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2 + 4;
  if (a1[5] >= 3uLL)
  {
    v7 = a2[5];
    if (v7 >= 3)
    {
      a1[4] = *v6;
      a1[5] = v7;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of String((uint64_t)(a1 + 4));
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v6;
  return a1;
}

void type metadata accessor for PromptCompletionEventCandidateFinished()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t initializeWithCopy for PromptCompletionEventUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PromptCompletionEventUsage(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for PromptCompletionEventUsage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

void type metadata accessor for PromptCompletionEventUsage()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptCompletionEventRenderedPrompt(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Prompt.Rendering();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PromptCompletionEventRenderedPrompt(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Prompt.Rendering();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for PromptCompletionEventRenderedPrompt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Prompt.Rendering();
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

_QWORD *assignWithCopy for PromptCompletionEventRenderedPrompt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PromptCompletionEventRenderedPrompt(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for PromptCompletionEventRenderedPrompt(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Prompt.Rendering();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionEventRenderedPrompt()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B2E5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_55_1(*(_QWORD *)(a1 + 8));
    OUTLINED_FUNCTION_97();
  }
  else
  {
    v6 = type metadata accessor for Prompt.Rendering();
    OUTLINED_FUNCTION_19_1(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEventRenderedPrompt()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B2E634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_54_1();
  if (v3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_97();
  }
  else
  {
    v4 = v2;
    v5 = type metadata accessor for Prompt.Rendering();
    OUTLINED_FUNCTION_18_1(v1 + *(int *)(v4 + 20), v0, v0, v5);
  }
}

uint64_t type metadata completion function for PromptCompletionEventRenderedPrompt()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Prompt.Rendering();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined destroy of PromptCompletionStream(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PromptCompletionStream(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_3()
{
  type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  return type metadata accessor for Prompt.Rendering();
}

uint64_t OUTLINED_FUNCTION_10_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_11_2()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_18_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_19_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_34_0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_35_1(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_52_1(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_53_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_55_1@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF)
    LODWORD(a1) = -1;
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_56_1()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  uint64_t v0;

  return v0;
}

void CompletePromptResponse.tokens.getter()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_7_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_134_1();
  type metadata accessor for Token();
  OUTLINED_FUNCTION_540();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_31_0();
  v40 = v6;
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_238();
  v39 = v8;
  v9 = OUTLINED_FUNCTION_160_1();
  type metadata accessor for PromptCompletion(v9);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_328(&v42, v1);
  if (one-time initialization token for inference != -1)
    swift_once();
  v11 = OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_189_1(v11, (uint64_t)static Log.inference);
  v12 = OUTLINED_FUNCTION_433();
  if (os_log_type_enabled(v1, v12))
  {
    v13 = (uint8_t *)OUTLINED_FUNCTION_2();
    v14 = OUTLINED_FUNCTION_2();
    *(_DWORD *)v13 = 136315138;
    v41 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptResponse.Type);
    v15 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_227();
    _os_log_impl(&dword_248B08000, v1, v12, "Accessing tokens on %s is deprecated.", v13, 0xCu);
    OUTLINED_FUNCTION_522();
    OUTLINED_FUNCTION_0_0();
  }

  PromptCompletionEnvelope.unseal()();
  v17 = *(_QWORD *)(v3 + 24);
  OUTLINED_FUNCTION_77_0();
  outlined destroy of Prompt.Turn.Segment(v3, type metadata accessor for PromptCompletion);
  if (*(_QWORD *)(v17 + 16))
  {
    v18 = *(_QWORD *)(v17 + 32);
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_189();
    v19 = OUTLINED_FUNCTION_511();
    outlined copy of FinishReason(v19, v20);
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_37_0();
    v21 = OUTLINED_FUNCTION_511();
    outlined consume of FinishReason(v21, v22);
    v23 = *(_QWORD *)(v18 + 16);
    if (v23)
    {
      OUTLINED_FUNCTION_90();
      v24 = v18 + 56;
      v25 = MEMORY[0x24BEE4AF8];
      do
      {
        v26 = *(_QWORD *)(v24 - 8);
        OUTLINED_FUNCTION_154();
        v27 = OUTLINED_FUNCTION_523();
        outlined copy of Data?(v27, v28);
        OUTLINED_FUNCTION_154();
        Token.init(text:)();
        OUTLINED_FUNCTION_155_1();
        OUTLINED_FUNCTION_199_0();
        OUTLINED_FUNCTION_375(v26);
        OUTLINED_FUNCTION_121_0(v0);
        if (v29)
        {
          outlined destroy of Locale?(v0, &demangling cache variable for type metadata for Token?);
        }
        else
        {
          OUTLINED_FUNCTION_629(v39, v0);
          OUTLINED_FUNCTION_629(v40, v39);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v34 = OUTLINED_FUNCTION_356();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34, v35, v36, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, (uint64_t (*)(_QWORD))MEMORY[0x24BEB86E8]);
            v25 = v37;
          }
          v32 = *(_QWORD *)(v25 + 16);
          v31 = *(_QWORD *)(v25 + 24);
          if (v32 >= v31 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v25, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, (uint64_t (*)(_QWORD))MEMORY[0x24BEB86E8]);
            v25 = v38;
          }
          *(_QWORD *)(v25 + 16) = v32 + 1;
          OUTLINED_FUNCTION_117_0();
          OUTLINED_FUNCTION_629(v25 + v33 + *(_QWORD *)(v2 + 72) * v32, v40);
        }
        v24 += 32;
        --v23;
      }
      while (v23);
      OUTLINED_FUNCTION_37_0();
    }
  }
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_4_1();
}

void CompletePromptResponse.toolCalls.getter()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_331();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_176_1();
  OUTLINED_FUNCTION_328(&v16, v1);
  if (one-time initialization token for inference != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_189_1(v3, (uint64_t)static Log.inference);
  v4 = OUTLINED_FUNCTION_433();
  if (os_log_type_enabled(v1, v4))
  {
    v5 = (uint8_t *)OUTLINED_FUNCTION_2();
    v6 = OUTLINED_FUNCTION_2();
    *(_DWORD *)v5 = 136315138;
    v15 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CompletePromptResponse.Type);
    v7 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_199_0();
    _os_log_impl(&dword_248B08000, v1, v4, "Accessing tool calls on %s is deprecated.", v5, 0xCu);
    OUTLINED_FUNCTION_522();
    OUTLINED_FUNCTION_0_0();
  }

  PromptCompletionEnvelope.unseal()();
  v9 = *(_QWORD *)(v0 + 24);
  v10 = OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_303(v10, type metadata accessor for PromptCompletion);
  if (*(_QWORD *)(v9 + 16))
  {
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_40_0();
    v11 = OUTLINED_FUNCTION_484();
    outlined copy of FinishReason(v11, v12);
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_186();
    v13 = OUTLINED_FUNCTION_484();
    outlined consume of FinishReason(v13, v14);
  }
  else
  {
    OUTLINED_FUNCTION_61();
  }
  OUTLINED_FUNCTION_4_1();
}

__n128 CompletePromptResponseElement.init(token:)()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __n128 v24;
  __int128 v25;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __n128 result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[6];
  uint64_t v37;
  char v38;
  _QWORD v39[7];
  __int128 v40;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_354();
  v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_131_1();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v30 - v6;
  if (one-time initialization token for inference != -1)
    swift_once();
  v8 = OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_189_1(v8, (uint64_t)static Log.inference);
  v9 = OUTLINED_FUNCTION_433();
  if (os_log_type_enabled(v1, v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_235_0();
    *(_WORD *)v10 = 0;
    OUTLINED_FUNCTION_404(&dword_248B08000, v1, v9, "Metadata like candidateIdentifier will be bogus because a deprecated initializer is being used. Use init(element:) instead.", v10);
    OUTLINED_FUNCTION_0_0();
  }

  UUID.init()();
  v11 = UUID.uuidString.getter();
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v7, v3);
  UUID.init()();
  v15 = UUID.uuidString.getter();
  v17 = v16;
  v18 = OUTLINED_FUNCTION_172_1();
  ((void (*)(uint64_t))v14)(v18);
  v19 = Token.text.getter();
  v39[0] = v11;
  v39[1] = v13;
  v39[2] = v15;
  v39[3] = v17;
  v39[4] = 0;
  v39[5] = v19;
  v39[6] = v20;
  v40 = xmmword_248BBF000;
  specialized PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)(v39, (uint64_t)v36);
  v35 = v36[0];
  v34 = v36[1];
  v33 = v36[2];
  v32 = v36[3];
  v31 = v36[4];
  v30 = v36[5];
  v21 = v37;
  v22 = v38;
  v23 = type metadata accessor for Token();
  OUTLINED_FUNCTION_252_0(v23);
  v24 = OUTLINED_FUNCTION_353();
  *(_OWORD *)v0 = v25;
  *(__n128 *)(v0 + 16) = v24;
  v26 = OUTLINED_FUNCTION_591();
  *(_OWORD *)(v0 + 32) = v27;
  *(__n128 *)(v0 + 48) = v26;
  v28 = v30;
  *(_OWORD *)(v0 + 64) = v31;
  *(_OWORD *)(v0 + 80) = v28;
  *(_QWORD *)(v0 + 96) = v21;
  *(_BYTE *)(v0 + 104) = v22;
  OUTLINED_FUNCTION_4_1();
  return result;
}

void CompletePromptResponseElement.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __n128 v8;
  __int128 v9;
  __n128 v10;
  __n128 v11;
  _OWORD v12[5];
  __int128 v13;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE v16[40];
  __int128 v17;
  __n128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  OUTLINED_FUNCTION_532(a1);
  outlined init with copy of PromptCompletionEvent((uint64_t)v16, (uint64_t)v14);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  OUTLINED_FUNCTION_667();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_240_0((uint64_t)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  OUTLINED_FUNCTION_398();
  v13 = v17;
  OUTLINED_FUNCTION_594(v18);
  v12[3] = v19;
  v12[2] = v20;
  v12[1] = v21;
  v12[0] = v22;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_0Tm(v2);
  v7 = v12[4];
  *(_OWORD *)v1 = v13;
  *(_OWORD *)(v1 + 16) = v7;
  v8 = OUTLINED_FUNCTION_353();
  *(_OWORD *)(v1 + 32) = v9;
  *(__n128 *)(v1 + 48) = v8;
  v10 = OUTLINED_FUNCTION_591();
  OUTLINED_FUNCTION_586(v10, v11);
  OUTLINED_FUNCTION_22_0();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration0D0VG_SSs5NeverOTg504_s15D116Generation22CompletePromptResponseV6tokensACSayAA0A0VG_tcfcSSAFcfu_33_2c83176e6c929c34cc0288687e3e762dAFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v14;
    v4 = *(_QWORD *)(type metadata accessor for Token() - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = Token.text.getter();
      v9 = v8;
      v11 = *(_QWORD *)(v14 + 16);
      v10 = *(_QWORD *)(v14 + 24);
      if (v11 >= v10 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      *(_QWORD *)(v14 + 16) = v11 + 1;
      v12 = v14 + 16 * v11;
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void StreamingRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  int v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[8];

  OUTLINED_FUNCTION_7_0();
  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_337();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_QWORD *)((char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = OUTLINED_FUNCTION_663();
  outlined init with copy of DocumentEnvelope(v8, v9, v10);
  v11 = OUTLINED_FUNCTION_267();
  if (v11)
  {
    if (v11 != 1)
    {
      v14 = v7[1];
      v15 = v7[2];
      v16 = v7[3];
      v17 = v7[4];
      v18 = v7[5];
      v19 = v7[6];
      v20 = v7[7];
      OUTLINED_FUNCTION_155_0(2uLL);
      v21[1] = v14;
      v21[2] = v15;
      v21[3] = v16;
      v21[4] = v17;
      v21[5] = v18;
      v21[6] = v19;
      v21[7] = v20;
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_507();
      specialized Array<A>.hash(into:)();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_76_0();
      OUTLINED_FUNCTION_362();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_18();
      OUTLINED_FUNCTION_18();
      OUTLINED_FUNCTION_18();
      OUTLINED_FUNCTION_18();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_300_0((uint64_t)v7, (uint64_t)v3);
    OUTLINED_FUNCTION_155_0(1uLL);
    OUTLINED_FUNCTION_637();
    v12 = (uint64_t)v3;
    v13 = type metadata accessor for CompletePromptTemplateRequest;
  }
  else
  {
    OUTLINED_FUNCTION_505((uint64_t)v7, v0);
    OUTLINED_FUNCTION_155_0(0);
    OUTLINED_FUNCTION_636();
    v12 = OUTLINED_FUNCTION_186_0();
  }
  outlined destroy of Prompt.Turn.Segment(v12, v13);
LABEL_7:
  OUTLINED_FUNCTION_4_1();
}

void static StreamingRequest.== infix(_:_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD v49[7];
  _QWORD v50[8];

  OUTLINED_FUNCTION_7_0();
  v5 = v4;
  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_337();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_350();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_199_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_536();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StreamingRequest, StreamingRequest));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v12);
  v13 = OUTLINED_FUNCTION_287_0();
  OUTLINED_FUNCTION_228_0(v13, v14);
  OUTLINED_FUNCTION_228_0(v5, (uint64_t)v0);
  v15 = OUTLINED_FUNCTION_113_1();
  if (!(_DWORD)v15)
  {
    OUTLINED_FUNCTION_641(v15, v16, type metadata accessor for StreamingRequest);
    if (!OUTLINED_FUNCTION_113_1())
    {
      v38 = OUTLINED_FUNCTION_172_1();
      OUTLINED_FUNCTION_266_0(v38, v39);
      OUTLINED_FUNCTION_599();
      OUTLINED_FUNCTION_110_1();
      v17 = v2;
      goto LABEL_16;
    }
    v18 = type metadata accessor for CompletePromptRequest;
    v19 = v2;
    goto LABEL_12;
  }
  if ((_DWORD)v15 == 1)
  {
    OUTLINED_FUNCTION_316_0(v15, v16, type metadata accessor for StreamingRequest);
    if (OUTLINED_FUNCTION_113_1() == 1)
    {
      OUTLINED_FUNCTION_181_1((uint64_t)v0);
      OUTLINED_FUNCTION_598();
      OUTLINED_FUNCTION_110_1();
      v17 = v1;
LABEL_16:
      OUTLINED_FUNCTION_252(v17);
      OUTLINED_FUNCTION_303(v40, type metadata accessor for StreamingRequest);
      goto LABEL_17;
    }
    v18 = type metadata accessor for CompletePromptTemplateRequest;
    v19 = v1;
LABEL_12:
    outlined destroy of Prompt.Turn.Segment(v19, v18);
LABEL_14:
    OUTLINED_FUNCTION_244_0(v37, &demangling cache variable for type metadata for (StreamingRequest, StreamingRequest));
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_315_0(v15, v16, type metadata accessor for StreamingRequest);
  v20 = v3[1];
  v48 = *v3;
  v21 = v3[2];
  v22 = v3[3];
  v24 = v3[4];
  v23 = v3[5];
  v25 = v3[6];
  v26 = v3[7];
  if (OUTLINED_FUNCTION_113_1() != 2)
  {
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_566();
    v37 = OUTLINED_FUNCTION_39_0();
    goto LABEL_14;
  }
  v41[1] = v20;
  v42 = v22;
  v43 = v23;
  v27 = v21;
  v28 = v0[1];
  v29 = v0[2];
  v30 = v0[3];
  v31 = v0[5];
  v44 = v0[4];
  v45 = v29;
  v32 = v0[6];
  v33 = v0[7];
  v46 = v32;
  v47 = v25;
  specialized static Array<A>.== infix(_:_:)();
  if ((v34 & 1) != 0)
  {
    OUTLINED_FUNCTION_665();
    v49[0] = v35;
    v49[1] = v27;
    v49[2] = v42;
    v49[3] = v24;
    v49[4] = v43;
    v49[5] = v47;
    v49[6] = v26;
    v50[0] = v28;
    v50[1] = v45;
    v50[2] = v30;
    v50[3] = v44;
    v50[4] = v31;
    v50[5] = v46;
    v50[6] = v33;
    LODWORD(v43) = static RequestMetadataEnvelope.== infix(_:_:)(v49, v50);
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_186();
  }
  else
  {
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_388();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_387();
  }
  v36 = OUTLINED_FUNCTION_390();
  OUTLINED_FUNCTION_303(v36, type metadata accessor for StreamingRequest);
LABEL_17:
  OUTLINED_FUNCTION_565();
  OUTLINED_FUNCTION_4_1();
}

uint64_t StreamingRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574656C706D6F63 && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000248BCB080
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000248BCB1C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t StreamingRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6574656C706D6F63;
  if (a1 == 1)
    return 0xD000000000000016;
  return 0xD000000000000010;
}

void StreamingRequest.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  OUTLINED_FUNCTION_6_2();
  v44 = v2;
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.RegisterDocumentCodingKeys>);
  v33[0] = *(_QWORD *)(v43 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v6);
  v42 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.CompletePromptTemplateCodingKeys>);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v9);
  v39 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_76_2(v12, v33[0]);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.CompletePromptCodingKeys>);
  v35 = *(_QWORD *)(v13 - 8);
  v36 = v13;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v14);
  v34 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_333();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_145();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequest.CodingKeys>);
  OUTLINED_FUNCTION_342();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_326();
  lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentEnvelope(v1, (uint64_t)v3, type metadata accessor for StreamingRequest);
  OUTLINED_FUNCTION_616();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v53 = v5;
    if (EnumCaseMultiPayload != 1)
    {
      v27 = *v3;
      v26 = v3[1];
      v40 = v3[2];
      v41 = v26;
      v28 = v3[4];
      v39 = (char *)v3[3];
      v29 = v3[5];
      v30 = v3[6];
      v31 = v3[7];
      OUTLINED_FUNCTION_689();
      v32 = (uint64_t)v42;
      OUTLINED_FUNCTION_28_0();
      v38 = v27;
      v45 = v27;
      v46 = v41;
      v47 = v40;
      v48 = v39;
      v49 = v28;
      v50 = v29;
      v51 = v30;
      v52 = v31;
      lazy protocol witness table accessor for type RegisterDocumentRequest and conformance RegisterDocumentRequest();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_89_1(v32, *(uint64_t (**)(uint64_t, uint64_t))(v33[0] + 8));
      OUTLINED_FUNCTION_194_0(v4, *(uint64_t (**)(uint64_t, uint64_t))(v53 + 8));
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_46_0();
      OUTLINED_FUNCTION_199_0();
      OUTLINED_FUNCTION_566();
      OUTLINED_FUNCTION_152();
      goto LABEL_7;
    }
    v20 = v38;
    OUTLINED_FUNCTION_340((uint64_t)v3, v38);
    OUTLINED_FUNCTION_553();
    OUTLINED_FUNCTION_28_0();
    OUTLINED_FUNCTION_503((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_147_1(v40);
    outlined destroy of Prompt.Turn.Segment(v20, type metadata accessor for CompletePromptTemplateRequest);
    v21 = OUTLINED_FUNCTION_172_1();
  }
  else
  {
    outlined init with take of DocumentRegistrationEnvelope((uint64_t)v3, v0, type metadata accessor for CompletePromptRequest);
    LOBYTE(v45) = 0;
    lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
    v23 = (uint64_t)v34;
    OUTLINED_FUNCTION_28_0();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_34_1(v23, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
    v24 = OUTLINED_FUNCTION_507();
    outlined destroy of Prompt.Turn.Segment(v24, v25);
    v21 = OUTLINED_FUNCTION_517();
  }
  v22(v21);
LABEL_7:
  OUTLINED_FUNCTION_2_4();
}

void StreamingRequest.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  OUTLINED_FUNCTION_6_2();
  v6 = v5;
  v42 = v7;
  v41 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.RegisterDocumentCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_441(v9, v35);
  v40 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.CompletePromptTemplateCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_442(v11, v36);
  v39 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.CompletePromptCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_443(v13, v37);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequest.CodingKeys>);
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_333();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_217_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_374();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_170_1();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_87_0(v6);
  lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  OUTLINED_FUNCTION_251_0();
  if (!v1)
  {
    v38 = v4;
    v21 = v47;
    v22 = KeyedDecodingContainer.allKeys.getter();
    v24 = *(_QWORD *)(v22 + 16);
    if (v24)
    {
      v25 = *(unsigned __int8 *)(v22 + 32);
      OUTLINED_FUNCTION_368(1, v24, v22, v22 + 32, v23, (2 * v24) | 1);
      v27 = v26;
      v29 = v28;
      OUTLINED_FUNCTION_39_0();
      if (v27 == v29 >> 1)
      {
        if (v25)
        {
          if (v25 == 1)
          {
            OUTLINED_FUNCTION_553();
            v30 = v0;
            OUTLINED_FUNCTION_250_0();
            type metadata accessor for CompletePromptTemplateRequest(0);
            lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            v0 = v46;
            OUTLINED_FUNCTION_88_1(v44, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));
            OUTLINED_FUNCTION_24_2();
            OUTLINED_FUNCTION_34_1(v30, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
            swift_storeEnumTagMultiPayload();
            OUTLINED_FUNCTION_630(v2, v32, type metadata accessor for StreamingRequest);
            v20 = (uint64_t)v6;
LABEL_15:
            outlined init with take of DocumentRegistrationEnvelope(v0, v42, type metadata accessor for StreamingRequest);
            goto LABEL_11;
          }
          OUTLINED_FUNCTION_689();
          OUTLINED_FUNCTION_250_0();
          v20 = (uint64_t)v6;
          lazy protocol witness table accessor for type RegisterDocumentRequest and conformance RegisterDocumentRequest();
          OUTLINED_FUNCTION_193_0();
          OUTLINED_FUNCTION_34_1(v45, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_58_1(v0, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
          v0 = v38;
          *(_OWORD *)v38 = v48;
          *(_OWORD *)(v38 + 16) = v49;
          *(_QWORD *)(v38 + 32) = v50;
          *(_OWORD *)(v38 + 40) = v51;
          *(_QWORD *)(v38 + 56) = v52;
          swift_storeEnumTagMultiPayload();
          v34 = v38;
        }
        else
        {
          lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
          OUTLINED_FUNCTION_250_0();
          type metadata accessor for CompletePromptRequest(0);
          lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
          OUTLINED_FUNCTION_193_0();
          v20 = (uint64_t)v6;
          OUTLINED_FUNCTION_58_1(v43, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_34_1(v0, *(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
          swift_storeEnumTagMultiPayload();
          v34 = v3;
        }
        OUTLINED_FUNCTION_630(v34, v33, type metadata accessor for StreamingRequest);
        goto LABEL_15;
      }
      v20 = (uint64_t)v6;
      v21 = v47;
    }
    else
    {
      v20 = (uint64_t)v6;
    }
    OUTLINED_FUNCTION_378();
    OUTLINED_FUNCTION_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    OUTLINED_FUNCTION_229_0();
    v31 = OUTLINED_FUNCTION_46_2();
    OUTLINED_FUNCTION_100_1(v31, *MEMORY[0x24BEE26D0]);
    OUTLINED_FUNCTION_652();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v0, v21);
    goto LABEL_11;
  }
  v20 = (uint64_t)v6;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_0Tm(v20);
  OUTLINED_FUNCTION_653();
  OUTLINED_FUNCTION_2_4();
}

void static OneShotRequest.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40[9];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  OUTLINED_FUNCTION_7_0();
  v5 = v4;
  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  v9 = OUTLINED_FUNCTION_21_0();
  type metadata accessor for OneShotRequest(v9);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_131_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_199_1();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)v40 - v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (OneShotRequest, OneShotRequest));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_192_1(v16, v40[0]);
  OUTLINED_FUNCTION_228_0(v5, v3);
  v17 = OUTLINED_FUNCTION_113_1();
  if ((_DWORD)v17)
  {
    if ((_DWORD)v17 == 1)
    {
      OUTLINED_FUNCTION_316_0(v17, v18, type metadata accessor for OneShotRequest);
      if (OUTLINED_FUNCTION_113_1() == 1)
      {
        OUTLINED_FUNCTION_181_1(v3);
        OUTLINED_FUNCTION_599();
        OUTLINED_FUNCTION_110_1();
        v19 = v2;
LABEL_9:
        OUTLINED_FUNCTION_252(v19);
        OUTLINED_FUNCTION_303(v24, type metadata accessor for OneShotRequest);
        goto LABEL_14;
      }
      v25 = type metadata accessor for CompletePromptRequest;
      v26 = v2;
    }
    else
    {
      OUTLINED_FUNCTION_305_0(v0, v18, type metadata accessor for OneShotRequest);
      if (OUTLINED_FUNCTION_113_1() == 2)
      {
        OUTLINED_FUNCTION_181_1(v3);
        OUTLINED_FUNCTION_598();
        OUTLINED_FUNCTION_110_1();
        v19 = v1;
        goto LABEL_9;
      }
      v25 = type metadata accessor for CompletePromptTemplateRequest;
      v26 = v1;
    }
    outlined destroy of Prompt.Turn.Segment(v26, v25);
LABEL_13:
    OUTLINED_FUNCTION_244_0(v23, &demangling cache variable for type metadata for (OneShotRequest, OneShotRequest));
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_315_0(v17, v18, type metadata accessor for OneShotRequest);
  v20 = *v14;
  v21 = (char *)v14[1];
  v45 = v14[2];
  v46 = v21;
  v22 = v14[9];
  v43 = v20;
  v44 = v22;
  if (OUTLINED_FUNCTION_113_1())
  {
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_390();
    OUTLINED_FUNCTION_566();
    v23 = OUTLINED_FUNCTION_387();
    goto LABEL_13;
  }
  v27 = OUTLINED_FUNCTION_49_2();
  v41 = v35;
  v36 = v36 && v46 == (char *)v35;
  if ((v36 || (v27 = OUTLINED_FUNCTION_24_0(), (v27 & 1) != 0))
    && (OUTLINED_FUNCTION_615(v27, v28, v29, v30, v31, v32, v33, v34, v40[0], v40[1], v40[2], v40[3], v40[4], v40[5], v40[6], v40[7], v40[8], v41, v42,
          v43),
        (v37 & 1) != 0)
    && (OUTLINED_FUNCTION_488(), (v38 & 1) != 0))
  {
    LODWORD(v43) = OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_489();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_388();
    OUTLINED_FUNCTION_502();
    OUTLINED_FUNCTION_112();
    v39 = OUTLINED_FUNCTION_37_0();
  }
  else
  {
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_489();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_388();
    OUTLINED_FUNCTION_502();
    OUTLINED_FUNCTION_114_0();
    v39 = OUTLINED_FUNCTION_387();
  }
  OUTLINED_FUNCTION_303(v39, type metadata accessor for OneShotRequest);
LABEL_14:
  OUTLINED_FUNCTION_565();
  OUTLINED_FUNCTION_4_1();
}

uint64_t OneShotRequest.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6B6F54746E756F63;
  if (a1 == 1)
    return 0x6574656C706D6F63;
  return 0xD000000000000016;
}

void OneShotRequest.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_6_2();
  v38 = v1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CompletePromptTemplateCodingKeys>);
  v27 = *(_QWORD *)(v37 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v5);
  v36 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_76_2(v8, v26);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CompletePromptCodingKeys>);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  v31 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_221_1(v13, v26);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CountTokensCodingKeys>);
  v28 = *(_QWORD *)(v30 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_21_0();
  type metadata accessor for OneShotRequest(v15);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_289_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<OneShotRequest.CodingKeys>);
  OUTLINED_FUNCTION_270_0();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_671();
  OUTLINED_FUNCTION_401();
  outlined init with copy of DocumentEnvelope(v0, v4, type metadata accessor for OneShotRequest);
  v20 = OUTLINED_FUNCTION_623();
  if (v20)
  {
    if (v20 == 1)
    {
      OUTLINED_FUNCTION_421();
      OUTLINED_FUNCTION_556();
      v21 = (uint64_t)v31;
      OUTLINED_FUNCTION_28_0();
      lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
      OUTLINED_FUNCTION_226_0();
      OUTLINED_FUNCTION_58_1(v21, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
      OUTLINED_FUNCTION_647();
      v22 = OUTLINED_FUNCTION_520();
    }
    else
    {
      v24 = v35;
      OUTLINED_FUNCTION_340(v4, v35);
      OUTLINED_FUNCTION_691();
      v25 = (uint64_t)v36;
      OUTLINED_FUNCTION_28_0();
      OUTLINED_FUNCTION_503((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
      OUTLINED_FUNCTION_260_0();
      OUTLINED_FUNCTION_89_1(v25, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      outlined destroy of Prompt.Turn.Segment(v24, type metadata accessor for CompletePromptTemplateRequest);
      v22 = OUTLINED_FUNCTION_172_1();
    }
    v23(v22);
  }
  else
  {
    OUTLINED_FUNCTION_72_2();
    lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
    OUTLINED_FUNCTION_28_0();
    OUTLINED_FUNCTION_97_1();
    OUTLINED_FUNCTION_352();
    OUTLINED_FUNCTION_194_0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    OUTLINED_FUNCTION_89_1((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_199_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_566();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_588();
  OUTLINED_FUNCTION_2_4();
}

void OneShotRequest.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  OneShotRequest.hash(into:)();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void OneShotRequest.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_6_2();
  v5 = v4;
  v34 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CompletePromptTemplateCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_76_2(v7, v29);
  v33 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CompletePromptCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_219_1(v9, v30);
  v32 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CountTokensCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_222_1(v11, v31);
  v37 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<OneShotRequest.CodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  v13 = OUTLINED_FUNCTION_50_2();
  type metadata accessor for OneShotRequest(v13);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_217_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_469();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_170_1();
  MEMORY[0x24BDAC7A8](v17);
  v18 = *(_QWORD *)(v5 + 32);
  OUTLINED_FUNCTION_671();
  OUTLINED_FUNCTION_251_0();
  if (!v0)
  {
    v19 = OUTLINED_FUNCTION_148_1();
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      OUTLINED_FUNCTION_149_1(v19, v20);
      OUTLINED_FUNCTION_386();
      if (!(v3 >> 1))
      {
        if ((_DWORD)v18)
        {
          if ((_DWORD)v18 != 1)
          {
            OUTLINED_FUNCTION_691();
            OUTLINED_FUNCTION_60_2();
            type metadata accessor for CompletePromptTemplateRequest(0);
            lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
            OUTLINED_FUNCTION_178_0();
            OUTLINED_FUNCTION_88_1(v36, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
            OUTLINED_FUNCTION_24_2();
            OUTLINED_FUNCTION_34_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
            OUTLINED_FUNCTION_510();
            OUTLINED_FUNCTION_207_1(v18, v26, type metadata accessor for OneShotRequest);
            v2 = v5;
LABEL_15:
            OUTLINED_FUNCTION_635(v27, v28, type metadata accessor for OneShotRequest);
            goto LABEL_11;
          }
          OUTLINED_FUNCTION_556();
          OUTLINED_FUNCTION_169_1();
          v2 = v5;
          type metadata accessor for CompletePromptRequest(0);
          lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
          OUTLINED_FUNCTION_193_0();
          OUTLINED_FUNCTION_34_1(v18, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_183_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
          OUTLINED_FUNCTION_369();
          v25 = v37;
        }
        else
        {
          lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
          OUTLINED_FUNCTION_60_2();
          lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest();
          OUTLINED_FUNCTION_193_0();
          v2 = v5;
          OUTLINED_FUNCTION_58_1(v35, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_34_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
          OUTLINED_FUNCTION_74_2();
          v25 = v5;
        }
        OUTLINED_FUNCTION_207_1(v25, v24, type metadata accessor for OneShotRequest);
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_466();
    }
    else
    {
      v2 = v5;
    }
    OUTLINED_FUNCTION_378();
    OUTLINED_FUNCTION_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    OUTLINED_FUNCTION_229_0();
    v21 = OUTLINED_FUNCTION_46_2();
    OUTLINED_FUNCTION_100_1(v21, *MEMORY[0x24BEE26D0]);
    OUTLINED_FUNCTION_652();
    swift_unknownObjectRelease();
    v22 = OUTLINED_FUNCTION_530();
    v23(v22);
    goto LABEL_11;
  }
  v2 = v5;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_0Tm(v2);
  OUTLINED_FUNCTION_653();
  OUTLINED_FUNCTION_2_4();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StreamingRequest.CodingKeys()
{
  char *v0;

  return StreamingRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StreamingRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = StreamingRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.CodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.CodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance StreamingRequest.CompletePromptCodingKeys()
{
  StreamingRequest.CompletePromptCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequest.RegisterDocumentCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequest.RegisterDocumentCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance StreamingRequest()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_303_0();
  OUTLINED_FUNCTION_584(v0);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void protocol witness for Decodable.init(from:) in conformance StreamingRequest()
{
  StreamingRequest.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance StreamingRequest()
{
  StreamingRequest.encode(to:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance OneShotRequest.CodingKeys()
{
  char *v0;

  return OneShotRequest.CodingKeys.stringValue.getter(*v0);
}

void protocol witness for CodingKey.init(stringValue:) in conformance OneShotRequest.CodingKeys(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  OneShotRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = v4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance OneShotRequest.CountTokensCodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OneShotRequest.CountTokensCodingKeys()
{
  lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hash(into:) in conformance OneShotRequest()
{
  OneShotRequest.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OneShotRequest()
{
  Hasher.init(_seed:)();
  OneShotRequest.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance OneShotRequest()
{
  OneShotRequest.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance OneShotRequest()
{
  OneShotRequest.encode(to:)();
}

void RegisterDocumentRequest.documents.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSURL *v13;
  void *v14;
  void *v15;
  Class isa;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_256_0();
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_444();
  type metadata accessor for DocumentEnvelope(v6);
  OUTLINED_FUNCTION_167_1();
  MEMORY[0x24BDAC7A8](v7);
  v23 = OUTLINED_FUNCTION_336();
  OUTLINED_FUNCTION_540();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_118_0();
  v9 = *v1;
  v10 = *(_QWORD *)(*v1 + 16);
  if (v10)
  {
    v24 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_189();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_117_0();
    v12 = v9 + v11;
    v22 = *(_QWORD *)(v0 + 72);
    do
    {
      OUTLINED_FUNCTION_417(v12, v3);
      URL._bridgeToObjectiveC()(v13);
      v15 = v14;
      isa = Data._bridgeToObjectiveC()().super.isa;
      v17 = OUTLINED_FUNCTION_90_0();
      MEMORY[0x2495A70F4](v17);

      v18 = OUTLINED_FUNCTION_617();
      v19(v18);
      DocumentResource.init(url:)();
      outlined destroy of Prompt.Turn.Segment(v3, type metadata accessor for DocumentEnvelope);
      v20 = v24;
      if ((OUTLINED_FUNCTION_371() & 1) == 0)
      {
        OUTLINED_FUNCTION_356();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v20 = v24;
      }
      v21 = *(_QWORD *)(v20 + 16);
      if (v21 >= *(_QWORD *)(v20 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v20 = v24;
      }
      *(_QWORD *)(v20 + 16) = v21 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v20+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v21, v4, v23);
      v24 = v20;
      v12 += v22;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_4_1();
}

uint64_t RegisterDocumentRequest.metadata.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  OUTLINED_FUNCTION_391(*(_QWORD *)(v1 + 48), a1);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_179_1();
}

void __swiftcall RegisterDocumentRequest.init(documents:metadata:)(TokenGeneration::RegisterDocumentRequest *__return_ptr retstr, Swift::OpaquePointer documents, TokenGeneration::RequestMetadata *metadata)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSURL *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  OUTLINED_FUNCTION_7_0();
  v7 = v6;
  v9 = v8;
  v11 = v10;
  OUTLINED_FUNCTION_256_0();
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  v13 = OUTLINED_FUNCTION_336();
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_284_0();
  v17 = v15 - v16;
  MEMORY[0x24BDAC7A8](v18);
  v19 = OUTLINED_FUNCTION_678();
  v53 = type metadata accessor for DocumentEnvelope(v19);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_350();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_238();
  v54 = v22;
  v47 = v7[1];
  v48 = *v7;
  v45 = v7[3];
  v46 = v7[2];
  v49 = *((_OWORD *)v7 + 2);
  v44 = v7[6];
  v23 = *(_QWORD *)(v9 + 16);
  if (v23)
  {
    v43 = v11;
    v55 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_117_0();
    v25 = v9 + v24;
    v50 = *(_QWORD *)(v4 + 72);
    v51 = v4;
    v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v52(v3, v25, v13);
      v52(v17, v3, v13);
      DocumentResource.url.getter();
      DocumentResource.url.getter();
      URL._bridgeToObjectiveC()(v26);
      v28 = v27;
      v29 = OUTLINED_FUNCTION_472();
      v30(v29);
      v31 = (void *)MEMORY[0x2495A7100](v28);

      if (!v31)
        break;
      v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v34 = v33;

      v35 = *(void (**)(uint64_t))(v51 + 8);
      v36 = OUTLINED_FUNCTION_424();
      v35(v36);
      v37 = (uint64_t *)(v5 + *(int *)(v53 + 20));
      *v37 = v32;
      v37[1] = v34;
      outlined init with take of DocumentRegistrationEnvelope(v5, v54, type metadata accessor for DocumentEnvelope);
      ((void (*)(uint64_t, uint64_t))v35)(v3, v13);
      v38 = v55;
      if ((OUTLINED_FUNCTION_371() & 1) == 0)
      {
        OUTLINED_FUNCTION_237_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v38 = v55;
      }
      v40 = *(_QWORD *)(v38 + 16);
      v39 = *(_QWORD *)(v38 + 24);
      if (v40 >= v39 >> 1)
      {
        OUTLINED_FUNCTION_491(v39);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v38 = v55;
      }
      *(_QWORD *)(v38 + 16) = v40 + 1;
      OUTLINED_FUNCTION_106_0();
      outlined init with take of DocumentRegistrationEnvelope(v54, v41 + v42 * v40, type metadata accessor for DocumentEnvelope);
      v25 += v50;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        v11 = v43;
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_39_0();
    v38 = MEMORY[0x24BEE4AF8];
LABEL_11:
    *(_QWORD *)v11 = v38;
    *(_QWORD *)(v11 + 8) = v48;
    *(_QWORD *)(v11 + 16) = v47;
    *(_QWORD *)(v11 + 24) = v46;
    *(_QWORD *)(v11 + 32) = v45;
    *(_OWORD *)(v11 + 40) = v49;
    *(_QWORD *)(v11 + 56) = v44;
    OUTLINED_FUNCTION_4_1();
  }
}

uint64_t RegisterDocumentRequest.hash(into:)()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[3];
  uint64_t v4;

  v1 = *(_OWORD *)(v0 + 24);
  v3[0] = *(_OWORD *)(v0 + 8);
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_195_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_186();
  outlined retain of RequestMetadataEnvelope((uint64_t)v3);
  OUTLINED_FUNCTION_362();
  return outlined release of RequestMetadataEnvelope((uint64_t)v3);
}

uint64_t static RegisterDocumentRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v12 = *(_OWORD *)(a1 + 8);
  v13 = *(_OWORD *)(a1 + 24);
  v14 = *(_OWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 56);
  v17 = *(_OWORD *)(a2 + 8);
  specialized static Array<A>.== infix(_:_:)();
  if ((v2 & 1) != 0)
    v10 = OUTLINED_FUNCTION_547(v2, v3, v4, v5, v6, v7, v8, v9, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16, v17);
  else
    v10 = 0;
  return v10 & 1;
}

uint64_t static RequestMetadataEnvelope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v5 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v6 = a1[5];
      v7 = a2[5];
      if (v6)
      {
        if (v7)
        {
          v8 = a1[4] == a2[4] && v6 == v7;
          if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            return specialized static Dictionary<>.== infix(_:_:)(a1[6], a2[6]);
        }
      }
      else if (!v7)
      {
        return specialized static Dictionary<>.== infix(_:_:)(a1[6], a2[6]);
      }
    }
  }
  return 0;
}

uint64_t RegisterDocumentRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6E656D75636F645FLL && a2 == 0xEA00000000007374;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t RegisterDocumentRequest.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7461646174656D5FLL;
  else
    return 0x6E656D75636F645FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RegisterDocumentRequest.CodingKeys()
{
  char *v0;

  return RegisterDocumentRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RegisterDocumentRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = RegisterDocumentRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegisterDocumentRequest.CodingKeys()
{
  lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RegisterDocumentRequest.CodingKeys()
{
  lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void RegisterDocumentRequest.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_6_2();
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegisterDocumentRequest.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_145();
  v7 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_87_0(v5);
  lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentEnvelope]);
  lazy protocol witness table accessor for type [DocumentEnvelope] and conformance <A> [A]();
  OUTLINED_FUNCTION_25_0();
  if (!v1)
  {
    OUTLINED_FUNCTION_535(v7);
    OUTLINED_FUNCTION_25_0();
  }
  OUTLINED_FUNCTION_89_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int RegisterDocumentRequest.hashValue.getter()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 24);
  v4[0] = *(_OWORD *)(v0 + 8);
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_40_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_213();
  v2 = outlined retain of RequestMetadataEnvelope((uint64_t)v4);
  OUTLINED_FUNCTION_583(v2);
  outlined release of RequestMetadataEnvelope((uint64_t)v4);
  return OUTLINED_FUNCTION_130_0();
}

void RegisterDocumentRequest.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_6_2();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RegisterDocumentRequest.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_140_1();
  lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys();
  OUTLINED_FUNCTION_622();
  OUTLINED_FUNCTION_129_0();
  if (v0)
  {
    OUTLINED_FUNCTION_414();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentEnvelope]);
    lazy protocol witness table accessor for type [DocumentEnvelope] and conformance <A> [A]();
    OUTLINED_FUNCTION_212_1();
    v4 = OUTLINED_FUNCTION_554();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_212_1();
    OUTLINED_FUNCTION_38_2();
    if (v4)
    {
      OUTLINED_FUNCTION_199_0();
      OUTLINED_FUNCTION_414();
    }
    else
    {
      *v2 = v5;
      v2[1] = v5;
      v2[2] = v6;
      v2[3] = v7;
      v2[4] = v8;
      v2[5] = v9;
      v2[6] = v10;
      v2[7] = v11;
      OUTLINED_FUNCTION_90();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_72();
      OUTLINED_FUNCTION_414();
      OUTLINED_FUNCTION_227();
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_61();
    }
    OUTLINED_FUNCTION_199_0();
  }
  OUTLINED_FUNCTION_2_4();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegisterDocumentRequest()
{
  uint64_t v0;
  __int128 v1;
  _BYTE v3[72];
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 24);
  v4[0] = *(_OWORD *)(v0 + 8);
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 56);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  outlined retain of RequestMetadataEnvelope((uint64_t)v4);
  RequestMetadataEnvelope.hash(into:)((uint64_t)v3);
  outlined release of RequestMetadataEnvelope((uint64_t)v4);
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance RegisterDocumentRequest()
{
  RegisterDocumentRequest.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance RegisterDocumentRequest()
{
  RegisterDocumentRequest.encode(to:)();
}

void RegisterDocumentResponseElement.registration.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_354();
  type metadata accessor for DocumentResourceIdentifier();
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_21_0();
  v6 = type metadata accessor for DocumentRegistration.Progress();
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v7);
  v8 = OUTLINED_FUNCTION_50_2();
  type metadata accessor for DocumentRegistrationStatusEnvelope(v8);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_118_0();
  v10 = OUTLINED_FUNCTION_276_0();
  outlined init with copy of DocumentEnvelope(v10, v11, v12);
  OUTLINED_FUNCTION_659();
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      type metadata accessor for DocumentRegistrationEnvelope(0);
      static DocumentRegistration.error(description:url:)();
      OUTLINED_FUNCTION_39_0();
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_240_0(v0, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    type metadata accessor for DocumentRegistrationEnvelope(0);
    static DocumentRegistration.finished(identifier:url:)();
    v14 = OUTLINED_FUNCTION_186_0();
  }
  else
  {
    DocumentRegistration.Progress.init(progress:bytes:totalBytes:)();
    type metadata accessor for DocumentRegistrationEnvelope(0);
    static DocumentRegistration.registering(progress:url:)();
    v16 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v14 = v1;
    v15 = v6;
  }
  v16(v14, v15);
LABEL_7:
  OUTLINED_FUNCTION_4_1();
}

void RegisterDocumentResponseElement.hash(into:)(uint64_t a1)
{
  DocumentRegistrationStatusEnvelope.hash(into:)(a1);
  type metadata accessor for DocumentRegistrationEnvelope(0);
  OUTLINED_FUNCTION_256_0();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  OUTLINED_FUNCTION_196_0();
  OUTLINED_FUNCTION_97();
}

void static RegisterDocumentResponseElement.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_54_1();
  if ((static DocumentRegistrationStatusEnvelope.== infix(_:_:)(v2, v3) & 1) != 0)
  {
    v4 = type metadata accessor for DocumentRegistrationEnvelope(0);
    MEMORY[0x2495A5978](v1 + *(int *)(v4 + 20), v0 + *(int *)(v4 + 20));
  }
  OUTLINED_FUNCTION_104();
}

uint64_t static DocumentRegistrationEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static DocumentRegistrationStatusEnvelope.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    type metadata accessor for DocumentRegistrationEnvelope(0);
    JUMPOUT(0x2495A5978);
  }
  return 0;
}

uint64_t RegisterDocumentResponseElement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x727473696765725FLL && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t RegisterDocumentResponseElement.CodingKeys.stringValue.getter()
{
  return 0x727473696765725FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RegisterDocumentResponseElement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = RegisterDocumentResponseElement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RegisterDocumentResponseElement.CodingKeys()
{
  lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RegisterDocumentResponseElement.CodingKeys()
{
  lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void RegisterDocumentResponseElement.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RegisterDocumentResponseElement.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_87_0(a1);
  lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  type metadata accessor for DocumentRegistrationEnvelope(0);
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope and conformance DocumentRegistrationEnvelope);
  OUTLINED_FUNCTION_602();
  OUTLINED_FUNCTION_34_1((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_157_1();
}

void RegisterDocumentResponseElement.hashValue.getter()
{
  _BYTE v0[72];

  OUTLINED_FUNCTION_2_1();
  DocumentRegistrationStatusEnvelope.hash(into:)((uint64_t)v0);
  type metadata accessor for DocumentRegistrationEnvelope(0);
  OUTLINED_FUNCTION_256_0();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  OUTLINED_FUNCTION_452();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void RegisterDocumentResponseElement.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_6_2();
  v11 = v3;
  type metadata accessor for DocumentRegistrationEnvelope(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_178();
  v13 = v5;
  v12 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RegisterDocumentResponseElement.CodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v6);
  v7 = OUTLINED_FUNCTION_223_1();
  type metadata accessor for RegisterDocumentResponseElement(v7);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_289_0();
  v9 = (_QWORD *)OUTLINED_FUNCTION_312_0();
  __swift_project_boxed_opaque_existential_1(v9, v10);
  lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope and conformance DocumentRegistrationEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_194_0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    outlined init with take of DocumentRegistrationEnvelope(v13, v1, type metadata accessor for DocumentRegistrationEnvelope);
    outlined init with take of DocumentRegistrationEnvelope(v1, v11, type metadata accessor for RegisterDocumentResponseElement);
  }
  OUTLINED_FUNCTION_414();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegisterDocumentResponseElement()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  DocumentRegistrationStatusEnvelope.hash(into:)((uint64_t)v1);
  type metadata accessor for DocumentRegistrationEnvelope(0);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance RegisterDocumentResponseElement()
{
  RegisterDocumentResponseElement.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance RegisterDocumentResponseElement(_QWORD *a1)
{
  RegisterDocumentResponseElement.encode(to:)(a1);
}

void PromptEnvelope.unseal()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  OUTLINED_FUNCTION_7_0();
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v52 = v12;
  v53 = v11;
  v68 = type metadata accessor for Prompt.ImageAttachment.Format();
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_440(v14, v49[0]);
  v15 = type metadata accessor for Prompt.AttachmentContent();
  v65 = *(_QWORD *)(v15 - 8);
  v66 = v15;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_379(v17, v49[0]);
  v18 = type metadata accessor for Prompt.Attachment();
  v62 = *(_QWORD *)(v18 - 8);
  v63 = v18;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_60_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_286_0(v21, v49[0]);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v22);
  v60 = (char *)v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = OUTLINED_FUNCTION_542();
  OUTLINED_FUNCTION_167_1();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_445();
  v25 = type metadata accessor for Prompt.Delimiter();
  v57 = *(_QWORD *)(v25 - 8);
  v58 = v25;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_68_0();
  v27 = *(_QWORD *)(v8 + 16);
  v54 = v10;
  v55 = v6;
  if (v27)
  {
    v50 = v4;
    v51 = v1;
    v70 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_495();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_117_0();
    v49[1] = v8;
    v29 = v8 + v28;
    v56 = *(_QWORD *)(v0 + 72);
    v30 = v70;
    v31 = v61;
    do
    {
      v69 = v27;
      outlined init with copy of DocumentEnvelope(v29, v3, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      outlined init with copy of Prompt.Rendering?(v3 + *(int *)(v59 + 32), v31, &demangling cache variable for type metadata for Locale?);
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_11();
      Prompt.SpecialToken.init(identifier:instance:locale:)();
      Prompt.Delimiter.init(token:position:priority:)();
      outlined destroy of Prompt.Turn.Segment(v3, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_237_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v30 = v70;
      }
      v33 = *(_QWORD *)(v30 + 16);
      v32 = *(_QWORD *)(v30 + 24);
      v34 = v69;
      if (v33 >= v32 >> 1)
      {
        OUTLINED_FUNCTION_492(v32);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v30 = v70;
      }
      *(_QWORD *)(v30 + 16) = v33 + 1;
      OUTLINED_FUNCTION_117_0();
      (*(void (**)(unint64_t, uint64_t))(v36 + 32))(v30 + v35 + *(_QWORD *)(v36 + 72) * v33, v2);
      v70 = v30;
      v29 += v56;
      v27 = v34 - 1;
    }
    while (v27);
    OUTLINED_FUNCTION_114_0();
    v6 = v55;
    v4 = v50;
  }
  else
  {
    OUTLINED_FUNCTION_90();
    v30 = MEMORY[0x24BEE4AF8];
  }
  v37 = *(_QWORD *)(v6 + 16);
  v38 = MEMORY[0x24BEE4AF8];
  if (v37)
  {
    v58 = v30;
    v70 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_495();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v38 = v70;
    LODWORD(v69) = *MEMORY[0x24BEB8860];
    LODWORD(v61) = *MEMORY[0x24BEB8858];
    LODWORD(v60) = *MEMORY[0x24BEB8898];
    v59 = *(_QWORD *)(v4 + 104);
    v39 = v6 + 64;
    v40 = v64;
    do
    {
      if (*(_BYTE *)(v39 - 32))
        v41 = v61;
      else
        v41 = v69;
      ((void (*)(uint64_t, uint64_t, uint64_t))v59)(v67, v41, v68);
      OUTLINED_FUNCTION_295();
      OUTLINED_FUNCTION_295();
      Prompt.ImageAttachment.init(format:data:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v65 + 104))(v40, v60, v66);
      Prompt.Attachment.init(content:position:priority:)();
      v42 = OUTLINED_FUNCTION_237();
      outlined consume of Data._Representation(v42, v43);
      v70 = v38;
      v45 = *(_QWORD *)(v38 + 16);
      v44 = *(_QWORD *)(v38 + 24);
      if (v45 >= v44 >> 1)
      {
        OUTLINED_FUNCTION_491(v44);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v38 = v70;
      }
      v39 += 40;
      *(_QWORD *)(v38 + 16) = v45 + 1;
      OUTLINED_FUNCTION_106_0();
      OUTLINED_FUNCTION_302_0(v46 + v47 * v45, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 32));
      --v37;
    }
    while (v37);
    OUTLINED_FUNCTION_390();
    v30 = v58;
  }
  MEMORY[0x2495A5D14](v53, v54, v30, v38);
  OUTLINED_FUNCTION_4_1();
}

uint64_t CountTokensRequest.metadata.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  OUTLINED_FUNCTION_391(*(_QWORD *)(v1 + 72), a1);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_179_1();
}

uint64_t PromptEnvelope.init(sealing:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, void (*)(_QWORD));
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t);
  uint64_t v78;
  void (*v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t);
  int v83;
  uint64_t v84;
  void (*v85)(uint64_t);
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t);
  uint64_t v100;
  char v101;
  uint64_t v102;
  char *v103;
  void (*v104)(char *, uint64_t);
  char *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  int64_t v110;
  char v111;
  int64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL8 v119;
  uint64_t v120;
  Swift::String v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125[5];
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t);
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(_QWORD);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  OUTLINED_FUNCTION_7_0();
  v158 = v3;
  v159 = v4;
  v6 = v5;
  v7 = type metadata accessor for Prompt.ImageAttachment.Format();
  v141 = *(_QWORD *)(v7 - 8);
  v142 = v7;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v9);
  v140 = (uint64_t)v125 - v10;
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_238();
  v146 = v12;
  OUTLINED_FUNCTION_160_1();
  v145 = type metadata accessor for Prompt.ImageAttachment();
  v139 = *(_QWORD *)(v145 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_31_0();
  v138 = v14;
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_238();
  OUTLINED_FUNCTION_170_0(v16);
  v17 = type metadata accessor for Prompt.AttachmentContent();
  OUTLINED_FUNCTION_478();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_5_1();
  v21 = MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_679(v21, v22, v23, v24, v25, v26, v27, v28, v125[0]);
  v153 = type metadata accessor for Prompt.Attachment();
  v143 = *(_QWORD *)(v153 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v29);
  v152 = (char *)v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_238();
  v151 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v33);
  v35 = OUTLINED_FUNCTION_286_0(v34, v125[0]);
  v147 = *(_QWORD *)(v35 - 8);
  v148 = v35;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_89_0();
  v135 = (void (*)(_QWORD))type metadata accessor for Prompt.Delimiter();
  OUTLINED_FUNCTION_342();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_238();
  v40 = OUTLINED_FUNCTION_170_0(v39);
  v133 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(v40);
  v132 = *(_QWORD *)(v133 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_199_1();
  MEMORY[0x24BDAC7A8](v42);
  v44 = (char *)v125 - v43;
  v126 = Prompt.string.getter();
  v125[4] = v45;
  v46 = Prompt.delimiters.getter();
  v47 = *(_QWORD *)(v46 + 16);
  v127 = v6;
  v144 = v17;
  v155 = v0;
  if (v47)
  {
    v156 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_117_0();
    v125[3] = v46;
    v49 = v46 + v48;
    v129 = *(_QWORD *)(v2 + 72);
    v131 = v2;
    OUTLINED_FUNCTION_473(*(_QWORD *)(v2 + 16));
    v130 = v44;
    v50 = v135;
    do
    {
      v150 = v47;
      v51 = v136;
      v52 = v128;
      ((void (*)(uint64_t, uint64_t, void (*)(_QWORD)))v128)(v136, v49, v50);
      v53 = v134;
      v54 = OUTLINED_FUNCTION_640();
      v52(v54);
      v1[4] = Prompt.Delimiter.position.getter();
      Prompt.Delimiter.token.getter();
      v55 = Prompt.SpecialToken.identifier.getter();
      v57 = v56;
      OUTLINED_FUNCTION_427();
      *v1 = v55;
      v1[1] = v57;
      Prompt.Delimiter.token.getter();
      v58 = Prompt.SpecialToken.instance.getter();
      v60 = v59;
      OUTLINED_FUNCTION_427();
      v1[2] = v58;
      v1[3] = v60;
      v1[5] = Prompt.Delimiter.priority.getter();
      Prompt.Delimiter.token.getter();
      v61 = v149;
      Prompt.SpecialToken.locale.getter();
      v62 = *(void (**)(uint64_t, void (*)(_QWORD)))(v131 + 8);
      v63 = v53;
      v64 = (uint64_t)v130;
      v62(v63, v50);
      OUTLINED_FUNCTION_427();
      outlined init with take of Locale?(v61, (uint64_t)v1 + *(int *)(v133 + 32), &demangling cache variable for type metadata for Locale?);
      outlined init with take of DocumentRegistrationEnvelope((uint64_t)v1, v64, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      v62(v51, v50);
      v65 = v156;
      if ((OUTLINED_FUNCTION_371() & 1) == 0)
      {
        OUTLINED_FUNCTION_356();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v65 = v156;
      }
      v66 = *(_QWORD *)(v65 + 16);
      v0 = v155;
      v67 = v150;
      if (v66 >= *(_QWORD *)(v65 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v65 = v156;
      }
      *(_QWORD *)(v65 + 16) = v66 + 1;
      OUTLINED_FUNCTION_106_0();
      outlined init with take of DocumentRegistrationEnvelope(v64, v68 + v69 * v66, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
      v49 += v129;
      v47 = v67 - 1;
    }
    while (v47);
    v131 = v65;
    OUTLINED_FUNCTION_114_0();
    v6 = v127;
    v17 = v144;
  }
  else
  {
    OUTLINED_FUNCTION_39_0();
    v131 = MEMORY[0x24BEE4AF8];
  }
  v70 = Prompt.attachments.getter();
  v71 = *(_QWORD *)(v70 + 16);
  v73 = v145;
  v72 = v146;
  if (v71)
  {
    v157 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v71, 0);
    OUTLINED_FUNCTION_117_0();
    v130 = (char *)v70;
    v75 = v70 + v74;
    v136 = *(_QWORD *)(v76 + 72);
    OUTLINED_FUNCTION_467(*(_QWORD *)(v76 + 16));
    LODWORD(v134) = *MEMORY[0x24BEB8898];
    LODWORD(v133) = *MEMORY[0x24BEB8860];
    LODWORD(v132) = *MEMORY[0x24BEB8858];
    while (1)
    {
      v149 = v75;
      v150 = v71;
      v77 = v135;
      ((void (*)(char *, uint64_t, uint64_t))v135)(v151, v75, v153);
      v78 = OUTLINED_FUNCTION_210_0();
      v77(v78);
      Prompt.Attachment.content.getter();
      v79 = *(void (**)(uint64_t))(v0 + 16);
      v80 = OUTLINED_FUNCTION_210_0();
      v79(v80);
      v81 = OUTLINED_FUNCTION_276_0();
      v83 = v82(v81);
      if (v83 != (_DWORD)v134)
        break;
      v84 = OUTLINED_FUNCTION_276_0();
      v85(v84);
      v86 = v139;
      v87 = v137;
      v88 = OUTLINED_FUNCTION_663();
      v89(v88);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16))(v138, v87, v73);
      Prompt.ImageAttachment.format.getter();
      v90 = v141;
      v91 = v142;
      v92 = v140;
      OUTLINED_FUNCTION_644(v140);
      v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 88))(v92, v91);
      if (v93 != (_DWORD)v133 && v93 != (_DWORD)v132)
      {
        OUTLINED_FUNCTION_644(v125[2]);
        OUTLINED_FUNCTION_348();
        _StringGuts.grow(_:)(23);
        OUTLINED_FUNCTION_571();
        OUTLINED_FUNCTION_322();
        OUTLINED_FUNCTION_175(21, v123);
        _print_unlocked<A, B>(_:_:)();
        OUTLINED_FUNCTION_347();
        v124 = 1055;
        goto LABEL_26;
      }
      v95 = v93 != (_DWORD)v133;
      OUTLINED_FUNCTION_34_1(v72, *(uint64_t (**)(uint64_t, uint64_t))(v90 + 8));
      LOBYTE(v156) = v95;
      v96 = Prompt.ImageAttachment.data.getter();
      v98 = v97;
      v99 = *(void (**)(uint64_t))(v86 + 8);
      v100 = OUTLINED_FUNCTION_424();
      v99(v100);
      v101 = v156;
      v0 = v155;
      (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v154, v17);
      v102 = OUTLINED_FUNCTION_237();
      v99(v102);
      LOBYTE(v156) = v101;
      v103 = v152;
      v148 = Prompt.Attachment.position.getter();
      v147 = Prompt.Attachment.priority.getter();
      v104 = *(void (**)(char *, uint64_t))(v143 + 8);
      v105 = v103;
      v106 = v153;
      v104(v105, v153);
      v107 = v156;
      v104(v151, v106);
      v108 = v157;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v109 = OUTLINED_FUNCTION_237_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v109, v110, v111);
        v108 = v157;
      }
      v113 = v149;
      v112 = v150;
      v115 = *(_QWORD *)(v108 + 16);
      v114 = *(_QWORD *)(v108 + 24);
      if (v115 >= v114 >> 1)
      {
        v119 = OUTLINED_FUNCTION_491(v114);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119, v115 + 1, 1);
        v108 = v157;
      }
      *(_QWORD *)(v108 + 16) = v115 + 1;
      v116 = v108 + 40 * v115;
      *(_BYTE *)(v116 + 32) = v107;
      *(_QWORD *)(v116 + 40) = v96;
      *(_QWORD *)(v116 + 48) = v98;
      v72 = v146;
      v117 = v147;
      *(_QWORD *)(v116 + 56) = v148;
      *(_QWORD *)(v116 + 64) = v117;
      OUTLINED_FUNCTION_531();
      v75 = v113 + v118;
      v71 = v112 - 1;
      v17 = v144;
      v73 = v145;
      if (!v71)
      {
        v6 = v127;
        goto LABEL_24;
      }
    }
    ((void (*)(uint64_t, uint64_t, uint64_t))v79)(v125[1], v154, v17);
    OUTLINED_FUNCTION_348();
    _StringGuts.grow(_:)(30);
    OUTLINED_FUNCTION_571();
    OUTLINED_FUNCTION_322();
    String.append(_:)(v122);
    _print_unlocked<A, B>(_:_:)();
    OUTLINED_FUNCTION_347();
    v124 = 961;
LABEL_26:
    v125[0] = v124;
    OUTLINED_FUNCTION_143_1();
    OUTLINED_FUNCTION_568();
  }
LABEL_24:
  v120 = OUTLINED_FUNCTION_283_0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 8))(v6, v120);
  OUTLINED_FUNCTION_39_0();
  return v126;
}

uint64_t CountTokensRequest.hash(into:)()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[3];
  uint64_t v4;

  v1 = *(_OWORD *)(v0 + 48);
  v3[0] = *(_OWORD *)(v0 + 32);
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 80);
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_312_0();
  String.hash(into:)();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_507();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_195_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_18();
  outlined retain of RequestMetadataEnvelope((uint64_t)v3);
  OUTLINED_FUNCTION_362();
  return outlined release of RequestMetadataEnvelope((uint64_t)v3);
}

uint64_t static CountTokensRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;

  v25 = *(_OWORD *)(a1 + 32);
  v28 = *(_OWORD *)(a1 + 48);
  v31 = *(_OWORD *)(a1 + 64);
  v34 = *(_QWORD *)(a1 + 80);
  v40 = *(_OWORD *)(a2 + 48);
  v2 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  v38 = *(_OWORD *)(a2 + 32);
  if (v2 || (OUTLINED_FUNCTION_24_0(), v3 = OUTLINED_FUNCTION_204_0(), (v4 & 1) != 0))
  {
    v5 = OUTLINED_FUNCTION_210_0();
    specialized static Array<A>.== infix(_:_:)(v5, v6, v7, v8, v9, v10, v11, v12, v25, *((uint64_t *)&v25 + 1), v28, *((uint64_t *)&v28 + 1), v31, *((uint64_t *)&v31 + 1), v34, v36, v38, *((uint64_t *)&v38 + 1), v40,
      *((uint64_t *)&v40 + 1));
    if ((v13 & 1) != 0
      && (v14 = OUTLINED_FUNCTION_195_0(), specialized static Array<A>.== infix(_:_:)(v14, v15), (v16 & 1) != 0))
    {
      v3 = OUTLINED_FUNCTION_547(v16, v17, v18, v19, v20, v21, v22, v23, v26, v27, v29, v30, v32, v33, v35, v37, v39);
    }
    else
    {
      v3 = 0;
    }
  }
  return v3 & 1;
}

#error "248B33270: call analysis failed (funcsize=31)"

uint64_t CountTokensRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x74706D6F72705FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t CountTokensRequest.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7461646174656D5FLL;
  else
    return 0x74706D6F72705FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CountTokensRequest.CodingKeys()
{
  char *v0;

  return CountTokensRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CountTokensRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CountTokensRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CountTokensRequest.CodingKeys()
{
  lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CountTokensRequest.CodingKeys()
{
  lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void CountTokensRequest.encode(to:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_454();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CountTokensRequest.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_145();
  v6 = *(_QWORD *)(v3 + 80);
  OUTLINED_FUNCTION_87_0(v0);
  lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    OUTLINED_FUNCTION_535(v6);
    OUTLINED_FUNCTION_25_0();
  }
  OUTLINED_FUNCTION_89_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int CountTokensRequest.hashValue.getter()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 48);
  v4[0] = *(_OWORD *)(v0 + 32);
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 80);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_88_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_40_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_18();
  v2 = outlined retain of RequestMetadataEnvelope((uint64_t)v4);
  OUTLINED_FUNCTION_583(v2);
  outlined release of RequestMetadataEnvelope((uint64_t)v4);
  return OUTLINED_FUNCTION_130_0();
}

void CountTokensRequest.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_6_2();
  v4 = v3;
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CountTokensRequest.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_285_0();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys();
  OUTLINED_FUNCTION_412();
  if (v0)
  {
    OUTLINED_FUNCTION_307();
  }
  else
  {
    lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
    OUTLINED_FUNCTION_538();
    OUTLINED_FUNCTION_650();
    v8 = OUTLINED_FUNCTION_554();
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_538();
    OUTLINED_FUNCTION_650();
    OUTLINED_FUNCTION_58_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    if (v8)
    {
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_37_0();
      OUTLINED_FUNCTION_61();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v4);
    }
    else
    {
      *v6 = v9;
      v6[1] = v10;
      v6[2] = v11;
      v6[3] = v12;
      v6[4] = v9;
      v6[5] = v10;
      v6[6] = v11;
      v6[7] = v12;
      v6[8] = v13;
      v6[9] = v14;
      v6[10] = v15;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_154();
      OUTLINED_FUNCTION_11();
      OUTLINED_FUNCTION_90();
      OUTLINED_FUNCTION_307();
      OUTLINED_FUNCTION_61();
      OUTLINED_FUNCTION_46_0();
      OUTLINED_FUNCTION_199_0();
      OUTLINED_FUNCTION_112();
    }
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_37_0();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_420();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CountTokensRequest()
{
  uint64_t v0;
  __int128 v1;
  _BYTE v3[72];
  _OWORD v4[3];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 48);
  v4[0] = *(_OWORD *)(v0 + 32);
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 80);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  outlined retain of RequestMetadataEnvelope((uint64_t)v4);
  RequestMetadataEnvelope.hash(into:)((uint64_t)v3);
  outlined release of RequestMetadataEnvelope((uint64_t)v4);
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance CountTokensRequest()
{
  CountTokensRequest.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance CountTokensRequest()
{
  CountTokensRequest.encode(to:)();
}

uint64_t CountTokensResponse.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t CountTokensResponse.count.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CountTokensResponse.count.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t CountTokensResponse.renderedPrompt.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 16))
    PromptRenderingEnvelope.unseal()();
  OUTLINED_FUNCTION_19_0();
  v1 = OUTLINED_FUNCTION_551();
  return __swift_storeEnumTagSinglePayload(v1, v2, v3, v4);
}

void PromptRenderingEnvelope.unseal()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_354();
  type metadata accessor for Prompt.Rendering.Source();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_60_1();
  v2 = *v0;
  v3 = v0[1];
  v4 = v0[2];
  v5 = v0[3];
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_77_0();
  MEMORY[0x2495A5D98](v2, v3, v4, v5);
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_154();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_475();
  Prompt.Rendering.init(source:segments:renderedString:originalPrompt:tokenIDs:userInfo:)();
  OUTLINED_FUNCTION_4_1();
}

void CountTokensResponse.init(count:renderedPrompt:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[12];

  OUTLINED_FUNCTION_7_0();
  v3 = v2;
  v27 = v4;
  v6 = v5;
  v7 = OUTLINED_FUNCTION_19_0();
  v25 = *(_QWORD *)(v7 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_199_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_278_0();
  OUTLINED_FUNCTION_651();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_118_0();
  v26 = v3;
  v11 = OUTLINED_FUNCTION_276_0();
  OUTLINED_FUNCTION_272_0(v11, v12);
  v13 = OUTLINED_FUNCTION_425();
  v15 = 0;
  v32 = 0;
  v33 = 0;
  v30 = 0;
  v31 = 0;
  v28 = 0;
  v29 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  if (__swift_getEnumTagSinglePayload(v13, v14, v7) != 1)
  {
    v20 = OUTLINED_FUNCTION_517();
    OUTLINED_FUNCTION_397(v20, v21, v22);
    OUTLINED_FUNCTION_397(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16));
    PromptRenderingEnvelope.init(sealing:)(v1, v34);
    v32 = v34[2];
    v33 = v34[1];
    v30 = v34[4];
    v31 = v34[3];
    v16 = v34[7];
    v28 = v34[6];
    v29 = v34[5];
    v17 = v34[8];
    v18 = v34[9];
    v19 = v34[10];
    v15 = v34[0];
    v23 = OUTLINED_FUNCTION_172_1();
    v24(v23);
  }
  outlined destroy of Locale?(v26, &demangling cache variable for type metadata for Prompt.Rendering?);
  *v6 = v27;
  v6[1] = v15;
  v6[2] = v33;
  v6[3] = v32;
  v6[4] = v31;
  v6[5] = v30;
  v6[6] = v29;
  v6[7] = v28;
  v6[8] = v16;
  v6[9] = v17;
  v6[10] = v18;
  v6[11] = v19;
  OUTLINED_FUNCTION_4_1();
}

uint64_t PromptRenderingEnvelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Prompt.Rendering.Source();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Prompt.Rendering.source.getter();
  v8 = Prompt.string.getter();
  v26 = v9;
  v27 = v8;
  v25 = Prompt.Rendering.Source.version.getter();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12 = Prompt.Rendering.segments.getter();
  v13 = Prompt.Rendering.renderedString.getter();
  v15 = v14;
  v16 = Prompt.Rendering.originalPrompt.getter();
  v18 = v17;
  v19 = Prompt.Rendering.tokenIDs.getter();
  v20 = Prompt.Rendering.userInfo.getter();
  v21 = type metadata accessor for Prompt.Rendering();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(a1, v21);
  v23 = v26;
  *a2 = v27;
  a2[1] = v23;
  a2[2] = v25;
  a2[3] = v11;
  a2[4] = v12;
  a2[5] = v13;
  a2[6] = v15;
  a2[7] = v16;
  a2[8] = v18;
  a2[9] = v19;
  a2[10] = v20;
  return result;
}

void CountTokensResponse.hash(into:)()
{
  Swift::UInt *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[1];
  v2 = v0[2];
  Hasher._combine(_:)(*v0);
  if (v2)
  {
    OUTLINED_FUNCTION_96_0(1u);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_638();
    outlined consume of PromptRenderingEnvelope?(v1, v2);
  }
  else
  {
    OUTLINED_FUNCTION_96_0(0);
  }
}

void static CountTokensResponse.== infix(_:_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[12];

  OUTLINED_FUNCTION_7_0();
  if (*v0 == *v1)
  {
    v2 = v0[1];
    v3 = v0[2];
    v4 = v0[3];
    v5 = v0[4];
    v6 = v0[5];
    v7 = v0[6];
    v8 = v0[7];
    v9 = v0[8];
    v10 = v0[9];
    v11 = v0[10];
    v12 = v0[11];
    v13 = v1[1];
    v14 = v1[2];
    v16 = v1[3];
    v15 = v1[4];
    v18 = v1[5];
    v17 = v1[6];
    v20 = v1[7];
    v19 = v1[8];
    v21 = v1[9];
    v22 = v1[10];
    v23 = v1[11];
    if (v3)
    {
      if (v14)
      {
        v51[0] = v0[1];
        v51[1] = v3;
        v51[2] = v4;
        v51[3] = v5;
        v51[4] = v6;
        v51[5] = v7;
        v51[6] = v8;
        v51[7] = v9;
        v51[8] = v10;
        v51[9] = v11;
        v51[10] = v12;
        v29 = v13;
        v30 = v14;
        v31 = v16;
        v32 = v15;
        v33 = v18;
        v34 = v17;
        v35 = v20;
        v36 = v19;
        v37 = v21;
        v38 = v22;
        v28 = v2;
        v39 = v23;
        outlined copy of PromptRenderingEnvelope?(v2, v3);
        v24 = OUTLINED_FUNCTION_209_1();
        outlined copy of PromptRenderingEnvelope?(v24, v25);
        static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)v51, (uint64_t)&v29);
        v26 = OUTLINED_FUNCTION_209_1();
        outlined consume of PromptRenderingEnvelope?(v26, v27);
        outlined consume of PromptRenderingEnvelope?(v28, v3);
        goto LABEL_7;
      }
    }
    else if (!v14)
    {
      goto LABEL_7;
    }
    v29 = v0[1];
    v30 = v3;
    v31 = v4;
    v32 = v5;
    v33 = v6;
    v34 = v7;
    v35 = v8;
    v36 = v9;
    v37 = v10;
    v38 = v11;
    v39 = v12;
    v40 = v13;
    v41 = v14;
    v42 = v16;
    v43 = v15;
    v44 = v18;
    v45 = v17;
    v46 = v20;
    v47 = v19;
    v48 = v21;
    v49 = v22;
    v50 = v23;
    outlined copy of PromptRenderingEnvelope?(v2, v3);
    outlined copy of PromptRenderingEnvelope?(v13, v14);
    outlined release of (PromptRenderingEnvelope?, PromptRenderingEnvelope?)(&v29);
  }
LABEL_7:
  OUTLINED_FUNCTION_4_1();
}

uint64_t CountTokensResponse.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657265646E65725FLL && a2 == 0xEF74706D6F725064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t CountTokensResponse.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x657265646E65725FLL;
  else
    return 0x746E756F63;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CountTokensResponse.CodingKeys()
{
  char *v0;

  return CountTokensResponse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CountTokensResponse.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CountTokensResponse.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CountTokensResponse.CodingKeys()
{
  lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CountTokensResponse.CodingKeys()
{
  lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void CountTokensResponse.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6_2();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CountTokensResponse.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_161_1();
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
  {
    OUTLINED_FUNCTION_665();
    OUTLINED_FUNCTION_449();
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    OUTLINED_FUNCTION_141_1();
  }
  OUTLINED_FUNCTION_89_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int CountTokensResponse.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  char v14[72];
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  Swift::UInt v22;
  Swift::UInt v23;
  Swift::UInt v24;
  Swift::UInt v25;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v8 = v0[6];
  v7 = v0[7];
  v9 = v0[8];
  v12 = v0[10];
  v13 = v0[9];
  v11 = v0[11];
  OUTLINED_FUNCTION_75_1();
  Hasher._combine(_:)(v1);
  if (v3)
  {
    v15 = v2;
    v16 = v3;
    v17 = v4;
    v18 = v5;
    v19 = v6;
    v20 = v8;
    v21 = v7;
    v22 = v9;
    v23 = v13;
    v24 = v12;
    v25 = v11;
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_77_0();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v14);
    outlined consume of PromptRenderingEnvelope?(v2, v3);
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  return Hasher._finalize()();
}

void CountTokensResponse.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_545();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CountTokensResponse.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_140_1();
  lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys();
  OUTLINED_FUNCTION_129_0();
  if (!v2)
  {
    LOBYTE(v5) = 0;
    v4 = KeyedDecodingContainer.decode(_:forKey:)();
    OUTLINED_FUNCTION_449();
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    OUTLINED_FUNCTION_681();
    OUTLINED_FUNCTION_680();
    OUTLINED_FUNCTION_38_2();
    *(_QWORD *)v1 = v4;
    *(_OWORD *)(v1 + 8) = v5;
    *(_OWORD *)(v1 + 24) = v6;
    *(_OWORD *)(v1 + 40) = v7;
    *(_OWORD *)(v1 + 56) = v8;
    *(_OWORD *)(v1 + 72) = v9;
    *(_QWORD *)(v1 + 88) = v10;
  }
  __swift_destroy_boxed_opaque_existential_0Tm(v0);
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CountTokensResponse()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::UInt v6;
  Swift::UInt v7;
  Swift::UInt v8;
  Swift::UInt v9;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  char v14[72];
  uint64_t v15;
  uint64_t v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  Swift::UInt v22;
  Swift::UInt v23;
  Swift::UInt v24;
  Swift::UInt v25;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v8 = v0[6];
  v7 = v0[7];
  v9 = v0[8];
  v12 = v0[10];
  v13 = v0[9];
  v11 = v0[11];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v3)
  {
    v15 = v2;
    v16 = v3;
    v17 = v4;
    v18 = v5;
    v19 = v6;
    v20 = v8;
    v21 = v7;
    v22 = v9;
    v23 = v13;
    v24 = v12;
    v25 = v11;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v14);
    outlined consume of PromptRenderingEnvelope?(v2, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance CountTokensResponse()
{
  CountTokensResponse.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance CountTokensResponse()
{
  CountTokensResponse.encode(to:)();
}

uint64_t CompletePromptTemplateRequest.prompt.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(v0 + 8))
    PromptEnvelope.unseal()();
  OUTLINED_FUNCTION_283_0();
  v1 = OUTLINED_FUNCTION_551();
  return OUTLINED_FUNCTION_101_0(v1, v2, v3, v4);
}

void key path setter for CompletePromptTemplateRequest.prompt : CompletePromptTemplateRequest(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  MEMORY[0x24BDAC7A8](v2);
  outlined init with copy of Prompt.Rendering?(a1, (uint64_t)&v4 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for Prompt?);
  CompletePromptTemplateRequest.prompt.setter();
}

void CompletePromptTemplateRequest.prompt.setter()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  OUTLINED_FUNCTION_7_0();
  v8 = v7;
  OUTLINED_FUNCTION_283_0();
  OUTLINED_FUNCTION_167_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_131_1();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_537();
  v11 = &demangling cache variable for type metadata for Prompt?;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_285_0();
  v17 = v8;
  outlined init with copy of Prompt.Rendering?(v8, v6, &demangling cache variable for type metadata for Prompt?);
  OUTLINED_FUNCTION_5_0(v6);
  OUTLINED_FUNCTION_597();
  if (v13 != 1)
  {
    OUTLINED_FUNCTION_240_0(v2, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
    OUTLINED_FUNCTION_240_0(v3, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
    v11 = (uint64_t *)PromptEnvelope.init(sealing:)();
    v8 = v14;
    v4 = v15;
    v5 = v16;
    OUTLINED_FUNCTION_184_1(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  }
  outlined destroy of Locale?(v17, &demangling cache variable for type metadata for Prompt?);
  OUTLINED_FUNCTION_631();
  *v1 = v11;
  v1[1] = (uint64_t *)v8;
  v1[2] = v4;
  v1[3] = v5;
  OUTLINED_FUNCTION_4_1();
}

void CompletePromptTemplateRequest.prompt.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = OUTLINED_FUNCTION_283_0();
  v3[1] = v4;
  v3[2] = *(_QWORD *)(v4 - 8);
  v3[3] = OUTLINED_FUNCTION_408();
  v3[4] = OUTLINED_FUNCTION_408();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt?);
  v3[5] = OUTLINED_FUNCTION_408();
  v3[6] = OUTLINED_FUNCTION_408();
  v5 = OUTLINED_FUNCTION_408();
  v3[7] = v5;
  if (*(_QWORD *)(v1 + 8))
  {
    PromptEnvelope.unseal()();
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }
  OUTLINED_FUNCTION_311((uint64_t)v5, v6);
  OUTLINED_FUNCTION_97();
}

void CompletePromptTemplateRequest.prompt.modify()
{
  uint64_t ***v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  OUTLINED_FUNCTION_132_0();
  v1 = *v0;
  v2 = (uint64_t)(*v0)[6];
  v3 = (uint64_t)(*v0)[7];
  if ((v4 & 1) != 0)
  {
    v6 = v1[4];
    v5 = v1[5];
    v7 = v1[3];
    v8 = OUTLINED_FUNCTION_484();
    OUTLINED_FUNCTION_272_0(v8, v9);
    CompletePromptTemplateRequest.prompt.setter();
    outlined destroy of Locale?(v3, &demangling cache variable for type metadata for Prompt?);
  }
  else
  {
    v10 = (uint64_t)v1[1];
    v11 = OUTLINED_FUNCTION_186_0();
    outlined init with copy of Prompt.Rendering?(v11, v12, v13);
    OUTLINED_FUNCTION_52_2(v2, 1, v10);
    if (v14)
    {
      v25 = 0;
      v19 = 0;
      v21 = 0;
      v23 = 0;
    }
    else
    {
      v15 = (uint64_t)v1[3];
      v16 = (uint64_t)v1[4];
      v17 = v1[2];
      OUTLINED_FUNCTION_397(v16, (uint64_t)v1[6], (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17[4]);
      OUTLINED_FUNCTION_397(v15, v16, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17[2]);
      v25 = PromptEnvelope.init(sealing:)();
      v19 = v18;
      v21 = v20;
      v23 = v22;
      OUTLINED_FUNCTION_34_1(v16, (uint64_t (*)(uint64_t, uint64_t))v17[1]);
    }
    v6 = v1[4];
    v5 = v1[5];
    v7 = v1[3];
    v24 = *v1;
    outlined destroy of Locale?((uint64_t)v1[7], &demangling cache variable for type metadata for Prompt?);
    OUTLINED_FUNCTION_631();
    *v24 = v25;
    v24[1] = v19;
    v24[2] = v21;
    v24[3] = v23;
  }
  OUTLINED_FUNCTION_614();
  OUTLINED_FUNCTION_620();
  free(v5);
  free(v6);
  free(v7);
  OUTLINED_FUNCTION_205_1(v1);
}

void CompletePromptTemplateRequest.promptTemplateInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_97_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_21_0();
  v4 = v0 + *(int *)(type metadata accessor for CompletePromptTemplateRequest(v3) + 20);
  OUTLINED_FUNCTION_377();
  outlined init with copy of Prompt.Rendering?(v4 + v5, v1, &demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_189();
  PromptTemplateInfo.init(templateID:variableBindings:locale:)();
  OUTLINED_FUNCTION_138();
}

void CompletePromptTemplateRequest.promptTemplateInfo.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  OUTLINED_FUNCTION_7_0();
  v5 = v4;
  OUTLINED_FUNCTION_611();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_89_0();
  v7 = type metadata accessor for PromptTemplateInfo();
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v8);
  v9 = OUTLINED_FUNCTION_77_1();
  v10 = type metadata accessor for PromptTemplateInfoEnvelope(v9);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_118_1();
  v12 = OUTLINED_FUNCTION_261();
  OUTLINED_FUNCTION_694(v12, v13, v14);
  *v2 = PromptTemplateInfo.templateID.getter();
  v2[1] = v15;
  v2[2] = PromptTemplateInfo.variableBindings.getter();
  PromptTemplateInfo.locale.getter();
  v16 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v16(v0, v7);
  outlined init with take of Locale?(v1, (uint64_t)v2 + *(int *)(v10 + 24), &demangling cache variable for type metadata for Locale?);
  v16(v5, v7);
  v17 = type metadata accessor for CompletePromptTemplateRequest(0);
  outlined assign with take of PromptTemplateInfoEnvelope((uint64_t)v2, v0 + *(int *)(v17 + 20), type metadata accessor for PromptTemplateInfoEnvelope);
  OUTLINED_FUNCTION_4_1();
}

uint64_t (*CompletePromptTemplateRequest.promptTemplateInfo.modify())(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  OUTLINED_FUNCTION_97_0();
  v2 = v1;
  v3 = malloc(0x50uLL);
  *v2 = v3;
  *v3 = v0;
  v4 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  v3[1] = v4;
  v3[2] = OUTLINED_FUNCTION_687(v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[3] = OUTLINED_FUNCTION_687(v5);
  v6 = type metadata accessor for PromptTemplateInfo();
  v3[4] = v6;
  v3[5] = *(_QWORD *)(v6 - 8);
  v3[6] = OUTLINED_FUNCTION_656();
  v3[7] = OUTLINED_FUNCTION_656();
  v3[8] = OUTLINED_FUNCTION_656();
  *((_DWORD *)v3 + 18) = *(_DWORD *)(type metadata accessor for CompletePromptTemplateRequest(0) + 20);
  OUTLINED_FUNCTION_402();
  outlined init with copy of Prompt.Rendering?(v7, v8, v9);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_90_0();
  PromptTemplateInfo.init(templateID:variableBindings:locale:)();
  return CompletePromptTemplateRequest.promptTemplateInfo.modify;
}

#error "248B34DDC: call analysis failed (funcsize=73)"

void CompletePromptTemplateRequest.parameters.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[12];
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;

  v3 = OUTLINED_FUNCTION_434();
  OUTLINED_FUNCTION_166_1(v29, (const void *)(v1 + *(int *)(v3 + 24)));
  OUTLINED_FUNCTION_293_0();
  v4 = v29[10];
  v5 = v29[11];
  v6 = v30;
  v7 = v31;
  v8 = v32;
  v9 = v33;
  v10 = v34;
  v11 = v35;
  LOBYTE(v28) = v12;
  LOBYTE(v27) = v13;
  LOBYTE(v26) = v14;
  LOBYTE(v25) = v15;
  LOBYTE(v24) = v30;
  LOBYTE(v23) = v32;
  *(_QWORD *)a1 = v16;
  *(_BYTE *)(a1 + 8) = v17;
  *(_QWORD *)(a1 + 16) = v18;
  *(_BYTE *)(a1 + 24) = v12;
  *(_QWORD *)(a1 + 32) = v19;
  *(_BYTE *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v20;
  *(_BYTE *)(a1 + 56) = v14;
  *(_QWORD *)(a1 + 64) = v21;
  *(_BYTE *)(a1 + 72) = v15;
  OUTLINED_FUNCTION_165_1(v4, v5, v6, v7, v8, v9, v10, v11, v22, v23, v24, v25, v26, v27, v28);
  OUTLINED_FUNCTION_569();
}

void CompletePromptTemplateRequest.constraints.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_434();
  outlined init with copy of Prompt.Rendering?(v1 + *(int *)(v3 + 28), a1, &demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_104();
}

uint64_t CompletePromptTemplateRequest.tools.getter()
{
  OUTLINED_FUNCTION_434();
  return swift_bridgeObjectRetain();
}

uint64_t CompletePromptTemplateRequest.documents.getter()
{
  return CompletePromptTemplateRequest.documents.getter((void (*)(_QWORD))type metadata accessor for CompletePromptTemplateRequest);
}

uint64_t CompletePromptTemplateRequest.metadata.getter()
{
  return CompletePromptTemplateRequest.metadata.getter();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = OUTLINED_FUNCTION_354();
  v4 = (_QWORD *)(v1 + *(int *)(v3(v2) + 40));
  v5 = v4[1];
  v6 = v4[2];
  v7 = v4[3];
  v9 = v4[4];
  v8 = v4[5];
  v10 = v4[6];
  *v0 = *v4;
  v0[1] = v5;
  v0[2] = v6;
  v0[3] = v7;
  v0[4] = v9;
  v0[5] = v8;
  v0[6] = v10;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_90();
  return OUTLINED_FUNCTION_179_1();
}

void CompletePromptTemplateRequest.init(prompt:promptTemplateInfo:parameters:constraint:documents:metadata:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int EnumTagSinglePayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;

  OUTLINED_FUNCTION_7_0();
  v5 = v4;
  v105 = v6;
  v102 = v7;
  v103 = v8;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  type metadata accessor for TokenGenerationOverrides();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_443(v16, v72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v17);
  v99 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_160_1();
  v101 = type metadata accessor for PromptTemplateInfo();
  v90 = *(_QWORD *)(v101 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_77_1();
  v20 = type metadata accessor for Prompt();
  OUTLINED_FUNCTION_270_0();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_537();
  OUTLINED_FUNCTION_651();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_118_0();
  v76 = *v10;
  v88 = *((unsigned __int8 *)v10 + 8);
  v86 = v10[2];
  v85 = *((unsigned __int8 *)v10 + 24);
  OUTLINED_FUNCTION_580(v10[4]);
  v83 = *((unsigned __int8 *)v10 + 40);
  OUTLINED_FUNCTION_473(v10[6]);
  v81 = *((unsigned __int8 *)v10 + 56);
  v80 = v10[8];
  v79 = *((unsigned __int8 *)v10 + 72);
  v78 = v10[10];
  v77 = v10[11];
  v75 = *((unsigned __int8 *)v10 + 96);
  v87 = v10[13];
  v74 = *((unsigned __int8 *)v10 + 112);
  OUTLINED_FUNCTION_467(v10[15]);
  v73 = *((unsigned __int8 *)v10 + 128);
  v91 = *((unsigned __int8 *)v10 + 130);
  v24 = *v5;
  v97 = v5[1];
  v98 = v24;
  v25 = v5[2];
  v95 = v5[3];
  v96 = v25;
  v26 = v5[4];
  v93 = v5[5];
  v94 = v26;
  v92 = v5[6];
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  v104 = v12;
  OUTLINED_FUNCTION_272_0(v12, v3);
  v27 = OUTLINED_FUNCTION_425();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v27, v28, v20);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (EnumTagSinglePayload != 1)
  {
    OUTLINED_FUNCTION_275(v1, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
    v36 = OUTLINED_FUNCTION_172_1();
    OUTLINED_FUNCTION_275(v36, v37, v38);
    v32 = PromptEnvelope.init(sealing:)();
    v33 = v39;
    v34 = v40;
    v35 = v41;
    OUTLINED_FUNCTION_89_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v31 = *(_QWORD *)v14;
    v30 = *(_QWORD *)(v14 + 8);
  }
  outlined consume of PromptEnvelope?(v31, v30);
  *(_QWORD *)v14 = v32;
  *(_QWORD *)(v14 + 8) = v33;
  *(_QWORD *)(v14 + 16) = v34;
  *(_QWORD *)(v14 + 24) = v35;
  v42 = v90;
  OUTLINED_FUNCTION_230_0(v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v90 + 16));
  v43 = (int *)OUTLINED_FUNCTION_434();
  v44 = (uint64_t *)(v14 + v43[5]);
  *v44 = PromptTemplateInfo.templateID.getter();
  v44[1] = v45;
  v44[2] = PromptTemplateInfo.variableBindings.getter();
  v46 = (uint64_t)v99;
  PromptTemplateInfo.locale.getter();
  v47 = *(void (**)(uint64_t))(v42 + 8);
  v48 = OUTLINED_FUNCTION_276_0();
  v47(v48);
  OUTLINED_FUNCTION_377();
  outlined init with take of Locale?(v46, (uint64_t)v44 + v49, &demangling cache variable for type metadata for Locale?);
  v50 = v88;
  if (v88)
  {
    v51 = v76;
    if (v88 != 1)
      v51 = 0;
  }
  else
  {
    v51 = v76;
  }
  v52 = v85;
  v113 = v85;
  v53 = v83;
  v112 = v83;
  v54 = v81;
  v111 = v81;
  v55 = v79;
  v110 = v79;
  v109 = v75;
  v108 = v74;
  v107 = v73;
  v56 = v14 + v43[6];
  *(_QWORD *)v56 = v51;
  *(_BYTE *)(v56 + 8) = v50;
  *(_QWORD *)(v56 + 16) = v86;
  *(_BYTE *)(v56 + 24) = v52;
  *(_QWORD *)(v56 + 32) = v84;
  *(_BYTE *)(v56 + 40) = v53;
  *(_QWORD *)(v56 + 48) = v82;
  *(_BYTE *)(v56 + 56) = v54;
  *(_QWORD *)(v56 + 64) = v80;
  *(_BYTE *)(v56 + 72) = v55;
  v57 = v77;
  *(_QWORD *)(v56 + 80) = v78;
  *(_QWORD *)(v56 + 88) = v57;
  *(_BYTE *)(v56 + 96) = v109;
  *(_QWORD *)(v56 + 104) = v87;
  *(_BYTE *)(v56 + 112) = v108;
  *(_QWORD *)(v56 + 120) = v89;
  *(_BYTE *)(v56 + 128) = v107;
  *(_BYTE *)(v56 + 129) = v91;
  *(_QWORD *)(v14 + v43[8]) = MEMORY[0x24BEE4AF8];
  v58 = (_QWORD *)(v14 + v43[10]);
  v59 = v97;
  *v58 = v98;
  v58[1] = v59;
  v60 = v95;
  v58[2] = v96;
  v58[3] = v60;
  v61 = v93;
  v58[4] = v94;
  v58[5] = v61;
  v58[6] = v92;
  OUTLINED_FUNCTION_322();
  v62 = v100;
  OUTLINED_FUNCTION_677();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  Overridable.wrappedValue.getter();
  v63 = v106;
  outlined destroy of Prompt.Turn.Segment(v62, (uint64_t (*)(_QWORD))type metadata accessor for TokenGenerationOverrides);
  if ((v63 & 1) != 0)
  {
    if (one-time initialization token for schema != -1)
      swift_once();
    v64 = OUTLINED_FUNCTION_200();
    v65 = OUTLINED_FUNCTION_189_1(v64, (uint64_t)static Log.schema);
    v66 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)OUTLINED_FUNCTION_235_0();
      *(_WORD *)v67 = 0;
      OUTLINED_FUNCTION_404(&dword_248B08000, v65, v66, "Disabled GuidedGeneration constraints because of user default", v67);
      OUTLINED_FUNCTION_0_0();
    }

    outlined destroy of Locale?(v103, &demangling cache variable for type metadata for Constraints?);
    OUTLINED_FUNCTION_655();
    outlined destroy of Locale?(v104, &demangling cache variable for type metadata for Prompt?);
    v68 = v14 + v43[7];
    v69 = type metadata accessor for Constraints(0);
    OUTLINED_FUNCTION_171_0(v68, v70, v71, v69);
  }
  else
  {
    OUTLINED_FUNCTION_655();
    outlined destroy of Locale?(v104, &demangling cache variable for type metadata for Prompt?);
    outlined init with take of Locale?(v103, v14 + v43[7], &demangling cache variable for type metadata for Constraints?);
  }
  *(_QWORD *)(v14 + v43[9]) = v105;
  OUTLINED_FUNCTION_4_1();
}

void CompletePromptTemplateRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD);
  uint64_t v17;
  _BYTE v18[144];

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  v5 = OUTLINED_FUNCTION_435();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_145();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_68_0();
  if (*(_QWORD *)(v0 + 8))
  {
    OUTLINED_FUNCTION_96_0(1u);
    v8 = OUTLINED_FUNCTION_646();
    outlined copy of PromptEnvelope?(v8, v9);
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_72();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_506();
    String.hash(into:)();
    OUTLINED_FUNCTION_72();
    OUTLINED_FUNCTION_642();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_154();
    specialized Array<A>.hash(into:)();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_18();
    v10 = OUTLINED_FUNCTION_646();
    outlined consume of PromptEnvelope?(v10, v11);
  }
  else
  {
    OUTLINED_FUNCTION_96_0(0);
  }
  v12 = (int *)OUTLINED_FUNCTION_434();
  PromptTemplateInfoEnvelope.hash(into:)(v4);
  OUTLINED_FUNCTION_166_1(v18, (const void *)(v0 + v12[6]));
  outlined retain of SamplingParametersEnvelope((uint64_t)v18);
  OUTLINED_FUNCTION_658();
  outlined release of SamplingParametersEnvelope((uint64_t)v18);
  outlined init with copy of Prompt.Rendering?(v0 + v12[7], v2, &demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_52_2(v2, 1, v5);
  if (v13)
  {
    OUTLINED_FUNCTION_96_0(0);
  }
  else
  {
    OUTLINED_FUNCTION_402();
    outlined init with take of DocumentRegistrationEnvelope(v14, v15, v16);
    OUTLINED_FUNCTION_96_0(1u);
    Constraints.hash(into:)(v4);
    OUTLINED_FUNCTION_306_0(v1);
  }
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_633();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_177_1(v12[10]);
  OUTLINED_FUNCTION_362();
  outlined release of RequestMetadataEnvelope((uint64_t)&v17);
  OUTLINED_FUNCTION_4_1();
}

void static CompletePromptTemplateRequest.== infix(_:_:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  char v51;
  char v52;
  char *v53;
  __int128 v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  _OWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  OUTLINED_FUNCTION_7_0();
  v1 = v0;
  v3 = v2;
  v69 = OUTLINED_FUNCTION_435();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_439(v5, v57);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Constraints?, Constraints?));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_178();
  v70 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_284_0();
  v10 = MEMORY[0x24BDAC7A8](v9);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_238();
  v14 = *v3;
  v15 = v3[1];
  v16 = v3[2];
  v17 = *v1;
  v18 = v1[1];
  v71 = v1;
  v19 = v1[2];
  if (!v15)
  {
    if (!v18)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (!v18)
  {
LABEL_12:
    OUTLINED_FUNCTION_102_1();
    OUTLINED_FUNCTION_254_0();
    OUTLINED_FUNCTION_426();
    v32 = v17;
    v33 = v18;
LABEL_22:
    outlined consume of PromptEnvelope?(v32, v33);
    goto LABEL_23;
  }
  v61 = v13;
  v64 = v11;
  v58 = v12;
  v20 = v14 == v17 && v15 == v18;
  if (!v20)
  {
    OUTLINED_FUNCTION_517();
    if ((OUTLINED_FUNCTION_24_0() & 1) == 0)
    {
      OUTLINED_FUNCTION_102_1();
      OUTLINED_FUNCTION_102_1();
      OUTLINED_FUNCTION_254_0();
      goto LABEL_21;
    }
  }
  OUTLINED_FUNCTION_102_1();
  OUTLINED_FUNCTION_102_1();
  OUTLINED_FUNCTION_254_0();
  specialized static Array<A>.== infix(_:_:)(v16, v19, v21, v22, v23, v24, v25, v26, v58, v61, v64, v67, v68, v69, v70, (uint64_t)v1, v72, *((uint64_t *)&v72 + 1), v73,
    *((uint64_t *)&v73 + 1));
  if ((v27 & 1) == 0)
  {
LABEL_21:
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_199_0();
    v32 = v14;
    v33 = v15;
    goto LABEL_22;
  }
  v28 = OUTLINED_FUNCTION_616();
  specialized static Array<A>.== infix(_:_:)(v28, v29);
  v31 = v30;
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_199_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_426();
  v12 = v59;
  v13 = v62;
  v11 = v65;
  if ((v31 & 1) == 0)
    goto LABEL_23;
LABEL_13:
  v63 = v13;
  v66 = v11;
  v34 = v12;
  v35 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
  if (!static PromptTemplateInfoEnvelope.== infix(_:_:)((uint64_t *)((char *)v3 + v35[5]), (uint64_t *)((char *)v71 + v35[5])))goto LABEL_23;
  OUTLINED_FUNCTION_166_1(&v78, (char *)v3 + v35[6]);
  OUTLINED_FUNCTION_166_1(&v79, (char *)v71 + v35[6]);
  static SamplingParametersEnvelope.== infix(_:_:)();
  if ((v36 & 1) == 0)
    goto LABEL_23;
  OUTLINED_FUNCTION_268_0((uint64_t)v3 + v35[7], v66);
  v60 = v35;
  OUTLINED_FUNCTION_268_0((uint64_t)v71 + v35[7], v63);
  v37 = v70 + *(int *)(v68 + 48);
  OUTLINED_FUNCTION_268_0(v66, v70);
  v38 = OUTLINED_FUNCTION_523();
  OUTLINED_FUNCTION_268_0(v38, v39);
  v40 = OUTLINED_FUNCTION_425();
  OUTLINED_FUNCTION_52_2(v40, v41, v69);
  if (!v20)
  {
    v43 = OUTLINED_FUNCTION_659();
    outlined init with copy of Prompt.Rendering?(v43, v44, v45);
    OUTLINED_FUNCTION_52_2(v37, 1, v69);
    if (!v46)
    {
      OUTLINED_FUNCTION_300_0(v37, v67);
      static Constraints.== infix(_:_:)();
      v48 = v47;
      v49 = OUTLINED_FUNCTION_172_1();
      outlined destroy of Prompt.Turn.Segment(v49, v50);
      OUTLINED_FUNCTION_609(v63);
      OUTLINED_FUNCTION_609(v66);
      outlined destroy of Prompt.Turn.Segment(v34, type metadata accessor for Constraints);
      OUTLINED_FUNCTION_609(v70);
      if ((v48 & 1) == 0)
        goto LABEL_23;
      goto LABEL_29;
    }
    OUTLINED_FUNCTION_533(v63);
    OUTLINED_FUNCTION_533(v66);
    outlined destroy of Prompt.Turn.Segment(v34, type metadata accessor for Constraints);
LABEL_27:
    OUTLINED_FUNCTION_516(v42, &demangling cache variable for type metadata for (Constraints?, Constraints?));
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_476(v63);
  OUTLINED_FUNCTION_476(v66);
  v42 = OUTLINED_FUNCTION_52_2(v37, 1, v69);
  if (!v20)
    goto LABEL_27;
  OUTLINED_FUNCTION_516(v42, &demangling cache variable for type metadata for Constraints?);
LABEL_29:
  specialized static Array<A>.== infix(_:_:)();
  if ((v51 & 1) != 0)
  {
    specialized static Array<A>.== infix(_:_:)();
    if ((v52 & 1) != 0)
    {
      v53 = (char *)v3 + v60[10];
      v54 = *((_OWORD *)v53 + 2);
      v73 = *((_OWORD *)v53 + 1);
      v74 = v54;
      v75 = *((_QWORD *)v53 + 6);
      v72 = *(_OWORD *)v53;
      v55 = (char *)v71 + v60[10];
      v77 = *((_QWORD *)v55 + 6);
      v56 = *((_OWORD *)v55 + 2);
      v76[1] = *((_OWORD *)v55 + 1);
      v76[2] = v56;
      v76[0] = *(_OWORD *)v55;
      static RequestMetadataEnvelope.== infix(_:_:)(&v72, v76);
    }
  }
LABEL_23:
  OUTLINED_FUNCTION_4_1();
}

BOOL static PromptTemplateInfoEnvelope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  BOOL v20;
  char v21;
  _BOOL8 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;

  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v28 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v28 - v18;
  v20 = *a1 == *a2 && a1[1] == a2[1];
  if (v20 || (v21 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v21 & 1) != 0))
  {
    if ((specialized static Dictionary<>.== infix(_:_:)(a1[2], a2[2]) & 1) != 0)
    {
      v29 = v5;
      v23 = type metadata accessor for PromptTemplateInfoEnvelope(0);
      outlined init with copy of Prompt.Rendering?((uint64_t)a1 + *(int *)(v23 + 24), (uint64_t)v19, &demangling cache variable for type metadata for Locale?);
      outlined init with copy of Prompt.Rendering?((uint64_t)a2 + *(int *)(v23 + 24), (uint64_t)v17, &demangling cache variable for type metadata for Locale?);
      v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
      outlined init with copy of Prompt.Rendering?((uint64_t)v19, (uint64_t)v10, &demangling cache variable for type metadata for Locale?);
      outlined init with copy of Prompt.Rendering?((uint64_t)v17, v24, &demangling cache variable for type metadata for Locale?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v4) == 1)
      {
        outlined destroy of Locale?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
        outlined destroy of Locale?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
        if (__swift_getEnumTagSinglePayload(v24, 1, v4) == 1)
        {
          outlined destroy of Locale?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
          return 1;
        }
      }
      else
      {
        outlined init with copy of Prompt.Rendering?((uint64_t)v10, (uint64_t)v14, &demangling cache variable for type metadata for Locale?);
        if (__swift_getEnumTagSinglePayload(v24, 1, v4) != 1)
        {
          v25 = v29;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v7, v24, v4);
          lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
          v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          v27 = *(void (**)(char *, uint64_t))(v25 + 8);
          v27(v7, v4);
          outlined destroy of Locale?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
          outlined destroy of Locale?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
          v27(v14, v4);
          outlined destroy of Locale?((uint64_t)v10, &demangling cache variable for type metadata for Locale?);
          return (v26 & 1) != 0;
        }
        outlined destroy of Locale?((uint64_t)v17, &demangling cache variable for type metadata for Locale?);
        outlined destroy of Locale?((uint64_t)v19, &demangling cache variable for type metadata for Locale?);
        (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v4);
      }
      outlined destroy of Locale?((uint64_t)v10, &demangling cache variable for type metadata for (Locale?, Locale?));
    }
    return 0;
  }
  return result;
}

void static SamplingParametersEnvelope.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  double v6;
  double v7;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  OUTLINED_FUNCTION_54_1();
  v4 = *(unsigned __int8 *)(v2 + 8);
  v5 = *(unsigned __int8 *)(v3 + 8);
  if (v4 == 255)
  {
    if (v5 != 255)
      goto LABEL_44;
  }
  else
  {
    if (v5 == 255)
      goto LABEL_44;
    v6 = *(double *)v1;
    v7 = *(double *)v0;
    if (*(_BYTE *)(v2 + 8))
    {
      if (v4 == 1)
      {
        if (v5 != 1 || *(_QWORD *)&v6 != *(_QWORD *)&v7)
          goto LABEL_44;
      }
      else if (v5 != 2 || v7 != 0.0)
      {
        goto LABEL_44;
      }
    }
    else if (*(_BYTE *)(v3 + 8) || v6 != v7)
    {
      goto LABEL_44;
    }
  }
  if ((*(_BYTE *)(v1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(v0 + 24))
      goto LABEL_44;
  }
  else
  {
    OUTLINED_FUNCTION_624();
    if ((v9 & 1) != 0)
      goto LABEL_44;
  }
  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(v0 + 40))
      goto LABEL_44;
  }
  else
  {
    OUTLINED_FUNCTION_624();
    if ((v10 & 1) != 0)
      goto LABEL_44;
  }
  if ((*(_BYTE *)(v1 + 56) & 1) != 0)
  {
    if (!*(_BYTE *)(v0 + 56))
      goto LABEL_44;
  }
  else
  {
    OUTLINED_FUNCTION_624();
    if ((v11 & 1) != 0)
      goto LABEL_44;
  }
  v12 = *(_BYTE *)(v0 + 72);
  if ((*(_BYTE *)(v1 + 72) & 1) != 0)
  {
    if (!*(_BYTE *)(v0 + 72))
      goto LABEL_44;
  }
  else
  {
    if (*(_QWORD *)(v1 + 64) != *(_QWORD *)(v0 + 64))
      v12 = 1;
    if ((v12 & 1) != 0)
      goto LABEL_44;
  }
  if ((specialized static Set.== infix(_:_:)(*(_QWORD *)(v1 + 80), *(_QWORD *)(v0 + 80)) & 1) == 0)
    goto LABEL_44;
  v13 = *(_BYTE *)(v0 + 96);
  if ((*(_BYTE *)(v1 + 96) & 1) != 0)
  {
    if (!*(_BYTE *)(v0 + 96))
      goto LABEL_44;
    goto LABEL_42;
  }
  if (*(_QWORD *)(v1 + 88) != *(_QWORD *)(v0 + 88))
    v13 = 1;
  if ((v13 & 1) == 0)
  {
LABEL_42:
    if ((*(_BYTE *)(v1 + 112) & 1) == 0)
      OUTLINED_FUNCTION_624();
  }
LABEL_44:
  OUTLINED_FUNCTION_104();
}

uint64_t CompletePromptTemplateRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v11;

  v2 = a1 == 0x74706D6F72705FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000248BCB060
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = a1 == 0x74656D617261705FLL && a2 == 0xEB00000000737265;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = a1 == 0x69617274736E6F63 && a2 == 0xEB0000000073746ELL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = a1 == 0x736C6F6F74 && a2 == 0xE500000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = a1 == 0x746E656D75636F64 && a2 == 0xE900000000000073;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v11 & 1) != 0)
              return 6;
            else
              return 7;
          }
        }
      }
    }
  }
}

uint64_t CompletePromptTemplateRequest.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248B3630C + 4 * byte_248BC0360[a1]))(0x74706D6F72705FLL, 0xE700000000000000);
}

unint64_t sub_248B3630C()
{
  return 0xD000000000000013;
}

uint64_t sub_248B36328()
{
  return 0x74656D617261705FLL;
}

uint64_t sub_248B36348()
{
  return 0x69617274736E6F63;
}

uint64_t sub_248B3636C()
{
  return 0x736C6F6F74;
}

uint64_t sub_248B36380()
{
  return 0x746E656D75636F64;
}

uint64_t sub_248B363A4()
{
  return 0x7461646174656D5FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompletePromptTemplateRequest.CodingKeys()
{
  unsigned __int8 *v0;

  return CompletePromptTemplateRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptTemplateRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CompletePromptTemplateRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptTemplateRequest.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptTemplateRequest.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void CompletePromptTemplateRequest.encode(to:)()
{
  _QWORD *v0;
  uint64_t v1;
  __n128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __n128 v7;
  int *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __n128 v15;
  __n128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  OUTLINED_FUNCTION_454();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptTemplateRequest.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_87_0(v0);
  lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  v7 = v2[1];
  v15 = *v2;
  v16 = v7;
  v19 = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  OUTLINED_FUNCTION_141_1();
  if (!v1)
  {
    v8 = (int *)OUTLINED_FUNCTION_434();
    OUTLINED_FUNCTION_449();
    type metadata accessor for PromptTemplateInfoEnvelope(0);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope);
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_166_1(&v15, (char *)v2 + v8[6]);
    v14 = 2;
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    OUTLINED_FUNCTION_25_0();
    v15.n128_u8[0] = 3;
    type metadata accessor for Constraints(0);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Constraints and conformance Constraints);
    OUTLINED_FUNCTION_144_1();
    v15.n128_u64[0] = *(unint64_t *)((char *)v2->n128_u64 + v8[8]);
    v14 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Tool]);
    lazy protocol witness table accessor for type [Tool] and conformance <A> [A]();
    OUTLINED_FUNCTION_25_0();
    v15.n128_u64[0] = *(unint64_t *)((char *)v2->n128_u64 + v8[9]);
    v14 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]();
    OUTLINED_FUNCTION_25_0();
    v15 = OUTLINED_FUNCTION_526();
    v16.n128_u64[0] = v9;
    v16.n128_u64[1] = v10;
    v17 = *(_OWORD *)(v11 + 32);
    v18 = v12;
    v14 = 6;
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    OUTLINED_FUNCTION_25_0();
  }
  OUTLINED_FUNCTION_89_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_157_1();
}

void CompletePromptTemplateRequest.hashValue.getter()
{
  StreamingRequest.hashValue.getter();
}

void StreamingRequest.hashValue.getter()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_584(v0);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void CompletePromptTemplateRequest.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _BYTE v35[144];

  OUTLINED_FUNCTION_6_2();
  v6 = v5;
  OUTLINED_FUNCTION_580(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  v9 = OUTLINED_FUNCTION_218_1();
  type metadata accessor for PromptTemplateInfoEnvelope(v9);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_68_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptTemplateRequest.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v11);
  v12 = OUTLINED_FUNCTION_21_0();
  v30 = (int *)type metadata accessor for CompletePromptTemplateRequest(v12);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_178();
  *v14 = 0u;
  v14[1] = 0u;
  OUTLINED_FUNCTION_467((uint64_t)v14);
  v15 = *(_QWORD *)(v6 + 32);
  v29 = v6;
  v16 = (_QWORD *)OUTLINED_FUNCTION_530();
  v18 = __swift_project_boxed_opaque_existential_1(v16, v17);
  lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_596();
    __swift_destroy_boxed_opaque_existential_0Tm(v29);
    outlined consume of PromptEnvelope?(*v31, v31[1]);
    if ((_DWORD)v3)
    {
      OUTLINED_FUNCTION_166_1(v35, (char *)v31 + v30[6]);
      outlined release of SamplingParametersEnvelope((uint64_t)v35);
      if (!(_DWORD)v1)
      {
LABEL_5:
        if (!(_DWORD)v15)
          goto LABEL_6;
        goto LABEL_10;
      }
    }
    else if (!(_DWORD)v1)
    {
      goto LABEL_5;
    }
    outlined destroy of Locale?((uint64_t)v31 + v30[7], &demangling cache variable for type metadata for Constraints?);
    if (!(_DWORD)v15)
    {
LABEL_6:
      if (!v18)
        goto LABEL_12;
      goto LABEL_11;
    }
LABEL_10:
    OUTLINED_FUNCTION_474();
    if (!v18)
      goto LABEL_12;
LABEL_11:
    OUTLINED_FUNCTION_474();
    goto LABEL_12;
  }
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  OUTLINED_FUNCTION_668();
  OUTLINED_FUNCTION_592();
  *v19 = v20;
  v19[1] = v21;
  v35[0] = 1;
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope);
  OUTLINED_FUNCTION_212_1();
  outlined init with take of DocumentRegistrationEnvelope(v2, (uint64_t)v31 + v30[5], type metadata accessor for PromptTemplateInfoEnvelope);
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  OUTLINED_FUNCTION_538();
  OUTLINED_FUNCTION_212_1();
  OUTLINED_FUNCTION_166_1((char *)v31 + v30[6], v35);
  type metadata accessor for Constraints(0);
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Constraints and conformance Constraints);
  OUTLINED_FUNCTION_668();
  outlined init with take of Locale?(v4, (uint64_t)v31 + v30[7], &demangling cache variable for type metadata for Constraints?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Tool]);
  lazy protocol witness table accessor for type [Tool] and conformance <A> [A]();
  OUTLINED_FUNCTION_212_1();
  OUTLINED_FUNCTION_531();
  *(uint64_t *)((char *)v31 + v30[8]) = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
  OUTLINED_FUNCTION_604();
  OUTLINED_FUNCTION_212_1();
  OUTLINED_FUNCTION_531();
  OUTLINED_FUNCTION_471(v23);
  OUTLINED_FUNCTION_212_1();
  OUTLINED_FUNCTION_58_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_665();
  v24 = (char *)v31 + v30[10];
  *(_OWORD *)v24 = v25;
  *((_QWORD *)v24 + 2) = v26;
  *((_QWORD *)v24 + 3) = v32;
  *((_OWORD *)v24 + 2) = v33;
  *((_QWORD *)v24 + 6) = v34;
  v27 = OUTLINED_FUNCTION_640();
  outlined init with copy of DocumentEnvelope(v27, v28, type metadata accessor for CompletePromptTemplateRequest);
  __swift_destroy_boxed_opaque_existential_0Tm(v29);
  OUTLINED_FUNCTION_632();
LABEL_12:
  OUTLINED_FUNCTION_2_4();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptTemplateRequest()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void protocol witness for Decodable.init(from:) in conformance CompletePromptTemplateRequest()
{
  CompletePromptTemplateRequest.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance CompletePromptTemplateRequest()
{
  CompletePromptTemplateRequest.encode(to:)();
}

void key path setter for CompletePromptTemplateRequest.promptTemplateInfo : CompletePromptTemplateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;

  OUTLINED_FUNCTION_541(a1, a2, a3, a4, a5);
  OUTLINED_FUNCTION_559();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - v8;
  v10 = OUTLINED_FUNCTION_186_0();
  v11(v10);
  a6(v9);
  OUTLINED_FUNCTION_97();
}

void CompletePromptRequest.prompt.setter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);

  OUTLINED_FUNCTION_97_0();
  v4 = v3;
  OUTLINED_FUNCTION_283_0();
  OUTLINED_FUNCTION_342();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_240_0(v1, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v6 = PromptEnvelope.init(sealing:)();
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = OUTLINED_FUNCTION_195_0();
  v14(v13);
  OUTLINED_FUNCTION_395();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_202_1();
  *v0 = v6;
  v0[1] = v8;
  v0[2] = v10;
  v0[3] = v12;
  OUTLINED_FUNCTION_138();
}

void CompletePromptRequest.prompt.modify(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = OUTLINED_FUNCTION_283_0();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  PromptEnvelope.unseal()();
  OUTLINED_FUNCTION_97();
}

void CompletePromptRequest.prompt.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(void);

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v4 = v2[2];
    OUTLINED_FUNCTION_402();
    v5();
    CompletePromptRequest.prompt.setter();
    OUTLINED_FUNCTION_183_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  }
  else
  {
    CompletePromptRequest.prompt.setter();
  }
  OUTLINED_FUNCTION_614();
  OUTLINED_FUNCTION_620();
  free(v2);
}

void CompletePromptRequest.parameters.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[12];
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  char v34;

  OUTLINED_FUNCTION_166_1(v28, (const void *)(v1 + 32));
  OUTLINED_FUNCTION_293_0();
  v3 = v28[10];
  v4 = v28[11];
  v5 = v29;
  v6 = v30;
  v7 = v31;
  v8 = v32;
  v9 = v33;
  v10 = v34;
  LOBYTE(v27) = v11;
  LOBYTE(v26) = v12;
  LOBYTE(v25) = v13;
  LOBYTE(v24) = v14;
  LOBYTE(v23) = v29;
  LOBYTE(v22) = v31;
  *(_QWORD *)a1 = v15;
  *(_BYTE *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v17;
  *(_BYTE *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v18;
  *(_BYTE *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_BYTE *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v20;
  *(_BYTE *)(a1 + 72) = v14;
  OUTLINED_FUNCTION_165_1(v3, v4, v5, v6, v7, v8, v9, v10, v21, v22, v23, v24, v25, v26, v27);
  OUTLINED_FUNCTION_569();
}

void CompletePromptRequest.constraints.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_376();
  outlined init with copy of Prompt.Rendering?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_104();
}

void CompletePromptRequest.tools.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  OUTLINED_FUNCTION_7_0();
  v6 = OUTLINED_FUNCTION_59_2();
  v48 = *(_QWORD *)(v6 - 8);
  v49 = v6;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v7);
  v9 = OUTLINED_FUNCTION_379(v8, v42[0]);
  v10 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(v9);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v11);
  v46 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OUTLINED_FUNCTION_160_1();
  type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(v13);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_89_0();
  type metadata accessor for ToolType(v15);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v16);
  v17 = OUTLINED_FUNCTION_223_1();
  type metadata accessor for ToolDescriptionEnvelope(v17);
  OUTLINED_FUNCTION_478();
  MEMORY[0x24BDAC7A8](v18);
  v19 = OUTLINED_FUNCTION_50_2();
  v20 = type metadata accessor for ToolDescription(v19);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = OUTLINED_FUNCTION_218_1();
  v23 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CompletePromptRequest(v22) + 28));
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v54 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_495();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_117_0();
    v42[1] = v23;
    v43 = v5;
    v26 = v23 + v25;
    v52 = *(_QWORD *)(v1 + 72);
    v44 = v10;
    v45 = v2;
    do
    {
      v27 = OUTLINED_FUNCTION_507();
      outlined init with copy of DocumentEnvelope(v27, v28, type metadata accessor for ToolDescriptionEnvelope);
      outlined init with copy of DocumentEnvelope(v3, v2, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
      OUTLINED_FUNCTION_52_2(v2, 1, v10);
      v53 = v24;
      if (v29)
      {
        v39 = type metadata accessor for FunctionDescription(0);
        v37 = (uint64_t)v4;
        v38 = 1;
      }
      else
      {
        v30 = v2;
        v31 = v46;
        outlined init with take of DocumentRegistrationEnvelope(v30, (uint64_t)v46, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v34 = *((_QWORD *)v31 + 3);
        v50 = *((_QWORD *)v31 + 2);
        v51 = v32;
        (*(void (**)(uint64_t, char *, uint64_t))(v48 + 16))(v47, &v31[*(int *)(v10 + 24)], v49);
        v35 = type metadata accessor for FunctionDescription(0);
        OUTLINED_FUNCTION_10_0();
        OUTLINED_FUNCTION_90();
        v5 = v43;
        v10 = v44;
        Schema.init(type:)();
        *v4 = v51;
        v4[1] = v33;
        v4[2] = v50;
        v4[3] = v34;
        v36 = (uint64_t)v31;
        v2 = v45;
        outlined destroy of Prompt.Turn.Segment(v36, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        v37 = (uint64_t)v4;
        v38 = 0;
        v39 = v35;
      }
      __swift_storeEnumTagSinglePayload(v37, v38, 1, v39);
      outlined init with take of DocumentRegistrationEnvelope((uint64_t)v4, v5, type metadata accessor for ToolType);
      outlined destroy of Prompt.Turn.Segment(v3, type metadata accessor for ToolDescriptionEnvelope);
      v40 = v54;
      if ((OUTLINED_FUNCTION_371() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v40 = v54;
      }
      v41 = *(_QWORD *)(v40 + 16);
      if (v41 >= *(_QWORD *)(v40 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v40 = v54;
      }
      *(_QWORD *)(v40 + 16) = v41 + 1;
      outlined init with take of DocumentRegistrationEnvelope(v5, v40+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v41, type metadata accessor for ToolDescription);
      v26 += v52;
      v24 = v53 - 1;
    }
    while (v53 != 1);
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_4_1();
}

uint64_t CompletePromptRequest.toolChoice.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = 1;
  switch(*(_QWORD *)(v1 + *(int *)(OUTLINED_FUNCTION_376() + 32) + 8))
  {
    case 0:
      static ToolChoice.none.getter();
      goto LABEL_6;
    case 1:
      static ToolChoice.automatic.getter();
      goto LABEL_6;
    case 2:
      static ToolChoice.required.getter();
      goto LABEL_6;
    case 3:
      goto LABEL_7;
    default:
      OUTLINED_FUNCTION_674();
      OUTLINED_FUNCTION_261();
      static ToolChoice.function(name:)();
LABEL_6:
      v4 = OUTLINED_FUNCTION_261();
      outlined consume of FinishReason?(v4, v5);
      v3 = 0;
LABEL_7:
      v6 = type metadata accessor for ToolChoice();
      return OUTLINED_FUNCTION_18_1(a1, v3, 1, v6);
  }
}

uint64_t ToolChoiceEnvelope.unseal()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  switch(v1)
  {
    case 0:
      return static ToolChoice.none.getter();
    case 1:
      return static ToolChoice.automatic.getter();
    case 2:
      return static ToolChoice.required.getter();
  }
  return static ToolChoice.function(name:)();
}

uint64_t CompletePromptRequest.documents.getter()
{
  return CompletePromptTemplateRequest.documents.getter((void (*)(_QWORD))type metadata accessor for CompletePromptRequest);
}

uint64_t CompletePromptTemplateRequest.documents.getter(void (*a1)(_QWORD))
{
  a1(0);
  return swift_bridgeObjectRetain();
}

uint64_t CompletePromptRequest.metadata.getter()
{
  return CompletePromptTemplateRequest.metadata.getter();
}

void CompletePromptRequest.init(prompt:parameters:constraint:tools:toolChoice:documents:metadata:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  char v55;
  char v56;
  char v57;
  char v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  uint8_t *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  __int128 v184;
  char v185;
  char v186;
  char v187;
  char v188;
  char v189;
  char v190;
  char v191;

  OUTLINED_FUNCTION_7_0();
  v177 = v1;
  v160 = v2;
  v158 = v3;
  v181 = v4;
  v159 = v5;
  v7 = v6;
  v161 = v8;
  OUTLINED_FUNCTION_473(v9);
  type metadata accessor for TokenGenerationOverrides();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_178();
  OUTLINED_FUNCTION_170_0(v11);
  v156 = type metadata accessor for ToolChoice();
  v132 = *(_QWORD *)(v156 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_238();
  v130 = v14;
  v15 = OUTLINED_FUNCTION_59_2();
  v173 = *(_QWORD *)(v15 - 8);
  v174 = v15;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_178();
  OUTLINED_FUNCTION_170_0(v17);
  v171 = type metadata accessor for Schema();
  v170 = *(_QWORD *)(v171 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_178();
  v20 = OUTLINED_FUNCTION_170_0(v19);
  type metadata accessor for SchemaEnvelope(v20);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_178();
  v23 = OUTLINED_FUNCTION_170_0(v22);
  v24 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(v23);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_178();
  v27 = OUTLINED_FUNCTION_170_0(v26);
  v28 = type metadata accessor for FunctionDescription(v27);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_238();
  v180 = v31;
  type metadata accessor for ToolType(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_284_0();
  v35 = v33 - v34;
  MEMORY[0x24BDAC7A8](v36);
  v38 = (char *)&v128 - v37;
  type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v40);
  v176 = (char *)&v128 - v41;
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_238();
  v179 = v43;
  v133 = *(_QWORD *)(type metadata accessor for ToolDescription(0) - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v44);
  OUTLINED_FUNCTION_31_0();
  v175 = v45;
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_238();
  *(_QWORD *)&v183 = v47;
  v48 = OUTLINED_FUNCTION_160_1();
  v178 = *(_QWORD *)(type metadata accessor for ToolDescriptionEnvelope(v48) - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v49);
  OUTLINED_FUNCTION_441(v50, v128);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ToolChoice?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_178();
  OUTLINED_FUNCTION_170_0(v52);
  v53 = type metadata accessor for Prompt();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_176_1();
  v129 = *v7;
  v54 = *((unsigned __int8 *)v7 + 8);
  v144 = v7[2];
  v55 = *((_BYTE *)v7 + 24);
  v143 = v7[4];
  v56 = *((_BYTE *)v7 + 40);
  v142 = v7[6];
  v57 = *((_BYTE *)v7 + 56);
  v141 = v7[8];
  v140 = *((unsigned __int8 *)v7 + 72);
  v139 = v7[10];
  v138 = v7[11];
  v137 = *((unsigned __int8 *)v7 + 96);
  v136 = v7[13];
  v135 = *((unsigned __int8 *)v7 + 112);
  v145 = v7[15];
  v134 = *((unsigned __int8 *)v7 + 128);
  v58 = *((_BYTE *)v7 + 130);
  v152 = *v177;
  v151 = v177[1];
  v150 = v177[2];
  v149 = v177[3];
  v148 = v177[4];
  v147 = v177[5];
  v146 = v177[6];
  v154 = v59;
  v60 = *(void (**)(uint64_t, uint64_t))(v59 + 16);
  v155 = v61;
  v60(v0, v161);
  v62 = PromptEnvelope.init(sealing:)();
  v63 = v162;
  *v162 = v62;
  v63[1] = v64;
  v63[2] = v65;
  v63[3] = v66;
  if (v54 < 2)
    v67 = v129;
  else
    v67 = 0;
  v191 = v55;
  v190 = v56;
  v189 = v57;
  v68 = v140;
  v188 = v140;
  v69 = v137;
  v187 = v137;
  v186 = v135;
  v185 = v134;
  v70 = v162;
  v162[4] = v67;
  *((_BYTE *)v70 + 40) = v54;
  v70[6] = v144;
  *((_BYTE *)v70 + 56) = v55;
  v70[8] = v143;
  *((_BYTE *)v70 + 72) = v56;
  v70[10] = v142;
  *((_BYTE *)v70 + 88) = v57;
  v70[12] = v141;
  *((_BYTE *)v70 + 104) = v68;
  v71 = v138;
  v70[14] = v139;
  v70[15] = v71;
  *((_BYTE *)v70 + 128) = v69;
  v70[17] = v136;
  *((_BYTE *)v70 + 144) = v186;
  v70[19] = v145;
  *((_BYTE *)v70 + 160) = v185;
  *((_BYTE *)v70 + 161) = v58;
  static CompletePromptRequest.toolsToToolDescriptions(_:)();
  v73 = v72;
  OUTLINED_FUNCTION_213();
  v74 = *(_QWORD *)(v73 + 16);
  if (v74)
  {
    *(_QWORD *)&v184 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_117_0();
    v145 = v73;
    v76 = v73 + v75;
    v177 = *(uint64_t **)(v77 + 72);
    v79 = v175;
    v78 = (uint64_t)v176;
    v164 = v35;
    v163 = v38;
    do
    {
      v80 = v183;
      OUTLINED_FUNCTION_666(v76, v183);
      OUTLINED_FUNCTION_666(v80, v79);
      OUTLINED_FUNCTION_228_0(v79, (uint64_t)v38);
      OUTLINED_FUNCTION_228_0((uint64_t)v38, v35);
      OUTLINED_FUNCTION_52_2(v35, 1, v28);
      v181 = v74;
      if (v81)
      {
        OUTLINED_FUNCTION_252((uint64_t)v38);
        OUTLINED_FUNCTION_154_1(v78, 1);
      }
      else
      {
        v82 = v180;
        OUTLINED_FUNCTION_266_0(v35, v180);
        v83 = v166;
        OUTLINED_FUNCTION_228_0(v82, (uint64_t)v166);
        v84 = v83[1];
        v85 = v167;
        *v167 = *v83;
        v85[1] = v84;
        v86 = v83[3];
        v85[2] = v83[2];
        v85[3] = v86;
        v87 = (uint64_t)v83 + *(int *)(v28 + 24);
        v88 = v170;
        v89 = v169;
        v90 = v28;
        v91 = v24;
        v92 = v171;
        OUTLINED_FUNCTION_694(v169, v87, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v170 + 16));
        OUTLINED_FUNCTION_88_0();
        OUTLINED_FUNCTION_154();
        v93 = v172;
        Schema.type.getter();
        v94 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
        v38 = v163;
        v95 = v92;
        v24 = v91;
        v28 = v90;
        v79 = v175;
        v94(v89, v95);
        v96 = v168;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v173 + 32))(v168, v93, v174);
        v97 = (uint64_t)v83;
        v78 = (uint64_t)v176;
        OUTLINED_FUNCTION_306_0(v97);
        outlined init with take of DocumentRegistrationEnvelope(v96, (uint64_t)v85 + *(int *)(v24 + 24), type metadata accessor for SchemaEnvelope);
        v98 = (uint64_t)v85;
        v35 = v164;
        v99 = v165;
        outlined init with take of DocumentRegistrationEnvelope(v98, v165, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
        outlined destroy of Prompt.Turn.Segment((uint64_t)v38, type metadata accessor for ToolType);
        OUTLINED_FUNCTION_306_0(v180);
        OUTLINED_FUNCTION_154_1(v99, 0);
        OUTLINED_FUNCTION_645(v99, v78);
      }
      v100 = v179;
      OUTLINED_FUNCTION_645(v78, v179);
      OUTLINED_FUNCTION_306_0(v79);
      OUTLINED_FUNCTION_645(v100, v182);
      OUTLINED_FUNCTION_306_0(v183);
      v101 = v184;
      if ((OUTLINED_FUNCTION_371() & 1) == 0)
      {
        OUTLINED_FUNCTION_356();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v101 = v184;
      }
      v102 = *(_QWORD *)(v101 + 16);
      if (v102 >= *(_QWORD *)(v101 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v101 = v184;
      }
      *(_QWORD *)(v101 + 16) = v102 + 1;
      OUTLINED_FUNCTION_106_0();
      outlined init with take of DocumentRegistrationEnvelope(v182, v103 + v104 * v102, type metadata accessor for ToolDescriptionEnvelope);
      v76 += (uint64_t)v177;
      v74 = v181 - 1;
    }
    while (v181 != 1);
    OUTLINED_FUNCTION_114_0();
  }
  else
  {
    OUTLINED_FUNCTION_112();
    v101 = MEMORY[0x24BEE4AF8];
  }
  v105 = (int *)OUTLINED_FUNCTION_376();
  v106 = v162;
  *(uint64_t *)((char *)v162 + v105[7]) = v101;
  v107 = v158;
  v108 = v153;
  OUTLINED_FUNCTION_477(v158, v109, &demangling cache variable for type metadata for ToolChoice?);
  v110 = v156;
  OUTLINED_FUNCTION_52_2(v108, 1, v156);
  if (v81)
  {
    v113 = xmmword_248BC0340;
  }
  else
  {
    v111 = v132;
    v112 = v130;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32))(v130, v108, v110);
    OUTLINED_FUNCTION_546(v131, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v111 + 16));
    ToolChoiceEnvelope.init(sealing:)();
    v183 = v184;
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v112, v110);
    v113 = v183;
  }
  *(_OWORD *)((char *)v106 + v105[8]) = v113;
  v114 = (uint64_t *)((char *)v106 + v105[10]);
  v115 = v151;
  *v114 = v152;
  v114[1] = v115;
  v116 = v149;
  v114[2] = v150;
  v114[3] = v116;
  v117 = v147;
  v114[4] = v148;
  v114[5] = v117;
  v114[6] = v146;
  OUTLINED_FUNCTION_322();
  v118 = v157;
  OUTLINED_FUNCTION_677();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Overridable<Bool>);
  Overridable.wrappedValue.getter();
  v119 = v184;
  outlined destroy of Prompt.Turn.Segment(v118, (uint64_t (*)(_QWORD))type metadata accessor for TokenGenerationOverrides);
  if ((v119 & 1) != 0)
  {
    if (one-time initialization token for schema != -1)
      swift_once();
    v120 = OUTLINED_FUNCTION_200();
    v121 = OUTLINED_FUNCTION_189_1(v120, (uint64_t)static Log.schema);
    v122 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_527(v122))
    {
      v123 = (uint8_t *)OUTLINED_FUNCTION_235_0();
      *(_WORD *)v123 = 0;
      OUTLINED_FUNCTION_404(&dword_248B08000, v121, (os_log_type_t)v118, "Disabled GuidedGeneration constraints because of user default", v123);
      OUTLINED_FUNCTION_0_0();
    }

    outlined destroy of Locale?(v107, &demangling cache variable for type metadata for ToolChoice?);
    outlined destroy of Locale?(v159, &demangling cache variable for type metadata for Constraints?);
    OUTLINED_FUNCTION_271_0();
    type metadata accessor for Constraints(0);
    v124 = OUTLINED_FUNCTION_550();
    OUTLINED_FUNCTION_171_0(v124, v125, v126, v127);
  }
  else
  {
    outlined destroy of Locale?(v107, &demangling cache variable for type metadata for ToolChoice?);
    OUTLINED_FUNCTION_271_0();
    outlined init with take of Locale?(v159, (uint64_t)v106 + v105[6], &demangling cache variable for type metadata for Constraints?);
  }
  *(uint64_t *)((char *)v106 + v105[9]) = v160;
  OUTLINED_FUNCTION_4_1();
}

void static CompletePromptRequest.toolsToToolDescriptions(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[2];
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_442(v6, v69[0]);
  v7 = OUTLINED_FUNCTION_215_0();
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_219_1(v9, v69[0]);
  type metadata accessor for ToolType(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  v78 = (uint64_t *)((char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_160_1();
  v12 = type metadata accessor for Tool.Function();
  v76 = *(_QWORD *)(v12 - 8);
  v77 = v12;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_160_1();
  type metadata accessor for Tool.Type();
  OUTLINED_FUNCTION_270_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_537();
  v17 = type metadata accessor for Tool();
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_238();
  v90 = v20;
  v88 = *(_QWORD *)(type metadata accessor for ToolDescription(0) - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v21);
  v87 = (uint64_t)v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_85_1();
  v24 = MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_679(v24, v25, v26, v27, v28, v29, v30, v31, v69[0]);
  v32 = *(_QWORD *)(v4 + 16);
  if (v32)
  {
    v91 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_117_0();
    v34 = v4 + v33;
    v35 = *(_QWORD *)(v2 + 16);
    v85 = *(_QWORD *)(v2 + 72);
    v86 = v35;
    v84 = *MEMORY[0x24BE3B8D8];
    v70 = *MEMORY[0x24BE3B8D0];
    v74 = v1;
    v73 = v0;
    v72 = v17;
    v71 = v2;
    do
    {
      v36 = OUTLINED_FUNCTION_261();
      OUTLINED_FUNCTION_621(v36, v37);
      Tool.type.getter();
      v38 = OUTLINED_FUNCTION_484();
      v40 = v39(v38);
      if (v40 == v84)
      {
        OUTLINED_FUNCTION_183_1(v0, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 96));
        v41 = OUTLINED_FUNCTION_210_0();
        OUTLINED_FUNCTION_275(v41, v42, v43);
        v44 = Tool.Function.name.getter();
        v82 = v45;
        v83 = v44;
        v46 = Tool.Function.description.getter();
        v48 = v47;
        Tool.Function.parameters.getter();
        v49 = v79;
        Schema.init(type:)();
        v50 = OUTLINED_FUNCTION_260();
        v51(v50);
        v52 = (char *)v78;
        v53 = v82;
        *v78 = v83;
        *((_QWORD *)v52 + 1) = v53;
        *((_QWORD *)v52 + 2) = v46;
        *((_QWORD *)v52 + 3) = v48;
        v2 = v71;
        v1 = v74;
        v54 = type metadata accessor for FunctionDescription(0);
        v55 = v49;
        v0 = v73;
        (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(&v52[*(int *)(v54 + 24)], v55, v81);
        OUTLINED_FUNCTION_311((uint64_t)v52, 0);
        v56 = (uint64_t)v52;
        v17 = v72;
        v57 = v87;
        outlined init with take of DocumentRegistrationEnvelope(v56, v87, type metadata accessor for ToolType);
      }
      else
      {
        v57 = v87;
        if (v40 != v70)
        {
          OUTLINED_FUNCTION_621(v69[0], v90);
          OUTLINED_FUNCTION_348();
          _StringGuts.grow(_:)(21);
          OUTLINED_FUNCTION_571();
          OUTLINED_FUNCTION_322();
          OUTLINED_FUNCTION_175(19, v67);
          v68 = v69[1];
          Tool.type.getter();
          _print_unlocked<A, B>(_:_:)();
          OUTLINED_FUNCTION_183_1(v68, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
          OUTLINED_FUNCTION_347();
          v69[0] = 253;
          OUTLINED_FUNCTION_143_1();
          OUTLINED_FUNCTION_568();
        }
        v58 = type metadata accessor for FunctionDescription(0);
        OUTLINED_FUNCTION_171_0(v57, v59, v60, v58);
      }
      outlined init with take of DocumentRegistrationEnvelope(v57, v89, type metadata accessor for ToolDescription);
      (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v90, v17);
      v61 = v91;
      if ((OUTLINED_FUNCTION_371() & 1) == 0)
      {
        OUTLINED_FUNCTION_237_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v61 = v91;
      }
      v63 = *(_QWORD *)(v61 + 16);
      v62 = *(_QWORD *)(v61 + 24);
      if (v63 >= v62 >> 1)
      {
        OUTLINED_FUNCTION_492(v62);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v61 = v91;
      }
      *(_QWORD *)(v61 + 16) = v63 + 1;
      OUTLINED_FUNCTION_106_0();
      outlined init with take of DocumentRegistrationEnvelope(v66, v64 + v65 * v63, type metadata accessor for ToolDescription);
      v34 += v85;
      --v32;
    }
    while (v32);
  }
  OUTLINED_FUNCTION_4_1();
}

void ToolChoiceEnvelope.init(sealing:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  v22 = v5;
  type metadata accessor for ToolChoice();
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v6);
  v21 = (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_160_1();
  type metadata accessor for ToolChoice.FunctionChoice();
  OUTLINED_FUNCTION_167_1();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ToolChoice.Value();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_118_1();
  ToolChoice.value.getter();
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 88))(v1, v11);
  if (v13 == *MEMORY[0x24BE3B4D0])
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 96))(v1, v11);
    OUTLINED_FUNCTION_694((uint64_t)v10, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32));
    v14 = ToolChoice.FunctionChoice.name.getter();
    v16 = v15;
    OUTLINED_FUNCTION_184_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v17 = OUTLINED_FUNCTION_424();
    v18(v17);
  }
  else if (v13 == *MEMORY[0x24BE3B4C8])
  {
    OUTLINED_FUNCTION_184_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v14 = 0;
    v16 = 0;
  }
  else if (v13 == *MEMORY[0x24BE3B4E0])
  {
    OUTLINED_FUNCTION_184_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v14 = 0;
    v16 = 1;
  }
  else
  {
    if (v13 != *MEMORY[0x24BE3B4D8])
    {
      OUTLINED_FUNCTION_240_0(v21, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
      v23 = 0;
      v24 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      OUTLINED_FUNCTION_322();
      OUTLINED_FUNCTION_175(20, v20);
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_143_1();
      OUTLINED_FUNCTION_568();
    }
    OUTLINED_FUNCTION_184_1(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v14 = 0;
    v16 = 2;
  }
  v19 = v22;
  *v22 = v14;
  v19[1] = v16;
  OUTLINED_FUNCTION_4_1();
}

void ToolDescription.init(type:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of DocumentRegistrationEnvelope(a1, a2, type metadata accessor for ToolType);
}

uint64_t FunctionDescription.init(name:usageDescription:argumentsSchema:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  OUTLINED_FUNCTION_86_1();
  OUTLINED_FUNCTION_559();
  v5 = OUTLINED_FUNCTION_260();
  return OUTLINED_FUNCTION_10_1(v5, v6, v7, v8);
}

void CompletePromptRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  Swift::UInt v13;
  uint64_t v14;
  _BYTE v15[144];

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  v5 = type metadata accessor for Constraints(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_651();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_118_0();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_203_1();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_642();
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_506();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_227();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_166_1(v15, (const void *)(v0 + 32));
  outlined retain of SamplingParametersEnvelope((uint64_t)v15);
  OUTLINED_FUNCTION_658();
  outlined release of SamplingParametersEnvelope((uint64_t)v15);
  v8 = (int *)type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_272_0(v0 + v8[6], v2);
  OUTLINED_FUNCTION_52_2(v2, 1, v5);
  if (v9)
  {
    OUTLINED_FUNCTION_96_0(0);
  }
  else
  {
    outlined init with take of DocumentRegistrationEnvelope(v2, v1, type metadata accessor for Constraints);
    OUTLINED_FUNCTION_96_0(1u);
    Constraints.hash(into:)(v4);
    v10 = OUTLINED_FUNCTION_237();
    outlined destroy of Prompt.Turn.Segment(v10, v11);
  }
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_61();
  v12 = *(_QWORD *)(v0 + v8[8] + 8);
  if (v12 == 3)
  {
    OUTLINED_FUNCTION_96_0(0);
  }
  else
  {
    OUTLINED_FUNCTION_96_0(1u);
    if (v12)
    {
      if (v12 == 1)
      {
        v13 = 1;
      }
      else
      {
        if (v12 != 2)
        {
          OUTLINED_FUNCTION_155_0(3uLL);
          OUTLINED_FUNCTION_507();
          String.hash(into:)();
          goto LABEL_14;
        }
        v13 = 2;
      }
    }
    else
    {
      v13 = 0;
    }
    OUTLINED_FUNCTION_155_0(v13);
  }
LABEL_14:
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_633();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_177_1(v8[10]);
  OUTLINED_FUNCTION_362();
  outlined release of RequestMetadataEnvelope((uint64_t)&v14);
  OUTLINED_FUNCTION_4_1();
}

void static CompletePromptRequest.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  char v27;
  char v28;
  char v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  char v56;
  char *v57;
  __int128 v58;
  char *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  OUTLINED_FUNCTION_7_0();
  v3 = v2;
  v5 = v4;
  v66 = OUTLINED_FUNCTION_435();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_178();
  v61 = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Constraints?, Constraints?));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_439(v10, v61);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_31_0();
  v64 = v12;
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_350();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_536();
  v20 = v5[2];
  v19 = v5[3];
  v21 = *v3;
  v22 = v3[1];
  v23 = v3[2];
  v24 = v3[3];
  v25 = *v5 == *v3 && v5[1] == v22;
  if (v25 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v26 & 1) != 0))
  {
    specialized static Array<A>.== infix(_:_:)(v20, v23, v21, v22, v15, v16, v17, v18, v62, v64, v66, v69, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74,
      v75);
    if ((v27 & 1) != 0)
    {
      specialized static Array<A>.== infix(_:_:)(v19, v24);
      if ((v28 & 1) != 0)
      {
        OUTLINED_FUNCTION_166_1(&v78, v5 + 4);
        OUTLINED_FUNCTION_166_1(&v79, v3 + 4);
        static SamplingParametersEnvelope.== infix(_:_:)();
        if ((v29 & 1) != 0)
        {
          v30 = (int *)OUTLINED_FUNCTION_376();
          OUTLINED_FUNCTION_268_0((uint64_t)v5 + v30[6], v0);
          OUTLINED_FUNCTION_268_0((uint64_t)v3 + v30[6], v1);
          v31 = v70 + *(int *)(v8 + 48);
          OUTLINED_FUNCTION_268_0(v0, v70);
          OUTLINED_FUNCTION_268_0(v1, v31);
          v32 = OUTLINED_FUNCTION_425();
          OUTLINED_FUNCTION_52_2(v32, v33, v67);
          if (v25)
          {
            OUTLINED_FUNCTION_476(v1);
            OUTLINED_FUNCTION_476(v0);
            v35 = OUTLINED_FUNCTION_52_2(v31, 1, v67);
            if (v25)
            {
              OUTLINED_FUNCTION_516(v35, &demangling cache variable for type metadata for Constraints?);
              goto LABEL_19;
            }
          }
          else
          {
            OUTLINED_FUNCTION_477(v70, v34, &demangling cache variable for type metadata for Constraints?);
            OUTLINED_FUNCTION_52_2(v31, 1, v67);
            if (!v36)
            {
              outlined init with take of DocumentRegistrationEnvelope(v31, v63, type metadata accessor for Constraints);
              static Constraints.== infix(_:_:)();
              v68 = v40;
              OUTLINED_FUNCTION_306_0(v63);
              outlined destroy of Locale?(v1, &demangling cache variable for type metadata for Constraints?);
              outlined destroy of Locale?(v0, &demangling cache variable for type metadata for Constraints?);
              OUTLINED_FUNCTION_306_0(v65);
              v41 = OUTLINED_FUNCTION_424();
              outlined destroy of Locale?(v41, v42);
              if ((v68 & 1) == 0)
                goto LABEL_29;
LABEL_19:
              specialized static Array<A>.== infix(_:_:)();
              if ((v43 & 1) == 0)
                goto LABEL_29;
              v44 = v30[8];
              v46 = *(_QWORD *)((char *)v5 + v44);
              v45 = *(_QWORD *)((char *)v5 + v44 + 8);
              v47 = (uint64_t *)((char *)v3 + v44);
              v49 = *v47;
              v48 = v47[1];
              if (v45 == 3)
              {
                if (v48 == 3)
                {
LABEL_27:
                  specialized static Array<A>.== infix(_:_:)();
                  if ((v56 & 1) != 0)
                  {
                    v57 = (char *)v5 + v30[10];
                    v58 = *((_OWORD *)v57 + 2);
                    v72 = *((_OWORD *)v57 + 1);
                    v73 = v58;
                    v74 = *((_QWORD *)v57 + 6);
                    v71 = *(_OWORD *)v57;
                    v59 = (char *)v3 + v30[10];
                    v77 = *((_QWORD *)v59 + 6);
                    v60 = *((_OWORD *)v59 + 2);
                    v76[1] = *((_OWORD *)v59 + 1);
                    v76[2] = v60;
                    v76[0] = *(_OWORD *)v59;
                    static RequestMetadataEnvelope.== infix(_:_:)(&v71, v76);
                  }
                  goto LABEL_29;
                }
              }
              else
              {
                *(_QWORD *)&v76[0] = v46;
                *((_QWORD *)&v76[0] + 1) = v45;
                if (v48 != 3)
                {
                  *(_QWORD *)&v71 = v49;
                  *((_QWORD *)&v71 + 1) = v48;
                  OUTLINED_FUNCTION_521();
                  static ToolChoiceEnvelope.== infix(_:_:)(v76, &v71);
                  v55 = v54;
                  OUTLINED_FUNCTION_661();
                  OUTLINED_FUNCTION_662();
                  if ((v55 & 1) == 0)
                    goto LABEL_29;
                  goto LABEL_27;
                }
                OUTLINED_FUNCTION_521();
                OUTLINED_FUNCTION_661();
              }
              v50 = OUTLINED_FUNCTION_424();
              outlined copy of FinishReason?(v50, v51);
              OUTLINED_FUNCTION_662();
              v52 = OUTLINED_FUNCTION_424();
              outlined consume of FinishReason?(v52, v53);
              goto LABEL_29;
            }
            OUTLINED_FUNCTION_533(v1);
            v37 = OUTLINED_FUNCTION_523();
            outlined destroy of Locale?(v37, v38);
            OUTLINED_FUNCTION_613(v39, type metadata accessor for Constraints);
          }
          OUTLINED_FUNCTION_516(v35, &demangling cache variable for type metadata for (Constraints?, Constraints?));
        }
      }
    }
  }
LABEL_29:
  OUTLINED_FUNCTION_4_1();
}

uint64_t CompletePromptRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v12;

  v2 = a1 == 0x74706D6F72705FLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x74656D617261705FLL && a2 == 0xEB00000000737265;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x69617274736E6F63 && a2 == 0xEB0000000073746ELL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x736C6F6F745FLL && a2 == 0xE600000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x6F68436C6F6F745FLL && a2 == 0xEB00000000656369;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            v10 = a1 == 0x746E656D75636F64 && a2 == 0xE900000000000073;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else if (a1 == 0x7461646174656D5FLL && a2 == 0xE900000000000061)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v12 & 1) != 0)
                return 6;
              else
                return 7;
            }
          }
        }
      }
    }
  }
}

uint64_t CompletePromptRequest.CodingKeys.init(intValue:)()
{
  return 7;
}

uint64_t CompletePromptRequest.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248B38E1C + 4 * byte_248BC036B[a1]))(0x74706D6F72705FLL, 0xE700000000000000);
}

uint64_t sub_248B38E1C()
{
  return 0x74656D617261705FLL;
}

uint64_t sub_248B38E3C()
{
  return 0x69617274736E6F63;
}

uint64_t sub_248B38E60()
{
  return 0x736C6F6F745FLL;
}

uint64_t sub_248B38E74()
{
  return 0x6F68436C6F6F745FLL;
}

uint64_t sub_248B38E94()
{
  return 0x746E656D75636F64;
}

uint64_t sub_248B38EB8()
{
  return 0x7461646174656D5FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CompletePromptRequest.CodingKeys()
{
  unsigned __int8 *v0;

  return CompletePromptRequest.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptRequest.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CompletePromptRequest.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CompletePromptRequest.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CompletePromptRequest.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptRequest.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptRequest.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void CompletePromptRequest.encode(to:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_454();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptRequest.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_669();
  OUTLINED_FUNCTION_37_2();
  v6 = v1[3];
  v19 = *v1;
  v20 = *(_OWORD *)(v1 + 1);
  v21 = v6;
  v18 = 0;
  lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
  OUTLINED_FUNCTION_25_0();
  if (!v0)
  {
    OUTLINED_FUNCTION_166_1(&v13, v1 + 4);
    OUTLINED_FUNCTION_479(1);
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    OUTLINED_FUNCTION_25_0();
    v7 = (int *)type metadata accessor for CompletePromptRequest(0);
    v13.n128_u8[0] = 2;
    type metadata accessor for Constraints(0);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Constraints and conformance Constraints);
    OUTLINED_FUNCTION_144_1();
    v13.n128_u64[0] = *(uint64_t *)((char *)v1 + v7[7]);
    OUTLINED_FUNCTION_479(3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_594(*(__n128 *)((char *)v1 + v7[8]));
    OUTLINED_FUNCTION_479(4);
    lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope();
    OUTLINED_FUNCTION_141_1();
    v13.n128_u64[0] = *(uint64_t *)((char *)v1 + v7[9]);
    OUTLINED_FUNCTION_479(5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]();
    OUTLINED_FUNCTION_25_0();
    v13 = OUTLINED_FUNCTION_526();
    v14 = v8;
    v15 = v9;
    v16 = *(_OWORD *)(v10 + 32);
    v17 = v11;
    OUTLINED_FUNCTION_479(6);
    lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
    OUTLINED_FUNCTION_25_0();
  }
  OUTLINED_FUNCTION_89_1((uint64_t)v5, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

void CompletePromptRequest.hashValue.getter()
{
  StreamingRequest.hashValue.getter();
}

void CompletePromptRequest.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  OUTLINED_FUNCTION_6_2();
  v13 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_118_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptRequest.CodingKeys>);
  OUTLINED_FUNCTION_270_0();
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_218_1();
  v14 = (int *)type metadata accessor for CompletePromptRequest(v5);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_178();
  v8 = v7;
  OUTLINED_FUNCTION_669();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
  {
    OUTLINED_FUNCTION_188_1();
  }
  else
  {
    lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope();
    OUTLINED_FUNCTION_329();
    v9 = v22;
    *(_QWORD *)v8 = v20;
    *(_OWORD *)(v8 + 8) = v21;
    *(_QWORD *)(v8 + 24) = v9;
    OUTLINED_FUNCTION_449();
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    OUTLINED_FUNCTION_329();
    OUTLINED_FUNCTION_166_1((void *)(v8 + 32), &v20);
    type metadata accessor for Constraints(0);
    LOBYTE(v15) = 2;
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Constraints and conformance Constraints);
    OUTLINED_FUNCTION_680();
    outlined init with take of Locale?(v1, v8 + v14[6], &demangling cache variable for type metadata for Constraints?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]();
    OUTLINED_FUNCTION_261_0();
    OUTLINED_FUNCTION_592();
    *(_QWORD *)(v8 + v14[7]) = v10;
    lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope();
    OUTLINED_FUNCTION_680();
    *(_OWORD *)(v8 + v14[8]) = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    OUTLINED_FUNCTION_604();
    OUTLINED_FUNCTION_261_0();
    OUTLINED_FUNCTION_592();
    OUTLINED_FUNCTION_471(v11);
    OUTLINED_FUNCTION_329();
    OUTLINED_FUNCTION_81_2();
    v12 = v8 + v14[10];
    *(_OWORD *)v12 = v15;
    *(_QWORD *)(v12 + 16) = v16;
    *(_QWORD *)(v12 + 24) = v17;
    *(_OWORD *)(v12 + 32) = v18;
    *(_QWORD *)(v12 + 48) = v19;
    outlined init with copy of DocumentEnvelope(v8, v13, type metadata accessor for CompletePromptRequest);
    OUTLINED_FUNCTION_188_1();
    OUTLINED_FUNCTION_632();
  }
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptRequest()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void protocol witness for Decodable.init(from:) in conformance CompletePromptRequest()
{
  CompletePromptRequest.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance CompletePromptRequest()
{
  CompletePromptRequest.encode(to:)();
}

void ToolDescription.type.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined init with copy of DocumentEnvelope(v1, a1, type metadata accessor for ToolType);
}

void ToolDescription.type.setter(uint64_t a1)
{
  uint64_t v1;

  outlined assign with take of PromptTemplateInfoEnvelope(a1, v1, type metadata accessor for ToolType);
}

uint64_t (*ToolDescription.type.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

#error "248B39768: call analysis failed (funcsize=54)"

#error "248B39874: call analysis failed (funcsize=91)"

void ToolDescription.hashValue.getter()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ToolDescription()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

#error "248B39A08: call analysis failed (funcsize=54)"

void static FunctionDescription.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  OUTLINED_FUNCTION_120_1(a1);
  v5 = v5 && v3 == v4;
  if ((v5 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
    && (*(_QWORD *)(v2 + 16) == *(_QWORD *)(v1 + 16) ? (v6 = *(_QWORD *)(v2 + 24) == *(_QWORD *)(v1 + 24)) : (v6 = 0),
        v6 || (OUTLINED_FUNCTION_24_0() & 1) != 0))
  {
    type metadata accessor for FunctionDescription(0);
    static Schema.== infix(_:_:)();
  }
  else
  {
    OUTLINED_FUNCTION_104();
  }
}

void ToolType.hashValue.getter()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ToolType()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void FunctionDescription.name.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void FunctionDescription.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_395();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*FunctionDescription.name.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void FunctionDescription.usageDescription.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void FunctionDescription.usageDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  OUTLINED_FUNCTION_202_1();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*FunctionDescription.usageDescription.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t FunctionDescription.argumentsSchema.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_86_1();
  OUTLINED_FUNCTION_559();
  v0 = OUTLINED_FUNCTION_90_0();
  return OUTLINED_FUNCTION_10_1(v0, v1, v2, v3);
}

uint64_t FunctionDescription.argumentsSchema.setter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_86_1();
  OUTLINED_FUNCTION_559();
  v0 = OUTLINED_FUNCTION_260();
  return OUTLINED_FUNCTION_10_1(v0, v1, v2, v3);
}

uint64_t (*FunctionDescription.argumentsSchema.modify())()
{
  type metadata accessor for FunctionDescription(0);
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void FunctionDescription.hash(into:)()
{
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_86_1();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Schema and conformance Schema);
  OUTLINED_FUNCTION_196_0();
  OUTLINED_FUNCTION_97();
}

void FunctionDescription.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_86_1();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Schema and conformance Schema);
  OUTLINED_FUNCTION_452();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FunctionDescription()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for Schema();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Schema and conformance Schema);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void PromptCompletionEnvelope.unseal()()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[3];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  OUTLINED_FUNCTION_7_0();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_145();
  v5 = *v0;
  v6 = v0[1];
  v7 = v0[2];
  v67 = v0[3];
  v8 = v0[5];
  v66 = v0[4];
  v9 = v0[6];
  v62 = v0[7];
  v61 = v0[8];
  v60 = v0[9];
  v59 = v0[10];
  v58 = v0[11];
  v57 = v0[12];
  v56 = v0[13];
  v55 = v0[14];
  v10 = v0[15];
  v11 = v0[16];
  v54 = v10;
  ModelInformationEnvelope.unseal()(v5, v6, v7, v80);
  OUTLINED_FUNCTION_580(v80[0]);
  v64 = v80[1];
  OUTLINED_FUNCTION_473(v80[2]);
  v12 = *(_QWORD *)(v8 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v50 = v11;
    v51 = v9;
    v52 = v1;
    v53 = v3;
    v81 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_88_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v14 = 0;
    v15 = v81;
    v68 = v8 + 32;
    v69 = v12;
    do
    {
      v72 = v14;
      v16 = (_QWORD *)(v68 + 32 * v14);
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      v20 = v16[3];
      v21 = *(_QWORD *)(*v16 + 16);
      v75 = *v16;
      v76 = v20;
      v74 = v19;
      v73 = v18;
      if (v21)
      {
        swift_bridgeObjectRetain_n();
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_432();
        OUTLINED_FUNCTION_357();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v22 = v13;
        v23 = (unint64_t *)(v17 + 56);
        do
        {
          v25 = *(v23 - 3);
          v24 = *(v23 - 2);
          v26 = *(v23 - 1);
          v27 = *v23;
          OUTLINED_FUNCTION_40_0();
          outlined copy of Data?(v26, v27);
          v28 = *(_QWORD *)(v22 + 16);
          if (v28 >= *(_QWORD *)(v22 + 24) >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v23 += 4;
          *(_QWORD *)(v22 + 16) = v28 + 1;
          v29 = (_QWORD *)(v22 + 32 * v28);
          v29[4] = v25;
          v29[5] = v24;
          v29[6] = v26;
          v29[7] = v27;
          --v21;
        }
        while (v21);
        v71 = v22;
        v17 = v75;
        OUTLINED_FUNCTION_213();
        v13 = MEMORY[0x24BEE4AF8];
        v19 = v74;
        v18 = v73;
      }
      else
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_432();
        v71 = v13;
      }
      v30 = *(_QWORD *)(v18 + 16);
      if (v30)
      {
        v70 = v15;
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_357();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v31 = v13;
        v32 = (uint64_t *)(v18 + 48);
        do
        {
          v33 = *(v32 - 1);
          v34 = v32[1];
          v78 = *v32;
          v79 = *(v32 - 2);
          v35 = v32[3];
          v77 = v32[2];
          v36 = v32[4];
          v37 = v32[5];
          OUTLINED_FUNCTION_40_0();
          OUTLINED_FUNCTION_88_0();
          OUTLINED_FUNCTION_154();
          outlined copy of Data?(v36, v37);
          v38 = *(_QWORD *)(v31 + 16);
          if (v38 >= *(_QWORD *)(v31 + 24) >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          *(_QWORD *)(v31 + 16) = v38 + 1;
          v39 = (_QWORD *)(v31 + (v38 << 6));
          v39[4] = v79;
          v39[5] = v33;
          v39[6] = v78;
          v39[7] = v34;
          v39[8] = v77;
          v39[9] = v35;
          v32 += 8;
          v39[10] = v36;
          v39[11] = v37;
          --v30;
        }
        while (v30);
        v40 = v31;
        v18 = v73;
        OUTLINED_FUNCTION_39_0();
        v15 = v70;
        v13 = MEMORY[0x24BEE4AF8];
        v17 = v75;
        v20 = v76;
        v19 = v74;
      }
      else
      {
        v40 = v13;
      }
      if (v20 >= 3)
        v41 = v19;
      else
        v41 = 0;
      OUTLINED_FUNCTION_432();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_213();
      outlined consume of FinishReason(v19, v20);
      OUTLINED_FUNCTION_575();
      if (v43)
      {
        OUTLINED_FUNCTION_493(v42);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v15 = v81;
      }
      v14 = v72 + 1;
      *(_QWORD *)(v15 + 16) = v17;
      v44 = (_QWORD *)(v15 + 32 * v18);
      v44[4] = v71;
      v44[5] = v40;
      v44[6] = v41;
      v44[7] = v20;
    }
    while (v72 + 1 != v69);
    OUTLINED_FUNCTION_114_0();
    v3 = v53;
    v1 = v52;
    v9 = v51;
    v11 = v50;
  }
  else
  {
    v15 = MEMORY[0x24BEE4AF8];
  }
  if (v62)
  {
    v81 = v9;
    v82 = v62;
    v83 = v61;
    v84 = v60;
    v85 = v59;
    v86 = v58;
    v87 = v57;
    v88 = v56;
    v89 = v55;
    v90 = v54;
    v91 = v11;
    PromptRenderingEnvelope.unseal()();
    OUTLINED_FUNCTION_19_0();
    v45 = v1;
    v46 = 0;
  }
  else
  {
    OUTLINED_FUNCTION_19_0();
    v45 = v1;
    v46 = 1;
  }
  OUTLINED_FUNCTION_311(v45, v46);
  v47 = (uint64_t)v3 + *(int *)(OUTLINED_FUNCTION_331() + 28);
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_311(v47, 1);
  *v3 = v65;
  v3[1] = v64;
  v3[2] = v63;
  v3[3] = v15;
  v3[4] = v67;
  v3[5] = v66;
  v48 = OUTLINED_FUNCTION_482();
  outlined assign with take of Prompt.Rendering?(v48, v49);
  OUTLINED_FUNCTION_4_1();
}

void CompletePromptResponse.init(completion:)(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v6[136];

  OUTLINED_FUNCTION_331();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_145();
  outlined init with copy of DocumentEnvelope(a1, v2, type metadata accessor for PromptCompletion);
  PromptCompletionEnvelope.init(sealing:)();
  OUTLINED_FUNCTION_204_1(a1);
  OUTLINED_FUNCTION_328(a2, v6);
  OUTLINED_FUNCTION_97();
}

void PromptCompletionEnvelope.init(sealing:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  OUTLINED_FUNCTION_7_0();
  v5 = v4;
  v68 = v6;
  v7 = OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_473(*(_QWORD *)(v7 - 8));
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_5_1();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_238();
  v61 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Prompt.Rendering?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_145();
  v12 = v5[1];
  v13 = v5[2];
  v85 = *v5;
  v86 = v12;
  v87 = v13;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_40_0();
  v67 = ModelInformationEnvelope.init(sealing:)(&v85);
  v66 = v14;
  v65 = v15;
  OUTLINED_FUNCTION_580(v5[5]);
  v63 = v5[4];
  v69 = (uint64_t)v5;
  v16 = *(_QWORD *)(v5[3] + 16);
  v17 = MEMORY[0x24BEE4AF8];
  if (v16)
  {
    v59 = v0;
    v85 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_40_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v18 = 0;
    v3 = v85;
    v70 = v16;
    do
    {
      v74 = v18;
      OUTLINED_FUNCTION_531();
      v21 = (_QWORD *)(v19 + 32 * v20);
      v22 = *v21;
      v23 = v21[1];
      v24 = v21[2];
      v1 = v21[3];
      v25 = *(_QWORD *)(*v21 + 16);
      v77 = *v21;
      v78 = v1;
      v75 = v23;
      v76 = v24;
      if (v25)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_431();
        OUTLINED_FUNCTION_40_0();
        OUTLINED_FUNCTION_357();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v26 = v17;
        v27 = (uint64_t *)(v22 + 56);
        do
        {
          v29 = *(v27 - 3);
          v28 = *(v27 - 2);
          v30 = *(v27 - 1);
          v31 = *v27;
          OUTLINED_FUNCTION_40_0();
          v32 = OUTLINED_FUNCTION_617();
          outlined copy of Data?(v32, v33);
          v34 = *(_QWORD *)(v26 + 16);
          if (v34 >= *(_QWORD *)(v26 + 24) >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v27 += 4;
          *(_QWORD *)(v26 + 16) = v34 + 1;
          v35 = (_QWORD *)(v26 + 32 * v34);
          v35[4] = v29;
          v35[5] = v28;
          v35[6] = v30;
          v35[7] = v31;
          --v25;
        }
        while (v25);
        v73 = v26;
        v22 = v77;
        OUTLINED_FUNCTION_213();
        v17 = MEMORY[0x24BEE4AF8];
        v1 = v78;
        v23 = v75;
        v24 = v76;
      }
      else
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_431();
        v73 = v17;
      }
      v36 = *(_QWORD *)(v23 + 16);
      if (v36)
      {
        v71 = v3;
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_357();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v37 = v17;
        v38 = (uint64_t *)(v23 + 48);
        do
        {
          v39 = *(v38 - 1);
          v40 = v38[1];
          v81 = *v38;
          v83 = *(v38 - 2);
          v41 = v38[3];
          v79 = v38[2];
          v43 = v38[4];
          v42 = v38[5];
          OUTLINED_FUNCTION_40_0();
          OUTLINED_FUNCTION_77_0();
          OUTLINED_FUNCTION_88_0();
          outlined copy of Data?(v43, v42);
          v44 = *(_QWORD *)(v37 + 16);
          if (v44 >= *(_QWORD *)(v37 + 24) >> 1)
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          *(_QWORD *)(v37 + 16) = v44 + 1;
          v45 = (_QWORD *)(v37 + (v44 << 6));
          v45[4] = v83;
          v45[5] = v39;
          v45[6] = v81;
          v45[7] = v40;
          v45[8] = v79;
          v45[9] = v41;
          v38 += 8;
          v45[10] = v43;
          v45[11] = v42;
          --v36;
        }
        while (v36);
        v2 = v37;
        v23 = v75;
        OUTLINED_FUNCTION_39_0();
        v3 = v71;
        v17 = MEMORY[0x24BEE4AF8];
        v22 = v77;
        v1 = v78;
        v24 = v76;
      }
      else
      {
        v2 = v17;
      }
      if (v1 >= 3)
        v46 = v24;
      else
        v46 = 0;
      OUTLINED_FUNCTION_431();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_213();
      v47 = OUTLINED_FUNCTION_276_0();
      outlined consume of FinishReason(v47, v48);
      OUTLINED_FUNCTION_575();
      v16 = v70;
      if (v50)
      {
        OUTLINED_FUNCTION_493(v49);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v3 = v85;
      }
      v18 = v74 + 1;
      *(_QWORD *)(v3 + 16) = v22;
      v51 = (_QWORD *)(v3 + 32 * v23);
      v51[4] = v73;
      v51[5] = v2;
      v51[6] = v46;
      v51[7] = v1;
    }
    while (v74 + 1 != v70);
    v72 = v3;
    OUTLINED_FUNCTION_114_0();
    v0 = v59;
  }
  else
  {
    v72 = MEMORY[0x24BEE4AF8];
  }
  v52 = OUTLINED_FUNCTION_331();
  OUTLINED_FUNCTION_477(v69 + *(int *)(v52 + 28), v53, &demangling cache variable for type metadata for Prompt.Rendering?);
  OUTLINED_FUNCTION_5_0(v0);
  v54 = 0;
  v82 = 0;
  v84 = 0;
  v80 = 0;
  v55 = 0;
  OUTLINED_FUNCTION_597();
  v56 = 0;
  v57 = 0;
  if (v58 != 1)
  {
    OUTLINED_FUNCTION_240_0(v61, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 32));
    OUTLINED_FUNCTION_240_0(v60, v61, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 16));
    PromptRenderingEnvelope.init(sealing:)(v60, &v85);
    v82 = v87;
    v84 = v86;
    v55 = v89;
    v80 = v88;
    v16 = v90;
    v1 = v91;
    v2 = v92;
    v3 = v93;
    v56 = v94;
    v57 = v95;
    v54 = v85;
    OUTLINED_FUNCTION_184_1(*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8));
  }
  outlined destroy of Prompt.Turn.Segment(v69, type metadata accessor for PromptCompletion);
  *v68 = v67;
  v68[1] = v66;
  v68[2] = v65;
  v68[3] = v63;
  v68[4] = v64;
  v68[5] = v72;
  v68[6] = v54;
  v68[7] = v84;
  v68[8] = v82;
  v68[9] = v80;
  v68[10] = v55;
  v68[11] = v16;
  v68[12] = v1;
  v68[13] = v2;
  v68[14] = v3;
  v68[15] = v56;
  v68[16] = v57;
  OUTLINED_FUNCTION_4_1();
}

void CompletePromptResponse.init(tokens:)()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Class isa;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  id v35[19];

  OUTLINED_FUNCTION_7_0();
  v4 = v3;
  v33 = v5;
  v35[17] = *(id *)MEMORY[0x24BDAC8D0];
  v32 = OUTLINED_FUNCTION_331();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_145();
  if (one-time initialization token for inference != -1)
    swift_once();
  v7 = OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_189_1(v7, (uint64_t)static Log.inference);
  v8 = OUTLINED_FUNCTION_433();
  if (OUTLINED_FUNCTION_527(v8))
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_235_0();
    *(_WORD *)v9 = 0;
    OUTLINED_FUNCTION_404(&dword_248B08000, v0, v1, "Metadata like usage and finish reason will be bogus because a deprecated initializer is being used. Use init(completion:) instead.", v9);
    OUTLINED_FUNCTION_0_0();
  }

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration0D0VG_SSs5NeverOTg504_s15D116Generation22CompletePromptResponseV6tokensACSayAA0A0VG_tcfcSSAFcfu_33_2c83176e6c929c34cc0288687e3e762dAFSSTf3nnnpk_nTf1cn_n(v4);
  OUTLINED_FUNCTION_152();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v10 = BidirectionalCollection<>.joined(separator:)();
  v12 = v11;
  OUTLINED_FUNCTION_186();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Segment>);
  v13 = OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_594((__n128)xmmword_248BBF340);
  *(_OWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 32) = v10;
  *(_QWORD *)(v14 + 40) = v12;
  *(_OWORD *)(v14 + 48) = xmmword_248BBF000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ModelInformation.Asset>);
  v16 = OUTLINED_FUNCTION_16();
  *(_OWORD *)(v16 + 16) = v34;
  OUTLINED_FUNCTION_90();
  outlined copy of Data?(0, 0xF000000000000000);
  v17 = MEMORY[0x24BEE4AF8];
  Dictionary.init(dictionaryLiteral:)();
  v18 = (void *)objc_opt_self();
  OUTLINED_FUNCTION_640();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_213();
  v35[0] = 0;
  v20 = objc_msgSend(v18, sel_dataWithJSONObject_options_error_, isa, 0, v35, v32);

  if (!v20)
  {
    v31 = v35[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    __break(1u);
  }
  v21 = v35[0];
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0xE000000000000000;
  *(_OWORD *)(v16 + 48) = xmmword_248BC0350;
  *(_QWORD *)(v16 + 64) = v22;
  *(_QWORD *)(v16 + 72) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Candidate>);
  v25 = OUTLINED_FUNCTION_16();
  *(_OWORD *)(v25 + 16) = v34;
  *(_QWORD *)(v25 + 32) = v13;
  *(_QWORD *)(v25 + 40) = v17;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 56) = 0;
  OUTLINED_FUNCTION_592();
  v27 = (uint64_t)v2 + *(int *)(v26 + 28);
  v28 = OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_171_0(v27, v29, v30, v28);
  *v2 = v16;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = v25;
  v2[4] = 0;
  v2[5] = 0;
  PromptCompletionEnvelope.init(sealing:)();
  OUTLINED_FUNCTION_61();
  outlined consume of Data?(0, 0xF000000000000000);
  OUTLINED_FUNCTION_328(v33, v35);
  OUTLINED_FUNCTION_4_1();
}

void CompletePromptResponse.init(toolCalls:)()
{
  NSObject *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_97_0();
  v3 = v2;
  v5 = v4;
  v6 = OUTLINED_FUNCTION_331();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_60_1();
  if (one-time initialization token for inference != -1)
    swift_once();
  v8 = OUTLINED_FUNCTION_200();
  OUTLINED_FUNCTION_189_1(v8, (uint64_t)static Log.inference);
  v9 = OUTLINED_FUNCTION_433();
  if (os_log_type_enabled(v0, v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_235_0();
    *(_WORD *)v10 = 0;
    OUTLINED_FUNCTION_404(&dword_248B08000, v0, v9, "Metadata like usage and finish reason will be bogus because a deprecated initializer is being used. Use init(completion:) instead.", v10);
    OUTLINED_FUNCTION_0_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Candidate>);
  v11 = OUTLINED_FUNCTION_16();
  *(_OWORD *)(v11 + 16) = xmmword_248BBF340;
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + 32) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + 40) = v3;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  v13 = (uint64_t)v1 + *(int *)(v6 + 28);
  v14 = OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_171_0(v13, v15, v16, v14);
  *v1 = v12;
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = v11;
  v1[4] = 0;
  v1[5] = 0;
  PromptCompletionEnvelope.init(sealing:)();
  OUTLINED_FUNCTION_328(v5, &v17);
  OUTLINED_FUNCTION_138();
}

void CompletePromptResponse.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,Swift::UInt a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  Swift::UInt v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  OUTLINED_FUNCTION_490();
  a61 = v63;
  a62 = v64;
  OUTLINED_FUNCTION_328(&a33, v62);
  v65 = a36;
  v66 = a40;
  v71 = a39;
  OUTLINED_FUNCTION_90();
  outlined retain of PromptCompletionEnvelope();
  OUTLINED_FUNCTION_77_0();
  v67 = OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_693(v67, v68);
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_155_0(v65);
  OUTLINED_FUNCTION_308_0();
  OUTLINED_FUNCTION_11();
  v69 = OUTLINED_FUNCTION_506();
  specialized Array<A>.hash(into:)(v69, v70);
  OUTLINED_FUNCTION_46_0();
  if (v66)
  {
    OUTLINED_FUNCTION_96_0(1u);
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_72();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_638();
    outlined consume of PromptRenderingEnvelope?(v71, v66);
  }
  else
  {
    OUTLINED_FUNCTION_96_0(0);
  }
  outlined release of PromptCompletionEnvelope();
  OUTLINED_FUNCTION_325();
}

void static PromptCompletionEnvelope.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[12];

  OUTLINED_FUNCTION_7_0();
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v29 = *(_QWORD *)(v0 + 80);
  v30 = *(_QWORD *)(v0 + 88);
  v31 = *(_QWORD *)(v0 + 96);
  v32 = *(_QWORD *)(v0 + 104);
  v28 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 120);
  v24 = *(_QWORD *)(v0 + 72);
  v25 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v6 + 24);
  v8 = *(_QWORD *)(v6 + 32);
  v9 = *(_QWORD *)(v6 + 56);
  v19 = *(_QWORD *)(v6 + 64);
  v20 = *(_QWORD *)(v6 + 72);
  v21 = *(_QWORD *)(v6 + 80);
  v27 = *(_QWORD *)(v6 + 88);
  v22 = *(_QWORD *)(v6 + 96);
  v23 = *(_QWORD *)(v6 + 48);
  v33 = *(_QWORD *)(v6 + 104);
  v17 = *(_QWORD *)(v6 + 120);
  v18 = *(_QWORD *)(v6 + 112);
  v16 = *(_QWORD *)(v6 + 128);
  static ModelInformationEnvelope.== infix(_:_:)(*(_QWORD **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD **)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
  OUTLINED_FUNCTION_204_0();
  if ((v10 & 1) != 0 && v1 == v7 && v2 == v8)
  {
    v12 = OUTLINED_FUNCTION_511();
    if ((specialized static Array<A>.== infix(_:_:)(v12, v13) & 1) != 0)
    {
      if (v3)
      {
        if (v9)
        {
          v56[0] = v4;
          v56[1] = v3;
          v56[2] = v5;
          v56[3] = v24;
          v56[4] = v29;
          v56[5] = v30;
          v56[6] = v31;
          v56[7] = v32;
          v56[8] = v28;
          v56[9] = v26;
          v56[10] = v25;
          v34 = v23;
          v35 = v9;
          v36 = v19;
          v37 = v20;
          v38 = v21;
          v39 = v27;
          v40 = v22;
          v41 = v33;
          v42 = v18;
          v43 = v17;
          v44 = v16;
          outlined copy of PromptRenderingEnvelope?(v4, v3);
          v14 = OUTLINED_FUNCTION_260();
          outlined copy of PromptRenderingEnvelope?(v14, v15);
          static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)v56, (uint64_t)&v34);
          outlined consume of PromptRenderingEnvelope?(v23, v9);
          outlined consume of PromptRenderingEnvelope?(v4, v3);
          goto LABEL_13;
        }
      }
      else if (!v9)
      {
        goto LABEL_13;
      }
      v34 = v4;
      v35 = v3;
      v36 = v5;
      v37 = v24;
      v38 = v29;
      v39 = v30;
      v40 = v31;
      v41 = v32;
      v42 = v28;
      v43 = v26;
      v44 = v25;
      v45 = v23;
      v46 = v9;
      v47 = v19;
      v48 = v20;
      v49 = v21;
      v50 = v27;
      v51 = v22;
      v52 = v33;
      v53 = v18;
      v54 = v17;
      v55 = v16;
      outlined copy of PromptRenderingEnvelope?(v4, v3);
      outlined copy of PromptRenderingEnvelope?(v23, v9);
      outlined release of (PromptRenderingEnvelope?, PromptRenderingEnvelope?)(&v34);
    }
  }
LABEL_13:
  OUTLINED_FUNCTION_4_1();
}

uint64_t CompletePromptResponse.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x74656C706D6F635FLL && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t CompletePromptResponse.CodingKeys.stringValue.getter()
{
  return 0x74656C706D6F635FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptResponse.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CompletePromptResponse.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptResponse.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptResponse.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void CompletePromptResponse.encode(to:)(_QWORD *a1)
{
  const void *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BYTE v9[136];

  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptResponse.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  OUTLINED_FUNCTION_87_0(a1);
  lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_328(v9, v3);
  lazy protocol witness table accessor for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope();
  OUTLINED_FUNCTION_602();
  OUTLINED_FUNCTION_34_1((uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_157_1();
}

Swift::Int CompletePromptResponse.hashValue.getter()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[72];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[18];

  OUTLINED_FUNCTION_328(v31, v0);
  OUTLINED_FUNCTION_75_1();
  v1 = v31[0];
  v2 = v31[1];
  v3 = v31[2];
  v4 = v31[3];
  v6 = v31[4];
  v5 = v31[5];
  v7 = v31[7];
  v17 = v31[8];
  v18 = v31[6];
  v15 = v31[10];
  v16 = v31[9];
  v8 = v31[12];
  v9 = v31[13];
  v10 = v31[14];
  v13 = v31[15];
  v14 = v31[11];
  v12 = v31[16];
  OUTLINED_FUNCTION_90();
  outlined retain of PromptCompletionEnvelope();
  OUTLINED_FUNCTION_88_0();
  ModelInformationEnvelope.hash(into:)((uint64_t)v19, v1, v2, v3);
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_61();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  OUTLINED_FUNCTION_77_0();
  specialized Array<A>.hash(into:)((uint64_t)v19, v5);
  OUTLINED_FUNCTION_37_0();
  if (v7)
  {
    v20 = v18;
    v21 = v7;
    v22 = v17;
    v23 = v16;
    v24 = v15;
    v25 = v14;
    v26 = v8;
    v27 = v9;
    v28 = v10;
    v29 = v13;
    v30 = v12;
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_88_0();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v19);
    OUTLINED_FUNCTION_269_0(v18);
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  outlined release of PromptCompletionEnvelope();
  return Hasher._finalize()();
}

void CompletePromptResponse.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_6_2();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptResponse.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_140_1();
  lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys();
  OUTLINED_FUNCTION_622();
  OUTLINED_FUNCTION_129_0();
  if (!v0)
  {
    lazy protocol witness table accessor for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    OUTLINED_FUNCTION_183_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    OUTLINED_FUNCTION_328(v3, &v8);
  }
  OUTLINED_FUNCTION_414();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptResponse()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[72];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD __dst[17];

  memcpy(__dst, v0, sizeof(__dst));
  Hasher.init(_seed:)();
  v1 = __dst[0];
  v2 = __dst[1];
  v3 = __dst[2];
  v4 = __dst[3];
  v6 = __dst[4];
  v5 = __dst[5];
  v7 = __dst[7];
  v17 = __dst[8];
  v18 = __dst[6];
  v15 = __dst[10];
  v16 = __dst[9];
  v8 = __dst[12];
  v9 = __dst[13];
  v10 = __dst[14];
  v13 = __dst[15];
  v14 = __dst[11];
  v12 = __dst[16];
  swift_bridgeObjectRetain();
  outlined retain of PromptCompletionEnvelope();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)((uint64_t)v19, v1, v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v19, v5);
  swift_bridgeObjectRelease();
  if (v7)
  {
    v20 = v18;
    v21 = v7;
    v22 = v17;
    v23 = v16;
    v24 = v15;
    v25 = v14;
    v26 = v8;
    v27 = v9;
    v28 = v10;
    v29 = v13;
    v30 = v12;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v19);
    outlined consume of PromptRenderingEnvelope?(v18, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  outlined release of PromptCompletionEnvelope();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance CompletePromptResponse()
{
  CompletePromptResponse.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance CompletePromptResponse(_QWORD *a1)
{
  CompletePromptResponse.encode(to:)(a1);
}

void PromptCompletionStreamElementEnvelope.unseal()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = OUTLINED_FUNCTION_529(a1, a2, a3, a4, a5, a6, a7, a8, v16);
  PromptCompletionStreamElementEnvelope.Envelope.unseal()((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
  OUTLINED_FUNCTION_593();
}

void PromptCompletionStreamElementEnvelope.init(sealing:)(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __n128 v9;
  __n128 v10;
  _OWORD v11[3];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[24];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;

  OUTLINED_FUNCTION_532(a1);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
  OUTLINED_FUNCTION_667();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_240_0((uint64_t)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  OUTLINED_FUNCTION_398();
  v13 = v18;
  v14 = v17;
  v12 = v19;
  OUTLINED_FUNCTION_594(v20);
  v11[1] = v21;
  v11[0] = v22;
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v15);
  __swift_destroy_boxed_opaque_existential_0Tm(v2);
  v7 = v13;
  *v1 = v14;
  v1[1] = v7;
  v8 = v11[2];
  v1[2] = v12;
  v1[3] = v8;
  v9 = OUTLINED_FUNCTION_353();
  OUTLINED_FUNCTION_586(v9, v10);
  OUTLINED_FUNCTION_22_0();
}

#error "248B3B8BC: call analysis failed (funcsize=83)"

void CompletePromptResponseElement.hash(into:)()
{
  __asm { BR              X9 }
}

void sub_248B3BA0C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v35 = v5;
  v36 = v12;
  v13 = v7;
  v33 = v11;
  v14 = v4;
  v30 = v0;
  v15 = v1;
  v16 = v2;
  v38 = v3;
  Hasher._combine(_:)(0);
  v28 = v10;
  v17 = v8;
  v26 = v15;
  v27 = v8;
  v18 = v14;
  v25 = v14;
  v19 = v6;
  v20 = v10;
  v21 = v35;
  v22 = v30;
  v23 = v33;
  OUTLINED_FUNCTION_231(v35, v43, v9, v16, v19, v30, v33, v24, v25, v26, v27, v13, v28, 0, v29, v30, v31, v32, v33,
    v34,
    v35,
    v36);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_77_0();
  ModelInformationEnvelope.hash(into:)(v38, v9, v37, v19);
  OUTLINED_FUNCTION_152();
  swift_bridgeObjectRelease();
  outlined consume of PromptCompletionStreamElementEnvelope.Envelope(v21, v43, v40, v37, v19, v22, v23, v16, v18, v41, v17, v42, v20, v39);
}

void static CompletePromptResponseElement.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[13];
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char v59;

  OUTLINED_FUNCTION_7_0();
  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 96);
  v13 = *(_BYTE *)(v0 + 104);
  v15 = *(_QWORD *)(v14 + 8);
  v30 = *(_QWORD *)(v14 + 16);
  v31 = *(_QWORD *)v14;
  v28 = *(_QWORD *)(v14 + 32);
  v29 = *(_QWORD *)(v14 + 24);
  v26 = *(_QWORD *)(v14 + 48);
  v27 = *(_QWORD *)(v14 + 40);
  v25 = *(_QWORD *)(v14 + 56);
  v16 = *(_QWORD *)(v14 + 64);
  v17 = *(_QWORD *)(v14 + 72);
  v19 = *(_QWORD *)(v14 + 80);
  v18 = *(_QWORD *)(v14 + 88);
  v20 = *(_QWORD *)(v14 + 96);
  v21 = *(_BYTE *)(v14 + 104);
  v43 = *(_QWORD *)v0;
  v44[0] = v43;
  v44[1] = v1;
  v44[2] = v2;
  v32 = v1;
  v41 = v3;
  v42 = v2;
  v44[3] = v3;
  v44[4] = v4;
  v39 = v5;
  v40 = v4;
  v44[5] = v5;
  v44[6] = v6;
  v37 = v7;
  v38 = v6;
  v44[7] = v7;
  v44[8] = v8;
  v35 = v9;
  v36 = v8;
  v44[9] = v9;
  v44[10] = v10;
  v33 = v11;
  v34 = v10;
  v44[11] = v11;
  v44[12] = v12;
  v45 = v13;
  v46 = v31;
  v47 = v15;
  v48 = v30;
  v49 = v29;
  v50 = v28;
  v51 = v27;
  v52 = v26;
  v53 = v25;
  v54 = v16;
  v55 = v17;
  v56 = v19;
  v57 = v18;
  v58 = v20;
  v59 = v21;
  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(v43, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(v31, v15, v30, v29, v28, v27, v26, v25, v16, v17, v19, v18, v20, v21);
  static PromptCompletionStreamElementEnvelope.Envelope.== infix(_:_:)(v44);
  OUTLINED_FUNCTION_626(v31, v15, v30, v29, v28, v27, v22, v23, v16, v17, v19, v18, v20, v24);
  outlined consume of PromptCompletionStreamElementEnvelope.Envelope(v43, v32, v42, v41, v40, v39, v38, v37, v36, v35, v34, v33, v12, v13);
  OUTLINED_FUNCTION_4_1();
}

uint64_t static PromptCompletionStreamElementEnvelope.== infix(_:_:)(void *a1, void *a2)
{
  char v3;
  _BYTE v5[112];
  _BYTE __dst[112];

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(a1, v5);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(a2, __dst);
  static PromptCompletionStreamElementEnvelope.Envelope.== infix(_:_:)(v5);
  return v3 & 1;
}

uint64_t CompletePromptResponseElement.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x746E6576655FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t CompletePromptResponseElement.CodingKeys.stringValue.getter()
{
  return 0x746E6576655FLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CompletePromptResponseElement.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = CompletePromptResponseElement.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CompletePromptResponseElement.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CompletePromptResponseElement.CodingKeys()
{
  lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void CompletePromptResponseElement.encode(to:)()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  _OWORD v8[14];

  OUTLINED_FUNCTION_6_2();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CompletePromptResponseElement.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  v8[4] = v0[1];
  v8[5] = v7;
  v8[3] = v0[2];
  v8[2] = v0[3];
  v8[1] = v0[4];
  v8[0] = v0[5];
  OUTLINED_FUNCTION_87_0(v3);
  lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_114_1();
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope();
  OUTLINED_FUNCTION_399();
  OUTLINED_FUNCTION_34_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_420();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int CompletePromptResponseElement.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  CompletePromptResponseElement.hash(into:)();
  return OUTLINED_FUNCTION_130_0();
}

void CompletePromptResponseElement.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_545();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CompletePromptResponseElement.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_140_1();
  lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys();
  OUTLINED_FUNCTION_129_0();
  if (!v1)
  {
    lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope();
    OUTLINED_FUNCTION_329();
    OUTLINED_FUNCTION_38_2();
    OUTLINED_FUNCTION_234_0();
  }
  __swift_destroy_boxed_opaque_existential_0Tm(v0);
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CompletePromptResponseElement()
{
  Hasher.init(_seed:)();
  CompletePromptResponseElement.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance CompletePromptResponseElement()
{
  CompletePromptResponseElement.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance CompletePromptResponseElement()
{
  CompletePromptResponseElement.encode(to:)();
}

#error "248B3C488: call analysis failed (funcsize=58)"

void static Constraints.== infix(_:_:)()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_7_0();
  v26 = v3;
  v4 = OUTLINED_FUNCTION_59_2();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_435();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_438();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_350();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v25 - v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Constraints, Constraints));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v13);
  v14 = OUTLINED_FUNCTION_287_0();
  outlined init with copy of DocumentEnvelope(v14, v15, type metadata accessor for Constraints);
  outlined init with copy of DocumentEnvelope(v26, (uint64_t)v0, type metadata accessor for Constraints);
  v16 = OUTLINED_FUNCTION_113_1();
  if (!(_DWORD)v16)
  {
    OUTLINED_FUNCTION_316_0(v16, v17, type metadata accessor for Constraints);
    if (!OUTLINED_FUNCTION_113_1())
    {
      OUTLINED_FUNCTION_397((uint64_t)v7, (uint64_t)v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
      static GenerationSchema.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v7, v4);
      v24 = ((uint64_t (*)(char *, uint64_t))v23)(v12, v4);
      OUTLINED_FUNCTION_303(v24, type metadata accessor for Constraints);
      goto LABEL_17;
    }
    v22 = OUTLINED_FUNCTION_34_1((uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    goto LABEL_14;
  }
  if ((_DWORD)v16 != 1)
  {
    OUTLINED_FUNCTION_641(v16, v17, type metadata accessor for Constraints);
    v19 = *v1;
    v18 = v1[1];
    if (OUTLINED_FUNCTION_113_1() == 2)
      goto LABEL_4;
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_315_0(v16, v17, type metadata accessor for Constraints);
  v19 = *v2;
  v18 = v2[1];
  if (OUTLINED_FUNCTION_113_1() != 1)
  {
LABEL_13:
    v22 = OUTLINED_FUNCTION_61();
LABEL_14:
    OUTLINED_FUNCTION_244_0(v22, &demangling cache variable for type metadata for (Constraints, Constraints));
    goto LABEL_17;
  }
LABEL_4:
  if (v19 == *v0 && v18 == v0[1])
  {
    v21 = OUTLINED_FUNCTION_18();
  }
  else
  {
    OUTLINED_FUNCTION_482();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_186();
    v21 = OUTLINED_FUNCTION_61();
  }
  OUTLINED_FUNCTION_303(v21, type metadata accessor for Constraints);
LABEL_17:
  OUTLINED_FUNCTION_565();
  OUTLINED_FUNCTION_4_1();
}

BOOL static Constraints.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void Constraints.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t Constraints.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x616D65686373 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x72616D6D617267 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x476C616974726170 && a2 == 0xEE0072616D6D6172)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t Constraints.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t Constraints.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x616D65686373;
  if (a1 == 1)
    return 0x72616D6D617267;
  return 0x476C616974726170;
}

void Constraints.SchemaCodingKeys.hash(into:)()
{
  Hasher._combine(_:)(0);
}

uint64_t Constraints.SchemaCodingKeys.stringValue.getter()
{
  return 12383;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Constraints.CodingKeys(char *a1, char *a2)
{
  return static Constraints.CodingKeys.== infix(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance Constraints.CodingKeys()
{
  unsigned __int8 *v0;

  StreamingRequest.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Constraints.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  Constraints.CodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Constraints.CodingKeys()
{
  char *v0;

  return Constraints.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Constraints.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = Constraints.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Constraints.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Constraints.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.CodingKeys()
{
  lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.CodingKeys()
{
  lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.GrammarCodingKeys()
{
  lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.GrammarCodingKeys()
{
  lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.PartialGrammarCodingKeys()
{
  lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.PartialGrammarCodingKeys()
{
  lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for CodingKey.init(stringValue:) in conformance Constraints.SchemaCodingKeys(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;

  StreamingRequest.CompletePromptCodingKeys.init(stringValue:)(a1, a2);
  *a3 = v4 & 1;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Constraints.SchemaCodingKeys()
{
  return Prompt.ToolCall.Function.Envelope.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Constraints.SchemaCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = protocol witness for static Equatable.== infix(_:_:) in conformance CachePolicy();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Constraints.SchemaCodingKeys()
{
  lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Constraints.SchemaCodingKeys()
{
  lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
  return CodingKey.debugDescription.getter();
}

void Constraints.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_6_2();
  v42 = v2;
  v39 = v1;
  v7 = v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.PartialGrammarCodingKeys>);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_132_1(v10, v29);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.GrammarCodingKeys>);
  v32 = *(_QWORD *)(v34 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_68_0();
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.SchemaCodingKeys>);
  OUTLINED_FUNCTION_167_1();
  MEMORY[0x24BDAC7A8](v12);
  v31 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_160_1();
  v33 = type metadata accessor for GenerationSchema();
  v30 = *(_QWORD *)(v33 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_445();
  type metadata accessor for Constraints(v15);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_118_1();
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Constraints.CodingKeys>);
  v40 = *(_QWORD *)(v17 - 8);
  v41 = v17;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_87_0(v7);
  lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentEnvelope(v39, v5, type metadata accessor for Constraints);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      OUTLINED_FUNCTION_552();
      OUTLINED_FUNCTION_28_0();
      OUTLINED_FUNCTION_312_0();
      KeyedEncodingContainer.encode(_:forKey:)();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_89_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
      v20 = OUTLINED_FUNCTION_517();
    }
    else
    {
      OUTLINED_FUNCTION_690();
      v27 = v36;
      v28 = v41;
      OUTLINED_FUNCTION_28_0();
      OUTLINED_FUNCTION_312_0();
      OUTLINED_FUNCTION_563();
      OUTLINED_FUNCTION_39_0();
      OUTLINED_FUNCTION_89_1(v27, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
      v20 = OUTLINED_FUNCTION_472();
      v21 = v28;
    }
  }
  else
  {
    v23 = v30;
    v24 = OUTLINED_FUNCTION_511();
    v25(v24);
    lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
    v26 = (uint64_t)v31;
    OUTLINED_FUNCTION_28_0();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_88_1(v26, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
    OUTLINED_FUNCTION_194_0(v4, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    v20 = OUTLINED_FUNCTION_172_1();
  }
  v22(v20, v21);
  OUTLINED_FUNCTION_588();
  OUTLINED_FUNCTION_2_4();
}

void Constraints.hashValue.getter()
{
  StreamingRequest.hashValue.getter();
}

void Constraints.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;

  OUTLINED_FUNCTION_6_2();
  v79 = v1;
  v6 = v5;
  v73 = v7;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.PartialGrammarCodingKeys>);
  v69 = *(_QWORD *)(v72 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_133_1(v9, v60);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.GrammarCodingKeys>);
  v68 = *(_QWORD *)(v71 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_132_1(v11, v60);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.SchemaCodingKeys>);
  v67 = *(_QWORD *)(v70 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  v74 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Constraints.CodingKeys>);
  v76 = *(_QWORD *)(v14 - 8);
  v77 = v14;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v15);
  v16 = OUTLINED_FUNCTION_134_1();
  v17 = type metadata accessor for Constraints(v16);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_438();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_374();
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v60 - v22;
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_278_0();
  v24 = v6[3];
  v78 = v6;
  __swift_project_boxed_opaque_existential_1(v6, v24);
  lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys();
  v25 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
    goto LABEL_2;
  v62 = v2;
  v63 = v4;
  v64 = v23;
  v65 = v3;
  v66 = v17;
  v79 = v0;
  v27 = KeyedDecodingContainer.allKeys.getter();
  v29 = *(_QWORD *)(v27 + 16);
  if (!v29)
  {
    v26 = (uint64_t)v78;
LABEL_11:
    v38 = v66;
    OUTLINED_FUNCTION_378();
    OUTLINED_FUNCTION_3();
    v40 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v40 = v38;
    KeyedDecodingContainer.codingPath.getter();
    v41 = OUTLINED_FUNCTION_46_2();
    OUTLINED_FUNCTION_100_1(v41, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    OUTLINED_FUNCTION_24_2();
    v42 = OUTLINED_FUNCTION_530();
    v43(v42);
    goto LABEL_12;
  }
  v61 = 0;
  v30 = *(unsigned __int8 *)(v27 + 32);
  OUTLINED_FUNCTION_368(1, v29, v27, v27 + 32, v28, (2 * v29) | 1);
  v32 = v31;
  v34 = v33;
  OUTLINED_FUNCTION_227();
  if (v32 != v34 >> 1)
  {
    v26 = (uint64_t)v78;
    goto LABEL_11;
  }
  if (!v30)
  {
    lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys();
    OUTLINED_FUNCTION_291_0();
    type metadata accessor for GenerationSchema();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
    v44 = (uint64_t)v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v26 = (uint64_t)v78;
    v45 = v76;
    OUTLINED_FUNCTION_147_1(v67);
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_34_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
    swift_storeEnumTagMultiPayload();
    v49 = v44;
LABEL_17:
    v59 = v65;
    OUTLINED_FUNCTION_340(v49, v65);
    OUTLINED_FUNCTION_340(v59, v73);
    goto LABEL_12;
  }
  if (v30 != 1)
  {
    OUTLINED_FUNCTION_690();
    OUTLINED_FUNCTION_291_0();
    v48 = OUTLINED_FUNCTION_548();
    v26 = (uint64_t)v78;
    v55 = v48;
    v57 = v56;
    OUTLINED_FUNCTION_147_1(v69);
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_34_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v76 + 8));
    v58 = v63;
    *v63 = v55;
    v58[1] = v57;
LABEL_16:
    swift_storeEnumTagMultiPayload();
    v49 = (uint64_t)v58;
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_552();
  v35 = v75;
  v36 = v61;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v36)
  {
    v47 = OUTLINED_FUNCTION_548();
    v26 = (uint64_t)v78;
    v50 = v47;
    v52 = v51;
    OUTLINED_FUNCTION_183_1(v35, *(uint64_t (**)(uint64_t, uint64_t))(v68 + 8));
    OUTLINED_FUNCTION_24_2();
    v53 = OUTLINED_FUNCTION_360();
    OUTLINED_FUNCTION_34_1(v53, v54);
    v58 = v62;
    *v62 = v50;
    v58[1] = v52;
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_24_2();
  v37 = OUTLINED_FUNCTION_360();
  OUTLINED_FUNCTION_34_1(v37, v46);
LABEL_2:
  v26 = (uint64_t)v78;
LABEL_12:
  __swift_destroy_boxed_opaque_existential_0Tm(v26);
  OUTLINED_FUNCTION_2_4();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Constraints()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void protocol witness for Decodable.init(from:) in conformance Constraints()
{
  Constraints.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance Constraints()
{
  Constraints.encode(to:)();
}

void RequestMetadata.invocationIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void RequestMetadata.invocationIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  OUTLINED_FUNCTION_395();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*RequestMetadata.invocationIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void RequestMetadata.functionIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void RequestMetadata.functionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  OUTLINED_FUNCTION_202_1();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*RequestMetadata.functionIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void RequestMetadata.clientRequestIdentifier.getter()
{
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_104();
}

void RequestMetadata.clientRequestIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  OUTLINED_FUNCTION_430();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*RequestMetadata.clientRequestIdentifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t RequestMetadata.userInfo.getter()
{
  return swift_bridgeObjectRetain();
}

void RequestMetadata.userInfo.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  OUTLINED_FUNCTION_104();
}

uint64_t (*RequestMetadata.userInfo.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void __swiftcall RequestMetadata.init(invocationIdentifier:functionIdentifier:clientRequestIdentifier:userInfo:)(TokenGeneration::RequestMetadata *__return_ptr retstr, Swift::String invocationIdentifier, Swift::String functionIdentifier, Swift::String_optional clientRequestIdentifier, Swift::OpaquePointer userInfo)
{
  retstr->invocationIdentifier = invocationIdentifier;
  retstr->functionIdentifier = functionIdentifier;
  retstr->clientRequestIdentifier = clientRequestIdentifier;
  retstr->userInfo = userInfo;
}

uint64_t RequestMetadata.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_7_0();
  v1 = *(_QWORD *)(v0 + 40);
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_576();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_72();
  String.hash(into:)();
  OUTLINED_FUNCTION_227();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_186();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  OUTLINED_FUNCTION_40_0();
  v2 = OUTLINED_FUNCTION_520();
  specialized Dictionary<>.hash(into:)(v2, v3);
  return swift_bridgeObjectRelease();
}

void static RequestMetadata.== infix(_:_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_7_0();
  v2 = v0[2];
  v4 = v0[3];
  v3 = v0[4];
  v5 = v0[5];
  v6 = v1[2];
  v7 = v1[3];
  v9 = v1[4];
  v8 = v1[5];
  v10 = *v0 == *v1 && v0[1] == v1[1];
  if (v10 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
  {
    v11 = v2 == v6 && v4 == v7;
    if (v11 || (OUTLINED_FUNCTION_659(), (OUTLINED_FUNCTION_24_0() & 1) != 0))
    {
      if (v5)
      {
        if (v8)
        {
          if (v3 == v9 && v5 == v8)
            goto LABEL_18;
          OUTLINED_FUNCTION_186_0();
          if ((OUTLINED_FUNCTION_24_0() & 1) != 0)
            goto LABEL_18;
        }
      }
      else if (!v8)
      {
LABEL_18:
        v13 = OUTLINED_FUNCTION_90_0();
        specialized static Dictionary<>.== infix(_:_:)(v13, v14);
        return;
      }
    }
  }
  OUTLINED_FUNCTION_4_1();
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  _QWORD *v23;
  char v25;
  int64_t v26;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v26 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_22;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v26)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v26)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v26)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_21:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v10);
    v19 = *v17;
    v18 = v17[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    v22 = v21;
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v23 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v20);
    if (*v23 == v19 && v23[1] == v18)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v26)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v26)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_34:
  __break(1u);
  return result;
}

Swift::Int RequestMetadata.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_83_1();
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_154();
  String.hash(into:)();
  OUTLINED_FUNCTION_199_0();
  if (v1)
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_186();
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  OUTLINED_FUNCTION_40_0();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v2);
  OUTLINED_FUNCTION_213();
  return OUTLINED_FUNCTION_130_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RequestMetadata()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t ModelInformationEnvelope.init(sealing:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v14 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v3 = v14;
    v4 = (unint64_t *)(v1 + 72);
    do
    {
      v5 = *(v4 - 5);
      v6 = *(v4 - 4);
      v7 = *(v4 - 2);
      v13 = *(v4 - 3);
      v8 = *(v4 - 1);
      v9 = *v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v8, v9);
      v10 = *(_QWORD *)(v14 + 16);
      if (v10 >= *(_QWORD *)(v14 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 += 6;
      *(_QWORD *)(v14 + 16) = v10 + 1;
      v11 = (_QWORD *)(v14 + 48 * v10);
      v11[4] = v5;
      v11[5] = v6;
      v11[6] = v13;
      v11[7] = v7;
      v11[8] = v8;
      v11[9] = v9;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t ModelInformationEnvelope.unseal()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v16 = a4;
    v17 = a2;
    v18 = a3;
    v20 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v5 = v20;
    v7 = (unint64_t *)(a1 + 72);
    do
    {
      v8 = *(v7 - 5);
      v9 = *(v7 - 4);
      v10 = *(v7 - 2);
      v19 = *(v7 - 3);
      v11 = *(v7 - 1);
      v12 = *v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of Data._Representation(v11, v12);
      v13 = *(_QWORD *)(v20 + 16);
      if (v13 >= *(_QWORD *)(v20 + 24) >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v7 += 6;
      *(_QWORD *)(v20 + 16) = v13 + 1;
      v14 = (_QWORD *)(v20 + 48 * v13);
      v14[4] = v8;
      v14[5] = v9;
      v14[6] = v19;
      v14[7] = v10;
      v14[8] = v11;
      v14[9] = v12;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    a2 = v17;
    a3 = v18;
    a4 = v16;
  }
  *a4 = v5;
  a4[1] = a2;
  a4[2] = a3;
  return swift_bridgeObjectRetain();
}

void PromptCompletionEnvelope.CandidateEnvelope.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;

  OUTLINED_FUNCTION_499();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_210_0();
  specialized Array<A>.hash(into:)();
  OUTLINED_FUNCTION_39_0();
  switch(v0)
  {
    case 0:
      v1 = 0;
      goto LABEL_7;
    case 1:
      v1 = 2;
      goto LABEL_7;
    case 2:
      v1 = 3;
LABEL_7:
      Hasher._combine(_:)(v1);
      OUTLINED_FUNCTION_22_0();
      return;
  }
  OUTLINED_FUNCTION_272();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_49_1();
  v2 = OUTLINED_FUNCTION_57_2();
  outlined consume of FinishReason(v2, v3);
}

void static PromptCompletionEnvelope.CandidateEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  char v12;
  char v13;

  specialized static Array<A>.== infix(_:_:)(a1, a5);
  if ((v12 & 1) != 0 && (specialized static Array<A>.== infix(_:_:)(), (v13 & 1) != 0))
    static FinishReasonEnvelope.== infix(_:_:)(a3, a4, a7, a8);
  else
    OUTLINED_FUNCTION_22_0();
}

uint64_t PromptCompletionEnvelope.CandidateEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x73746E656D676573 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6C6C61436C6F6F74 && a2 == 0xE900000000000073;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65526873696E6966 && a2 == 0xEC0000006E6F7361)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t PromptCompletionEnvelope.CandidateEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x73746E656D676573;
  if (a1 == 1)
    return 0x6C6C61436C6F6F74;
  return 0x65526873696E6966;
}

uint64_t PromptCompletionEnvelope.CandidateEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v15 = a3;
  v16 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.CandidateEnvelope.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = a2;
  v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptCompletionEnvelope.SegmentEnvelope]);
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.SegmentEnvelope] and conformance <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    v13 = v16;
    v17 = v15;
    v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolCallEnvelope]);
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [ToolCallEnvelope] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = a4;
    v18 = v13;
    v19 = 2;
    lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t PromptCompletionEnvelope.CandidateEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.CandidateEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptCompletionEnvelope.SegmentEnvelope]);
    v13 = 0;
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.SegmentEnvelope] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ToolCallEnvelope]);
    v13 = 1;
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [ToolCallEnvelope] and conformance <A> [A]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v13 = 2;
    lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v11;
    v10 = v12;
    outlined copy of FinishReason(v11, v12);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FinishReason(v9, v10);
  }
  return v7;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  char *v0;

  return PromptCompletionEnvelope.CandidateEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionEnvelope.CandidateEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEnvelope.CandidateEnvelope()
{
  PromptCompletionEnvelope.CandidateEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionEnvelope.CandidateEnvelope()
{
  PromptCompletionEnvelope.CandidateEnvelope.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.CandidateEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))PromptCompletionEnvelope.CandidateEnvelope.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionEnvelope.CandidateEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = PromptCompletionEnvelope.CandidateEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionEnvelope.CandidateEnvelope(_QWORD *a1)
{
  uint64_t *v1;

  return PromptCompletionEnvelope.CandidateEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static PromptCompletionEnvelope.CandidateEnvelope.== infix(_:_:));
}

uint64_t PromptCompletionEnvelope.SegmentEnvelope.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;

  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_618();
  OUTLINED_FUNCTION_481();
  PromptCompletionEnvelope.TextContentEnvelope.hash(into:)();
  OUTLINED_FUNCTION_39_0();
  v0 = OUTLINED_FUNCTION_57_2();
  return OUTLINED_FUNCTION_7_1(v0, v1);
}

void static PromptCompletionEnvelope.SegmentEnvelope.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  char v14;
  uint64_t v15;

  OUTLINED_FUNCTION_97_0();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v12 = v10 == v11 && v0 == v1;
  if (v12 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
  {
    OUTLINED_FUNCTION_509();
    if (!v12 & v13)
    {
      OUTLINED_FUNCTION_415();
      if (!v12 & v13)
        goto LABEL_14;
    }
    else
    {
      OUTLINED_FUNCTION_415();
      if (!(!v14 & v13))
      {
        OUTLINED_FUNCTION_88_0();
        OUTLINED_FUNCTION_618();
        OUTLINED_FUNCTION_189();
        outlined copy of Data?(v5, v3);
        outlined copy of Data?(v9, v7);
        outlined copy of Data?(v5, v3);
        v15 = OUTLINED_FUNCTION_57_2();
        MEMORY[0x2495A59A8](v15);
        OUTLINED_FUNCTION_375(v5);
        OUTLINED_FUNCTION_409();
        OUTLINED_FUNCTION_152();
        OUTLINED_FUNCTION_375(v5);
        OUTLINED_FUNCTION_112();
        OUTLINED_FUNCTION_409();
        goto LABEL_14;
      }
    }
    outlined copy of Data?(v9, v7);
    outlined copy of Data?(v5, v3);
    OUTLINED_FUNCTION_409();
    OUTLINED_FUNCTION_375(v5);
  }
LABEL_14:
  OUTLINED_FUNCTION_138();
}

uint64_t PromptCompletionEnvelope.SegmentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t PromptCompletionEnvelope.SegmentEnvelope.CodingKeys.stringValue.getter()
{
  return 1954047348;
}

uint64_t PromptCompletionEnvelope.SegmentEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v17 = a4;
  v18 = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys>);
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.SegmentEnvelope.CodingKeys>);
  v19 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  swift_bridgeObjectRetain();
  v15 = v17;
  v14 = v18;
  outlined copy of Data?(v17, v18);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v21 = a2;
  v22 = a3;
  v23 = v15;
  v24 = v14;
  lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v11);
  swift_bridgeObjectRelease();
  return outlined consume of Data?(v15, v14);
}

Swift::Int PromptCompletionEnvelope.SegmentEnvelope.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  outlined copy of Data?(a3, a4);
  PromptCompletionEnvelope.TextContentEnvelope.hash(into:)();
  swift_bridgeObjectRelease();
  outlined consume of Data?(a3, a4);
  return Hasher._finalize()();
}

_QWORD *PromptCompletionEnvelope.SegmentEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys>);
  v2 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.SegmentEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  v10 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
    goto LABEL_8;
  v27 = v2;
  v11 = v29;
  v31 = v6;
  v12 = KeyedDecodingContainer.allKeys.getter();
  v13 = *(_QWORD *)(v12 + 16);
  v28 = a1;
  if (!v13)
  {
    v18 = v5;
LABEL_7:
    v19 = v31;
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v22 = &unk_2519D0EC0;
    v9 = v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
    a1 = v28;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    return v9;
  }
  specialized ArraySlice.subscript.getter(1, v13, v12, v12 + 32, 0, (2 * v13) | 1);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  if (v15 != v17 >> 1)
  {
    v18 = v5;
    goto LABEL_7;
  }
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24 = v31;
  v25 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v11);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  v9 = v30;
  __swift_destroy_boxed_opaque_existential_0Tm(v25);
  return v9;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionEnvelope.SegmentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEnvelope.SegmentEnvelope()
{
  uint64_t v0;

  return PromptCompletionEnvelope.SegmentEnvelope.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionEnvelope.SegmentEnvelope()
{
  return PromptCompletionEnvelope.SegmentEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.SegmentEnvelope()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  outlined copy of Data?(v1, v2);
  PromptCompletionEnvelope.TextContentEnvelope.hash(into:)();
  swift_bridgeObjectRelease();
  outlined consume of Data?(v1, v2);
  return Hasher._finalize()();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance PromptCompletionEnvelope.SegmentEnvelope@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = PromptCompletionEnvelope.SegmentEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionEnvelope.SegmentEnvelope(_QWORD *a1)
{
  uint64_t v1;

  return PromptCompletionEnvelope.SegmentEnvelope.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.SegmentEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static PromptCompletionEnvelope.SegmentEnvelope.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

void PromptCompletionEnvelope.TextContentEnvelope.hash(into:)()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;

  OUTLINED_FUNCTION_499();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_203_1();
  OUTLINED_FUNCTION_39_0();
  if (v0 >> 60 == 15)
  {
    OUTLINED_FUNCTION_66_0();
    OUTLINED_FUNCTION_22_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_310_0();
    OUTLINED_FUNCTION_213_1();
    v1 = OUTLINED_FUNCTION_57_2();
    OUTLINED_FUNCTION_7_1(v1, v2);
  }
}

void static PromptCompletionEnvelope.TextContentEnvelope.== infix(_:_:)()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_274_0();
  v6 = v6 && v4 == v5;
  if (v6 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v7 & 1) != 0))
  {
    if (v2 >> 60 == 15)
    {
      OUTLINED_FUNCTION_509();
      if (!v6 & v8)
        goto LABEL_13;
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_509();
    if (!v6 & v8)
    {
LABEL_12:
      v9 = OUTLINED_FUNCTION_406();
      outlined consume of Data?(v9, v10);
      OUTLINED_FUNCTION_413(v1);
      goto LABEL_13;
    }
    v11 = OUTLINED_FUNCTION_406();
    MEMORY[0x2495A59A8](v11);
    outlined consume of Data?(v1, v0);
    outlined consume of Data?(v3, v2);
  }
LABEL_13:
  OUTLINED_FUNCTION_22_0();
}

uint64_t PromptCompletionEnvelope.TextContentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t PromptCompletionEnvelope.TextContentEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6F666E4972657375;
  else
    return 0x65756C6176;
}

uint64_t PromptCompletionEnvelope.TextContentEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v12 = a4;
  v13 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.TextContentEnvelope.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v14 = v12;
    v15 = v13;
    v16 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void PromptCompletionEnvelope.CandidateEnvelope.hashValue.getter()
{
  void (*v0)(void);

  OUTLINED_FUNCTION_500();
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_481();
  v0();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

uint64_t PromptCompletionEnvelope.TextContentEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[16];
  uint64_t v12;
  unint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.TextContentEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v12) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v12;
    v10 = v13;
    outlined copy of Data?(v12, v13);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    outlined copy of Data?(v9, v10);
    outlined consume of Data?(v9, v10);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    outlined consume of Data?(v9, v10);
  }
  return v7;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys()
{
  char *v0;

  return PromptCompletionEnvelope.TextContentEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionEnvelope.TextContentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance PromptCompletionEnvelope.TextContentEnvelope()
{
  PromptCompletionEnvelope.CandidateEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionEnvelope.TextContentEnvelope()
{
  PromptCompletionEnvelope.TextContentEnvelope.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.TextContentEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, (void (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))PromptCompletionEnvelope.TextContentEnvelope.hash(into:));
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope.CandidateEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[72];

  v6 = *v4;
  v7 = v4[1];
  v9 = v4[2];
  v8 = v4[3];
  OUTLINED_FUNCTION_303_0();
  a4(v10, v6, v7, v9, v8);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionEnvelope.TextContentEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = PromptCompletionEnvelope.TextContentEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionEnvelope.TextContentEnvelope(_QWORD *a1)
{
  uint64_t *v1;

  return PromptCompletionEnvelope.TextContentEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.TextContentEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static PromptCompletionEnvelope.TextContentEnvelope.== infix(_:_:));
}

void PromptCompletionEnvelope.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1[3];
  v4 = v1[5];
  v5 = v1[7];
  v8 = v1[6];
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_11();
  v6 = OUTLINED_FUNCTION_506();
  OUTLINED_FUNCTION_693(v6, v7);
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_155_0(v3);
  OUTLINED_FUNCTION_308_0();
  OUTLINED_FUNCTION_88_0();
  specialized Array<A>.hash(into:)(a1, v4);
  OUTLINED_FUNCTION_112();
  if (v5)
  {
    OUTLINED_FUNCTION_96_0(1u);
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_638();
    outlined consume of PromptRenderingEnvelope?(v8, v5);
  }
  else
  {
    OUTLINED_FUNCTION_96_0(0);
  }
}

uint64_t static ModelInformationEnvelope.== infix(_:_:)(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  BOOL v10;

  if ((specialized static Array<A>.== infix(_:_:)(a1, a4) & 1) != 0)
  {
    if (a3)
    {
      if (a6)
      {
        v10 = a2 == a5 && a3 == a6;
        if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          return 1;
      }
    }
    else if (!a6)
    {
      return 1;
    }
  }
  return 0;
}

BOOL static UsageEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t PromptCompletionEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x666E496C65646F6DLL && a2 == 0xE90000000000006FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6567617375 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x74616469646E6163 && a2 == 0xEA00000000007365;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x64657265646E6572 && a2 == 0xEE0074706D6F7250)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t PromptCompletionEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248B3F9B0 + 4 * byte_248BC0378[a1]))(0x666E496C65646F6DLL, 0xE90000000000006FLL);
}

uint64_t sub_248B3F9B0()
{
  return 0x6567617375;
}

uint64_t sub_248B3F9C4()
{
  return 0x74616469646E6163;
}

uint64_t sub_248B3F9E0()
{
  return 0x64657265646E6572;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return PromptCompletionEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void PromptCompletionEnvelope.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  OUTLINED_FUNCTION_6_2();
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionEnvelope.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_145();
  OUTLINED_FUNCTION_161_1();
  OUTLINED_FUNCTION_467(*(_QWORD *)(v0 + 112));
  OUTLINED_FUNCTION_87_0(v5);
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
  OUTLINED_FUNCTION_25_0();
  if (!v1)
  {
    OUTLINED_FUNCTION_449();
    lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_223();
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]);
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_665();
    OUTLINED_FUNCTION_531();
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    OUTLINED_FUNCTION_141_1();
  }
  OUTLINED_FUNCTION_89_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

Swift::Int PromptCompletionEnvelope.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[72];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  v7 = v0[7];
  v17 = v0[8];
  v18 = v0[6];
  v15 = v0[10];
  v16 = v0[9];
  v8 = v0[13];
  v13 = v0[12];
  v14 = v0[11];
  v9 = v0[14];
  v11 = v0[16];
  v12 = v0[15];
  OUTLINED_FUNCTION_75_1();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_72();
  ModelInformationEnvelope.hash(into:)((uint64_t)v19, v2, v1, v3);
  OUTLINED_FUNCTION_152();
  OUTLINED_FUNCTION_227();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  OUTLINED_FUNCTION_77_0();
  specialized Array<A>.hash(into:)((uint64_t)v19, v5);
  OUTLINED_FUNCTION_37_0();
  if (v7)
  {
    v20 = v18;
    v21 = v7;
    v22 = v17;
    v23 = v16;
    v24 = v15;
    v25 = v14;
    v26 = v13;
    v27 = v8;
    v28 = v9;
    v29 = v12;
    v30 = v11;
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_11();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_40_0();
    OUTLINED_FUNCTION_88_0();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v19);
    OUTLINED_FUNCTION_269_0(v18);
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  return Hasher._finalize()();
}

void PromptCompletionEnvelope.init(from:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[17];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  OUTLINED_FUNCTION_6_2();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionEnvelope.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_285_0();
  OUTLINED_FUNCTION_326();
  lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys();
  OUTLINED_FUNCTION_412();
  if (v0)
  {
    OUTLINED_FUNCTION_601();
  }
  else
  {
    v24 = v2;
    LOBYTE(v25[0]) = 0;
    lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
    OUTLINED_FUNCTION_212_1();
    v4 = v28;
    LOBYTE(v25[0]) = 1;
    v5 = lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_212_1();
    if (v5)
    {
      OUTLINED_FUNCTION_150_0();
      OUTLINED_FUNCTION_199_0();
      OUTLINED_FUNCTION_152();
      v6 = 0;
    }
    else
    {
      v23 = v26;
      v21 = v27;
      v22 = v26;
      OUTLINED_FUNCTION_223();
      LOBYTE(v25[0]) = 2;
      lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]);
      OUTLINED_FUNCTION_212_1();
      v20 = v27;
      v7 = v26;
      v8 = lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_668();
      if (!v8)
      {
        OUTLINED_FUNCTION_150_0();
        v18 = v44;
        v19 = v43;
        v16 = v46;
        v17 = v45;
        v9 = v47;
        v14 = v49;
        v15 = v48;
        v12 = v51;
        v13 = v50;
        v10 = v53;
        v11 = v52;
        v25[0] = v23;
        v25[1] = v21;
        v25[2] = v4;
        v25[3] = v22;
        v25[4] = v20;
        v25[5] = v7;
        v25[6] = v43;
        v25[7] = v44;
        v25[8] = v45;
        v25[9] = v46;
        v25[10] = v47;
        v25[11] = v48;
        v25[12] = v49;
        v25[13] = v50;
        v25[14] = v51;
        v25[15] = v52;
        v25[16] = v53;
        outlined retain of PromptCompletionEnvelope();
        OUTLINED_FUNCTION_199_0();
        OUTLINED_FUNCTION_152();
        OUTLINED_FUNCTION_112();
        OUTLINED_FUNCTION_328(v24, v25);
        OUTLINED_FUNCTION_601();
        v26 = v23;
        v27 = v21;
        v28 = v4;
        v29 = v22;
        v30 = v20;
        v31 = v7;
        v32 = v19;
        v33 = v18;
        v34 = v17;
        v35 = v16;
        v36 = v9;
        v37 = v15;
        v38 = v14;
        v39 = v13;
        v40 = v12;
        v41 = v11;
        v42 = v10;
        outlined release of PromptCompletionEnvelope();
        goto LABEL_4;
      }
      OUTLINED_FUNCTION_150_0();
      OUTLINED_FUNCTION_199_0();
      OUTLINED_FUNCTION_152();
      OUTLINED_FUNCTION_112();
      v6 = 1;
    }
    OUTLINED_FUNCTION_601();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_152();
    if (v6)
      OUTLINED_FUNCTION_112();
  }
LABEL_4:
  OUTLINED_FUNCTION_2_4();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionEnvelope()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  uint64_t v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[72];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  v7 = v0[7];
  v17 = v0[8];
  v18 = v0[6];
  v15 = v0[10];
  v16 = v0[9];
  v8 = v0[13];
  v13 = v0[12];
  v14 = v0[11];
  v9 = v0[14];
  v11 = v0[16];
  v12 = v0[15];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)((uint64_t)v19, v2, v1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v19, v5);
  swift_bridgeObjectRelease();
  if (v7)
  {
    v20 = v18;
    v21 = v7;
    v22 = v17;
    v23 = v16;
    v24 = v15;
    v25 = v14;
    v26 = v13;
    v27 = v8;
    v28 = v9;
    v29 = v12;
    v30 = v11;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.hash(into:)((uint64_t)v19);
    outlined consume of PromptRenderingEnvelope?(v18, v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance PromptCompletionEnvelope()
{
  PromptCompletionEnvelope.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance PromptCompletionEnvelope()
{
  PromptCompletionEnvelope.encode(to:)();
}

uint64_t ModelInformationEnvelope.AssetEnvelope.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  if (*(_QWORD *)(v0 + 24))
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_72_0();
    OUTLINED_FUNCTION_186();
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  OUTLINED_FUNCTION_310_0();
  OUTLINED_FUNCTION_213_1();
  v1 = OUTLINED_FUNCTION_57_2();
  return OUTLINED_FUNCTION_109_1(v1, v2);
}

void static ModelInformationEnvelope.AssetEnvelope.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  OUTLINED_FUNCTION_120_1(a1);
  v5 = v5 && v3 == v4;
  if (v5 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
  {
    v6 = *(_QWORD *)(v2 + 24);
    v7 = *(_QWORD *)(v1 + 24);
    if (v6)
    {
      if (v7)
      {
        v8 = *(_QWORD *)(v2 + 16) == *(_QWORD *)(v1 + 16) && v6 == v7;
        if (v8 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
LABEL_13:
          OUTLINED_FUNCTION_423();
      }
    }
    else if (!v7)
    {
      goto LABEL_13;
    }
  }
  OUTLINED_FUNCTION_104();
}

uint64_t ModelInformationEnvelope.AssetEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t ModelInformationEnvelope.AssetEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x696669746E656469;
  if (a1 == 1)
    return 0x6E6F6973726576;
  return 0x617461646174656DLL;
}

uint64_t ModelInformationEnvelope.AssetEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModelInformationEnvelope.AssetEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_OWORD *)(v3 + 32);
    v10[15] = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ModelInformationEnvelope.AssetEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModelInformationEnvelope.AssetEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v23) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  v22 = v9;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v14 = v13;
  v20 = v12;
  v25 = 2;
  lazy protocol witness table accessor for type Data and conformance Data();
  swift_bridgeObjectRetain();
  v21 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v23;
  v16 = v24;
  swift_bridgeObjectRetain();
  v17 = v21;
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = outlined consume of Data._Representation(v15, v16);
  *a2 = v22;
  a2[1] = v11;
  a2[2] = v20;
  a2[3] = v17;
  a2[4] = v15;
  a2[5] = v16;
  return result;
}

void ModelInformationEnvelope.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  if (a4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t ModelInformationEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x737465737361 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ModelInformationEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65566D6574737973;
  else
    return 0x737465737361;
}

uint64_t ModelInformationEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v12 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ModelInformationEnvelope.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v15 = a2;
  v14 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ModelInformationEnvelope.AssetEnvelope]);
  lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [ModelInformationEnvelope.AssetEnvelope] and conformance <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    v13 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int ModelInformationEnvelope.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  ModelInformationEnvelope.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

uint64_t ModelInformationEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ModelInformationEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ModelInformationEnvelope.AssetEnvelope]);
    v9[7] = 0;
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [ModelInformationEnvelope.AssetEnvelope] and conformance <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = v10;
    v9[6] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  char *v0;

  return ModelInformationEnvelope.AssetEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ModelInformationEnvelope.AssetEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance ModelInformationEnvelope.AssetEnvelope()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ModelInformationEnvelope.AssetEnvelope()
{
  ModelInformationEnvelope.AssetEnvelope.hash(into:)();
  OUTLINED_FUNCTION_468();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformationEnvelope.AssetEnvelope()
{
  Hasher.init(_seed:)();
  ModelInformationEnvelope.AssetEnvelope.hash(into:)();
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance ModelInformationEnvelope.AssetEnvelope@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  ModelInformationEnvelope.AssetEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ModelInformationEnvelope.AssetEnvelope(_QWORD *a1)
{
  return ModelInformationEnvelope.AssetEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModelInformationEnvelope.AssetEnvelope(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  _OWORD v8[6];

  v2 = a1[1];
  v8[0] = *a1;
  v8[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v8[2] = a1[2];
  v8[3] = v3;
  v5 = a2[2];
  v8[4] = v4;
  v8[5] = v5;
  static ModelInformationEnvelope.AssetEnvelope.== infix(_:_:)((uint64_t)v8);
  return v6 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ModelInformationEnvelope.CodingKeys()
{
  char *v0;

  return ModelInformationEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ModelInformationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ModelInformationEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ModelInformationEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ModelInformationEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ModelInformationEnvelope()
{
  uint64_t *v0;

  return ModelInformationEnvelope.hashValue.getter(*v0, v0[1], v0[2]);
}

void protocol witness for Hashable.hash(into:) in conformance ModelInformationEnvelope(uint64_t a1)
{
  uint64_t *v1;

  ModelInformationEnvelope.hash(into:)(a1, *v1, v1[1], v1[2]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ModelInformationEnvelope()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  ModelInformationEnvelope.hash(into:)((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ModelInformationEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = ModelInformationEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ModelInformationEnvelope(_QWORD *a1)
{
  uint64_t *v1;

  return ModelInformationEnvelope.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ModelInformationEnvelope(uint64_t a1, uint64_t a2)
{
  return static ModelInformationEnvelope.== infix(_:_:)(*(_QWORD **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD **)a2, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

void PromptCompletionStreamElementEnvelope.Envelope.unseal()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  OUTLINED_FUNCTION_529(a1, a2, a3, a4, a5, a6, a7, a8, v8);
  __asm { BR              X10 }
}

uint64_t sub_248B41234(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 __dst,__int128 a21,__int128 a22,__int128 a23,__int128 a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;

  v48[3] = (uint64_t)&type metadata for PromptCompletionEventModelInformation;
  v48[4] = (uint64_t)&protocol witness table for PromptCompletionEventModelInformation;
  v49 = OUTLINED_FUNCTION_16();
  *v48 = v49;
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_402();
  result = ModelInformationEnvelope.unseal()(v50, v51, v52, v53);
  *(_QWORD *)(v49 + 16) = v55;
  *(_QWORD *)(v49 + 24) = v56;
  *(_QWORD *)(v49 + 32) = v57;
  *(_OWORD *)(v49 + 40) = v58;
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)(a1, v3, v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t static PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    v7 = (_QWORD *)a1[2];
    v8 = a1[3];
    v9 = a1[4];
    v10 = (_QWORD *)a2[2];
    v11 = a2[3];
    v12 = a2[4];
    if ((specialized static Array<A>.== infix(_:_:)(v7, v10) & 1) != 0)
    {
      if (v9)
      {
        if (v12)
        {
          v13 = v8 == v11 && v9 == v12;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            return 1;
        }
      }
      else if (!v12)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB3A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000248BCB2E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0xD000000000000012;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + 16);
    v12 = *(_QWORD *)(v3 + 32);
    v10[15] = 1;
    lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)((uint64_t)v5, v1, v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v17) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  v20 = 1;
  lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v17;
  v13 = v18;
  v14 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = v14;
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE __dst[88];

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  memcpy(__dst, (const void *)(v1 + 16), sizeof(__dst));
  outlined retain of PromptRenderingEnvelope((uint64_t)__dst);
  PromptRenderingEnvelope.hash(into:)(a1);
  return outlined release of PromptRenderingEnvelope((uint64_t)__dst);
}

uint64_t static PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  char v6;
  _BYTE v8[88];
  _BYTE __dst[88];

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), v6 = 0, (v5 & 1) != 0))
  {
    memcpy(__dst, a1 + 2, sizeof(__dst));
    memcpy(v8, a2 + 2, sizeof(v8));
    v6 = static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)__dst, (uint64_t)v8);
  }
  return v6 & 1;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB3A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E697265646E6572 && a2 == 0xE900000000000067)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E697265646E6572;
  else
    return 0xD000000000000012;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[8];
  _BYTE __dst[88];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __dst[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    memcpy(__dst, (const void *)(v3 + 16), sizeof(__dst));
    v10[7] = 1;
    lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.hashValue.getter()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE __dst[88];

  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  memcpy(__dst, (const void *)(v0 + 16), sizeof(__dst));
  outlined retain of PromptRenderingEnvelope((uint64_t)__dst);
  PromptRenderingEnvelope.hash(into:)((uint64_t)&v2);
  outlined release of PromptRenderingEnvelope((uint64_t)__dst);
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v32) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  v43 = 1;
  lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v30 = v34;
  v31 = v32;
  v26 = v35;
  v27 = v33;
  v22 = v38;
  v12 = v40;
  v28 = v39;
  v29 = v37;
  v23 = v41;
  v24 = v36;
  v25 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = v24;
  swift_bridgeObjectRelease();
  v16 = v26;
  swift_bridgeObjectRelease();
  v17 = v27;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v31;
  a2[3] = v17;
  a2[4] = v30;
  a2[5] = v16;
  v19 = v29;
  a2[6] = v15;
  a2[7] = v19;
  v20 = v28;
  a2[8] = v13;
  a2[9] = v20;
  v21 = v23;
  a2[10] = v14;
  a2[11] = v21;
  a2[12] = v25;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  char *v0;

  return PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  return PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope(uint64_t a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[72];

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[4];
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)((uint64_t)v5, v1, v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope(_QWORD *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return static PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.== infix(_:_:)(v5, v7) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  char *v0;

  return PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  const void *v0;
  _BYTE __dst[104];

  memcpy(__dst, v0, sizeof(__dst));
  return PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[104];

  memcpy(__dst, v1, sizeof(__dst));
  return PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE __dst[88];

  memcpy(__dst, (const void *)(v0 + 16), sizeof(__dst));
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined retain of PromptRenderingEnvelope((uint64_t)__dst);
  PromptRenderingEnvelope.hash(into:)((uint64_t)&v2);
  outlined release of PromptRenderingEnvelope((uint64_t)__dst);
  return Hasher._finalize()();
}

void *protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  uint64_t __src[13];

  result = (void *)PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.init(from:)(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x68uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[104];

  memcpy(__dst, v1, sizeof(__dst));
  return PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(void *__src, const void *a2)
{
  _QWORD v4[13];
  _QWORD __dst[13];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return static PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.== infix(_:_:)(v4, __dst) & 1;
}

void PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hash(into:)()
{
  Swift::UInt *v0;
  unint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v0[4]);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = v0[8];
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = v0[7];
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of Data?(v2, v1);
  }
}

BOOL static PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  BOOL v7;
  char v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (a1[4] != a2[4])
        return 0;
      v9 = a1[5] == a2[5] && a1[6] == a2[6];
      if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
      {
        v12 = a1[7];
        v11 = a1[8];
        v14 = a2[7];
        v13 = a2[8];
        if (v11 >> 60 == 15)
        {
          if (v13 >> 60 == 15)
            return 1;
        }
        else if (v13 >> 60 != 15)
        {
          outlined copy of Data?(v12, v11);
          outlined copy of Data?(v14, v13);
          v15 = MEMORY[0x2495A59A8](v12, v11, v14, v13);
          outlined consume of Data?(v14, v13);
          outlined consume of Data?(v12, v11);
          return (v15 & 1) != 0;
        }
        outlined copy of Data?(v12, v11);
        outlined copy of Data?(v14, v13);
        outlined consume of Data?(v12, v11);
        outlined consume of Data?(v14, v13);
        return 0;
      }
    }
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  BOOL v6;
  char v8;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB3A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000248BCB3C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = a1 == 0x49746E656D676573 && a2 == 0xEC0000007865646ELL;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v6 = a1 == 0x746C654474786574 && a2 == 0xE900000000000061;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 4;
        else
          return 5;
      }
    }
  }
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_248B42B24 + 4 * byte_248BC0382[a1]))(0xD000000000000012, 0x8000000248BCB3A0);
}

uint64_t sub_248B42B24(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_248B42B3C()
{
  return 0x49746E656D676573;
}

uint64_t sub_248B42B5C()
{
  return 0x746C654474786574;
}

uint64_t sub_248B42B78()
{
  return 0x6F666E4972657375;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  char v11[16];
  _BYTE v12[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of Locale?(v3 + 56, (uint64_t)v12, &demangling cache variable for type metadata for Data?);
    outlined init with take of Locale?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for Data?);
    v10[15] = 4;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hash(into:)();
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v32) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    v30 = v9;
    LOBYTE(v32) = 1;
    swift_bridgeObjectRetain();
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v31 = v13;
    v28 = v12;
    v29 = v11;
    LOBYTE(v32) = 2;
    swift_bridgeObjectRetain();
    v27 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v32) = 3;
    v25 = KeyedDecodingContainer.decode(_:forKey:)();
    v34 = 4;
    v15 = v14;
    lazy protocol witness table accessor for type Data and conformance Data();
    v26 = v15;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v16 = v29;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v32;
    v18 = v33;
    outlined copy of Data?(v32, v33);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    v19 = v16;
    v20 = v31;
    swift_bridgeObjectRetain();
    v21 = v26;
    swift_bridgeObjectRetain();
    outlined copy of Data?(v17, v18);
    outlined consume of Data?(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = outlined consume of Data?(v17, v18);
    *a2 = v30;
    a2[1] = v19;
    a2[2] = v28;
    a2[3] = v20;
    v23 = v25;
    a2[4] = v27;
    a2[5] = v23;
    a2[6] = v21;
    a2[7] = v17;
    a2[8] = v18;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  const void *v0;
  _BYTE __dst[72];

  memcpy(__dst, v0, sizeof(__dst));
  return PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  const void *v0;
  _BYTE __dst[72];

  memcpy(__dst, v0, sizeof(__dst));
  PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  const void *v0;
  _BYTE __dst[72];

  memcpy(__dst, v0, sizeof(__dst));
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.hash(into:)();
  return Hasher._finalize()();
}

void *protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  uint64_t __src[9];

  result = (void *)PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.init(from:)(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x48uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[72];

  memcpy(__dst, v1, sizeof(__dst));
  return PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope(void *__src, const void *a2)
{
  _QWORD v4[9];
  _QWORD __dst[9];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return static PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.== infix(_:_:)(v4, __dst);
}

void PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 88);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 80);
    Hasher._combine(_:)(1u);
    outlined copy of Data._Representation(v2, v1);
    Data.hash(into:)();
    outlined consume of Data?(v2, v1);
  }
}

BOOL static PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  char v5;
  _BOOL8 result;
  BOOL v7;
  char v8;
  BOOL v9;
  char v10;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      v9 = a1[4] == a2[4] && a1[5] == a2[5];
      if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
      {
        v11 = a1[6] == a2[6] && a1[7] == a2[7];
        if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v12 & 1) != 0))
        {
          v13 = a1[8] == a2[8] && a1[9] == a2[9];
          if (v13 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
          {
            v16 = a1[10];
            v15 = a1[11];
            v18 = a2[10];
            v17 = a2[11];
            if (v15 >> 60 == 15)
            {
              if (v17 >> 60 == 15)
                return 1;
            }
            else if (v17 >> 60 != 15)
            {
              outlined copy of Data?(v16, v15);
              outlined copy of Data?(v18, v17);
              v19 = MEMORY[0x2495A59A8](v16, v15, v18, v17);
              outlined consume of Data?(v18, v17);
              outlined consume of Data?(v16, v15);
              return (v19 & 1) != 0;
            }
            outlined copy of Data?(v16, v15);
            outlined copy of Data?(v18, v17);
            outlined consume of Data?(v16, v15);
            outlined consume of Data?(v18, v17);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  BOOL v6;
  char v8;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB3A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000248BCB3C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB3E0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = a1 == 0x6E6F6974636E7566 && a2 == 0xEC000000656D614ELL;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      v6 = a1 == 0x746E656D75677261 && a2 == 0xEE0061746C654473;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 5;
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 5;
        else
          return 6;
      }
    }
  }
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_248B4392C + 4 * byte_248BC0387[a1]))(0xD000000000000012, 0x8000000248BCB3A0);
}

uint64_t sub_248B4392C(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_248B43950()
{
  return 0x6E6F6974636E7566;
}

uint64_t sub_248B43970()
{
  return 0x746E656D75677261;
}

uint64_t sub_248B43994()
{
  return 0x6F666E4972657375;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  char v11[16];
  _BYTE v12[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of Locale?(v3 + 80, (uint64_t)v12, &demangling cache variable for type metadata for Data?);
    outlined init with take of Locale?((uint64_t)v12, (uint64_t)v11, &demangling cache variable for type metadata for Data?);
    v10[15] = 5;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hash(into:)();
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v42) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v42) = 1;
    v11 = v10;
    swift_bridgeObjectRetain();
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v41 = v11;
    v37 = v12;
    v38 = v9;
    LOBYTE(v42) = 2;
    v14 = v13;
    swift_bridgeObjectRetain();
    v15 = KeyedDecodingContainer.decode(_:forKey:)();
    v39 = v16;
    v40 = v14;
    v36 = v15;
    LOBYTE(v42) = 3;
    swift_bridgeObjectRetain();
    v35 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v42) = 4;
    v18 = v17;
    swift_bridgeObjectRetain();
    v33 = KeyedDecodingContainer.decode(_:forKey:)();
    v44 = 5;
    v20 = v19;
    lazy protocol witness table accessor for type Data and conformance Data();
    v34 = v20;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v21 = v42;
    v22 = v43;
    outlined copy of Data?(v42, v43);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    v23 = v40;
    swift_bridgeObjectRetain();
    v24 = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = v34;
    swift_bridgeObjectRetain();
    v32 = v21;
    outlined copy of Data?(v21, v22);
    v26 = v21;
    v27 = v22;
    outlined consume of Data?(v26, v22);
    v28 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v29 = v28;
    swift_bridgeObjectRelease();
    v30 = v32;
    result = outlined consume of Data?(v32, v27);
    *a2 = v38;
    a2[1] = v29;
    a2[2] = v37;
    a2[3] = v23;
    a2[4] = v36;
    a2[5] = v24;
    a2[6] = v35;
    a2[7] = v18;
    a2[8] = v33;
    a2[9] = v25;
    a2[10] = v30;
    a2[11] = v27;
  }
  return result;
}

void PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  Swift::UInt v2;
  uint64_t v3;

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 40);
  switch(v1)
  {
    case 0uLL:
      v2 = 0;
      goto LABEL_7;
    case 1uLL:
      v2 = 2;
      goto LABEL_7;
    case 2uLL:
      v2 = 3;
LABEL_7:
      Hasher._combine(_:)(v2);
      return;
  }
  v3 = *(_QWORD *)(v0 + 32);
  Hasher._combine(_:)(1uLL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined consume of FinishReason(v3, v1);
}

uint64_t static PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  char v5;
  uint64_t result;
  BOOL v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    v7 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      outlined init with take of FinishReasonEnvelope((_OWORD *)(a1 + 32), &v13);
      outlined init with take of FinishReasonEnvelope((_OWORD *)(a2 + 32), &v12);
      outlined init with take of FinishReasonEnvelope(&v13, &v14);
      v9 = *((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1) == 2)
      {
        outlined init with take of FinishReasonEnvelope(&v12, &v15);
        if (*((_QWORD *)&v15 + 1) != 2)
          return 0;
      }
      else
      {
        if (*((_QWORD *)&v14 + 1) != 1)
        {
          if (*((_QWORD *)&v14 + 1))
          {
            v10 = v14;
            outlined init with take of FinishReasonEnvelope(&v12, &v15);
            if (*((_QWORD *)&v15 + 1) >= 3uLL)
            {
              v11 = v10 == (_QWORD)v15 && v9 == *((_QWORD *)&v15 + 1);
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                return 1;
            }
          }
          else
          {
            outlined init with take of FinishReasonEnvelope(&v12, &v15);
            if (!*((_QWORD *)&v15 + 1))
              return 1;
          }
          return 0;
        }
        outlined init with take of FinishReasonEnvelope(&v12, &v15);
        if (*((_QWORD *)&v15 + 1) != 1)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB3A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000248BCB3C0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65526873696E6966 && a2 == 0xEC0000006E6F7361)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result;

  result = 0xD000000000000012;
  if (a1)
  {
    if (a1 == 1)
      return 0xD000000000000013;
    else
      return 0x65526873696E6966;
  }
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;
  __int128 v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of FinishReasonEnvelope((_OWORD *)(v3 + 32), &v12);
    outlined init with take of FinishReasonEnvelope(&v12, &v11);
    v10[15] = 2;
    lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  LOBYTE(v23) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  v22 = v9;
  LOBYTE(v23) = 1;
  swift_bridgeObjectRetain();
  v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v14 = v13;
  v20 = v12;
  v25 = 2;
  lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope();
  swift_bridgeObjectRetain();
  v21 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v15 = v23;
  v16 = v24;
  outlined copy of FinishReason(v23, v24);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v17 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = outlined consume of FinishReason(v15, v16);
  *a2 = v22;
  a2[1] = v11;
  a2[2] = v20;
  a2[3] = v17;
  a2[4] = v15;
  a2[5] = v16;
  return result;
}

void PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, Swift::UInt a5)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(a5);
}

BOOL static PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v13;
  _BOOL8 result;

  if (a1 == a5 && a2 == a6)
    return a3 == a7 && a4 == a8;
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v13 & 1) != 0)
    return a3 == a7 && a4 == a8;
  return result;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB3A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6567617375 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6567617375;
  else
    return 0xD000000000000012;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v12 = a4;
  v13 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v14 = v12;
    v15 = v13;
    v16 = 1;
    lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.hashValue.getter(uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    v9[16] = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[15] = 1;
    lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v7;
}

void PromptCompletionStreamElementEnvelope.Envelope.hash(into:)()
{
  void *v0;
  _BYTE __dst[8];
  _BYTE v2[312];

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, __dst);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, v2);
  __asm { BR              X10 }
}

uint64_t sub_248B44E24()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)(v0, v2, v3, v4);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void static PromptCompletionStreamElementEnvelope.Envelope.== infix(_:_:)(void *a1)
{
  _BYTE __dst[200];

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(a1, __dst);
  __asm { BR              X10 }
}

BOOL sub_248B450B0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  _QWORD v12[13];
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v14;
  v2 = v15;
  v3 = v16;
  v4 = v17;
  v5 = v18;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, v12);
  v10 = 0;
  if (!v13)
  {
    v6 = (_QWORD *)v12[2];
    v7 = v12[3];
    v8 = v12[4];
    v9 = v1 == v12[0] && v2 == v12[1];
    if ((v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (static ModelInformationEnvelope.== infix(_:_:)(v3, v4, v5, v6, v7, v8) & 1) != 0)
    {
      return 1;
    }
  }
  return v10;
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  BOOL v6;
  BOOL v7;
  char v9;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000248BCB2E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = a1 == 0x64657265646E6572 && a2 == 0xEE0074706D6F7250;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v6 = a1 == 0x746C654474786574 && a2 == 0xE900000000000061;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v7 = a1 == 0x6C6C61436C6F6F74 && a2 == 0xED000061746C6544;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0xD000000000000011 && a2 == 0x8000000248BCB300
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else if (a1 == 0x6567617375 && a2 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
          return 5;
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v9 & 1) != 0)
            return 5;
          else
            return 6;
        }
      }
    }
  }
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_248B45788 + 4 * byte_248BC0399[a1]))(0xD000000000000010, 0x8000000248BCB2E0);
}

uint64_t sub_248B45788()
{
  return 0x64657265646E6572;
}

uint64_t sub_248B457AC()
{
  return 0x746C654474786574;
}

uint64_t sub_248B457C8()
{
  return 0x6C6C61436C6F6F74;
}

uint64_t sub_248B457EC(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_248B45804()
{
  return 0x6567617375;
}

void PromptCompletionStreamElementEnvelope.Envelope.encode(to:)(_QWORD *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD v32[14];
  _BYTE v33[528];
  void *v34;

  v2 = v1;
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v2, v32);
  v26 = v32[1];
  v27 = v32[3];
  v14[9] = v32[6];
  v28 = v32[7];
  v16 = v32[8];
  v18 = v32[9];
  v19 = v32[5];
  v22 = v32[10];
  v20 = v32[11];
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys>);
  v23 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v21 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys>);
  v14[7] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys>);
  v17 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v14[8] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys>);
  v14[4] = *(_QWORD *)(v7 - 8);
  v14[5] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v14[3] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys>);
  v14[1] = *(_QWORD *)(v9 - 8);
  v14[2] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys>);
  MEMORY[0x24BDAC7A8](v10);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CodingKeys>);
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  v30 = v12;
  v13 = v34;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v13, v33);
  __asm { BR              X10 }
}

uint64_t sub_248B45AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_OWORD *)(v0 + 464);
  *(_OWORD *)(v0 + 560) = *(_OWORD *)(v0 + 448);
  *(_OWORD *)(v0 + 576) = v4;
  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v0 + 480);
  *(_BYTE *)(v0 + 224) = 0;
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys();
  v6 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 208);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v7 = *(_OWORD *)(v0 + 576);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 560);
  *(_OWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 592);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 192) + 8))(v6, v5);
}

void PromptCompletionStreamElementEnvelope.Envelope.hashValue.getter()
{
  void *v0;
  _BYTE __dst[8];
  _BYTE v2[312];

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, __dst);
  Hasher.init(_seed:)();
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, v2);
  __asm { BR              X10 }
}

Swift::Int sub_248B45F78()
{
  uint64_t v1[74];

  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)((uint64_t)v1, v1[25], v1[26], v1[27]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PromptCompletionStreamElementEnvelope.Envelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  _QWORD v30[5];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  char *v47;
  _QWORD *v48;
  char *v49;

  v42 = a2;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys>);
  v39 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v45 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys>);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v47 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys>);
  v37 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  *(_QWORD *)&v46 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys>);
  v34 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v44 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys>);
  v32 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v43 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.Envelope.CodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v48 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  v17 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    v30[4] = v11;
    v30[2] = v9;
    v30[1] = v8;
    v31 = v13;
    v49 = v15;
    v18 = KeyedDecodingContainer.allKeys.getter();
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v30[3] = 0;
      v20 = *(unsigned __int8 *)(v18 + 32);
      specialized ArraySlice.subscript.getter(1, v19, v18, v18 + 32, 0, (2 * v19) | 1);
      v22 = v21;
      v24 = v23;
      swift_bridgeObjectRelease();
      if (v22 == v24 >> 1)
        __asm { BR              X9 }
    }
    v25 = type metadata accessor for DecodingError();
    swift_allocError();
    v27 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v27 = &unk_2519D26D0;
    v28 = v49;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v12);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v48);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  const void *v0;
  _BYTE v2[96];

  memcpy(v2, v0, sizeof(v2));
  return PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  const void *v0;
  _BYTE v1[96];

  memcpy(v1, v0, sizeof(v1));
  PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  const void *v0;
  _BYTE __dst[96];

  memcpy(__dst, v0, sizeof(__dst));
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.hash(into:)();
  return Hasher._finalize()();
}

void *protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  uint64_t v5[12];

  result = (void *)PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.init(from:)(a1, v5);
  if (!v2)
    return memcpy(a2, v5, 0x60uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope(_QWORD *a1)
{
  const void *v1;
  _BYTE v4[96];

  memcpy(v4, v1, sizeof(v4));
  return PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope(void *__src, const void *a2)
{
  _QWORD v4[12];
  _QWORD __dst[12];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return static PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.== infix(_:_:)(v4, __dst);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  char *v0;

  return PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  Hasher.init(_seed:)();
  PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.hash(into:)();
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope(_QWORD *a1)
{
  return PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return static PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.== infix(_:_:)((uint64_t)v7, (uint64_t)v8) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  char *v0;

  return PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  uint64_t v0;

  return PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope(uint64_t a1)
{
  uint64_t v1;

  PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope(_QWORD *a1)
{
  uint64_t *v1;

  return PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.== infix(_:_:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  unsigned __int8 *v0;

  return PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.Envelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys();
  return CodingKey.debugDescription.getter();
}

void *protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope.Envelope@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[112];

  result = (void *)PromptCompletionStreamElementEnvelope.Envelope.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v5, a2);
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope.Envelope(_QWORD *a1)
{
  void *v1;
  uint64_t v3;

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v1, &v3);
  PromptCompletionStreamElementEnvelope.Envelope.encode(to:)(a1);
}

void protocol witness for Hashable.hashValue.getter in conformance PromptCompletionStreamElementEnvelope.Envelope()
{
  void *v0;
  uint64_t v1;

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, &v1);
  PromptCompletionStreamElementEnvelope.Envelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptCompletionStreamElementEnvelope.Envelope()
{
  void *v0;
  uint64_t v1;

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, &v1);
  PromptCompletionStreamElementEnvelope.Envelope.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope.Envelope()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_248B47538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)((uint64_t)&v4, v0, v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionStreamElementEnvelope.Envelope(void *a1, void *a2)
{
  char v3;
  _BYTE v5[112];
  _BYTE __dst[112];

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(a1, v5);
  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(a2, __dst);
  static PromptCompletionStreamElementEnvelope.Envelope.== infix(_:_:)(v5);
  return v3 & 1;
}

void PromptCompletionStreamElementEnvelope.hash(into:)()
{
  void *v0;
  _BYTE v1[112];

  outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v0, v1);
  outlined retain of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v1);
  PromptCompletionStreamElementEnvelope.Envelope.hash(into:)();
  outlined retain of PromptCompletionStreamElementEnvelope.Envelope((uint64_t)v1);
  OUTLINED_FUNCTION_593();
}

uint64_t PromptCompletionStreamElementEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65706F6C65766E65 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t PromptCompletionStreamElementEnvelope.CodingKeys.stringValue.getter()
{
  return 0x65706F6C65766E65;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptCompletionStreamElementEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptCompletionStreamElementEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptCompletionStreamElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptCompletionStreamElementEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void PromptCompletionStreamElementEnvelope.encode(to:)()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  _OWORD v8[14];

  OUTLINED_FUNCTION_6_2();
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptCompletionStreamElementEnvelope.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  v8[4] = v0[1];
  v8[5] = v7;
  v8[3] = v0[2];
  v8[2] = v0[3];
  v8[1] = v0[4];
  v8[0] = v0[5];
  OUTLINED_FUNCTION_87_0(v3);
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_114_1();
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope();
  OUTLINED_FUNCTION_399();
  OUTLINED_FUNCTION_34_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_420();
  OUTLINED_FUNCTION_2_4();
}

uint64_t PromptCompletionStreamElementEnvelope.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_490();
  v1 = *(unsigned __int8 *)(v0 + 104);
  v2 = OUTLINED_FUNCTION_75_1();
  return ((uint64_t (*)(uint64_t))((char *)sub_248B47B98 + 4 * byte_248BC03B7[v1]))(v2);
}

Swift::Int sub_248B47B98()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_344();
  OUTLINED_FUNCTION_524();
  OUTLINED_FUNCTION_304_0();
  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(v8, v9, v10, v11, v12, v13, v14, v28, v22, v23, v24, v1, v6, 0);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_475();
  ModelInformationEnvelope.hash(into:)(v15, v16, v17, v18);
  OUTLINED_FUNCTION_152();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_626(v0, v29, v2, v3, v4, v5, v19, v20, v7, v6, v27, v1, v26, v25);
  return Hasher._finalize()();
}

void PromptCompletionStreamElementEnvelope.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_545();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptCompletionStreamElementEnvelope.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_140_1();
  lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys();
  OUTLINED_FUNCTION_129_0();
  if (!v1)
  {
    lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope();
    OUTLINED_FUNCTION_329();
    OUTLINED_FUNCTION_38_2();
    OUTLINED_FUNCTION_234_0();
  }
  __swift_destroy_boxed_opaque_existential_0Tm(v0);
  OUTLINED_FUNCTION_279_0();
  OUTLINED_FUNCTION_2_4();
}

void protocol witness for Decodable.init(from:) in conformance PromptCompletionStreamElementEnvelope()
{
  PromptCompletionStreamElementEnvelope.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance PromptCompletionStreamElementEnvelope()
{
  PromptCompletionStreamElementEnvelope.encode(to:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptCompletionStreamElementEnvelope()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(v0 + 104);
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_248B4807C()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  Hasher._combine(_:)(0);
  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(v5, v16, v3, v6, v2, v4, v14, v15, v0, v12, v8, v1, v7, 0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ModelInformationEnvelope.hash(into:)((uint64_t)&v17, v3, v6, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PromptCompletionStreamElementEnvelope.Envelope(v5, v16, v3, v6, v2, v4, v14, v15, v0, v12, v13, v1, v11, v10);
  return Hasher._finalize()();
}

void ToolChoiceEnvelope.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  switch(v1)
  {
    case 0:
      v2 = 0;
      goto LABEL_7;
    case 1:
      v2 = 1;
      goto LABEL_7;
    case 2:
      v2 = 2;
LABEL_7:
      Hasher._combine(_:)(v2);
      OUTLINED_FUNCTION_97();
      return;
  }
  Hasher._combine(_:)(3uLL);
  OUTLINED_FUNCTION_346();
}

void static ToolChoiceEnvelope.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = a1[1];
  v3 = a2[1];
  if (v2)
  {
    if (v2 == 1)
    {
      if (v3 == 1)
        goto LABEL_12;
    }
    else if (v2 == 2)
    {
      if (v3 == 2)
        goto LABEL_12;
    }
    else if (v3 >= 3 && (*a1 != *a2 || v2 != v3))
    {
      OUTLINED_FUNCTION_372();
      OUTLINED_FUNCTION_24_0();
    }
  }
  else if (!v3)
  {
    goto LABEL_12;
  }
  v4 = OUTLINED_FUNCTION_312_0();
  outlined copy of FinishReason(v4, v5);
  OUTLINED_FUNCTION_674();
LABEL_12:
  v6 = OUTLINED_FUNCTION_261();
  outlined consume of FinishReason(v6, v7);
  v8 = OUTLINED_FUNCTION_312_0();
  outlined consume of FinishReason(v8, v9);
  OUTLINED_FUNCTION_22_0();
}

uint64_t ToolChoiceEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6974616D6F747561 && a2 == 0xE900000000000063;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6465726975716572 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t ToolChoiceEnvelope.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t ToolChoiceEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248B4888C + 4 * byte_248BC03C3[a1]))(1701736302, 0xE400000000000000);
}

uint64_t sub_248B4888C()
{
  return 0x6974616D6F747561;
}

uint64_t sub_248B488A8()
{
  return 0x6465726975716572;
}

uint64_t sub_248B488C0()
{
  return 0x6E6F6974636E7566;
}

uint64_t ToolChoiceEnvelope.NoneCodingKeys.init(stringValue:)()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.AutomaticCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolChoiceEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return ToolChoiceEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolChoiceEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ToolChoiceEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ToolChoiceEnvelope.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ToolChoiceEnvelope.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.FunctionCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.FunctionCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolChoiceEnvelope.NoneCodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ToolChoiceEnvelope.NoneCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.NoneCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.NoneCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolChoiceEnvelope.RequiredCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolChoiceEnvelope.RequiredCodingKeys()
{
  lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys();
  return CodingKey.debugDescription.getter();
}

void ToolChoiceEnvelope.encode(to:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_6_2();
  v38 = v2;
  OUTLINED_FUNCTION_454();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.FunctionCodingKeys>);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_133_1(v7, v28);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.RequiredCodingKeys>);
  v32 = *(_QWORD *)(v8 - 8);
  v33 = v8;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v9);
  v31 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.AutomaticCodingKeys>);
  v29 = *(_QWORD *)(v11 - 8);
  v30 = v11;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_176_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.NoneCodingKeys>);
  OUTLINED_FUNCTION_540();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_118_0();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolChoiceEnvelope.CodingKeys>);
  v36 = *(_QWORD *)(v14 - 8);
  v37 = v14;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_79_1();
  v16 = *v4;
  v17 = v4[1];
  v28 = v16;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v17)
  {
    if (v17 == 1)
    {
      OUTLINED_FUNCTION_558();
      OUTLINED_FUNCTION_28_0();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v0, v30);
      v23 = OUTLINED_FUNCTION_172_1();
      goto LABEL_8;
    }
    if (v17 != 2)
    {
      OUTLINED_FUNCTION_608();
      OUTLINED_FUNCTION_28_0();
      OUTLINED_FUNCTION_563();
      v26 = OUTLINED_FUNCTION_360();
      OUTLINED_FUNCTION_88_1(v26, v27);
      OUTLINED_FUNCTION_34_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v36 + 8));
      goto LABEL_10;
    }
    OUTLINED_FUNCTION_688();
    v18 = v31;
    v19 = v37;
    OUTLINED_FUNCTION_28_0();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v33);
  }
  else
  {
    lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys();
    v19 = v37;
    OUTLINED_FUNCTION_28_0();
    v20 = OUTLINED_FUNCTION_659();
    v22(v20, v21);
  }
  v23 = OUTLINED_FUNCTION_472();
  v25 = v19;
LABEL_8:
  v24(v23, v25);
LABEL_10:
  OUTLINED_FUNCTION_420();
  OUTLINED_FUNCTION_2_4();
}

void ToolChoiceEnvelope.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;

  v1 = *(_QWORD *)(v0 + 8);
  OUTLINED_FUNCTION_2_1();
  if (v1)
  {
    if (v1 == 1)
    {
      v2 = 1;
    }
    else
    {
      if (v1 != 2)
      {
        Hasher._combine(_:)(3uLL);
        OUTLINED_FUNCTION_72_0();
        goto LABEL_9;
      }
      v2 = 2;
    }
  }
  else
  {
    v2 = 0;
  }
  Hasher._combine(_:)(v2);
LABEL_9:
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

void ToolChoiceEnvelope.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  OUTLINED_FUNCTION_6_2();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.FunctionCodingKeys>);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_133_1(v6, v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.RequiredCodingKeys>);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_220_0(v8, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.AutomaticCodingKeys>);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_132_1(v10, v26);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.NoneCodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_79_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolChoiceEnvelope.CodingKeys>);
  OUTLINED_FUNCTION_167_1();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_118_1();
  OUTLINED_FUNCTION_326();
  lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys();
  OUTLINED_FUNCTION_412();
  if (!v1)
  {
    v13 = KeyedDecodingContainer.allKeys.getter();
    v15 = *(_QWORD *)(v13 + 16);
    if (v15)
    {
      v16 = *(unsigned __int8 *)(v13 + 32);
      OUTLINED_FUNCTION_368(1, v15, v13, v13 + 32, v14, (2 * v15) | 1);
      v18 = v17;
      v20 = v19;
      swift_bridgeObjectRelease();
      if (v18 == v20 >> 1)
        __asm { BR              X9 }
    }
    OUTLINED_FUNCTION_378();
    OUTLINED_FUNCTION_3();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v22 = &type metadata for ToolChoiceEnvelope;
    KeyedDecodingContainer.codingPath.getter();
    v23 = OUTLINED_FUNCTION_46_2();
    OUTLINED_FUNCTION_100_1(v23, *MEMORY[0x24BEE26D0]);
    swift_willThrow();
    swift_unknownObjectRelease();
    OUTLINED_FUNCTION_58_1(v2, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
  }
  __swift_destroy_boxed_opaque_existential_0Tm(v4);
  OUTLINED_FUNCTION_2_4();
}

void UsageEnvelope.hash(into:)(int a1, Swift::UInt a2, Swift::UInt a3)
{
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
}

uint64_t UsageEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000010 && a2 == 0x8000000248BCB2A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000248BCB2C0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t UsageEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000014;
  else
    return 0xD000000000000010;
}

uint64_t UsageEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<UsageEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int UsageEnvelope.hashValue.getter(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  return Hasher._finalize()();
}

uint64_t UsageEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v9[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<UsageEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v9[15] = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v9[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v7;
}

void FinishReasonEnvelope.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::UInt v3;

  switch(a3)
  {
    case 0:
      v3 = 0;
      goto LABEL_7;
    case 1:
      v3 = 2;
      goto LABEL_7;
    case 2:
      v3 = 3;
LABEL_7:
      Hasher._combine(_:)(v3);
      OUTLINED_FUNCTION_97();
      return;
  }
  OUTLINED_FUNCTION_272();
  OUTLINED_FUNCTION_372();
  OUTLINED_FUNCTION_346();
}

uint64_t static FinishReasonEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 0:
      if (!a4)
        return 1;
      return getEnumTag for Prompt.ToolCall.Kind();
    case 1:
      if (a4 == 1)
        return 1;
      return getEnumTag for Prompt.ToolCall.Kind();
    case 2:
      if (a4 == 2)
        return 1;
      return getEnumTag for Prompt.ToolCall.Kind();
  }
  if (a4 < 3)
    return getEnumTag for Prompt.ToolCall.Kind();
  if (a1 != a3 || a2 != a4)
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  return 1;
}

uint64_t FinishReasonEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000248BCB340
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000248BCB360
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000248BCB380
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5464656B6F766E69 && a2 == 0xEB000000006C6F6FLL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t FinishReasonEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_248B4988C + 4 * byte_248BC03CB[a1]))(0xD000000000000011, 0x8000000248BCB340);
}

uint64_t sub_248B4988C(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_248B498B4()
{
  return 0x5464656B6F766E69;
}

uint64_t FinishReasonEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v31 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.InvokedToolCodingKeys>);
  v29 = *(_QWORD *)(v5 - 8);
  v30 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v28 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys>);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v23 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.EncounteredStopSequenceCodingKeys>);
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.ProducedStopTokenCodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FinishReasonEnvelope.CodingKeys>);
  v32 = *(_QWORD *)(v14 - 8);
  v33 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(a3)
  {
    case 0:
      v34 = 0;
      lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys();
      v19 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v19);
    case 1:
      v36 = 2;
      lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
      v20 = v23;
      v19 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v25 + 8))(v20, v27);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v19);
    case 2:
      v37 = 3;
      lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys();
      v17 = v28;
      v18 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v30);
      break;
    default:
      v35 = 1;
      lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
      v18 = v33;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v22 = v26;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v22);
      break;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v18);
}

Swift::Int FinishReasonEnvelope.hashValue.getter(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;

  Hasher.init(_seed:)();
  if (a2)
  {
    if (a2 == 1)
    {
      v3 = 2;
    }
    else
    {
      if (a2 != 2)
      {
        Hasher._combine(_:)(1uLL);
        String.hash(into:)();
        return Hasher._finalize()();
      }
      v3 = 3;
    }
  }
  else
  {
    v3 = 0;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t FinishReasonEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v28[4];
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.InvokedToolCodingKeys>);
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v36 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys>);
  v30 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.EncounteredStopSequenceCodingKeys>);
  v31 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.ProducedStopTokenCodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FinishReasonEnvelope.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  v15 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v28[2] = v6;
    v28[3] = v9;
    v28[1] = v7;
    v40 = v11;
    v16 = v13;
    v17 = KeyedDecodingContainer.allKeys.getter();
    v18 = *(_QWORD *)(v17 + 16);
    if (v18)
    {
      v29 = v13;
      v19 = v10;
      v28[0] = 0;
      v20 = *(unsigned __int8 *)(v17 + 32);
      specialized ArraySlice.subscript.getter(1, v18, v17, v17 + 32, 0, (2 * v18) | 1);
      v22 = v21;
      v24 = v23;
      swift_bridgeObjectRelease();
      if (v22 == v24 >> 1)
        __asm { BR              X9 }
      v10 = v19;
      v16 = v29;
    }
    v11 = type metadata accessor for DecodingError();
    swift_allocError();
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v26 = &unk_2519CFCF8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v11);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v10);
  }
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v39);
  return v11;
}

void sub_248B4A030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v1 - 67) = 1;
  lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
  v2 = *(_QWORD *)(v1 - 128);
  v3 = v0;
  v4 = *(_QWORD *)(v1 - 176);
  v5 = *(_QWORD *)(v1 - 208);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v5)
  {
    swift_unknownObjectRelease();
    JUMPOUT(0x248B49FF8);
  }
  v6 = *(_QWORD *)(v1 - 144);
  KeyedDecodingContainer.decode(_:forKey:)();
  v7 = *(_QWORD *)(v1 - 88);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 160) + 8))(v2, v6);
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v3);
  JUMPOUT(0x248B4A260);
}

void sub_248B4A08C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v1 - 66) = 2;
  lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
  v2 = *(_QWORD *)(v1 - 136);
  v3 = *(_QWORD *)(v1 - 176);
  v4 = *(_QWORD *)(v1 - 208);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v4)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 8))(v2, *(_QWORD *)(v1 - 152));
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 88) + 8))(v3, v0);
    __swift_destroy_boxed_opaque_existential_0Tm(*(_QWORD *)(v1 - 96));
    JUMPOUT(0x248B4A004);
  }
  JUMPOUT(0x248B4A154);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(a1, a2, a3, 3uLL, 1uLL, 2uLL);
}

void protocol witness for Decodable.init(from:) in conformance ToolChoiceEnvelope()
{
  ToolChoiceEnvelope.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance ToolChoiceEnvelope()
{
  ToolChoiceEnvelope.encode(to:)();
}

void protocol witness for Hashable.hashValue.getter in conformance UsageEnvelope.CodingKeys()
{
  char *v0;

  RegisterDocumentRequest.CodingKeys.hashValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance UsageEnvelope.CodingKeys()
{
  char *v0;

  return UsageEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance UsageEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = UsageEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UsageEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UsageEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UsageEnvelope()
{
  Swift::UInt *v0;

  return UsageEnvelope.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance UsageEnvelope(int a1)
{
  Swift::UInt *v1;

  UsageEnvelope.hash(into:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for Decodable.init(from:) in conformance UsageEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = UsageEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance UsageEnvelope(_QWORD *a1)
{
  return UsageEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UsageEnvelope(uint64_t *a1, uint64_t *a2)
{
  return static UsageEnvelope.== infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FinishReasonEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return FinishReasonEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FinishReasonEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = FinishReasonEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.InvokedToolCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.InvokedToolCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys()
{
  lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FinishReasonEnvelope()
{
  uint64_t *v0;

  return FinishReasonEnvelope.hashValue.getter(*v0, v0[1]);
}

void protocol witness for Hashable.hash(into:) in conformance FinishReasonEnvelope(uint64_t a1)
{
  uint64_t *v1;

  FinishReasonEnvelope.hash(into:)(a1, *v1, v1[1]);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance FinishReasonEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(a1, a2, a3, 1uLL, 2uLL, 3uLL);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ToolChoiceEnvelope(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt a4, Swift::UInt a5, Swift::UInt a6)
{
  uint64_t v6;
  uint64_t v10;
  Swift::UInt v11;

  v10 = *(_QWORD *)(v6 + 8);
  OUTLINED_FUNCTION_303_0();
  if (v10)
  {
    if (v10 == 1)
    {
      v11 = a5;
    }
    else
    {
      if (v10 != 2)
      {
        Hasher._combine(_:)(a4);
        OUTLINED_FUNCTION_72_0();
        goto LABEL_9;
      }
      v11 = a6;
    }
  }
  else
  {
    v11 = 0;
  }
  Hasher._combine(_:)(v11);
LABEL_9:
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_5_2();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FinishReasonEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = FinishReasonEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FinishReasonEnvelope(_QWORD *a1)
{
  uint64_t *v1;

  return FinishReasonEnvelope.encode(to:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FinishReasonEnvelope(uint64_t *a1, uint64_t a2)
{
  return static FinishReasonEnvelope.== infix(_:_:)(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t RequestMetadataEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v2 = v1;
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v2 + 40))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v4 = *(_QWORD *)(v2 + 48);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t RequestMetadataEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v6;

  if (a1 == 0xD000000000000014 && a2 == 0x8000000248BCB1E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000248BCB200
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000248BCB220
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t RequestMetadataEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_248B4A900 + 4 * byte_248BC03D3[a1]))(0xD000000000000014, 0x8000000248BCB1E0);
}

unint64_t sub_248B4A900()
{
  return 0xD000000000000012;
}

uint64_t sub_248B4A91C()
{
  uint64_t v0;

  return v0 + 5;
}

uint64_t sub_248B4A934()
{
  return 0x6F666E4972657375;
}

uint64_t RequestMetadataEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestMetadataEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_QWORD *)(v3 + 48);
    v10[15] = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int RequestMetadataEnvelope.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  RequestMetadataEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t RequestMetadataEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestMetadataEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    v26 = v9;
    v30 = 1;
    swift_bridgeObjectRetain();
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v14 = v13;
    v23 = v12;
    v24 = a2;
    v29 = 2;
    swift_bridgeObjectRetain();
    v25 = v14;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v17 = v16;
    v22 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    v28 = 3;
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v18 = v27;
    swift_bridgeObjectRetain();
    v19 = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v21 = v24;
    *v24 = v26;
    v21[1] = v11;
    v21[2] = v23;
    v21[3] = v19;
    v21[4] = v22;
    v21[5] = v17;
    v21[6] = v18;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RequestMetadataEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return RequestMetadataEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RequestMetadataEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = RequestMetadataEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestMetadataEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestMetadataEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RequestMetadataEnvelope()
{
  return RequestMetadataEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RequestMetadataEnvelope(uint64_t a1)
{
  return RequestMetadataEnvelope.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RequestMetadataEnvelope()
{
  __int128 *v0;
  __int128 v1;
  _BYTE v3[72];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = v0[2];
  v7 = *((_QWORD *)v0 + 6);
  Hasher.init(_seed:)();
  RequestMetadataEnvelope.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance RequestMetadataEnvelope@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  RequestMetadataEnvelope.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RequestMetadataEnvelope(_QWORD *a1)
{
  return RequestMetadataEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RequestMetadataEnvelope(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[3];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  return static RequestMetadataEnvelope.== infix(_:_:)(v5, v7) & 1;
}

void PromptEnvelope.DelimiterEnvelope.hash(into:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_97_0();
  v4 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_342();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_60_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_79_1();
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_576();
  OUTLINED_FUNCTION_37_0();
  if (v0[3])
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_276_0();
    String.hash(into:)();
    OUTLINED_FUNCTION_152();
  }
  else
  {
    OUTLINED_FUNCTION_66_0();
  }
  Hasher._combine(_:)(v0[4]);
  Hasher._combine(_:)(v0[5]);
  v7 = OUTLINED_FUNCTION_542();
  outlined init with copy of Prompt.Rendering?((uint64_t)v0 + *(int *)(v7 + 32), v2, &demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_52_2(v2, 1, v4);
  if (v8)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    v9 = OUTLINED_FUNCTION_617();
    OUTLINED_FUNCTION_275(v9, v10, v11);
    OUTLINED_FUNCTION_62_0();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    OUTLINED_FUNCTION_385();
    OUTLINED_FUNCTION_89_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  OUTLINED_FUNCTION_138();
}

void static PromptEnvelope.DelimiterEnvelope.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  OUTLINED_FUNCTION_7_0();
  v6 = v5;
  v8 = v7;
  v9 = OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_60_1();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Locale?, Locale?));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_176_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_374();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_199_1();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_278_0();
  v16 = *v8 == *v6 && v8[1] == v6[1];
  if (!v16)
  {
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_204_0();
    if ((v17 & 1) == 0)
      goto LABEL_26;
  }
  v18 = v8[3];
  v19 = v6[3];
  if (v18)
  {
    if (!v19)
      goto LABEL_26;
    if (v8[2] != v6[2] || v18 != v19)
    {
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_204_0();
      if ((v21 & 1) == 0)
        goto LABEL_26;
    }
  }
  else if (v19)
  {
    goto LABEL_26;
  }
  if (v8[4] == v6[4] && v8[5] == v6[5])
  {
    v36 = OUTLINED_FUNCTION_542();
    OUTLINED_FUNCTION_272_0((uint64_t)v8 + *(int *)(v36 + 32), v2);
    OUTLINED_FUNCTION_272_0((uint64_t)v6 + *(int *)(v36 + 32), v3);
    v22 = v0 + *(int *)(v11 + 48);
    v23 = OUTLINED_FUNCTION_520();
    OUTLINED_FUNCTION_272_0(v23, v24);
    OUTLINED_FUNCTION_272_0(v3, v22);
    OUTLINED_FUNCTION_52_2(v0, 1, v9);
    if (v16)
    {
      OUTLINED_FUNCTION_301(v3);
      OUTLINED_FUNCTION_301(v2);
      v25 = OUTLINED_FUNCTION_52_2(v22, 1, v9);
      if (v16)
      {
        OUTLINED_FUNCTION_244_0(v25, &demangling cache variable for type metadata for Locale?);
        goto LABEL_26;
      }
    }
    else
    {
      v26 = OUTLINED_FUNCTION_312_0();
      outlined init with copy of Prompt.Rendering?(v26, v27, v28);
      OUTLINED_FUNCTION_52_2(v22, 1, v9);
      if (!v29)
      {
        OUTLINED_FUNCTION_546(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
        lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
        dispatch thunk of static Equatable.== infix(_:_:)();
        v32 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
        v32(v1, v9);
        OUTLINED_FUNCTION_301(v3);
        OUTLINED_FUNCTION_301(v2);
        v33 = OUTLINED_FUNCTION_482();
        ((void (*)(uint64_t))v32)(v33);
        v34 = OUTLINED_FUNCTION_195_0();
        outlined destroy of Locale?(v34, v35);
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_301(v3);
      OUTLINED_FUNCTION_301(v2);
      v30 = OUTLINED_FUNCTION_482();
      v25 = v31(v30);
    }
    OUTLINED_FUNCTION_244_0(v25, &demangling cache variable for type metadata for (Locale?, Locale?));
  }
LABEL_26:
  OUTLINED_FUNCTION_4_1();
}

uint64_t PromptEnvelope.DelimiterEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  char v10;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x65636E6174736E69 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x797469726F697270 && a2 == 0xE800000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v10 & 1) != 0)
            return 4;
          else
            return 5;
        }
      }
    }
  }
}

uint64_t PromptEnvelope.DelimiterEnvelope.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t PromptEnvelope.DelimiterEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248B4B6A8 + 4 * byte_248BC03D7[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_248B4B6A8()
{
  return 0x65636E6174736E69;
}

uint64_t sub_248B4B6C0()
{
  return 0x6E6F697469736F70;
}

uint64_t sub_248B4B6D8()
{
  return 0x797469726F697270;
}

uint64_t sub_248B4B6F0()
{
  return 0x656C61636F6CLL;
}

uint64_t PromptEnvelope.DelimiterEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.DelimiterEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
    v8[11] = 4;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

void PromptEnvelope.DelimiterEnvelope.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v20 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.DelimiterEnvelope.CodingKeys>);
  v7 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v22 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v22);
  }
  else
  {
    v14 = v7;
    v27 = 0;
    v15 = v21;
    *v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v12[1] = v16;
    v26 = 1;
    v12[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v12[3] = v17;
    v25 = 2;
    v12[4] = KeyedDecodingContainer.decode(_:forKey:)();
    v24 = 3;
    v12[5] = KeyedDecodingContainer.decode(_:forKey:)();
    type metadata accessor for Locale();
    v23 = 4;
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
    v18 = (uint64_t)v22;
    outlined init with take of Locale?((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 32), &demangling cache variable for type metadata for Locale?);
    outlined init with copy of DocumentEnvelope((uint64_t)v12, v20, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
    __swift_destroy_boxed_opaque_existential_0Tm(v18);
    outlined destroy of Prompt.Turn.Segment((uint64_t)v12, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return PromptEnvelope.DelimiterEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptEnvelope.DelimiterEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PromptEnvelope.DelimiterEnvelope.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope.DelimiterEnvelope()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope.DelimiterEnvelope()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void protocol witness for Decodable.init(from:) in conformance PromptEnvelope.DelimiterEnvelope(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PromptEnvelope.DelimiterEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope.DelimiterEnvelope(_QWORD *a1)
{
  return PromptEnvelope.DelimiterEnvelope.encode(to:)(a1);
}

void PromptEnvelope.AttachmentEnvelope.hash(into:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_308_0();
  outlined retain of PromptEnvelope.AttachmentEnvelope(v0);
  OUTLINED_FUNCTION_210_0();
  Data.hash(into:)();
  outlined release of PromptEnvelope.AttachmentEnvelope(v0);
  Hasher._combine(_:)(*(_QWORD *)(v0 + 24));
  Hasher._combine(_:)(*(_QWORD *)(v0 + 32));
  OUTLINED_FUNCTION_22_0();
}

void static PromptEnvelope.AttachmentEnvelope.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*a1 == *a2)
  {
    OUTLINED_FUNCTION_54_1();
    outlined retain of PromptEnvelope.AttachmentEnvelope(v4);
    outlined retain of PromptEnvelope.AttachmentEnvelope(v2);
    OUTLINED_FUNCTION_481();
    MEMORY[0x2495A59A8]();
    outlined release of PromptEnvelope.AttachmentEnvelope(v2);
    outlined release of PromptEnvelope.AttachmentEnvelope(v3);
  }
  OUTLINED_FUNCTION_22_0();
}

uint64_t PromptEnvelope.AttachmentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t PromptEnvelope.AttachmentEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x746E65746E6F63;
  if (a1 == 1)
    return 0x6E6F697469736F70;
  return 0x797469726F697270;
}

uint64_t PromptEnvelope.AttachmentEnvelope.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  char v11[24];
  __int128 v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.AttachmentEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of PromptEnvelope.AttachmentContentEnvelope(v3, (uint64_t)&v12);
  outlined init with take of PromptEnvelope.AttachmentContentEnvelope(&v12, (uint64_t)v11);
  v10[15] = 0;
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptEnvelope.AttachmentEnvelope.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  Hasher.init(_seed:)();
  v1 = *v0;
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined retain of PromptEnvelope.AttachmentEnvelope((uint64_t)v0);
  Data.hash(into:)();
  outlined release of PromptEnvelope.AttachmentEnvelope((uint64_t)v0);
  Hasher._combine(_:)(*((_QWORD *)v0 + 3));
  Hasher._combine(_:)(*((_QWORD *)v0 + 4));
  return Hasher._finalize()();
}

uint64_t PromptEnvelope.AttachmentEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.AttachmentEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v18 = 0;
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = v14;
  v9 = v15;
  v10 = v16;
  v14 = 1;
  outlined copy of Data._Representation(v15, v16);
  v13 = KeyedDecodingContainer.decode(_:forKey:)();
  v14 = 2;
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  result = outlined consume of Data._Representation(v9, v10);
  *(_BYTE *)a2 = v17;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v11;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  char *v0;

  return PromptEnvelope.AttachmentEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptEnvelope.AttachmentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope.AttachmentEnvelope()
{
  return PromptEnvelope.AttachmentEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance PromptEnvelope.AttachmentEnvelope()
{
  PromptEnvelope.AttachmentEnvelope.hash(into:)();
  OUTLINED_FUNCTION_468();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope.AttachmentEnvelope()
{
  _QWORD *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;
  Swift::UInt v4;
  Swift::UInt v5;

  v1 = *(unsigned __int8 *)v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance PromptEnvelope.AttachmentEnvelope@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  PromptEnvelope.AttachmentEnvelope.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope.AttachmentEnvelope(_QWORD *a1)
{
  return PromptEnvelope.AttachmentEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  char v4;
  _OWORD v6[2];
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;

  v2 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v2;
  v7 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v3;
  v9 = *(_QWORD *)(a2 + 32);
  static PromptEnvelope.AttachmentEnvelope.== infix(_:_:)((unsigned __int8 *)v6, (unsigned __int8 *)v8);
  return v4 & 1;
}

uint64_t PromptEnvelope.AttachmentContentEnvelope.hash(into:)(uint64_t a1, char a2)
{
  uint64_t v3;
  unint64_t v4;

  OUTLINED_FUNCTION_69_0();
  Hasher._combine(_:)(a2 & 1);
  OUTLINED_FUNCTION_310_0();
  OUTLINED_FUNCTION_213_1();
  v3 = OUTLINED_FUNCTION_57_2();
  return OUTLINED_FUNCTION_109_1(v3, v4);
}

void static PromptEnvelope.AttachmentContentEnvelope.== infix(_:_:)(int a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  if (((a1 ^ a4) & 1) == 0)
  {
    outlined copy of Data._Representation(a2, a3);
    v4 = OUTLINED_FUNCTION_186_0();
    outlined copy of Data._Representation(v4, v5);
    v6 = OUTLINED_FUNCTION_260();
    MEMORY[0x2495A59A8](v6);
    v7 = OUTLINED_FUNCTION_186_0();
    outlined consume of Data._Representation(v7, v8);
    v9 = OUTLINED_FUNCTION_260();
    outlined consume of Data._Representation(v9, v10);
  }
  OUTLINED_FUNCTION_22_0();
}

uint64_t PromptEnvelope.AttachmentContentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6567616D69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t PromptEnvelope.AttachmentContentEnvelope.CodingKeys.stringValue.getter()
{
  return 0x6567616D69;
}

uint64_t PromptEnvelope.AttachmentContentEnvelope.encode(to:)(_QWORD *a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[4];
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;

  v15 = a2 & 1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys>);
  v17 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.AttachmentContentEnvelope.CodingKeys>);
  v16 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined copy of Data._Representation(a3, a4);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v18 = v15;
  v19 = a3;
  v20 = a4;
  lazy protocol witness table accessor for type ImageDataEnvelope and conformance ImageDataEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(_BYTE *, uint64_t))(v17 + 8))(v9, v7);
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v12, v10);
  return outlined consume of Data._Representation(a3, a4);
}

Swift::Int PromptEnvelope.AttachmentContentEnvelope.hashValue.getter(char a1, uint64_t a2, unint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(a1 & 1);
  outlined copy of Data._Representation(a2, a3);
  Data.hash(into:)();
  outlined consume of Data._Representation(a2, a3);
  return Hasher._finalize()();
}

unint64_t PromptEnvelope.AttachmentContentEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;

  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys>);
  v2 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.AttachmentContentEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (unint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  v10 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
    goto LABEL_8;
  v26 = v2;
  v11 = v28;
  v30 = v6;
  v12 = KeyedDecodingContainer.allKeys.getter();
  v13 = *(_QWORD *)(v12 + 16);
  v27 = a1;
  if (!v13)
  {
    v18 = v5;
LABEL_7:
    v19 = v30;
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v22 = &unk_2519CE1D0;
    v9 = (unint64_t)v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
    a1 = v27;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    return v9;
  }
  specialized ArraySlice.subscript.getter(1, v13, v12, v12 + 32, 0, (2 * v13) | 1);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  if (v15 != v17 >> 1)
  {
    v18 = v5;
    goto LABEL_7;
  }
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type ImageDataEnvelope and conformance ImageDataEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24 = v30;
  v25 = (uint64_t)v27;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v11);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  v9 = v29;
  __swift_destroy_boxed_opaque_existential_0Tm(v25);
  return v9;
}

uint64_t PromptEnvelope.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t PromptEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x676E69727473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6574696D696C6564 && a2 == 0xEA00000000007372;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x656D686361747461 && a2 == 0xEB0000000073746ELL)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t PromptEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x676E69727473;
  if (a1 == 1)
    return 0x6574696D696C6564;
  return 0x656D686361747461;
}

uint64_t PromptEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;

  v14 = a5;
  v15 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptEnvelope.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    v11 = v14;
    v17 = v15;
    v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    lazy protocol witness table accessor for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v17 = v11;
    v16 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.AttachmentEnvelope]);
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [PromptEnvelope.AttachmentEnvelope] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int PromptEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t PromptEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    LOBYTE(v13) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    v12 = 1;
    lazy protocol witness table accessor for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PromptEnvelope.AttachmentEnvelope]);
    v12 = 2;
    lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [PromptEnvelope.AttachmentEnvelope] and conformance <A> [A]);
    swift_bridgeObjectRetain();
    v9 = v11;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    if (v9)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v11;
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
      swift_bridgeObjectRelease();
      if (!v10)
        swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return v7;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptEnvelope.AttachmentContentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope.AttachmentContentEnvelope()
{
  uint64_t v0;

  return PromptEnvelope.AttachmentContentEnvelope.hashValue.getter(*(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptEnvelope.AttachmentContentEnvelope(uint64_t a1)
{
  char *v1;

  return PromptEnvelope.AttachmentContentEnvelope.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope.AttachmentContentEnvelope()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

unint64_t protocol witness for Decodable.init(from:) in conformance PromptEnvelope.AttachmentContentEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = PromptEnvelope.AttachmentContentEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope.AttachmentContentEnvelope(_QWORD *a1)
{
  uint64_t v1;

  return PromptEnvelope.AttachmentContentEnvelope.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope.AttachmentContentEnvelope(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope.AttachmentContentEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static PromptEnvelope.AttachmentContentEnvelope.== infix(_:_:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptEnvelope.CodingKeys()
{
  char *v0;

  return PromptEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptEnvelope()
{
  return PromptEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptEnvelope()
{
  return PromptEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptEnvelope()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PromptEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = PromptEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptEnvelope(_QWORD *a1)
{
  uint64_t *v1;

  return PromptEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static PromptEnvelope.== infix(_:_:));
}

uint64_t PromptRenderingEnvelope.SourceEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t PromptRenderingEnvelope.SourceEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F6973726576;
  else
    return 0x696669746E656469;
}

uint64_t PromptRenderingEnvelope.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v3 = v1[4];
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  specialized Array<A>.hash(into:)(a1, v1[9]);
  v4 = v1[10];
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static PromptRenderingEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  char v10;
  BOOL v11;
  BOOL v12;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if ((v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && (v4 == v6 ? (v9 = v5 == v7) : (v9 = 0),
        (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
     && (specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 32), *(_QWORD **)(a2 + 32)), (v10 & 1) != 0)
     && (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) ? (v11 = *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)) : (v11 = 0),
         (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      && (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
        ? (v12 = *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64))
        : (v12 = 0),
          (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
       && specialized static Array<A>.== infix(_:_:)(*(_QWORD **)(a1 + 72), *(_QWORD **)(a2 + 72))))))
  {
    return specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
  }
  else
  {
    return 0;
  }
}

uint64_t PromptRenderingEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v11;

  v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x73746E656D676573 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x64657265646E6572 && a2 == 0xEE00676E69727453;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        v8 = a1 == 0x6C616E696769726FLL && a2 == 0xEE0074706D6F7250;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          v9 = a1 == 0x7344496E656B6F74 && a2 == 0xE800000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v11 & 1) != 0)
              return 5;
            else
              return 6;
          }
        }
      }
    }
  }
}

uint64_t PromptRenderingEnvelope.CodingKeys.init(intValue:)()
{
  return 6;
}

uint64_t PromptRenderingEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248B4DD38 + 4 * byte_248BC03DC[a1]))(0x656372756F73, 0xE600000000000000);
}

uint64_t sub_248B4DD38()
{
  return 0x73746E656D676573;
}

uint64_t sub_248B4DD50()
{
  return 0x64657265646E6572;
}

uint64_t sub_248B4DD74()
{
  return 0x6C616E696769726FLL;
}

uint64_t sub_248B4DD98()
{
  return 0x7344496E656B6F74;
}

uint64_t sub_248B4DDB0()
{
  return 0x6F666E4972657375;
}

uint64_t PromptRenderingEnvelope.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptRenderingEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9 = v3[1];
  v13 = *v3;
  v14 = v9;
  v12 = 0;
  lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(_QWORD *)&v13 = *((_QWORD *)v3 + 4);
    v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(_QWORD *)&v13 = *((_QWORD *)v3 + 9);
    v12 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v13 = *((_QWORD *)v3 + 10);
    v12 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int PromptRenderingEnvelope.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  PromptRenderingEnvelope.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t PromptRenderingEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptRenderingEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  v41 = 0;
  lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v38;
  v33 = v37;
  v34 = a2;
  v10 = v40;
  v32 = v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v41 = 1;
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v31 = v9;
  v11 = v37;
  LOBYTE(v37) = 2;
  swift_bridgeObjectRetain();
  v12 = KeyedDecodingContainer.decode(_:forKey:)();
  v36 = v13;
  v29 = v12;
  v30 = v11;
  LOBYTE(v37) = 3;
  swift_bridgeObjectRetain();
  v28 = KeyedDecodingContainer.decode(_:forKey:)();
  v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  v41 = 4;
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [Int] and conformance <A> [A]);
  v35 = v15;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v16 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  v41 = 5;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  v27 = v16;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v17 = v37;
  v18 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v30;
  swift_bridgeObjectRetain();
  v20 = v36;
  swift_bridgeObjectRetain();
  v21 = v35;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  swift_bridgeObjectRelease();
  v22 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v24 = v34;
  *v34 = v33;
  v24[1] = v18;
  v24[2] = v32;
  v24[3] = v10;
  v25 = v29;
  v24[4] = v19;
  v24[5] = v25;
  v26 = v28;
  v24[6] = v20;
  v24[7] = v26;
  v24[8] = v21;
  v24[9] = v22;
  v24[10] = v17;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  char *v0;

  return PromptRenderingEnvelope.SourceEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptRenderingEnvelope.SourceEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope.SourceEnvelope(_QWORD *a1@<X8>)
{
  protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope.SourceEnvelope(a1);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  PromptRenderingEnvelope.SourceEnvelope.init(from:)();
  if (!v1)
  {
    *a1 = v3;
    a1[1] = v4;
    a1[2] = v5;
    a1[3] = v6;
  }
}

void protocol witness for Encodable.encode(to:) in conformance PromptRenderingEnvelope.SourceEnvelope()
{
  PromptRenderingEnvelope.SourceEnvelope.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToolCallEnvelope.FunctionEnvelope()
{
  char v0;

  static PromptRenderingEnvelope.SourceEnvelope.== infix(_:_:)();
  return v0 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptRenderingEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return PromptRenderingEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptRenderingEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptRenderingEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PromptRenderingEnvelope.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = PromptRenderingEnvelope.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptRenderingEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptRenderingEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PromptRenderingEnvelope()
{
  const void *v0;
  _BYTE __dst[88];

  memcpy(__dst, v0, sizeof(__dst));
  return PromptRenderingEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PromptRenderingEnvelope(uint64_t a1)
{
  const void *v1;
  _BYTE __dst[88];

  memcpy(__dst, v1, sizeof(__dst));
  return PromptRenderingEnvelope.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PromptRenderingEnvelope()
{
  const void *v0;
  uint64_t v2;
  _BYTE __dst[88];

  memcpy(__dst, v0, sizeof(__dst));
  Hasher.init(_seed:)();
  PromptRenderingEnvelope.hash(into:)((uint64_t)&v2);
  return Hasher._finalize()();
}

void *protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _QWORD __src[11];

  result = (void *)PromptRenderingEnvelope.init(from:)(a1, __src);
  if (!v2)
    return memcpy(a2, __src, 0x58uLL);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptRenderingEnvelope(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[88];

  memcpy(__dst, v1, sizeof(__dst));
  return PromptRenderingEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptRenderingEnvelope(void *__src, const void *a2)
{
  _BYTE v4[88];
  _BYTE __dst[88];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return static PromptRenderingEnvelope.== infix(_:_:)((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t ImageDataEnvelope.hash(into:)(uint64_t a1, char a2)
{
  uint64_t v2;
  unint64_t v3;

  Hasher._combine(_:)(a2 & 1);
  OUTLINED_FUNCTION_310_0();
  OUTLINED_FUNCTION_213_1();
  v2 = OUTLINED_FUNCTION_57_2();
  return OUTLINED_FUNCTION_109_1(v2, v3);
}

uint64_t static ImageDataEnvelope.== infix(_:_:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (((a1 ^ a4) & 1) == 0)
    JUMPOUT(0x2495A59A8);
  return getEnumTag for Prompt.ToolCall.Kind();
}

uint64_t ImageDataEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ImageDataEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 0x74616D726F66;
}

uint64_t ImageDataEnvelope.encode(to:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v14 = a4;
  v7 = a2 & 1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageDataEnvelope.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v7;
  v17 = 0;
  lazy protocol witness table accessor for type ImageFormatEnvelope and conformance ImageFormatEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v4)
  {
    v15 = a3;
    v16 = v14;
    v17 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int ImageDataEnvelope.hashValue.getter(char a1, uint64_t a2, unint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  outlined copy of Data._Representation(a2, a3);
  Data.hash(into:)();
  outlined consume of Data._Representation(a2, a3);
  return Hasher._finalize()();
}

uint64_t ImageDataEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE v8[16];
  char v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageDataEnvelope.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v9 = 0;
  lazy protocol witness table accessor for type ImageFormatEnvelope and conformance ImageFormatEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v6 = v8[8];
  v9 = 1;
  lazy protocol witness table accessor for type Data and conformance Data();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v6;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImageDataEnvelope.CodingKeys()
{
  char *v0;

  return ImageDataEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImageDataEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ImageDataEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageDataEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageDataEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ImageDataEnvelope()
{
  uint64_t v0;

  return ImageDataEnvelope.hashValue.getter(*(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ImageDataEnvelope(uint64_t a1)
{
  char *v1;

  return ImageDataEnvelope.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ImageDataEnvelope()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  outlined copy of Data._Representation(v2, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ImageDataEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = ImageDataEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImageDataEnvelope(_QWORD *a1)
{
  uint64_t v1;

  return ImageDataEnvelope.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ImageDataEnvelope(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope.AttachmentContentEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static ImageDataEnvelope.== infix(_:_:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PromptEnvelope.AttachmentContentEnvelope(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  return a5(*a1, *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), *a2, *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
}

uint64_t ImageFormatEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 6778480 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6778986 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ImageFormatEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 6778986;
  else
    return 6778480;
}

uint64_t ImageFormatEnvelope.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;

  v17 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageFormatEnvelope.JpgCodingKeys>);
  v15 = *(_QWORD *)(v3 - 8);
  v16 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageFormatEnvelope.PngCodingKeys>);
  v6 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ImageFormatEnvelope.CodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v17 & 1) != 0)
  {
    v19 = 1;
    lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v16);
  }
  else
  {
    v18 = 0;
    lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t ImageFormatEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  char v44;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageFormatEnvelope.JpgCodingKeys>);
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v38 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageFormatEnvelope.PngCodingKeys>);
  v4 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ImageFormatEnvelope.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  v11 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v11)
  {
    v33 = v4;
    v34 = v6;
    v13 = v38;
    v12 = v39;
    v35 = a1;
    v36 = v8;
    v14 = v40;
    v41 = v7;
    v15 = KeyedDecodingContainer.allKeys.getter();
    v16 = *(_QWORD *)(v15 + 16);
    if (v16
      && (v32 = 0,
          v17 = *(unsigned __int8 *)(v15 + 32),
          specialized ArraySlice.subscript.getter(1, v16, v15, v15 + 32, 0, (2 * v16) | 1),
          v19 = v18,
          v21 = v20,
          swift_bridgeObjectRelease(),
          v19 == v21 >> 1))
    {
      v42 = v17;
      if ((v17 & 1) != 0)
      {
        v44 = 1;
        lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
        v22 = v41;
        v23 = v32;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v24 = v36;
        if (!v23)
        {
          (*(void (**)(char *, uint64_t))(v12 + 8))(v13, v14);
LABEL_14:
          swift_unknownObjectRelease();
          (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v22);
          __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v35);
          return v42;
        }
      }
      else
      {
        v43 = 0;
        lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
        v29 = v34;
        v22 = v41;
        v30 = v32;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v24 = v36;
        if (!v30)
        {
          (*(void (**)(char *, uint64_t))(v33 + 8))(v29, v37);
          goto LABEL_14;
        }
      }
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v22);
    }
    else
    {
      v25 = type metadata accessor for DecodingError();
      swift_allocError();
      v27 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v27 = &unk_2519CFA90;
      v28 = v41;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x24BEE26D0], v25);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v28);
    }
    a1 = v35;
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ImageFormatEnvelope.CodingKeys()
{
  char *v0;

  return ImageFormatEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ImageFormatEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ImageFormatEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageFormatEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageFormatEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageFormatEnvelope.JpgCodingKeys()
{
  lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageFormatEnvelope.JpgCodingKeys()
{
  lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ImageFormatEnvelope.PngCodingKeys()
{
  lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ImageFormatEnvelope.PngCodingKeys()
{
  lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ImageFormatEnvelope@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ImageFormatEnvelope.init(from:)(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ImageFormatEnvelope(_QWORD *a1)
{
  unsigned __int8 *v1;

  return ImageFormatEnvelope.encode(to:)(a1, *v1);
}

void PromptTemplateInfoEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = type metadata accessor for Locale();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v10);
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  outlined init with copy of Prompt.Rendering?(v1 + *(int *)(v11 + 24), (uint64_t)v9, &demangling cache variable for type metadata for Locale?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v3) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t PromptTemplateInfoEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x6574616C706D6574 && a2 == 0xEA00000000004449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000248BCB240
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t PromptTemplateInfoEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x6574616C706D6574;
  if (a1 == 1)
    return 0xD000000000000010;
  return 0x656C61636F6CLL;
}

uint64_t PromptTemplateInfoEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  uint64_t v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PromptTemplateInfoEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v10[15] = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for PromptTemplateInfoEnvelope(0);
    v10[14] = 2;
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

void PromptTemplateInfoEnvelope.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v21 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PromptTemplateInfoEnvelope.CodingKeys>);
  v7 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PromptTemplateInfoEnvelope(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
  }
  else
  {
    v14 = v7;
    v20 = v6;
    v27 = 0;
    v15 = v22;
    v16 = (uint64_t)v12;
    *v12 = KeyedDecodingContainer.decode(_:forKey:)();
    v12[1] = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    v26 = 1;
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]((uint64_t)&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12[2] = v24;
    type metadata accessor for Locale();
    v25 = 2;
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    v18 = (uint64_t)v20;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
    outlined init with take of Locale?(v18, v16 + *(int *)(v10 + 24), &demangling cache variable for type metadata for Locale?);
    outlined init with copy of DocumentEnvelope(v16, v21, type metadata accessor for PromptTemplateInfoEnvelope);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v23);
    outlined destroy of Prompt.Turn.Segment(v16, type metadata accessor for PromptTemplateInfoEnvelope);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PromptTemplateInfoEnvelope.CodingKeys()
{
  char *v0;

  return PromptTemplateInfoEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PromptTemplateInfoEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = PromptTemplateInfoEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PromptTemplateInfoEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PromptTemplateInfoEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance PromptTemplateInfoEnvelope()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptTemplateInfoEnvelope()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void protocol witness for Decodable.init(from:) in conformance PromptTemplateInfoEnvelope(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  PromptTemplateInfoEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PromptTemplateInfoEnvelope(_QWORD *a1)
{
  return PromptTemplateInfoEnvelope.encode(to:)(a1);
}

uint64_t DocumentEnvelope.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  OUTLINED_FUNCTION_256_0();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  OUTLINED_FUNCTION_196_0();
  v1 = type metadata accessor for DocumentEnvelope(0);
  outlined copy of Data._Representation(*(_QWORD *)(v0 + *(int *)(v1 + 20)), *(_QWORD *)(v0 + *(int *)(v1 + 20) + 8));
  OUTLINED_FUNCTION_90_0();
  Data.hash(into:)();
  v2 = OUTLINED_FUNCTION_261();
  return OUTLINED_FUNCTION_109_1(v2, v3);
}

void static DocumentEnvelope.== infix(_:_:)()
{
  OUTLINED_FUNCTION_54_1();
  if ((MEMORY[0x2495A5978]() & 1) != 0)
  {
    type metadata accessor for DocumentEnvelope(0);
    OUTLINED_FUNCTION_423();
  }
  OUTLINED_FUNCTION_104();
}

uint64_t DocumentEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 7107189 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6B72616D6B6F6F62 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t DocumentEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6B72616D6B6F6F62;
  else
    return 7107189;
}

uint64_t DocumentEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  __int128 v11;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for DocumentEnvelope(0) + 20));
    v10[15] = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int DocumentEnvelope.hashValue.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  Hasher.init(_seed:)();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  dispatch thunk of Hashable.hash(into:)();
  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for DocumentEnvelope(0) + 20));
  v2 = *v1;
  v3 = v1[1];
  outlined copy of Data._Representation(*v1, v3);
  Data.hash(into:)();
  outlined consume of Data._Representation(v2, v3);
  return Hasher._finalize()();
}

void DocumentEnvelope.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;

  v19 = a2;
  v23 = type metadata accessor for URL();
  v20 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentEnvelope.CodingKeys>);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentEnvelope(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    v17 = a1;
    v18 = v5;
    v11 = (uint64_t)v10;
    v12 = v20;
    LOBYTE(v24) = 0;
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
    v14 = v21;
    v13 = v22;
    v15 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v14, v15);
    v25 = 1;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v13);
    *(_OWORD *)(v11 + *(int *)(v8 + 20)) = v24;
    outlined init with copy of DocumentEnvelope(v11, v19, type metadata accessor for DocumentEnvelope);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v17);
    outlined destroy of Prompt.Turn.Segment(v11, type metadata accessor for DocumentEnvelope);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DocumentEnvelope.CodingKeys()
{
  char *v0;

  return DocumentEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DocumentEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = DocumentEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;

  Hasher.init(_seed:)();
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  dispatch thunk of Hashable.hash(into:)();
  v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  v5 = *v4;
  v6 = v4[1];
  outlined copy of Data._Representation(*v4, v6);
  Data.hash(into:)();
  outlined consume of Data._Representation(v5, v6);
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance DocumentEnvelope(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DocumentEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DocumentEnvelope(_QWORD *a1)
{
  return DocumentEnvelope.encode(to:)(a1);
}

void DocumentRegistrationStatusEnvelope.init(sealing:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(uint64_t, _QWORD *);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v36 = (_QWORD *)a2;
  v35 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_50_2();
  v9 = type metadata accessor for DocumentRegistration.Progress();
  OUTLINED_FUNCTION_478();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_284_0();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_678();
  v12 = type metadata accessor for DocumentRegistration.InternalStatus();
  OUTLINED_FUNCTION_167_1();
  MEMORY[0x24BDAC7A8](v13);
  v33 = (uint64_t)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_85_1();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_536();
  v16 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 16);
  v34 = a1;
  v16(v6, a1, v12);
  v17 = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 88))(v6, v12);
  if (v17 == *MEMORY[0x24BE3C730])
  {
    OUTLINED_FUNCTION_34_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v18 = OUTLINED_FUNCTION_511();
    v19(v18);
    v20 = OUTLINED_FUNCTION_530();
    v21(v20);
    DocumentRegistration.Progress.progress.getter();
    v23 = v22;
    v24 = DocumentRegistration.Progress.bytes.getter();
    v25 = DocumentRegistration.Progress.totalBytes.getter();
    v26 = *(void (**)(uint64_t))(v3 + 8);
    v27 = OUTLINED_FUNCTION_276_0();
    v26(v27);
    OUTLINED_FUNCTION_34_1(v34, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    ((void (*)(uint64_t, uint64_t))v26)(v5, v9);
    *(_DWORD *)v4 = v23;
    *(_QWORD *)(v4 + 8) = v24;
    *(_QWORD *)(v4 + 16) = v25;
    swift_storeEnumTagMultiPayload();
    outlined init with take of DocumentRegistrationEnvelope(v4, (uint64_t)v36, type metadata accessor for DocumentRegistrationStatusEnvelope);
  }
  else
  {
    v28 = v36;
    if (v17 == *MEMORY[0x24BE3C740])
    {
      OUTLINED_FUNCTION_34_1(v34, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      OUTLINED_FUNCTION_34_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
      type metadata accessor for DocumentResourceIdentifier();
      v29 = OUTLINED_FUNCTION_560();
      v30(v29, v6);
      OUTLINED_FUNCTION_261();
    }
    else
    {
      if (v17 != *MEMORY[0x24BE3C738])
      {
        v16((_QWORD *)v33, v34, v12);
        OUTLINED_FUNCTION_348();
        _StringGuts.grow(_:)(40);
        OUTLINED_FUNCTION_571();
        OUTLINED_FUNCTION_322();
        OUTLINED_FUNCTION_175(38, v32);
        _print_unlocked<A, B>(_:_:)();
        OUTLINED_FUNCTION_347();
        v33 = 1146;
        OUTLINED_FUNCTION_143_1();
        OUTLINED_FUNCTION_568();
      }
      OUTLINED_FUNCTION_34_1(v34, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      OUTLINED_FUNCTION_34_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
      v31 = v6[1];
      *v28 = *v6;
      v28[1] = v31;
      OUTLINED_FUNCTION_261();
    }
    swift_storeEnumTagMultiPayload();
  }
}

uint64_t DocumentRegistrationEnvelope.hash(into:)(uint64_t a1)
{
  DocumentRegistrationStatusEnvelope.hash(into:)(a1);
  type metadata accessor for DocumentRegistrationEnvelope(0);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static DocumentRegistrationStatusEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v32;
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for DocumentResourceIdentifier();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v34 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v34 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DocumentRegistrationStatusEnvelope, DocumentRegistrationStatusEnvelope));
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t)&v19[*(int *)(v17 + 48)];
  outlined init with copy of DocumentEnvelope(a1, (uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
  outlined init with copy of DocumentEnvelope(a2, v20, type metadata accessor for DocumentRegistrationStatusEnvelope);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of DocumentEnvelope((uint64_t)v19, (uint64_t)v15, type metadata accessor for DocumentRegistrationStatusEnvelope);
    if (!swift_getEnumCaseMultiPayload())
    {
      v25 = *(float *)v15 == *(float *)v20
         && *((_QWORD *)v15 + 1) == *(_QWORD *)(v20 + 8)
         && *((_QWORD *)v15 + 2) == *(_QWORD *)(v20 + 16);
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (EnumCaseMultiPayload != 1)
  {
    outlined init with copy of DocumentEnvelope((uint64_t)v19, (uint64_t)v10, type metadata accessor for DocumentRegistrationStatusEnvelope);
    v30 = *v10;
    v29 = v10[1];
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      if (v30 == *(_QWORD *)v20 && v29 == *(_QWORD *)(v20 + 8))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v32 & 1) == 0)
        {
          outlined destroy of Prompt.Turn.Segment((uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
LABEL_26:
          v25 = 0;
          return v25 & 1;
        }
      }
      outlined destroy of Prompt.Turn.Segment((uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
      v25 = 1;
      return v25 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_25:
    outlined destroy of Locale?((uint64_t)v19, &demangling cache variable for type metadata for (DocumentRegistrationStatusEnvelope, DocumentRegistrationStatusEnvelope));
    goto LABEL_26;
  }
  outlined init with copy of DocumentEnvelope((uint64_t)v19, (uint64_t)v13, type metadata accessor for DocumentRegistrationStatusEnvelope);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    goto LABEL_25;
  }
  v22 = v34;
  v23 = v20;
  v24 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v6, v23, v35);
  v25 = static DocumentResourceIdentifier.== infix(_:_:)();
  v26 = *(void (**)(char *, uint64_t))(v22 + 8);
  v26(v6, v24);
  v26(v13, v24);
LABEL_15:
  outlined destroy of Prompt.Turn.Segment((uint64_t)v19, type metadata accessor for DocumentRegistrationStatusEnvelope);
  return v25 & 1;
}

uint64_t DocumentRegistrationEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t DocumentRegistrationEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 7107189;
  else
    return 0x737574617473;
}

uint64_t DocumentRegistrationEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope and conformance DocumentRegistrationStatusEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for DocumentRegistrationEnvelope(0);
    v8[14] = 1;
    type metadata accessor for URL();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int DocumentRegistrationEnvelope.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  DocumentRegistrationStatusEnvelope.hash(into:)((uint64_t)v1);
  type metadata accessor for DocumentRegistrationEnvelope(0);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void DocumentRegistrationEnvelope.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;

  v20 = a2;
  v21 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v22 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentRegistrationEnvelope(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  }
  else
  {
    v18 = a1;
    v12 = v6;
    v13 = (uint64_t)v11;
    v14 = v22;
    v27 = 0;
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope and conformance DocumentRegistrationStatusEnvelope);
    v15 = (uint64_t)v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of DocumentRegistrationEnvelope(v15, v13, type metadata accessor for DocumentRegistrationStatusEnvelope);
    v26 = 1;
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
    v16 = v21;
    v17 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v17);
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v13 + *(int *)(v9 + 20), v14, v16);
    outlined init with copy of DocumentEnvelope(v13, v20, type metadata accessor for DocumentRegistrationEnvelope);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v18);
    outlined destroy of Prompt.Turn.Segment(v13, type metadata accessor for DocumentRegistrationEnvelope);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DocumentRegistrationEnvelope.CodingKeys()
{
  char *v0;

  return DocumentRegistrationEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DocumentRegistrationEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = DocumentRegistrationEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentRegistrationEnvelope()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  DocumentRegistrationStatusEnvelope.hash(into:)((uint64_t)v1);
  type metadata accessor for URL();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type URL and conformance URL);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance DocumentRegistrationEnvelope(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DocumentRegistrationEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DocumentRegistrationEnvelope(_QWORD *a1)
{
  return DocumentRegistrationEnvelope.encode(to:)(a1);
}

void DocumentRegistrationStatusEnvelope.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  float v13;
  Swift::UInt v14;
  Swift::UInt v15;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for DocumentResourceIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DocumentEnvelope(v2, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      Hasher._combine(_:)(1uLL);
      lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      Hasher._combine(_:)(2uLL);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = *(float *)v10;
    v14 = *((_QWORD *)v10 + 1);
    v15 = *((_QWORD *)v10 + 2);
    Hasher._combine(_:)(0);
    ProgressEnvelope.hash(into:)(v13, a1, v14, v15);
  }
}

BOOL static ProgressEnvelope.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  return a5 == a6 && a1 == a3 && a2 == a4;
}

uint64_t DocumentRegistrationStatusEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x7265747369676572 && a2 == 0xEB00000000676E69;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x64656873696E6966 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t DocumentRegistrationStatusEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x7265747369676572;
  if (a1 == 1)
    return 0x64656873696E6966;
  return 0x726F727265;
}

uint64_t DocumentRegistrationStatusEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.ErrorCodingKeys>);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v31 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.FinishedCodingKeys>);
  v35 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v33 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DocumentResourceIdentifier();
  v32 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.RegisteringCodingKeys>);
  v30 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DocumentRegistrationStatusEnvelope.CodingKeys>);
  v40 = *(_QWORD *)(v12 - 8);
  v41 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentEnvelope(v39, (uint64_t)v11, type metadata accessor for DocumentRegistrationStatusEnvelope);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v16 = v32;
      v17 = v11;
      v18 = v37;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v5, v17, v37);
      LOBYTE(v42) = 1;
      lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
      v19 = v33;
      v20 = v41;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
      v21 = v38;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v19, v21);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v14, v20);
    }
    else
    {
      LOBYTE(v42) = 2;
      lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
      v27 = v31;
      v28 = v41;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v29 = v36;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v29);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v14, v28);
    }
  }
  else
  {
    v23 = *(_DWORD *)v11;
    v24 = *((_QWORD *)v11 + 1);
    v25 = *((_QWORD *)v11 + 2);
    LOBYTE(v42) = 0;
    lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
    v26 = v41;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v42 = v23;
    v43 = v24;
    v44 = v25;
    lazy protocol witness table accessor for type ProgressEnvelope and conformance ProgressEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v14, v26);
  }
}

uint64_t DocumentRegistrationStatusEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  char *v42;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;
  __int128 v85;
  char *v86;

  v77 = a2;
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.ErrorCodingKeys>);
  v73 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v80 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.FinishedCodingKeys>);
  v72 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v79 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.RegisteringCodingKeys>);
  v71 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v78 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DocumentRegistrationStatusEnvelope.CodingKeys>);
  v81 = *(_QWORD *)(v6 - 8);
  v82 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v64 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v64 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v64 - v19;
  v21 = a1[3];
  v83 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  v22 = v86;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
    goto LABEL_2;
  v66 = v18;
  v67 = (uint64_t *)v12;
  v68 = v20;
  v69 = v15;
  v70 = v9;
  v24 = v82;
  v86 = v8;
  v25 = KeyedDecodingContainer.allKeys.getter();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v23 = (uint64_t)v83;
LABEL_11:
    v37 = v81;
    v38 = v70;
    v39 = type metadata accessor for DecodingError();
    swift_allocError();
    v41 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v41 = v38;
    v42 = v86;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v39 - 8) + 104))(v41, *MEMORY[0x24BEE26D0], v39);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v24);
    return __swift_destroy_boxed_opaque_existential_0Tm(v23);
  }
  v27 = v24;
  v65 = 0;
  v28 = *(unsigned __int8 *)(v25 + 32);
  specialized ArraySlice.subscript.getter(1, v26, v25, v25 + 32, 0, (2 * v26) | 1);
  v30 = v29;
  v32 = v31;
  swift_bridgeObjectRelease();
  if (v30 != v32 >> 1)
  {
    v23 = (uint64_t)v83;
    v24 = v27;
    goto LABEL_11;
  }
  if (!v28)
  {
    LOBYTE(v84) = 0;
    lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
    v44 = v78;
    v45 = v86;
    v46 = v65;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v46)
    {
      lazy protocol witness table accessor for type ProgressEnvelope and conformance ProgressEnvelope();
      v53 = v74;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v23 = (uint64_t)v83;
      v54 = v81;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v44, v53);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v27);
      v57 = v66;
      *v66 = v84;
      *(_OWORD *)(v57 + 2) = v85;
      goto LABEL_21;
    }
    swift_unknownObjectRelease();
    v47 = *(void (**)(char *, uint64_t))(v81 + 8);
    v48 = v45;
LABEL_17:
    v47(v48, v27);
    goto LABEL_2;
  }
  if (v28 != 1)
  {
    LOBYTE(v84) = 2;
    lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
    v49 = v80;
    v50 = v86;
    v51 = v65;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v51)
    {
      v55 = v76;
      v56 = KeyedDecodingContainer.decode(_:forKey:)();
      v23 = (uint64_t)v83;
      v58 = v56;
      v60 = v59;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v49, v55);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v50, v27);
      v61 = v67;
      *v67 = v58;
      v61[1] = v60;
      swift_storeEnumTagMultiPayload();
      v62 = (uint64_t)v61;
LABEL_22:
      v63 = (uint64_t)v68;
      outlined init with take of DocumentRegistrationEnvelope(v62, (uint64_t)v68, type metadata accessor for DocumentRegistrationStatusEnvelope);
      outlined init with take of DocumentRegistrationEnvelope(v63, v77, type metadata accessor for DocumentRegistrationStatusEnvelope);
      return __swift_destroy_boxed_opaque_existential_0Tm(v23);
    }
    swift_unknownObjectRelease();
    v47 = *(void (**)(char *, uint64_t))(v81 + 8);
    v48 = v50;
    goto LABEL_17;
  }
  LOBYTE(v84) = 1;
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
  v33 = v79;
  v34 = v27;
  v35 = v86;
  v36 = v65;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v36)
  {
    type metadata accessor for DocumentResourceIdentifier();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
    v52 = v75;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v23 = (uint64_t)v83;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v33, v52);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v35, v34);
    v57 = v69;
LABEL_21:
    swift_storeEnumTagMultiPayload();
    v62 = (uint64_t)v57;
    goto LABEL_22;
  }
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v35, v27);
LABEL_2:
  v23 = (uint64_t)v83;
  return __swift_destroy_boxed_opaque_existential_0Tm(v23);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DocumentRegistrationStatusEnvelope.CodingKeys()
{
  char *v0;

  return DocumentRegistrationStatusEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DocumentRegistrationStatusEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = DocumentRegistrationStatusEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys()
{
  lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance DocumentRegistrationStatusEnvelope()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance DocumentRegistrationStatusEnvelope()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DocumentRegistrationStatusEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DocumentRegistrationStatusEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DocumentRegistrationStatusEnvelope(_QWORD *a1)
{
  return DocumentRegistrationStatusEnvelope.encode(to:)(a1);
}

void ProgressEnvelope.hash(into:)(float a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  Swift::UInt32 v6;

  if ((LODWORD(a1) & 0x7FFFFFFF) != 0)
    v6 = LODWORD(a1);
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(a4);
}

uint64_t ProgressEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x73736572676F7270 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7365747962 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x7479426C61746F74 && a2 == 0xEA00000000007365)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t ProgressEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x73736572676F7270;
  if (a1 == 1)
    return 0x7365747962;
  return 0x7479426C61746F74;
}

uint64_t ProgressEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ProgressEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int ProgressEnvelope.hashValue.getter(Swift::UInt a1, Swift::UInt a2, float a3)
{
  _BYTE v7[72];

  Hasher.init(_seed:)();
  ProgressEnvelope.hash(into:)(a3, (uint64_t)v7, a1, a2);
  return Hasher._finalize()();
}

uint64_t ProgressEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ProgressEnvelope.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v11 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  v10 = 1;
  v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v9 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v7;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ProgressEnvelope.CodingKeys()
{
  char *v0;

  return ProgressEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ProgressEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ProgressEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ProgressEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ProgressEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ProgressEnvelope()
{
  uint64_t v0;

  return ProgressEnvelope.hashValue.getter(*(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(float *)v0);
}

void protocol witness for Hashable.hash(into:) in conformance ProgressEnvelope(uint64_t a1)
{
  uint64_t v1;

  ProgressEnvelope.hash(into:)(*(float *)v1, a1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ProgressEnvelope()
{
  uint64_t v0;
  float v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _BYTE v5[72];

  v1 = *(float *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  Hasher.init(_seed:)();
  ProgressEnvelope.hash(into:)(v1, (uint64_t)v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ProgressEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  result = ProgressEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 16) = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ProgressEnvelope(_QWORD *a1)
{
  return ProgressEnvelope.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ProgressEnvelope(uint64_t a1, uint64_t a2)
{
  return static ProgressEnvelope.== infix(_:_:)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(float *)a1, *(float *)a2);
}

void SamplingParametersEnvelope.hash(into:)()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  Swift::UInt v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt64 v9;
  int v10;
  Swift::UInt8 v11;

  v1 = v0[8];
  if (v1 == 255)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    v2 = OUTLINED_FUNCTION_210_0();
    SamplingStrategyEnvelope.hash(into:)(v2, v3, v1);
  }
  if (v0[24] == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    v4 = OUTLINED_FUNCTION_625();
    Hasher._combine(_:)(v4);
  }
  if (v0[40] == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    v5 = OUTLINED_FUNCTION_625();
    Hasher._combine(_:)(v5);
  }
  if (v0[56] == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    v6 = OUTLINED_FUNCTION_625();
    Hasher._combine(_:)(v6);
  }
  if (v0[72] == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_308_0();
  }
  outlined retain of SamplingParametersEnvelope((uint64_t)v0);
  v7 = OUTLINED_FUNCTION_261();
  specialized Set.hash(into:)(v7, v8);
  outlined release of SamplingParametersEnvelope((uint64_t)v0);
  if (v0[96] == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_308_0();
  }
  if (v0[112] == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    v9 = OUTLINED_FUNCTION_625();
    Hasher._combine(_:)(v9);
  }
  if (v0[128] == 1)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    OUTLINED_FUNCTION_308_0();
  }
  v10 = v0[129];
  if (v10 == 2)
  {
    v11 = 0;
  }
  else
  {
    v11 = v10 & 1;
    OUTLINED_FUNCTION_62_0();
  }
  Hasher._combine(_:)(v11);
  OUTLINED_FUNCTION_97();
}

uint64_t SamplingParametersEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v13;

  v2 = a1 == 0x7967657461727473 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x74617265706D6574 && a2 == 0xEB00000000657275;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000248BCB260
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = a1 == 0x65506874676E656CLL && a2 == 0xED000079746C616ELL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = a1 == 0x546D756D6978616DLL && a2 == 0xED0000736E656B6FLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = a1 == 0x75716553706F7473 && a2 == 0xED00007365636E65;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v10 = a1 == 0x65536D6F646E6172 && a2 == 0xEA00000000006465;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else
            {
              v11 = a1 == 0x74756F656D6974 && a2 == 0xE700000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else if (a1 == 0xD000000000000016 && a2 == 0x8000000248BCB280
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 8;
              }
              else if (a1 == 0x6165486E656B6F74 && a2 == 0xEC000000676E696CLL)
              {
                swift_bridgeObjectRelease();
                return 9;
              }
              else
              {
                v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v13 & 1) != 0)
                  return 9;
                else
                  return 10;
              }
            }
          }
        }
      }
    }
  }
}

uint64_t SamplingParametersEnvelope.CodingKeys.init(intValue:)()
{
  return 10;
}

uint64_t SamplingParametersEnvelope.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_248B53248 + 4 * byte_248BC03E2[a1]))(0x7967657461727473, 0xE800000000000000);
}

uint64_t sub_248B53248()
{
  return 0x74617265706D6574;
}

unint64_t sub_248B53268()
{
  return 0xD000000000000010;
}

uint64_t sub_248B53284()
{
  return 0x65506874676E656CLL;
}

uint64_t sub_248B532A8()
{
  return 0x546D756D6978616DLL;
}

uint64_t sub_248B532CC()
{
  return 0x75716553706F7473;
}

uint64_t sub_248B532F0()
{
  return 0x65536D6F646E6172;
}

uint64_t sub_248B5330C()
{
  return 0x74756F656D6974;
}

unint64_t sub_248B53324()
{
  return 0xD000000000000016;
}

uint64_t sub_248B53344()
{
  return 0x6165486E656B6F74;
}

void SamplingParametersEnvelope.encode(to:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v10[16];

  OUTLINED_FUNCTION_454();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingParametersEnvelope.CodingKeys>);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v7 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_87_0(v0);
  lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  OUTLINED_FUNCTION_37_2();
  outlined init with take of Locale?(v2, (uint64_t)v10, &demangling cache variable for type metadata for SamplingStrategyEnvelope?);
  outlined init with take of Locale?((uint64_t)v10, (uint64_t)&v9, &demangling cache variable for type metadata for SamplingStrategyEnvelope?);
  v8 = 0;
  lazy protocol witness table accessor for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope();
  OUTLINED_FUNCTION_141_1();
  if (!v1)
  {
    OUTLINED_FUNCTION_116_1(1);
    OUTLINED_FUNCTION_116_1(2);
    OUTLINED_FUNCTION_116_1(3);
    OUTLINED_FUNCTION_185_1(4);
    v9 = *(_QWORD *)(v2 + 80);
    v8 = 5;
    OUTLINED_FUNCTION_223();
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    OUTLINED_FUNCTION_25_0();
    OUTLINED_FUNCTION_185_1(6);
    OUTLINED_FUNCTION_116_1(7);
    OUTLINED_FUNCTION_185_1(8);
    LOBYTE(v9) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  OUTLINED_FUNCTION_89_1((uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_157_1();
}

void SamplingParametersEnvelope.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  SamplingParametersEnvelope.hash(into:)();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void SamplingParametersEnvelope.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;

  OUTLINED_FUNCTION_6_2();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingParametersEnvelope.CodingKeys>);
  OUTLINED_FUNCTION_53_3();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_257();
  lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  OUTLINED_FUNCTION_622();
  OUTLINED_FUNCTION_129_0();
  if (v0)
  {
    OUTLINED_FUNCTION_307();
  }
  else
  {
    lazy protocol witness table accessor for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope();
    OUTLINED_FUNCTION_681();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v4 = v35;
    v28 = OUTLINED_FUNCTION_201_1();
    v29 = v36;
    v59 = v5 & 1;
    v27 = OUTLINED_FUNCTION_201_1();
    v58 = v6 & 1;
    v26 = OUTLINED_FUNCTION_201_1();
    v57 = v7 & 1;
    LOBYTE(v35) = 4;
    v24 = OUTLINED_FUNCTION_295_0();
    v25 = v4;
    v56 = v8 & 1;
    v9 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
    OUTLINED_FUNCTION_650();
    v10 = v35;
    OUTLINED_FUNCTION_154();
    v23 = OUTLINED_FUNCTION_295_0();
    v55 = v11 & 1;
    v22 = OUTLINED_FUNCTION_201_1();
    v54 = v12 & 1;
    v21 = OUTLINED_FUNCTION_295_0();
    v19 = v13 & 1;
    v53 = v13 & 1;
    v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    OUTLINED_FUNCTION_38_2();
    OUTLINED_FUNCTION_465();
    v34 = v14;
    OUTLINED_FUNCTION_465();
    v33 = v15;
    OUTLINED_FUNCTION_465();
    v32 = v16;
    OUTLINED_FUNCTION_465();
    v31 = v17;
    OUTLINED_FUNCTION_465();
    v30 = v18;
    OUTLINED_FUNCTION_307();
    v35 = v25;
    v37 = v28;
    v38 = v59;
    v39 = v27;
    v40 = v58;
    v41 = v26;
    v42 = v57;
    v43 = v24;
    v44 = v56;
    v45 = v10;
    v46 = v23;
    v47 = v55;
    v48 = v22;
    v49 = v54;
    v50 = v21;
    v51 = v53;
    v52 = v20;
    outlined release of SamplingParametersEnvelope((uint64_t)&v35);
    *(_QWORD *)v2 = v25;
    *(_BYTE *)(v2 + 8) = v29;
    *(_QWORD *)(v2 + 16) = v28;
    *(_BYTE *)(v2 + 24) = v34;
    *(_QWORD *)(v2 + 32) = v27;
    *(_BYTE *)(v2 + 40) = v33;
    *(_QWORD *)(v2 + 48) = v26;
    *(_BYTE *)(v2 + 56) = v32;
    *(_QWORD *)(v2 + 64) = v24;
    *(_BYTE *)(v2 + 72) = v9 & 1;
    *(_QWORD *)(v2 + 80) = v10;
    *(_QWORD *)(v2 + 88) = v23;
    *(_BYTE *)(v2 + 96) = v31;
    *(_QWORD *)(v2 + 104) = v22;
    *(_BYTE *)(v2 + 112) = v30;
    *(_QWORD *)(v2 + 120) = v21;
    *(_BYTE *)(v2 + 128) = v19;
    *(_BYTE *)(v2 + 129) = v20;
  }
  OUTLINED_FUNCTION_420();
  OUTLINED_FUNCTION_2_4();
}

void SamplingStrategyEnvelope.hash(into:)(uint64_t a1, Swift::UInt a2, char a3)
{
  Swift::UInt v4;
  Swift::UInt64 v5;

  if (a3)
  {
    if (a3 == 1)
    {
      Hasher._combine(_:)(2uLL);
      v4 = a2;
    }
    else
    {
      v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = a2;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
  }
}

uint64_t static SamplingStrategyEnvelope.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (a4 == 1)
        return a1 == a3;
    }
    else if (a4 == 2 && *(double *)&a3 == 0.0)
    {
      return 1;
    }
  }
  else if (!a4)
  {
    return *(double *)&a1 == *(double *)&a3;
  }
  return 0;
}

uint64_t SamplingStrategyEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x78616D677261 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x537375656C63756ELL && a2 == 0xEF676E696C706D61;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1265659764 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t SamplingStrategyEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 0x78616D677261;
  if (a1 == 1)
    return 0x537375656C63756ELL;
  return 1265659764;
}

uint64_t SamplingStrategyEnvelope.NucleusSamplingCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t SamplingStrategyEnvelope.NucleusSamplingCodingKeys.stringValue.getter()
{
  return 0x6C6F687365726874;
}

uint64_t SamplingStrategyEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v26 = a3;
  v25 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.TopKCodingKeys>);
  v23 = *(_QWORD *)(v4 - 8);
  v24 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v22 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.NucleusSamplingCodingKeys>);
  v20 = *(_QWORD *)(v6 - 8);
  v21 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.ArgmaxCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SamplingStrategyEnvelope.CodingKeys>);
  v27 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!(_BYTE)v26)
  {
    v29 = 1;
    lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v18 = v21;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v18);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v13);
  }
  if (v26 == 1)
  {
    v30 = 2;
    lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
    v16 = v22;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v17 = v24;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v13);
  }
  v28 = 0;
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v13);
}

Swift::Int SamplingStrategyEnvelope.hashValue.getter(Swift::UInt a1, char a2)
{
  _BYTE v5[72];

  Hasher.init(_seed:)();
  SamplingStrategyEnvelope.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

char *SamplingStrategyEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char v55;
  char v56;
  char v57;

  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.TopKCodingKeys>);
  v48 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v52 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.NucleusSamplingCodingKeys>);
  v47 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v51 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.ArgmaxCodingKeys>);
  v4 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SamplingStrategyEnvelope.CodingKeys>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  v12 = (uint64_t)v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12)
    goto LABEL_12;
  v44 = v4;
  v45 = v6;
  v14 = v52;
  v13 = v53;
  v46 = v8;
  v54 = a1;
  v11 = v10;
  v15 = KeyedDecodingContainer.allKeys.getter();
  v16 = *(_QWORD *)(v15 + 16);
  v17 = v7;
  if (!v16)
    goto LABEL_9;
  v43 = 0;
  v18 = *(unsigned __int8 *)(v15 + 32);
  specialized ArraySlice.subscript.getter(1, v16, v15, v15 + 32, 0, (2 * v16) | 1);
  v20 = v19;
  v22 = v21;
  swift_bridgeObjectRelease();
  if (v20 != v22 >> 1)
  {
    v11 = v10;
LABEL_9:
    v28 = v46;
    v29 = type metadata accessor for DecodingError();
    swift_allocError();
    v31 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v31 = &unk_2519D1350;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, *MEMORY[0x24BEE26D0], v29);
    swift_willThrow();
    swift_unknownObjectRelease();
    v32 = *(void (**)(char *, uint64_t))(v28 + 8);
    goto LABEL_10;
  }
  if (v18)
  {
    if (v18 == 1)
    {
      v56 = 1;
      lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
      v23 = v51;
      v24 = v10;
      v11 = v10;
      v25 = v43;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (!v25)
      {
        v26 = v50;
        KeyedDecodingContainer.decode(_:forKey:)();
        v27 = v46;
        v41 = v40;
        (*(void (**)(char *, uint64_t))(v47 + 8))(v23, v26);
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v17);
        v11 = v41;
LABEL_20:
        __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v54);
        return v11;
      }
    }
    else
    {
      v57 = 2;
      lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
      v24 = v10;
      v11 = v10;
      v37 = v43;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (!v37)
      {
        v38 = KeyedDecodingContainer.decode(_:forKey:)();
        v39 = v46;
        v11 = (char *)v38;
        (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v13);
        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v17);
        goto LABEL_20;
      }
    }
    swift_unknownObjectRelease();
    v32 = *(void (**)(char *, uint64_t))(v46 + 8);
    v33 = v24;
    goto LABEL_11;
  }
  v55 = 0;
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  v35 = v45;
  v11 = v10;
  v36 = v43;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v36)
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v49);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v17);
    v11 = 0;
    goto LABEL_20;
  }
  swift_unknownObjectRelease();
  v32 = *(void (**)(char *, uint64_t))(v46 + 8);
LABEL_10:
  v33 = v11;
LABEL_11:
  v32(v33, v17);
  a1 = v54;
LABEL_12:
  __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
  return v11;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SamplingParametersEnvelope.CodingKeys()
{
  unsigned __int8 *v0;

  return SamplingParametersEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SamplingParametersEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SamplingParametersEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SamplingParametersEnvelope.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SamplingParametersEnvelope.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingParametersEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingParametersEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance SamplingParametersEnvelope()
{
  const void *v0;
  _BYTE __dst[130];

  memcpy(__dst, v0, sizeof(__dst));
  SamplingParametersEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance SamplingParametersEnvelope()
{
  const void *v0;
  _BYTE __dst[130];

  memcpy(__dst, v0, sizeof(__dst));
  SamplingParametersEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SamplingParametersEnvelope()
{
  const void *v0;
  _BYTE __dst[130];

  memcpy(__dst, v0, sizeof(__dst));
  Hasher.init(_seed:)();
  SamplingParametersEnvelope.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance SamplingParametersEnvelope(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE __src[130];

  SamplingParametersEnvelope.init(from:)();
  if (!v1)
    memcpy(a1, __src, 0x82uLL);
}

void protocol witness for Encodable.encode(to:) in conformance SamplingParametersEnvelope()
{
  const void *v0;
  _BYTE __dst[130];

  memcpy(__dst, v0, sizeof(__dst));
  SamplingParametersEnvelope.encode(to:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.ArgmaxCodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.ArgmaxCodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SamplingStrategyEnvelope.CodingKeys()
{
  char *v0;

  return SamplingStrategyEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SamplingStrategyEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SamplingStrategyEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SamplingStrategyEnvelope.NucleusSamplingCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SamplingStrategyEnvelope.TopKCodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SamplingStrategyEnvelope.TopKCodingKeys()
{
  lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SamplingStrategyEnvelope()
{
  uint64_t v0;

  return SamplingStrategyEnvelope.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void protocol witness for Hashable.hash(into:) in conformance SamplingStrategyEnvelope(uint64_t a1)
{
  uint64_t v1;

  SamplingStrategyEnvelope.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SamplingStrategyEnvelope()
{
  uint64_t v0;
  Swift::UInt v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  SamplingStrategyEnvelope.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

char *protocol witness for Decodable.init(from:) in conformance SamplingStrategyEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char *result;
  char v5;

  result = SamplingStrategyEnvelope.init(from:)(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SamplingStrategyEnvelope(_QWORD *a1)
{
  uint64_t v1;

  return SamplingStrategyEnvelope.encode(to:)(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SamplingStrategyEnvelope(uint64_t a1, uint64_t a2)
{
  return static SamplingStrategyEnvelope.== infix(_:_:)(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t SchemaEnvelope.hash(into:)()
{
  OUTLINED_FUNCTION_59_2();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  OUTLINED_FUNCTION_195_0();
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t SchemaEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x616D65686373 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t SchemaEnvelope.CodingKeys.stringValue.getter()
{
  return 0x616D65686373;
}

uint64_t SchemaEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SchemaEnvelope.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for GenerationSchema();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int SchemaEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for GenerationSchema();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t SchemaEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;

  v15 = a2;
  v17 = type metadata accessor for GenerationSchema();
  v14 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SchemaEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SchemaEnvelope(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v16, v17);
    outlined init with take of DocumentRegistrationEnvelope((uint64_t)v11, v15, type metadata accessor for SchemaEnvelope);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SchemaEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = SchemaEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SchemaEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SchemaEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SchemaEnvelope()
{
  Hasher.init(_seed:)();
  type metadata accessor for GenerationSchema();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SchemaEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SchemaEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SchemaEnvelope(_QWORD *a1)
{
  return SchemaEnvelope.encode(to:)(a1);
}

#error "248B54FC4: call analysis failed (funcsize=54)"

#error "248B550CC: call analysis failed (funcsize=91)"

uint64_t ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x72657773776F7262 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6F6974636E7566;
  else
    return 0x72657773776F7262;
}

uint64_t ToolDescriptionEnvelope.ToolTypeEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys>);
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v21 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys>);
  v19 = *(_QWORD *)(v7 - 8);
  v20 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys>);
  v25 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentEnvelope(v24, (uint64_t)v12, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v4) == 1)
  {
    v26 = 0;
    lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
  }
  else
  {
    outlined init with take of DocumentRegistrationEnvelope((uint64_t)v12, (uint64_t)v6, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    v27 = 1;
    lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
    v17 = v21;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    v18 = v23;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v18);
    outlined destroy of Prompt.Turn.Segment((uint64_t)v6, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v15, v13);
}

uint64_t ToolDescriptionEnvelope.ToolTypeEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  int v53;
  char v54;
  char v55;

  v48 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v46 = v3;
  v47 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v51 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys>);
  v44 = *(_QWORD *)(v6 - 8);
  v45 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v49 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys>);
  v50 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v41 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  v17 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
    goto LABEL_8;
  v42 = v14;
  v43 = v16;
  v18 = v51;
  v52 = a1;
  v19 = KeyedDecodingContainer.allKeys.getter();
  v20 = *(_QWORD *)(v19 + 16);
  v21 = v8;
  if (!v20
    || (v53 = *(unsigned __int8 *)(v19 + 32),
        specialized ArraySlice.subscript.getter(1, v20, v19, v19 + 32, 0, (2 * v20) | 1),
        v23 = v22,
        v25 = v24,
        swift_bridgeObjectRelease(),
        v23 != v25 >> 1))
  {
    v31 = v50;
    v32 = type metadata accessor for DecodingError();
    swift_allocError();
    v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v34 = v11;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, *MEMORY[0x24BEE26D0], v32);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v21);
    a1 = v52;
LABEL_8:
    v36 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_0Tm(v36);
  }
  if ((v53 & 1) != 0)
  {
    v55 = 1;
    lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
    v26 = v18;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v27 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    v28 = (uint64_t)v42;
    v29 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30 = v50;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v26, v29);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v21);
    __swift_storeEnumTagSinglePayload(v28, 0, 1, v27);
    v39 = v28;
    v40 = (uint64_t)v43;
    outlined init with take of DocumentRegistrationEnvelope(v39, (uint64_t)v43, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  }
  else
  {
    v54 = 0;
    lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
    v35 = v49;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v45);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v8);
    v38 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
    v40 = (uint64_t)v43;
    __swift_storeEnumTagSinglePayload((uint64_t)v43, 1, 1, v38);
  }
  outlined init with take of DocumentRegistrationEnvelope(v40, v48, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
  v36 = (uint64_t)v52;
  return __swift_destroy_boxed_opaque_existential_0Tm(v36);
}

void ToolDescriptionEnvelope.FunctionDescriptionEnvelope.hash(into:)()
{
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  OUTLINED_FUNCTION_59_2();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  OUTLINED_FUNCTION_196_0();
  OUTLINED_FUNCTION_97();
}

void static ToolDescriptionEnvelope.FunctionDescriptionEnvelope.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;

  OUTLINED_FUNCTION_120_1(a1);
  v5 = v5 && v3 == v4;
  if ((v5 || (OUTLINED_FUNCTION_24_0() & 1) != 0)
    && (*(_QWORD *)(v2 + 16) == *(_QWORD *)(v1 + 16) ? (v6 = *(_QWORD *)(v2 + 24) == *(_QWORD *)(v1 + 24)) : (v6 = 0),
        v6 || (OUTLINED_FUNCTION_24_0() & 1) != 0))
  {
    type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
    static GenerationSchema.== infix(_:_:)();
  }
  else
  {
    OUTLINED_FUNCTION_104();
  }
}

uint64_t ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000248BCB320
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E656D75677261 && a2 == 0xEF616D6568635373)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 1701667182;
  if (a1 == 1)
    return 0xD000000000000010;
  return 0x746E656D75677261;
}

uint64_t ToolDescriptionEnvelope.FunctionDescriptionEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
    v8[13] = 2;
    type metadata accessor for SchemaEnvelope(0);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type SchemaEnvelope and conformance SchemaEnvelope);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int ToolDescriptionEnvelope.FunctionDescriptionEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  type metadata accessor for GenerationSchema();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void ToolDescriptionEnvelope.FunctionDescriptionEnvelope.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  char v23;
  char v24;

  v18 = a2;
  v19 = type metadata accessor for SchemaEnvelope(0);
  MEMORY[0x24BDAC7A8](v19);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v21 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v21);
  }
  else
  {
    v17 = v9;
    v24 = 0;
    *v11 = KeyedDecodingContainer.decode(_:forKey:)();
    v11[1] = v13;
    v23 = 1;
    v11[2] = KeyedDecodingContainer.decode(_:forKey:)();
    v11[3] = v14;
    v22 = 2;
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type SchemaEnvelope and conformance SchemaEnvelope);
    v15 = v20;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v15);
    outlined init with take of DocumentRegistrationEnvelope((uint64_t)v5, (uint64_t)v11 + *(int *)(v17 + 24), type metadata accessor for SchemaEnvelope);
    outlined init with copy of DocumentEnvelope((uint64_t)v11, v18, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v21);
    outlined destroy of Prompt.Turn.Segment((uint64_t)v11, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
  }
}

uint64_t ToolDescriptionEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t ToolDescriptionEnvelope.CodingKeys.stringValue.getter()
{
  return 1701869940;
}

uint64_t ToolDescriptionEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolDescriptionEnvelope.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope and conformance ToolDescriptionEnvelope.ToolTypeEnvelope);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ToolDescriptionEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = a2;
  v4 = type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
  MEMORY[0x24BDAC7A8](v4);
  v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolDescriptionEnvelope.CodingKeys>);
  v14 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolDescriptionEnvelope(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope and conformance ToolDescriptionEnvelope.ToolTypeEnvelope);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of DocumentRegistrationEnvelope(v15, (uint64_t)v11, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
    outlined init with take of DocumentRegistrationEnvelope((uint64_t)v11, v13, type metadata accessor for ToolDescriptionEnvelope);
  }
  return __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  char *v0;

  return ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  StreamingRequest.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolDescriptionEnvelope.ToolTypeEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolDescriptionEnvelope.ToolTypeEnvelope(_QWORD *a1)
{
  return ToolDescriptionEnvelope.ToolTypeEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  char *v0;

  return ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for GenerationSchema();
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type GenerationSchema and conformance GenerationSchema);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  ToolDescriptionEnvelope.FunctionDescriptionEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope(_QWORD *a1)
{
  return ToolDescriptionEnvelope.FunctionDescriptionEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolDescriptionEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ToolDescriptionEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolDescriptionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolDescriptionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ToolDescriptionEnvelope@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ToolDescriptionEnvelope.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolDescriptionEnvelope(_QWORD *a1)
{
  return ToolDescriptionEnvelope.encode(to:)(a1);
}

uint64_t ToolCallEnvelope.KindEnvelope.hash(into:)()
{
  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_203_1();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_49_1();
  return OUTLINED_FUNCTION_124_0();
}

void static ToolCallEnvelope.KindEnvelope.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  OUTLINED_FUNCTION_274_0();
  v6 = v6 && v4 == v5;
  if ((v6 || (OUTLINED_FUNCTION_24_0() & 1) != 0) && (v3 != v1 || v2 != v0))
    OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_97();
}

uint64_t ToolCallEnvelope.KindEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t ToolCallEnvelope.KindEnvelope.CodingKeys.stringValue.getter()
{
  return 0x6E6F6974636E7566;
}

uint64_t ToolCallEnvelope.KindEnvelope.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v17 = a4;
  v18 = a5;
  v15 = a2;
  v16 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolCallEnvelope.KindEnvelope.FunctionCodingKeys>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolCallEnvelope.KindEnvelope.CodingKeys>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v19 = v15;
  v20 = v16;
  v21 = v17;
  v22 = v18;
  lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

Swift::Int ToolCallEnvelope.KindEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

_QWORD *ToolCallEnvelope.KindEnvelope.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolCallEnvelope.KindEnvelope.FunctionCodingKeys>);
  v2 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolCallEnvelope.KindEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  v10 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v10)
    goto LABEL_8;
  v27 = v2;
  v11 = v29;
  v31 = v6;
  v12 = KeyedDecodingContainer.allKeys.getter();
  v13 = *(_QWORD *)(v12 + 16);
  v28 = a1;
  if (!v13)
  {
    v18 = v5;
LABEL_7:
    v19 = v31;
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v22 = &unk_2519CF120;
    v9 = v8;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v18);
    a1 = v28;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    return v9;
  }
  specialized ArraySlice.subscript.getter(1, v13, v12, v12 + 32, 0, (2 * v13) | 1);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  if (v15 != v17 >> 1)
  {
    v18 = v5;
    goto LABEL_7;
  }
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24 = v31;
  v25 = (uint64_t)v28;
  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v11);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  v9 = v30;
  __swift_destroy_boxed_opaque_existential_0Tm(v25);
  return v9;
}

uint64_t PromptRenderingEnvelope.SourceEnvelope.hash(into:)()
{
  OUTLINED_FUNCTION_500();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_663();
  OUTLINED_FUNCTION_49_1();
  return OUTLINED_FUNCTION_124_0();
}

void static PromptRenderingEnvelope.SourceEnvelope.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  BOOL v8;

  OUTLINED_FUNCTION_274_0();
  v6 = v6 && v4 == v5;
  if ((v6 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v7 & 1) != 0))
    && (v3 == v1 ? (v8 = v2 == v0) : (v8 = 0), !v8))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    OUTLINED_FUNCTION_97();
  }
}

void PromptRenderingEnvelope.SourceEnvelope.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(void);
  void (*v4)(void);
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_6_2();
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_22_1();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_68_0();
  v7 = (_QWORD *)OUTLINED_FUNCTION_484();
  __swift_project_boxed_opaque_existential_1(v7, v8);
  v4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v0)
    KeyedEncodingContainer.encode(_:forKey:)();
  OUTLINED_FUNCTION_89_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_653();
  OUTLINED_FUNCTION_2_4();
}

void PromptRenderingEnvelope.SourceEnvelope.hashValue.getter()
{
  OUTLINED_FUNCTION_351();
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_49_1();
  OUTLINED_FUNCTION_213();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

void PromptRenderingEnvelope.SourceEnvelope.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  void (*v3)(void);
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_6_2();
  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(v4);
  v5 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_257();
  v3();
  OUTLINED_FUNCTION_129_0();
  if (v0)
  {
    OUTLINED_FUNCTION_307();
  }
  else
  {
    OUTLINED_FUNCTION_480();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_480();
    OUTLINED_FUNCTION_183_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    OUTLINED_FUNCTION_72();
    OUTLINED_FUNCTION_307();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_152();
  }
  OUTLINED_FUNCTION_420();
}

void ToolCallEnvelope.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_69_0();
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_185_0();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_83_1();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_18();
  if (*(_QWORD *)(v0 + 56) >> 60 == 15)
  {
    OUTLINED_FUNCTION_66_0();
    OUTLINED_FUNCTION_22_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    v1 = OUTLINED_FUNCTION_195_0();
    outlined copy of Data._Representation(v1, v2);
    Data.hash(into:)();
    v3 = OUTLINED_FUNCTION_195_0();
    OUTLINED_FUNCTION_7_1(v3, v4);
  }
}

void static ToolCallEnvelope.== infix(_:_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  OUTLINED_FUNCTION_120_1(a1);
  v5 = v5 && v3 == v4;
  if (v5 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v6 & 1) != 0))
  {
    v7 = v2[4];
    v8 = v2[5];
    v9 = v1[4];
    v10 = v1[5];
    v11 = v2[2] == v1[2] && v2[3] == v1[3];
    if (v11 || (OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v12 & 1) != 0))
    {
      v13 = v7 == v9 && v8 == v10;
      if (v13 || (OUTLINED_FUNCTION_475(), OUTLINED_FUNCTION_24_0(), OUTLINED_FUNCTION_204_0(), (v14 & 1) != 0))
      {
        v16 = v2[6];
        v15 = v2[7];
        v18 = v1[6];
        v17 = v1[7];
        OUTLINED_FUNCTION_415();
        if (!v5 & v19)
        {
          OUTLINED_FUNCTION_509();
          if (!v5 & v19)
            goto LABEL_24;
        }
        else
        {
          OUTLINED_FUNCTION_509();
          if (!(!v20 & v19))
          {
            outlined copy of Data?(v16, v15);
            outlined copy of Data?(v18, v17);
            MEMORY[0x2495A59A8](v16, v15, v18, v17);
            OUTLINED_FUNCTION_413(v18);
            OUTLINED_FUNCTION_375(v16);
            goto LABEL_24;
          }
        }
        outlined copy of Data?(v16, v15);
        outlined copy of Data?(v18, v17);
        OUTLINED_FUNCTION_375(v16);
        OUTLINED_FUNCTION_413(v18);
      }
    }
  }
LABEL_24:
  OUTLINED_FUNCTION_22_0();
}

uint64_t ToolCallEnvelope.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 1684957547 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t ToolCallEnvelope.CodingKeys.stringValue.getter(char a1)
{
  if (!a1)
    return 25705;
  if (a1 == 1)
    return 1684957547;
  return 0x6F666E4972657375;
}

uint64_t ToolCallEnvelope.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  _OWORD v12[2];
  _BYTE v13[16];
  _OWORD v14[2];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ToolCallEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    outlined init with take of ToolCallEnvelope.KindEnvelope((_OWORD *)(v3 + 16), v14);
    outlined init with take of ToolCallEnvelope.KindEnvelope(v14, v12);
    v11 = 1;
    lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    outlined init with take of Locale?(v3 + 48, (uint64_t)v13, &demangling cache variable for type metadata for Data?);
    outlined init with take of Locale?((uint64_t)v13, (uint64_t)v12, &demangling cache variable for type metadata for Data?);
    v11 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int ToolCallEnvelope.hashValue.getter()
{
  Hasher.init(_seed:)();
  ToolCallEnvelope.hash(into:)();
  return Hasher._finalize()();
}

uint64_t ToolCallEnvelope.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ToolCallEnvelope.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    return outlined consume of Data?(0, 0xF000000000000000);
  }
  else
  {
    LOBYTE(v25) = 0;
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v11 = v10;
    v24 = v9;
    v29 = 1;
    lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v26;
    v13 = v28;
    v20 = v27;
    v21 = v25;
    v29 = 2;
    lazy protocol witness table accessor for type Data and conformance Data();
    v23 = v12;
    swift_bridgeObjectRetain();
    v22 = v13;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v25;
    v15 = v26;
    outlined copy of Data?(v25, v26);
    outlined consume of Data?(0, 0xF000000000000000);
    swift_bridgeObjectRetain();
    v16 = v23;
    swift_bridgeObjectRetain();
    v17 = v22;
    swift_bridgeObjectRetain();
    outlined copy of Data?(v14, v15);
    outlined consume of Data?(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = outlined consume of Data?(v14, v15);
    *a2 = v24;
    a2[1] = v11;
    a2[2] = v21;
    a2[3] = v16;
    a2[4] = v20;
    a2[5] = v17;
    a2[6] = v14;
    a2[7] = v15;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolCallEnvelope.KindEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ToolCallEnvelope.KindEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.KindEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.KindEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolCallEnvelope.KindEnvelope()
{
  return ToolCallEnvelope.KindEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ToolCallEnvelope.KindEnvelope()
{
  return ToolCallEnvelope.KindEnvelope.hash(into:)();
}

_QWORD *protocol witness for Decodable.init(from:) in conformance ToolCallEnvelope.KindEnvelope@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = ToolCallEnvelope.KindEnvelope.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolCallEnvelope.KindEnvelope(_QWORD *a1)
{
  uint64_t *v1;

  return ToolCallEnvelope.KindEnvelope.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToolCallEnvelope.KindEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PromptCompletionEnvelope.CandidateEnvelope(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))static ToolCallEnvelope.KindEnvelope.== infix(_:_:));
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable.hashValue.getter in conformance ToolCallEnvelope.FunctionEnvelope()
{
  PromptRenderingEnvelope.SourceEnvelope.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ToolCallEnvelope.FunctionEnvelope()
{
  return PromptRenderingEnvelope.SourceEnvelope.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PromptRenderingEnvelope.SourceEnvelope()
{
  OUTLINED_FUNCTION_303_0();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_72_0();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_90();
  String.hash(into:)();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_208_0();
}

void protocol witness for Decodable.init(from:) in conformance ToolCallEnvelope.FunctionEnvelope(_QWORD *a1@<X8>)
{
  protocol witness for Decodable.init(from:) in conformance PromptRenderingEnvelope.SourceEnvelope(a1);
}

void protocol witness for Encodable.encode(to:) in conformance ToolCallEnvelope.FunctionEnvelope()
{
  PromptRenderingEnvelope.SourceEnvelope.encode(to:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ToolCallEnvelope.CodingKeys()
{
  char *v0;

  return ToolCallEnvelope.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ToolCallEnvelope.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = ToolCallEnvelope.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolCallEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ToolCallEnvelope.CodingKeys()
{
  lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolCallEnvelope()
{
  return ToolCallEnvelope.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ToolCallEnvelope()
{
  ToolCallEnvelope.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolCallEnvelope()
{
  Hasher.init(_seed:)();
  ToolCallEnvelope.hash(into:)();
  return Hasher._finalize()();
}

double protocol witness for Decodable.init(from:) in conformance ToolCallEnvelope@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  ToolCallEnvelope.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ToolCallEnvelope(_QWORD *a1)
{
  return ToolCallEnvelope.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ToolCallEnvelope(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  _OWORD v8[8];

  v2 = a1[1];
  v8[0] = *a1;
  v8[1] = v2;
  v3 = a1[3];
  v8[2] = a1[2];
  v8[3] = v3;
  v4 = a2[1];
  v8[4] = *a2;
  v8[5] = v4;
  v5 = a2[3];
  v8[6] = a2[2];
  v8[7] = v5;
  static ToolCallEnvelope.== infix(_:_:)((uint64_t)v8);
  return v6 & 1;
}

void RequestPayload.hash(into:)()
{
  OneShotRequest.hash(into:)();
}

void OneShotRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_7_0();
  v3 = v2;
  v4 = v0;
  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  v9 = OUTLINED_FUNCTION_21_0();
  v10 = v3(v9);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (_QWORD *)((char *)v24 - v11);
  OUTLINED_FUNCTION_666(v4, (uint64_t)v24 - v11);
  v13 = OUTLINED_FUNCTION_259_0();
  if (v13)
  {
    if (v13 == 1)
    {
      OUTLINED_FUNCTION_505((uint64_t)v12, v1);
      OUTLINED_FUNCTION_155_0(1uLL);
      OUTLINED_FUNCTION_636();
      v14 = OUTLINED_FUNCTION_186_0();
    }
    else
    {
      OUTLINED_FUNCTION_300_0((uint64_t)v12, (uint64_t)v7);
      OUTLINED_FUNCTION_155_0(2uLL);
      OUTLINED_FUNCTION_637();
      v14 = (uint64_t)v7;
      v15 = type metadata accessor for CompletePromptTemplateRequest;
    }
    outlined destroy of Prompt.Turn.Segment(v14, v15);
  }
  else
  {
    v16 = *v12;
    v24[1] = v12[1];
    v17 = v12[4];
    v24[2] = v12[3];
    v24[3] = v16;
    v18 = v12[5];
    v19 = v12[6];
    v20 = v12[8];
    v25 = v12[7];
    v21 = v25;
    v23 = v12[9];
    v22 = v12[10];
    OUTLINED_FUNCTION_155_0(0);
    v26 = v17;
    v27 = v18;
    v28 = v19;
    v29 = v21;
    v30 = v20;
    v31 = v23;
    v32 = v22;
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_88_0();
    String.hash(into:)();
    OUTLINED_FUNCTION_77_0();
    specialized Array<A>.hash(into:)();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_88_0();
    specialized Array<A>.hash(into:)();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_11();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_362();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_18();
    OUTLINED_FUNCTION_18();
  }
  OUTLINED_FUNCTION_4_1();
}

void static RequestPayload.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40[9];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;

  OUTLINED_FUNCTION_7_0();
  v5 = v4;
  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v8);
  v9 = OUTLINED_FUNCTION_21_0();
  type metadata accessor for RequestPayload(v9);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_131_1();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_199_1();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (uint64_t *)((char *)v40 - v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (RequestPayload, RequestPayload));
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_192_1(v16, v40[0]);
  OUTLINED_FUNCTION_228_0(v5, v3);
  v17 = OUTLINED_FUNCTION_113_1();
  if ((_DWORD)v17)
  {
    if ((_DWORD)v17 == 1)
    {
      OUTLINED_FUNCTION_316_0(v17, v18, type metadata accessor for RequestPayload);
      if (OUTLINED_FUNCTION_113_1() == 1)
      {
        OUTLINED_FUNCTION_181_1(v3);
        OUTLINED_FUNCTION_599();
        OUTLINED_FUNCTION_110_1();
        v19 = v2;
LABEL_9:
        OUTLINED_FUNCTION_252(v19);
        OUTLINED_FUNCTION_303(v24, type metadata accessor for RequestPayload);
        goto LABEL_14;
      }
      v25 = type metadata accessor for CompletePromptRequest;
      v26 = v2;
    }
    else
    {
      OUTLINED_FUNCTION_305_0(v0, v18, type metadata accessor for RequestPayload);
      if (OUTLINED_FUNCTION_113_1() == 2)
      {
        OUTLINED_FUNCTION_181_1(v3);
        OUTLINED_FUNCTION_598();
        OUTLINED_FUNCTION_110_1();
        v19 = v1;
        goto LABEL_9;
      }
      v25 = type metadata accessor for CompletePromptTemplateRequest;
      v26 = v1;
    }
    outlined destroy of Prompt.Turn.Segment(v26, v25);
LABEL_13:
    OUTLINED_FUNCTION_244_0(v23, &demangling cache variable for type metadata for (RequestPayload, RequestPayload));
    goto LABEL_14;
  }
  OUTLINED_FUNCTION_315_0(v17, v18, type metadata accessor for RequestPayload);
  v20 = *v14;
  v21 = (char *)v14[1];
  v45 = v14[2];
  v46 = v21;
  v22 = v14[9];
  v43 = v20;
  v44 = v22;
  if (OUTLINED_FUNCTION_113_1())
  {
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_37_0();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_390();
    OUTLINED_FUNCTION_566();
    v23 = OUTLINED_FUNCTION_387();
    goto LABEL_13;
  }
  v27 = OUTLINED_FUNCTION_49_2();
  v41 = v35;
  v36 = v36 && v46 == (char *)v35;
  if ((v36 || (v27 = OUTLINED_FUNCTION_24_0(), (v27 & 1) != 0))
    && (OUTLINED_FUNCTION_615(v27, v28, v29, v30, v31, v32, v33, v34, v40[0], v40[1], v40[2], v40[3], v40[4], v40[5], v40[6], v40[7], v40[8], v41, v42,
          v43),
        (v37 & 1) != 0)
    && (OUTLINED_FUNCTION_488(), (v38 & 1) != 0))
  {
    LODWORD(v43) = OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_489();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_388();
    OUTLINED_FUNCTION_502();
    OUTLINED_FUNCTION_112();
    v39 = OUTLINED_FUNCTION_37_0();
  }
  else
  {
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_186();
    OUTLINED_FUNCTION_152();
    OUTLINED_FUNCTION_489();
    OUTLINED_FUNCTION_39_0();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_199_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_388();
    OUTLINED_FUNCTION_502();
    OUTLINED_FUNCTION_114_0();
    v39 = OUTLINED_FUNCTION_387();
  }
  OUTLINED_FUNCTION_303(v39, type metadata accessor for RequestPayload);
LABEL_14:
  OUTLINED_FUNCTION_565();
  OUTLINED_FUNCTION_4_1();
}

void OneShotRequest.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v4 = a1 == 0x6B6F54746E756F63 && a2 == 0xEB00000000736E65;
  if (v4
    || (OUTLINED_FUNCTION_54_1(), (OUTLINED_FUNCTION_24_0() & 1) != 0)
    || (v3 == 0x6574656C706D6F63 ? (v5 = v2 == 0xEE0074706D6F7250) : (v5 = 0),
        v5 || (OUTLINED_FUNCTION_24_0() & 1) != 0 || v3 == 0xD000000000000016 && v2 == 0x8000000248BCB080))
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_322();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_213();
  }
  OUTLINED_FUNCTION_104();
}

void StreamingRequest.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_2_1();
  Hasher._combine(_:)(a1);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest.CodingKeys()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_303_0();
  OUTLINED_FUNCTION_1_0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RequestPayload.CountTokensCodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RequestPayload.CountTokensCodingKeys()
{
  lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
  return CodingKey.debugDescription.getter();
}

void RequestPayload.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  OUTLINED_FUNCTION_6_2();
  v38 = v1;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CompletePromptTemplateCodingKeys>);
  v27 = *(_QWORD *)(v37 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v5);
  v36 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_76_2(v8, v26);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CompletePromptCodingKeys>);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  v31 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for CompletePromptRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_221_1(v13, v26);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CountTokensCodingKeys>);
  v28 = *(_QWORD *)(v30 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_21_0();
  type metadata accessor for RequestPayload(v15);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_289_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RequestPayload.CodingKeys>);
  OUTLINED_FUNCTION_270_0();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_670();
  OUTLINED_FUNCTION_401();
  outlined init with copy of DocumentEnvelope(v0, v4, type metadata accessor for RequestPayload);
  v20 = OUTLINED_FUNCTION_623();
  if (v20)
  {
    if (v20 == 1)
    {
      OUTLINED_FUNCTION_421();
      OUTLINED_FUNCTION_557();
      v21 = (uint64_t)v31;
      OUTLINED_FUNCTION_28_0();
      lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
      OUTLINED_FUNCTION_226_0();
      OUTLINED_FUNCTION_58_1(v21, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
      OUTLINED_FUNCTION_647();
      v22 = OUTLINED_FUNCTION_520();
    }
    else
    {
      v24 = v35;
      OUTLINED_FUNCTION_340(v4, v35);
      OUTLINED_FUNCTION_692();
      v25 = (uint64_t)v36;
      OUTLINED_FUNCTION_28_0();
      OUTLINED_FUNCTION_503((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
      OUTLINED_FUNCTION_260_0();
      OUTLINED_FUNCTION_89_1(v25, *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8));
      outlined destroy of Prompt.Turn.Segment(v24, type metadata accessor for CompletePromptTemplateRequest);
      v22 = OUTLINED_FUNCTION_172_1();
    }
    v23(v22);
  }
  else
  {
    OUTLINED_FUNCTION_72_2();
    lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
    OUTLINED_FUNCTION_28_0();
    OUTLINED_FUNCTION_97_1();
    OUTLINED_FUNCTION_352();
    OUTLINED_FUNCTION_194_0(v2, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    OUTLINED_FUNCTION_89_1((uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    OUTLINED_FUNCTION_46_0();
    OUTLINED_FUNCTION_227();
    OUTLINED_FUNCTION_199_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_566();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_588();
  OUTLINED_FUNCTION_2_4();
}

void RequestPayload.hashValue.getter()
{
  StreamingRequest.hashValue.getter();
}

void RequestPayload.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  OUTLINED_FUNCTION_6_2();
  v5 = v4;
  v34 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CompletePromptTemplateCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_76_2(v7, v29);
  v33 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CompletePromptCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_219_1(v9, v30);
  v32 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CountTokensCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_222_1(v11, v31);
  v37 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<RequestPayload.CodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  v13 = OUTLINED_FUNCTION_50_2();
  type metadata accessor for RequestPayload(v13);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_217_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_469();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_170_1();
  MEMORY[0x24BDAC7A8](v17);
  v18 = *(_QWORD *)(v5 + 32);
  OUTLINED_FUNCTION_670();
  OUTLINED_FUNCTION_251_0();
  if (!v0)
  {
    v19 = OUTLINED_FUNCTION_148_1();
    v20 = *(_QWORD *)(v19 + 16);
    if (v20)
    {
      OUTLINED_FUNCTION_149_1(v19, v20);
      OUTLINED_FUNCTION_386();
      if (!(v3 >> 1))
      {
        if ((_DWORD)v18)
        {
          if ((_DWORD)v18 != 1)
          {
            OUTLINED_FUNCTION_692();
            OUTLINED_FUNCTION_60_2();
            type metadata accessor for CompletePromptTemplateRequest(0);
            lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
            OUTLINED_FUNCTION_178_0();
            OUTLINED_FUNCTION_88_1(v36, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
            OUTLINED_FUNCTION_24_2();
            OUTLINED_FUNCTION_34_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
            OUTLINED_FUNCTION_510();
            OUTLINED_FUNCTION_207_1(v18, v26, type metadata accessor for RequestPayload);
            v2 = v5;
LABEL_15:
            OUTLINED_FUNCTION_635(v27, v28, type metadata accessor for RequestPayload);
            goto LABEL_11;
          }
          OUTLINED_FUNCTION_557();
          OUTLINED_FUNCTION_169_1();
          v2 = v5;
          type metadata accessor for CompletePromptRequest(0);
          lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
          OUTLINED_FUNCTION_193_0();
          OUTLINED_FUNCTION_34_1(v18, *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8));
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_183_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
          OUTLINED_FUNCTION_369();
          v25 = v37;
        }
        else
        {
          lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys();
          OUTLINED_FUNCTION_60_2();
          lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest();
          OUTLINED_FUNCTION_193_0();
          v2 = v5;
          OUTLINED_FUNCTION_58_1(v35, *(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
          OUTLINED_FUNCTION_24_2();
          OUTLINED_FUNCTION_34_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v37 + 8));
          OUTLINED_FUNCTION_74_2();
          v25 = v5;
        }
        OUTLINED_FUNCTION_207_1(v25, v24, type metadata accessor for RequestPayload);
        goto LABEL_15;
      }
      OUTLINED_FUNCTION_466();
    }
    else
    {
      v2 = v5;
    }
    OUTLINED_FUNCTION_378();
    OUTLINED_FUNCTION_3();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    OUTLINED_FUNCTION_229_0();
    v21 = OUTLINED_FUNCTION_46_2();
    OUTLINED_FUNCTION_100_1(v21, *MEMORY[0x24BEE26D0]);
    OUTLINED_FUNCTION_652();
    swift_unknownObjectRelease();
    v22 = OUTLINED_FUNCTION_530();
    v23(v22);
    goto LABEL_11;
  }
  v2 = v5;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_0Tm(v2);
  OUTLINED_FUNCTION_653();
  OUTLINED_FUNCTION_2_4();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance RequestPayload()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void protocol witness for Decodable.init(from:) in conformance RequestPayload()
{
  RequestPayload.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance RequestPayload()
{
  RequestPayload.encode(to:)();
}

void StreamingRequestPayload.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_134_1();
  type metadata accessor for CompletePromptRequest(v3);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_335();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_288_0(v6, v7, v12);
  if (OUTLINED_FUNCTION_267() == 1)
  {
    OUTLINED_FUNCTION_505(v1, v0);
    OUTLINED_FUNCTION_272();
    CompletePromptTemplateRequest.hash(into:)();
    v8 = OUTLINED_FUNCTION_195_0();
  }
  else
  {
    v10 = OUTLINED_FUNCTION_186_0();
    outlined init with take of DocumentRegistrationEnvelope(v10, v11, type metadata accessor for CompletePromptRequest);
    OUTLINED_FUNCTION_69_0();
    CompletePromptRequest.hash(into:)();
    v8 = OUTLINED_FUNCTION_57_2();
  }
  outlined destroy of Prompt.Turn.Segment(v8, v9);
  OUTLINED_FUNCTION_22_0();
}

void static StreamingRequestPayload.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_7_0();
  a19 = v24;
  a20 = v25;
  v27 = v26;
  v29 = v28;
  type metadata accessor for CompletePromptTemplateRequest(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v30);
  v31 = OUTLINED_FUNCTION_77_1();
  type metadata accessor for CompletePromptRequest(v31);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_335();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_374();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_278_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (StreamingRequestPayload, StreamingRequestPayload));
  OUTLINED_FUNCTION_3_2();
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (char *)&a9 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = (uint64_t)&v38[*(int *)(v36 + 48)];
  outlined init with copy of DocumentEnvelope(v29, (uint64_t)v38, type metadata accessor for StreamingRequestPayload);
  outlined init with copy of DocumentEnvelope(v27, v39, type metadata accessor for StreamingRequestPayload);
  if (OUTLINED_FUNCTION_259_0() == 1)
  {
    OUTLINED_FUNCTION_403((uint64_t)v38, v40, type metadata accessor for StreamingRequestPayload);
    if (OUTLINED_FUNCTION_259_0() == 1)
    {
      v41 = OUTLINED_FUNCTION_523();
      OUTLINED_FUNCTION_505(v41, v42);
      OUTLINED_FUNCTION_482();
      static CompletePromptTemplateRequest.== infix(_:_:)();
      OUTLINED_FUNCTION_204_1(v20);
      v43 = OUTLINED_FUNCTION_186_0();
LABEL_9:
      outlined destroy of Prompt.Turn.Segment(v43, v44);
      OUTLINED_FUNCTION_303(v48, type metadata accessor for StreamingRequestPayload);
      goto LABEL_10;
    }
    v45 = type metadata accessor for CompletePromptTemplateRequest;
    v46 = v22;
  }
  else
  {
    OUTLINED_FUNCTION_305_0((uint64_t)v38, v40, type metadata accessor for StreamingRequestPayload);
    if (OUTLINED_FUNCTION_259_0() != 1)
    {
      OUTLINED_FUNCTION_266_0(v39, v21);
      static CompletePromptRequest.== infix(_:_:)();
      OUTLINED_FUNCTION_252(v21);
      v43 = OUTLINED_FUNCTION_663();
      goto LABEL_9;
    }
    v45 = type metadata accessor for CompletePromptRequest;
    v46 = v23;
  }
  outlined destroy of Prompt.Turn.Segment(v46, v45);
  OUTLINED_FUNCTION_244_0(v47, &demangling cache variable for type metadata for (StreamingRequestPayload, StreamingRequestPayload));
LABEL_10:
  OUTLINED_FUNCTION_4_1();
}

uint64_t StreamingRequestPayload.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6574656C706D6F63 && a2 == 0xEE0074706D6F7250;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000248BCB080)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void RegisterDocumentRequest.CodingKeys.hashValue.getter(char a1)
{
  OUTLINED_FUNCTION_2_1();
  Hasher._combine(_:)(a1 & 1);
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

uint64_t StreamingRequestPayload.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000016;
  else
    return 0x6574656C706D6F63;
}

void StreamingRequest.CompletePromptCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_213();
  }
  OUTLINED_FUNCTION_104();
}

void StreamingRequest.CompletePromptCodingKeys.hashValue.getter()
{
  OUTLINED_FUNCTION_2_1();
  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StreamingRequestPayload.CodingKeys()
{
  char *v0;

  return StreamingRequestPayload.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StreamingRequestPayload.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = StreamingRequestPayload.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequestPayload.CodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequestPayload.CodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequestPayload.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequestPayload.CompletePromptCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
  return CodingKey.debugDescription.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest.CompletePromptCodingKeys()
{
  OUTLINED_FUNCTION_303_0();
  OUTLINED_FUNCTION_69_0();
  OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_4_0();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys()
{
  lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys();
  return CodingKey.debugDescription.getter();
}

void StreamingRequestPayload.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  OUTLINED_FUNCTION_6_2();
  v24 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequestPayload.CompletePromptTemplateCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_133_1(v6, v19);
  OUTLINED_FUNCTION_434();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_132_1(v8, v20);
  v21 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequestPayload.CompletePromptCodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v9);
  v10 = OUTLINED_FUNCTION_134_1();
  type metadata accessor for CompletePromptRequest(v10);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v11);
  v12 = OUTLINED_FUNCTION_223_1();
  type metadata accessor for StreamingRequestPayload(v12);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_145();
  v25 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StreamingRequestPayload.CodingKeys>)
                  - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_118_0();
  OUTLINED_FUNCTION_326();
  lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  OUTLINED_FUNCTION_622();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of DocumentEnvelope(v1, v2, type metadata accessor for StreamingRequestPayload);
  if (OUTLINED_FUNCTION_623() == 1)
  {
    OUTLINED_FUNCTION_340(v2, v22);
    OUTLINED_FUNCTION_555();
    OUTLINED_FUNCTION_525();
    OUTLINED_FUNCTION_503((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_34_1(v23, *(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    v15 = v22;
    v16 = type metadata accessor for CompletePromptTemplateRequest;
  }
  else
  {
    v17 = OUTLINED_FUNCTION_616();
    outlined init with take of DocumentRegistrationEnvelope(v17, v18, type metadata accessor for CompletePromptRequest);
    lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
    OUTLINED_FUNCTION_525();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_34_1(v0, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
    v15 = v4;
    v16 = type metadata accessor for CompletePromptRequest;
  }
  outlined destroy of Prompt.Turn.Segment(v15, v16);
  OUTLINED_FUNCTION_183_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  OUTLINED_FUNCTION_588();
  OUTLINED_FUNCTION_2_4();
}

void StreamingRequestPayload.hashValue.getter()
{
  StreamingRequest.hashValue.getter();
}

void StreamingRequestPayload.init(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  OUTLINED_FUNCTION_6_2();
  v56 = v1;
  v5 = v4;
  v47 = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequestPayload.CompletePromptTemplateCodingKeys>);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_220_0(v9, v43);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequestPayload.CompletePromptCodingKeys>);
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_440(v12, v43);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StreamingRequestPayload.CodingKeys>);
  v54 = *(_QWORD *)(v13 - 8);
  v55 = v13;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_50_2();
  v16 = type metadata accessor for StreamingRequestPayload(v15);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_284_0();
  OUTLINED_FUNCTION_469();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v43 - v20;
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_278_0();
  __swift_project_boxed_opaque_existential_1(v5, v5[3]);
  lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys();
  v22 = v56;
  OUTLINED_FUNCTION_129_0();
  if (v22)
    goto LABEL_8;
  v44 = v0;
  v45 = v21;
  v43 = v2;
  v46 = v16;
  v56 = v5;
  v23 = KeyedDecodingContainer.allKeys.getter();
  v25 = *(_QWORD *)(v23 + 16);
  v26 = v3;
  if (!v25
    || (v27 = *(_BYTE *)(v23 + 32),
        OUTLINED_FUNCTION_368(1, v25, v23, v23 + 32, v24, (2 * v25) | 1),
        v29 = v28,
        v31 = v30,
        OUTLINED_FUNCTION_46_0(),
        v29 != v31 >> 1))
  {
    v35 = v54;
    v36 = v46;
    v37 = OUTLINED_FUNCTION_378();
    OUTLINED_FUNCTION_3();
    v39 = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v39 = v36;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, *MEMORY[0x24BEE26D0], v37);
    swift_willThrow();
    OUTLINED_FUNCTION_418();
    OUTLINED_FUNCTION_89_1(v26, *(uint64_t (**)(uint64_t, uint64_t))(v35 + 8));
    v5 = v56;
LABEL_8:
    v41 = (uint64_t)v5;
    goto LABEL_9;
  }
  if ((v27 & 1) != 0)
  {
    OUTLINED_FUNCTION_555();
    v32 = v53;
    OUTLINED_FUNCTION_364();
    OUTLINED_FUNCTION_434();
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
    v33 = v44;
    OUTLINED_FUNCTION_396();
    v34 = v54;
    OUTLINED_FUNCTION_34_1(v32, *(uint64_t (**)(uint64_t, uint64_t))(v50 + 8));
  }
  else
  {
    lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys();
    v40 = v52;
    OUTLINED_FUNCTION_364();
    type metadata accessor for CompletePromptRequest(0);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
    v33 = (uint64_t)v45;
    OUTLINED_FUNCTION_396();
    v34 = v54;
    OUTLINED_FUNCTION_34_1(v40, *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8));
  }
  OUTLINED_FUNCTION_418();
  OUTLINED_FUNCTION_89_1(v26, *(uint64_t (**)(uint64_t, uint64_t))(v34 + 8));
  swift_storeEnumTagMultiPayload();
  v42 = v43;
  outlined init with take of DocumentRegistrationEnvelope(v33, v43, type metadata accessor for StreamingRequestPayload);
  outlined init with take of DocumentRegistrationEnvelope(v42, v47, type metadata accessor for StreamingRequestPayload);
  v41 = (uint64_t)v56;
LABEL_9:
  __swift_destroy_boxed_opaque_existential_0Tm(v41);
  OUTLINED_FUNCTION_2_4();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequestPayload()
{
  protocol witness for Hashable._rawHashValue(seed:) in conformance StreamingRequest();
}

void protocol witness for Decodable.init(from:) in conformance StreamingRequestPayload()
{
  StreamingRequestPayload.init(from:)();
}

void protocol witness for Encodable.encode(to:) in conformance StreamingRequestPayload()
{
  StreamingRequestPayload.encode(to:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, (uint64_t (*)(_QWORD))MEMORY[0x24BEB86E8]);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn.Segment>, type metadata accessor for Prompt.Turn.Segment);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Turn>, type metadata accessor for Prompt.Turn);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Segment>, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Component>, (uint64_t (*)(_QWORD))MEMORY[0x24BE7AB30]);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ChatMessagePrompt>, (uint64_t (*)(_QWORD))MEMORY[0x24BE7A858]);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.ToolCallResult>, (void (*)(_QWORD, uint64_t, _QWORD *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, _QWORD *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Attachment>, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8818]);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.Delimiter>, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8928]);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)>, type metadata accessor for PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:)>, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Tool>, (uint64_t (*)(_QWORD))MEMORY[0x24BE3B918]);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ToolDescription>, type metadata accessor for ToolDescription);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_470();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_206_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  OUTLINED_FUNCTION_359();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Prompt.ToolCall>);
    v7 = (_QWORD *)OUTLINED_FUNCTION_16();
    v8 = _swift_stdlib_malloc_size(v7);
    v7[2] = v2;
    v7[3] = 2 * ((uint64_t)(v8 - 32) / 64);
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)OUTLINED_FUNCTION_607();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_213();
  }
  else
  {
    v12 = OUTLINED_FUNCTION_282_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
  OUTLINED_FUNCTION_97();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  const void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_470();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_206_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  OUTLINED_FUNCTION_359();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TurnSpan #1 in Prompt.turns()>);
    v6 = (const void *)OUTLINED_FUNCTION_16();
    v7 = _swift_stdlib_malloc_size(v6);
    OUTLINED_FUNCTION_448(v7 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_607();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_213();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_282_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_22_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  const void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_470();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_206_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  OUTLINED_FUNCTION_359();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TurnDelimiter #1 in Prompt.turns()>);
    v6 = (const void *)OUTLINED_FUNCTION_16();
    v7 = _swift_stdlib_malloc_size(v6);
    OUTLINED_FUNCTION_448(v7 - 32);
  }
  if ((v1 & 1) != 0)
  {
    v8 = (char *)OUTLINED_FUNCTION_607();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_213();
  }
  else
  {
    v11 = OUTLINED_FUNCTION_282_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
  OUTLINED_FUNCTION_22_0();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_470();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_206_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  OUTLINED_FUNCTION_359();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PromptCompletion.Candidate>);
    v7 = (_QWORD *)OUTLINED_FUNCTION_16();
    _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_561();
    v7[2] = v2;
    v7[3] = v8;
  }
  if ((v1 & 1) != 0)
  {
    v9 = (char *)OUTLINED_FUNCTION_607();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_213();
  }
  else
  {
    v12 = OUTLINED_FUNCTION_282_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
  OUTLINED_FUNCTION_97();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  OUTLINED_FUNCTION_470();
  if ((v3 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_206_0();
      if (v5)
      {
        __break(1u);
        goto LABEL_22;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  else
  {
    v4 = v2;
  }
  v7 = *(_QWORD *)(v0 + 16);
  if (v4 <= v7)
    v8 = *(_QWORD *)(v0 + 16);
  else
    v8 = v4;
  if (!v8)
    goto LABEL_17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation)>);
  v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation))
                 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = (const void *)swift_allocObject();
  v13 = _swift_stdlib_malloc_size(v12);
  if (!v10 || (v13 - v11 == 0x8000000000000000 ? (v14 = v10 == -1) : (v14 = 0), v14))
  {
LABEL_22:
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_603();
    __break(1u);
    return;
  }
  OUTLINED_FUNCTION_448(v13 - v11);
LABEL_17:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation));
  OUTLINED_FUNCTION_117_0();
  if ((v1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + v15, v7);
    *(_QWORD *)(v0 + 16) = 0;
    OUTLINED_FUNCTION_213();
  }
  else
  {
    v16 = OUTLINED_FUNCTION_282_0();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v16, v17, v18, v19);
  }
  OUTLINED_FUNCTION_96_1();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD, uint64_t, _QWORD *, uint64_t), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v10 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_206_0();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  else
  {
    v11 = a2;
  }
  v14 = *(_QWORD *)(a4 + 16);
  if (v11 <= v14)
    v15 = *(_QWORD *)(a4 + 16);
  else
    v15 = v11;
  if (v15)
  {
    OUTLINED_FUNCTION_175_0(a1, a2, a3, a4, a5);
    v16 = (_QWORD *)OUTLINED_FUNCTION_16();
    _swift_stdlib_malloc_size(v16);
    OUTLINED_FUNCTION_561();
    v16[2] = v14;
    v16[3] = v17;
  }
  else
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v18 = v16 + 4;
  if ((v10 & 1) != 0)
  {
    a7(a4 + 32, v14, v18);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_213();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
  OUTLINED_FUNCTION_22_0();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  uint64_t v20;

  v8 = a1;
  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_113_0();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_206_0();
      if (v10)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_112_0();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  OUTLINED_FUNCTION_175_0(a1, a2, a3, a4, a5);
  v14 = *(_QWORD *)(OUTLINED_FUNCTION_683() - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (_QWORD *)swift_allocObject();
  v18 = _swift_stdlib_malloc_size(v17);
  if (!v15 || (v18 - v16 == 0x8000000000000000 ? (v19 = v15 == -1) : (v19 = 0), v19))
  {
LABEL_23:
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_603();
    __break(1u);
    return;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_18:
  OUTLINED_FUNCTION_683();
  OUTLINED_FUNCTION_117_0();
  if ((v8 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v20, v12);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_213();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v17 + v20, a4, a6);
  }
  OUTLINED_FUNCTION_96_1();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (stream: AsyncThrowingStream<DocumentRegistration, Error>, continuation: AsyncThrowingStream<DocumentRegistration, Error>.Continuation))
                   - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(OUTLINED_FUNCTION_541(a1, a2, a3, a4, a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    OUTLINED_FUNCTION_550();
    swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_213();
    OUTLINED_FUNCTION_468();
    return;
  }
  OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_69_2();
LABEL_11:
  OUTLINED_FUNCTION_16_0();
  __break(1u);
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 48 * a1 + 32);
    v6 = 3 * v4;
    v7 = &__dst[16 * v6];
    if (v5 >= v7 || &v5[16 * v6] <= __dst)
    {
      memcpy(__dst, v5, 16 * v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 3 * v4;
    v7 = &__dst[8 * v6];
    if (v5 >= v7 || &v5[8 * v6] <= __dst)
    {
      memcpy(__dst, v5, 8 * v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    result = (char *)OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_13_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    result = (char *)OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else if (a3 != result || &result[48 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_13_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    result = (char *)OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_13_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    result = (char *)OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_13_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    result = (char *)OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_13_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    result = (char *)OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_13_2(a3, result);
  }
  return result;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_528();
    if (v4 && (OUTLINED_FUNCTION_175_1(), OUTLINED_FUNCTION_686(), !v5 & v4))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_468();
      }
      else
      {
        OUTLINED_FUNCTION_225_0();
        OUTLINED_FUNCTION_318();
      }
    }
    else
    {
      OUTLINED_FUNCTION_175_1();
      OUTLINED_FUNCTION_225_0();
      OUTLINED_FUNCTION_320();
    }
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_11_3();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_528();
    if (v4 && (OUTLINED_FUNCTION_611(), OUTLINED_FUNCTION_686(), !v5 & v4))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_468();
      }
      else
      {
        OUTLINED_FUNCTION_225_0();
        OUTLINED_FUNCTION_318();
      }
    }
    else
    {
      OUTLINED_FUNCTION_611();
      OUTLINED_FUNCTION_225_0();
      OUTLINED_FUNCTION_320();
    }
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[48 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 48 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)()
{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  OUTLINED_FUNCTION_365();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    OUTLINED_FUNCTION_366();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_365();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    if (v2 + 48 * v1 <= v0 || v0 + 48 * v1 <= v2)
      return OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_365();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    if (v2 + 16 * v1 <= v0 || v0 + 16 * v1 <= v2)
      return OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_365();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    if (v2 + 40 * v1 <= v0 || v0 + 40 * v1 <= v2)
      return OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  BOOL v5;
  uint64_t result;

  OUTLINED_FUNCTION_365();
  if (v0 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    OUTLINED_FUNCTION_366();
    if (!v4 & v3)
      v5 = v2 > v1;
    else
      v5 = 0;
    if (!v5)
      return OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;

  OUTLINED_FUNCTION_365();
  if (v3 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    if (v2 + (v1 << 6) <= v0 || v0 + (v1 << 6) <= v2)
      return OUTLINED_FUNCTION_48_0();
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8928]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8818]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for Prompt.Turn);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE3C6A8]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for DocumentEnvelope);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for PromptEnvelope.DelimiterEnvelope);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for ToolDescription);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE7AB30]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, type metadata accessor for PromptMovableType in PromptMovableWithMetadata #1 in static TokenGenerator.scrubPrompt(_:scrub:));
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, &demangling cache variable for type metadata for AsyncThrowingStream<DocumentRegistration, Error>.Continuation);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE3B918]);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for AnyTooling);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    OUTLINED_FUNCTION_130_1(a1, a2, a3, a4);
    OUTLINED_FUNCTION_446();
    if (!v7 && v6)
    {
      v6 = v5 >= a3;
      v7 = v5 == a3;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      OUTLINED_FUNCTION_372();
      return OUTLINED_FUNCTION_319();
    }
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    if (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst)
      return memcpy(__dst, __src, 8 * a2);
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = (void *)OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_70_1();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a4);
    OUTLINED_FUNCTION_446();
    if (!v7 && v6)
    {
      v6 = v5 >= a3;
      v7 = v5 == a3;
    }
    else
    {
      v6 = 0;
      v7 = 0;
    }
    if (v7 || !v6)
    {
      OUTLINED_FUNCTION_372();
      return OUTLINED_FUNCTION_319();
    }
    OUTLINED_FUNCTION_3_4();
    OUTLINED_FUNCTION_69_2();
  }
  result = OUTLINED_FUNCTION_16_0();
  __break(1u);
  return result;
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  Swift::UInt v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;

  v11 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  for (v4 &= v4 - 1; ; v4 = (v9 - 1) & v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      v7 = v8 + 1;
      if (v8 + 1 >= v5)
        goto LABEL_19;
      v9 = *(_QWORD *)(v11 + 8 * v7);
      if (!v9)
        break;
    }
LABEL_16:
    ;
  }
  v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  v9 = *(_QWORD *)(v11 + 8 * v10);
  if (v9)
  {
    v7 = v10;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v7 >= v5)
      goto LABEL_19;
    v9 = *(_QWORD *)(v11 + 8 * v7);
    ++v10;
    if (v9)
      goto LABEL_16;
  }
LABEL_21:
  __break(1u);
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)@<X0>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE v62[40];
  _QWORD v63[6];

  v4 = type metadata accessor for Prompt.Rendering();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v41 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v41 - v15;
  v63[3] = &type metadata for PromptCompletionEventCandidateTextDelta;
  v63[4] = &protocol witness table for PromptCompletionEventCandidateTextDelta;
  v63[0] = swift_allocObject();
  memcpy((void *)(v63[0] + 16), a1, 0x48uLL);
  outlined init with copy of PromptCompletionEvent((uint64_t)v63, (uint64_t)v62);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if (swift_dynamicCast())
  {
    v17 = v50;
    v18 = v51;
    v47 = v52;
    v48 = v53;
    v49 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v46 = ModelInformationEnvelope.init(sealing:)(&v47);
    v45 = v19;
    v44 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v63);
    v43 = 0;
    v42 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
LABEL_16:
    result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v62);
    *(_QWORD *)a2 = v17;
    *(_QWORD *)(a2 + 8) = v18;
    v38 = v45;
    *(_QWORD *)(a2 + 16) = v46;
    *(_QWORD *)(a2 + 24) = v38;
    v39 = v43;
    *(_QWORD *)(a2 + 32) = v44;
    *(_QWORD *)(a2 + 40) = v39;
    *(_QWORD *)(a2 + 48) = v42;
    *(_QWORD *)(a2 + 56) = v21;
    *(_QWORD *)(a2 + 64) = v22;
    *(_QWORD *)(a2 + 72) = v23;
    *(_QWORD *)(a2 + 80) = v24;
    *(_QWORD *)(a2 + 88) = v25;
    *(_QWORD *)(a2 + 96) = v26;
    *(_BYTE *)(a2 + 104) = v27;
    return result;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of DocumentRegistrationEnvelope((uint64_t)v16, (uint64_t)v14, type metadata accessor for PromptCompletionEventRenderedPrompt);
    outlined init with copy of DocumentEnvelope((uint64_t)v14, (uint64_t)v11, type metadata accessor for PromptCompletionEventRenderedPrompt);
    v18 = v11[1];
    v41 = *v11;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, (char *)v11 + *(int *)(v8 + 20), v4);
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.init(sealing:)((uint64_t)v7, &v50);
    v46 = v50;
    v45 = v51;
    v44 = v52;
    v43 = v53;
    v21 = v55;
    v42 = v54;
    v22 = v56;
    v23 = v57;
    v24 = v58;
    v25 = v59;
    v26 = v60;
    outlined destroy of Prompt.Turn.Segment((uint64_t)v11, type metadata accessor for PromptCompletionEventRenderedPrompt);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v63);
    v28 = (uint64_t)v14;
    v17 = v41;
    outlined destroy of Prompt.Turn.Segment(v28, type metadata accessor for PromptCompletionEventRenderedPrompt);
    v27 = 1;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    v17 = v50;
    v18 = v51;
    v46 = v52;
    v29 = v53;
    v44 = v54;
    v30 = v56;
    v43 = v55;
    v21 = v57;
    v22 = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v21, v22);
    v42 = v30;
    swift_bridgeObjectRelease();
    v45 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v21, v22);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v63);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 2;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    v17 = v50;
    v18 = v51;
    v46 = v52;
    v31 = v53;
    v44 = v54;
    v32 = v55;
    v42 = v56;
    v21 = v57;
    v22 = v58;
    v23 = v59;
    v24 = v60;
    v25 = v61;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v43 = v32;
    swift_bridgeObjectRelease();
    v45 = v31;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v24, v25);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v63);
    v26 = 0;
    v27 = 3;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    v17 = v50;
    v18 = v51;
    v46 = v52;
    v34 = v53;
    v33 = v54;
    v35 = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason(v33, v35);
    v45 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FinishReason(v33, v35);
    v43 = v35;
    if (v35 >= 3)
      v36 = v33;
    else
      v36 = 0;
    v44 = v36;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v63);
    v42 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 4;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v63);
    v44 = 0;
    v43 = 0;
    v42 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v17 = v50;
    v18 = v51;
    v46 = v52;
    v45 = v53;
    v27 = 5;
    goto LABEL_16;
  }
  outlined init with copy of PromptCompletionEvent((uint64_t)v63, (uint64_t)&v50);
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v47 = 0xD00000000000002FLL;
  v48 = 0x8000000248BCB160;
  __swift_project_boxed_opaque_existential_1(&v50, v53);
  swift_getDynamicType();
  v40._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _BYTE v66[40];
  uint64_t v67[6];

  v50 = type metadata accessor for Prompt.Rendering();
  v8 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PromptCompletionEventRenderedPrompt(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v45 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v45 - v18;
  v67[3] = a2;
  v67[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v67);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(boxed_opaque_existential_1, a1, a2);
  outlined init with copy of PromptCompletionEvent((uint64_t)v67, (uint64_t)v66);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PromptCompletionEvent);
  if (swift_dynamicCast())
  {
    v21 = v54;
    v22 = v55;
    v51 = v56;
    v52 = v57;
    v53 = v58;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50 = ModelInformationEnvelope.init(sealing:)(&v51);
    v49 = v23;
    v48 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
    v47 = 0;
    v46 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
LABEL_16:
    result = __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v66);
    *(_QWORD *)a4 = v21;
    *(_QWORD *)(a4 + 8) = v22;
    v42 = v49;
    *(_QWORD *)(a4 + 16) = v50;
    *(_QWORD *)(a4 + 24) = v42;
    v43 = v47;
    *(_QWORD *)(a4 + 32) = v48;
    *(_QWORD *)(a4 + 40) = v43;
    *(_QWORD *)(a4 + 48) = v46;
    *(_QWORD *)(a4 + 56) = v25;
    *(_QWORD *)(a4 + 64) = v26;
    *(_QWORD *)(a4 + 72) = v27;
    *(_QWORD *)(a4 + 80) = v28;
    *(_QWORD *)(a4 + 88) = v29;
    *(_QWORD *)(a4 + 96) = v30;
    *(_BYTE *)(a4 + 104) = v31;
    return result;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of DocumentRegistrationEnvelope((uint64_t)v19, (uint64_t)v17, type metadata accessor for PromptCompletionEventRenderedPrompt);
    outlined init with copy of DocumentEnvelope((uint64_t)v17, (uint64_t)v14, type metadata accessor for PromptCompletionEventRenderedPrompt);
    v22 = v14[1];
    v45 = *v14;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, (char *)v14 + *(int *)(v11 + 20), v50);
    swift_bridgeObjectRetain();
    PromptRenderingEnvelope.init(sealing:)((uint64_t)v10, &v54);
    v50 = v54;
    v49 = v55;
    v48 = v56;
    v47 = v57;
    v25 = v59;
    v46 = v58;
    v26 = v60;
    v27 = v61;
    v28 = v62;
    v29 = v63;
    v30 = v64;
    outlined destroy of Prompt.Turn.Segment((uint64_t)v14, type metadata accessor for PromptCompletionEventRenderedPrompt);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
    v32 = (uint64_t)v17;
    v21 = v45;
    outlined destroy of Prompt.Turn.Segment(v32, type metadata accessor for PromptCompletionEventRenderedPrompt);
    v31 = 1;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    v21 = v54;
    v22 = v55;
    v50 = v56;
    v33 = v57;
    v48 = v58;
    v34 = v60;
    v47 = v59;
    v25 = v61;
    v26 = v62;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v25, v26);
    v46 = v34;
    swift_bridgeObjectRelease();
    v49 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v25, v26);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 2;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    v21 = v54;
    v22 = v55;
    v50 = v56;
    v35 = v57;
    v48 = v58;
    v36 = v59;
    v46 = v60;
    v25 = v61;
    v26 = v62;
    v27 = v63;
    v28 = v64;
    v29 = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of Data?(v28, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47 = v36;
    swift_bridgeObjectRelease();
    v49 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data?(v28, v29);
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
    v30 = 0;
    v31 = 3;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    v21 = v54;
    v22 = v55;
    v50 = v56;
    v38 = v57;
    v37 = v58;
    v39 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of FinishReason(v37, v39);
    v49 = v38;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FinishReason(v37, v39);
    v47 = v39;
    if (v39 >= 3)
      v40 = v37;
    else
      v40 = 0;
    v48 = v40;
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
    v46 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 4;
    goto LABEL_16;
  }
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_0Tm((uint64_t)v67);
    v48 = 0;
    v47 = 0;
    v46 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v21 = v54;
    v22 = v55;
    v50 = v56;
    v49 = v57;
    v31 = 5;
    goto LABEL_16;
  }
  outlined init with copy of PromptCompletionEvent((uint64_t)v67, (uint64_t)&v54);
  v51 = 0;
  v52 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  v51 = 0xD00000000000002FLL;
  v52 = 0x8000000248BCB160;
  __swift_project_boxed_opaque_existential_1(&v54, v57);
  swift_getDynamicType();
  v44._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DocumentEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentEnvelope);
}

uint64_t outlined retain of RequestMetadataEnvelope(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of RequestMetadataEnvelope(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentRequest.CodingKeys, &unk_2519D0410);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentRequest.CodingKeys, &unk_2519D0410);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentRequest.CodingKeys, &unk_2519D0410);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentRequest.CodingKeys, &unk_2519D0410);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest.CodingKeys and conformance RegisterDocumentRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DocumentEnvelope] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [DocumentEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentEnvelope] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentEnvelope]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentEnvelope and conformance DocumentEnvelope);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentEnvelope] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [DocumentEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentEnvelope] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentEnvelope]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentEnvelope and conformance DocumentEnvelope);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentEnvelope] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadataEnvelope, &unk_2519D05B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadataEnvelope, &unk_2519D05B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadataEnvelope, &unk_2519D05B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope);
  }
  return result;
}

void lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope(uint64_t a1)
{
  void (*v1)(uint64_t);

  if (!OUTLINED_FUNCTION_393(a1))
  {
    v1(255);
    OUTLINED_FUNCTION_673();
  }
  OUTLINED_FUNCTION_104();
}

uint64_t type metadata accessor for DocumentRegistrationStatusEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentRegistrationStatusEnvelope);
}

void outlined init with copy of DocumentEnvelope(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_255_0(a1, a2, a3);
  OUTLINED_FUNCTION_214_1(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  OUTLINED_FUNCTION_104();
}

uint64_t type metadata accessor for DocumentRegistrationEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentRegistrationEnvelope);
}

unint64_t lazy protocol witness table accessor for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentResponseElement.CodingKeys, &unk_2519D1900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentResponseElement.CodingKeys, &unk_2519D1900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentResponseElement.CodingKeys, &unk_2519D1900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentResponseElement.CodingKeys, &unk_2519D1900);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement.CodingKeys and conformance RegisterDocumentResponseElement.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for RegisterDocumentResponseElement(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for RegisterDocumentResponseElement);
}

void outlined init with take of DocumentRegistrationEnvelope(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_255_0(a1, a2, a3);
  OUTLINED_FUNCTION_214_1(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  OUTLINED_FUNCTION_104();
}

unint64_t lazy protocol witness table accessor for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensRequest.CodingKeys, &unk_2519CF4E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensRequest.CodingKeys, &unk_2519CF4E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensRequest.CodingKeys, &unk_2519CF4E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensRequest.CodingKeys, &unk_2519CF4E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest.CodingKeys and conformance CountTokensRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope and conformance PromptEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope, &unk_2519CE380);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope, &unk_2519CE380);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope, &unk_2519CE380);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope and conformance PromptEnvelope);
  }
  return result;
}

uint64_t *outlined release of (PromptRenderingEnvelope?, PromptRenderingEnvelope?)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[11];
  v3 = a1[12];
  outlined consume of PromptRenderingEnvelope?(*a1, a1[1]);
  outlined consume of PromptRenderingEnvelope?(v2, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensResponse.CodingKeys, &unk_2519CF8B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensResponse.CodingKeys, &unk_2519CF8B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensResponse.CodingKeys, &unk_2519CF8B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensResponse.CodingKeys, &unk_2519CF8B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensResponse.CodingKeys and conformance CountTokensResponse.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope, &unk_2519D0380);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope, &unk_2519D0380);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope, &unk_2519D0380);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope and conformance PromptRenderingEnvelope);
  }
  return result;
}

uint64_t outlined consume of PromptEnvelope?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for CompletePromptTemplateRequest(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for CompletePromptTemplateRequest);
}

uint64_t type metadata accessor for PromptTemplateInfoEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for PromptTemplateInfoEnvelope);
}

uint64_t outlined retain of SamplingParametersEnvelope(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for Constraints(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for Constraints);
}

uint64_t outlined copy of PromptEnvelope?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined release of SamplingParametersEnvelope(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptTemplateRequest.CodingKeys, &unk_2519D1870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptTemplateRequest.CodingKeys, &unk_2519D1870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptTemplateRequest.CodingKeys, &unk_2519D1870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptTemplateRequest.CodingKeys, &unk_2519D1870);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest.CodingKeys and conformance CompletePromptTemplateRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParametersEnvelope, &type metadata for SamplingParametersEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParametersEnvelope, &type metadata for SamplingParametersEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParametersEnvelope, &type metadata for SamplingParametersEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [Tool] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Tool] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Tool] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Tool]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Tool and conformance Tool);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Tool] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [Tool] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Tool] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Tool]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Tool and conformance Tool);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Tool] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentResourceIdentifier and conformance DocumentResourceIdentifier);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  }
  return result;
}

uint64_t type metadata accessor for CompletePromptRequest(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for CompletePromptRequest);
}

uint64_t type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

uint64_t type metadata accessor for ToolType(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for ToolType);
}

uint64_t type metadata accessor for ToolDescriptionEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescriptionEnvelope);
}

uint64_t type metadata accessor for ToolDescription(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for ToolDescription);
}

uint64_t type metadata accessor for FunctionDescription(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for FunctionDescription);
}

unint64_t lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptRequest.CodingKeys, &unk_2519CFE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptRequest.CodingKeys, &unk_2519CFE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptRequest.CodingKeys, &unk_2519CFE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptRequest.CodingKeys, &unk_2519CFE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ToolDescriptionEnvelope] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope and conformance ToolDescriptionEnvelope);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ToolDescriptionEnvelope]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope and conformance ToolDescriptionEnvelope);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolDescriptionEnvelope] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope, &type metadata for ToolChoiceEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope, &type metadata for ToolChoiceEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope, &type metadata for ToolChoiceEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope and conformance ToolChoiceEnvelope);
  }
  return result;
}

void outlined assign with take of PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_255_0(a1, a2, a3);
  OUTLINED_FUNCTION_214_1(a2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40));
  OUTLINED_FUNCTION_104();
}

unint64_t lazy protocol witness table accessor for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponse.CodingKeys, &unk_2519CFF88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponse.CodingKeys, &unk_2519CFF88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponse.CodingKeys, &unk_2519CFF88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponse.CodingKeys, &unk_2519CFF88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponse.CodingKeys and conformance CompletePromptResponse.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope, &type metadata for PromptCompletionEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope, &type metadata for PromptCompletionEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope, &type metadata for PromptCompletionEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope and conformance PromptCompletionEnvelope);
  }
  return result;
}

void outlined retain of PromptCompletionEnvelope()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_606();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_10_0();
  v0 = OUTLINED_FUNCTION_90();
  v8 = OUTLINED_FUNCTION_242_0(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13, v14, v15, v16, v17);
  outlined copy of PromptRenderingEnvelope?(v8, v9);
  OUTLINED_FUNCTION_139_0();
}

void outlined release of PromptCompletionEnvelope()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_606();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_61();
  v0 = OUTLINED_FUNCTION_186();
  v8 = OUTLINED_FUNCTION_242_0(v0, v1, v2, v3, v4, v5, v6, v7, v10, v11, v12, v13, v14, v15, v16, v17);
  outlined consume of PromptRenderingEnvelope?(v8, v9);
  OUTLINED_FUNCTION_139_0();
}

void *outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x69uLL);
}

void outlined copy of PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17;

  switch(a14)
  {
    case 0:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 1:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = a8;
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17 = a11;
      a9 = a12;
LABEL_6:
      outlined copy of Data?(v17, a9);
      break;
    case 4:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of FinishReason(a5, a6);
      break;
    case 5:
LABEL_8:
      swift_bridgeObjectRetain();
      break;
    default:
      return;
  }
}

void outlined consume of PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14)
{
  uint64_t v17;

  switch(a14)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = a8;
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = a11;
      a9 = a12;
LABEL_6:
      outlined consume of Data?(v17, a9);
      break;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of FinishReason(a5, a6);
      break;
    case 5:
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t outlined consume of PromptCompletionEventCandidateTextDelta?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(a8, a9);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponseElement.CodingKeys, &unk_2519D1760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponseElement.CodingKeys, &unk_2519D1760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponseElement.CodingKeys, &unk_2519D1760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys;
  if (!lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CompletePromptResponseElement.CodingKeys, &unk_2519D1760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompletePromptResponseElement.CodingKeys and conformance CompletePromptResponseElement.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope, &type metadata for PromptCompletionStreamElementEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope, &type metadata for PromptCompletionStreamElementEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope, &type metadata for PromptCompletionStreamElementEnvelope);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope and conformance PromptCompletionStreamElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Constraints.CodingKeys and conformance Constraints.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.CodingKeys, &unk_2519CD7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.CodingKeys, &unk_2519CD7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.CodingKeys, &unk_2519CD7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.CodingKeys, &unk_2519CD7A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.CodingKeys and conformance Constraints.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.PartialGrammarCodingKeys, &unk_2519CD958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.PartialGrammarCodingKeys, &unk_2519CD958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.PartialGrammarCodingKeys, &unk_2519CD958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.PartialGrammarCodingKeys, &unk_2519CD958);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.GrammarCodingKeys, &unk_2519CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.GrammarCodingKeys, &unk_2519CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.GrammarCodingKeys, &unk_2519CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.GrammarCodingKeys, &unk_2519CD8C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.SchemaCodingKeys, &unk_2519CD838);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.SchemaCodingKeys, &unk_2519CD838);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.SchemaCodingKeys, &unk_2519CD838);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys;
  if (!lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for Constraints.SchemaCodingKeys, &unk_2519CD838);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Constraints.SchemaCodingKeys and conformance Constraints.SchemaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CodingKeys, &unk_2519D1068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CodingKeys, &unk_2519D1068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CodingKeys, &unk_2519D1068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CodingKeys, &unk_2519D1068);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope and conformance ModelInformationEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope, &unk_2519D0C10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope, &unk_2519D0C10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope, &unk_2519D0C10);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope and conformance ModelInformationEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UsageEnvelope and conformance UsageEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope;
  if (!lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for UsageEnvelope, &unk_2519CDCD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope;
  if (!lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for UsageEnvelope, &unk_2519CDCD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope;
  if (!lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for UsageEnvelope, &unk_2519CDCD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope and conformance UsageEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CandidateEnvelope, &unk_2519D0FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CandidateEnvelope, &unk_2519D0FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CandidateEnvelope, &unk_2519D0FE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope and conformance PromptCompletionEnvelope.CandidateEnvelope);
  }
  return result;
}

void outlined retain of PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  OUTLINED_FUNCTION_393(a1);
  OUTLINED_FUNCTION_627();
  v7(v1, v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_468();
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.CodingKeys, &unk_2519D2760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.CodingKeys, &unk_2519D2760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.CodingKeys, &unk_2519D2760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.CodingKeys, &unk_2519D2760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope, &unk_2519D26D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope, &unk_2519D26D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope, &unk_2519D26D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope and conformance PromptCompletionStreamElementEnvelope.Envelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.CodingKeys, &unk_2519CF6A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.CodingKeys, &unk_2519CF6A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.CodingKeys, &unk_2519CF6A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.CodingKeys, &unk_2519CF6A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.CodingKeys and conformance ToolChoiceEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.FunctionCodingKeys, &unk_2519CF750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.FunctionCodingKeys, &unk_2519CF750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.FunctionCodingKeys, &unk_2519CF750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.FunctionCodingKeys, &unk_2519CF750);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.RequiredCodingKeys, &unk_2519CF7E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.RequiredCodingKeys, &unk_2519CF7E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.RequiredCodingKeys, &unk_2519CF7E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.AutomaticCodingKeys, &unk_2519CF800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.AutomaticCodingKeys, &unk_2519CF800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.AutomaticCodingKeys, &unk_2519CF800);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.NoneCodingKeys, &unk_2519CF730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.NoneCodingKeys, &unk_2519CF730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolChoiceEnvelope.NoneCodingKeys, &unk_2519CF730);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolChoiceEnvelope.NoneCodingKeys and conformance ToolChoiceEnvelope.NoneCodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for RequestPayload(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for RequestPayload);
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CodingKeys, &unk_2519CE408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CodingKeys, &unk_2519CE408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CodingKeys, &unk_2519CE408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CodingKeys, &unk_2519CE408);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptTemplateCodingKeys, &unk_2519CE5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptTemplateCodingKeys, &unk_2519CE5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptTemplateCodingKeys, &unk_2519CE5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptTemplateCodingKeys, &unk_2519CE5B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptCodingKeys, &unk_2519CE528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptCodingKeys, &unk_2519CE528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptCodingKeys, &unk_2519CE528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CompletePromptCodingKeys, &unk_2519CE528);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CountTokensCodingKeys, &unk_2519CE498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CountTokensCodingKeys, &unk_2519CE498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CountTokensCodingKeys, &unk_2519CE498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestPayload.CountTokensCodingKeys, &unk_2519CE498);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestPayload.CountTokensCodingKeys and conformance RequestPayload.CountTokensCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest;
  if (!lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensRequest, &type metadata for CountTokensRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest;
  if (!lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensRequest, &type metadata for CountTokensRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest;
  if (!lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for CountTokensRequest, &type metadata for CountTokensRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CountTokensRequest and conformance CountTokensRequest);
  }
  return result;
}

uint64_t type metadata accessor for StreamingRequestPayload(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for StreamingRequestPayload);
}

unint64_t lazy protocol witness table accessor for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CodingKeys, &unk_2519D0638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CodingKeys, &unk_2519D0638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CodingKeys, &unk_2519D0638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CodingKeys, &unk_2519D0638);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CodingKeys and conformance StreamingRequestPayload.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptTemplateCodingKeys, &unk_2519D0758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptTemplateCodingKeys, &unk_2519D0758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptTemplateCodingKeys, &unk_2519D0758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptTemplateCodingKeys, &unk_2519D0758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptCodingKeys, &unk_2519D06C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptCodingKeys, &unk_2519D06C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptCodingKeys, &unk_2519D06C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequestPayload.CompletePromptCodingKeys, &unk_2519D06C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequestPayload.CompletePromptCodingKeys and conformance StreamingRequestPayload.CompletePromptCodingKeys);
  }
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type RegisterDocumentRequest and conformance RegisterDocumentRequest()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentRequest, &type metadata for RegisterDocumentRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentRequest, &type metadata for RegisterDocumentRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest;
  if (!lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RegisterDocumentRequest, &type metadata for RegisterDocumentRequest);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegisterDocumentRequest and conformance RegisterDocumentRequest);
  }
  return result;
}

void base witness table accessor for Equatable in RegisterDocumentResponseElement()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type RegisterDocumentResponseElement and conformance RegisterDocumentResponseElement);
}

void base witness table accessor for Equatable in CompletePromptTemplateRequest()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptTemplateRequest and conformance CompletePromptTemplateRequest);
}

void base witness table accessor for Equatable in CompletePromptRequest()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type CompletePromptRequest and conformance CompletePromptRequest);
}

void base witness table accessor for Equatable in ToolDescription()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescription and conformance ToolDescription);
}

void base witness table accessor for Equatable in ToolType()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolType and conformance ToolType);
}

void base witness table accessor for Equatable in FunctionDescription()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type FunctionDescription and conformance FunctionDescription);
}

void base witness table accessor for Equatable in Constraints()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type Constraints and conformance Constraints);
}

unint64_t lazy protocol witness table accessor for type RequestMetadata and conformance RequestMetadata()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadata and conformance RequestMetadata;
  if (!lazy protocol witness table cache variable for type RequestMetadata and conformance RequestMetadata)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadata, &type metadata for RequestMetadata);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadata and conformance RequestMetadata);
  }
  return result;
}

void base witness table accessor for Equatable in RequestPayload()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type RequestPayload and conformance RequestPayload);
}

void base witness table accessor for Equatable in StreamingRequestPayload()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type StreamingRequestPayload and conformance StreamingRequestPayload);
}

void sub_248B5E4F0()
{
  CompletePromptTemplateRequest.prompt.getter();
  OUTLINED_FUNCTION_104();
}

void sub_248B5E510()
{
  CompletePromptTemplateRequest.promptTemplateInfo.getter();
  OUTLINED_FUNCTION_104();
}

void sub_248B5E52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CompletePromptTemplateRequest.promptTemplateInfo : CompletePromptTemplateRequest(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BEB8B80], (void (*)(char *))CompletePromptTemplateRequest.promptTemplateInfo.setter);
}

void sub_248B5E550()
{
  CompletePromptRequest.prompt.getter();
  OUTLINED_FUNCTION_104();
}

void sub_248B5E56C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CompletePromptTemplateRequest.promptTemplateInfo : CompletePromptTemplateRequest(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x24BEB89B8], (void (*)(char *))CompletePromptRequest.prompt.setter);
}

uint64_t destroy for RegisterDocumentRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for RegisterDocumentRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for RegisterDocumentRequest(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RegisterDocumentRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RegisterDocumentRequest(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RegisterDocumentRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for RegisterDocumentRequest()
{
  OUTLINED_FUNCTION_181_0();
}

_QWORD *initializeBufferWithCopyOfBuffer for RegisterDocumentResponseElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v4 = type metadata accessor for DocumentRegistrationEnvelope(0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = v4;
    v7 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_9;
      }
      v9 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
LABEL_9:
    v12 = *(int *)(v6 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    return a1;
  }
  v10 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for RegisterDocumentResponseElement(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v3 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  v4 = a1 + *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  v5 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for RegisterDocumentResponseElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
      goto LABEL_7;
    }
    v6 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
LABEL_7:
  v8 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

_QWORD *assignWithCopy for RegisterDocumentResponseElement(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
        goto LABEL_8;
      }
      v6 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_8:
  v7 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

char *initializeWithTake for RegisterDocumentResponseElement(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  v6 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

char *assignWithTake for RegisterDocumentResponseElement(char *a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v5 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  v6 = *(int *)(type metadata accessor for DocumentRegistrationEnvelope(0) + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RegisterDocumentResponseElement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B5ED68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_497();
  v0 = OUTLINED_FUNCTION_262_0();
  return OUTLINED_FUNCTION_159_1(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for RegisterDocumentResponseElement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B5ED90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_497();
  v0 = OUTLINED_FUNCTION_53_2();
  return OUTLINED_FUNCTION_101_0(v0, v1, v2, v3);
}

uint64_t type metadata completion function for RegisterDocumentResponseElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, type metadata accessor for DocumentRegistrationEnvelope);
}

uint64_t destroy for CountTokensRequest()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CountTokensRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CountTokensRequest(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for CountTokensRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for CountTokensRequest()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t destroy for CountTokensResponse(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for CountTokensResponse(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v3 = a1 + 1;
  v4 = a2[2];
  if (v4)
  {
    a1[1] = a2[1];
    a1[2] = v4;
    v5 = a2[4];
    a1[3] = a2[3];
    a1[4] = v5;
    v6 = a2[6];
    a1[5] = a2[5];
    a1[6] = v6;
    v7 = a2[8];
    a1[7] = a2[7];
    a1[8] = v7;
    v8 = a2[10];
    a1[9] = a2[9];
    a1[10] = v8;
    a1[11] = a2[11];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    memcpy(v3, a2 + 1, 0x58uLL);
  }
  return a1;
}

_QWORD *assignWithCopy for CountTokensResponse(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  const void *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = a1 + 1;
  v5 = a2 + 1;
  v6 = a2[2];
  if (!a1[2])
  {
    if (v6)
    {
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    memcpy(v4, v5, 0x58uLL);
    return a1;
  }
  if (!v6)
  {
    outlined destroy of PromptRenderingEnvelope((uint64_t)(a1 + 1));
    goto LABEL_7;
  }
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of PromptRenderingEnvelope(uint64_t a1)
{
  destroy for PromptRenderingEnvelope();
  return a1;
}

_QWORD *assignWithTake for CountTokensResponse(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  const void *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v3 = a1 + 1;
  v4 = a2 + 1;
  if (!a1[2])
    goto LABEL_5;
  v6 = a2[2];
  if (!v6)
  {
    outlined destroy of PromptRenderingEnvelope((uint64_t)v3);
LABEL_5:
    memcpy(v3, v4, 0x58uLL);
    return a1;
  }
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  v8 = a2[7];
  a1[6] = a2[6];
  a1[7] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[9];
  a1[8] = a2[8];
  a1[9] = v9;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CountTokensResponse(uint64_t a1, unsigned int a2)
{
  int v2;
  unint64_t v3;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    {
      v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF)
        LODWORD(v3) = -1;
      v2 = v3 - 1;
      if (v2 < 0)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CountTokensResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void type metadata accessor for CountTokensResponse()
{
  OUTLINED_FUNCTION_181_0();
}

_QWORD *initializeBufferWithCopyOfBuffer for CompletePromptTemplateRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if (v7)
    {
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v10 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v10;
    }
    v11 = a3[5];
    v12 = (_QWORD *)((char *)a1 + v11);
    v13 = (char *)a2 + v11;
    v14 = *(_QWORD *)((char *)a2 + v11 + 8);
    *v12 = *(_QWORD *)((char *)a2 + v11);
    v12[1] = v14;
    v12[2] = *(_QWORD *)((char *)a2 + v11 + 16);
    v15 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    v16 = (char *)v12 + v15;
    v17 = &v13[v15];
    v18 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
    }
    v20 = a3[6];
    v21 = a3[7];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    *((_QWORD *)v22 + 2) = *((_QWORD *)v23 + 2);
    v22[24] = v23[24];
    *((_QWORD *)v22 + 4) = *((_QWORD *)v23 + 4);
    v22[40] = v23[40];
    v22[56] = v23[56];
    *((_QWORD *)v22 + 6) = *((_QWORD *)v23 + 6);
    v24 = *((_QWORD *)v23 + 8);
    v22[72] = v23[72];
    *((_QWORD *)v22 + 8) = v24;
    v25 = *((_QWORD *)v23 + 11);
    *((_QWORD *)v22 + 10) = *((_QWORD *)v23 + 10);
    *((_QWORD *)v22 + 11) = v25;
    v22[96] = v23[96];
    *((_QWORD *)v22 + 13) = *((_QWORD *)v23 + 13);
    v22[112] = v23[112];
    *((_QWORD *)v22 + 15) = *((_QWORD *)v23 + 15);
    *((_WORD *)v22 + 64) = *((_WORD *)v23 + 64);
    v26 = (_QWORD *)((char *)a1 + v21);
    v27 = (_QWORD *)((char *)a2 + v21);
    v28 = type metadata accessor for Constraints(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v27, 1, v28))
    {
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        v31 = v27[1];
        *v26 = *v27;
        v26[1] = v31;
        swift_bridgeObjectRetain();
      }
      else
      {
        v32 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v26, v27, v32);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v26, 0, 1, v28);
    }
    v33 = a3[9];
    *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
    *(_QWORD *)((char *)a1 + v33) = *(_QWORD *)((char *)a2 + v33);
    v34 = a3[10];
    v35 = (_QWORD *)((char *)a1 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = v36[3];
    v35[2] = v36[2];
    v35[3] = v38;
    v39 = v36[5];
    v35[4] = v36[4];
    v35[5] = v39;
    v35[6] = v36[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CompletePromptTemplateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v4 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v4 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  v6 = type metadata accessor for Locale();
  if (!__swift_getEnumTagSinglePayload(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for Constraints(0);
  if (!__swift_getEnumTagSinglePayload(v7, 1, v8))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!EnumCaseMultiPayload)
    {
      v10 = type metadata accessor for GenerationSchema();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CompletePromptTemplateRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = a2[1];
  if (v6)
  {
    *a1 = *a2;
    a1[1] = v6;
    v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  v9 = a3[5];
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (char *)a2 + v9;
  v12 = *(_QWORD *)((char *)a2 + v9 + 8);
  *v10 = *(_QWORD *)((char *)a2 + v9);
  v10[1] = v12;
  v10[2] = *(_QWORD *)((char *)a2 + v9 + 16);
  v13 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  v14 = (char *)v10 + v13;
  v15 = &v11[v13];
  v16 = type metadata accessor for Locale();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
  }
  v18 = a3[6];
  v19 = a3[7];
  v20 = (char *)a1 + v18;
  v21 = (char *)a2 + v18;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  *((_QWORD *)v20 + 2) = *((_QWORD *)v21 + 2);
  v20[24] = v21[24];
  *((_QWORD *)v20 + 4) = *((_QWORD *)v21 + 4);
  v20[40] = v21[40];
  v20[56] = v21[56];
  *((_QWORD *)v20 + 6) = *((_QWORD *)v21 + 6);
  v22 = *((_QWORD *)v21 + 8);
  v20[72] = v21[72];
  *((_QWORD *)v20 + 8) = v22;
  v23 = *((_QWORD *)v21 + 11);
  *((_QWORD *)v20 + 10) = *((_QWORD *)v21 + 10);
  *((_QWORD *)v20 + 11) = v23;
  v20[96] = v21[96];
  *((_QWORD *)v20 + 13) = *((_QWORD *)v21 + 13);
  v20[112] = v21[112];
  *((_QWORD *)v20 + 15) = *((_QWORD *)v21 + 15);
  *((_WORD *)v20 + 64) = *((_WORD *)v21 + 64);
  v24 = (_QWORD *)((char *)a1 + v19);
  v25 = (_QWORD *)((char *)a2 + v19);
  v26 = type metadata accessor for Constraints(0);
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v29 = v25[1];
      *v24 = *v25;
      v24[1] = v29;
      swift_bridgeObjectRetain();
    }
    else
    {
      v30 = type metadata accessor for GenerationSchema();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v24, v25, v30);
    }
    swift_storeEnumTagMultiPayload();
    __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
  }
  v31 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v31) = *(_QWORD *)((char *)a2 + v31);
  v32 = a3[10];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v34[3];
  v33[2] = v34[2];
  v33[3] = v36;
  v37 = v34[5];
  v33[4] = v34[4];
  v33[5] = v37;
  v33[6] = v34[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CompletePromptTemplateRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int EnumTagSinglePayload;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  int v36;
  int EnumCaseMultiPayload;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;

  v6 = a2[1];
  if (a1[1])
  {
    if (v6)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of PromptEnvelope((uint64_t)a1);
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
    }
  }
  else if (v6)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v8;
  }
  v9 = a3[5];
  v10 = (_QWORD *)((char *)a1 + v9);
  v11 = (char *)a2 + v9;
  *v10 = *(_QWORD *)((char *)a2 + v9);
  v10[1] = *(_QWORD *)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10[2] = *((_QWORD *)v11 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  v13 = (char *)v10 + v12;
  v14 = &v11[v12];
  v15 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  v18 = *(_QWORD *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
LABEL_13:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v13, v14, v15);
LABEL_14:
  v20 = a3[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = *(_QWORD *)((char *)a2 + v20);
  v21[8] = v22[8];
  *(_QWORD *)v21 = v23;
  v24 = *((_QWORD *)v22 + 2);
  v21[24] = v22[24];
  *((_QWORD *)v21 + 2) = v24;
  v25 = *((_QWORD *)v22 + 4);
  v21[40] = v22[40];
  *((_QWORD *)v21 + 4) = v25;
  v26 = *((_QWORD *)v22 + 6);
  v21[56] = v22[56];
  *((_QWORD *)v21 + 6) = v26;
  v27 = *((_QWORD *)v22 + 8);
  v21[72] = v22[72];
  *((_QWORD *)v21 + 8) = v27;
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v28 = *((_QWORD *)v22 + 11);
  v21[96] = v22[96];
  *((_QWORD *)v21 + 11) = v28;
  v29 = *((_QWORD *)v22 + 13);
  v21[112] = v22[112];
  *((_QWORD *)v21 + 13) = v29;
  v30 = *((_QWORD *)v22 + 15);
  v21[128] = v22[128];
  *((_QWORD *)v21 + 15) = v30;
  v21[129] = v22[129];
  v31 = a3[7];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = type metadata accessor for Constraints(0);
  v35 = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v34);
  v36 = __swift_getEnumTagSinglePayload((uint64_t)v33, 1, v34);
  if (v35)
  {
    if (!v36)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *v32 = *v33;
        v32[1] = v33[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        v40 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v32, v33, v40);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v32, 0, 1, v34);
      goto LABEL_32;
    }
LABEL_21:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    goto LABEL_32;
  }
  if (v36)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)v32, type metadata accessor for Constraints);
    goto LABEL_21;
  }
  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)v32, type metadata accessor for Constraints);
    v39 = swift_getEnumCaseMultiPayload();
    if (v39 == 2 || v39 == 1)
    {
      *v32 = *v33;
      v32[1] = v33[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v41 = type metadata accessor for GenerationSchema();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v32, v33, v41);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_32:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v42 = a3[10];
  v43 = (_QWORD *)((char *)a1 + v42);
  v44 = (_QWORD *)((char *)a2 + v42);
  *v43 = *(_QWORD *)((char *)a2 + v42);
  v43[1] = *(_QWORD *)((char *)a2 + v42 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43[2] = v44[2];
  v43[3] = v44[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43[4] = v44[4];
  v43[5] = v44[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43[6] = v44[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of PromptEnvelope(uint64_t a1)
{
  destroy for PromptEnvelope();
  return a1;
}

_OWORD *initializeWithTake for CompletePromptTemplateRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
  *((_QWORD *)v8 + 2) = *(_QWORD *)((char *)a2 + v7 + 16);
  v10 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  v11 = &v8[v10];
  v12 = &v9[v10];
  v13 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
  }
  memcpy((char *)a1 + a3[6], (char *)a2 + a3[6], 0x82uLL);
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = type metadata accessor for Constraints(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v20 = type metadata accessor for GenerationSchema();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v16, v17, v20);
      swift_storeEnumTagMultiPayload();
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
  }
  v21 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  v22 = a3[10];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  *((_QWORD *)v23 + 6) = *((_QWORD *)v24 + 6);
  return a1;
}

_QWORD *assignWithTake for CompletePromptTemplateRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int EnumTagSinglePayload;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  if (a1[1])
  {
    v6 = a2[1];
    if (v6)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of PromptEnvelope((uint64_t)a1);
  }
  v7 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v7;
LABEL_6:
  v8 = a3[5];
  v9 = (_QWORD *)((char *)a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = *(_QWORD *)((char *)a2 + v8 + 8);
  *v9 = *(_QWORD *)((char *)a2 + v8);
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v9[2] = *((_QWORD *)v10 + 2);
  swift_bridgeObjectRelease();
  v12 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
  v13 = (char *)v9 + v12;
  v14 = &v10[v12];
  v15 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15);
  v17 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15);
  if (EnumTagSinglePayload)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(v15 - 8);
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v13, v15);
LABEL_11:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v13, v14, v15);
LABEL_12:
  v20 = a3[6];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)((char *)a2 + v20);
  v21[8] = *((_BYTE *)a2 + v20 + 8);
  *((_QWORD *)v21 + 2) = *(_QWORD *)((char *)a2 + v20 + 16);
  v21[24] = *((_BYTE *)a2 + v20 + 24);
  *((_QWORD *)v21 + 4) = *(_QWORD *)((char *)a2 + v20 + 32);
  v21[40] = *((_BYTE *)a2 + v20 + 40);
  v21[56] = *((_BYTE *)a2 + v20 + 56);
  *((_QWORD *)v21 + 6) = *(_QWORD *)((char *)a2 + v20 + 48);
  v23 = *(_QWORD *)((char *)a2 + v20 + 64);
  v21[72] = v22[72];
  *((_QWORD *)v21 + 8) = v23;
  *((_QWORD *)v21 + 10) = *((_QWORD *)v22 + 10);
  swift_bridgeObjectRelease();
  *((_QWORD *)v21 + 11) = *((_QWORD *)v22 + 11);
  v21[96] = v22[96];
  *((_QWORD *)v21 + 13) = *((_QWORD *)v22 + 13);
  v21[112] = v22[112];
  *((_QWORD *)v21 + 15) = *((_QWORD *)v22 + 15);
  *((_WORD *)v21 + 64) = *((_WORD *)v22 + 64);
  v24 = a3[7];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for Constraints(0);
  v28 = __swift_getEnumTagSinglePayload((uint64_t)v25, 1, v27);
  v29 = __swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27);
  if (!v28)
  {
    if (!v29)
    {
      if (a1 == a2)
        goto LABEL_26;
      outlined destroy of Prompt.Turn.Segment((uint64_t)v25, type metadata accessor for Constraints);
      if (!swift_getEnumCaseMultiPayload())
      {
        v39 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v25, v26, v39);
        swift_storeEnumTagMultiPayload();
        goto LABEL_26;
      }
      v30 = *(_QWORD *)(v27 - 8);
      goto LABEL_19;
    }
    outlined destroy of Prompt.Turn.Segment((uint64_t)v25, type metadata accessor for Constraints);
LABEL_18:
    v30 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?)
                    - 8);
LABEL_19:
    memcpy(v25, v26, *(_QWORD *)(v30 + 64));
    goto LABEL_26;
  }
  if (v29)
    goto LABEL_18;
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v31 = type metadata accessor for GenerationSchema();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v25, v26, v31);
    swift_storeEnumTagMultiPayload();
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
LABEL_26:
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  swift_bridgeObjectRelease();
  v32 = a3[10];
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  v36 = v34[3];
  v33[2] = v34[2];
  v33[3] = v36;
  swift_bridgeObjectRelease();
  v37 = v34[5];
  v33[4] = v34[4];
  v33[5] = v37;
  swift_bridgeObjectRelease();
  v33[6] = v34[6];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompletePromptTemplateRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B6077C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = OUTLINED_FUNCTION_649();
  v4 = type metadata accessor for PromptTemplateInfoEnvelope(v3);
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)v0)
  {
    v5 = v4;
    v6 = *(int *)(v2 + 20);
  }
  else
  {
    if ((_DWORD)v0 == 0x7FFFFFFF)
    {
      OUTLINED_FUNCTION_97();
      return;
    }
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    v6 = *(int *)(v2 + 28);
  }
  OUTLINED_FUNCTION_19_1(v1 + v6, v0, v5);
}

uint64_t storeEnumTagSinglePayload for CompletePromptTemplateRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B60810()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = OUTLINED_FUNCTION_275_0();
  type metadata accessor for PromptTemplateInfoEnvelope(v4);
  OUTLINED_FUNCTION_544();
  if (!v5)
  {
    if (v3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v1 + *(int *)(v2 + 24) + 80) = (v0 - 1);
      OUTLINED_FUNCTION_97();
      return;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
  }
  OUTLINED_FUNCTION_238_0();
  OUTLINED_FUNCTION_18_1(v6, v7, v8, v9);
}

void type metadata completion function for CompletePromptTemplateRequest()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for PromptTemplateInfoEnvelope(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Constraints?(319, &lazy cache variable for type metadata for Constraints?, (void (*)(uint64_t))type metadata accessor for Constraints);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CompletePromptRequest(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = a2[2];
    v9 = a2[3];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 96) = a2[12];
    *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = a2[14];
    *(_QWORD *)(a1 + 120) = v11;
    v12 = a2[17];
    *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
    *(_QWORD *)(a1 + 136) = v12;
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
    v13 = a3[6];
    v14 = (_QWORD *)(a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    v16 = type metadata accessor for Constraints(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        v20 = v15[1];
        *v14 = *v15;
        v14[1] = v20;
        swift_bridgeObjectRetain();
      }
      else
      {
        v21 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v14, v15, v21);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    v22 = a3[8];
    *(_QWORD *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v23 = (char *)v4 + v22;
    v24 = (_OWORD *)((char *)a2 + v22);
    v25 = *(uint64_t *)((char *)a2 + v22 + 8);
    swift_bridgeObjectRetain();
    if (v25 < 4)
    {
      *(_OWORD *)v23 = *v24;
    }
    else
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      *((_QWORD *)v23 + 1) = v25;
      swift_bridgeObjectRetain();
    }
    v26 = a3[10];
    *(_QWORD *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v27 = (_QWORD *)((char *)v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = v28[3];
    v27[2] = v28[2];
    v27[3] = v30;
    v31 = v28[5];
    v27[4] = v28[4];
    v27[5] = v31;
    v27[6] = v28[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CompletePromptRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Constraints(0);
  if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for GenerationSchema();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
    }
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + *(int *)(a2 + 32) + 8) >= 4uLL)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CompletePromptRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v11;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v15 = type metadata accessor for Constraints(0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v18 = v14[1];
      *v13 = *v14;
      v13[1] = v18;
      swift_bridgeObjectRetain();
    }
    else
    {
      v19 = type metadata accessor for GenerationSchema();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v13, v14, v19);
    }
    swift_storeEnumTagMultiPayload();
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
  }
  v20 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v21 = a1 + v20;
  v22 = (_OWORD *)(a2 + v20);
  v23 = *(_QWORD *)(a2 + v20 + 8);
  swift_bridgeObjectRetain();
  if (v23 < 4)
  {
    *(_OWORD *)v21 = *v22;
  }
  else
  {
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v23;
    swift_bridgeObjectRetain();
  }
  v24 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = v26[3];
  v25[2] = v26[2];
  v25[3] = v28;
  v29 = v26[5];
  v25[4] = v26[4];
  v25[5] = v29;
  v25[6] = v26[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CompletePromptRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  int EnumTagSinglePayload;
  int v19;
  int EnumCaseMultiPayload;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v10;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v12;
  v13 = *(_QWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = v13;
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v14 = a3[6];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = type metadata accessor for Constraints(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, v17);
  v19 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17);
  if (EnumTagSinglePayload)
  {
    if (!v19)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *v15 = *v16;
        v15[1] = v16[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        v23 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v15, v16, v23);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      goto LABEL_18;
    }
LABEL_8:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_18;
  }
  if (v19)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)v15, type metadata accessor for Constraints);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)v15, type metadata accessor for Constraints);
    v22 = swift_getEnumCaseMultiPayload();
    if (v22 == 2 || v22 == 1)
    {
      *v15 = *v16;
      v15[1] = v16[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v24 = type metadata accessor for GenerationSchema();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v15, v16, v24);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_18:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  v28 = *(_QWORD *)(a1 + v25 + 8);
  v29 = *(_QWORD *)(a2 + v25 + 8);
  if (v28 == 3)
  {
    if (v29 >= 4)
      goto LABEL_25;
    goto LABEL_28;
  }
  if (v29 == 3)
  {
    outlined destroy of ToolChoiceEnvelope((uint64_t)v26);
    goto LABEL_28;
  }
  if (v28 >= 3)
  {
    if (v29 >= 3)
    {
      *v26 = *v27;
      v26[1] = v27[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
    outlined destroy of String((uint64_t)v26);
    goto LABEL_28;
  }
  if (v29 < 3)
  {
LABEL_28:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_29;
  }
LABEL_25:
  *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
LABEL_29:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = a3[10];
  v31 = (_QWORD *)(a1 + v30);
  v32 = (_QWORD *)(a2 + v30);
  *v31 = *(_QWORD *)(a2 + v30);
  v31[1] = *(_QWORD *)(a2 + v30 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31[2] = v32[2];
  v31[3] = v32[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31[4] = v32[4];
  v31[5] = v32[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31[6] = v32[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of ToolChoiceEnvelope(uint64_t a1)
{
  destroy for FinishReason(a1);
  return a1;
}

_OWORD *initializeWithTake for CompletePromptRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  memcpy(a1 + 2, a2 + 2, 0x82uLL);
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Constraints(0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for GenerationSchema();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v8, v9, v12);
      swift_storeEnumTagMultiPayload();
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[10];
  *(_QWORD *)((char *)a1 + a3[9]) = *(_QWORD *)((char *)a2 + a3[9]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
  *((_QWORD *)v15 + 6) = *((_QWORD *)v16 + 6);
  return a1;
}

uint64_t assignWithTake for CompletePromptRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  v8 = a3[6];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Constraints(0);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (!EnumTagSinglePayload)
  {
    if (!v13)
    {
      if (a1 == a2)
        goto LABEL_14;
      outlined destroy of Prompt.Turn.Segment((uint64_t)v9, type metadata accessor for Constraints);
      if (!swift_getEnumCaseMultiPayload())
      {
        v28 = type metadata accessor for GenerationSchema();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v9, v10, v28);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      v14 = *(_QWORD *)(v11 - 8);
LABEL_8:
      memcpy(v9, v10, *(_QWORD *)(v14 + 64));
      goto LABEL_14;
    }
    outlined destroy of Prompt.Turn.Segment((uint64_t)v9, type metadata accessor for Constraints);
LABEL_7:
    v14 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?)
                    - 8);
    goto LABEL_8;
  }
  if (v13)
    goto LABEL_7;
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    v15 = type metadata accessor for GenerationSchema();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v9, v10, v15);
    swift_storeEnumTagMultiPayload();
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
LABEL_14:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = *(_QWORD *)(a1 + v16 + 8);
  v20 = *(_QWORD *)(a2 + v16 + 8);
  if (v19 != 3)
  {
    if (v20 == 3)
    {
      outlined destroy of ToolChoiceEnvelope((uint64_t)v17);
    }
    else if (v19 >= 3)
    {
      if (v20 >= 3)
      {
        *v17 = *v18;
        v17[1] = v20;
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      outlined destroy of String((uint64_t)v17);
    }
  }
  *(_OWORD *)v17 = *(_OWORD *)v18;
LABEL_21:
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  v21 = a3[10];
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v25 = v23[3];
  v22[2] = v23[2];
  v22[3] = v25;
  swift_bridgeObjectRelease();
  v26 = v23[5];
  v22[4] = v23[4];
  v22[5] = v26;
  swift_bridgeObjectRelease();
  v22[6] = v23[6];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CompletePromptRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B61804()
{
  __swift_get_extra_inhabitant_index_7Tm();
}

uint64_t storeEnumTagSinglePayload for CompletePromptRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B6181C()
{
  __swift_store_extra_inhabitant_index_8Tm();
}

void type metadata completion function for CompletePromptRequest()
{
  unint64_t v0;

  type metadata accessor for Constraints?(319, &lazy cache variable for type metadata for Constraints?, (void (*)(uint64_t))type metadata accessor for Constraints);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void initializeBufferWithCopyOfBuffer for ToolDescription()
{
  initializeBufferWithCopyOfBuffer for ToolDescription();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_97_0();
  v1 = (uint64_t *)v0;
  v5 = *(_QWORD *)(OUTLINED_FUNCTION_95_1(v2, v0, v3, v4) - 8);
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_115_1(*v1);
  }
  else
  {
    OUTLINED_FUNCTION_683();
    v6 = OUTLINED_FUNCTION_124_1((uint64_t)v1);
    if ((_DWORD)v6)
    {
      OUTLINED_FUNCTION_313_0(v6, v7, *(_QWORD *)(v5 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_94_1();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_323();
      OUTLINED_FUNCTION_44_2();
    }
  }
  OUTLINED_FUNCTION_138();
}

void destroy for ToolDescription(uint64_t a1, uint64_t a2)
{
  destroy for ToolDescription(a1, a2, type metadata accessor for FunctionDescription);
}

void initializeWithCopy for ToolDescription()
{
  initializeWithCopy for ToolDescription();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_97_0();
  v2 = (_QWORD *)v1;
  OUTLINED_FUNCTION_95_1(v3, v1, v4, v5);
  if (OUTLINED_FUNCTION_124_1((uint64_t)v2))
  {
    v6 = OUTLINED_FUNCTION_437();
    OUTLINED_FUNCTION_142_1(*(_QWORD *)(v6 - 8));
  }
  else
  {
    v7 = v2[1];
    *v0 = *v2;
    v0[1] = v7;
    v8 = v2[3];
    v0[2] = v2[2];
    v0[3] = v8;
    OUTLINED_FUNCTION_175_1();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_514();
    OUTLINED_FUNCTION_44_2();
  }
  OUTLINED_FUNCTION_138();
}

void assignWithCopy for ToolDescription()
{
  assignWithCopy for ToolDescription();
}

{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_97_0();
  v4 = (_QWORD *)v3;
  v8 = OUTLINED_FUNCTION_95_1(v5, v3, v6, v7);
  v9 = OUTLINED_FUNCTION_105_1(v8);
  if (!v2)
  {
    if (!v9)
    {
      *v0 = *v4;
      OUTLINED_FUNCTION_392(v4[1]);
      OUTLINED_FUNCTION_112();
      v0[2] = v4[2];
      OUTLINED_FUNCTION_643(v4[3]);
      OUTLINED_FUNCTION_112();
      v16 = (uint64_t)v0 + *(int *)(v1 + 24);
      v17 = OUTLINED_FUNCTION_175_1();
      OUTLINED_FUNCTION_214_1(v16, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24));
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_317();
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    v15 = OUTLINED_FUNCTION_437();
    OUTLINED_FUNCTION_292_0(*(_QWORD *)(v15 - 8));
    goto LABEL_7;
  }
  *v0 = *v4;
  v0[1] = v4[1];
  v0[2] = v4[2];
  v0[3] = v4[3];
  v10 = *(int *)(v1 + 24);
  v11 = (char *)v0 + v10;
  v12 = (char *)v4 + v10;
  v13 = OUTLINED_FUNCTION_175_1();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_189();
  v14(v11, v12, v13);
  OUTLINED_FUNCTION_155_1();
LABEL_7:
  OUTLINED_FUNCTION_138();
}

void initializeWithTake for ToolDescription(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  initializeWithTake for ToolDescription(a1, a2, a3, type metadata accessor for FunctionDescription);
}

void assignWithTake for ToolDescription()
{
  assignWithTake for ToolDescription();
}

{
  _OWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_97_0();
  v4 = (_OWORD *)v3;
  v8 = OUTLINED_FUNCTION_95_1(v5, v3, v6, v7);
  v9 = OUTLINED_FUNCTION_105_1(v8);
  if (!v2)
  {
    if (!v9)
    {
      OUTLINED_FUNCTION_456();
      OUTLINED_FUNCTION_455();
      v14 = (uint64_t)v0 + *(int *)(v1 + 24);
      v15 = OUTLINED_FUNCTION_175_1();
      OUTLINED_FUNCTION_214_1(v14, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40));
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_317();
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    v13 = OUTLINED_FUNCTION_437();
    OUTLINED_FUNCTION_292_0(*(_QWORD *)(v13 - 8));
    goto LABEL_7;
  }
  v10 = v4[1];
  *v0 = *v4;
  v0[1] = v10;
  v11 = (uint64_t)v0 + *(int *)(v1 + 24);
  v12 = OUTLINED_FUNCTION_175_1();
  OUTLINED_FUNCTION_214_1(v11, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32));
  OUTLINED_FUNCTION_155_1();
LABEL_7:
  OUTLINED_FUNCTION_138();
}

uint64_t getEnumTagSinglePayload for ToolDescription()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B61984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_498();
  v0 = OUTLINED_FUNCTION_262_0();
  return OUTLINED_FUNCTION_159_1(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolDescription()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B619AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_498();
  v0 = OUTLINED_FUNCTION_53_2();
  return OUTLINED_FUNCTION_101_0(v0, v1, v2, v3);
}

uint64_t type metadata completion function for ToolDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, type metadata accessor for ToolType);
}

uint64_t type metadata completion function for RegisterDocumentResponseElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v5;

  result = OUTLINED_FUNCTION_578(a1, a2, a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return OUTLINED_FUNCTION_682();
  }
  return result;
}

void initializeBufferWithCopyOfBuffer for ToolType()
{
  initializeBufferWithCopyOfBuffer for ToolType();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_97_0();
  v4 = (uint64_t)v1;
  v5 = *(_QWORD *)(v2 - 8);
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_115_1(*v1);
  }
  else
  {
    OUTLINED_FUNCTION_130_1(v0, (uint64_t)v1, v2, v3);
    v6 = OUTLINED_FUNCTION_124_1(v4);
    if ((_DWORD)v6)
    {
      OUTLINED_FUNCTION_313_0(v6, v7, *(_QWORD *)(v5 + 64));
    }
    else
    {
      OUTLINED_FUNCTION_94_1();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_323();
      OUTLINED_FUNCTION_44_2();
    }
  }
  OUTLINED_FUNCTION_138();
}

void initializeWithCopy for ToolType()
{
  initializeWithCopy for ToolType();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_97_0();
  v1 = v0;
  v3 = v2;
  OUTLINED_FUNCTION_95_1(v4, v2, v0, v5);
  v6 = OUTLINED_FUNCTION_124_1(v3);
  if ((_DWORD)v6)
  {
    OUTLINED_FUNCTION_313_0(v6, v7, *(_QWORD *)(*(_QWORD *)(v1 - 8) + 64));
  }
  else
  {
    OUTLINED_FUNCTION_94_1();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_323();
    OUTLINED_FUNCTION_44_2();
  }
  OUTLINED_FUNCTION_138();
}

void assignWithCopy for ToolType()
{
  assignWithCopy for ToolType();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_97_0();
  v2 = v1;
  v4 = (_QWORD *)v3;
  v7 = OUTLINED_FUNCTION_95_1(v5, v3, v1, v6);
  v8 = OUTLINED_FUNCTION_124_1((uint64_t)v0);
  v9 = OUTLINED_FUNCTION_124_1((uint64_t)v4);
  if (!v8)
  {
    if (!v9)
    {
      *v0 = *v4;
      OUTLINED_FUNCTION_392(v4[1]);
      OUTLINED_FUNCTION_112();
      v0[2] = v4[2];
      OUTLINED_FUNCTION_643(v4[3]);
      OUTLINED_FUNCTION_112();
      v10 = (uint64_t)v0 + *(int *)(v7 + 24);
      v11 = OUTLINED_FUNCTION_175_1();
      OUTLINED_FUNCTION_302_0(v10, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24));
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_317();
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    OUTLINED_FUNCTION_142_1(*(_QWORD *)(v2 - 8));
    goto LABEL_7;
  }
  *v0 = *v4;
  v0[1] = v4[1];
  v0[2] = v4[2];
  v0[3] = v4[3];
  OUTLINED_FUNCTION_175_1();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_514();
  OUTLINED_FUNCTION_44_2();
LABEL_7:
  OUTLINED_FUNCTION_138();
}

void initializeWithTake for ToolType(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  initializeWithTake for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription, (void (*)(_QWORD))MEMORY[0x24BE3B9A0]);
}

void assignWithTake for ToolType()
{
  assignWithTake for ToolType();
}

{
  _OWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_97_0();
  v4 = v3;
  v6 = (_OWORD *)v5;
  v9 = OUTLINED_FUNCTION_95_1(v7, v5, v3, v8);
  v10 = OUTLINED_FUNCTION_105_1(v9);
  if (!v2)
  {
    if (!v10)
    {
      OUTLINED_FUNCTION_456();
      OUTLINED_FUNCTION_455();
      v14 = (uint64_t)v0 + *(int *)(v1 + 24);
      v15 = OUTLINED_FUNCTION_175_1();
      OUTLINED_FUNCTION_214_1(v14, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40));
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_317();
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    OUTLINED_FUNCTION_292_0(*(_QWORD *)(v4 - 8));
    goto LABEL_7;
  }
  v11 = v6[1];
  *v0 = *v6;
  v0[1] = v11;
  v12 = (uint64_t)v0 + *(int *)(v1 + 24);
  v13 = OUTLINED_FUNCTION_175_1();
  OUTLINED_FUNCTION_214_1(v12, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32));
  OUTLINED_FUNCTION_155_1();
LABEL_7:
  OUTLINED_FUNCTION_138();
}

uint64_t getEnumTagSinglePayload for ToolType()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B61AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_get_extra_inhabitant_index_11Tm(a1, a2, a3, type metadata accessor for FunctionDescription);
}

uint64_t storeEnumTagSinglePayload for ToolType()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B61AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_12Tm(a1, a2, a3, a4, type metadata accessor for FunctionDescription);
}

uint64_t getEnumTag for ToolType(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FunctionDescription(0);
  return __swift_getEnumTagSinglePayload(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for ToolType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FunctionDescription(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v4);
}

void type metadata completion function for ToolType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for ToolType(a1, a2, a3, type metadata accessor for FunctionDescription);
}

void initializeBufferWithCopyOfBuffer for FunctionDescription()
{
  initializeBufferWithCopyOfBuffer for FunctionDescription();
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_97_0();
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_115_1(*v1);
  }
  else
  {
    v4 = v1[1];
    *v0 = *v1;
    v0[1] = v4;
    v5 = v1[3];
    v0[2] = v1[2];
    v0[3] = v5;
    OUTLINED_FUNCTION_130_1((uint64_t)v0, (uint64_t)v1, v2, v3);
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_485();
  }
  OUTLINED_FUNCTION_138();
}

uint64_t destroy for FunctionDescription()
{
  return destroy for FunctionDescription();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_436();
  v0 = OUTLINED_FUNCTION_367();
  return OUTLINED_FUNCTION_180_1(v0, v1, v2);
}

void initializeWithCopy for FunctionDescription()
{
  initializeWithCopy for FunctionDescription();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);

  OUTLINED_FUNCTION_97_0();
  v1 = v0[1];
  *v2 = *v0;
  v2[1] = v1;
  v3 = v0[3];
  v2[2] = v0[2];
  v2[3] = v3;
  OUTLINED_FUNCTION_130_1((uint64_t)v2, (uint64_t)v0, v4, v5);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_485();
  OUTLINED_FUNCTION_138();
}

void assignWithCopy for FunctionDescription()
{
  assignWithCopy for FunctionDescription();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  OUTLINED_FUNCTION_351();
  *v4 = *v3;
  v2[1] = v3[1];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_112();
  v2[2] = *(_QWORD *)(v1 + 16);
  v2[3] = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_112();
  v5 = OUTLINED_FUNCTION_422();
  OUTLINED_FUNCTION_302_0(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24));
  OUTLINED_FUNCTION_22_0();
}

void initializeWithTake for FunctionDescription(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  initializeWithTake for FunctionDescription(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE3B9A0]);
}

void assignWithTake for FunctionDescription()
{
  assignWithTake for FunctionDescription();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_351();
  v4 = v3[1];
  *v2 = *v3;
  v2[1] = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v1 + 24);
  v2[2] = *(_QWORD *)(v1 + 16);
  v2[3] = v5;
  swift_bridgeObjectRelease();
  v6 = OUTLINED_FUNCTION_422();
  OUTLINED_FUNCTION_302_0(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40));
  OUTLINED_FUNCTION_97();
}

uint64_t getEnumTagSinglePayload for FunctionDescription()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B61B8C()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_373();
  if (v0)
  {
    OUTLINED_FUNCTION_168_1();
    OUTLINED_FUNCTION_97();
  }
  else
  {
    OUTLINED_FUNCTION_215_0();
    v1 = OUTLINED_FUNCTION_341();
    OUTLINED_FUNCTION_19_1(v1, v2, v3);
  }
}

uint64_t storeEnumTagSinglePayload for FunctionDescription()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B61BD4()
{
  __swift_store_extra_inhabitant_index_14Tm();
}

void type metadata completion function for FunctionDescription(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for FunctionDescription(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BE3B9A0]);
}

void *__swift_memcpy136_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

void type metadata accessor for CompletePromptResponse()
{
  OUTLINED_FUNCTION_181_0();
}

void *__swift_memcpy105_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x69uLL);
}

void type metadata accessor for CompletePromptResponseElement()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t *initializeBufferWithCopyOfBuffer for Constraints(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      v9 = type metadata accessor for GenerationSchema();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for Constraints(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2 || (_DWORD)result == 1)
    return swift_bridgeObjectRelease();
  if (!(_DWORD)result)
  {
    v3 = type metadata accessor for GenerationSchema();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for Constraints(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = type metadata accessor for GenerationSchema();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for Constraints(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for Constraints);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      v5 = type metadata accessor for GenerationSchema();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, a2, v5);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for Constraints(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for GenerationSchema();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for Constraints(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for Constraints);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for GenerationSchema();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Constraints()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GenerationSchema();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for RequestMetadata()
{
  OUTLINED_FUNCTION_181_0();
}

void destroy for CompletePromptResponse(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_393(a1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_508();
  OUTLINED_FUNCTION_487();
  if (*(_QWORD *)(v1 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_248_0();
  }
  else
  {
    OUTLINED_FUNCTION_104();
  }
}

void initializeWithCopy for CompletePromptResponse()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  OUTLINED_FUNCTION_97_0();
  OUTLINED_FUNCTION_628();
  v3 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v2 + 16);
  *(_OWORD *)(v0 + 24) = *(_OWORD *)(v2 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v2 + 56);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_88_0();
  if (v4)
  {
    *(_QWORD *)(v0 + 48) = v1[6];
    *(_QWORD *)(v0 + 56) = v4;
    v5 = v1[9];
    *(_QWORD *)(v0 + 64) = v1[8];
    *(_QWORD *)(v0 + 72) = v5;
    v6 = v1[11];
    *(_QWORD *)(v0 + 80) = v1[10];
    *(_QWORD *)(v0 + 88) = v6;
    v7 = v1[13];
    *(_QWORD *)(v0 + 96) = v1[12];
    *(_QWORD *)(v0 + 104) = v7;
    v8 = v1[15];
    *(_QWORD *)(v0 + 112) = v1[14];
    *(_QWORD *)(v0 + 120) = v8;
    *(_QWORD *)(v0 + 128) = v1[16];
    OUTLINED_FUNCTION_10_0();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_90();
  }
  else
  {
    OUTLINED_FUNCTION_462((void *)(v0 + 48), v1 + 6);
  }
  OUTLINED_FUNCTION_138();
}

void assignWithCopy for CompletePromptResponse()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_97_0();
  OUTLINED_FUNCTION_628();
  *v0 = *v2;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v0[1] = v1[1];
  v0[2] = v1[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v0[3] = v1[3];
  v0[4] = v1[4];
  v0[5] = v1[5];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v3 = v1[7];
  if (!v0[7])
  {
    if (v3)
    {
      OUTLINED_FUNCTION_684();
      v0[8] = v1[8];
      v0[9] = v1[9];
      v0[10] = v1[10];
      v0[11] = v1[11];
      v0[12] = v1[12];
      v0[13] = v1[13];
      v0[14] = v1[14];
      v0[15] = v1[15];
      v0[16] = v1[16];
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_76_0();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_90();
      goto LABEL_8;
    }
LABEL_7:
    OUTLINED_FUNCTION_462(v0 + 6, v1 + 6);
    goto LABEL_8;
  }
  if (!v3)
  {
    outlined destroy of PromptRenderingEnvelope((uint64_t)(v0 + 6));
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_684();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_112();
  v0[8] = v1[8];
  v0[9] = v1[9];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v0[10] = v1[10];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v0[11] = v1[11];
  v0[12] = v1[12];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v0[13] = v1[13];
  v0[14] = v1[14];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v0[15] = v1[15];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v0[16] = v1[16];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_61();
LABEL_8:
  OUTLINED_FUNCTION_138();
}

void assignWithTake for CompletePromptResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 56))
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 56);
  if (!v5)
  {
    outlined destroy of PromptRenderingEnvelope(a1 + 48);
LABEL_5:
    OUTLINED_FUNCTION_462((void *)(a1 + 48), (const void *)(a2 + 48));
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
LABEL_6:
  OUTLINED_FUNCTION_97();
}

uint64_t getEnumTagSinglePayload for CompletePromptResponse(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0 && *((_BYTE *)a1 + 136))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return OUTLINED_FUNCTION_265_0(v2);
}

uint64_t storeEnumTagSinglePayload for CompletePromptResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for PromptCompletionEnvelope()
{
  OUTLINED_FUNCTION_181_0();
}

void type metadata accessor for PromptCompletionStreamElementEnvelope()
{
  OUTLINED_FUNCTION_181_0();
}

void type metadata accessor for ToolChoiceEnvelope()
{
  OUTLINED_FUNCTION_181_0();
}

void assignWithCopy for RequestPayload()
{
  assignWithCopy for RequestPayload();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  OUTLINED_FUNCTION_132_0();
  v4 = v0;
  if (v0 != v1)
  {
    v5 = v1;
    OUTLINED_FUNCTION_634(v0, v1, v2, v3);
    OUTLINED_FUNCTION_616();
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      if (*(_QWORD *)(v5 + 8))
      {
        OUTLINED_FUNCTION_407();
        *(_QWORD *)(v4 + 24) = *(_QWORD *)(v5 + 24);
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_90();
        OUTLINED_FUNCTION_10_0();
      }
      else
      {
        v20 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)v4 = *(_OWORD *)v5;
        *(_OWORD *)(v4 + 16) = v20;
      }
      v21 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v22 = v21[5];
      v23 = (_QWORD *)(v4 + v22);
      v24 = v5 + v22;
      *v23 = *(_QWORD *)(v5 + v22);
      v23[1] = *(_QWORD *)(v5 + v22 + 8);
      v23[2] = *(_QWORD *)(v5 + v22 + 16);
      OUTLINED_FUNCTION_377();
      v26 = (char *)v23 + v25;
      v27 = (const void *)(v24 + v25);
      v28 = OUTLINED_FUNCTION_29_0();
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_154();
      if (OUTLINED_FUNCTION_125_1((uint64_t)v27))
      {
        v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        OUTLINED_FUNCTION_230_0((uint64_t)v26, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16));
        OUTLINED_FUNCTION_61_2((uint64_t)v26);
      }
      v30 = v21[6];
      v31 = v4 + v30;
      v32 = (uint64_t *)(v5 + v30);
      v33 = *v32;
      *(_BYTE *)(v31 + 8) = *((_BYTE *)v32 + 8);
      *(_QWORD *)v31 = v33;
      v34 = v32[2];
      *(_BYTE *)(v31 + 24) = *((_BYTE *)v32 + 24);
      *(_QWORD *)(v31 + 16) = v34;
      v35 = v32[4];
      *(_BYTE *)(v31 + 40) = *((_BYTE *)v32 + 40);
      *(_QWORD *)(v31 + 32) = v35;
      v36 = v32[6];
      *(_BYTE *)(v31 + 56) = *((_BYTE *)v32 + 56);
      *(_QWORD *)(v31 + 48) = v36;
      v37 = v32[8];
      *(_BYTE *)(v31 + 72) = *((_BYTE *)v32 + 72);
      *(_QWORD *)(v31 + 64) = v37;
      *(_QWORD *)(v31 + 80) = v32[10];
      v38 = v32[11];
      *(_BYTE *)(v31 + 96) = *((_BYTE *)v32 + 96);
      *(_QWORD *)(v31 + 88) = v38;
      v39 = v32[13];
      *(_BYTE *)(v31 + 112) = *((_BYTE *)v32 + 112);
      *(_QWORD *)(v31 + 104) = v39;
      v40 = v32[15];
      *(_BYTE *)(v31 + 128) = *((_BYTE *)v32 + 128);
      *(_QWORD *)(v31 + 120) = v40;
      *(_BYTE *)(v31 + 129) = *((_BYTE *)v32 + 129);
      v41 = v21[7];
      v42 = v4 + v41;
      v43 = v5 + v41;
      type metadata accessor for Constraints(0);
      OUTLINED_FUNCTION_90();
      if (OUTLINED_FUNCTION_125_1(v43))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        OUTLINED_FUNCTION_162_1(v44);
      }
      else
      {
        v45 = OUTLINED_FUNCTION_259_0();
        if (v45 == 2 || v45 == 1)
        {
          OUTLINED_FUNCTION_232_0();
        }
        else
        {
          v47 = OUTLINED_FUNCTION_59_2();
          OUTLINED_FUNCTION_107_1(v47);
        }
        OUTLINED_FUNCTION_512();
        OUTLINED_FUNCTION_61_2(v42);
      }
      *(_QWORD *)(v4 + v21[8]) = *(_QWORD *)(v5 + v21[8]);
      OUTLINED_FUNCTION_82_1();
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_QWORD *)v4 = *(_QWORD *)v5;
        v7 = *(_QWORD *)(v5 + 8);
        *(_QWORD *)(v4 + 8) = v7;
        *(_QWORD *)(v4 + 16) = *(_QWORD *)(v5 + 16);
        *(_QWORD *)(v4 + 24) = *(_QWORD *)(v5 + 24);
        v8 = *(_QWORD *)(v5 + 32);
        *(_BYTE *)(v4 + 40) = *(_BYTE *)(v5 + 40);
        *(_QWORD *)(v4 + 32) = v8;
        v9 = *(_QWORD *)(v5 + 48);
        *(_BYTE *)(v4 + 56) = *(_BYTE *)(v5 + 56);
        *(_QWORD *)(v4 + 48) = v9;
        OUTLINED_FUNCTION_539();
        *(_BYTE *)(v4 + 88) = *(_BYTE *)(v5 + 88);
        *(_QWORD *)(v4 + 80) = v10;
        v11 = *(_QWORD *)(v5 + 96);
        *(_BYTE *)(v4 + 104) = *(_BYTE *)(v5 + 104);
        *(_QWORD *)(v4 + 96) = v11;
        v12 = *(_QWORD *)(v5 + 112);
        *(_QWORD *)(v4 + 112) = v12;
        v13 = *(_QWORD *)(v5 + 120);
        *(_BYTE *)(v4 + 128) = *(_BYTE *)(v5 + 128);
        *(_QWORD *)(v4 + 120) = v13;
        OUTLINED_FUNCTION_486();
        *(_BYTE *)(v4 + 160) = *(_BYTE *)(v5 + 160);
        *(_QWORD *)(v4 + 152) = v14;
        *(_BYTE *)(v4 + 161) = *(_BYTE *)(v5 + 161);
        v15 = *(int *)(type metadata accessor for CompletePromptRequest(0) + 24);
        v16 = v4 + v15;
        v17 = v5 + v15;
        type metadata accessor for Constraints(0);
        OUTLINED_FUNCTION_90();
        OUTLINED_FUNCTION_11();
        OUTLINED_FUNCTION_72();
        OUTLINED_FUNCTION_10_0();
        if (OUTLINED_FUNCTION_125_1(v17))
        {
          v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
          OUTLINED_FUNCTION_162_1(v18);
        }
        else
        {
          v19 = OUTLINED_FUNCTION_259_0();
          v7 = v19;
          if ((_DWORD)v19 == 2 || (_DWORD)v19 == 1)
          {
            OUTLINED_FUNCTION_232_0();
          }
          else
          {
            v46 = OUTLINED_FUNCTION_59_2();
            OUTLINED_FUNCTION_107_1(v46);
          }
          OUTLINED_FUNCTION_512();
          OUTLINED_FUNCTION_61_2(v16);
        }
        OUTLINED_FUNCTION_290_0();
        if (v16 < 4)
        {
          *(_OWORD *)v7 = *(_OWORD *)v12;
        }
        else
        {
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
          swift_bridgeObjectRetain();
        }
        OUTLINED_FUNCTION_82_1();
        goto LABEL_32;
      }
      OUTLINED_FUNCTION_407();
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v4 + 32) = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v4 + 40) = *(_QWORD *)(v5 + 40);
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v4 + 56) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v4 + 64) = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v4 + 72) = *(_QWORD *)(v5 + 72);
      OUTLINED_FUNCTION_605();
    }
    swift_bridgeObjectRetain();
LABEL_32:
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_88_0();
    OUTLINED_FUNCTION_77_0();
    OUTLINED_FUNCTION_154();
    OUTLINED_FUNCTION_76_0();
    OUTLINED_FUNCTION_640();
    swift_storeEnumTagMultiPayload();
  }
  OUTLINED_FUNCTION_96_1();
}

void assignWithTake for RequestPayload()
{
  assignWithTake for RequestPayload();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  int EnumCaseMultiPayload;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_97_0();
  v7 = (_OWORD *)v3;
  if (v3 != v4)
  {
    v8 = v5;
    v9 = (_OWORD *)v4;
    OUTLINED_FUNCTION_634(v3, v4, v5, v6);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = OUTLINED_FUNCTION_93_1();
      if (OUTLINED_FUNCTION_125_1(v2))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        OUTLINED_FUNCTION_258_0(v15);
      }
      else
      {
        OUTLINED_FUNCTION_230_0(v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32));
        OUTLINED_FUNCTION_61_2(v1);
      }
      OUTLINED_FUNCTION_166_1((char *)v7 + *(int *)(v0 + 24), (char *)v9 + *(int *)(v0 + 24));
      if (OUTLINED_FUNCTION_55_2(*(int *)(v0 + 28)))
      {
        v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        OUTLINED_FUNCTION_42_1(*(_QWORD *)(v16 - 8));
      }
      else
      {
        if (OUTLINED_FUNCTION_249_0())
        {
          OUTLINED_FUNCTION_42_1(*(_QWORD *)(v2 - 8));
        }
        else
        {
          v18 = OUTLINED_FUNCTION_59_2();
          OUTLINED_FUNCTION_108_1(v18);
          OUTLINED_FUNCTION_210_1();
        }
        OUTLINED_FUNCTION_103_1();
      }
      OUTLINED_FUNCTION_99_0();
LABEL_22:
      swift_storeEnumTagMultiPayload();
      goto LABEL_23;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v11 = v9[1];
      *v7 = *v9;
      v7[1] = v11;
      OUTLINED_FUNCTION_166_1(v7 + 2, v9 + 2);
      v12 = type metadata accessor for CompletePromptRequest(0);
      if (OUTLINED_FUNCTION_55_2(*(int *)(v12 + 24)))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        OUTLINED_FUNCTION_42_1(*(_QWORD *)(v13 - 8));
      }
      else
      {
        if (OUTLINED_FUNCTION_249_0())
        {
          OUTLINED_FUNCTION_42_1(*(_QWORD *)(v2 - 8));
        }
        else
        {
          v17 = OUTLINED_FUNCTION_59_2();
          OUTLINED_FUNCTION_108_1(v17);
          OUTLINED_FUNCTION_210_1();
        }
        OUTLINED_FUNCTION_103_1();
      }
      OUTLINED_FUNCTION_73_2();
      goto LABEL_22;
    }
    OUTLINED_FUNCTION_142_1(*(_QWORD *)(v8 - 8));
  }
LABEL_23:
  OUTLINED_FUNCTION_138();
}

uint64_t initializeBufferWithCopyOfBuffer for StreamingRequestPayload(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = a2[1];
      if (v6)
      {
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v6;
        v7 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v20 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
      }
      v21 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v22 = v21[5];
      v23 = (_QWORD *)(a1 + v22);
      v24 = (uint64_t)a2 + v22;
      v25 = *(uint64_t *)((char *)a2 + v22 + 8);
      *v23 = *(uint64_t *)((char *)a2 + v22);
      v23[1] = v25;
      v23[2] = *(uint64_t *)((char *)a2 + v22 + 16);
      v26 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v27 = (char *)v23 + v26;
      v28 = (const void *)(v24 + v26);
      v29 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v28, 1, v29))
      {
        v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
        __swift_storeEnumTagSinglePayload((uint64_t)v27, 0, 1, v29);
      }
      v33 = v21[6];
      v34 = a1 + v33;
      v35 = (uint64_t)a2 + v33;
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *(_BYTE *)(v34 + 8) = *(_BYTE *)(v35 + 8);
      *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
      *(_BYTE *)(v34 + 24) = *(_BYTE *)(v35 + 24);
      *(_QWORD *)(v34 + 32) = *(_QWORD *)(v35 + 32);
      *(_BYTE *)(v34 + 40) = *(_BYTE *)(v35 + 40);
      *(_BYTE *)(v34 + 56) = *(_BYTE *)(v35 + 56);
      *(_QWORD *)(v34 + 48) = *(_QWORD *)(v35 + 48);
      v36 = *(_QWORD *)(v35 + 64);
      *(_BYTE *)(v34 + 72) = *(_BYTE *)(v35 + 72);
      *(_QWORD *)(v34 + 64) = v36;
      v37 = *(_QWORD *)(v35 + 88);
      *(_QWORD *)(v34 + 80) = *(_QWORD *)(v35 + 80);
      *(_QWORD *)(v34 + 88) = v37;
      *(_BYTE *)(v34 + 96) = *(_BYTE *)(v35 + 96);
      *(_QWORD *)(v34 + 104) = *(_QWORD *)(v35 + 104);
      *(_BYTE *)(v34 + 112) = *(_BYTE *)(v35 + 112);
      *(_QWORD *)(v34 + 120) = *(_QWORD *)(v35 + 120);
      *(_WORD *)(v34 + 128) = *(_WORD *)(v35 + 128);
      v38 = v21[7];
      v39 = (_QWORD *)(a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v40, 1, v41))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          v44 = v40[1];
          *v39 = *v40;
          v39[1] = v44;
          swift_bridgeObjectRetain();
        }
        else
        {
          v56 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v39, v40, v56);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v39, 0, 1, v41);
      }
      *(_QWORD *)(a1 + v21[8]) = *(uint64_t *)((char *)a2 + v21[8]);
      *(_QWORD *)(a1 + v21[9]) = *(uint64_t *)((char *)a2 + v21[9]);
      v57 = v21[10];
      v58 = (_QWORD *)(a1 + v57);
      v59 = (uint64_t *)((char *)a2 + v57);
      v60 = v59[1];
      *v58 = *v59;
      v58[1] = v60;
      v61 = v59[3];
      v58[2] = v59[2];
      v58[3] = v61;
      v62 = v59[5];
      v58[4] = v59[4];
      v58[5] = v62;
      v58[6] = v59[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v9 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v9;
      v10 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v10;
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      v11 = a2[8];
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_QWORD *)(a1 + 64) = v11;
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      v12 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v12;
      v13 = a2[17];
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_QWORD *)(a1 + 136) = v13;
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
      v14 = (int *)type metadata accessor for CompletePromptRequest(0);
      v15 = v14[6];
      v16 = (_QWORD *)(a1 + v15);
      v17 = (uint64_t *)((char *)a2 + v15);
      v18 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v31 = swift_getEnumCaseMultiPayload();
        if (v31 == 2 || v31 == 1)
        {
          v32 = v17[1];
          *v16 = *v17;
          v16[1] = v32;
          swift_bridgeObjectRetain();
        }
        else
        {
          v45 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v45 - 8) + 16))(v16, v17, v45);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      *(_QWORD *)(a1 + v14[7]) = *(uint64_t *)((char *)a2 + v14[7]);
      v46 = v14[8];
      v47 = a1 + v46;
      v48 = (_OWORD *)((char *)a2 + v46);
      v49 = *(uint64_t *)((char *)a2 + v46 + 8);
      swift_bridgeObjectRetain();
      if (v49 < 4)
      {
        *(_OWORD *)v47 = *v48;
      }
      else
      {
        *(_QWORD *)v47 = *(_QWORD *)v48;
        *(_QWORD *)(v47 + 8) = v49;
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(a1 + v14[9]) = *(uint64_t *)((char *)a2 + v14[9]);
      v50 = v14[10];
      v51 = (_QWORD *)(a1 + v50);
      v52 = (uint64_t *)((char *)a2 + v50);
      v53 = v52[1];
      *v51 = *v52;
      v51[1] = v53;
      v54 = v52[3];
      v51[2] = v52[2];
      v51[3] = v54;
      v55 = v52[5];
      v51[4] = v52[4];
      v51[5] = v55;
      v51[6] = v52[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for StreamingRequestPayload(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v2 = type metadata accessor for CompletePromptTemplateRequest(0);
    v3 = a1 + *(int *)(v2 + 20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v3 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    v5 = type metadata accessor for Locale();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    swift_bridgeObjectRelease();
    v6 = a1 + *(int *)(v2 + 28);
    v7 = type metadata accessor for Constraints(0);
    if (!__swift_getEnumTagSinglePayload(v6, 1, v7))
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
      }
      else if (!EnumCaseMultiPayload)
      {
        v9 = type metadata accessor for GenerationSchema();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
      }
    }
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = type metadata accessor for CompletePromptRequest(0);
  v11 = a1 + *(int *)(v10 + 24);
  v12 = type metadata accessor for Constraints(0);
  if (!__swift_getEnumTagSinglePayload(v11, 1, v12))
  {
    v13 = swift_getEnumCaseMultiPayload();
    if (v13 == 2 || v13 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v13)
    {
      v14 = type metadata accessor for GenerationSchema();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v11, v14);
    }
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + *(int *)(v10 + 32) + 8) >= 4uLL)
    goto LABEL_20;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StreamingRequestPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int EnumCaseMultiPayload;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v4;
      v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
    }
    v18 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    v19 = v18[5];
    v20 = (_QWORD *)(a1 + v19);
    v21 = a2 + v19;
    v22 = *(_QWORD *)(a2 + v19 + 8);
    *v20 = *(_QWORD *)(a2 + v19);
    v20[1] = v22;
    v20[2] = *(_QWORD *)(a2 + v19 + 16);
    v23 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    v24 = (char *)v20 + v23;
    v25 = (const void *)(v21 + v23);
    v26 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
    }
    v30 = v18[6];
    v31 = a1 + v30;
    v32 = a2 + v30;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(v32 + 8);
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v32 + 16);
    *(_BYTE *)(v31 + 24) = *(_BYTE *)(v32 + 24);
    *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
    *(_BYTE *)(v31 + 40) = *(_BYTE *)(v32 + 40);
    *(_BYTE *)(v31 + 56) = *(_BYTE *)(v32 + 56);
    *(_QWORD *)(v31 + 48) = *(_QWORD *)(v32 + 48);
    v33 = *(_QWORD *)(v32 + 64);
    *(_BYTE *)(v31 + 72) = *(_BYTE *)(v32 + 72);
    *(_QWORD *)(v31 + 64) = v33;
    v34 = *(_QWORD *)(v32 + 88);
    *(_QWORD *)(v31 + 80) = *(_QWORD *)(v32 + 80);
    *(_QWORD *)(v31 + 88) = v34;
    *(_BYTE *)(v31 + 96) = *(_BYTE *)(v32 + 96);
    *(_QWORD *)(v31 + 104) = *(_QWORD *)(v32 + 104);
    *(_BYTE *)(v31 + 112) = *(_BYTE *)(v32 + 112);
    *(_QWORD *)(v31 + 120) = *(_QWORD *)(v32 + 120);
    *(_WORD *)(v31 + 128) = *(_WORD *)(v32 + 128);
    v35 = v18[7];
    v36 = (_QWORD *)(a1 + v35);
    v37 = (_QWORD *)(a2 + v35);
    v38 = type metadata accessor for Constraints(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, v38))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        v41 = v37[1];
        *v36 = *v37;
        v36[1] = v41;
        swift_bridgeObjectRetain();
      }
      else
      {
        v53 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v36, v37, v53);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v36, 0, 1, v38);
    }
    *(_QWORD *)(a1 + v18[8]) = *(_QWORD *)(a2 + v18[8]);
    *(_QWORD *)(a1 + v18[9]) = *(_QWORD *)(a2 + v18[9]);
    v54 = v18[10];
    v55 = (_QWORD *)(a1 + v54);
    v56 = (_QWORD *)(a2 + v54);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = v56[3];
    v55[2] = v56[2];
    v55[3] = v58;
    v59 = v56[5];
    v55[4] = v56[4];
    v55[5] = v59;
    v55[6] = v56[6];
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    v9 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v9;
    v10 = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v10;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    v11 = (int *)type metadata accessor for CompletePromptRequest(0);
    v12 = v11[6];
    v13 = (_QWORD *)(a1 + v12);
    v14 = (_QWORD *)(a2 + v12);
    v15 = type metadata accessor for Constraints(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v28 = swift_getEnumCaseMultiPayload();
      if (v28 == 2 || v28 == 1)
      {
        v29 = v14[1];
        *v13 = *v14;
        v13[1] = v29;
        swift_bridgeObjectRetain();
      }
      else
      {
        v42 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v13, v14, v42);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
    }
    *(_QWORD *)(a1 + v11[7]) = *(_QWORD *)(a2 + v11[7]);
    v43 = v11[8];
    v44 = a1 + v43;
    v45 = (_OWORD *)(a2 + v43);
    v46 = *(_QWORD *)(a2 + v43 + 8);
    swift_bridgeObjectRetain();
    if (v46 < 4)
    {
      *(_OWORD *)v44 = *v45;
    }
    else
    {
      *(_QWORD *)v44 = *(_QWORD *)v45;
      *(_QWORD *)(v44 + 8) = v46;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a1 + v11[9]) = *(_QWORD *)(a2 + v11[9]);
    v47 = v11[10];
    v48 = (_QWORD *)(a1 + v47);
    v49 = (_QWORD *)(a2 + v47);
    v50 = v49[1];
    *v48 = *v49;
    v48[1] = v50;
    v51 = v49[3];
    v48[2] = v49[2];
    v48[3] = v51;
    v52 = v49[5];
    v48[4] = v49[4];
    v48[5] = v52;
    v48[6] = v49[6];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for StreamingRequestPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  int EnumCaseMultiPayload;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment(a1, type metadata accessor for StreamingRequestPayload);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v18;
      }
      v19 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v20 = v19[5];
      v21 = (_QWORD *)(a1 + v20);
      v22 = a2 + v20;
      *v21 = *(_QWORD *)(a2 + v20);
      v21[1] = *(_QWORD *)(a2 + v20 + 8);
      v21[2] = *(_QWORD *)(a2 + v20 + 16);
      v23 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v24 = (char *)v21 + v23;
      v25 = (const void *)(v22 + v23);
      v26 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v25, 1, v26))
      {
        v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
        __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v26);
      }
      v29 = v19[6];
      v30 = a1 + v29;
      v31 = (uint64_t *)(a2 + v29);
      v32 = *v31;
      *(_BYTE *)(v30 + 8) = *((_BYTE *)v31 + 8);
      *(_QWORD *)v30 = v32;
      v33 = v31[2];
      *(_BYTE *)(v30 + 24) = *((_BYTE *)v31 + 24);
      *(_QWORD *)(v30 + 16) = v33;
      v34 = v31[4];
      *(_BYTE *)(v30 + 40) = *((_BYTE *)v31 + 40);
      *(_QWORD *)(v30 + 32) = v34;
      v35 = v31[6];
      *(_BYTE *)(v30 + 56) = *((_BYTE *)v31 + 56);
      *(_QWORD *)(v30 + 48) = v35;
      v36 = v31[8];
      *(_BYTE *)(v30 + 72) = *((_BYTE *)v31 + 72);
      *(_QWORD *)(v30 + 64) = v36;
      *(_QWORD *)(v30 + 80) = v31[10];
      v37 = v31[11];
      *(_BYTE *)(v30 + 96) = *((_BYTE *)v31 + 96);
      *(_QWORD *)(v30 + 88) = v37;
      v38 = v31[13];
      *(_BYTE *)(v30 + 112) = *((_BYTE *)v31 + 112);
      *(_QWORD *)(v30 + 104) = v38;
      v39 = v31[15];
      *(_BYTE *)(v30 + 128) = *((_BYTE *)v31 + 128);
      *(_QWORD *)(v30 + 120) = v39;
      *(_BYTE *)(v30 + 129) = *((_BYTE *)v31 + 129);
      v40 = v19[7];
      v41 = (_QWORD *)(a1 + v40);
      v42 = (_QWORD *)(a2 + v40);
      v43 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
      {
        v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
      }
      else
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          *v41 = *v42;
          v41[1] = v42[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          v54 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v41, v42, v54);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v41, 0, 1, v43);
      }
      *(_QWORD *)(a1 + v19[8]) = *(_QWORD *)(a2 + v19[8]);
      *(_QWORD *)(a1 + v19[9]) = *(_QWORD *)(a2 + v19[9]);
      v55 = v19[10];
      v56 = (_QWORD *)(a1 + v55);
      v57 = (_QWORD *)(a2 + v55);
      *v56 = *v57;
      v56[1] = v57[1];
      v56[2] = v57[2];
      v56[3] = v57[3];
      v56[4] = v57[4];
      v56[5] = v57[5];
      v56[6] = v57[6];
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v4 = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v4;
      v5 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v5;
      v6 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v6;
      v7 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v7;
      v8 = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v8;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v9 = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = v9;
      v10 = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = v10;
      v11 = *(_QWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = v11;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      v12 = (int *)type metadata accessor for CompletePromptRequest(0);
      v13 = v12[6];
      v14 = (_QWORD *)(a1 + v13);
      v15 = (_QWORD *)(a2 + v13);
      v16 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        v28 = swift_getEnumCaseMultiPayload();
        if (v28 == 2 || v28 == 1)
        {
          *v14 = *v15;
          v14[1] = v15[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          v46 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v14, v15, v46);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      *(_QWORD *)(a1 + v12[7]) = *(_QWORD *)(a2 + v12[7]);
      v47 = v12[8];
      v48 = a1 + v47;
      v49 = a2 + v47;
      v50 = *(_QWORD *)(a2 + v47 + 8);
      swift_bridgeObjectRetain();
      if (v50 < 4)
      {
        *(_OWORD *)v48 = *(_OWORD *)v49;
      }
      else
      {
        *(_QWORD *)v48 = *(_QWORD *)v49;
        *(_QWORD *)(v48 + 8) = *(_QWORD *)(v49 + 8);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(a1 + v12[9]) = *(_QWORD *)(a2 + v12[9]);
      v51 = v12[10];
      v52 = (_QWORD *)(a1 + v51);
      v53 = (_QWORD *)(a2 + v51);
      *v52 = *v53;
      v52[1] = v53[1];
      v52[2] = v53[2];
      v52[3] = v53[3];
      v52[4] = v53[4];
      v52[5] = v53[5];
      v52[6] = v53[6];
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for StreamingRequestPayload(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    v6 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    v7 = v6[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
    *((_QWORD *)v8 + 2) = *(_QWORD *)((char *)a2 + v7 + 16);
    v10 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    v11 = &v8[v10];
    v12 = &v9[v10];
    v13 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
    }
    memcpy((char *)a1 + v6[6], (char *)a2 + v6[6], 0x82uLL);
    v20 = v6[7];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for Constraints(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v26 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
        swift_storeEnumTagMultiPayload();
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
    }
    *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
  }
  else
  {
    memcpy(a1 + 2, a2 + 2, 0x82uLL);
    v6 = (int *)type metadata accessor for CompletePromptRequest(0);
    v15 = v6[6];
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Constraints(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v25 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v16, v17, v25);
        swift_storeEnumTagMultiPayload();
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
    }
    *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
    *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
  }
  *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
  v27 = v6[10];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *((_OWORD *)v29 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *((_OWORD *)v28 + 1) = v30;
  *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
  *((_QWORD *)v28 + 6) = *((_QWORD *)v29 + 6);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for StreamingRequestPayload(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for StreamingRequestPayload);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    if (EnumCaseMultiPayload == 1)
    {
      v6 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v7 = v6[5];
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      *(_OWORD *)v8 = *(_OWORD *)((char *)a2 + v7);
      *((_QWORD *)v8 + 2) = *(_QWORD *)((char *)a2 + v7 + 16);
      v10 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v11 = &v8[v10];
      v12 = &v9[v10];
      v13 = type metadata accessor for Locale();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
      memcpy((char *)a1 + v6[6], (char *)a2 + v6[6], 0x82uLL);
      v20 = v6[7];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for Constraints(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v22, 1, v23))
      {
        v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          v26 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
          swift_storeEnumTagMultiPayload();
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v21, 0, 1, v23);
      }
      *(_QWORD *)((char *)a1 + v6[8]) = *(_QWORD *)((char *)a2 + v6[8]);
    }
    else
    {
      memcpy(a1 + 2, a2 + 2, 0x82uLL);
      v6 = (int *)type metadata accessor for CompletePromptRequest(0);
      v15 = v6[6];
      v16 = (char *)a1 + v15;
      v17 = (char *)a2 + v15;
      v18 = type metadata accessor for Constraints(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        }
        else
        {
          v25 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v16, v17, v25);
          swift_storeEnumTagMultiPayload();
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
      *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
    }
    *(_QWORD *)((char *)a1 + v6[9]) = *(_QWORD *)((char *)a2 + v6[9]);
    v27 = v6[10];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = *((_OWORD *)v29 + 1);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = v30;
    *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
    *((_QWORD *)v28 + 6) = *((_QWORD *)v29 + 6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for StreamingRequestPayload()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for CompletePromptRequest(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for CompletePromptTemplateRequest(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *type metadata accessor for StreamingRequestPayload.CodingKeys()
{
  return &unk_2519D0638;
}

void *type metadata accessor for StreamingRequestPayload.CompletePromptCodingKeys()
{
  return &unk_2519D06C8;
}

void *type metadata accessor for StreamingRequestPayload.CompletePromptTemplateCodingKeys()
{
  return &unk_2519D0758;
}

void *type metadata accessor for RequestPayload.CodingKeys()
{
  return &unk_2519CE408;
}

void *type metadata accessor for RequestPayload.CountTokensCodingKeys()
{
  return &unk_2519CE498;
}

void *type metadata accessor for RequestPayload.CompletePromptCodingKeys()
{
  return &unk_2519CE528;
}

void *type metadata accessor for RequestPayload.CompletePromptTemplateCodingKeys()
{
  return &unk_2519CE5B8;
}

void *type metadata accessor for ToolChoiceEnvelope.CodingKeys()
{
  return &unk_2519CF6A0;
}

void *type metadata accessor for ToolChoiceEnvelope.NoneCodingKeys()
{
  return &unk_2519CF730;
}

void *type metadata accessor for ToolChoiceEnvelope.AutomaticCodingKeys()
{
  return &unk_2519CF800;
}

void *type metadata accessor for ToolChoiceEnvelope.RequiredCodingKeys()
{
  return &unk_2519CF7E0;
}

void *type metadata accessor for ToolChoiceEnvelope.FunctionCodingKeys()
{
  return &unk_2519CF750;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.CodingKeys()
{
  return &unk_2519D2760;
}

uint64_t storeEnumTagSinglePayload for PromptCompletionEnvelope.CandidateEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for PromptCompletionEnvelope.CandidateEnvelope()
{
  return &unk_2519D0FE0;
}

void *type metadata accessor for UsageEnvelope()
{
  return &unk_2519CDCD8;
}

void *type metadata accessor for ModelInformationEnvelope()
{
  return &unk_2519D0C10;
}

void *type metadata accessor for PromptCompletionEnvelope.CodingKeys()
{
  return &unk_2519D1068;
}

void *type metadata accessor for Constraints.CodingKeys()
{
  return &unk_2519CD7A8;
}

void *type metadata accessor for Constraints.SchemaCodingKeys()
{
  return &unk_2519CD838;
}

void *type metadata accessor for Constraints.GrammarCodingKeys()
{
  return &unk_2519CD8C8;
}

void *type metadata accessor for Constraints.PartialGrammarCodingKeys()
{
  return &unk_2519CD958;
}

void *type metadata accessor for CompletePromptResponseElement.CodingKeys()
{
  return &unk_2519D1760;
}

void destroy for CompletePromptResponseElement(uint64_t a1)
{
  outlined consume of PromptCompletionStreamElementEnvelope.Envelope(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_BYTE *)(a1 + 104));
}

void initializeWithCopy for CompletePromptResponseElement(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  OUTLINED_FUNCTION_43_0(a1, a2);
  OUTLINED_FUNCTION_577();
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 72) = v4;
  *(_QWORD *)(v2 + 80) = v5;
  *(_QWORD *)(v2 + 88) = v6;
  *(_QWORD *)(v2 + 96) = v7;
  *(_BYTE *)(v2 + 104) = v8;
  OUTLINED_FUNCTION_146_0();
}

void assignWithCopy for CompletePromptResponseElement(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  OUTLINED_FUNCTION_43_0(a1, a2);
  OUTLINED_FUNCTION_577();
  *(_QWORD *)(v2 + 64) = v3;
  *(_QWORD *)(v2 + 72) = v18;
  *(_QWORD *)(v2 + 80) = v19;
  *(_QWORD *)(v2 + 88) = v20;
  *(_QWORD *)(v2 + 96) = v21;
  *(_BYTE *)(v2 + 104) = v22;
  outlined consume of PromptCompletionStreamElementEnvelope.Envelope(v4, v5, v6, v7, v8, v9, v10, v11, v14, v15, v16, v17, v12, v13);
  OUTLINED_FUNCTION_146_0();
}

void assignWithTake for CompletePromptResponseElement(uint64_t a1)
{
  __n128 v2;
  uint64_t v3;
  char v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v2 = OUTLINED_FUNCTION_627();
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_BYTE *)(a1 + 104);
  v6 = v5[1];
  *(_OWORD *)a1 = *v5;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = v5[3];
  *(_OWORD *)(a1 + 32) = v5[2];
  *(_OWORD *)(a1 + 48) = v7;
  v8 = v5[5];
  *(_OWORD *)(a1 + 64) = v5[4];
  *(_OWORD *)(a1 + 80) = v8;
  *(_QWORD *)(a1 + 96) = v9;
  *(_BYTE *)(a1 + 104) = v10;
  outlined consume of PromptCompletionStreamElementEnvelope.Envelope(v11, v18, v12, v13, v14, v15, v16, v17, v2.n128_u64[0], v2.n128_i64[1], v19, v20, v3, v4);
  OUTLINED_FUNCTION_468();
}

uint64_t getEnumTagSinglePayload for CompletePromptResponseElement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 105))
    return OUTLINED_FUNCTION_265_0(*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 > 5)
    return OUTLINED_FUNCTION_265_0(v3 ^ 0xFF);
  else
    return OUTLINED_FUNCTION_265_0(-1);
}

uint64_t storeEnumTagSinglePayload for CompletePromptResponseElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PromptCompletionStreamElementEnvelope.Envelope(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t destructiveInjectEnumTag for PromptCompletionStreamElementEnvelope.Envelope(uint64_t result, char a2)
{
  *(_BYTE *)(result + 104) = a2;
  return result;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope()
{
  return &unk_2519D26D0;
}

void *type metadata accessor for CompletePromptResponse.CodingKeys()
{
  return &unk_2519CFF88;
}

void *type metadata accessor for CompletePromptRequest.CodingKeys()
{
  return &unk_2519CFE18;
}

void initializeBufferWithCopyOfBuffer for ToolDescriptionEnvelope()
{
  initializeBufferWithCopyOfBuffer for ToolDescription();
}

void destroy for ToolDescriptionEnvelope(uint64_t a1, uint64_t a2)
{
  destroy for ToolDescription(a1, a2, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

void destroy for ToolDescription(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_255_0(a1, a2, a3);
  if (OUTLINED_FUNCTION_5_0(v3))
  {
    OUTLINED_FUNCTION_97();
  }
  else
  {
    OUTLINED_FUNCTION_395();
    OUTLINED_FUNCTION_202_1();
    OUTLINED_FUNCTION_436();
    v4 = OUTLINED_FUNCTION_367();
    OUTLINED_FUNCTION_180_1(v4, v5, v6);
  }
}

void initializeWithCopy for ToolDescriptionEnvelope()
{
  initializeWithCopy for ToolDescription();
}

void assignWithCopy for ToolDescriptionEnvelope()
{
  assignWithCopy for ToolDescription();
}

void initializeWithTake for ToolDescriptionEnvelope(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  initializeWithTake for ToolDescription(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

void initializeWithTake for ToolDescription(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  _OWORD *v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v6 = OUTLINED_FUNCTION_95_1(a1, (uint64_t)a2, a3, a4);
  if (OUTLINED_FUNCTION_124_1((uint64_t)a2))
  {
    v7 = OUTLINED_FUNCTION_437();
    OUTLINED_FUNCTION_142_1(*(_QWORD *)(v7 - 8));
  }
  else
  {
    v8 = a2[1];
    *v4 = *a2;
    v4[1] = v8;
    v9 = (uint64_t)v4 + *(int *)(v6 + 24);
    v10 = OUTLINED_FUNCTION_175_1();
    OUTLINED_FUNCTION_302_0(v9, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32));
    OUTLINED_FUNCTION_44_2();
  }
  OUTLINED_FUNCTION_22_0();
}

void assignWithTake for ToolDescriptionEnvelope()
{
  assignWithTake for ToolDescription();
}

uint64_t getEnumTagSinglePayload for ToolDescriptionEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B64868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_496();
  v0 = OUTLINED_FUNCTION_262_0();
  return OUTLINED_FUNCTION_159_1(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for ToolDescriptionEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B64890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_496();
  v0 = OUTLINED_FUNCTION_53_2();
  return OUTLINED_FUNCTION_101_0(v0, v1, v2, v3);
}

uint64_t type metadata completion function for ToolDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope);
}

void initializeBufferWithCopyOfBuffer for ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  initializeBufferWithCopyOfBuffer for ToolType();
}

void initializeWithCopy for ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  initializeWithCopy for ToolType();
}

void assignWithCopy for ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  assignWithCopy for ToolType();
}

void initializeWithTake for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  initializeWithTake for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope, (void (*)(_QWORD))MEMORY[0x24BE3B648]);
}

void initializeWithTake for ToolType(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(_QWORD))
{
  _OWORD *v5;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  void (*v13)(uint64_t);

  OUTLINED_FUNCTION_95_1(a1, (uint64_t)a2, a3, a4);
  v9 = OUTLINED_FUNCTION_124_1((uint64_t)a2);
  if ((_DWORD)v9)
  {
    OUTLINED_FUNCTION_313_0(v9, v10, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v11 = a2[1];
    *v5 = *a2;
    v5[1] = v11;
    a5(0);
    v12 = OUTLINED_FUNCTION_172_1();
    v13(v12);
    OUTLINED_FUNCTION_44_2();
  }
  OUTLINED_FUNCTION_22_0();
}

void assignWithTake for ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  assignWithTake for ToolType();
}

uint64_t getEnumTagSinglePayload for ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B64C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_get_extra_inhabitant_index_11Tm(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

void __swift_get_extra_inhabitant_index_11Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_130_1(a1, a2, a3, a4);
  v4 = OUTLINED_FUNCTION_262_0();
  __swift_getEnumTagSinglePayload(v4, v5, v6);
  OUTLINED_FUNCTION_104();
}

uint64_t storeEnumTagSinglePayload for ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B64CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_12Tm(a1, a2, a3, a4, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

uint64_t __swift_store_extra_inhabitant_index_12Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_DWORD)a2)
    v6 = (a2 + 1);
  else
    v6 = 0;
  OUTLINED_FUNCTION_541(a1, a2, a3, a4, a5);
  v7 = OUTLINED_FUNCTION_550();
  return OUTLINED_FUNCTION_18_1(v7, v6, a3, v8);
}

uint64_t getEnumTag for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  return __swift_getEnumTagSinglePayload(a1, 1, v2);
}

uint64_t destructiveInjectEnumTag for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(0);
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v4);
}

void type metadata completion function for ToolDescriptionEnvelope.ToolTypeEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for ToolType(a1, a2, a3, type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

void type metadata completion function for ToolType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v4;

  OUTLINED_FUNCTION_578(a1, a2, a3, a4);
  if (v4 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    OUTLINED_FUNCTION_682();
  }
  OUTLINED_FUNCTION_104();
}

void initializeBufferWithCopyOfBuffer for ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  initializeBufferWithCopyOfBuffer for FunctionDescription();
}

uint64_t destroy for ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  return destroy for FunctionDescription();
}

void initializeWithCopy for ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  initializeWithCopy for FunctionDescription();
}

void assignWithCopy for ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  assignWithCopy for FunctionDescription();
}

void initializeWithTake for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  initializeWithTake for FunctionDescription(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BE3B648]);
}

void initializeWithTake for FunctionDescription(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  OUTLINED_FUNCTION_130_1((uint64_t)a1, (uint64_t)a2, a3, a4);
  v5 = OUTLINED_FUNCTION_560();
  OUTLINED_FUNCTION_302_0(v5, v6);
  OUTLINED_FUNCTION_97();
}

void assignWithTake for ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  assignWithTake for FunctionDescription();
}

uint64_t getEnumTagSinglePayload for ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B65018()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_373();
  if (v0)
  {
    OUTLINED_FUNCTION_168_1();
    OUTLINED_FUNCTION_97();
  }
  else
  {
    type metadata accessor for SchemaEnvelope(0);
    v1 = OUTLINED_FUNCTION_341();
    OUTLINED_FUNCTION_19_1(v1, v2, v3);
  }
}

uint64_t type metadata accessor for SchemaEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for SchemaEnvelope);
}

uint64_t storeEnumTagSinglePayload for ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B65078()
{
  __swift_store_extra_inhabitant_index_14Tm();
}

void __swift_store_extra_inhabitant_index_14Tm()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_358();
  if (v7)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_97();
  }
  else
  {
    OUTLINED_FUNCTION_541(v2, v3, v4, v5, v6);
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_18_1(v8, v9, v10, v11);
  }
}

void type metadata completion function for ToolDescriptionEnvelope.FunctionDescriptionEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata completion function for FunctionDescription(a1, a2, a3, (void (*)(uint64_t))MEMORY[0x24BE3B648]);
}

void type metadata completion function for FunctionDescription(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unint64_t v4;

  a4(319);
  if (v4 <= 0x3F)
  {
    OUTLINED_FUNCTION_380();
    swift_initStructMetadata();
    OUTLINED_FUNCTION_682();
  }
  OUTLINED_FUNCTION_579();
}

uint64_t initializeBufferWithCopyOfBuffer for SchemaEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenerationSchema();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for SchemaEnvelope(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GenerationSchema();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for SchemaEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenerationSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for SchemaEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenerationSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for SchemaEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenerationSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for SchemaEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenerationSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B652B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_59_2();
  v0 = OUTLINED_FUNCTION_262_0();
  return OUTLINED_FUNCTION_159_1(v0, v1, v2);
}

uint64_t storeEnumTagSinglePayload for SchemaEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B652E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_59_2();
  v0 = OUTLINED_FUNCTION_53_2();
  return OUTLINED_FUNCTION_101_0(v0, v1, v2, v3);
}

uint64_t type metadata completion function for SchemaEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for RegisterDocumentResponseElement(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x24BE3B648]);
}

uint64_t destroy for SamplingParametersEnvelope()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SamplingParametersEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SamplingParametersEnvelope(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = a2[13];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v10;
  v11 = a2[15];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_QWORD *)(a1 + 120) = v11;
  *(_BYTE *)(a1 + 129) = *((_BYTE *)a2 + 129);
  return a1;
}

void *__swift_memcpy130_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x82uLL);
}

uint64_t assignWithTake for SamplingParametersEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for SamplingParametersEnvelope(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 130))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingParametersEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 130) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 130) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for SamplingParametersEnvelope()
{
  OUTLINED_FUNCTION_181_0();
}

uint64_t getEnumTagSinglePayload for CompletePromptRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 7);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 7);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 7);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_265_0(v8);
}

uint64_t storeEnumTagSinglePayload for CompletePromptRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_248B656C8 + 4 * byte_248BC03FD[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_383 + 4 * byte_248BC03F8[v4]))();
}

uint64_t sub_248B65700(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B65708);
  return result;
}

uint64_t sub_248B65710(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B65718);
  return OUTLINED_FUNCTION_338();
}

void *type metadata accessor for CompletePromptTemplateRequest.CodingKeys()
{
  return &unk_2519D1870;
}

uint64_t *initializeBufferWithCopyOfBuffer for PromptTemplateInfoEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Locale();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

_QWORD *initializeWithCopy for PromptTemplateInfoEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Locale();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

_QWORD *assignWithCopy for PromptTemplateInfoEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 24);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for PromptTemplateInfoEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for PromptTemplateInfoEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    v13 = *(_QWORD *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptTemplateInfoEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B65C80()
{
  __swift_get_extra_inhabitant_index_7Tm();
}

void __swift_get_extra_inhabitant_index_7Tm()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_373();
  if (v1)
  {
    OUTLINED_FUNCTION_168_1();
    OUTLINED_FUNCTION_97();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(v0);
    v2 = OUTLINED_FUNCTION_341();
    OUTLINED_FUNCTION_19_1(v2, v3, v4);
  }
}

uint64_t storeEnumTagSinglePayload for PromptTemplateInfoEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B65CD8()
{
  __swift_store_extra_inhabitant_index_8Tm();
}

void __swift_store_extra_inhabitant_index_8Tm()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_358();
  if (v7)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_97();
  }
  else
  {
    OUTLINED_FUNCTION_175_0(v2, v3, v4, v5, v6);
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_18_1(v8, v9, v10, v11);
  }
}

void type metadata completion function for PromptTemplateInfoEnvelope()
{
  unint64_t v0;

  type metadata accessor for Constraints?(319, (unint64_t *)&lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Constraints?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
  OUTLINED_FUNCTION_104();
}

uint64_t destroy for PromptRenderingEnvelope()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PromptRenderingEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PromptRenderingEnvelope(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptRenderingEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CountTokensRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return OUTLINED_FUNCTION_265_0(v2);
}

uint64_t storeEnumTagSinglePayload for CountTokensRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return OUTLINED_FUNCTION_299_0(result, a2);
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      return OUTLINED_FUNCTION_299_0(result, a2);
  }
  return result;
}

void *type metadata accessor for PromptRenderingEnvelope()
{
  return &unk_2519D0380;
}

void *type metadata accessor for CountTokensResponse.CodingKeys()
{
  return &unk_2519CF8B0;
}

uint64_t destroy for PromptEnvelope()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PromptEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PromptEnvelope(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PromptEnvelope(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for PromptEnvelope()
{
  return &unk_2519CE380;
}

void *type metadata accessor for CountTokensRequest.CodingKeys()
{
  return &unk_2519CF4E8;
}

void *type metadata accessor for RegisterDocumentResponseElement.CodingKeys()
{
  return &unk_2519D1900;
}

_QWORD *initializeBufferWithCopyOfBuffer for DocumentRegistrationEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v7 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        goto LABEL_9;
      }
      v9 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
LABEL_9:
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    return a1;
  }
  v10 = *a2;
  *a1 = *a2;
  a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

uint64_t destroy for DocumentRegistrationEnvelope(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

_QWORD *initializeWithCopy for DocumentRegistrationEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      goto LABEL_7;
    }
    v8 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
LABEL_7:
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

_QWORD *assignWithCopy for DocumentRegistrationEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        goto LABEL_8;
      }
      v8 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_8:
  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

char *initializeWithTake for DocumentRegistrationEnvelope(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *assignWithTake for DocumentRegistrationEnvelope(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    v6 = type metadata accessor for DocumentRegistrationStatusEnvelope(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v8 = *(int *)(a3 + 20);
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentRegistrationEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B667E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = OUTLINED_FUNCTION_649();
  v4 = type metadata accessor for DocumentRegistrationStatusEnvelope(v3);
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)v0)
  {
    v5 = v4;
    v6 = v1;
  }
  else
  {
    v5 = OUTLINED_FUNCTION_256_0();
    v6 = v1 + *(int *)(v2 + 20);
  }
  return OUTLINED_FUNCTION_19_1(v6, v0, v5);
}

uint64_t storeEnumTagSinglePayload for DocumentRegistrationEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_248B6683C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = OUTLINED_FUNCTION_275_0();
  type metadata accessor for DocumentRegistrationStatusEnvelope(v0);
  OUTLINED_FUNCTION_544();
  if (v1)
    OUTLINED_FUNCTION_550();
  else
    OUTLINED_FUNCTION_256_0();
  OUTLINED_FUNCTION_238_0();
  return OUTLINED_FUNCTION_18_1(v2, v3, v4, v5);
}

uint64_t type metadata completion function for DocumentRegistrationEnvelope()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for DocumentRegistrationStatusEnvelope(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentRegistrationStatusEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
      v8 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for DocumentRegistrationStatusEnvelope(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for DocumentResourceIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

_QWORD *initializeWithCopy for DocumentRegistrationStatusEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for DocumentRegistrationStatusEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for DocumentRegistrationStatusEnvelope(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for DocumentResourceIdentifier();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for DocumentRegistrationStatusEnvelope(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for DocumentRegistrationStatusEnvelope);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for DocumentResourceIdentifier();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for DocumentRegistrationStatusEnvelope()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DocumentResourceIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t destroy for RequestMetadata()
{
  OUTLINED_FUNCTION_394();
  OUTLINED_FUNCTION_400();
  OUTLINED_FUNCTION_487();
  return OUTLINED_FUNCTION_248_0();
}

void initializeWithCopy for RequestMetadata(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_464(a1, a2);
  v4 = v3[5];
  v2[4] = v3[4];
  v2[5] = v4;
  v2[6] = v3[6];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_97();
}

void assignWithCopy for RequestMetadata(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_264_0(a1, a2);
  OUTLINED_FUNCTION_186();
  v3[2] = v2[2];
  v3[3] = v2[3];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v3[4] = v2[4];
  v3[5] = v2[5];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_186();
  v3[6] = v2[6];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_213();
  OUTLINED_FUNCTION_97();
}

void assignWithTake for RequestMetadata(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_345(a1, a2);
  OUTLINED_FUNCTION_534();
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v2 + 32);
  OUTLINED_FUNCTION_430();
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(v2 + 40);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_104();
}

uint64_t getEnumTagSinglePayload for RequestMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return OUTLINED_FUNCTION_265_0(v2);
}

uint64_t storeEnumTagSinglePayload for RequestMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return OUTLINED_FUNCTION_299_0(result, a2);
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      return OUTLINED_FUNCTION_299_0(result, a2);
  }
  return result;
}

void *type metadata accessor for RequestMetadataEnvelope()
{
  return &unk_2519D05B0;
}

void *type metadata accessor for RegisterDocumentRequest.CodingKeys()
{
  return &unk_2519D0410;
}

uint64_t *initializeBufferWithCopyOfBuffer for DocumentEnvelope(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    outlined copy of Data._Representation(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for DocumentEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for DocumentEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for DocumentEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  outlined copy of Data._Representation(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  outlined consume of Data._Representation(v12, v13);
  return a1;
}

uint64_t initializeWithTake for DocumentEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DocumentEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  outlined consume of Data._Representation(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for DocumentEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B671B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_256_0();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    OUTLINED_FUNCTION_19_1(a1, a2, v4);
  else
    OUTLINED_FUNCTION_97();
}

uint64_t storeEnumTagSinglePayload for DocumentEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B67238(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  OUTLINED_FUNCTION_256_0();
  OUTLINED_FUNCTION_544();
  if (v7)
  {
    v8 = OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_18_1(v8, v9, v10, v11);
  }
  else
  {
    v12 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v12 = 0;
    v12[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    OUTLINED_FUNCTION_97();
  }
}

uint64_t type metadata completion function for DocumentEnvelope()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StreamingRequest(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v10;
      v11 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v11;
      v12 = a2[5];
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_QWORD *)(a1 + 40) = v12;
      v14 = a2[6];
      v13 = a2[7];
      *(_QWORD *)(a1 + 48) = v14;
      *(_QWORD *)(a1 + 56) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      if (v7)
      {
        *(_QWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 8) = v7;
        v8 = a2[3];
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_QWORD *)(a1 + 24) = v8;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v26 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
      }
      v27 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v28 = v27[5];
      v29 = (_QWORD *)(a1 + v28);
      v30 = (uint64_t)a2 + v28;
      v31 = *(uint64_t *)((char *)a2 + v28 + 8);
      *v29 = *(uint64_t *)((char *)a2 + v28);
      v29[1] = v31;
      v29[2] = *(uint64_t *)((char *)a2 + v28 + 16);
      v32 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v33 = (char *)v29 + v32;
      v34 = (const void *)(v30 + v32);
      v35 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
        __swift_storeEnumTagSinglePayload((uint64_t)v33, 0, 1, v35);
      }
      v39 = v27[6];
      v40 = a1 + v39;
      v41 = (uint64_t)a2 + v39;
      *(_QWORD *)v40 = *(_QWORD *)v41;
      *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
      *(_QWORD *)(v40 + 16) = *(_QWORD *)(v41 + 16);
      *(_BYTE *)(v40 + 24) = *(_BYTE *)(v41 + 24);
      *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
      *(_BYTE *)(v40 + 40) = *(_BYTE *)(v41 + 40);
      *(_BYTE *)(v40 + 56) = *(_BYTE *)(v41 + 56);
      *(_QWORD *)(v40 + 48) = *(_QWORD *)(v41 + 48);
      v42 = *(_QWORD *)(v41 + 64);
      *(_BYTE *)(v40 + 72) = *(_BYTE *)(v41 + 72);
      *(_QWORD *)(v40 + 64) = v42;
      v43 = *(_QWORD *)(v41 + 88);
      *(_QWORD *)(v40 + 80) = *(_QWORD *)(v41 + 80);
      *(_QWORD *)(v40 + 88) = v43;
      *(_BYTE *)(v40 + 96) = *(_BYTE *)(v41 + 96);
      *(_QWORD *)(v40 + 104) = *(_QWORD *)(v41 + 104);
      *(_BYTE *)(v40 + 112) = *(_BYTE *)(v41 + 112);
      *(_QWORD *)(v40 + 120) = *(_QWORD *)(v41 + 120);
      *(_WORD *)(v40 + 128) = *(_WORD *)(v41 + 128);
      v44 = v27[7];
      v45 = (_QWORD *)(a1 + v44);
      v46 = (uint64_t *)((char *)a2 + v44);
      v47 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v46, 1, v47))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v49 = swift_getEnumCaseMultiPayload();
        if (v49 == 2 || v49 == 1)
        {
          v50 = v46[1];
          *v45 = *v46;
          v45[1] = v50;
          swift_bridgeObjectRetain();
        }
        else
        {
          v62 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(v45, v46, v62);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v45, 0, 1, v47);
      }
      *(_QWORD *)(a1 + v27[8]) = *(uint64_t *)((char *)a2 + v27[8]);
      *(_QWORD *)(a1 + v27[9]) = *(uint64_t *)((char *)a2 + v27[9]);
      v63 = v27[10];
      v64 = (_QWORD *)(a1 + v63);
      v65 = (uint64_t *)((char *)a2 + v63);
      v66 = v65[1];
      *v64 = *v65;
      v64[1] = v66;
      v67 = v65[3];
      v64[2] = v65[2];
      v64[3] = v67;
      v68 = v65[5];
      v64[4] = v65[4];
      v64[5] = v68;
      v64[6] = v65[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v15 = a2[1];
      *(_QWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 8) = v15;
      v16 = a2[3];
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = a2[4];
      *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
      *(_QWORD *)(a1 + 48) = a2[6];
      *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
      v17 = a2[8];
      *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
      *(_QWORD *)(a1 + 64) = v17;
      *(_QWORD *)(a1 + 80) = a2[10];
      *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
      *(_QWORD *)(a1 + 96) = a2[12];
      *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      v18 = a2[15];
      *(_QWORD *)(a1 + 112) = a2[14];
      *(_QWORD *)(a1 + 120) = v18;
      v19 = a2[17];
      *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
      *(_QWORD *)(a1 + 136) = v19;
      *(_QWORD *)(a1 + 152) = a2[19];
      *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
      v20 = (int *)type metadata accessor for CompletePromptRequest(0);
      v21 = v20[6];
      v22 = (_QWORD *)(a1 + v21);
      v23 = (uint64_t *)((char *)a2 + v21);
      v24 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v24))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v37 = swift_getEnumCaseMultiPayload();
        if (v37 == 2 || v37 == 1)
        {
          v38 = v23[1];
          *v22 = *v23;
          v22[1] = v38;
          swift_bridgeObjectRetain();
        }
        else
        {
          v51 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v22, v23, v51);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v24);
      }
      *(_QWORD *)(a1 + v20[7]) = *(uint64_t *)((char *)a2 + v20[7]);
      v52 = v20[8];
      v53 = a1 + v52;
      v54 = (_OWORD *)((char *)a2 + v52);
      v55 = *(uint64_t *)((char *)a2 + v52 + 8);
      swift_bridgeObjectRetain();
      if (v55 < 4)
      {
        *(_OWORD *)v53 = *v54;
      }
      else
      {
        *(_QWORD *)v53 = *(_QWORD *)v54;
        *(_QWORD *)(v53 + 8) = v55;
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(a1 + v20[9]) = *(uint64_t *)((char *)a2 + v20[9]);
      v56 = v20[10];
      v57 = (_QWORD *)(a1 + v56);
      v58 = (uint64_t *)((char *)a2 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      v60 = v58[3];
      v57[2] = v58[2];
      v57[3] = v60;
      v61 = v58[5];
      v57[4] = v58[4];
      v57[5] = v61;
      v57[6] = v58[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for StreamingRequest(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      goto LABEL_25;
    case 1:
      if (*(_QWORD *)(a1 + 8))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v8 = type metadata accessor for CompletePromptTemplateRequest(0);
      v9 = a1 + *(int *)(v8 + 20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v9 + *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v11 = type metadata accessor for Locale();
      if (!__swift_getEnumTagSinglePayload(v10, 1, v11))
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
      swift_bridgeObjectRelease();
      v12 = a1 + *(int *)(v8 + 28);
      v13 = type metadata accessor for Constraints(0);
      if (!__swift_getEnumTagSinglePayload(v12, 1, v13))
      {
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
        }
        else if (!EnumCaseMultiPayload)
        {
          v15 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v12, v15);
        }
      }
LABEL_24:
      swift_bridgeObjectRelease();
LABEL_25:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v3 = type metadata accessor for CompletePromptRequest(0);
      v4 = a1 + *(int *)(v3 + 24);
      v5 = type metadata accessor for Constraints(0);
      if (!__swift_getEnumTagSinglePayload(v4, 1, v5))
      {
        v6 = swift_getEnumCaseMultiPayload();
        if (v6 == 2 || v6 == 1)
        {
          swift_bridgeObjectRelease();
        }
        else if (!v6)
        {
          v7 = type metadata accessor for GenerationSchema();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
        }
      }
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(a1 + *(int *)(v3 + 32) + 8) < 4uLL)
        goto LABEL_25;
      goto LABEL_24;
  }
  return result;
}

uint64_t initializeWithCopy for StreamingRequest(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v9;
    v11 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v10;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      v23 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v23;
    }
    v24 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    v25 = v24[5];
    v26 = (_QWORD *)(a1 + v25);
    v27 = a2 + v25;
    v28 = *(_QWORD *)(a2 + v25 + 8);
    *v26 = *(_QWORD *)(a2 + v25);
    v26[1] = v28;
    v26[2] = *(_QWORD *)(a2 + v25 + 16);
    v29 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    v30 = (char *)v26 + v29;
    v31 = (const void *)(v27 + v29);
    v32 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
      __swift_storeEnumTagSinglePayload((uint64_t)v30, 0, 1, v32);
    }
    v36 = v24[6];
    v37 = a1 + v36;
    v38 = a2 + v36;
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *(_BYTE *)(v37 + 8) = *(_BYTE *)(v38 + 8);
    *(_QWORD *)(v37 + 16) = *(_QWORD *)(v38 + 16);
    *(_BYTE *)(v37 + 24) = *(_BYTE *)(v38 + 24);
    *(_QWORD *)(v37 + 32) = *(_QWORD *)(v38 + 32);
    *(_BYTE *)(v37 + 40) = *(_BYTE *)(v38 + 40);
    *(_BYTE *)(v37 + 56) = *(_BYTE *)(v38 + 56);
    *(_QWORD *)(v37 + 48) = *(_QWORD *)(v38 + 48);
    v39 = *(_QWORD *)(v38 + 64);
    *(_BYTE *)(v37 + 72) = *(_BYTE *)(v38 + 72);
    *(_QWORD *)(v37 + 64) = v39;
    v40 = *(_QWORD *)(v38 + 88);
    *(_QWORD *)(v37 + 80) = *(_QWORD *)(v38 + 80);
    *(_QWORD *)(v37 + 88) = v40;
    *(_BYTE *)(v37 + 96) = *(_BYTE *)(v38 + 96);
    *(_QWORD *)(v37 + 104) = *(_QWORD *)(v38 + 104);
    *(_BYTE *)(v37 + 112) = *(_BYTE *)(v38 + 112);
    *(_QWORD *)(v37 + 120) = *(_QWORD *)(v38 + 120);
    *(_WORD *)(v37 + 128) = *(_WORD *)(v38 + 128);
    v41 = v24[7];
    v42 = (_QWORD *)(a1 + v41);
    v43 = (_QWORD *)(a2 + v41);
    v44 = type metadata accessor for Constraints(0);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v46 = swift_getEnumCaseMultiPayload();
      if (v46 == 2 || v46 == 1)
      {
        v47 = v43[1];
        *v42 = *v43;
        v42[1] = v47;
        swift_bridgeObjectRetain();
      }
      else
      {
        v59 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v42, v43, v59);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v44);
    }
    *(_QWORD *)(a1 + v24[8]) = *(_QWORD *)(a2 + v24[8]);
    *(_QWORD *)(a1 + v24[9]) = *(_QWORD *)(a2 + v24[9]);
    v60 = v24[10];
    v61 = (_QWORD *)(a1 + v60);
    v62 = (_QWORD *)(a2 + v60);
    v63 = v62[1];
    *v61 = *v62;
    v61[1] = v63;
    v64 = v62[3];
    v61[2] = v62[2];
    v61[3] = v64;
    v65 = v62[5];
    v61[4] = v62[4];
    v61[5] = v65;
    v61[6] = v62[6];
    swift_bridgeObjectRetain();
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v12;
    v13 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    v14 = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    v15 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = v15;
    v16 = *(_QWORD *)(a2 + 136);
    *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
    *(_QWORD *)(a1 + 136) = v16;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    v17 = (int *)type metadata accessor for CompletePromptRequest(0);
    v18 = v17[6];
    v19 = (_QWORD *)(a1 + v18);
    v20 = (_QWORD *)(a2 + v18);
    v21 = type metadata accessor for Constraints(0);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v34 = swift_getEnumCaseMultiPayload();
      if (v34 == 2 || v34 == 1)
      {
        v35 = v20[1];
        *v19 = *v20;
        v19[1] = v35;
        swift_bridgeObjectRetain();
      }
      else
      {
        v48 = type metadata accessor for GenerationSchema();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v19, v20, v48);
      }
      swift_storeEnumTagMultiPayload();
      __swift_storeEnumTagSinglePayload((uint64_t)v19, 0, 1, v21);
    }
    *(_QWORD *)(a1 + v17[7]) = *(_QWORD *)(a2 + v17[7]);
    v49 = v17[8];
    v50 = a1 + v49;
    v51 = (_OWORD *)(a2 + v49);
    v52 = *(_QWORD *)(a2 + v49 + 8);
    swift_bridgeObjectRetain();
    if (v52 < 4)
    {
      *(_OWORD *)v50 = *v51;
    }
    else
    {
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *(_QWORD *)(v50 + 8) = v52;
      swift_bridgeObjectRetain();
    }
    *(_QWORD *)(a1 + v17[9]) = *(_QWORD *)(a2 + v17[9]);
    v53 = v17[10];
    v54 = (_QWORD *)(a1 + v53);
    v55 = (_QWORD *)(a2 + v53);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = v55[3];
    v54[2] = v55[2];
    v54[3] = v57;
    v58 = v55[5];
    v54[4] = v55[4];
    v54[5] = v58;
    v54[6] = v55[6];
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for StreamingRequest(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment(a1, type metadata accessor for StreamingRequest);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        v19 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v19;
      }
      v20 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v21 = v20[5];
      v22 = (_QWORD *)(a1 + v21);
      v23 = a2 + v21;
      *v22 = *(_QWORD *)(a2 + v21);
      v22[1] = *(_QWORD *)(a2 + v21 + 8);
      v22[2] = *(_QWORD *)(a2 + v21 + 16);
      v24 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v25 = (char *)v22 + v24;
      v26 = (const void *)(v23 + v24);
      v27 = type metadata accessor for Locale();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
        __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
      }
      v30 = v20[6];
      v31 = a1 + v30;
      v32 = (uint64_t *)(a2 + v30);
      v33 = *v32;
      *(_BYTE *)(v31 + 8) = *((_BYTE *)v32 + 8);
      *(_QWORD *)v31 = v33;
      v34 = v32[2];
      *(_BYTE *)(v31 + 24) = *((_BYTE *)v32 + 24);
      *(_QWORD *)(v31 + 16) = v34;
      v35 = v32[4];
      *(_BYTE *)(v31 + 40) = *((_BYTE *)v32 + 40);
      *(_QWORD *)(v31 + 32) = v35;
      v36 = v32[6];
      *(_BYTE *)(v31 + 56) = *((_BYTE *)v32 + 56);
      *(_QWORD *)(v31 + 48) = v36;
      v37 = v32[8];
      *(_BYTE *)(v31 + 72) = *((_BYTE *)v32 + 72);
      *(_QWORD *)(v31 + 64) = v37;
      *(_QWORD *)(v31 + 80) = v32[10];
      v38 = v32[11];
      *(_BYTE *)(v31 + 96) = *((_BYTE *)v32 + 96);
      *(_QWORD *)(v31 + 88) = v38;
      v39 = v32[13];
      *(_BYTE *)(v31 + 112) = *((_BYTE *)v32 + 112);
      *(_QWORD *)(v31 + 104) = v39;
      v40 = v32[15];
      *(_BYTE *)(v31 + 128) = *((_BYTE *)v32 + 128);
      *(_QWORD *)(v31 + 120) = v40;
      *(_BYTE *)(v31 + 129) = *((_BYTE *)v32 + 129);
      v41 = v20[7];
      v42 = (_QWORD *)(a1 + v41);
      v43 = (_QWORD *)(a2 + v41);
      v44 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v46 = swift_getEnumCaseMultiPayload();
        if (v46 == 2 || v46 == 1)
        {
          *v42 = *v43;
          v42[1] = v43[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          v55 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v42, v43, v55);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v42, 0, 1, v44);
      }
      *(_QWORD *)(a1 + v20[8]) = *(_QWORD *)(a2 + v20[8]);
      *(_QWORD *)(a1 + v20[9]) = *(_QWORD *)(a2 + v20[9]);
      v56 = v20[10];
      v57 = (_QWORD *)(a1 + v56);
      v58 = (_QWORD *)(a2 + v56);
      *v57 = *v58;
      v57[1] = v58[1];
      v57[2] = v58[2];
      v57[3] = v58[3];
      v57[4] = v58[4];
      v57[5] = v58[5];
      v57[6] = v58[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v5 = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v5;
      v6 = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v6;
      v7 = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = v7;
      v8 = *(_QWORD *)(a2 + 80);
      *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = v8;
      v9 = *(_QWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
      *(_QWORD *)(a1 + 96) = v9;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      v10 = *(_QWORD *)(a2 + 120);
      *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
      *(_QWORD *)(a1 + 120) = v10;
      v11 = *(_QWORD *)(a2 + 136);
      *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
      *(_QWORD *)(a1 + 136) = v11;
      v12 = *(_QWORD *)(a2 + 152);
      *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
      *(_QWORD *)(a1 + 152) = v12;
      *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
      v13 = (int *)type metadata accessor for CompletePromptRequest(0);
      v14 = v13[6];
      v15 = (_QWORD *)(a1 + v14);
      v16 = (_QWORD *)(a2 + v14);
      v17 = type metadata accessor for Constraints(0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v29 = swift_getEnumCaseMultiPayload();
        if (v29 == 2 || v29 == 1)
        {
          *v15 = *v16;
          v15[1] = v16[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          v47 = type metadata accessor for GenerationSchema();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v15, v16, v47);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
      }
      *(_QWORD *)(a1 + v13[7]) = *(_QWORD *)(a2 + v13[7]);
      v48 = v13[8];
      v49 = a1 + v48;
      v50 = a2 + v48;
      v51 = *(_QWORD *)(a2 + v48 + 8);
      swift_bridgeObjectRetain();
      if (v51 < 4)
      {
        *(_OWORD *)v49 = *(_OWORD *)v50;
      }
      else
      {
        *(_QWORD *)v49 = *(_QWORD *)v50;
        *(_QWORD *)(v49 + 8) = *(_QWORD *)(v50 + 8);
        swift_bridgeObjectRetain();
      }
      *(_QWORD *)(a1 + v13[9]) = *(_QWORD *)(a2 + v13[9]);
      v52 = v13[10];
      v53 = (_QWORD *)(a1 + v52);
      v54 = (_QWORD *)(a2 + v52);
      *v53 = *v54;
      v53[1] = v54[1];
      v53[2] = v54[2];
      v53[3] = v54[3];
      v53[4] = v54[4];
      v53[5] = v54[5];
      v53[6] = v54[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for StreamingRequest(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for StreamingRequest);
}

_OWORD *initializeWithTake for StreamingRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    v15 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    v16 = v15[5];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    *(_OWORD *)v17 = *(_OWORD *)((char *)a2 + v16);
    *((_QWORD *)v17 + 2) = *(_QWORD *)((char *)a2 + v16 + 16);
    v19 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
    v20 = &v17[v19];
    v21 = &v18[v19];
    v22 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
    {
      v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
      __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
    }
    memcpy((char *)a1 + v15[6], (char *)a2 + v15[6], 0x82uLL);
    v24 = v15[7];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = type metadata accessor for Constraints(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v34 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v25, v26, v34);
        swift_storeEnumTagMultiPayload();
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
    }
    *(_QWORD *)((char *)a1 + v15[8]) = *(_QWORD *)((char *)a2 + v15[8]);
    *(_QWORD *)((char *)a1 + v15[9]) = *(_QWORD *)((char *)a2 + v15[9]);
    v35 = v15[10];
    v36 = (char *)a1 + v35;
    v37 = (char *)a2 + v35;
    *((_QWORD *)v36 + 6) = *((_QWORD *)v37 + 6);
    v38 = *((_OWORD *)v37 + 2);
    v39 = *(_OWORD *)v37;
    *((_OWORD *)v36 + 1) = *((_OWORD *)v37 + 1);
    *((_OWORD *)v36 + 2) = v38;
    *(_OWORD *)v36 = v39;
LABEL_21:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    memcpy(a1 + 2, a2 + 2, 0x82uLL);
    v8 = (int *)type metadata accessor for CompletePromptRequest(0);
    v9 = v8[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Constraints(0);
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        v29 = type metadata accessor for GenerationSchema();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v10, v11, v29);
        swift_storeEnumTagMultiPayload();
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *(_OWORD *)((char *)a1 + v8[8]) = *(_OWORD *)((char *)a2 + v8[8]);
    *(_QWORD *)((char *)a1 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
    v30 = v8[10];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = *((_OWORD *)v32 + 1);
    *(_OWORD *)v31 = *(_OWORD *)v32;
    *((_OWORD *)v31 + 1) = v33;
    *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
    *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
    goto LABEL_21;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for StreamingRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;

  if (a1 != a2)
  {
    outlined destroy of Prompt.Turn.Segment((uint64_t)a1, type metadata accessor for StreamingRequest);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      v15 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v16 = v15[5];
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      *(_OWORD *)v17 = *(_OWORD *)((char *)a2 + v16);
      *((_QWORD *)v17 + 2) = *(_QWORD *)((char *)a2 + v16 + 16);
      v19 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v20 = &v17[v19];
      v21 = &v18[v19];
      v22 = type metadata accessor for Locale();
      if (__swift_getEnumTagSinglePayload((uint64_t)v21, 1, v22))
      {
        v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
        __swift_storeEnumTagSinglePayload((uint64_t)v20, 0, 1, v22);
      }
      memcpy((char *)a1 + v15[6], (char *)a2 + v15[6], 0x82uLL);
      v24 = v15[7];
      v25 = (char *)a1 + v24;
      v26 = (char *)a2 + v24;
      v27 = type metadata accessor for Constraints(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, v27))
      {
        v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          v34 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v25, v26, v34);
          swift_storeEnumTagMultiPayload();
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v25, 0, 1, v27);
      }
      *(_QWORD *)((char *)a1 + v15[8]) = *(_QWORD *)((char *)a2 + v15[8]);
      *(_QWORD *)((char *)a1 + v15[9]) = *(_QWORD *)((char *)a2 + v15[9]);
      v35 = v15[10];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      *((_QWORD *)v36 + 6) = *((_QWORD *)v37 + 6);
      v38 = *((_OWORD *)v37 + 2);
      v39 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = *((_OWORD *)v37 + 1);
      *((_OWORD *)v36 + 2) = v38;
      *(_OWORD *)v36 = v39;
LABEL_22:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      memcpy(a1 + 2, a2 + 2, 0x82uLL);
      v8 = (int *)type metadata accessor for CompletePromptRequest(0);
      v9 = v8[6];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Constraints(0);
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        }
        else
        {
          v29 = type metadata accessor for GenerationSchema();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v10, v11, v29);
          swift_storeEnumTagMultiPayload();
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
      *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
      *(_OWORD *)((char *)a1 + v8[8]) = *(_OWORD *)((char *)a2 + v8[8]);
      *(_QWORD *)((char *)a1 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
      v30 = v8[10];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v33;
      *((_OWORD *)v31 + 2) = *((_OWORD *)v32 + 2);
      *((_QWORD *)v31 + 6) = *((_QWORD *)v32 + 6);
      goto LABEL_22;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for StreamingRequest()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for CompletePromptRequest(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for CompletePromptTemplateRequest(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void initializeBufferWithCopyOfBuffer for RequestPayload()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;

  OUTLINED_FUNCTION_132_0();
  v1 = v0;
  v3 = v2;
  if ((*(_DWORD *)(*(_QWORD *)(v4 - 8) + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_115_1(*v0);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v19 = v1[1];
      if (v19)
      {
        *(_QWORD *)v3 = *v1;
        *(_QWORD *)(v3 + 8) = v19;
        v20 = v1[3];
        *(_QWORD *)(v3 + 16) = v1[2];
        *(_QWORD *)(v3 + 24) = v20;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_76_0();
        OUTLINED_FUNCTION_88_0();
      }
      else
      {
        v27 = *((_OWORD *)v1 + 1);
        *(_OWORD *)v3 = *(_OWORD *)v1;
        *(_OWORD *)(v3 + 16) = v27;
      }
      v28 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
      v29 = v28[5];
      v30 = (_QWORD *)(v3 + v29);
      v31 = (char *)v1 + v29;
      v32 = *(uint64_t *)((char *)v1 + v29 + 8);
      *v30 = *(uint64_t *)((char *)v1 + v29);
      v30[1] = v32;
      v30[2] = *(uint64_t *)((char *)v1 + v29 + 16);
      v33 = *(int *)(type metadata accessor for PromptTemplateInfoEnvelope(0) + 24);
      v34 = (uint64_t)v30 + v33;
      v35 = (uint64_t)&v31[v33];
      v36 = OUTLINED_FUNCTION_29_0();
      OUTLINED_FUNCTION_154();
      OUTLINED_FUNCTION_72();
      if (OUTLINED_FUNCTION_125_1(v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
        OUTLINED_FUNCTION_258_0(v37);
      }
      else
      {
        OUTLINED_FUNCTION_230_0(v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 16));
        OUTLINED_FUNCTION_61_2(v34);
      }
      OUTLINED_FUNCTION_84_1((uint64_t)v1 + v28[6]);
      v39 = *(_QWORD *)(v38 + 88);
      *(_QWORD *)(v40 + 80) = *(_QWORD *)(v38 + 80);
      *(_QWORD *)(v40 + 88) = v39;
      OUTLINED_FUNCTION_239_0(v38);
      v41 = v28[7];
      v42 = (_QWORD *)(v3 + v41);
      v43 = (uint64_t *)((char *)v1 + v41);
      v44 = type metadata accessor for Constraints(0);
      OUTLINED_FUNCTION_154();
      if (__swift_getEnumTagSinglePayload((uint64_t)v43, 1, v44))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        OUTLINED_FUNCTION_42_1(*(_QWORD *)(v45 - 8));
      }
      else
      {
        v46 = OUTLINED_FUNCTION_249_0();
        if (v46 == 2 || v46 == 1)
        {
          v47 = v43[1];
          *v42 = *v43;
          v42[1] = v47;
          swift_bridgeObjectRetain();
        }
        else
        {
          v56 = OUTLINED_FUNCTION_59_2();
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v42, v43, v56);
        }
        OUTLINED_FUNCTION_237();
        swift_storeEnumTagMultiPayload();
        OUTLINED_FUNCTION_103_1();
      }
      *(_QWORD *)(v3 + v28[8]) = *(uint64_t *)((char *)v1 + v28[8]);
      *(_QWORD *)(v3 + v28[9]) = *(uint64_t *)((char *)v1 + v28[9]);
      OUTLINED_FUNCTION_355();
      v58 = v57[5];
      v59[4] = v57[4];
      v59[5] = v58;
      v59[6] = v57[6];
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_76_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_77_0();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v6 = v1[1];
      *(_QWORD *)v3 = *v1;
      *(_QWORD *)(v3 + 8) = v6;
      v7 = v1[3];
      *(_QWORD *)(v3 + 16) = v1[2];
      *(_QWORD *)(v3 + 24) = v7;
      *(_QWORD *)(v3 + 32) = v1[4];
      *(_BYTE *)(v3 + 40) = *((_BYTE *)v1 + 40);
      *(_QWORD *)(v3 + 48) = v1[6];
      *(_BYTE *)(v3 + 56) = *((_BYTE *)v1 + 56);
      v8 = v1[8];
      *(_BYTE *)(v3 + 72) = *((_BYTE *)v1 + 72);
      *(_QWORD *)(v3 + 64) = v8;
      *(_QWORD *)(v3 + 80) = v1[10];
      *(_BYTE *)(v3 + 88) = *((_BYTE *)v1 + 88);
      *(_QWORD *)(v3 + 96) = v1[12];
      *(_BYTE *)(v3 + 104) = *((_BYTE *)v1 + 104);
      *(_BYTE *)(v3 + 128) = *((_BYTE *)v1 + 128);
      v9 = v1[15];
      *(_QWORD *)(v3 + 112) = v1[14];
      *(_QWORD *)(v3 + 120) = v9;
      v10 = v1[17];
      *(_BYTE *)(v3 + 144) = *((_BYTE *)v1 + 144);
      *(_QWORD *)(v3 + 136) = v10;
      *(_QWORD *)(v3 + 152) = v1[19];
      v11 = (int *)OUTLINED_FUNCTION_664(*((_WORD *)v1 + 80));
      v12 = v11[6];
      v13 = v3 + v12;
      v14 = (char *)v1 + v12;
      v15 = OUTLINED_FUNCTION_435();
      OUTLINED_FUNCTION_11();
      OUTLINED_FUNCTION_90();
      OUTLINED_FUNCTION_154();
      OUTLINED_FUNCTION_88_0();
      v16 = OUTLINED_FUNCTION_425();
      if (__swift_getEnumTagSinglePayload(v16, v17, v15))
      {
        v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
        OUTLINED_FUNCTION_447(v18);
      }
      else
      {
        v26 = swift_getEnumCaseMultiPayload();
        if (v26 == 2 || v26 == 1)
        {
          OUTLINED_FUNCTION_654();
        }
        else
        {
          v48 = OUTLINED_FUNCTION_59_2();
          (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v13, v14, v48);
        }
        swift_storeEnumTagMultiPayload();
        __swift_storeEnumTagSinglePayload(v13, 0, 1, v15);
      }
      *(_QWORD *)(v3 + v11[7]) = *(uint64_t *)((char *)v1 + v11[7]);
      v49 = v11[8];
      v50 = v3 + v49;
      v51 = (_OWORD *)((char *)v1 + v49);
      v52 = *(uint64_t *)((char *)v1 + v49 + 8);
      swift_bridgeObjectRetain();
      if (v52 < 4)
      {
        *(_OWORD *)v50 = *v51;
      }
      else
      {
        *(_QWORD *)v50 = *(_QWORD *)v51;
        *(_QWORD *)(v50 + 8) = v52;
        OUTLINED_FUNCTION_88_0();
      }
      *(_QWORD *)(v3 + v11[9]) = *(uint64_t *)((char *)v1 + v11[9]);
      OUTLINED_FUNCTION_355();
      v54 = v53[5];
      v55[4] = v53[4];
      v55[5] = v54;
      v55[6] = v53[6];
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_76_0();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_189();
    }
    else
    {
      v21 = v1[1];
      *(_QWORD *)v3 = *v1;
      *(_QWORD *)(v3 + 8) = v21;
      v22 = v1[3];
      *(_QWORD *)(v3 + 16) = v1[2];
      *(_QWORD *)(v3 + 24) = v22;
      v23 = v1[5];
      *(_QWORD *)(v3 + 32) = v1[4];
      *(_QWORD *)(v3 + 40) = v23;
      v24 = v1[7];
      *(_QWORD *)(v3 + 48) = v1[6];
      *(_QWORD *)(v3 + 56) = v24;
      v25 = v1[9];
      *(_QWORD *)(v3 + 64) = v1[8];
      *(_QWORD *)(v3 + 72) = v25;
      *(_QWORD *)(v3 + 80) = v1[10];
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_76_0();
      OUTLINED_FUNCTION_88_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_154();
      OUTLINED_FUNCTION_10_0();
      OUTLINED_FUNCTION_90_0();
    }
    swift_storeEnumTagMultiPayload();
  }
  OUTLINED_FUNCTION_96_1();
}

void destroy for RequestPayload(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_508();
      OUTLINED_FUNCTION_400();
    }
    v3 = a1 + *(int *)(type metadata accessor for CompletePromptTemplateRequest(0) + 20);
    OUTLINED_FUNCTION_562();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_377();
    v5 = v3 + v4;
    v6 = OUTLINED_FUNCTION_29_0();
    if (!OUTLINED_FUNCTION_208_1())
      OUTLINED_FUNCTION_34_1(v5, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8));
    swift_bridgeObjectRelease();
    type metadata accessor for Constraints(0);
    if (!OUTLINED_FUNCTION_208_1())
    {
      v7 = OUTLINED_FUNCTION_619();
      if (v7 == 2 || v7 == 1)
      {
        OUTLINED_FUNCTION_562();
      }
      else if (!v7)
      {
        v8 = OUTLINED_FUNCTION_59_2();
        OUTLINED_FUNCTION_252_0(v8);
      }
    }
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_648();
    OUTLINED_FUNCTION_400();
    OUTLINED_FUNCTION_487();
    goto LABEL_26;
  }
  if (EnumCaseMultiPayload == 1)
  {
    OUTLINED_FUNCTION_648();
    OUTLINED_FUNCTION_508();
    OUTLINED_FUNCTION_400();
    swift_bridgeObjectRelease();
    v9 = OUTLINED_FUNCTION_376();
    type metadata accessor for Constraints(0);
    if (!OUTLINED_FUNCTION_208_1())
    {
      v10 = OUTLINED_FUNCTION_619();
      if (v10 == 2 || v10 == 1)
      {
        OUTLINED_FUNCTION_562();
      }
      else if (!v10)
      {
        v11 = OUTLINED_FUNCTION_59_2();
        OUTLINED_FUNCTION_252_0(v11);
      }
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a1 + *(int *)(v9 + 32) + 8) < 4uLL)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (EnumCaseMultiPayload)
  {
    OUTLINED_FUNCTION_97();
    return;
  }
  OUTLINED_FUNCTION_648();
  OUTLINED_FUNCTION_508();
  OUTLINED_FUNCTION_400();
  OUTLINED_FUNCTION_487();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
}

void initializeWithCopy for RequestPayload()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  int *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_132_0();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_463();
  if (v3 == 2)
  {
    v14 = *(_QWORD *)(v2 + 8);
    if (v14)
    {
      *(_QWORD *)v0 = *(_QWORD *)v2;
      *(_QWORD *)(v0 + 8) = v14;
      v15 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v0 + 16) = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v0 + 24) = v15;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_90();
      OUTLINED_FUNCTION_10_0();
    }
    else
    {
      v22 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)v0 = *(_OWORD *)v2;
      *(_OWORD *)(v0 + 16) = v22;
    }
    v23 = (int *)type metadata accessor for CompletePromptTemplateRequest(0);
    v24 = v23[5];
    v25 = (_QWORD *)(v0 + v24);
    v26 = v2 + v24;
    v27 = *(_QWORD *)(v2 + v24 + 8);
    *v25 = *(_QWORD *)(v2 + v24);
    v25[1] = v27;
    v25[2] = *(_QWORD *)(v2 + v24 + 16);
    OUTLINED_FUNCTION_377();
    v29 = (uint64_t)v25 + v28;
    v30 = v26 + v28;
    v31 = OUTLINED_FUNCTION_29_0();
    OUTLINED_FUNCTION_90();
    OUTLINED_FUNCTION_10_0();
    v32 = OUTLINED_FUNCTION_425();
    if (__swift_getEnumTagSinglePayload(v32, v33, v31))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      OUTLINED_FUNCTION_447(v34);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      __swift_storeEnumTagSinglePayload(v29, 0, 1, v31);
    }
    OUTLINED_FUNCTION_84_1(v2 + v23[6]);
    v36 = *(_QWORD *)(v35 + 88);
    *(_QWORD *)(v37 + 80) = *(_QWORD *)(v35 + 80);
    *(_QWORD *)(v37 + 88) = v36;
    OUTLINED_FUNCTION_239_0(v35);
    v38 = v23[7];
    v39 = v0 + v38;
    v40 = v2 + v38;
    type metadata accessor for Constraints(0);
    OUTLINED_FUNCTION_90();
    if (OUTLINED_FUNCTION_125_1(v40))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      OUTLINED_FUNCTION_162_1(v41);
    }
    else
    {
      v42 = OUTLINED_FUNCTION_259_0();
      if (v42 == 2 || v42 == 1)
      {
        OUTLINED_FUNCTION_405();
      }
      else
      {
        v44 = OUTLINED_FUNCTION_59_2();
        OUTLINED_FUNCTION_107_1(v44);
      }
      OUTLINED_FUNCTION_513();
      OUTLINED_FUNCTION_61_2(v39);
    }
    *(_QWORD *)(v0 + v23[8]) = *(_QWORD *)(v2 + v23[8]);
    OUTLINED_FUNCTION_151_1();
    goto LABEL_30;
  }
  if (v3 != 1)
  {
    v16 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)v0 = *(_QWORD *)v2;
    *(_QWORD *)(v0 + 8) = v16;
    v17 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v0 + 24) = v17;
    v18 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v0 + 32) = *(_QWORD *)(v2 + 32);
    *(_QWORD *)(v0 + 40) = v18;
    v19 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v0 + 56) = v19;
    v20 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v0 + 64) = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v0 + 72) = v20;
    OUTLINED_FUNCTION_605();
LABEL_30:
    swift_bridgeObjectRetain();
    goto LABEL_31;
  }
  v4 = *(_QWORD *)(v2 + 8);
  *(_QWORD *)v0 = *(_QWORD *)v2;
  *(_QWORD *)(v0 + 8) = v4;
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 24) = v5;
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v2 + 32);
  *(_BYTE *)(v0 + 40) = *(_BYTE *)(v2 + 40);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v2 + 48);
  *(_BYTE *)(v0 + 56) = *(_BYTE *)(v2 + 56);
  OUTLINED_FUNCTION_539();
  *(_QWORD *)(v0 + 80) = v6;
  *(_BYTE *)(v0 + 88) = *(_BYTE *)(v2 + 88);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v2 + 96);
  *(_BYTE *)(v0 + 104) = *(_BYTE *)(v2 + 104);
  *(_BYTE *)(v0 + 128) = *(_BYTE *)(v2 + 128);
  v8 = *(_OWORD **)(v2 + 112);
  v7 = *(_QWORD *)(v2 + 120);
  *(_QWORD *)(v0 + 112) = v8;
  *(_QWORD *)(v0 + 120) = v7;
  OUTLINED_FUNCTION_486();
  *(_QWORD *)(v0 + 152) = v9;
  v10 = *(int *)(OUTLINED_FUNCTION_664(*(_WORD *)(v2 + 160)) + 24);
  v11 = v0 + v10;
  v12 = v2 + v10;
  type metadata accessor for Constraints(0);
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_72();
  OUTLINED_FUNCTION_10_0();
  if (OUTLINED_FUNCTION_125_1(v12))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
    OUTLINED_FUNCTION_162_1(v13);
  }
  else
  {
    v21 = OUTLINED_FUNCTION_259_0();
    if (v21 == 2 || v21 == 1)
    {
      OUTLINED_FUNCTION_405();
    }
    else
    {
      v43 = OUTLINED_FUNCTION_59_2();
      OUTLINED_FUNCTION_107_1(v43);
    }
    OUTLINED_FUNCTION_513();
    OUTLINED_FUNCTION_61_2(v11);
  }
  OUTLINED_FUNCTION_290_0();
  if (v11 < 4)
  {
    *(_OWORD *)v4 = *v8;
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)v8;
    *(_QWORD *)(v4 + 8) = v11;
    OUTLINED_FUNCTION_189();
  }
  OUTLINED_FUNCTION_151_1();
LABEL_31:
  OUTLINED_FUNCTION_189();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_77_0();
  OUTLINED_FUNCTION_154();
  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_506();
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_96_1();
}

void assignWithCopy for OneShotRequest()
{
  assignWithCopy for RequestPayload();
}

uint64_t type metadata accessor for OneShotRequest(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for OneShotRequest);
}

void initializeWithTake for RequestPayload()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_97_0();
  v5 = v4;
  v7 = v6;
  v8 = OUTLINED_FUNCTION_463();
  if (v8 == 2)
  {
    v12 = OUTLINED_FUNCTION_93_1();
    if (OUTLINED_FUNCTION_125_1(v3))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      OUTLINED_FUNCTION_258_0(v13);
    }
    else
    {
      OUTLINED_FUNCTION_230_0(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32));
      OUTLINED_FUNCTION_61_2(v2);
    }
    OUTLINED_FUNCTION_166_1((char *)v0 + *(int *)(v1 + 24), (char *)v7 + *(int *)(v1 + 24));
    if (OUTLINED_FUNCTION_55_2(*(int *)(v1 + 28)))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      OUTLINED_FUNCTION_42_1(*(_QWORD *)(v14 - 8));
    }
    else
    {
      if (OUTLINED_FUNCTION_249_0())
      {
        OUTLINED_FUNCTION_42_1(*(_QWORD *)(v3 - 8));
      }
      else
      {
        v16 = OUTLINED_FUNCTION_59_2();
        OUTLINED_FUNCTION_108_1(v16);
        OUTLINED_FUNCTION_210_1();
      }
      OUTLINED_FUNCTION_103_1();
    }
    OUTLINED_FUNCTION_99_0();
LABEL_21:
    swift_storeEnumTagMultiPayload();
    goto LABEL_22;
  }
  if (v8 == 1)
  {
    v9 = v7[1];
    *v0 = *v7;
    v0[1] = v9;
    OUTLINED_FUNCTION_166_1(v0 + 2, v7 + 2);
    v10 = type metadata accessor for CompletePromptRequest(0);
    if (OUTLINED_FUNCTION_55_2(*(int *)(v10 + 24)))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Constraints?);
      OUTLINED_FUNCTION_42_1(*(_QWORD *)(v11 - 8));
    }
    else
    {
      if (OUTLINED_FUNCTION_249_0())
      {
        OUTLINED_FUNCTION_42_1(*(_QWORD *)(v3 - 8));
      }
      else
      {
        v15 = OUTLINED_FUNCTION_59_2();
        OUTLINED_FUNCTION_108_1(v15);
        OUTLINED_FUNCTION_210_1();
      }
      OUTLINED_FUNCTION_103_1();
    }
    OUTLINED_FUNCTION_73_2();
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_142_1(*(_QWORD *)(v5 - 8));
LABEL_22:
  OUTLINED_FUNCTION_138();
}

void assignWithTake for OneShotRequest()
{
  assignWithTake for RequestPayload();
}

void type metadata completion function for RequestPayload()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CompletePromptRequest(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CompletePromptTemplateRequest(319);
    if (v1 <= 0x3F)
    {
      OUTLINED_FUNCTION_380();
      swift_initEnumMetadataMultiPayload();
      OUTLINED_FUNCTION_682();
    }
  }
  OUTLINED_FUNCTION_579();
}

void base witness table accessor for Equatable in OneShotRequest()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type OneShotRequest and conformance OneShotRequest);
}

void base witness table accessor for Equatable in StreamingRequest()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type StreamingRequest and conformance StreamingRequest);
}

void base witness table accessor for Equatable in DocumentEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentEnvelope and conformance DocumentEnvelope);
}

void base witness table accessor for Equatable in DocumentRegistrationStatusEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope and conformance DocumentRegistrationStatusEnvelope);
}

void base witness table accessor for Equatable in DocumentRegistrationEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope and conformance DocumentRegistrationEnvelope);
}

void base witness table accessor for Equatable in PromptTemplateInfoEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope and conformance PromptTemplateInfoEnvelope);
}

void base witness table accessor for Equatable in SchemaEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type SchemaEnvelope and conformance SchemaEnvelope);
}

void base witness table accessor for Equatable in ToolDescriptionEnvelope.FunctionDescriptionEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope);
}

void base witness table accessor for Equatable in ToolDescriptionEnvelope.ToolTypeEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope and conformance ToolDescriptionEnvelope.ToolTypeEnvelope);
}

void base witness table accessor for Equatable in ToolDescriptionEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope and conformance ToolDescriptionEnvelope);
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CodingKeys, &unk_2519CDD58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CodingKeys, &unk_2519CDD58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CodingKeys, &unk_2519CDD58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CodingKeys, &unk_2519CDD58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptTemplateCodingKeys, &unk_2519CDF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptTemplateCodingKeys, &unk_2519CDF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptTemplateCodingKeys, &unk_2519CDF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptTemplateCodingKeys, &unk_2519CDF08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptCodingKeys, &unk_2519CDE78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptCodingKeys, &unk_2519CDE78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptCodingKeys, &unk_2519CDE78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CompletePromptCodingKeys, &unk_2519CDE78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CountTokensCodingKeys, &unk_2519CDDE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CountTokensCodingKeys, &unk_2519CDDE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CountTokensCodingKeys, &unk_2519CDDE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for OneShotRequest.CountTokensCodingKeys, &unk_2519CDDE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OneShotRequest.CountTokensCodingKeys and conformance OneShotRequest.CountTokensCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CodingKeys, &unk_2519CEDC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CodingKeys, &unk_2519CEDC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CodingKeys, &unk_2519CEDC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CodingKeys, &unk_2519CEDC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CodingKeys and conformance StreamingRequest.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.RegisterDocumentCodingKeys, &unk_2519CEEE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.RegisterDocumentCodingKeys, &unk_2519CEEE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.RegisterDocumentCodingKeys, &unk_2519CEEE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.RegisterDocumentCodingKeys, &unk_2519CEEE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptTemplateCodingKeys, &unk_2519CEF70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptTemplateCodingKeys, &unk_2519CEF70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptTemplateCodingKeys, &unk_2519CEF70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptTemplateCodingKeys, &unk_2519CEF70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptCodingKeys, &unk_2519CEE50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptCodingKeys, &unk_2519CEE50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptCodingKeys, &unk_2519CEE50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys;
  if (!lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for StreamingRequest.CompletePromptCodingKeys, &unk_2519CEE50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StreamingRequest.CompletePromptCodingKeys and conformance StreamingRequest.CompletePromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentEnvelope.CodingKeys, &unk_2519CE760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentEnvelope.CodingKeys, &unk_2519CE760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentEnvelope.CodingKeys, &unk_2519CE760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentEnvelope.CodingKeys, &unk_2519CE760);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentEnvelope.CodingKeys and conformance DocumentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x2495A740C](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x2495A740C](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadataEnvelope.CodingKeys, &unk_2519D0520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadataEnvelope.CodingKeys, &unk_2519D0520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadataEnvelope.CodingKeys, &unk_2519D0520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for RequestMetadataEnvelope.CodingKeys, &unk_2519D0520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestMetadataEnvelope.CodingKeys and conformance RequestMetadataEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationEnvelope.CodingKeys, &unk_2519D1628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationEnvelope.CodingKeys, &unk_2519D1628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationEnvelope.CodingKeys, &unk_2519D1628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationEnvelope.CodingKeys, &unk_2519D1628);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationEnvelope.CodingKeys and conformance DocumentRegistrationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.CodingKeys, &unk_2519CE2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.CodingKeys, &unk_2519CE2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.CodingKeys, &unk_2519CE2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.CodingKeys, &unk_2519CE2F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.CodingKeys and conformance PromptEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope and conformance PromptEnvelope.DelimiterEnvelope);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12A0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PromptEnvelope.DelimiterEnvelope]);
    lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope and conformance PromptEnvelope.DelimiterEnvelope);
    v3 = v2;
    result = MEMORY[0x2495A740C](MEMORY[0x24BEE12D0], v1, &v3);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PromptEnvelope.DelimiterEnvelope] and conformance <A> [A]);
  }
  return result;
}

uint64_t type metadata accessor for PromptEnvelope.DelimiterEnvelope(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for PromptEnvelope.DelimiterEnvelope);
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentEnvelope, &unk_2519CE028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentEnvelope, &unk_2519CE028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentEnvelope, &unk_2519CE028);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope and conformance PromptEnvelope.AttachmentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.CodingKeys, &unk_2519D02F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.CodingKeys, &unk_2519D02F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.CodingKeys, &unk_2519D02F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.CodingKeys, &unk_2519D02F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.CodingKeys and conformance PromptRenderingEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.SourceEnvelope, &unk_2519D0270);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.SourceEnvelope, &unk_2519D0270);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.SourceEnvelope, &unk_2519D0270);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope and conformance PromptRenderingEnvelope.SourceEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptTemplateInfoEnvelope.CodingKeys, &unk_2519D1468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptTemplateInfoEnvelope.CodingKeys, &unk_2519D1468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptTemplateInfoEnvelope.CodingKeys, &unk_2519D1468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptTemplateInfoEnvelope.CodingKeys, &unk_2519D1468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptTemplateInfoEnvelope.CodingKeys and conformance PromptTemplateInfoEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParametersEnvelope.CodingKeys, &unk_2519D14F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParametersEnvelope.CodingKeys, &unk_2519D14F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParametersEnvelope.CodingKeys, &unk_2519D14F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParametersEnvelope.CodingKeys, &unk_2519D14F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParametersEnvelope.CodingKeys and conformance SamplingParametersEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope, &unk_2519D1350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope, &unk_2519D1350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope, &unk_2519D1350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope and conformance SamplingStrategyEnvelope);
  }
  return result;
}

void lazy protocol witness table accessor for type [String] and conformance <A> [A](uint64_t a1)
{
  uint64_t *v1;

  if (!OUTLINED_FUNCTION_393(a1))
  {
    OUTLINED_FUNCTION_501(0, v1);
    OUTLINED_FUNCTION_673();
  }
  OUTLINED_FUNCTION_218_0();
}

{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!OUTLINED_FUNCTION_393(a1))
  {
    v4 = v3;
    v5 = v2;
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v7 = v5;
    atomic_store(MEMORY[0x2495A740C](v4, v6, &v7), v1);
  }
  OUTLINED_FUNCTION_218_0();
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.CodingKeys, &unk_2519D09D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.CodingKeys, &unk_2519D09D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.CodingKeys, &unk_2519D09D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.CodingKeys, &unk_2519D09D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.CodingKeys, &unk_2519D0B80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.CodingKeys, &unk_2519D0B80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.CodingKeys, &unk_2519D0B80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.CodingKeys, &unk_2519D0B80);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.CodingKeys and conformance ModelInformationEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.AssetEnvelope, &unk_2519D0AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.AssetEnvelope, &unk_2519D0AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.AssetEnvelope, &unk_2519D0AF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope and conformance ModelInformationEnvelope.AssetEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for UsageEnvelope.CodingKeys, &unk_2519CDC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for UsageEnvelope.CodingKeys, &unk_2519CDC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for UsageEnvelope.CodingKeys, &unk_2519CDC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for UsageEnvelope.CodingKeys, &unk_2519CDC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsageEnvelope.CodingKeys and conformance UsageEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys, &unk_2519D0F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys, &unk_2519D0F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys, &unk_2519D0F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys, &unk_2519D0F50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.CandidateEnvelope.CodingKeys and conformance PromptCompletionEnvelope.CandidateEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope, &unk_2519D0EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope, &unk_2519D0EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope, &unk_2519D0EC0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope and conformance PromptCompletionEnvelope.SegmentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope and conformance ToolCallEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope, &unk_2519CF350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope, &unk_2519CF350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope, &unk_2519CF350);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope and conformance ToolCallEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope and conformance FinishReasonEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope, &unk_2519CFCF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope, &unk_2519CFCF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope, &unk_2519CFCF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope and conformance FinishReasonEnvelope);
  }
  return result;
}

void lazy protocol witness table accessor for type [PromptCompletionEnvelope.CandidateEnvelope] and conformance <A> [A](uint64_t a1)
{
  unint64_t *v1;
  void (*v2)(void);
  uint64_t *v3;
  uint64_t v4;

  if (!OUTLINED_FUNCTION_393(a1))
  {
    OUTLINED_FUNCTION_501(0, v3);
    v2();
    v4 = OUTLINED_FUNCTION_210_0();
    atomic_store(MEMORY[0x2495A740C](v4), v1);
  }
  OUTLINED_FUNCTION_218_0();
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys, &unk_2519D2370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys, &unk_2519D2370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys, &unk_2519D2370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys, &unk_2519D2370);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys, &unk_2519D2400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys, &unk_2519D2400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys, &unk_2519D2400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys, &unk_2519D2400);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope, &unk_2519D2030);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope, &unk_2519D2030);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope, &unk_2519D2030);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys, &unk_2519D2640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys, &unk_2519D2640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys, &unk_2519D2640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys, &unk_2519D2640);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope, &unk_2519D1F18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope, &unk_2519D1F18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope, &unk_2519D1F18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys, &unk_2519D2520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys, &unk_2519D2520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys, &unk_2519D2520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys, &unk_2519D2520);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope, &unk_2519D1CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope, &unk_2519D1CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope, &unk_2519D1CE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys, &unk_2519D2490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys, &unk_2519D2490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys, &unk_2519D2490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys, &unk_2519D2490);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope, &unk_2519D21D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope, &unk_2519D21D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope, &unk_2519D21D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys, &unk_2519D20B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys, &unk_2519D20B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys, &unk_2519D20B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys, &unk_2519D20B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope, &unk_2519D22F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope, &unk_2519D22F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope, &unk_2519D22F0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys, &unk_2519D25B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys, &unk_2519D25B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys, &unk_2519D25B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys, &unk_2519D25B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope, &unk_2519D1E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope, &unk_2519D1E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope, &unk_2519D1E08);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope);
  }
  return result;
}

uint64_t outlined retain of PromptRenderingEnvelope(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of PromptRenderingEnvelope(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys, &unk_2519D0878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys, &unk_2519D0878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys, &unk_2519D0878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys, &unk_2519D0878);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys, &unk_2519D0928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys, &unk_2519D0928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys, &unk_2519D0928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys, &unk_2519D0928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys, &unk_2519D0908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys, &unk_2519D0908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys, &unk_2519D0908);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys and conformance ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys, &unk_2519D07E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys, &unk_2519D07E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys, &unk_2519D07E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys, &unk_2519D07E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys and conformance ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SchemaEnvelope.CodingKeys, &unk_2519CE648);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SchemaEnvelope.CodingKeys, &unk_2519CE648);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SchemaEnvelope.CodingKeys, &unk_2519CE648);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SchemaEnvelope.CodingKeys, &unk_2519CE648);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SchemaEnvelope.CodingKeys and conformance SchemaEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.CodingKeys, &unk_2519D1990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.CodingKeys, &unk_2519D1990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.CodingKeys, &unk_2519D1990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.CodingKeys, &unk_2519D1990);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.CodingKeys and conformance DocumentRegistrationStatusEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.ErrorCodingKeys, &unk_2519D1A20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.ErrorCodingKeys, &unk_2519D1A20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.ErrorCodingKeys, &unk_2519D1A20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.ErrorCodingKeys, &unk_2519D1A20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.ErrorCodingKeys and conformance DocumentRegistrationStatusEnvelope.ErrorCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.FinishedCodingKeys, &unk_2519D1AB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.FinishedCodingKeys, &unk_2519D1AB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.FinishedCodingKeys, &unk_2519D1AB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.FinishedCodingKeys, &unk_2519D1AB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.FinishedCodingKeys and conformance DocumentRegistrationStatusEnvelope.FinishedCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.RegisteringCodingKeys, &unk_2519D1B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.RegisteringCodingKeys, &unk_2519D1B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.RegisteringCodingKeys, &unk_2519D1B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys;
  if (!lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for DocumentRegistrationStatusEnvelope.RegisteringCodingKeys, &unk_2519D1B40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentRegistrationStatusEnvelope.RegisteringCodingKeys and conformance DocumentRegistrationStatusEnvelope.RegisteringCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressEnvelope and conformance ProgressEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ProgressEnvelope, &unk_2519CE988);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ProgressEnvelope, &unk_2519CE988);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ProgressEnvelope, &unk_2519CE988);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope and conformance ProgressEnvelope);
  }
  return result;
}

void outlined init with copy of Prompt.Rendering?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_458(a1, a2, a3);
  OUTLINED_FUNCTION_214_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  OUTLINED_FUNCTION_104();
}

_OWORD *outlined init with take of FinishReasonEnvelope(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t sub_248B6C9E0()
{
  OUTLINED_FUNCTION_202_1();
  return swift_deallocObject();
}

uint64_t sub_248B6CA00()
{
  uint64_t v0;

  OUTLINED_FUNCTION_202_1();
  OUTLINED_FUNCTION_430();
  if (*(_QWORD *)(v0 + 56) >= 3uLL)
    swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined retain of FinishReasonEnvelope(uint64_t a1)
{
  outlined copy of FinishReason(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_248B6CA60()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;

  OUTLINED_FUNCTION_202_1();
  OUTLINED_FUNCTION_430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_573();
  if (!(!v3 & v2))
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 96), v1);
  return swift_deallocObject();
}

void outlined init with take of Locale?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_458(a1, a2, a3);
  OUTLINED_FUNCTION_214_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  OUTLINED_FUNCTION_104();
}

uint64_t outlined retain of String(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of Data?(uint64_t a1)
{
  outlined copy of Data?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_248B6CB34()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;

  OUTLINED_FUNCTION_202_1();
  OUTLINED_FUNCTION_430();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_573();
  if (!(!v3 & v2))
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 72), v1);
  return swift_deallocObject();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_248B6CBB0()
{
  OUTLINED_FUNCTION_202_1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined retain of PromptEnvelope.AttachmentEnvelope(uint64_t a1)
{
  outlined copy of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t outlined release of PromptEnvelope.AttachmentEnvelope(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.CodingKeys()
{
  return &unk_2519D1990;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.RegisteringCodingKeys()
{
  return &unk_2519D1B40;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.FinishedCodingKeys()
{
  return &unk_2519D1AB0;
}

void *type metadata accessor for DocumentRegistrationStatusEnvelope.ErrorCodingKeys()
{
  return &unk_2519D1A20;
}

void *type metadata accessor for SchemaEnvelope.CodingKeys()
{
  return &unk_2519CE648;
}

void *type metadata accessor for ToolDescriptionEnvelope.FunctionDescriptionEnvelope.CodingKeys()
{
  return &unk_2519D07E8;
}

void *type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope.CodingKeys()
{
  return &unk_2519D0878;
}

void *type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope.BrowswerCodingKeys()
{
  return &unk_2519D0908;
}

void *type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope.FunctionCodingKeys()
{
  return &unk_2519D0928;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys()
{
  return &unk_2519D2370;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationCodingKeys()
{
  return &unk_2519D25B0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.RenderedPromptCodingKeys()
{
  return &unk_2519D20B0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaCodingKeys()
{
  return &unk_2519D2490;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaCodingKeys()
{
  return &unk_2519D2520;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedCodingKeys()
{
  return &unk_2519D2640;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.UsageCodingKeys()
{
  return &unk_2519D2400;
}

void *type metadata accessor for PromptCompletionEnvelope.CandidateEnvelope.CodingKeys()
{
  return &unk_2519D0F50;
}

void *type metadata accessor for UsageEnvelope.CodingKeys()
{
  return &unk_2519CDC48;
}

void *type metadata accessor for ModelInformationEnvelope.CodingKeys()
{
  return &unk_2519D0B80;
}

void *type metadata accessor for ToolDescriptionEnvelope.CodingKeys()
{
  return &unk_2519D09D8;
}

uint64_t getEnumTagSinglePayload for SamplingParametersEnvelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingParametersEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_248B6CE54 + 4 * byte_248BC0407[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_248B6CE88 + 4 * byte_248BC0402[v4]))();
}

uint64_t sub_248B6CE88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B6CE90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B6CE98);
  return result;
}

uint64_t sub_248B6CEA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B6CEACLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_248B6CEB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_248B6CEB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SamplingParametersEnvelope.CodingKeys()
{
  return &unk_2519D14F8;
}

void *type metadata accessor for PromptTemplateInfoEnvelope.CodingKeys()
{
  return &unk_2519D1468;
}

void *type metadata accessor for PromptRenderingEnvelope.CodingKeys()
{
  return &unk_2519D02F0;
}

void *type metadata accessor for PromptEnvelope.CodingKeys()
{
  return &unk_2519CE2F0;
}

void *type metadata accessor for DocumentRegistrationEnvelope.CodingKeys()
{
  return &unk_2519D1628;
}

void *type metadata accessor for RequestMetadataEnvelope.CodingKeys()
{
  return &unk_2519D0520;
}

void *type metadata accessor for DocumentEnvelope.CodingKeys()
{
  return &unk_2519CE760;
}

void *type metadata accessor for StreamingRequest.CodingKeys()
{
  return &unk_2519CEDC0;
}

void *type metadata accessor for StreamingRequest.CompletePromptCodingKeys()
{
  return &unk_2519CEE50;
}

void *type metadata accessor for StreamingRequest.CompletePromptTemplateCodingKeys()
{
  return &unk_2519CEF70;
}

void *type metadata accessor for StreamingRequest.RegisterDocumentCodingKeys()
{
  return &unk_2519CEEE0;
}

void *type metadata accessor for OneShotRequest.CodingKeys()
{
  return &unk_2519CDD58;
}

void *type metadata accessor for OneShotRequest.CountTokensCodingKeys()
{
  return &unk_2519CDDE8;
}

void *type metadata accessor for OneShotRequest.CompletePromptCodingKeys()
{
  return &unk_2519CDE78;
}

void *type metadata accessor for OneShotRequest.CompletePromptTemplateCodingKeys()
{
  return &unk_2519CDF08;
}

void assignWithCopy for ToolChoiceEnvelope()
{
  _OWORD *v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  OUTLINED_FUNCTION_628();
  v4 = *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)(v2 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      OUTLINED_FUNCTION_389();
      goto LABEL_8;
    }
LABEL_7:
    *v0 = *v1;
    goto LABEL_8;
  }
  if (v4 < 0xFFFFFFFF)
  {
    OUTLINED_FUNCTION_186();
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_389();
  OUTLINED_FUNCTION_186();
LABEL_8:
  OUTLINED_FUNCTION_97();
}

void assignWithTake for ToolChoiceEnvelope()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  OUTLINED_FUNCTION_628();
  if (*(_QWORD *)(v2 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v3 = *(_QWORD *)(v1 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)v0 = *(_OWORD *)v1;
    goto LABEL_6;
  }
  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_QWORD *)(v0 + 8) = v3;
  swift_bridgeObjectRelease();
LABEL_6:
  OUTLINED_FUNCTION_104();
}

uint64_t getEnumTagSinglePayload for ToolChoiceEnvelope(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return getEnumTag for Prompt.ToolCall.Kind();
  if (a2 >= 0x7FFFFFFD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

void *type metadata accessor for FinishReasonEnvelope()
{
  return &unk_2519CFCF8;
}

void *type metadata accessor for ToolCallEnvelope()
{
  return &unk_2519CF350;
}

void *type metadata accessor for PromptCompletionEnvelope.SegmentEnvelope()
{
  return &unk_2519D0EC0;
}

void *type metadata accessor for ModelInformationEnvelope.AssetEnvelope()
{
  return &unk_2519D0AF8;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope()
{
  return &unk_2519D2030;
}

uint64_t getEnumTagSinglePayload for ModelInformationEnvelope.AssetEnvelope(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return OUTLINED_FUNCTION_265_0(v2);
}

uint64_t storeEnumTagSinglePayload for ModelInformationEnvelope.AssetEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return OUTLINED_FUNCTION_299_0(result, a2);
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      return OUTLINED_FUNCTION_299_0(result, a2);
  }
  return result;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope()
{
  return &unk_2519D1F18;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope()
{
  return &unk_2519D1CE8;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope()
{
  return &unk_2519D21D0;
}

uint64_t destroy for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy104_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x68uLL);
}

uint64_t assignWithTake for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 104))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope()
{
  return &unk_2519D22F0;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope()
{
  return &unk_2519D1E08;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SamplingStrategyEnvelope(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingStrategyEnvelope(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SamplingStrategyEnvelope(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t destructiveInjectEnumTag for SamplingStrategyEnvelope(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for SamplingStrategyEnvelope()
{
  return &unk_2519D1350;
}

void *type metadata accessor for PromptRenderingEnvelope.SourceEnvelope()
{
  return &unk_2519D0270;
}

uint64_t destroy for PromptEnvelope.AttachmentEnvelope(uint64_t a1)
{
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  outlined copy of Data._Representation(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  outlined consume of Data._Representation(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for PromptEnvelope.AttachmentEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v4, v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptEnvelope.AttachmentEnvelope(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;

  if (a2)
  {
    if (a2 >= 0xFF && a1[40])
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *a1;
      v4 = v3 >= 2;
      v2 = v3 - 2;
      if (!v4)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PromptEnvelope.AttachmentEnvelope(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void *type metadata accessor for PromptEnvelope.AttachmentEnvelope()
{
  return &unk_2519CE028;
}

_QWORD *initializeBufferWithCopyOfBuffer for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(int *)(a3 + 32);
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    v10 = type metadata accessor for Locale();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
    {
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t destroy for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for Locale();
  result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return result;
}

uint64_t initializeWithCopy for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v6 = *(int *)(a3 + 32);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Locale();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  }
  return a1;
}

_QWORD *assignWithCopy for PromptEnvelope.DelimiterEnvelope(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  int v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v9);
  v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  if (!EnumTagSinglePayload)
  {
    v12 = *(_QWORD *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v9);
  return a1;
}

_OWORD *initializeWithTake for PromptEnvelope.DelimiterEnvelope(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 32);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for PromptEnvelope.DelimiterEnvelope(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  int EnumTagSinglePayload;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v8 = *(int *)(a3 + 32);
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for Locale();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v11);
  v13 = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11);
  if (!EnumTagSinglePayload)
  {
    v14 = *(_QWORD *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v14 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PromptEnvelope.DelimiterEnvelope()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_248B6DD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_373();
  if (v3)
  {
    OUTLINED_FUNCTION_168_1();
    OUTLINED_FUNCTION_97();
  }
  else
  {
    v4 = v2;
    v5 = v1;
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    OUTLINED_FUNCTION_19_1(v0 + *(int *)(v4 + 32), v5, v6);
  }
}

uint64_t storeEnumTagSinglePayload for PromptEnvelope.DelimiterEnvelope()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_248B6DDCC()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_358();
  if (v2)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    OUTLINED_FUNCTION_97();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    OUTLINED_FUNCTION_238_0();
    OUTLINED_FUNCTION_18_1(v3, v4, v5, v6);
  }
}

void type metadata completion function for PromptEnvelope.DelimiterEnvelope()
{
  unint64_t v0;

  type metadata accessor for Constraints?(319, (unint64_t *)&lazy cache variable for type metadata for Locale?, (void (*)(uint64_t))MEMORY[0x24BDCEEA8]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t getEnumTagSinglePayload for ProgressEnvelope(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ProgressEnvelope(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void *type metadata accessor for ProgressEnvelope()
{
  return &unk_2519CE988;
}

void base witness table accessor for Equatable in PromptEnvelope.DelimiterEnvelope()
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope((uint64_t)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope and conformance PromptEnvelope.DelimiterEnvelope);
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.DelimiterEnvelope.CodingKeys, &unk_2519CE260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.DelimiterEnvelope.CodingKeys, &unk_2519CE260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.DelimiterEnvelope.CodingKeys, &unk_2519CE260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.DelimiterEnvelope.CodingKeys, &unk_2519CE260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.DelimiterEnvelope.CodingKeys and conformance PromptEnvelope.DelimiterEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentEnvelope.CodingKeys, &unk_2519CDF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentEnvelope.CodingKeys, &unk_2519CDF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentEnvelope.CodingKeys, &unk_2519CDF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentEnvelope.CodingKeys, &unk_2519CDF98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentEnvelope.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of PromptEnvelope.AttachmentContentEnvelope(__int128 *a1, uint64_t a2)
{
  __int128 v2;

  v2 = *a1;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a1 + 2);
  *(_OWORD *)a2 = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope, &unk_2519CE1D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope, &unk_2519CE1D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope, &unk_2519CE1D0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope and conformance PromptEnvelope.AttachmentContentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.SourceEnvelope.CodingKeys, &unk_2519D01E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.SourceEnvelope.CodingKeys, &unk_2519D01E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.SourceEnvelope.CodingKeys, &unk_2519D01E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptRenderingEnvelope.SourceEnvelope.CodingKeys, &unk_2519D01E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptRenderingEnvelope.SourceEnvelope.CodingKeys and conformance PromptRenderingEnvelope.SourceEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.CodingKeys, &unk_2519D1210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.CodingKeys, &unk_2519D1210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.CodingKeys, &unk_2519D1210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.CodingKeys, &unk_2519D1210);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.CodingKeys and conformance SamplingStrategyEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.TopKCodingKeys, &unk_2519D12A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.TopKCodingKeys, &unk_2519D12A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.TopKCodingKeys, &unk_2519D12A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.TopKCodingKeys, &unk_2519D12A0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.TopKCodingKeys and conformance SamplingStrategyEnvelope.TopKCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.NucleusSamplingCodingKeys, &unk_2519D1180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.NucleusSamplingCodingKeys, &unk_2519D1180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.NucleusSamplingCodingKeys, &unk_2519D1180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.NucleusSamplingCodingKeys, &unk_2519D1180);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.NucleusSamplingCodingKeys and conformance SamplingStrategyEnvelope.NucleusSamplingCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.ArgmaxCodingKeys, &unk_2519D1330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.ArgmaxCodingKeys, &unk_2519D1330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys;
  if (!lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategyEnvelope.ArgmaxCodingKeys, &unk_2519D1330);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategyEnvelope.ArgmaxCodingKeys and conformance SamplingStrategyEnvelope.ArgmaxCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.AssetEnvelope.CodingKeys, &unk_2519D0A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.AssetEnvelope.CodingKeys, &unk_2519D0A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.AssetEnvelope.CodingKeys, &unk_2519D0A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ModelInformationEnvelope.AssetEnvelope.CodingKeys, &unk_2519D0A68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelInformationEnvelope.AssetEnvelope.CodingKeys and conformance ModelInformationEnvelope.AssetEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.CodingKeys, &unk_2519D0DA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.CodingKeys, &unk_2519D0DA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.CodingKeys, &unk_2519D0DA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.CodingKeys, &unk_2519D0DA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys, &unk_2519D0E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys, &unk_2519D0E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys, &unk_2519D0E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys, &unk_2519D0E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys and conformance PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.TextContentEnvelope, &unk_2519D0D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.TextContentEnvelope, &unk_2519D0D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.TextContentEnvelope, &unk_2519D0D20);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope and conformance PromptCompletionEnvelope.TextContentEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.CodingKeys, &unk_2519CF2C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.CodingKeys, &unk_2519CF2C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.CodingKeys, &unk_2519CF2C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.CodingKeys, &unk_2519CF2C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.CodingKeys and conformance ToolCallEnvelope.CodingKeys);
  }
  return result;
}

_OWORD *outlined init with take of ToolCallEnvelope.KindEnvelope(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope, &unk_2519CF120);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope, &unk_2519CF120);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope, &unk_2519CF120);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope and conformance ToolCallEnvelope.KindEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.CodingKeys, &unk_2519CFB98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.CodingKeys, &unk_2519CFB98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.CodingKeys, &unk_2519CFB98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.CodingKeys, &unk_2519CFB98);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.CodingKeys and conformance FinishReasonEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.InvokedToolCodingKeys, &unk_2519CFC28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.InvokedToolCodingKeys, &unk_2519CFC28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.InvokedToolCodingKeys, &unk_2519CFC28);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.InvokedToolCodingKeys and conformance FinishReasonEnvelope.InvokedToolCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys, &unk_2519CFCD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys, &unk_2519CFCD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys, &unk_2519CFCD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys and conformance FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.EncounteredStopSequenceCodingKeys, &unk_2519CFC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.EncounteredStopSequenceCodingKeys, &unk_2519CFC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.EncounteredStopSequenceCodingKeys, &unk_2519CFC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.EncounteredStopSequenceCodingKeys, &unk_2519CFC48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.EncounteredStopSequenceCodingKeys and conformance FinishReasonEnvelope.EncounteredStopSequenceCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.ProducedStopTokenCodingKeys, &unk_2519CFB78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.ProducedStopTokenCodingKeys, &unk_2519CFB78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys;
  if (!lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for FinishReasonEnvelope.ProducedStopTokenCodingKeys, &unk_2519CFB78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FinishReasonEnvelope.ProducedStopTokenCodingKeys and conformance FinishReasonEnvelope.ProducedStopTokenCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys, &unk_2519D1FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys, &unk_2519D1FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys, &unk_2519D1FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys, &unk_2519D1FA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys, &unk_2519D1E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys, &unk_2519D1E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys, &unk_2519D1E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys, &unk_2519D1E88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys, &unk_2519D1C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys, &unk_2519D1C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys, &unk_2519D1C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys, &unk_2519D1C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys, &unk_2519D2140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys, &unk_2519D2140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys, &unk_2519D2140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys, &unk_2519D2140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys, &unk_2519D2260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys, &unk_2519D2260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys, &unk_2519D2260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys, &unk_2519D2260);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys, &unk_2519D1D78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys, &unk_2519D1D78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys, &unk_2519D1D78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys, &unk_2519D1D78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys and conformance PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ProgressEnvelope.CodingKeys, &unk_2519CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ProgressEnvelope.CodingKeys, &unk_2519CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ProgressEnvelope.CodingKeys, &unk_2519CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ProgressEnvelope.CodingKeys, &unk_2519CE8F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressEnvelope.CodingKeys and conformance ProgressEnvelope.CodingKeys);
  }
  return result;
}

void *type metadata accessor for ProgressEnvelope.CodingKeys()
{
  return &unk_2519CE8F8;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ModelInformationElementEnvelope.CodingKeys()
{
  return &unk_2519D1D78;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.PromptRenderedElementEnvelope.CodingKeys()
{
  return &unk_2519D2260;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys()
{
  return &unk_2519D2140;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 6);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 6);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 6);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_265_0(v8);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_248B704CC + 4 * byte_248BC0411[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_383_0 + 4 * byte_248BC040C[v4]))();
}

uint64_t sub_248B70504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B7050CLL);
  return result;
}

uint64_t sub_248B70514(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B7051CLL);
  return OUTLINED_FUNCTION_338();
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.ToolCallDeltaElementEnvelope.CodingKeys()
{
  return &unk_2519D1C58;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.CandidateFinishedElementEnvelope.CodingKeys()
{
  return &unk_2519D1E88;
}

void *type metadata accessor for PromptCompletionStreamElementEnvelope.Envelope.UsageElementEnvelope.CodingKeys()
{
  return &unk_2519D1FA0;
}

uint64_t getEnumTagSinglePayload for ToolChoiceEnvelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 4);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 4);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 4);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_265_0(v8);
}

uint64_t storeEnumTagSinglePayload for ToolChoiceEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_248B7062C + 4 * byte_248BC041B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_383_1 + 4 * byte_248BC0416[v4]))();
}

uint64_t sub_248B70664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B7066CLL);
  return result;
}

uint64_t sub_248B70674(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B7067CLL);
  return OUTLINED_FUNCTION_338();
}

void *type metadata accessor for FinishReasonEnvelope.CodingKeys()
{
  return &unk_2519CFB98;
}

void *type metadata accessor for FinishReasonEnvelope.ProducedStopTokenCodingKeys()
{
  return &unk_2519CFB78;
}

void *type metadata accessor for FinishReasonEnvelope.EncounteredStopSequenceCodingKeys()
{
  return &unk_2519CFC48;
}

void *type metadata accessor for FinishReasonEnvelope.ExceededMaximumAllowedTokensCodingKeys()
{
  return &unk_2519CFCD8;
}

void *type metadata accessor for FinishReasonEnvelope.InvokedToolCodingKeys()
{
  return &unk_2519CFC28;
}

void *type metadata accessor for ToolCallEnvelope.CodingKeys()
{
  return &unk_2519CF2C0;
}

void *type metadata accessor for PromptCompletionEnvelope.SegmentEnvelope.CodingKeys()
{
  return &unk_2519D0DA0;
}

void *type metadata accessor for PromptCompletionEnvelope.SegmentEnvelope.TextCodingKeys()
{
  return &unk_2519D0E30;
}

void *type metadata accessor for ModelInformationEnvelope.AssetEnvelope.CodingKeys()
{
  return &unk_2519D0A68;
}

void *type metadata accessor for SamplingStrategyEnvelope.CodingKeys()
{
  return &unk_2519D1210;
}

void *type metadata accessor for SamplingStrategyEnvelope.ArgmaxCodingKeys()
{
  return &unk_2519D1330;
}

void *type metadata accessor for SamplingStrategyEnvelope.NucleusSamplingCodingKeys()
{
  return &unk_2519D1180;
}

void *type metadata accessor for SamplingStrategyEnvelope.TopKCodingKeys()
{
  return &unk_2519D12A0;
}

void *type metadata accessor for PromptRenderingEnvelope.SourceEnvelope.CodingKeys()
{
  return &unk_2519D01E0;
}

uint64_t getEnumTagSinglePayload for RequestPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 3);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 3);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 3);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_265_0(v8);
}

uint64_t storeEnumTagSinglePayload for RequestPayload.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_248B7083C + 4 * byte_248BC0425[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_383_2 + 4 * byte_248BC0420[v4]))();
}

uint64_t sub_248B70874(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B7087CLL);
  return result;
}

uint64_t sub_248B70884(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B7088CLL);
  return OUTLINED_FUNCTION_338();
}

void *type metadata accessor for PromptEnvelope.AttachmentEnvelope.CodingKeys()
{
  return &unk_2519CDF98;
}

uint64_t getEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 5);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 5);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 5);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_265_0(v8);
}

uint64_t storeEnumTagSinglePayload for PromptCompletionStreamElementEnvelope.Envelope.TextDeltaElementEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_248B7097C + 4 * byte_248BC042F[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_383_3 + 4 * byte_248BC042A[v4]))();
}

uint64_t sub_248B709B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B709BCLL);
  return result;
}

uint64_t sub_248B709C4(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B709CCLL);
  return OUTLINED_FUNCTION_338();
}

void *type metadata accessor for PromptEnvelope.DelimiterEnvelope.CodingKeys()
{
  return &unk_2519CE260;
}

void *type metadata accessor for ToolCallEnvelope.KindEnvelope()
{
  return &unk_2519CF120;
}

void destroy for PromptCompletionEnvelope.SegmentEnvelope()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  char v3;

  OUTLINED_FUNCTION_394();
  OUTLINED_FUNCTION_573();
  if (!v3 & v2)
    OUTLINED_FUNCTION_104();
  else
    outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), v1);
}

void initializeWithCopy for PromptCompletionEnvelope.SegmentEnvelope(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = a2 + 2;
  v5 = a2[3];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_415();
  if (!v7 & v6)
  {
    *(_OWORD *)(a1 + 16) = *v4;
  }
  else
  {
    v8 = *(_QWORD *)v4;
    OUTLINED_FUNCTION_40_1();
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v5;
  }
  OUTLINED_FUNCTION_97();
}

void assignWithCopy for PromptCompletionEnvelope.SegmentEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *a1 = *a2;
  OUTLINED_FUNCTION_392(a2[1]);
  OUTLINED_FUNCTION_186();
  v4 = a2 + 2;
  v5 = a2[3];
  if (a1[3] >> 60 != 15)
  {
    OUTLINED_FUNCTION_415();
    if (!(!v7 & v6))
    {
      v9 = *v4;
      OUTLINED_FUNCTION_40_1();
      v10 = a1[2];
      v11 = a1[3];
      a1[2] = v9;
      a1[3] = v5;
      outlined consume of Data._Representation(v10, v11);
      goto LABEL_8;
    }
    outlined destroy of Data((uint64_t)(a1 + 2));
LABEL_7:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  OUTLINED_FUNCTION_415();
  if (!v7 & v6)
    goto LABEL_7;
  v8 = *v4;
  OUTLINED_FUNCTION_40_1();
  a1[2] = v8;
  a1[3] = v5;
LABEL_8:
  OUTLINED_FUNCTION_97();
}

void assignWithTake for PromptCompletionEnvelope.SegmentEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2 + 2;
  OUTLINED_FUNCTION_573();
  if (!(!v8 & v7))
  {
    v9 = a2[3];
    if (v9 >> 60 != 15)
    {
      v10 = a1[2];
      a1[2] = *v5;
      a1[3] = v9;
      outlined consume of Data._Representation(v10, v6);
      goto LABEL_6;
    }
    outlined destroy of Data((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v5;
LABEL_6:
  OUTLINED_FUNCTION_97();
}

void *type metadata accessor for PromptCompletionEnvelope.TextContentEnvelope()
{
  return &unk_2519D0D20;
}

void *type metadata accessor for PromptEnvelope.AttachmentContentEnvelope()
{
  return &unk_2519CE1D0;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.CodingKeys, &unk_2519CE0B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.CodingKeys, &unk_2519CE0B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.CodingKeys, &unk_2519CE0B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.CodingKeys, &unk_2519CE0B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.CodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys, &unk_2519CE140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys, &unk_2519CE140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys, &unk_2519CE140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys;
  if (!lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys, &unk_2519CE140);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys and conformance PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageDataEnvelope and conformance ImageDataEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageDataEnvelope, &unk_2519CF468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageDataEnvelope, &unk_2519CF468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageDataEnvelope, &unk_2519CF468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope and conformance ImageDataEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.TextContentEnvelope.CodingKeys, &unk_2519D0C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.TextContentEnvelope.CodingKeys, &unk_2519D0C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.TextContentEnvelope.CodingKeys, &unk_2519D0C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for PromptCompletionEnvelope.TextContentEnvelope.CodingKeys, &unk_2519D0C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PromptCompletionEnvelope.TextContentEnvelope.CodingKeys and conformance PromptCompletionEnvelope.TextContentEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.CodingKeys, &unk_2519CF000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.CodingKeys, &unk_2519CF000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.CodingKeys, &unk_2519CF000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.CodingKeys, &unk_2519CF000);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.CodingKeys and conformance ToolCallEnvelope.KindEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.FunctionCodingKeys, &unk_2519CF090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.FunctionCodingKeys, &unk_2519CF090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.FunctionCodingKeys, &unk_2519CF090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.KindEnvelope.FunctionCodingKeys, &unk_2519CF090);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.KindEnvelope.FunctionCodingKeys and conformance ToolCallEnvelope.KindEnvelope.FunctionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.FunctionEnvelope, &unk_2519CF240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.FunctionEnvelope, &unk_2519CF240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.FunctionEnvelope, &unk_2519CF240);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope and conformance ToolCallEnvelope.FunctionEnvelope);
  }
  return result;
}

void *type metadata accessor for ToolCallEnvelope.KindEnvelope.CodingKeys()
{
  return &unk_2519CF000;
}

void *type metadata accessor for ToolCallEnvelope.KindEnvelope.FunctionCodingKeys()
{
  return &unk_2519CF090;
}

void *type metadata accessor for PromptCompletionEnvelope.TextContentEnvelope.CodingKeys()
{
  return &unk_2519D0C90;
}

void *type metadata accessor for PromptEnvelope.AttachmentContentEnvelope.CodingKeys()
{
  return &unk_2519CE0B0;
}

uint64_t getEnumTagSinglePayload for StreamingRequestPayload.CompletePromptCodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return getEnumTag for Prompt.ToolCall.Kind();
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for StreamingRequestPayload.CompletePromptCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_248B71FC0 + 4 * byte_248BC0434[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_248B71FE0 + 4 * byte_248BC0439[v4]))();
}

_BYTE *sub_248B71FC0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_248B71FE0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248B71FE8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248B71FF0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_248B71FF8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_248B72000(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PromptEnvelope.AttachmentContentEnvelope.ImageCodingKeys()
{
  return &unk_2519CE140;
}

uint64_t destroy for PromptRenderingEnvelope.SourceEnvelope()
{
  OUTLINED_FUNCTION_394();
  return OUTLINED_FUNCTION_248_0();
}

void initializeWithCopy for PromptRenderingEnvelope.SourceEnvelope(_QWORD *a1, _QWORD *a2)
{
  OUTLINED_FUNCTION_464(a1, a2);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_90();
  OUTLINED_FUNCTION_104();
}

void assignWithCopy for PromptRenderingEnvelope.SourceEnvelope(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_264_0(a1, a2);
  OUTLINED_FUNCTION_186();
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_213();
  OUTLINED_FUNCTION_97();
}

void assignWithTake for PromptRenderingEnvelope.SourceEnvelope(_QWORD *a1, _QWORD *a2)
{
  OUTLINED_FUNCTION_345(a1, a2);
  OUTLINED_FUNCTION_534();
  OUTLINED_FUNCTION_104();
}

uint64_t getEnumTagSinglePayload for PromptEnvelope(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
  {
    LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2 >= 0xFFFFFFFF)
      LODWORD(v2) = -1;
  }
  return OUTLINED_FUNCTION_265_0(v2);
}

uint64_t storeEnumTagSinglePayload for PromptEnvelope(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
      return OUTLINED_FUNCTION_299_0(result, a2);
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      return OUTLINED_FUNCTION_299_0(result, a2);
  }
  return result;
}

void *type metadata accessor for ToolCallEnvelope.FunctionEnvelope()
{
  return &unk_2519CF240;
}

void initializeBufferWithCopyOfBuffer for PromptEnvelope.AttachmentContentEnvelope(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_296_0(a1, a2);
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  OUTLINED_FUNCTION_97();
}

void assignWithCopy for PromptEnvelope.AttachmentContentEnvelope(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  OUTLINED_FUNCTION_296_0(a1, a2);
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  outlined consume of Data._Representation(v5, v6);
  OUTLINED_FUNCTION_97();
}

void assignWithTake for PromptEnvelope.AttachmentContentEnvelope(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  outlined consume of Data._Representation(v3, v4);
  OUTLINED_FUNCTION_104();
}

uint64_t getEnumTagSinglePayload for PromptEnvelope.AttachmentContentEnvelope(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (a2)
  {
    if (a2 >= 0xFF && a1[24])
      return OUTLINED_FUNCTION_265_0(*(_DWORD *)a1 + 254);
    v3 = *a1;
    v4 = v3 >= 2;
    v5 = v3 - 2;
    if (!v4)
      return OUTLINED_FUNCTION_265_0(-1);
  }
  else
  {
    v5 = -1;
  }
  return OUTLINED_FUNCTION_265_0(v5);
}

_BYTE *storeEnumTagSinglePayload for PromptEnvelope.AttachmentContentEnvelope(_BYTE *result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      result[24] = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      result[24] = 0;
    if (a2)
      return OUTLINED_FUNCTION_338(result, a2 + 1);
  }
  return result;
}

void *type metadata accessor for ImageDataEnvelope()
{
  return &unk_2519CF468;
}

unint64_t lazy protocol witness table accessor for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageDataEnvelope.CodingKeys, &unk_2519CF3D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageDataEnvelope.CodingKeys, &unk_2519CF3D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageDataEnvelope.CodingKeys, &unk_2519CF3D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageDataEnvelope.CodingKeys, &unk_2519CF3D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageDataEnvelope.CodingKeys and conformance ImageDataEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope and conformance ImageFormatEnvelope()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope, &unk_2519CFA90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope, &unk_2519CFA90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope, &unk_2519CFA90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope and conformance ImageFormatEnvelope);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.FunctionEnvelope.CodingKeys, &unk_2519CF1B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.FunctionEnvelope.CodingKeys, &unk_2519CF1B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.FunctionEnvelope.CodingKeys, &unk_2519CF1B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ToolCallEnvelope.FunctionEnvelope.CodingKeys, &unk_2519CF1B0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolCallEnvelope.FunctionEnvelope.CodingKeys and conformance ToolCallEnvelope.FunctionEnvelope.CodingKeys);
  }
  return result;
}

void *type metadata accessor for ToolCallEnvelope.FunctionEnvelope.CodingKeys()
{
  return &unk_2519CF1B0;
}

void *type metadata accessor for ImageDataEnvelope.CodingKeys()
{
  return &unk_2519CF3D8;
}

void *type metadata accessor for ImageFormatEnvelope()
{
  return &unk_2519CFA90;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.CodingKeys, &unk_2519CF9C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.CodingKeys, &unk_2519CF9C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.CodingKeys, &unk_2519CF9C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.CodingKeys, &unk_2519CF9C0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.CodingKeys and conformance ImageFormatEnvelope.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.JpgCodingKeys, &unk_2519CFA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.JpgCodingKeys, &unk_2519CFA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.JpgCodingKeys, &unk_2519CFA50);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.JpgCodingKeys and conformance ImageFormatEnvelope.JpgCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.PngCodingKeys, &unk_2519CFA70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.PngCodingKeys, &unk_2519CFA70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys;
  if (!lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for ImageFormatEnvelope.PngCodingKeys, &unk_2519CFA70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImageFormatEnvelope.PngCodingKeys and conformance ImageFormatEnvelope.PngCodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StreamingRequestPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return OUTLINED_FUNCTION_265_0(-1);
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 2);
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 2);
    }
    v4 = a1[1];
    if (a1[1])
      return OUTLINED_FUNCTION_265_0((*a1 | (v4 << 8)) - 2);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return OUTLINED_FUNCTION_265_0(v8);
}

uint64_t storeEnumTagSinglePayload for StreamingRequestPayload.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_248B72AF8 + 4 * byte_248BC0443[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)j__OUTLINED_FUNCTION_383_4 + 4 * byte_248BC043E[v4]))();
}

uint64_t sub_248B72B30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x248B72B38);
  return result;
}

uint64_t sub_248B72B40(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 1) = 0;
  if (!a2)
    JUMPOUT(0x248B72B48);
  return OUTLINED_FUNCTION_338();
}

void *type metadata accessor for ImageFormatEnvelope.CodingKeys()
{
  return &unk_2519CF9C0;
}

void *type metadata accessor for ImageFormatEnvelope.PngCodingKeys()
{
  return &unk_2519CFA70;
}

void *type metadata accessor for ImageFormatEnvelope.JpgCodingKeys()
{
  return &unk_2519CFA50;
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void *OUTLINED_FUNCTION_13_2@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_24_2()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_25_0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_28_0()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_34_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_41_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v7 - 200) = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 192) = v2;
  *(_QWORD *)(v7 - 184) = *(_QWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 176) = v0;
  v8 = v3;
  v9 = *(_QWORD *)(v7 - 224);
  *(_QWORD *)(v7 - 168) = *(_QWORD *)(v7 - 296);
  *(_QWORD *)(v7 - 160) = v9;
  *(_QWORD *)(v7 - 152) = v6;
  *(_QWORD *)(v7 - 144) = v8;
  v10 = *(_QWORD *)(v7 - 304);
  *(_QWORD *)(v7 - 136) = v1;
  *(_QWORD *)(v7 - 128) = v10;
  v11 = *(_QWORD *)(v7 - 312);
  *(_QWORD *)(v7 - 120) = v5;
  *(_QWORD *)(v7 - 112) = v11;
  *(_QWORD *)(v7 - 280) = v1;
  *(_QWORD *)(v7 - 104) = *(_QWORD *)(v7 - 272);
  *(_QWORD *)(v7 - 96) = v4;
  return static RequestMetadataEnvelope.== infix(_:_:)((_QWORD *)(v7 - 200), (_QWORD *)(v7 - 144));
}

void *OUTLINED_FUNCTION_42_1@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(a1 + 64));
}

void OUTLINED_FUNCTION_43_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v13 = *(unsigned __int8 *)(a2 + 104);
  *(_DWORD *)(v2 - 84) = v13;
  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(v3, v4, v5, v6, v7, v8, v9, v10, v12, v11, v14, v15, v16, v13);
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t OUTLINED_FUNCTION_48_0()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 296) = v4;
  *(_QWORD *)(v5 - 288) = v1;
  *(_QWORD *)(v5 - 280) = v0;
  *(_QWORD *)(v5 - 256) = v2;
  *(_QWORD *)(v5 - 240) = v3[2];
  *(_QWORD *)(v5 - 264) = v3[3];
  *(_QWORD *)(v5 - 304) = v3[6];
  *(_QWORD *)(v5 - 312) = v3[8];
  *(_QWORD *)(v5 - 272) = v3[9];
  return *(_QWORD *)(v5 - 232);
}

uint64_t OUTLINED_FUNCTION_50_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_52_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_55_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1 + a1;
  v3 = type metadata accessor for Constraints(0);
  return __swift_getEnumTagSinglePayload(v2, 1, v3);
}

uint64_t OUTLINED_FUNCTION_58_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return type metadata accessor for GenerationSchema();
}

uint64_t OUTLINED_FUNCTION_60_2()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_61_2(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_63_1()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_64_2(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  outlined init with copy of DocumentEnvelope(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

void OUTLINED_FUNCTION_65_1(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(a14, a22, v27, a16, a10, v24, v29, a15, v25, v22, v26, v23, v28, a1);
}

void OUTLINED_FUNCTION_72_2()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v0;
  *(_QWORD *)(v1 - 192) = v0[1];
  v3 = v0[2];
  *(_QWORD *)(v1 - 216) = v2;
  *(_QWORD *)(v1 - 208) = v3;
  *(_QWORD *)(v1 - 72) = v0[3];
  *(_QWORD *)(v1 - 224) = v0[4];
  *(_QWORD *)(v1 - 264) = v0[5];
  *(_QWORD *)(v1 - 232) = v0[6];
  *(_QWORD *)(v1 - 280) = v0[7];
  v4 = v0[8];
  *(_QWORD *)(v1 - 200) = v0[9];
  *(_QWORD *)(v1 - 248) = v0[10];
  *(_QWORD *)(v1 - 240) = v4;
  *(_BYTE *)(v1 - 176) = 0;
}

uint64_t OUTLINED_FUNCTION_73_2()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v0 + v2[7]) = *(_QWORD *)(v1 + v2[7]);
  *(_OWORD *)(v0 + v2[8]) = *(_OWORD *)(v1 + v2[8]);
  *(_QWORD *)(v0 + v2[9]) = *(_QWORD *)(v1 + v2[9]);
  v3 = v2[10];
  v4 = v0 + v3;
  v5 = v1 + v3;
  v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v6;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v5 + 48);
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_2()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_OWORD *)(v0 - 152);
  v2 = *(_OWORD *)(v0 - 136);
  v3 = *(_QWORD *)(v0 - 120);
  v4 = *(_QWORD *)(v0 - 96);
  v5 = *(_QWORD *)(v0 - 320);
  *(_QWORD *)v5 = *(_QWORD *)(v0 - 176);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(v0 - 168);
  *(_OWORD *)(v5 + 24) = v1;
  *(_OWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 56) = v3;
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(v0 - 112);
  *(_QWORD *)(v5 + 80) = v4;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_76_2(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_77_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_81_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void OUTLINED_FUNCTION_82_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)(v0 + *(int *)(v2 + 36)) = *(_QWORD *)(v1 + *(int *)(v2 + 36));
  v3 = *(int *)(v2 + 40);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v1 + v3);
  *v4 = *v5;
  v4[1] = v5[1];
  v4[2] = v5[2];
  v4[3] = v5[3];
  v4[4] = v5[4];
  v4[5] = v5[5];
  v4[6] = v5[6];
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_84_1(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)v1 = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v1 + 24) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(v1 + 40) = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(v1 + 56) = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(a1 + 48);
  v2 = *(_QWORD *)(a1 + 64);
  *(_BYTE *)(v1 + 72) = *(_BYTE *)(a1 + 72);
  *(_QWORD *)(v1 + 64) = v2;
}

uint64_t OUTLINED_FUNCTION_86_1()
{
  type metadata accessor for FunctionDescription(0);
  return type metadata accessor for Schema();
}

_QWORD *OUTLINED_FUNCTION_87_0(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_88_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_89_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  _OWORD *v0;
  _OWORD *v1;
  __int128 v2;
  uint64_t v3;
  char *v4;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = *(int *)(type metadata accessor for CompletePromptTemplateRequest(0) + 20);
  v4 = (char *)v0 + v3;
  *(_OWORD *)v4 = *(_OWORD *)((char *)v1 + v3);
  *((_QWORD *)v4 + 2) = *(_QWORD *)((char *)v1 + v3 + 16);
  type metadata accessor for PromptTemplateInfoEnvelope(0);
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_94_1()
{
  _QWORD *v0;
  uint64_t (*v1)(_QWORD);
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2[1];
  *v0 = *v2;
  v0[1] = v3;
  v4 = v2[3];
  v0[2] = v2[2];
  v0[3] = v4;
  return v1(0);
}

uint64_t OUTLINED_FUNCTION_95_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

unint64_t OUTLINED_FUNCTION_97_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 - 176) = *(_QWORD *)(v3 - 216);
  *(_QWORD *)(v3 - 168) = v1;
  v4 = *(_QWORD *)(v3 - 72);
  *(_QWORD *)(v3 - 160) = v0;
  *(_QWORD *)(v3 - 152) = v4;
  v5 = *(_QWORD *)(v3 - 264);
  *(_QWORD *)(v3 - 144) = *(_QWORD *)(v3 - 224);
  *(_QWORD *)(v3 - 136) = v5;
  v6 = *(_QWORD *)(v3 - 280);
  *(_QWORD *)(v3 - 128) = *(_QWORD *)(v3 - 232);
  *(_QWORD *)(v3 - 120) = v6;
  *(_QWORD *)(v3 - 112) = *(_QWORD *)(v3 - 240);
  *(_QWORD *)(v3 - 104) = v2;
  *(_QWORD *)(v3 - 96) = *(_QWORD *)(v3 - 248);
  return lazy protocol witness table accessor for type CountTokensRequest and conformance CountTokensRequest();
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)(v0 + v2[8]) = *(_QWORD *)(v1 + v2[8]);
  *(_QWORD *)(v0 + v2[9]) = *(_QWORD *)(v1 + v2[9]);
  v3 = v2[10];
  v4 = v0 + v3;
  v5 = (__int128 *)(v1 + v3);
  *(_QWORD *)(v4 + 48) = *((_QWORD *)v5 + 6);
  v6 = v5[2];
  v7 = *v5;
  *(_OWORD *)(v4 + 16) = v5[1];
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)v4 = v7;
  return v0;
}

uint64_t OUTLINED_FUNCTION_100_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_101_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, a3, a4);
}

uint64_t OUTLINED_FUNCTION_102_1()
{
  uint64_t v0;
  uint64_t v1;

  return outlined copy of PromptEnvelope?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_105_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  __swift_getEnumTagSinglePayload(v1, 1, a1);
  return __swift_getEnumTagSinglePayload(v2, 1, a1);
}

uint64_t OUTLINED_FUNCTION_107_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_108_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_109_1(uint64_t a1, unint64_t a2)
{
  return outlined consume of Data._Representation(a1, a2);
}

void OUTLINED_FUNCTION_110_1()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of Prompt.Turn.Segment(v1, v0);
}

uint64_t OUTLINED_FUNCTION_113_1()
{
  return swift_getEnumCaseMultiPayload();
}

__n128 OUTLINED_FUNCTION_114_1()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  __n128 result;

  *(_OWORD *)(v2 - 200) = *(_OWORD *)(v2 - 224);
  *(_OWORD *)(v2 - 184) = *(_OWORD *)(v2 - 240);
  *(_OWORD *)(v2 - 168) = *(_OWORD *)(v2 - 256);
  *(_OWORD *)(v2 - 152) = *(_OWORD *)(v2 - 272);
  *(_OWORD *)(v2 - 136) = *(_OWORD *)(v2 - 288);
  result = *(__n128 *)(v2 - 304);
  *(__n128 *)(v2 - 120) = result;
  *(_QWORD *)(v2 - 104) = v1;
  *(_BYTE *)(v2 - 96) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_115_1(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_116_1@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 96) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_120_1(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_124_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_125_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_129_0()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_130_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(0);
}

void OUTLINED_FUNCTION_132_1(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_133_1(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_134_1()
{
  return 0;
}

_QWORD *OUTLINED_FUNCTION_140_1()
{
  _QWORD *v0;

  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

uint64_t OUTLINED_FUNCTION_141_1()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

void *OUTLINED_FUNCTION_142_1@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(a1 + 64));
}

uint64_t OUTLINED_FUNCTION_143_1()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_144_1()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_147_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_148_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 320) = v2;
  *(_QWORD *)(v5 - 296) = v0;
  *(_QWORD *)(v5 - 312) = v3;
  *(_QWORD *)(v5 - 304) = v4;
  *(_QWORD *)(v5 - 72) = v1;
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t OUTLINED_FUNCTION_149_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 - 288) = v3;
  *(_QWORD *)(v5 - 328) = v4;
  return specialized ArraySlice.subscript.getter(1, a2, v2, v2 + 32, 0, (2 * a2) | 1);
}

uint64_t OUTLINED_FUNCTION_150_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

void OUTLINED_FUNCTION_151_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v0 + *(int *)(v2 + 36)) = *(_QWORD *)(v1 + *(int *)(v2 + 36));
  v3 = *(int *)(v2 + 40);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v1 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v5[3];
  v4[2] = v5[2];
  v4[3] = v7;
  v8 = v5[5];
  v4[4] = v5[4];
  v4[5] = v8;
  v4[6] = v5[6];
}

uint64_t OUTLINED_FUNCTION_154_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_155_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_156_0()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_159_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_160_1()
{
  return 0;
}

void OUTLINED_FUNCTION_161_1()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 - 208) = v1[4];
  *(_QWORD *)(v2 - 200) = v0;
  v3 = v1[5];
  *(_QWORD *)(v2 - 224) = v1[6];
  *(_QWORD *)(v2 - 216) = v3;
  v4 = v1[7];
  *(_QWORD *)(v2 - 240) = v1[8];
  *(_QWORD *)(v2 - 232) = v4;
  v5 = v1[9];
  *(_QWORD *)(v2 - 256) = v1[10];
  *(_QWORD *)(v2 - 248) = v5;
  *(_QWORD *)(v2 - 264) = v1[11];
}

void *OUTLINED_FUNCTION_162_1(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t OUTLINED_FUNCTION_165_1(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  *(_QWORD *)(v15 + 80) = a1;
  *(_QWORD *)(v15 + 88) = a2;
  *(_BYTE *)(v15 + 96) = a3;
  *(_QWORD *)(v15 + 104) = a4;
  *(_BYTE *)(v15 + 112) = a5;
  *(_QWORD *)(v15 + 120) = a6;
  *(_BYTE *)(v15 + 128) = a7;
  *(_BYTE *)(v15 + 129) = 2;
  *(_BYTE *)(v15 + 130) = a8;
  return outlined retain of SamplingParametersEnvelope((uint64_t)va);
}

void *OUTLINED_FUNCTION_166_1(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x82uLL);
}

uint64_t OUTLINED_FUNCTION_168_1()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t OUTLINED_FUNCTION_169_1()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_172_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_175_1()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t OUTLINED_FUNCTION_177_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v3 = v1 + a1;
  v4 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v2 - 288) = *(_OWORD *)v3;
  *(_OWORD *)(v2 - 272) = v4;
  *(_OWORD *)(v2 - 256) = *(_OWORD *)(v3 + 32);
  *(_QWORD *)(v2 - 240) = *(_QWORD *)(v3 + 48);
  return outlined retain of RequestMetadataEnvelope(v2 - 288);
}

uint64_t OUTLINED_FUNCTION_178_0()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_179_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_180_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void OUTLINED_FUNCTION_181_1(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of DocumentRegistrationEnvelope(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_183_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_184_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_185_1@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 96) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_188_1()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0Tm(*(_QWORD *)(v0 - 296));
}

uint64_t OUTLINED_FUNCTION_189_1(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_191_0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  outlined init with copy of DocumentEnvelope(v2, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
}

void OUTLINED_FUNCTION_192_1(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;

  outlined init with copy of DocumentEnvelope(v3, (uint64_t)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
}

uint64_t OUTLINED_FUNCTION_193_0()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_194_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_196_0()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_197_1()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_201_1()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_202_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_203_1()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_204_1(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(a1, v1);
}

void OUTLINED_FUNCTION_205_1(void *a1)
{
  free(a1);
}

void OUTLINED_FUNCTION_207_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with take of DocumentRegistrationEnvelope(a1, *(_QWORD *)(v3 - 304), a3);
}

uint64_t OUTLINED_FUNCTION_208_1()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_209_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_210_1()
{
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_211_1()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t v2;

  outlined init with take of DocumentRegistrationEnvelope(v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_212_1()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_213_1()
{
  return Data.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_214_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_215_0()
{
  return type metadata accessor for Schema();
}

uint64_t OUTLINED_FUNCTION_218_1()
{
  return 0;
}

void OUTLINED_FUNCTION_219_1(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_220_0(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_221_1(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_222_1(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 224) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_223_1()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_225_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_226_0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void OUTLINED_FUNCTION_228_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of DocumentEnvelope(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_229_0()
{
  _QWORD *v0;
  uint64_t v1;

  *v0 = v1;
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t OUTLINED_FUNCTION_230_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

void OUTLINED_FUNCTION_231(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(a1, a2, a3, a4, a5, a6, a7, a22, a9, a10, a11, a12, a13, a14);
}

uint64_t OUTLINED_FUNCTION_232_0()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  return swift_bridgeObjectRetain();
}

__n128 OUTLINED_FUNCTION_234_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v2 = *(_QWORD *)(v1 - 96);
  v3 = *(_BYTE *)(v1 - 88);
  result = *(__n128 *)(v1 - 192);
  v5 = *(_OWORD *)(v1 - 176);
  v6 = *(_OWORD *)(v1 - 160);
  v7 = *(_OWORD *)(v1 - 144);
  v8 = *(_OWORD *)(v1 - 128);
  v9 = *(_OWORD *)(v1 - 112);
  *(__n128 *)v0 = result;
  *(_OWORD *)(v0 + 16) = v5;
  *(_OWORD *)(v0 + 32) = v6;
  *(_OWORD *)(v0 + 48) = v7;
  *(_OWORD *)(v0 + 64) = v8;
  *(_OWORD *)(v0 + 80) = v9;
  *(_QWORD *)(v0 + 96) = v2;
  *(_BYTE *)(v0 + 104) = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_235_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_237_0()
{
  return 0;
}

void OUTLINED_FUNCTION_239_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 96) = *(_BYTE *)(a1 + 96);
  *(_QWORD *)(v1 + 104) = *(_QWORD *)(a1 + 104);
  *(_BYTE *)(v1 + 112) = *(_BYTE *)(a1 + 112);
  *(_QWORD *)(v1 + 120) = *(_QWORD *)(a1 + 120);
  *(_WORD *)(v1 + 128) = *(_WORD *)(a1 + 128);
}

uint64_t OUTLINED_FUNCTION_240_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_242_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a16;
}

void OUTLINED_FUNCTION_244_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Locale?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_248_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_249_0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_250_0()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_251_0()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_252_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

uint64_t OUTLINED_FUNCTION_254_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined copy of PromptEnvelope?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_255_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t OUTLINED_FUNCTION_256_0()
{
  return type metadata accessor for URL();
}

_QWORD *OUTLINED_FUNCTION_257()
{
  _QWORD *v0;

  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

void *OUTLINED_FUNCTION_258_0(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

uint64_t OUTLINED_FUNCTION_259_0()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_260_0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_261_0()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_262_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_263_0(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_264_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_265_0@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

void OUTLINED_FUNCTION_266_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of DocumentRegistrationEnvelope(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_267()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_268_0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Prompt.Rendering?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_269_0(uint64_t a1)
{
  uint64_t v1;

  return outlined consume of PromptRenderingEnvelope?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_271_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 408) + 8))(*(_QWORD *)(v0 - 352), *(_QWORD *)(v0 - 400));
}

void OUTLINED_FUNCTION_272_0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Prompt.Rendering?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_275_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_276_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_282_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_283_0()
{
  return type metadata accessor for Prompt();
}

uint64_t OUTLINED_FUNCTION_286_0@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 168) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Prompt.SpecialToken();
}

uint64_t OUTLINED_FUNCTION_287_0()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_288_0(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  outlined init with copy of DocumentEnvelope(v3, (uint64_t)&a3 - ((a2 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
}

uint64_t OUTLINED_FUNCTION_290_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + *(int *)(v2 + 28)) = *(_QWORD *)(v1 + *(int *)(v2 + 28));
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_291_0()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void *OUTLINED_FUNCTION_292_0@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(a1 + 64));
}

uint64_t OUTLINED_FUNCTION_295_0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_296_0(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  return outlined copy of Data._Representation(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t OUTLINED_FUNCTION_299_0(uint64_t result, int a2)
{
  *(_QWORD *)(result + 8) = (a2 - 1);
  return result;
}

void OUTLINED_FUNCTION_300_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of DocumentRegistrationEnvelope(a1, a2, v2);
}

void OUTLINED_FUNCTION_301(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Locale?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_302_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_303_0()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_305_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of DocumentEnvelope(a1, v3, a3);
}

void OUTLINED_FUNCTION_306_0(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(a1, v1);
}

uint64_t OUTLINED_FUNCTION_307()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0Tm(v0);
}

void OUTLINED_FUNCTION_308_0()
{
  Swift::UInt v0;

  Hasher._combine(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_310_0()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data._Representation(v1, v0);
}

uint64_t OUTLINED_FUNCTION_311(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_312_0()
{
  uint64_t v0;

  return v0;
}

void *OUTLINED_FUNCTION_313_0(uint64_t a1, uint64_t a2, size_t a3)
{
  void *v3;
  const void *v4;

  return memcpy(v3, v4, a3);
}

void OUTLINED_FUNCTION_314_0()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(v0, v1);
}

void OUTLINED_FUNCTION_315_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of DocumentEnvelope(v3, v4, a3);
}

void OUTLINED_FUNCTION_316_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of DocumentEnvelope(v3, v4, a3);
}

void OUTLINED_FUNCTION_317()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(v0, v1);
}

uint64_t OUTLINED_FUNCTION_318()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_319()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_320()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_323()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v2, v1, v0);
}

_QWORD *OUTLINED_FUNCTION_326()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

void *OUTLINED_FUNCTION_328(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x88uLL);
}

uint64_t OUTLINED_FUNCTION_329()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_331()
{
  return type metadata accessor for PromptCompletion(0);
}

uint64_t OUTLINED_FUNCTION_332()
{
  return type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
}

uint64_t OUTLINED_FUNCTION_333()
{
  return type metadata accessor for StreamingRequest(0);
}

uint64_t OUTLINED_FUNCTION_334()
{
  return type metadata accessor for ToolType(0);
}

uint64_t OUTLINED_FUNCTION_335()
{
  return type metadata accessor for StreamingRequestPayload(0);
}

uint64_t OUTLINED_FUNCTION_336()
{
  return type metadata accessor for DocumentResource();
}

uint64_t OUTLINED_FUNCTION_337()
{
  return type metadata accessor for StreamingRequest(0);
}

_BYTE *OUTLINED_FUNCTION_338@<X0>(_BYTE *result@<X0>, char a2@<W8>)
{
  *result = a2;
  return result;
}

void OUTLINED_FUNCTION_339(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  unint64_t v28;

  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(a1, a28, a3, a4, a5, v28, a26, a27, a9, a10, a11, a12, a13, a14);
}

void OUTLINED_FUNCTION_340(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of DocumentRegistrationEnvelope(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_341()
{
  uint64_t v0;
  uint64_t v1;

  return v0 + *(int *)(v1 + 24);
}

uint64_t OUTLINED_FUNCTION_344()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_345(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_346()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_348()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
  *(_QWORD *)(v0 - 104) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_352()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

__n128 OUTLINED_FUNCTION_353()
{
  uint64_t v0;

  return *(__n128 *)(v0 - 304);
}

uint64_t OUTLINED_FUNCTION_354()
{
  return 0;
}

void OUTLINED_FUNCTION_355()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(int *)(v2 + 40);
  v4 = (_QWORD *)(v0 + v3);
  v5 = (_QWORD *)(v1 + v3);
  v6 = v5[1];
  *v4 = *v5;
  v4[1] = v6;
  v7 = v5[3];
  v4[2] = v5[2];
  v4[3] = v7;
}

uint64_t OUTLINED_FUNCTION_356()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_357()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_360()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_361()
{
  PromptEnvelope.unseal()();
}

uint64_t OUTLINED_FUNCTION_362()
{
  uint64_t v0;

  return RequestMetadataEnvelope.hash(into:)(v0);
}

void OUTLINED_FUNCTION_363(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  outlined copy of PromptCompletionStreamElementEnvelope.Envelope(a1, a2, a3, a4, v26, v27, a26, v28, a9, a10, a11, a12, a13, a14);
}

uint64_t OUTLINED_FUNCTION_364()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_367()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return specialized ArraySlice.subscript.getter(a1, a2, a3, a4, 0, a6);
}

uint64_t OUTLINED_FUNCTION_369()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_371()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_372()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_375(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_376()
{
  return type metadata accessor for CompletePromptRequest(0);
}

uint64_t OUTLINED_FUNCTION_377()
{
  return type metadata accessor for PromptTemplateInfoEnvelope(0);
}

uint64_t OUTLINED_FUNCTION_378()
{
  return type metadata accessor for DecodingError();
}

uint64_t OUTLINED_FUNCTION_379@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_380()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_381(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_382(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_383(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_385()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_386()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_387()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_388()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_389()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  v0[1] = v1[1];
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_390()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_391@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a2 = v2;
  a2[1] = v5;
  a2[2] = v3;
  a2[3] = v7;
  a2[4] = v4;
  a2[5] = a1;
  a2[6] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_392(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_393(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t OUTLINED_FUNCTION_394()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_395()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_396()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_397@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return specialized PromptCompletionStreamElementEnvelope.Envelope.init(sealing:)(v2, v0, v1, v3 - 160);
}

uint64_t OUTLINED_FUNCTION_399()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_400()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_401()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

void OUTLINED_FUNCTION_403(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with copy of DocumentEnvelope(a1, v3, a3);
}

void OUTLINED_FUNCTION_404(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_405()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_406()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  outlined copy of Data?(v3, v2);
  outlined copy of Data?(v1, v0);
  return v3;
}

uint64_t OUTLINED_FUNCTION_407()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t result;

  *v0 = *v1;
  result = v1[1];
  v0[1] = result;
  v0[2] = v1[2];
  return result;
}

void *OUTLINED_FUNCTION_408()
{
  size_t v0;

  return malloc(v0);
}

uint64_t OUTLINED_FUNCTION_409()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_412()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t OUTLINED_FUNCTION_413(uint64_t a1)
{
  unint64_t v1;

  return outlined consume of Data?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_414()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0Tm(v0);
}

uint64_t OUTLINED_FUNCTION_416(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_417(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of DocumentEnvelope(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_418()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_421()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  outlined init with take of DocumentRegistrationEnvelope(v1, *(_QWORD *)(v2 - 248), v0);
}

uint64_t OUTLINED_FUNCTION_422()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

void OUTLINED_FUNCTION_423()
{
  JUMPOUT(0x2495A59A8);
}

uint64_t OUTLINED_FUNCTION_424()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_425()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_426()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of PromptEnvelope?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_427()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_430()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_431()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of FinishReason(v0, v1);
}

uint64_t OUTLINED_FUNCTION_432()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of FinishReason(v0, v1);
}

uint64_t OUTLINED_FUNCTION_433()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_434()
{
  return type metadata accessor for CompletePromptTemplateRequest(0);
}

uint64_t OUTLINED_FUNCTION_435()
{
  return type metadata accessor for Constraints(0);
}

uint64_t OUTLINED_FUNCTION_436()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t OUTLINED_FUNCTION_437()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

void OUTLINED_FUNCTION_439(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_440(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_441(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_442(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_443(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_444()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_445()
{
  return 0;
}

void *OUTLINED_FUNCTION_447(uint64_t a1)
{
  void *v1;
  const void *v2;

  return memcpy(v1, v2, *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

void OUTLINED_FUNCTION_448(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 2 * (a1 / v3);
}

void OUTLINED_FUNCTION_449()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
}

void OUTLINED_FUNCTION_451(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of Locale?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_452()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_453(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return a21;
}

uint64_t OUTLINED_FUNCTION_455()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 24) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_456()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_458(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

void OUTLINED_FUNCTION_460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v31 - 184) = v29;
  *(_QWORD *)(v31 - 176) = a28;
  *(_QWORD *)(v31 - 168) = v28;
  *(_QWORD *)(v31 - 160) = v30;
}

void *OUTLINED_FUNCTION_462(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t OUTLINED_FUNCTION_463()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_464(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v4;

  result = a2[1];
  *a1 = *a2;
  a1[1] = result;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  return result;
}

void OUTLINED_FUNCTION_466()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 208) = v0;
}

void OUTLINED_FUNCTION_467(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 288) = a1;
}

unint64_t OUTLINED_FUNCTION_471@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + v1) = a1;
  *(_BYTE *)(v3 - 66) = 6;
  return lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
}

uint64_t OUTLINED_FUNCTION_472()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_473(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 344) = a1;
}

uint64_t OUTLINED_FUNCTION_474()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_476(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Locale?(a1, v1);
}

void OUTLINED_FUNCTION_477(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of Prompt.Rendering?(a1, v3, a3);
}

void OUTLINED_FUNCTION_479(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 273) = a1;
}

uint64_t OUTLINED_FUNCTION_480()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_482()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_484()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_485()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v0, v1, v2);
}

void OUTLINED_FUNCTION_486()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 136);
  *(_BYTE *)(v0 + 144) = *(_BYTE *)(v1 + 144);
  *(_QWORD *)(v0 + 136) = v2;
}

uint64_t OUTLINED_FUNCTION_487()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_488()
{
  uint64_t v0;

  specialized static Array<A>.== infix(_:_:)(*(_QWORD *)(v0 - 256), *(_QWORD *)(v0 - 264));
}

uint64_t OUTLINED_FUNCTION_489()
{
  return swift_bridgeObjectRelease();
}

BOOL OUTLINED_FUNCTION_491@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL OUTLINED_FUNCTION_492@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

BOOL OUTLINED_FUNCTION_493@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_495()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_496()
{
  return type metadata accessor for ToolDescriptionEnvelope.ToolTypeEnvelope(0);
}

uint64_t OUTLINED_FUNCTION_497()
{
  return type metadata accessor for DocumentRegistrationEnvelope(0);
}

uint64_t OUTLINED_FUNCTION_498()
{
  return type metadata accessor for ToolType(0);
}

uint64_t OUTLINED_FUNCTION_501(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
}

uint64_t OUTLINED_FUNCTION_502()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_503(uint64_t a1)
{
  lazy protocol witness table accessor for type DocumentEnvelope and conformance DocumentEnvelope(a1);
}

void OUTLINED_FUNCTION_505(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of DocumentRegistrationEnvelope(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_506()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_507()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_508()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_510()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_511()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_512()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_513()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v2, v0, v1);
}

void OUTLINED_FUNCTION_516(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Locale?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_517()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_520()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_521()
{
  unint64_t v0;
  uint64_t v1;

  outlined copy of FinishReason(v1, v0);
  return outlined copy of FinishReason(v1, v0);
}

uint64_t OUTLINED_FUNCTION_522()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_523()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_525()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

__n128 OUTLINED_FUNCTION_526()
{
  uint64_t v0;
  uint64_t v1;

  return *(__n128 *)(v0 + *(int *)(v1 + 40));
}

BOOL OUTLINED_FUNCTION_527(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void *OUTLINED_FUNCTION_529(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  return outlined init with take of PromptCompletionStreamElementEnvelope.Envelope(v9, &a9);
}

uint64_t OUTLINED_FUNCTION_530()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_532(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of PromptCompletionEvent(a1, v1 - 200);
}

void OUTLINED_FUNCTION_533(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Locale?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 24) = v2;
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_535@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  *(_BYTE *)(v1 - 65) = 1;
  return lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
}

void OUTLINED_FUNCTION_539()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 64);
  *(_BYTE *)(v0 + 72) = *(_BYTE *)(v1 + 72);
  *(_QWORD *)(v0 + 64) = v2;
}

uint64_t OUTLINED_FUNCTION_541(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(0);
}

uint64_t OUTLINED_FUNCTION_542()
{
  return type metadata accessor for PromptEnvelope.DelimiterEnvelope(0);
}

uint64_t OUTLINED_FUNCTION_546@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

uint64_t OUTLINED_FUNCTION_547(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return static RequestMetadataEnvelope.== infix(_:_:)(&a9, &a17);
}

uint64_t OUTLINED_FUNCTION_548()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_550()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_551()
{
  uint64_t v0;

  return v0;
}

unint64_t OUTLINED_FUNCTION_552()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 1;
  return lazy protocol witness table accessor for type Constraints.GrammarCodingKeys and conformance Constraints.GrammarCodingKeys();
}

unint64_t OUTLINED_FUNCTION_553()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 152) = 1;
  return lazy protocol witness table accessor for type StreamingRequest.CompletePromptTemplateCodingKeys and conformance StreamingRequest.CompletePromptTemplateCodingKeys();
}

unint64_t OUTLINED_FUNCTION_554()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return lazy protocol witness table accessor for type RequestMetadataEnvelope and conformance RequestMetadataEnvelope();
}

unint64_t OUTLINED_FUNCTION_555()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return lazy protocol witness table accessor for type StreamingRequestPayload.CompletePromptTemplateCodingKeys and conformance StreamingRequestPayload.CompletePromptTemplateCodingKeys();
}

unint64_t OUTLINED_FUNCTION_556()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 176) = 1;
  return lazy protocol witness table accessor for type OneShotRequest.CompletePromptCodingKeys and conformance OneShotRequest.CompletePromptCodingKeys();
}

unint64_t OUTLINED_FUNCTION_557()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 176) = 1;
  return lazy protocol witness table accessor for type RequestPayload.CompletePromptCodingKeys and conformance RequestPayload.CompletePromptCodingKeys();
}

unint64_t OUTLINED_FUNCTION_558()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 1;
  return lazy protocol witness table accessor for type ToolChoiceEnvelope.AutomaticCodingKeys and conformance ToolChoiceEnvelope.AutomaticCodingKeys();
}

uint64_t OUTLINED_FUNCTION_560()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_562()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_563()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

char *OUTLINED_FUNCTION_564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  return &a29;
}

uint64_t OUTLINED_FUNCTION_565()
{
  char v0;

  return v0 & 1;
}

uint64_t OUTLINED_FUNCTION_566()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_568()
{
  __break(1u);
}

void OUTLINED_FUNCTION_571()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 104);
  *(_QWORD *)(v0 - 112) = *(_QWORD *)(v0 - 112);
  *(_QWORD *)(v0 - 104) = v1;
}

uint64_t OUTLINED_FUNCTION_574(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return PromptTemplateInfo.locale.getter();
}

void OUTLINED_FUNCTION_575()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 176) = v0;
}

uint64_t OUTLINED_FUNCTION_576()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_577()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *v0 = v1;
  v0[1] = v2;
  v0[2] = v3;
  v0[3] = v4;
  v0[4] = v5;
  v0[5] = v6;
  v0[6] = v7;
  v0[7] = v8;
}

uint64_t OUTLINED_FUNCTION_578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  return a4(319);
}

void OUTLINED_FUNCTION_580(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 328) = a1;
}

uint64_t OUTLINED_FUNCTION_583(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  return RequestMetadataEnvelope.hash(into:)((uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_584(uint64_t a1, ...)
{
  uint64_t (*v1)(char *);
  va_list va;

  va_start(va, a1);
  return v1(va);
}

void OUTLINED_FUNCTION_586(__n128 a1, __n128 a2)
{
  __n128 *v2;
  unint64_t v3;
  unsigned __int8 v4;

  v2[4] = a2;
  v2[5] = a1;
  v2[6].n128_u64[0] = v3;
  v2[6].n128_u8[8] = v4;
}

uint64_t OUTLINED_FUNCTION_589@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

__n128 OUTLINED_FUNCTION_591()
{
  uint64_t v0;

  return *(__n128 *)(v0 - 336);
}

void OUTLINED_FUNCTION_594(__n128 a1)
{
  uint64_t v1;

  *(__n128 *)(v1 - 272) = a1;
}

void OUTLINED_FUNCTION_598()
{
  static CompletePromptTemplateRequest.== infix(_:_:)();
}

void OUTLINED_FUNCTION_599()
{
  static CompletePromptRequest.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return a24;
}

uint64_t OUTLINED_FUNCTION_601()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0Tm(*(_QWORD *)(v0 + 120));
}

uint64_t OUTLINED_FUNCTION_602()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_603()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

unint64_t OUTLINED_FUNCTION_604()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 5;
  return lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]();
}

uint64_t OUTLINED_FUNCTION_605()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(v1 + 80);
  return swift_bridgeObjectRetain();
}

__n128 OUTLINED_FUNCTION_606()
{
  __n128 *v0;

  return v0[7];
}

uint64_t OUTLINED_FUNCTION_607()
{
  uint64_t v0;

  return v0 + 32;
}

unint64_t OUTLINED_FUNCTION_608()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 3;
  return lazy protocol witness table accessor for type ToolChoiceEnvelope.FunctionCodingKeys and conformance ToolChoiceEnvelope.FunctionCodingKeys();
}

void OUTLINED_FUNCTION_609(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Locale?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_611()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

void OUTLINED_FUNCTION_612(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  outlined assign with take of PromptTemplateInfoEnvelope(v9, a9, a3);
}

void OUTLINED_FUNCTION_613(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Prompt.Turn.Segment(v2, a2);
}

void OUTLINED_FUNCTION_614()
{
  void *v0;

  free(v0);
}

void OUTLINED_FUNCTION_615(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  specialized static Array<A>.== infix(_:_:)(v20, *(_QWORD *)(v21 - 240), a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

uint64_t OUTLINED_FUNCTION_616()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_617()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_618()
{
  unint64_t v0;
  uint64_t v1;

  return outlined copy of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_619()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_620()
{
  void *v0;

  free(v0);
}

uint64_t OUTLINED_FUNCTION_621(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 152))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_623()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_625()
{
  uint64_t v0;

  if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    return v0;
  else
    return 0;
}

void OUTLINED_FUNCTION_626(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  outlined consume of PromptCompletionStreamElementEnvelope.Envelope(a1, a2, a3, a4, a5, a6, v15, v14, a9, a10, a11, a12, a13, a14);
}

__n128 OUTLINED_FUNCTION_627()
{
  __n128 *v0;

  return v0[4];
}

uint64_t OUTLINED_FUNCTION_629(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_630(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  outlined init with take of DocumentRegistrationEnvelope(a1, *(_QWORD *)(v3 - 72), a3);
}

uint64_t OUTLINED_FUNCTION_631()
{
  uint64_t *v0;

  return outlined consume of PromptEnvelope?(*v0, v0[1]);
}

void OUTLINED_FUNCTION_632()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  outlined destroy of Prompt.Turn.Segment(v0, v1);
}

void OUTLINED_FUNCTION_633()
{
  specialized Array<A>.hash(into:)();
}

void OUTLINED_FUNCTION_634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  outlined destroy of Prompt.Turn.Segment(v4, a4);
}

void OUTLINED_FUNCTION_635(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of DocumentRegistrationEnvelope(v3, *(_QWORD *)(v4 - 232), a3);
}

void OUTLINED_FUNCTION_636()
{
  CompletePromptRequest.hash(into:)();
}

void OUTLINED_FUNCTION_637()
{
  CompletePromptTemplateRequest.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_638()
{
  uint64_t v0;

  return PromptRenderingEnvelope.hash(into:)(v0);
}

uint64_t OUTLINED_FUNCTION_639()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_640()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_641(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with copy of DocumentEnvelope(v3, v4, a3);
}

void OUTLINED_FUNCTION_642()
{
  specialized Array<A>.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_643(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_644(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, v3, v2);
}

void OUTLINED_FUNCTION_645(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with take of DocumentRegistrationEnvelope(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_646()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_647()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  outlined destroy of Prompt.Turn.Segment(v1, v0);
}

uint64_t OUTLINED_FUNCTION_648()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_649()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_650()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_651()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_652()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_654()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_655()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v1, v2);
}

void *OUTLINED_FUNCTION_656()
{
  size_t v0;

  return malloc(v0);
}

void OUTLINED_FUNCTION_657(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  outlined init with take of DocumentRegistrationEnvelope(v4, v3, a3);
}

void OUTLINED_FUNCTION_658()
{
  SamplingParametersEnvelope.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_659()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_661()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of FinishReason(v1, v0);
}

uint64_t OUTLINED_FUNCTION_662()
{
  unint64_t v0;
  uint64_t v1;

  return outlined consume of FinishReason?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_663()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_664@<X0>(__int16 a1@<W8>)
{
  uint64_t v1;

  *(_WORD *)(v1 + 160) = a1;
  return type metadata accessor for CompletePromptRequest(0);
}

void OUTLINED_FUNCTION_666(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  outlined init with copy of DocumentEnvelope(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_668()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

unint64_t OUTLINED_FUNCTION_669()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(v0, v1);
  return lazy protocol witness table accessor for type CompletePromptRequest.CodingKeys and conformance CompletePromptRequest.CodingKeys();
}

unint64_t OUTLINED_FUNCTION_670()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(v0, v1);
  return lazy protocol witness table accessor for type RequestPayload.CodingKeys and conformance RequestPayload.CodingKeys();
}

unint64_t OUTLINED_FUNCTION_671()
{
  _QWORD *v0;
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(v0, v1);
  return lazy protocol witness table accessor for type OneShotRequest.CodingKeys and conformance OneShotRequest.CodingKeys();
}

void OUTLINED_FUNCTION_673()
{
  JUMPOUT(0x2495A740CLL);
}

uint64_t OUTLINED_FUNCTION_674()
{
  uint64_t v0;
  unint64_t v1;

  return outlined copy of FinishReason(v0, v1);
}

uint64_t OUTLINED_FUNCTION_677()
{
  return Overridable<A>.init(key:)();
}

uint64_t OUTLINED_FUNCTION_678()
{
  return 0;
}

void OUTLINED_FUNCTION_679(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 128) = (char *)&a9 - v9;
}

uint64_t OUTLINED_FUNCTION_680()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_682()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_683()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t OUTLINED_FUNCTION_684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v1 + 48);
  result = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v0 + 56) = result;
  return result;
}

void *OUTLINED_FUNCTION_687(uint64_t a1)
{
  return malloc(*(_QWORD *)(*(_QWORD *)(a1 - 8) + 64));
}

unint64_t OUTLINED_FUNCTION_688()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 2;
  return lazy protocol witness table accessor for type ToolChoiceEnvelope.RequiredCodingKeys and conformance ToolChoiceEnvelope.RequiredCodingKeys();
}

unint64_t OUTLINED_FUNCTION_689()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 152) = 2;
  return lazy protocol witness table accessor for type StreamingRequest.RegisterDocumentCodingKeys and conformance StreamingRequest.RegisterDocumentCodingKeys();
}

unint64_t OUTLINED_FUNCTION_690()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 2;
  return lazy protocol witness table accessor for type Constraints.PartialGrammarCodingKeys and conformance Constraints.PartialGrammarCodingKeys();
}

unint64_t OUTLINED_FUNCTION_691()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 176) = 2;
  return lazy protocol witness table accessor for type OneShotRequest.CompletePromptTemplateCodingKeys and conformance OneShotRequest.CompletePromptTemplateCodingKeys();
}

unint64_t OUTLINED_FUNCTION_692()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 176) = 2;
  return lazy protocol witness table accessor for type RequestPayload.CompletePromptTemplateCodingKeys and conformance RequestPayload.CompletePromptTemplateCodingKeys();
}

void OUTLINED_FUNCTION_693(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  ModelInformationEnvelope.hash(into:)(a1, a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t j;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(result + 56);
  v30 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & v4;
  v31 = (unint64_t)(v5 + 63) >> 6;
  v8 = a2 + 56;
  if ((v6 & v4) == 0)
    goto LABEL_8;
LABEL_7:
  v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v32 = v3;
  for (i = v9 | (v3 << 6); ; i = __clz(__rbit64(v12)) + (v13 << 6))
  {
    v15 = result;
    v16 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * i);
    v18 = *v16;
    v17 = v16[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v19 = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(a2 + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
      goto LABEL_39;
    v22 = *(_QWORD *)(a2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = *v23 == v18 && v23[1] == v17;
    if (!v24 && (OUTLINED_FUNCTION_2_5() & 1) == 0)
    {
      v25 = ~v20;
      for (j = v21 + 1; ; j = v27 + 1)
      {
        v27 = j & v25;
        if (((*(_QWORD *)(v8 + (((j & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v22 + 16 * v27);
        v29 = *v28 == v18 && v28[1] == v17;
        if (v29 || (OUTLINED_FUNCTION_2_5() & 1) != 0)
          goto LABEL_28;
      }
LABEL_39:
      OUTLINED_FUNCTION_39_0();
      return 0;
    }
LABEL_28:
    OUTLINED_FUNCTION_39_0();
    result = v15;
    v3 = v32;
    if (v7)
      goto LABEL_7;
LABEL_8:
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v31)
      return 1;
    v12 = *(_QWORD *)(v30 + 8 * v11);
    v13 = v3 + 1;
    if (!v12)
    {
      v13 = v3 + 2;
      if (v3 + 2 >= v31)
        return 1;
      v12 = *(_QWORD *)(v30 + 8 * v13);
      if (!v12)
      {
        v13 = v3 + 3;
        if (v3 + 3 >= v31)
          return 1;
        v12 = *(_QWORD *)(v30 + 8 * v13);
        if (!v12)
          break;
      }
    }
LABEL_21:
    v7 = (v12 - 1) & v12;
    v32 = v13;
  }
  v14 = v3 + 4;
  if (v3 + 4 >= v31)
    return 1;
  v12 = *(_QWORD *)(v30 + 8 * v14);
  if (v12)
  {
    v13 = v3 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v31)
      return 1;
    v12 = *(_QWORD *)(v30 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_21;
  }
LABEL_42:
  __break(1u);
  return result;
}

void SamplingParameters.strategy.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t SamplingParameters.strategy.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t (*SamplingParameters.strategy.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.temperature.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SamplingParameters.temperature.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.temperature.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.frequencyPenalty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t SamplingParameters.frequencyPenalty.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.frequencyPenalty.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.lengthPenalty.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t SamplingParameters.lengthPenalty.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = result;
  *(_BYTE *)(v2 + 56) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.lengthPenalty.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.maximumTokens.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t SamplingParameters.maximumTokens.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.maximumTokens.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.stopSequences.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SamplingParameters.stopSequences.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*SamplingParameters.stopSequences.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.randomSeed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 88);
}

uint64_t SamplingParameters.randomSeed.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = result;
  *(_BYTE *)(v2 + 96) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.randomSeed.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.timeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t SamplingParameters.timeout.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = result;
  *(_BYTE *)(v2 + 112) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.timeout.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.promptLookupDraftSteps.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 120);
}

uint64_t SamplingParameters.promptLookupDraftSteps.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = result;
  *(_BYTE *)(v2 + 128) = a2 & 1;
  return result;
}

uint64_t (*SamplingParameters.promptLookupDraftSteps.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.speculativeSampling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t SamplingParameters.speculativeSampling.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 129) = result;
  return result;
}

uint64_t (*SamplingParameters.speculativeSampling.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.tokenHealing.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t SamplingParameters.tokenHealing.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 130) = result;
  return result;
}

uint64_t (*SamplingParameters.tokenHealing.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SamplingParameters.init(strategy:temperature:frequencyPenalty:lengthPenalty:maximumTokens:stopSequences:randomSeed:timeout:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;
  char v16;
  uint64_t result;

  v15 = *a1;
  v16 = *((_BYTE *)a1 + 8);
  result = a5 & 1;
  *(_QWORD *)a9 = v15;
  *(_BYTE *)(a9 + 8) = v16;
  *(_QWORD *)(a9 + 16) = a2;
  *(_BYTE *)(a9 + 24) = a3 & 1;
  *(_QWORD *)(a9 + 32) = a4;
  *(_BYTE *)(a9 + 40) = a5 & 1;
  *(_QWORD *)(a9 + 48) = a6;
  *(_BYTE *)(a9 + 56) = a7 & 1;
  *(_QWORD *)(a9 + 64) = a8;
  *(_BYTE *)(a9 + 72) = a10 & 1;
  *(_QWORD *)(a9 + 80) = a11;
  *(_QWORD *)(a9 + 88) = a12;
  *(_BYTE *)(a9 + 96) = a13 & 1;
  *(_QWORD *)(a9 + 104) = a14;
  *(_BYTE *)(a9 + 112) = a15 & 1;
  *(_QWORD *)(a9 + 120) = 0;
  *(_BYTE *)(a9 + 128) = 1;
  *(_WORD *)(a9 + 129) = 514;
  return result;
}

void SamplingParameters.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  Swift::UInt64 v5;
  char v6;
  Swift::UInt64 v7;
  int v8;
  uint64_t v9;
  Swift::UInt v10;
  int v11;
  int v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  int v15;
  int v16;
  Swift::UInt v17;
  Swift::UInt v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  Swift::UInt64 v21;
  Swift::UInt8 v22;
  Swift::UInt8 v23;
  Swift::UInt v24;
  Swift::UInt64 v25;
  Swift::UInt v26;
  Swift::UInt v27;
  Swift::UInt64 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_BYTE *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(unsigned __int8 *)(v2 + 40);
  v25 = *(_QWORD *)(v2 + 48);
  v26 = *(_QWORD *)(v2 + 64);
  v29 = *(unsigned __int8 *)(v2 + 56);
  v30 = *(unsigned __int8 *)(v2 + 72);
  v9 = *(_QWORD *)(v2 + 80);
  v27 = *(_QWORD *)(v2 + 88);
  v28 = *(_QWORD *)(v2 + 104);
  v31 = *(unsigned __int8 *)(v2 + 96);
  v32 = *(unsigned __int8 *)(v2 + 112);
  v10 = *(_QWORD *)(v2 + 120);
  v33 = *(unsigned __int8 *)(v2 + 128);
  v11 = *(unsigned __int8 *)(v2 + 129);
  v12 = *(unsigned __int8 *)(v2 + 130);
  if (v4 == 255)
  {
    OUTLINED_FUNCTION_66_0();
    if ((v6 & 1) == 0)
      goto LABEL_3;
  }
  else
  {
    v24 = *(_QWORD *)(v2 + 120);
    v15 = *(unsigned __int8 *)(v2 + 129);
    v16 = *(unsigned __int8 *)(v2 + 130);
    v17 = *(_QWORD *)v2;
    OUTLINED_FUNCTION_62_0();
    if (v4)
    {
      if (v4 == 1)
      {
        Hasher._combine(_:)(2uLL);
        v18 = v17;
      }
      else
      {
        v18 = 0;
      }
      Hasher._combine(_:)(v18);
    }
    else
    {
      Hasher._combine(_:)(1uLL);
      if ((v17 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v19 = v17;
      else
        v19 = 0;
      Hasher._combine(_:)(v19);
    }
    v12 = v16;
    v11 = v15;
    v10 = v24;
    if ((v6 & 1) == 0)
    {
LABEL_3:
      OUTLINED_FUNCTION_62_0();
      if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v13 = v5;
      else
        v13 = 0;
      Hasher._combine(_:)(v13);
      if (!v8)
        goto LABEL_7;
      goto LABEL_22;
    }
  }
  OUTLINED_FUNCTION_66_0();
  if (!v8)
  {
LABEL_7:
    OUTLINED_FUNCTION_62_0();
    if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v14 = v7;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
    goto LABEL_23;
  }
LABEL_22:
  OUTLINED_FUNCTION_66_0();
LABEL_23:
  if (v29)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    if ((v25 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v20 = v25;
    else
      v20 = 0;
    Hasher._combine(_:)(v20);
  }
  if (v30)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    Hasher._combine(_:)(v26);
  }
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v9);
  OUTLINED_FUNCTION_39_0();
  if (v31)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    Hasher._combine(_:)(v27);
  }
  if (v32)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    if ((v28 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v21 = v28;
    else
      v21 = 0;
    Hasher._combine(_:)(v21);
  }
  if (v33)
  {
    OUTLINED_FUNCTION_66_0();
  }
  else
  {
    OUTLINED_FUNCTION_62_0();
    Hasher._combine(_:)(v10);
  }
  if (v11 == 2)
  {
    v22 = 0;
  }
  else
  {
    v22 = v11 & 1;
    OUTLINED_FUNCTION_62_0();
  }
  Hasher._combine(_:)(v22);
  if (v12 == 2)
  {
    v23 = 0;
  }
  else
  {
    v23 = v12 & 1;
    OUTLINED_FUNCTION_62_0();
  }
  Hasher._combine(_:)(v23);
}

uint64_t static SamplingParameters.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4;
  double v5;
  char v6;
  double v7;
  char v8;
  double v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  double v16;
  char v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;
  double v23;
  int v24;
  double v25;
  int v26;
  double v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  double v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  int v44;
  uint64_t v45;
  int v46;
  double v47;
  double v48;
  BOOL v49;
  char v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  char v59;
  char v60;
  char v61;
  _BOOL4 v62;
  int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;

  v4 = *(unsigned __int8 *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *(double *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v9 = *(double *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  v12 = *(_BYTE *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_BYTE *)(a1 + 96);
  v16 = *(double *)(a1 + 104);
  v17 = *(_BYTE *)(a1 + 112);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_BYTE *)(a1 + 128);
  v20 = *(unsigned __int8 *)(a1 + 129);
  v21 = *(unsigned __int8 *)(a1 + 130);
  v22 = *(unsigned __int8 *)(a2 + 8);
  v23 = *(double *)(a2 + 16);
  v24 = *(unsigned __int8 *)(a2 + 24);
  v25 = *(double *)(a2 + 32);
  v26 = *(unsigned __int8 *)(a2 + 40);
  v27 = *(double *)(a2 + 48);
  v28 = *(unsigned __int8 *)(a2 + 56);
  v29 = *(_QWORD *)(a2 + 64);
  v30 = *(unsigned __int8 *)(a2 + 72);
  v31 = *(_QWORD *)(a2 + 80);
  v32 = *(_QWORD *)(a2 + 88);
  v33 = *(unsigned __int8 *)(a2 + 96);
  v34 = *(double *)(a2 + 104);
  v67 = *(unsigned __int8 *)(a2 + 112);
  v35 = *(_QWORD *)(a2 + 120);
  v36 = *(unsigned __int8 *)(a2 + 128);
  v37 = *(unsigned __int8 *)(a2 + 129);
  v38 = *(unsigned __int8 *)(a2 + 130);
  if (v4 == 255)
  {
    if (v22 != 255)
      return 0;
  }
  else
  {
    if (v22 == 255)
      return 0;
    v65 = v13;
    v39 = *(_BYTE *)(a1 + 96);
    v40 = *(_QWORD *)(a2 + 120);
    v41 = *(_QWORD *)(a1 + 88);
    v42 = *(_BYTE *)(a1 + 112);
    v43 = *(_BYTE *)(a1 + 128);
    v44 = *(unsigned __int8 *)(a2 + 129);
    v45 = *(_QWORD *)(a1 + 120);
    v46 = *(unsigned __int8 *)(a1 + 129);
    v47 = *(double *)a1;
    v48 = *(double *)a2;
    if (v4)
    {
      if (v4 == 1)
      {
        v49 = v22 == 1 && *(_QWORD *)&v47 == *(_QWORD *)&v48;
        v20 = v46;
        v18 = v45;
        v37 = *(unsigned __int8 *)(a2 + 129);
        v19 = v43;
        v17 = v42;
        v14 = v41;
        v35 = *(_QWORD *)(a2 + 120);
        v15 = v39;
        v13 = v65;
        if (!v49)
          return 0;
      }
      else
      {
        v52 = 0;
        if (v22 != 2)
          return v52;
        v20 = v46;
        v18 = v45;
        v37 = v44;
        v19 = v43;
        v17 = v42;
        v14 = v41;
        v35 = v40;
        v15 = v39;
        v13 = v65;
        if (v48 != 0.0)
          return v52;
      }
    }
    else
    {
      v52 = 0;
      if (v22)
        return v52;
      v49 = v47 == v48;
      v20 = v46;
      v18 = v45;
      v37 = v44;
      v19 = v43;
      v17 = v42;
      v14 = v41;
      v35 = v40;
      v15 = v39;
      v13 = v65;
      if (!v49)
        return v52;
    }
  }
  if ((v6 & 1) != 0)
  {
    if (!v24)
      return 0;
  }
  else
  {
    if (v5 == v23)
      v50 = v24;
    else
      v50 = 1;
    if ((v50 & 1) != 0)
      return 0;
  }
  if ((v8 & 1) != 0)
  {
    if (!v26)
      return 0;
  }
  else
  {
    if (v7 == v25)
      v51 = v26;
    else
      v51 = 1;
    if ((v51 & 1) != 0)
      return 0;
  }
  if ((v10 & 1) != 0)
  {
    if (!v28)
      return 0;
  }
  else
  {
    if (v9 == v27)
      v53 = v28;
    else
      v53 = 1;
    if ((v53 & 1) != 0)
      return 0;
  }
  if ((v12 & 1) != 0)
  {
    if (!v30)
      return 0;
  }
  else
  {
    if (v11 == v29)
      v54 = v30;
    else
      v54 = 1;
    if ((v54 & 1) != 0)
      return 0;
  }
  v64 = v37;
  v55 = v18;
  v56 = v20;
  v66 = v21;
  if ((specialized static Set.== infix(_:_:)(v13, v31) & 1) == 0)
    return 0;
  if ((v15 & 1) != 0)
  {
    v57 = v66;
    v58 = v56;
    if (!v33)
      return 0;
  }
  else
  {
    if (v14 == v32)
      v59 = v33;
    else
      v59 = 1;
    v57 = v66;
    v58 = v56;
    if ((v59 & 1) != 0)
      return 0;
  }
  if ((v17 & 1) != 0)
  {
    v52 = v67;
    if (!v67)
      return v52;
  }
  else
  {
    v60 = v67;
    if (v16 != v34)
      v60 = 1;
    if ((v60 & 1) != 0)
      return 0;
  }
  if ((v19 & 1) != 0)
  {
    if (!v36)
      return 0;
  }
  else
  {
    if (v55 == v35)
      v61 = v36;
    else
      v61 = 1;
    if ((v61 & 1) != 0)
      return 0;
  }
  if (v58 == 2)
  {
    if (v64 != 2)
      return 0;
  }
  else
  {
    v52 = 0;
    v62 = (v58 & 1) == 0;
    if (v64 == 2 || ((v62 ^ v64) & 1) == 0)
      return v52;
  }
  if (v57 == 2)
  {
    if (v38 != 2)
      return 0;
  }
  else if (v38 == 2 || ((((v57 & 1) == 0) ^ v38) & 1) == 0)
  {
    return 0;
  }
  return 1;
}

Swift::Int SamplingParameters.hashValue.getter()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  SamplingParameters.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SamplingParameters()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  SamplingParameters.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  Swift::UInt v8;
  int64_t v9;
  uint64_t v11;
  int64_t v12;
  Swift::Int v13;

  Hasher._finalize()();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v9 = 0;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  for (v6 &= v6 - 1; ; v6 = (v11 - 1) & v11)
  {
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v13 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    v8 ^= v13;
    if (v6)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v9++, 1))
      goto LABEL_19;
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    v11 = *(_QWORD *)(v3 + 8 * v9);
    if (!v11)
      break;
LABEL_14:
    ;
  }
  v12 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_17;
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    ++v9;
    goto LABEL_14;
  }
  while (1)
  {
    v9 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v9 >= v7)
      goto LABEL_17;
    v11 = *(_QWORD *)(v3 + 8 * v9);
    ++v12;
    if (v11)
      goto LABEL_14;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type SamplingParameters and conformance SamplingParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingParameters and conformance SamplingParameters;
  if (!lazy protocol witness table cache variable for type SamplingParameters and conformance SamplingParameters)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingParameters, &type metadata for SamplingParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingParameters and conformance SamplingParameters);
  }
  return result;
}

uint64_t initializeWithCopy for SamplingParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v3;
  v4 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v4;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SamplingParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = a2[13];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_QWORD *)(a1 + 104) = v10;
  v11 = a2[15];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_QWORD *)(a1 + 120) = v11;
  *(_BYTE *)(a1 + 129) = *((_BYTE *)a2 + 129);
  *(_BYTE *)(a1 + 130) = *((_BYTE *)a2 + 130);
  return a1;
}

void *__swift_memcpy131_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x83uLL);
}

uint64_t assignWithTake for SamplingParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  return a1;
}

uint64_t getEnumTagSinglePayload for SamplingParameters(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 131))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 80);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplingParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 130) = 0;
    *(_WORD *)(result + 128) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 131) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 131) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SamplingParameters()
{
  return &type metadata for SamplingParameters;
}

uint64_t OUTLINED_FUNCTION_2_5()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void static SamplingStrategy.argmax()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

void static SamplingStrategy.nucleusSampling(threshold:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t static SamplingStrategy.topK(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

void SamplingStrategy.Choice.hash(into:)()
{
  Swift::UInt v0;
  int v1;
  Swift::UInt v2;

  OUTLINED_FUNCTION_6_3();
  if (v1)
  {
    if (v1 == 1)
    {
      OUTLINED_FUNCTION_1_4();
      v2 = v0;
    }
    else
    {
      v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    OUTLINED_FUNCTION_272();
    OUTLINED_FUNCTION_5_3();
  }
}

BOOL static SamplingStrategy.Choice.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v4 == 1)
      return *(_QWORD *)&v2 == *(_QWORD *)&v3;
    return 0;
  }
  return v4 == 2 && *(_QWORD *)&v3 == 0;
}

void SamplingStrategy.Choice.hashValue.getter()
{
  Swift::UInt v0;
  int v1;
  Swift::UInt v2;

  OUTLINED_FUNCTION_0_4();
  if (v1)
  {
    if (v1 == 1)
    {
      OUTLINED_FUNCTION_1_4();
      v2 = v0;
    }
    else
    {
      v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    OUTLINED_FUNCTION_272();
    OUTLINED_FUNCTION_2_6();
  }
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_0();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SamplingStrategy.Choice()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt64 v4;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 == 1)
    {
      Hasher._combine(_:)(2uLL);
      v3 = v1;
    }
    else
    {
      v3 = 0;
    }
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = v1;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

void SamplingStrategy.choice.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

void SamplingStrategy.hash(into:)()
{
  Swift::UInt v0;
  int v1;
  Swift::UInt v2;

  OUTLINED_FUNCTION_6_3();
  if (v1)
  {
    if (v1 == 1)
    {
      OUTLINED_FUNCTION_1_4();
      v2 = v0;
    }
    else
    {
      v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    OUTLINED_FUNCTION_272();
    OUTLINED_FUNCTION_5_3();
  }
}

BOOL static SamplingStrategy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  if (*(_BYTE *)(a1 + 8) != 1)
    return v4 == 2 && *(_QWORD *)&v3 == 0;
  return v4 == 1 && *(_QWORD *)&v2 == *(_QWORD *)&v3;
}

void SamplingStrategy.hashValue.getter()
{
  Swift::UInt v0;
  int v1;
  Swift::UInt v2;

  OUTLINED_FUNCTION_0_4();
  if (v1)
  {
    if (v1 == 1)
    {
      OUTLINED_FUNCTION_1_4();
      v2 = v0;
    }
    else
    {
      v2 = 0;
    }
    Hasher._combine(_:)(v2);
  }
  else
  {
    OUTLINED_FUNCTION_272();
    OUTLINED_FUNCTION_2_6();
  }
  Hasher._finalize()();
  OUTLINED_FUNCTION_4_0();
}

unint64_t lazy protocol witness table accessor for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice;
  if (!lazy protocol witness table cache variable for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategy.Choice, &type metadata for SamplingStrategy.Choice);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategy.Choice and conformance SamplingStrategy.Choice);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SamplingStrategy and conformance SamplingStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SamplingStrategy and conformance SamplingStrategy;
  if (!lazy protocol witness table cache variable for type SamplingStrategy and conformance SamplingStrategy)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SamplingStrategy, &type metadata for SamplingStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SamplingStrategy and conformance SamplingStrategy);
  }
  return result;
}

ValueMetadata *type metadata accessor for SamplingStrategy()
{
  return &type metadata for SamplingStrategy;
}

ValueMetadata *type metadata accessor for SamplingStrategy.Choice()
{
  return &type metadata for SamplingStrategy.Choice;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_1_4()
{
  Hasher._combine(_:)(2uLL);
}

void OUTLINED_FUNCTION_2_6()
{
  Swift::UInt64 v0;
  Swift::UInt64 v1;

  if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

void OUTLINED_FUNCTION_5_3()
{
  Swift::UInt64 v0;

  if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    Hasher._combine(_:)(v0);
  else
    Hasher._combine(_:)(0);
}

uint64_t static WireFormat.decode<A>(_:from:)()
{
  if (one-time initialization token for decoder != -1)
    swift_once();
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t static WireFormat.encode<A>(_:)()
{
  if (one-time initialization token for encoder != -1)
    swift_once();
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t static Serialization.encode<A>(_:)()
{
  return static WireFormat.encode<A>(_:)();
}

uint64_t static Serialization.decode<A>(_:from:)()
{
  return static WireFormat.decode<A>(_:from:)();
}

ValueMetadata *type metadata accessor for Serialization()
{
  return &type metadata for Serialization;
}

uint64_t one-time initialization function for encoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, MEMORY[0x24BDCB410], MEMORY[0x24BDCB400], &static WireFormat.encoder);
}

uint64_t one-time initialization function for decoder(uint64_t a1)
{
  return one-time initialization function for encoder(a1, (void (*)(_QWORD))MEMORY[0x24BDCB268], MEMORY[0x24BDCB260], &static WireFormat.decoder);
}

uint64_t one-time initialization function for encoder(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t result;

  a2(0);
  swift_allocObject();
  result = a3();
  *a4 = result;
  return result;
}

uint64_t SessionConfiguration.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void SessionConfiguration.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*SessionConfiguration.identifier.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.prefferedModelBundles.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SessionConfiguration.prefferedModelBundles.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*SessionConfiguration.prefferedModelBundles.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.handlesSensitiveData.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t SessionConfiguration.handlesSensitiveData.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result;
  return result;
}

uint64_t (*SessionConfiguration.handlesSensitiveData.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t (*SessionConfiguration.cachePolicy.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.useCaseID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void SessionConfiguration.useCaseID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  OUTLINED_FUNCTION_97();
}

uint64_t (*SessionConfiguration.useCaseID.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t SessionConfiguration.onBehalfOfPID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t SessionConfiguration.onBehalfOfPID.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*SessionConfiguration.onBehalfOfPID.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void __swiftcall SessionConfiguration.init(identifier:useCaseID:preferredModelBundles:handlesSensitiveData:cachePolicy:onBehalfOf:)(TokenGeneration::SessionConfiguration *__return_ptr retstr, Swift::String identifier, Swift::String useCaseID, Swift::OpaquePointer preferredModelBundles, Swift::Bool handlesSensitiveData, Swift::Int_optional onBehalfOf)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v10;
  uint64_t v11;
  id v13;
  signed int v14;
  char v15;

  object = useCaseID._object;
  countAndFlagsBits = useCaseID._countAndFlagsBits;
  v10 = identifier._object;
  v11 = identifier._countAndFlagsBits;
  if ((v15 & 1) != 0)
  {
    v13 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v14 = objc_msgSend(v13, sel_processIdentifier);

    *(_QWORD *)&onBehalfOf.is_nil = v14;
  }
  retstr->identifier._countAndFlagsBits = v11;
  retstr->identifier._object = v10;
  retstr->prefferedModelBundles = preferredModelBundles;
  retstr->handlesSensitiveData = handlesSensitiveData;
  retstr->useCaseID._countAndFlagsBits = countAndFlagsBits;
  retstr->useCaseID._object = object;
  retstr->onBehalfOfPID = *(_QWORD *)&onBehalfOf.is_nil;
  OUTLINED_FUNCTION_4_1();
}

void __swiftcall SessionConfiguration.init(identifier:preferredModelBundles:handlesSensitiveData:cachePolicy:)(TokenGeneration::SessionConfiguration *__return_ptr retstr, Swift::String identifier, Swift::OpaquePointer preferredModelBundles, Swift::Bool handlesSensitiveData)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v9;
  signed int v10;

  object = identifier._object;
  countAndFlagsBits = identifier._countAndFlagsBits;
  v9 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v10 = objc_msgSend(v9, sel_processIdentifier);

  retstr->identifier._countAndFlagsBits = countAndFlagsBits;
  retstr->identifier._object = object;
  retstr->prefferedModelBundles = preferredModelBundles;
  retstr->handlesSensitiveData = handlesSensitiveData;
  retstr->useCaseID._countAndFlagsBits = 0x6E776F6E6B6E753CLL;
  retstr->useCaseID._object = (void *)0xE90000000000003ELL;
  retstr->onBehalfOfPID = v10;
}

void SessionConfiguration.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt8 v4;
  Swift::UInt v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 48);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)(a1, v3);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v5);
  OUTLINED_FUNCTION_4_1();
}

BOOL static SessionConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  _BOOL8 result;
  char v15;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(unsigned __int8 *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    v15 = specialized static Array<A>.== infix(_:_:)(v2, v7);
    result = 0;
    if ((v15 & 1) != 0 && ((v3 ^ v8) & 1) == 0)
    {
      if (v4 == v9 && v5 == v10)
        return v6 == v11;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = 0;
      if ((v17 & 1) != 0)
        return v6 == v11;
    }
  }
  return result;
}

Swift::Int SessionConfiguration.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SessionConfiguration()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt v3;
  _BYTE v5[72];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 48);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v5, v1);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SessionConfiguration and conformance SessionConfiguration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SessionConfiguration and conformance SessionConfiguration;
  if (!lazy protocol witness table cache variable for type SessionConfiguration and conformance SessionConfiguration)
  {
    result = MEMORY[0x2495A740C](&protocol conformance descriptor for SessionConfiguration, &type metadata for SessionConfiguration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SessionConfiguration and conformance SessionConfiguration);
  }
  return result;
}

uint64_t destroy for SessionConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SessionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SessionConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for SessionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SessionConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SessionConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionConfiguration()
{
  return &type metadata for SessionConfiguration;
}

void TokenGenerationError.inferenceErrorContext.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  OUTLINED_FUNCTION_7_0();
  v3 = OUTLINED_FUNCTION_25_1();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = OUTLINED_FUNCTION_50_2();
  type metadata accessor for TokenGenerationError(v5);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_118_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_248BBF340;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x8000000248BCB400;
  TokenGenerationError.context.getter();

  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v10;
  Dictionary.init(dictionaryLiteral:)();
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v0, v2, (void (*)(_QWORD))type metadata accessor for TokenGenerationError);
  v8 = OUTLINED_FUNCTION_62_2();
  switch(v8)
  {
    case 3:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_56_2();
      OUTLINED_FUNCTION_40_3();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      OUTLINED_FUNCTION_31_1();
      OUTLINED_FUNCTION_56_2();
      OUTLINED_FUNCTION_40_3();
LABEL_7:
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      OUTLINED_FUNCTION_31_1();
      break;
    case 10:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_40_3();
      goto LABEL_7;
    case 6:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context));
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_2();
      OUTLINED_FUNCTION_48_1(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
      Prompt.SpecialToken.identifier.getter();
      OUTLINED_FUNCTION_40_3();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)();
      OUTLINED_FUNCTION_31_1();
      OUTLINED_FUNCTION_183_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
      break;
    default:
      _s15TokenGeneration0aB5ErrorOWOhTm_0(v2, type metadata accessor for TokenGenerationError);
      break;
  }
  TokenGenerationError.code.getter();
  InferenceError.Context.init(additionalDescription:domain:code:userInfo:fallbackAllowed:)();
  OUTLINED_FUNCTION_4_1();
}

uint64_t type metadata accessor for TokenGenerationError(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for TokenGenerationError);
}

void TokenGenerationError.init(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  BOOL v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  void (*v72)(uint64_t, uint64_t);
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;

  OUTLINED_FUNCTION_7_0();
  v1 = v0;
  v3 = v2;
  v86 = type metadata accessor for URL.DirectoryHint();
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x24BDAC7A8](v86);
  OUTLINED_FUNCTION_178();
  v85 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_178();
  v83 = v6;
  v81 = type metadata accessor for URL();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_178();
  v82 = v8;
  v9 = OUTLINED_FUNCTION_25_1();
  v79 = *(_QWORD *)(v9 - 8);
  v80 = v9;
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_178();
  v78 = v10;
  v11 = type metadata accessor for InferenceError();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_44_3();
  v15 = v14 - v13;
  v16 = type metadata accessor for InferenceError.Context();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_284_0();
  v20 = v18 - v19;
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)v73 - v22;
  v88 = type metadata accessor for TokenGenerationError(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_284_0();
  v77 = v25 - v26;
  MEMORY[0x24BDAC7A8](v27);
  v87 = (_QWORD *)((char *)v73 - v28);
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v89 = v1;
  v29(v15, v1, v11);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 88))(v15, v11);
  v39 = v30 == *MEMORY[0x24BE68968]
     || v30 == *MEMORY[0x24BE68980]
     || v30 == *MEMORY[0x24BE689A0]
     || v30 == *MEMORY[0x24BE68998]
     || v30 == *MEMORY[0x24BE68960]
     || v30 == *MEMORY[0x24BE689E8]
     || v30 == *MEMORY[0x24BE68948]
     || v30 == *MEMORY[0x24BE68978]
     || v30 == *MEMORY[0x24BE68990]
     || v30 == *MEMORY[0x24BE68970];
  v90 = v3;
  if (v39)
  {
    v75 = v12;
    v76 = v11;
    (*(void (**)(uint64_t, uint64_t))(v12 + 96))(v15, v11);
    OUTLINED_FUNCTION_48_1((uint64_t)v23, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 32));
    if (InferenceError.Context.domain.getter() == 0xD000000000000019 && v40 == 0x8000000248BCAF10)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_186();
      if ((v58 & 1) == 0)
      {
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v89, v76);
LABEL_44:
        OUTLINED_FUNCTION_183_1((uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t))(v17 + 8));
        v70 = 1;
        v57 = v90;
        v52 = v88;
        goto LABEL_48;
      }
    }
    v59 = InferenceError.Context.code.getter();
    v60 = TokenGenerationError.Code.init(rawValue:)(v59);
    v61 = v76;
    if (v60 != 12)
    {
      v62 = v60;
      v63 = InferenceError.Context.userInfo.getter();
      v64 = specialized Dictionary.subscript.getter(0xD000000000000010, 0x8000000248BCB400, v63);
      v66 = v65;
      swift_bridgeObjectRelease();
      if (v66)
      {
        v73[0] = v64;
        v73[2] = v66;
        v73[1] = v16;
        lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
        OUTLINED_FUNCTION_3();
        v29(v67, v89, v61);
        __asm { BR              X10 }
      }
    }
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v89, v61);
    goto LABEL_44;
  }
  v41 = v30;
  if (v30 == *MEMORY[0x24BE68950])
  {
    v42 = v17;
    v43 = v12;
    v44 = v11;
    (*(void (**)(uint64_t, uint64_t))(v12 + 96))(v15, v11);
    v74 = v42;
    OUTLINED_FUNCTION_48_1(v20, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 32));
    v93 = 0;
    v94 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    v45._countAndFlagsBits = 0xD00000000000002ELL;
    v45._object = (void *)0x8000000248BCBA70;
    String.append(_:)(v45);
    v46 = InferenceError.Context.userInfo.getter();
    v47 = specialized Dictionary.subscript.getter(0x7466417972746572, 0xEE00657461447265, v46);
    v49 = v48;
    swift_bridgeObjectRelease();
    v91 = v47;
    v92 = v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRelease();
    v50 = v93;
    v51 = v94;
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    v52 = OUTLINED_FUNCTION_3();
    v53 = v89;
    v29(v54, v89, v44);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v53, v44);
    OUTLINED_FUNCTION_183_1(v20, *(uint64_t (**)(uint64_t, uint64_t))(v74 + 8));
    v55 = v87;
    *v87 = v50;
    v55[1] = v51;
    v56 = (uint64_t)v55;
    v57 = v90;
    v55[2] = v52;
    OUTLINED_FUNCTION_33_1();
    swift_storeEnumTagMultiPayload();
LABEL_42:
    outlined init with take of TokenGenerationError(v56, v57);
    v70 = 0;
    goto LABEL_48;
  }
  if (v30 == *MEMORY[0x24BE68938])
  {
    OUTLINED_FUNCTION_41_3(v15);
    lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type InferenceError and conformance InferenceError, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    v52 = OUTLINED_FUNCTION_3();
    v68 = v89;
    v29(v69, v89, v11);
    OUTLINED_FUNCTION_41_3(v68);
    v56 = (uint64_t)v87;
    *v87 = 0xD00000000000001CLL;
    *(_QWORD *)(v56 + 8) = 0x8000000248BCBA50;
    *(_QWORD *)(v56 + 16) = v52;
    OUTLINED_FUNCTION_33_1();
    swift_storeEnumTagMultiPayload();
    v57 = v90;
    goto LABEL_42;
  }
  v71 = *MEMORY[0x24BE68958];
  v72 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v72(v89, v11);
  if (v41 != v71)
    v72(v15, v11);
  v70 = 1;
  v52 = v88;
  v57 = v90;
LABEL_48:
  __swift_storeEnumTagSinglePayload(v57, v70, 1, v52);
  OUTLINED_FUNCTION_4_1();
}

void sub_248B77D50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  v2 = *(_QWORD **)(v1 - 160);
  v3 = *(_QWORD *)(v1 - 272);
  *v2 = *(_QWORD *)(v1 - 288);
  v2[1] = v3;
  v2[2] = v0;
  JUMPOUT(0x248B77AE0);
}

void sub_248B77D7C()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_5();
  JUMPOUT(0x248B77AE8);
}

void sub_248B77D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t *v31;
  unsigned __int8 v32;
  uint64_t v33;
  char v34;

  InferenceError.Context.userInfo.getter();
  v2 = OUTLINED_FUNCTION_59_3(0x746E756F63, 0xE500000000000000);
  v4 = v3;
  OUTLINED_FUNCTION_186();
  if (!v4)
    goto LABEL_62;
  v5 = HIBYTE(v4) & 0xF;
  v6 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v7 = HIBYTE(v4) & 0xF;
  else
    v7 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v7)
  {
    OUTLINED_FUNCTION_17_1();
    *(_QWORD *)(v1 - 272) = v4;
    goto LABEL_62;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
    v9 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(v2, v4, 10);
    LOBYTE(v2) = v34;
    goto LABEL_47;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
      v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    v9 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v6, 10);
    LOBYTE(v2) = v10 & 1;
    goto LABEL_47;
  }
  *(_QWORD *)(v1 - 104) = v2;
  *(_QWORD *)(v1 - 96) = v4 & 0xFFFFFFFFFFFFFFLL;
  if (v2 == 43)
  {
    if (!v5)
      goto LABEL_66;
    if (v5 == 1)
      goto LABEL_33;
    OUTLINED_FUNCTION_29_2();
    if (!v14 & v13)
      goto LABEL_33;
    v9 = v16;
    if (v15 != 2)
    {
      OUTLINED_FUNCTION_29_2();
      if (!v14 & v13)
        goto LABEL_33;
      v9 = 10 * v9 + v18;
      if (v17 != 3)
      {
        while (1)
        {
          OUTLINED_FUNCTION_49_3();
          if (!v14 & v13)
            goto LABEL_33;
          OUTLINED_FUNCTION_27_1();
          if (!v14)
            break;
          v9 = v20 + v19;
          if (__OFADD__(v20, v19))
            break;
          OUTLINED_FUNCTION_28_1();
          if (v14)
            goto LABEL_47;
        }
LABEL_60:
        v9 = 0;
        LOBYTE(v2) = 1;
LABEL_47:
        OUTLINED_FUNCTION_37_0();
        if ((v2 & 1) == 0)
        {
          v25 = InferenceError.Context.userInfo.getter();
          OUTLINED_FUNCTION_0_5();
          specialized Dictionary.subscript.getter(0x6D756D6978616DLL, 0xE700000000000000, v25);
          OUTLINED_FUNCTION_53_4();
          swift_bridgeObjectRelease();
          if (!v0)
          {
            OUTLINED_FUNCTION_2_7();
            OUTLINED_FUNCTION_17_1();
            OUTLINED_FUNCTION_50();
            JUMPOUT(0x248B77CE8);
          }
          v26 = OUTLINED_FUNCTION_90_0();
          v28 = specialized FixedWidthInteger.init(_:)(v26, v27);
          v30 = v29;
          OUTLINED_FUNCTION_2_7();
          if ((v30 & 1) == 0)
          {
            v31 = *(uint64_t **)(v1 - 160);
            *v31 = v9;
            v31[1] = v28;
            OUTLINED_FUNCTION_12_1();
            JUMPOUT(0x248B77AE8);
          }
          OUTLINED_FUNCTION_17_1();
          OUTLINED_FUNCTION_50();
LABEL_70:
          JUMPOUT(0x248B77CF0);
        }
LABEL_62:
        OUTLINED_FUNCTION_17_1();
        OUTLINED_FUNCTION_50();
        OUTLINED_FUNCTION_2_7();
        OUTLINED_FUNCTION_0_5();
        goto LABEL_70;
      }
    }
  }
  else
  {
    if (v2 == 45)
    {
      if (v5)
      {
        if (v5 != 1)
        {
          OUTLINED_FUNCTION_29_2();
          if (!(!v14 & v13))
          {
            if (v11 == 2)
            {
              LOBYTE(v2) = 0;
              v9 = -(uint64_t)v12;
              goto LABEL_47;
            }
            if ((BYTE2(v2) - 48) <= 9u)
            {
              v9 = -10 * v12 - (BYTE2(v2) - 48);
              if (v11 == 3)
                goto LABEL_46;
              while (1)
              {
                OUTLINED_FUNCTION_49_3();
                if (!v14 & v13)
                  break;
                OUTLINED_FUNCTION_27_1();
                if (!v14)
                  goto LABEL_60;
                v9 = v33 - v32;
                if (__OFSUB__(v33, v32))
                  goto LABEL_60;
                OUTLINED_FUNCTION_28_1();
                if (v14)
                  goto LABEL_47;
              }
            }
          }
        }
LABEL_33:
        v9 = 0;
        LOBYTE(v2) = 1;
        goto LABEL_47;
      }
      __break(1u);
LABEL_66:
      __break(1u);
      JUMPOUT(0x248B782ECLL);
    }
    if (!v5 || (v2 - 48) > 9u)
      goto LABEL_33;
    v9 = (v2 - 48);
    if (v5 != 1)
    {
      OUTLINED_FUNCTION_29_2();
      if (!v14 & v13)
        goto LABEL_33;
      v9 = 10 * (v2 - 48) + v22;
      if (v21 != 2)
      {
        while (1)
        {
          OUTLINED_FUNCTION_49_3();
          if (!v14 & v13)
            goto LABEL_33;
          OUTLINED_FUNCTION_27_1();
          if (!v14)
            goto LABEL_60;
          v9 = v24 + v23;
          if (__OFADD__(v24, v23))
            goto LABEL_60;
          OUTLINED_FUNCTION_28_1();
          if (v14)
            goto LABEL_47;
        }
      }
    }
  }
LABEL_46:
  LOBYTE(v2) = 0;
  goto LABEL_47;
}

uint64_t TokenGenerationError.Context.debugDescription.getter()
{
  swift_bridgeObjectRetain();
  return OUTLINED_FUNCTION_90_0();
}

uint64_t TokenGenerationError.Context.debugDescription.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TokenGenerationError.Context.debugDescription.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

void TokenGenerationError.Context.underlyingError.getter()
{
  uint64_t v0;

  MEMORY[0x2495A7370](*(_QWORD *)(v0 + 16));
  OUTLINED_FUNCTION_104();
}

void TokenGenerationError.Context.underlyingError.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*TokenGenerationError.Context.underlyingError.modify())()
{
  return protocol witness for Hashable.hash(into:) in conformance CachePolicy;
}

uint64_t TokenGenerationError.Context.init(debugDescription:underlyingError:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void TokenGenerationError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD);
  char *v9;

  OUTLINED_FUNCTION_7_0();
  v1 = OUTLINED_FUNCTION_25_1();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_50_2();
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_145();
  type metadata accessor for TokenGenerationError(0);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_44_3();
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v0, v7 - v6, v8);
  v9 = (char *)sub_248B784D0 + 4 * byte_248BC96D0[OUTLINED_FUNCTION_62_2()];
  __asm { BR              X10 }
}

void sub_248B784D0()
{
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_7_2();
  OUTLINED_FUNCTION_3_5();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_52_3();
  OUTLINED_FUNCTION_4_1();
}

void sub_248B7880C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0
                + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                         + 48)
                + 16);
  swift_bridgeObjectRelease();

  OUTLINED_FUNCTION_3_5();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_8_1();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_52_3();
  type metadata accessor for DocumentResource();
  JUMPOUT(0x248B7887CLL);
}

void TokenGenerationError.context.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x24BDAC7A8](v1);
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_248B78914 + 4 * byte_248BC96DC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_248B78914()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  v3 = v1[2];
  *v0 = *v1;
  v0[1] = v2;
  v0[2] = v3;
}

unint64_t TokenGenerationError.Code.init(rawValue:)(unint64_t result)
{
  if (result >= 0xC)
    return 12;
  return result;
}

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)specialized _parseInteger<A, B>(ascii:radix:)(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

void TokenGenerationError.code.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x24BDAC7A8](v1);
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_248B78C9C + 4 * byte_248BC96E8[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_248B78C9C()
{
  uint64_t v0;

  _s15TokenGeneration0aB5ErrorOWOhTm_0(v0, type metadata accessor for TokenGenerationError);
  return 0;
}

void GenerationError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD);
  char *v9;

  OUTLINED_FUNCTION_7_0();
  v2 = OUTLINED_FUNCTION_25_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_44_3();
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_50_2();
  type metadata accessor for GenerationError(v6);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_118_0();
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v0, v1, v8);
  v9 = (char *)sub_248B78F28 + 4 * byte_248BC96F4[OUTLINED_FUNCTION_62_2()];
  __asm { BR              X10 }
}

void sub_248B78F28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;

  v2 = *v0;
  v3 = v0[1];
  OUTLINED_FUNCTION_51_1();
  v4._countAndFlagsBits = OUTLINED_FUNCTION_35_2();
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v4);
  *(_QWORD *)(v1 - 96) = v2;
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_55_3(0xD000000000000024, (uint64_t)" tokens, but the maximum allowed is ");
  *(_QWORD *)(v1 - 96) = v3;
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_60_3();
  OUTLINED_FUNCTION_5_4();
  OUTLINED_FUNCTION_38_3();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_53_4();
  OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_4_1();
}

void GenerationError.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  char *v5;

  v2 = OUTLINED_FUNCTION_25_1();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_19_2();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_145();
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v0, v1, v4);
  v5 = (char *)sub_248B791BC + 4 * byte_248BC96FC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_248B791BC()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher._combine(_:)(2uLL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

void static GenerationError.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_7_0();
  v1 = v0;
  v3 = v2;
  v12 = OUTLINED_FUNCTION_25_1();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_19_2();
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_284_0();
  MEMORY[0x24BDAC7A8](v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GenerationError, GenerationError));
  OUTLINED_FUNCTION_3_2();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v11 + *(int *)(v7 + 48) - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v3, (uint64_t)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (void (*)(_QWORD))type metadata accessor for GenerationError);
  _s15TokenGeneration0aB5ErrorOWOcTm_0(v1, (uint64_t)v9, (void (*)(_QWORD))type metadata accessor for GenerationError);
  v10 = (char *)sub_248B7938C + 4 * byte_248BC9704[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_248B7938C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  _s15TokenGeneration0aB5ErrorOWOcTm_0(v0, (uint64_t)v2, (void (*)(_QWORD))type metadata accessor for GenerationError);
  v3 = v2[1];
  v4 = OUTLINED_FUNCTION_6_4();
  if ((_DWORD)v4)
  {
    outlined destroy of (GenerationError, GenerationError)(v0);
    return 0;
  }
  if (*v2 != *v1)
  {
    OUTLINED_FUNCTION_64_3(v4, type metadata accessor for GenerationError);
    return 0;
  }
  v5 = v3 == v1[1];
  OUTLINED_FUNCTION_64_3(v4, type metadata accessor for GenerationError);
  return v5;
}

Swift::Int GenerationError.hashValue.getter()
{
  Hasher.init(_seed:)();
  GenerationError.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GenerationError()
{
  Hasher.init(_seed:)();
  GenerationError.hash(into:)();
  return Hasher._finalize()();
}

void specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = a1;
    v4[3] = 2 * v5 - 64;
  }
  OUTLINED_FUNCTION_104();
}

void _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v4 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_43_1(v4);
  }
  else
  {
    v3 = MEMORY[0x2495A6ADC](15, a1 >> 16);
    OUTLINED_FUNCTION_43_1(v3);
  }
  OUTLINED_FUNCTION_104();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)()
{
  Swift::Int *v0;
  Swift::Int *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;

  OUTLINED_FUNCTION_7_0();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = *v0;
  specialized __RawDictionaryStorage.find<A>(_:)(v6, v4);
  OUTLINED_FUNCTION_54_2();
  if (v15)
  {
    __break(1u);
    goto LABEL_9;
  }
  v16 = v13;
  v17 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12))
    goto LABEL_5;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v5);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v16 = v18;
LABEL_5:
  v20 = (_QWORD *)*v1;
  if ((v17 & 1) != 0)
  {
    v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *v21 = v11;
    v21[1] = v9;
    OUTLINED_FUNCTION_4_1();
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, v7, v5, v11, v9, v20);
    swift_bridgeObjectRetain();
  }
}

uint64_t type metadata accessor for GenerationError(uint64_t a1)
{
  return type metadata accessor for Prompt.Turn(a1, (uint64_t *)&type metadata singleton initialization cache for GenerationError);
}

void _s15TokenGeneration0aB5ErrorOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  void (*v4)(uint64_t);

  a3(0);
  v3 = OUTLINED_FUNCTION_90_0();
  v4(v3);
  OUTLINED_FUNCTION_104();
}

uint64_t outlined destroy of (GenerationError, GenerationError)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (GenerationError, GenerationError));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _s15TokenGeneration0aB5ErrorOWOhTm_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_104();
}

void base witness table accessor for Error in TokenGenerationError()
{
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type TokenGenerationError and conformance TokenGenerationError, type metadata accessor for TokenGenerationError, (uint64_t)&protocol conformance descriptor for TokenGenerationError);
}

void base witness table accessor for Equatable in GenerationError()
{
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
}

void base witness table accessor for Error in GenerationError()
{
  lazy protocol witness table accessor for type Prompt.ImageAttachment and conformance Prompt.ImageAttachment(&lazy protocol witness table cache variable for type GenerationError and conformance GenerationError, type metadata accessor for GenerationError, (uint64_t)&protocol conformance descriptor for GenerationError);
}

uint64_t initializeBufferWithCopyOfBuffer for TokenGenerationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_248B798D0 + 4 * byte_248BC970C[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void destroy for TokenGenerationError(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  id *v4;
  uint64_t v5;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
    case 2u:
    case 4u:
    case 5u:
    case 7u:
    case 8u:
    case 9u:
      goto LABEL_7;
    case 3u:
      goto LABEL_4;
    case 6u:
      v2 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      v3 = &demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context);
      goto LABEL_6;
    case 0xAu:
      swift_bridgeObjectRelease();
LABEL_4:
      swift_bridgeObjectRelease();
      v4 = (id *)(a1 + 32);
      goto LABEL_8;
    case 0xBu:
      v5 = type metadata accessor for DocumentResource();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v3 = &demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context);
LABEL_6:
      a1 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 48);
LABEL_7:
      swift_bridgeObjectRelease();
      v4 = (id *)(a1 + 16);
LABEL_8:

      break;
    default:
      return;
  }
}

void initializeWithCopy for TokenGenerationError()
{
  char *v0;

  v0 = (char *)sub_248B79CB0 + 4 * byte_248BC9724[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_248B79CB0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[2];
  swift_bridgeObjectRetain();
  MEMORY[0x2495A7370](v3);
  v0[2] = v3;
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for TokenGenerationError(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    _s15TokenGeneration0aB5ErrorOWOhTm_0(result, type metadata accessor for TokenGenerationError);
    v2 = (char *)&loc_248B79FB8 + 4 * byte_248BC9730[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for TokenGenerationError(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 11)
  {
    v11 = type metadata accessor for DocumentResource();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                 + 48);
    v13 = &a1[v12];
    v14 = &a2[v12];
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  }
  else
  {
    if (EnumCaseMultiPayload != 6)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
    v7 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                + 48);
    v9 = &a1[v8];
    v10 = &a2[v8];
    *(_OWORD *)v9 = *(_OWORD *)v10;
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

char *assignWithTake for TokenGenerationError(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  if (a1 != a2)
  {
    _s15TokenGeneration0aB5ErrorOWOhTm_0((uint64_t)a1, type metadata accessor for TokenGenerationError);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 11)
    {
      v11 = type metadata accessor for DocumentResource();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (document: DocumentResource, TokenGenerationError.Context))
                   + 48);
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
    }
    else
    {
      if (EnumCaseMultiPayload != 6)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
      v7 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Prompt.SpecialToken, TokenGenerationError.Context))
                  + 48);
      v9 = &a1[v8];
      v10 = &a2[v8];
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for TokenGenerationError()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t *v16;

  v5 = &unk_248BC98D8;
  v6 = &unk_248BC98D8;
  v7 = &unk_248BC98D8;
  v8 = &unk_248BC98F0;
  v9 = &unk_248BC98D8;
  v10 = &unk_248BC98D8;
  result = type metadata accessor for Prompt.SpecialToken();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v11 = &v4;
    v12 = &unk_248BC98D8;
    v13 = &unk_248BC98D8;
    v14 = &unk_248BC98D8;
    v15 = &unk_248BC98F0;
    result = type metadata accessor for DocumentResource();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      v16 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void destroy for TokenGenerationError.Context(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

void initializeBufferWithCopyOfBuffer for TokenGenerationError.Context(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  swift_bridgeObjectRetain();
  MEMORY[0x2495A7370](v4);
  a1[2] = v4;
  OUTLINED_FUNCTION_104();
}

_QWORD *assignWithCopy for TokenGenerationError.Context(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[2];
  v5 = a2[2];
  MEMORY[0x2495A7370](v5);
  a1[2] = v5;

  return a1;
}

uint64_t assignWithTake for TokenGenerationError.Context(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for TokenGenerationError.Context(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TokenGenerationError.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TokenGenerationError.Context()
{
  return &type metadata for TokenGenerationError.Context;
}

uint64_t *initializeBufferWithCopyOfBuffer for GenerationError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    v7 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

uint64_t destroy for GenerationError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v3 = type metadata accessor for Prompt.SpecialToken();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithCopy for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    _s15TokenGeneration0aB5ErrorOWOhTm_0((uint64_t)a1, type metadata accessor for GenerationError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *initializeWithTake for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Prompt.SpecialToken();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for GenerationError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    _s15TokenGeneration0aB5ErrorOWOhTm_0((uint64_t)a1, type metadata accessor for GenerationError);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Prompt.SpecialToken();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for GenerationError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Prompt.SpecialToken();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

_QWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::Int *v4;
  Swift::Int *v5;
  Swift::Int v10;
  unint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *result;

  v5 = v4;
  v10 = *v4;
  specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  OUTLINED_FUNCTION_54_2();
  if (v13)
  {
    __break(1u);
    goto LABEL_9;
  }
  v14 = v11;
  v15 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Prompt.ToolCall>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v10))
    goto LABEL_5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_9:
    result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v16;
LABEL_5:
  v18 = (_QWORD *)*v5;
  if ((v15 & 1) != 0)
    return outlined assign with take of Prompt.ToolCall(a1, (_QWORD *)(v18[7] + (v14 << 6)));
  specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a1, v18);
  return (_QWORD *)swift_bridgeObjectRetain();
}

unsigned __int8 *specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = String.init<A>(_:)();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = static String._copying(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      v15 = a2 - 1;
      if (a2 != 1)
      {
        v16 = a3 + 48;
        v17 = a3 + 55;
        v18 = a3 + 87;
        if (a3 > 10)
        {
          v16 = 58;
        }
        else
        {
          v18 = 97;
          v17 = 65;
        }
        if (result)
        {
          v9 = 0;
          v19 = result + 1;
          do
          {
            v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                v13 = 0;
                if (v20 < 0x61 || v20 >= v18)
                  return (unsigned __int8 *)v13;
                v21 = -87;
              }
              else
              {
                v21 = -55;
              }
            }
            else
            {
              v21 = -48;
            }
            v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21)))
              return 0;
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        v23 = a3 + 48;
        v24 = a3 + 55;
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v23 = 58;
        }
        else
        {
          v25 = 97;
          v24 = 65;
        }
        if (result)
        {
          v26 = 0;
          do
          {
            v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                v13 = 0;
                if (v27 < 0x61 || v27 >= v25)
                  return (unsigned __int8 *)v13;
                v28 = -87;
              }
              else
              {
                v28 = -55;
              }
            }
            else
            {
              v28 = -48;
            }
            v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
              return 0;
            v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28)))
              return 0;
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      v5 = a2 - 1;
      if (a2 != 1)
      {
        v6 = a3 + 48;
        v7 = a3 + 55;
        v8 = a3 + 87;
        if (a3 > 10)
        {
          v6 = 58;
        }
        else
        {
          v8 = 97;
          v7 = 65;
        }
        if (result)
        {
          v9 = 0;
          for (i = result + 1; ; ++i)
          {
            v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                v13 = 0;
                if (v11 < 0x61 || v11 >= v8)
                  return (unsigned __int8 *)v13;
                v12 = -87;
              }
              else
              {
                v12 = -55;
              }
            }
            else
            {
              v12 = -48;
            }
            v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
              return 0;
            v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12)))
              return 0;
            if (!--v5)
              return (unsigned __int8 *)v9;
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = specialized Collection.subscript.getter();
  v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      v12 = v11;
      specialized Sequence._copySequenceContents(initializing:)(v16, v11 + 32, v10, a1, a2, a3, a4);
      v14 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v12 = MEMORY[0x24BEE4AF8];
    }
    v15 = MEMORY[0x2495A6A64](v12 + 32, *(_QWORD *)(v12 + 16));
    swift_release();
    return v15;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x2495A6A64);
LABEL_9:
      _StringObject.sharedUTF8.getter();
      goto LABEL_12;
    }
    v16[0] = a3;
    v16[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x2495A6A64]((char *)v16 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

void specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = a1;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    v7 = v10;
  }
  if ((a2 & 0xC) == v9)
  {
    _StringGuts._slowEnsureMatchingEncoding(_:)(a2, a3, a4);
    a2 = v11;
    if ((a4 & 0x1000000000000000) == 0)
      return;
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return;
  }
  v12 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v12 = a3 & 0xFFFFFFFFFFFFLL;
  if (v12 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v12 >= a2 >> 16)
  {
    String.UTF8View._foreignDistance(from:to:)();
    return;
  }
  __break(1u);
}

void specialized Sequence._copySequenceContents(initializing:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[2];

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v11 = a4;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v29 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = a4;
LABEL_33:
    *a1 = a4;
    a1[1] = a5;
    a1[2] = a6;
    a1[3] = a7;
    a1[4] = v11;
    return;
  }
  v13 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v23 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v24 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v25 = v16;
  v28 = a3 - 1;
  v11 = a4;
  while (1)
  {
    v17 = v11;
    if ((v11 & 0xC) == v15)
      _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a6, a7);
    if (v17 >> 14 < v29 || v17 >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      v21 = String.UTF8View._foreignSubscript(position:)();
    }
    else
    {
      v19 = v17 >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v30[0] = a6;
        v30[1] = v24;
        v21 = *((_BYTE *)v30 + v19);
      }
      else
      {
        v20 = v23;
        if ((a6 & 0x1000000000000000) == 0)
          v20 = _StringObject.sharedUTF8.getter();
        v21 = *(_BYTE *)(v20 + v19);
      }
    }
    if ((v11 & 0xC) == v15)
    {
      _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a6, a7);
      v11 = v22;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        v11 = (v11 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v25 <= v11 >> 16)
      goto LABEL_35;
    v11 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(_BYTE *)(a2 + v13) = v21;
    if (v28 != v13)
    {
      ++v13;
      if (v10 != v11 >> 14)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

_QWORD *outlined assign with take of Prompt.ToolCall(_QWORD *a1, _QWORD *a2)
{
  assignWithTake for Prompt.ToolCall(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v1, *(_QWORD *)(v2 - 280));
}

_QWORD *OUTLINED_FUNCTION_1_5()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(v1 - 160);
  v3 = *(_QWORD *)(v1 - 272);
  *v2 = *(_QWORD *)(v1 - 288);
  v2[1] = v3;
  v2[2] = v0;
  return v2;
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return static Locale.current.getter();
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_7_2()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_8_1()
{
  uint64_t v0;

  return v0;
}

_QWORD *OUTLINED_FUNCTION_12_1()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 - 272);
  v0[2] = *(_QWORD *)(v2 - 288);
  v0[3] = v3;
  v0[4] = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

void OUTLINED_FUNCTION_16_1()
{
  Swift::String v0;

  v0._countAndFlagsBits = 46;
  v0._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  return type metadata accessor for String.LocalizationValue.StringInterpolation();
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return type metadata accessor for GenerationError(0);
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return type metadata accessor for String.LocalizationValue();
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  return String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)();
}

uint64_t OUTLINED_FUNCTION_24_3()
{
  return String.LocalizationValue.init(stringLiteral:)();
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return type metadata accessor for Prompt.SpecialToken();
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t OUTLINED_FUNCTION_31_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return 0x64656469766F7250;
}

uint64_t OUTLINED_FUNCTION_36_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_37_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_38_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_39_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_40_3()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_41_3(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_42_2(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&a1);
}

unint64_t OUTLINED_FUNCTION_43_1(uint64_t a1)
{
  char v1;

  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_48_1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

void OUTLINED_FUNCTION_55_3(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_59_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized Dictionary.subscript.getter(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_60_3()
{
  return String.LocalizationValue.init(stringInterpolation:)();
}

uint64_t OUTLINED_FUNCTION_61_3()
{
  return String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
}

uint64_t OUTLINED_FUNCTION_62_2()
{
  return swift_getEnumCaseMultiPayload();
}

void OUTLINED_FUNCTION_64_3(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  _s15TokenGeneration0aB5ErrorOWOhTm_0(v2, a2);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t one-time initialization function for samplingParametersKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.samplingParametersKey);
}

uint64_t one-time initialization function for draftCacheKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.draftCacheKey);
}

uint64_t one-time initialization function for grammarKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.grammarKey);
}

uint64_t one-time initialization function for partialGrammarKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.partialGrammarKey);
}

uint64_t one-time initialization function for schemaKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.schemaKey);
}

uint64_t one-time initialization function for documentsKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.documentsKey);
}

uint64_t one-time initialization function for toolsKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.toolsKey);
}

uint64_t one-time initialization function for toolChoiceKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.toolChoiceKey);
}

uint64_t one-time initialization function for localeKey(uint64_t a1)
{
  return one-time initialization function for samplingParametersKey(a1, static GenerativeConfigurationKey.localeKey);
}

uint64_t one-time initialization function for samplingParametersKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = OUTLINED_FUNCTION_0_6();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return GenerativeConfigurationKey.init(_:)();
}

void GenerativeConfigurationProtocol.samplingParameters(_:)(void *__src)
{
  uint64_t v1;
  _QWORD __dst[18];

  memcpy(__dst, __src, 0x83uLL);
  OUTLINED_FUNCTION_7_3(__dst[3]);
  outlined retain of SamplingParametersEnvelope((uint64_t)__dst);
  if (one-time initialization token for samplingParametersKey != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v1, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_6_5();
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  outlined release of SamplingParametersEnvelope((uint64_t)__dst);
  OUTLINED_FUNCTION_8_2();
}

void GenerativeConfigurationProtocol.samplingParameters(_:)()
{
  uint64_t v0;
  char v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OverrideHint<SamplingParameters>);
  OverrideHint.value.getter();
  OUTLINED_FUNCTION_7_3(v1);
  if (one-time initialization token for samplingParametersKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_6_5();
  lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_2();
}

uint64_t GenerativeConfigurationProtocol.samplingParameters(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, (uint64_t)&one-time initialization token for samplingParametersKey, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
}

void GenerativeConfigurationProtocol.samplingParameters.getter(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[136];
  _QWORD v48[17];
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  _QWORD v54[17];
  __int128 v55;
  uint64_t v56;
  char v57;

  v43 = a3;
  v45 = a1;
  v46 = a2;
  v4 = OUTLINED_FUNCTION_35_3();
  v37 = *(_QWORD *)(v4 - 8);
  v38 = v4;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_178();
  v36 = v6;
  v7 = OUTLINED_FUNCTION_17_2();
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_178();
  v39 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableConfiguration?);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_44_3();
  v13 = v12 - v11;
  v14 = OUTLINED_FUNCTION_36_2();
  v42 = *(_QWORD *)(v14 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_31_0();
  v35 = v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v34 - v18;
  v20 = OUTLINED_FUNCTION_0_6();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_79_1();
  if (one-time initialization token for samplingParametersKey != -1)
    swift_once();
  v22 = __swift_project_value_buffer(v20, (uint64_t)static GenerativeConfigurationKey.samplingParametersKey);
  OUTLINED_FUNCTION_31_2(v3, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
  v44 = v3;
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  v23 = v44;
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
  {
    outlined destroy of BindableConfiguration?(v13, &demangling cache variable for type metadata for BindableConfiguration?);
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
    GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v20);
    outlined init with take of SamplingParametersEnvelope?((uint64_t)&v55, (uint64_t)v47, &demangling cache variable for type metadata for SamplingParametersEnvelope?);
    outlined init with take of SamplingParametersEnvelope?((uint64_t)v47, (uint64_t)v48, &demangling cache variable for type metadata for SamplingParametersEnvelope?);
    if (_s15TokenGeneration26SamplingParametersEnvelopeVSgWOg((uint64_t)v48) == 1)
    {
      _s15TokenGeneration18SamplingParametersVSgWOi0_(v54);
      v24 = v54;
LABEL_9:
      outlined init with take of SamplingParametersEnvelope?((uint64_t)v24, v43, &demangling cache variable for type metadata for SamplingParameters?);
      return;
    }
    v29 = v48[0];
    if (LOBYTE(v48[1]))
    {
      if (LOBYTE(v48[1]) != 1)
        v29 = 0;
    }
    LOBYTE(v55) = v48[3];
    v57 = v48[5];
    v53 = v48[7];
    v52 = v48[9];
    v51 = v48[12];
    v50 = v48[14];
    v49 = v48[16];
    v54[0] = v29;
    LOBYTE(v54[1]) = v48[1];
    v54[2] = v48[2];
    LOBYTE(v54[3]) = v48[3];
    v54[4] = v48[4];
    LOBYTE(v54[5]) = v48[5];
    v54[6] = v48[6];
    LOBYTE(v54[7]) = v48[7];
    v54[8] = v48[8];
    LOBYTE(v54[9]) = v48[9];
    v54[10] = v48[10];
    v54[11] = v48[11];
    LOBYTE(v54[12]) = v48[12];
    v54[13] = v48[13];
    LOBYTE(v54[14]) = v48[14];
    v54[15] = v48[15];
    LOBYTE(v54[16]) = v48[16];
    BYTE1(v54[16]) = 2;
    BYTE2(v54[16]) = BYTE1(v48[16]);
    protocol witness for Hashable.hash(into:) in conformance CachePolicy(v54);
    outlined init with take of SamplingParametersEnvelope?((uint64_t)v54, v43, &demangling cache variable for type metadata for SamplingParameters?);
  }
  else
  {
    v34 = v20;
    v25 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v19, v13, v14);
    v26 = GenerativeConfigurationProtocol.configurationBindings.getter();
    v27 = BindableConfiguration.name.getter();
    specialized Dictionary.subscript.getter(v27, v28, v26, &v55);
    OUTLINED_FUNCTION_61();
    swift_bridgeObjectRelease();
    if (v56)
    {
      if ((OUTLINED_FUNCTION_37_4() & 1) != 0)
      {
        memcpy(v47, v54, 0x83uLL);
        OUTLINED_FUNCTION_19_3();
        OUTLINED_FUNCTION_18_3();
        memcpy(v48, v47, 0x83uLL);
        protocol witness for Hashable.hash(into:) in conformance CachePolicy(v48);
        v24 = v48;
        goto LABEL_9;
      }
    }
    else
    {
      outlined destroy of BindableConfiguration?((uint64_t)&v55, &demangling cache variable for type metadata for Any?);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v35, v19, v14);
    v30 = v36;
    GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableConfigurationErrorInfo.init(bindableConfiguration:)();
    v32 = v37;
    v31 = v38;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v37 + 104))(v30, *MEMORY[0x24BE3B368], v38);
    v33 = v39;
    static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    OUTLINED_FUNCTION_33_2();
    lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError);
    OUTLINED_FUNCTION_3();
    static GenerativeError.runtimeError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v33, v41);
    swift_willThrow();
    OUTLINED_FUNCTION_19_3();
    OUTLINED_FUNCTION_18_3();
  }
}

uint64_t _s15TokenGeneration26SamplingParametersEnvelopeVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

void _s15TokenGeneration18SamplingParametersVSgWOi0_(void *a1)
{
  bzero(a1, 0x83uLL);
}

void outlined init with take of SamplingParametersEnvelope?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  OUTLINED_FUNCTION_104();
}

void outlined destroy of BindableConfiguration?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_104();
}

void GenerativeConfigurationProtocol.draftCache(_:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_9_1();
  if (one-time initialization token for draftCacheKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_3_6();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_20_3();
  if (one-time initialization token for draftCacheKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OverrideHint<[String]>);
  OverrideHint.value.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  OUTLINED_FUNCTION_32_3();
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_6();
}

uint64_t GenerativeConfigurationProtocol.draftCache(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, (uint64_t)&one-time initialization token for draftCacheKey, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
}

uint64_t GenerativeConfigurationProtocol.samplingParameters(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_24_4();
  if (*v6 != -1)
    OUTLINED_FUNCTION_25_2();
  v7 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v7, a5);
  type metadata accessor for BindableConfiguration();
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  OUTLINED_FUNCTION_10_2();
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.draftCache.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a1;
  v2 = OUTLINED_FUNCTION_35_3();
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_178();
  v34 = v4;
  v5 = OUTLINED_FUNCTION_17_2();
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_178();
  v37 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableConfiguration?);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_44_3();
  v11 = v10 - v9;
  v12 = OUTLINED_FUNCTION_36_2();
  v41 = *(_QWORD *)(v12 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_31_0();
  v33 = v14;
  MEMORY[0x24BDAC7A8](v15);
  v40 = (uint64_t)&v32 - v16;
  v17 = OUTLINED_FUNCTION_0_6();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_79_1();
  if (one-time initialization token for draftCacheKey != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v17, (uint64_t)static GenerativeConfigurationKey.draftCacheKey);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v19, v17);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  OUTLINED_FUNCTION_27_2();
  if (__swift_getEnumTagSinglePayload(v11, 1, v12) != 1)
  {
    v32 = v18;
    v21 = v40;
    v22 = v41;
    OUTLINED_FUNCTION_31_2(v40, v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 32));
    v23 = GenerativeConfigurationProtocol.configurationBindings.getter();
    v24 = BindableConfiguration.name.getter();
    specialized Dictionary.subscript.getter(v24, v25, v23, &v43);
    OUTLINED_FUNCTION_61();
    swift_bridgeObjectRelease();
    if (v44)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if ((OUTLINED_FUNCTION_37_4() & 1) != 0)
      {
        v20 = v45;
        OUTLINED_FUNCTION_39_3(*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8));
        OUTLINED_FUNCTION_14_1(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
        return v20;
      }
    }
    else
    {
      outlined destroy of BindableConfiguration?((uint64_t)&v43, &demangling cache variable for type metadata for Any?);
    }
    OUTLINED_FUNCTION_31_2(v33, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16));
    v26 = v34;
    GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableConfigurationErrorInfo.init(bindableConfiguration:)();
    v28 = v35;
    v27 = v36;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v35 + 104))(v26, *MEMORY[0x24BE3B368], v36);
    v29 = v22;
    v30 = v37;
    static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    v20 = OUTLINED_FUNCTION_33_2();
    lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError);
    OUTLINED_FUNCTION_3();
    static GenerativeError.runtimeError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v30, v39);
    swift_willThrow();
    OUTLINED_FUNCTION_39_3(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
    OUTLINED_FUNCTION_14_1(*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8));
    return v20;
  }
  outlined destroy of BindableConfiguration?(v11, &demangling cache variable for type metadata for BindableConfiguration?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_14_1(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  return v43;
}

void GenerativeConfigurationProtocol.grammar(_:)()
{
  uint64_t v0;

  if (one-time initialization token for grammarKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.grammarKey);
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  OUTLINED_FUNCTION_39_1();
}

uint64_t GenerativeConfigurationProtocol.grammar(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.grammar(_:)(a1, a2, a3, (uint64_t)&one-time initialization token for grammarKey, (uint64_t)static GenerativeConfigurationKey.grammarKey);
}

{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, (uint64_t)&one-time initialization token for grammarKey, (uint64_t)static GenerativeConfigurationKey.grammarKey);
}

uint64_t GenerativeConfigurationProtocol.grammar.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.grammar.getter(a1, a2, &one-time initialization token for grammarKey, (uint64_t)static GenerativeConfigurationKey.grammarKey);
}

uint64_t GenerativeConfigurationProtocol.partialGrammar(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.grammar(_:)(a1, a2, a3, (uint64_t)&one-time initialization token for partialGrammarKey, (uint64_t)static GenerativeConfigurationKey.partialGrammarKey);
}

{
  return GenerativeConfigurationProtocol.samplingParameters(_:)(a1, a2, a3, (uint64_t)&one-time initialization token for partialGrammarKey, (uint64_t)static GenerativeConfigurationKey.partialGrammarKey);
}

uint64_t GenerativeConfigurationProtocol.grammar(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;

  OUTLINED_FUNCTION_20_3();
  if (*v6 != -1)
    OUTLINED_FUNCTION_25_2();
  v7 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v7, a5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OverrideHint<String>);
  OverrideHint.value.getter();
  OUTLINED_FUNCTION_32_3();
  GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t GenerativeConfigurationProtocol.partialGrammar.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.grammar.getter(a1, a2, &one-time initialization token for partialGrammarKey, (uint64_t)static GenerativeConfigurationKey.partialGrammarKey);
}

uint64_t GenerativeConfigurationProtocol.grammar.getter(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v6 = OUTLINED_FUNCTION_35_3();
  v50 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_178();
  v49 = v8;
  v9 = OUTLINED_FUNCTION_17_2();
  v53 = *(_QWORD *)(v9 - 8);
  v54 = v9;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_178();
  v52 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableConfiguration?);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_44_3();
  v15 = v14 - v13;
  v16 = OUTLINED_FUNCTION_36_2();
  v55 = *(_QWORD *)(v16 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_31_0();
  v48 = v18;
  MEMORY[0x24BDAC7A8](v19);
  v56 = (char *)v47 - v20;
  v60 = *(_QWORD *)(OUTLINED_FUNCTION_0_6() - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_44_3();
  v25 = v24 - v23;
  if (*a3 != -1)
  {
    v46 = v22;
    swift_once();
    v22 = v46;
  }
  v26 = v22;
  v27 = __swift_project_value_buffer(v22, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16))(v25, v27, v26);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type BindableConfiguration and conformance BindableConfiguration);
  OUTLINED_FUNCTION_27_2();
  if (__swift_getEnumTagSinglePayload(v15, 1, v16) != 1)
  {
    v29 = v16;
    v47[1] = v26;
    v30 = v60;
    v31 = v55;
    v32 = v15;
    v33 = v29;
    (*(void (**)(char *, uint64_t))(v55 + 32))(v56, v32);
    v34 = GenerativeConfigurationProtocol.configurationBindings.getter();
    v35 = BindableConfiguration.name.getter();
    specialized Dictionary.subscript.getter(v35, v36, v34, &v58);
    OUTLINED_FUNCTION_61();
    swift_bridgeObjectRelease();
    if (v59)
    {
      if ((OUTLINED_FUNCTION_37_4() & 1) != 0)
      {
        v28 = v57;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v56, v33);
        OUTLINED_FUNCTION_28_2(*(uint64_t (**)(uint64_t, _QWORD))(v30 + 8));
        return v28;
      }
    }
    else
    {
      outlined destroy of BindableConfiguration?((uint64_t)&v58, &demangling cache variable for type metadata for Any?);
    }
    v37 = v30;
    v38 = v56;
    v39 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v48, v56, v33);
    v40 = v31;
    v41 = v49;
    GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType.UnboundBindableConfigurationErrorInfo.init(bindableConfiguration:)();
    v43 = v50;
    v42 = v51;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v41, *MEMORY[0x24BE3B368], v51);
    v44 = v52;
    static GenerativeError.RuntimeError.ErrorType.configurationError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
    OUTLINED_FUNCTION_33_2();
    lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError);
    v28 = v40;
    OUTLINED_FUNCTION_3();
    static GenerativeError.runtimeError(type:)();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v44, v54);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    OUTLINED_FUNCTION_28_2(*(uint64_t (**)(uint64_t, _QWORD))(v37 + 8));
    return v28;
  }
  outlined destroy of BindableConfiguration?(v15, &demangling cache variable for type metadata for BindableConfiguration?);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v25, v26);
  return v58;
}

uint64_t GenerativeConfigurationProtocol.schema.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.schema.getter(a1, a2, (uint64_t)&one-time initialization token for schemaKey, (uint64_t)static GenerativeConfigurationKey.schemaKey, (void (*)(_QWORD))MEMORY[0x24BE3B9A0]);
}

uint64_t GenerativeConfigurationProtocol.schema(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.schema(_:)(a1, a2, a3, &one-time initialization token for schemaKey, (uint64_t)static GenerativeConfigurationKey.schemaKey, (void (*)(_QWORD))MEMORY[0x24BE3B9A0]);
}

void GenerativeConfigurationProtocol.documents(_:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_9_1();
  if (one-time initialization token for documentsKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.documentsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_3_6();
}

void lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A](uint64_t a1)
{
  if (!OUTLINED_FUNCTION_393(a1))
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
    OUTLINED_FUNCTION_30_3();
    OUTLINED_FUNCTION_16_2();
  }
  OUTLINED_FUNCTION_39_1();
}

void GenerativeConfigurationProtocol.documents.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_270();
  if (one-time initialization token for documentsKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.documentsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DocumentResourceIdentifier]);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  lazy protocol witness table accessor for type [DocumentResourceIdentifier] and conformance <A> [A]((uint64_t)&lazy protocol witness table cache variable for type [DocumentResourceIdentifier] and conformance <A> [A]);
  GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
  OUTLINED_FUNCTION_39_1();
}

void GenerativeConfigurationProtocol.tools(_:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_9_1();
  if (one-time initialization token for toolsKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.toolsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Tool]);
  GenerativeConfigurationProtocol._setRunnableConfiguration<A>(_:value:)();
  OUTLINED_FUNCTION_39_1();
}

void GenerativeConfigurationProtocol.tools.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_270();
  if (one-time initialization token for toolsKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.toolsKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Tool]);
  GenerativeConfigurationProtocol._getRunnableConfiguration<A>(for:type:)();
  OUTLINED_FUNCTION_218_0();
}

uint64_t GenerativeConfigurationProtocol.toolChoice(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return GenerativeConfigurationProtocol.schema(_:)(a1, a2, a3, &one-time initialization token for toolChoiceKey, (uint64_t)static GenerativeConfigurationKey.toolChoiceKey, (void (*)(_QWORD))MEMORY[0x24BE3B510]);
}

uint64_t GenerativeConfigurationProtocol.schema(_:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, void (*a6)(_QWORD))
{
  uint64_t v8;

  if (*a4 != -1)
    swift_once();
  v8 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v8, a5);
  a6(0);
  return GenerativeConfigurationProtocol._setRunnableConfiguration<A>(_:value:)();
}

uint64_t GenerativeConfigurationProtocol.toolChoice.getter(uint64_t a1, uint64_t a2)
{
  return GenerativeConfigurationProtocol.schema.getter(a1, a2, (uint64_t)&one-time initialization token for toolChoiceKey, (uint64_t)static GenerativeConfigurationKey.toolChoiceKey, (void (*)(_QWORD))MEMORY[0x24BE3B510]);
}

uint64_t GenerativeConfigurationProtocol.schema.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  _QWORD *v7;
  uint64_t v8;

  OUTLINED_FUNCTION_270();
  if (*v7 != -1)
    OUTLINED_FUNCTION_25_2();
  v8 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v8, a4);
  a5(0);
  return GenerativeConfigurationProtocol._getRunnableConfiguration<A>(for:type:)();
}

uint64_t GenerativeConfigurationProtocol<>.locale(_:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_24_4();
  if (one-time initialization token for localeKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.localeKey);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  lazy protocol witness table accessor for type Locale? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?);
  lazy protocol witness table accessor for type Locale? and conformance <A> A?((uint64_t)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?);
  OUTLINED_FUNCTION_10_2();
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

void lazy protocol witness table accessor for type Locale? and conformance <A> A?(uint64_t a1)
{
  if (!OUTLINED_FUNCTION_393(a1))
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    OUTLINED_FUNCTION_30_3();
    OUTLINED_FUNCTION_16_2();
  }
  OUTLINED_FUNCTION_39_1();
}

void lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(uint64_t a1)
{
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!OUTLINED_FUNCTION_393(a1))
  {
    v4 = v3;
    v5 = v2(255);
    atomic_store(MEMORY[0x2495A740C](v4, v5), v1);
  }
  OUTLINED_FUNCTION_104();
}

uint64_t GenerativeConfigurationProtocol<>.locale.getter()
{
  uint64_t v0;

  OUTLINED_FUNCTION_270();
  if (one-time initialization token for localeKey != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_0_6();
  __swift_project_value_buffer(v0, (uint64_t)static GenerativeConfigurationKey.localeKey);
  type metadata accessor for Locale();
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration((uint64_t)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  return GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  return type metadata accessor for GenerativeConfigurationKey();
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return GenerativeConfigurationProtocol._setOverridableConfiguration<A>(_:value:)();
}

unint64_t OUTLINED_FUNCTION_6_5()
{
  return lazy protocol witness table accessor for type SamplingParametersEnvelope and conformance SamplingParametersEnvelope();
}

void OUTLINED_FUNCTION_7_3(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 232) = a1;
}

uint64_t OUTLINED_FUNCTION_10_2()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_14_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void OUTLINED_FUNCTION_16_2()
{
  JUMPOUT(0x2495A740CLL);
}

uint64_t OUTLINED_FUNCTION_17_2()
{
  return type metadata accessor for GenerativeError.RuntimeError.ErrorType();
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  _QWORD *v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 8))(v0[11], *v0);
}

uint64_t OUTLINED_FUNCTION_19_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return swift_once();
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return GenerativeConfigurationProtocol._getOverridableConfiguration<A>(for:type:)();
}

uint64_t OUTLINED_FUNCTION_28_2@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 216));
}

void OUTLINED_FUNCTION_30_3()
{
  uint64_t v0;

  lazy protocol witness table accessor for type BindableConfiguration and conformance BindableConfiguration(v0);
}

uint64_t OUTLINED_FUNCTION_31_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_32_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_33_2()
{
  return type metadata accessor for GenerativeError();
}

uint64_t OUTLINED_FUNCTION_35_3()
{
  return type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return type metadata accessor for BindableConfiguration();
}

uint64_t OUTLINED_FUNCTION_37_4()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_39_3@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t TokenGenerator._tokenCount<A>(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = OUTLINED_FUNCTION_16_3(a1, a2, a3);
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = OUTLINED_FUNCTION_98();
  v4[16] = *(_QWORD *)(v3 - 8);
  v6 = OUTLINED_FUNCTION_98();
  v7 = OUTLINED_FUNCTION_26_1(v6);
  v8 = OUTLINED_FUNCTION_4_2(v7);
  v4[21] = OUTLINED_FUNCTION_31_3(v8);
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_2_2();
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = OUTLINED_FUNCTION_16_3(a1, a2, a3);
  v4[13] = v5;
  v4[14] = *(_QWORD *)(v5 - 8);
  v4[15] = OUTLINED_FUNCTION_98();
  v4[16] = *(_QWORD *)(v3 - 8);
  v6 = OUTLINED_FUNCTION_98();
  v7 = OUTLINED_FUNCTION_26_1(v6);
  v8 = OUTLINED_FUNCTION_4_2(v7);
  v4[21] = OUTLINED_FUNCTION_31_3(v8);
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_2_2();
}

uint64_t TokenGenerator._tokenCount<A>(configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_13_4();
  v1 = swift_bridgeObjectRelease();
  v9 = OUTLINED_FUNCTION_15_2(v1, v2, v3, v4, v5, v6, v7, v8, v31);
  OUTLINED_FUNCTION_14_2(v9, v10, v11, v12, v13, v14, v15, v16, v32, v34);
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_2_8(v17, v18, v19, v20, v21, v22, v23, v24, v33, v35, v36, v37, v38, v25, v39);
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v26;
  v27 = OUTLINED_FUNCTION_23_2(v26);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v27, v28, v29);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;

  OUTLINED_FUNCTION_6_6();
  if (v0)
  {
    OUTLINED_FUNCTION_30_4();
    OUTLINED_FUNCTION_213();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_134();
    return OUTLINED_FUNCTION_2_2();
  }
  else
  {
    OUTLINED_FUNCTION_8_3();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 232) = v3;
    v4 = OUTLINED_FUNCTION_19_4(v3, (uint64_t)TokenGenerator._tokenCount<A>(configuration:));
    return OUTLINED_FUNCTION_9_2(v4, v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_3_7();
  if (v0)
  {
    OUTLINED_FUNCTION_11_4(*(_QWORD *)(v1 + 112));
  }
  else
  {
    OUTLINED_FUNCTION_5_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_186();
  }
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_2_2();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  swift_task_dealloc();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  return OUTLINED_FUNCTION_17_3(*(_QWORD *)(v0 + 264), *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_11_4(*(_QWORD *)(v0 + 152));
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  return OUTLINED_FUNCTION_10_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_11_4(*(_QWORD *)(v0 + 152));
  OUTLINED_FUNCTION_112();
  OUTLINED_FUNCTION_186();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_213();
  OUTLINED_FUNCTION_22_2();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  return OUTLINED_FUNCTION_10_3(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_13_4();
  v1 = swift_bridgeObjectRelease();
  v9 = OUTLINED_FUNCTION_15_2(v1, v2, v3, v4, v5, v6, v7, v8, v31);
  OUTLINED_FUNCTION_14_2(v9, v10, v11, v12, v13, v14, v15, v16, v32, v34);
  OUTLINED_FUNCTION_12_2();
  OUTLINED_FUNCTION_2_8(v17, v18, v19, v20, v21, v22, v23, v24, v33, v35, v36, v37, v38, v25, v39);
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v26;
  v27 = OUTLINED_FUNCTION_23_2(v26);
  return GenerativeConfigurationProtocol<>.renderToTokenGenerationPrompt()(v27, v28, v29);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;

  OUTLINED_FUNCTION_6_6();
  if (v0)
  {
    OUTLINED_FUNCTION_30_4();
    OUTLINED_FUNCTION_213();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_134();
    return OUTLINED_FUNCTION_2_2();
  }
  else
  {
    OUTLINED_FUNCTION_8_3();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v1 + 232) = v3;
    v4 = OUTLINED_FUNCTION_19_4(v3, (uint64_t)TokenGenerator._tokenCount<A>(configuration:));
    return OUTLINED_FUNCTION_9_2(v4, v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_3_7();
  if (v0)
  {
    OUTLINED_FUNCTION_11_4(*(_QWORD *)(v1 + 112));
  }
  else
  {
    OUTLINED_FUNCTION_5_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_112();
    OUTLINED_FUNCTION_61();
    OUTLINED_FUNCTION_186();
  }
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_2_2();
}

uint64_t protocol witness for CompletionLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for CompletionLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator;
  return TokenGenerator._tokenCount<A>(configuration:)(a1, a2, a3);
}

uint64_t protocol witness for ChatLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for ChatLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator;
  return TokenGenerator._tokenCount<A>(configuration:)(a1, a2, a3);
}

uint64_t protocol witness for ChatLanguageModelProvidingTokenCountable._tokenCount<A>(configuration:) in conformance TokenGenerator(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = swift_task_dealloc();
  if (!v1)
    v4 = a1;
  return OUTLINED_FUNCTION_17_3(v4, *(uint64_t (**)(void))(v6 + 8));
}

__n128 OUTLINED_FUNCTION_2_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13, __n128 a14, uint64_t a15)
{
  uint64_t v15;
  __n128 result;

  *(_QWORD *)(v15 + 176) = a11;
  *(_OWORD *)(v15 + 184) = a12;
  *(_QWORD *)(v15 + 200) = a13;
  result = a14;
  *(__n128 *)(v15 + 208) = a14;
  *(_QWORD *)(v15 + 224) = a15;
  return result;
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 256) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_4_2(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 144) = a1;
  *(_QWORD *)(v1 + 152) = *(_QWORD *)(a1 - 8);
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_5_6()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[14];
  v2 = v1[15];
  v4 = v1[13];
  v1[33] = v0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 240) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return TokenGenerator.useCaseID.getter();
}

__n128 OUTLINED_FUNCTION_8_3()
{
  unint64_t v0;
  uint64_t v1;
  __n128 *v2;
  unint64_t v3;
  __n128 result;

  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v1 + 176);
  v2 = (__n128 *)(v1 + 16);
  v3 = v2[13].n128_u64[0];
  v2[1].n128_u64[0] = v2[11].n128_u64[0];
  v2[1].n128_u64[1] = v0;
  result = v2[12];
  v2[2] = result;
  v2[3].n128_u64[0] = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_2(uint64_t a1, uint64_t *a2)
{
  return TokenGenerator.countTokens(in:metadata:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_10_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_11_4@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void OUTLINED_FUNCTION_12_2()
{
  RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)();
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  return GenerativeConfigurationProtocol.generateGenerativeFunctionInstrumenter(useCaseIdentifier:)();
}

uint64_t OUTLINED_FUNCTION_14_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a10 + 16))(v10, v12, v11);
}

uint64_t OUTLINED_FUNCTION_15_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, a9);
}

uint64_t OUTLINED_FUNCTION_16_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  return type metadata accessor for Prompt();
}

uint64_t OUTLINED_FUNCTION_17_3(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_19_4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return *(_QWORD *)(v2 + 104);
}

uint64_t OUTLINED_FUNCTION_22_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_23_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 120);
}

uint64_t OUTLINED_FUNCTION_26_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = a1;
  return type metadata accessor for GenerativeFunctionInstrumenter();
}

uint64_t OUTLINED_FUNCTION_30_4()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_31_3(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 160) = a1;
  return swift_task_alloc();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY0_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[7];
  type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(0);
  v2 = OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_73_3(v2);
  OUTLINED_FUNCTION_177_2(v1);
  v3 = (_QWORD *)swift_task_alloc();
  v0[8] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TQ1_;
  return OUTLINED_FUNCTION_408_0(v0[3], v0[7], v0[6]);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TQ1_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_144_2();
  OUTLINED_FUNCTION_114_2(v3);
  *(_QWORD *)(v1 + 72) = v0;
  v4 = swift_task_dealloc();
  OUTLINED_FUNCTION_101_1(v4, &demangling cache variable for type metadata for GenerativeFunctionInstrumenter?);
  if (v0)
  {
    OUTLINED_FUNCTION_134();
    return OUTLINED_FUNCTION_32_4();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY2_()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
  {
    OUTLINED_FUNCTION_643_0();
    OUTLINED_FUNCTION_637_0();
    OUTLINED_FUNCTION_736();
  }
  else
  {
    OUTLINED_FUNCTION_735();
  }
  return OUTLINED_FUNCTION_2_2();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration0E39GeneratorResponsePromptCompletionStreamV13AsyncIteratorV_Tg5TY3_()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  OUTLINED_FUNCTION_71();
  return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration22PromptCompletionStreamV13AsyncIteratorV_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  return OUTLINED_FUNCTION_20_1();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration22PromptCompletionStreamV13AsyncIteratorV_Tg5TY0_()
{
  uint64_t v0;
  _QWORD *v1;

  static Task<>.checkCancellation()();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  *v1 = v0;
  v1[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration22PromptCompletionStreamV13AsyncIteratorV_Tg5TQ1_;
  return AsyncThrowingStream.Iterator.next()();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration22PromptCompletionStreamV13AsyncIteratorV_Tg5TQ1_()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *v1;
  v5 = *v1;
  v3 = *v1;
  OUTLINED_FUNCTION_256_1(&v5);
  if (!v0)
    return OUTLINED_FUNCTION_10_4(*(uint64_t (**)(void))(v3 + 8));
  *(_QWORD *)(v2 + 64) = v0;
  if (*(_QWORD *)(v2 + 32))
  {
    OUTLINED_FUNCTION_643_0();
    OUTLINED_FUNCTION_637_0();
    OUTLINED_FUNCTION_736();
  }
  else
  {
    OUTLINED_FUNCTION_735();
  }
  return OUTLINED_FUNCTION_2_2();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF15TokenGeneration22PromptCompletionStreamV13AsyncIteratorV_Tg5TY2_()
{
  uint64_t v0;
  uint64_t (*v1)(void);

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_743();
  return OUTLINED_FUNCTION_114(v1);
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2[3] = a1;
  v2[4] = a2;
  v3 = (_QWORD *)swift_task_alloc();
  v2[5] = v3;
  *v3 = v2;
  v3[1] = _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TQ0_;
  return TokenGeneratorResponseStringStreamAsyncIterator.next()();
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TQ0_()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_215_1();
  if (v0)
  {
    if (*(_QWORD *)(v1 + 24))
    {
      OUTLINED_FUNCTION_643_0();
      OUTLINED_FUNCTION_637_0();
      OUTLINED_FUNCTION_736();
    }
    else
    {
      OUTLINED_FUNCTION_735();
    }
    return OUTLINED_FUNCTION_2_2();
  }
  else
  {
    v2 = OUTLINED_FUNCTION_195_0();
    return OUTLINED_FUNCTION_404_0(v2, v3, v4);
  }
}

uint64_t _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF16GenerativeModels47TokenGeneratorResponseStringStreamAsyncIteratorV_Tg5TY1_()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 48);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  return OUTLINED_FUNCTION_114(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay15TokenGeneration6PromptV14ToolCallResultVG_AH4TurnVs5NeverOTg5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v19)(_QWORD *);
  _QWORD v20[5];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  OUTLINED_FUNCTION_6_2();
  v22 = v2;
  v23 = v3;
  v4 = v0;
  v6 = v5;
  v19 = v7;
  v8 = type metadata accessor for Prompt.Turn(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_68_0();
  v10 = *(_QWORD *)(v6 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v21 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    v11 = v21;
    v12 = (uint64_t *)(v6 + 56);
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = *v12;
      v20[0] = *(v12 - 3);
      v20[1] = v13;
      v20[2] = v14;
      v20[3] = v15;
      OUTLINED_FUNCTION_11();
      swift_bridgeObjectRetain();
      v19(v20);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_46_0();
      v21 = v11;
      v16 = *(_QWORD *)(v11 + 16);
      if (v16 >= *(_QWORD *)(v11 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        v11 = v21;
      }
      v12 += 4;
      *(_QWORD *)(v11 + 16) = v16 + 1;
      OUTLINED_FUNCTION_117_0();
      outlined init with take of TokenGenerationError(v1, v11 + v17 + *(_QWORD *)(v9 + 72) * v16, type metadata accessor for Prompt.Turn);
      if (!--v10)
        return v11;
    }
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_46_0();
  }
  return v11;
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((a4 & 1) == 0)
    goto LABEL_2;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
  }
  v11 = *(_QWORD *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    v9 = v8;
    goto LABEL_9;
  }
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x24BEE4AF8];
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

void _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF16GenerativeModels39StringRenderedPromptSanitizerWithRunnerV_s5NeverO0cD10Foundation0efghI13ConfigurationVTg5Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t *v3;
  uint64_t *v4;
  void (*v5)(char *);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *);
  uint64_t (*v20)(_QWORD);

  OUTLINED_FUNCTION_6_2();
  v20 = v2;
  v4 = v3;
  v19 = v5;
  v7 = v6;
  v9 = v8(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - v11;
  __swift_instantiateConcreteTypeFromMangledName(v4);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_118_1();
  v14 = OUTLINED_FUNCTION_641_0();
  outlined init with copy of TokenStream<String>(v14, v15, v4);
  v16 = 1;
  if (__swift_getEnumTagSinglePayload(v1, 1, v9) == 1)
    goto LABEL_5;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, v1, v9);
  v19(v12);
  if (!v0)
  {
    OUTLINED_FUNCTION_595_0();
    v16 = 0;
LABEL_5:
    v17 = v20(0);
    __swift_storeEnumTagSinglePayload(v7, v16, 1, v17);
    goto LABEL_6;
  }
  OUTLINED_FUNCTION_595_0();
LABEL_6:
  OUTLINED_FUNCTION_2_4();
}

uint64_t TokenGenerator.useCaseID.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    OUTLINED_FUNCTION_40_0();
  return OUTLINED_FUNCTION_260();
}

void RequestMetadata.init<A>(generativeFunctionInstrumenter:configuration:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_7_0();
  v2 = v1;
  v4 = v3;
  v42 = v5;
  v7 = v6;
  v8 = type metadata accessor for UUID();
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_289_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ClientInfoSessionTrackingConfig?);
  OUTLINED_FUNCTION_3_2();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_68_0();
  v11 = type metadata accessor for _ClientInfoSessionTrackingConfig();
  v39 = *(_QWORD *)(v11 - 8);
  OUTLINED_FUNCTION_159();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Dictionary.init(dictionaryLiteral:)();
  v43 = v4;
  if (GenerativeConfigurationProtocol.trackingConfig.getter())
  {
    v16 = OUTLINED_FUNCTION_458_0();
    v44 = v15;
    OUTLINED_FUNCTION_290_1(v16, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), v17, v16);
    v15 = v44;
    OUTLINED_FUNCTION_453_0();
  }
  if (GenerativeConfigurationProtocol._internalTrackingConfig.getter())
  {
    v18 = OUTLINED_FUNCTION_458_0();
    v44 = v15;
    OUTLINED_FUNCTION_290_1(v18, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), v19, v18);
    v15 = v44;
    OUTLINED_FUNCTION_453_0();
  }
  GenerativeConfigurationProtocol._internalSessionTrackingConfig.getter();
  v20 = OUTLINED_FUNCTION_52_2(v0, 1, v11);
  if (v21)
  {
    OUTLINED_FUNCTION_352_0(v20, &demangling cache variable for type metadata for _ClientInfoSessionTrackingConfig?);
  }
  else
  {
    OUTLINED_FUNCTION_586_0((uint64_t)v14, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32));
    _ClientInfoSessionTrackingConfig.sessionTrackingConifg.getter();
    v22 = OUTLINED_FUNCTION_458_0();
    v44 = v15;
    OUTLINED_FUNCTION_290_1(v22, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), v23, v22);
    v24 = v44;
    OUTLINED_FUNCTION_453_0();
    _ClientInfoSessionTrackingConfig._internalSessionTrackingConfig.getter();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v44 = v24;
    OUTLINED_FUNCTION_290_1(isUniquelyReferenced_nonNull_native, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), v26, isUniquelyReferenced_nonNull_native);
    v15 = v44;
    OUTLINED_FUNCTION_453_0();
    OUTLINED_FUNCTION_396_0((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
  }
  v27 = v42;
  GenerativeFunctionInstrumenter.invocationIdentifier.getter();
  v28 = UUID.uuidString.getter();
  v30 = v29;
  OUTLINED_FUNCTION_697(v40);
  v31 = GenerativeFunctionInstrumenter.functionIdentifier.getter();
  v33 = v32;
  v34 = GenerativeFunctionInstrumenter.clientRequestIdentifier.getter();
  v36 = v35;
  OUTLINED_FUNCTION_183_1(v43, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8));
  v37 = OUTLINED_FUNCTION_56_3();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v27, v37);
  *v7 = v28;
  v7[1] = v30;
  v7[2] = v31;
  v7[3] = v33;
  v7[4] = v34;
  v7[5] = v36;
  v7[6] = v15;
  OUTLINED_FUNCTION_4_1();
}

void static TokenGenerator.map(tokenGenerationError:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_QWORD);
  char *v27;
  _QWORD v28[2];
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;

  v55 = a2;
  v56 = a1;
  v2 = type metadata accessor for GenerativeError.ToolError.ErrorContext();
  v48 = *(_QWORD *)(v2 - 8);
  v49 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v45 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v43 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GenerativeError.DocumentError.ErrorContext();
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v44 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DocumentResource();
  v41 = *(_QWORD *)(v8 - 8);
  v42 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v40 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType.ResourceUnavailableErrorInfo.AssetType();
  v37 = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  v38 = type metadata accessor for GenerativeError.PromptError.ErrorType();
  MEMORY[0x24BDAC7A8](v38);
  v10 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v51 = *(_QWORD *)(v10 - 8);
  v52 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Locale();
  v28[1] = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v28[0] = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for InferenceError.Context();
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v31 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InferenceError?);
  MEMORY[0x24BDAC7A8](v14);
  v50 = type metadata accessor for InferenceError();
  v34 = *(_QWORD *)(v50 - 8);
  v15 = MEMORY[0x24BDAC7A8](v50);
  MEMORY[0x24BDAC7A8](v15);
  v35 = (char *)v28 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v30 = (char *)v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v18);
  v36 = (char *)v28 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v54 = (char *)v28 - v22;
  v23 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  MEMORY[0x24BDAC7A8](v23);
  v24 = type metadata accessor for TokenGenerationError(0);
  MEMORY[0x24BDAC7A8](v24);
  outlined init with copy of PromptCompletion(v56, (uint64_t)v28 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v26);
  v27 = (char *)&loc_248B7F06C + dword_248B7F90C[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_248B7F07C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(void **)(v0 + 16);
  swift_bridgeObjectRelease();

  v3 = *(_QWORD *)(v1 - 112);
  v4 = type metadata accessor for GenerativeError();
  return __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _BYTE *v7;
  char v9;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    v6 = v9;
  }
  else
  {
    MEMORY[0x24BDAC7A8](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (v7 = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v4 = _StringObject.sharedUTF8.getter();
      }
      v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if ((v6 & 1) != 0)
    return 0;
  else
    return 0;
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v4 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  v5 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v6 = type metadata accessor for BindableVariable();
  v3[15] = v6;
  v3[16] = *(_QWORD *)(v6 - 8);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v7 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v3[19] = v7;
  v3[20] = *(_QWORD *)(v7 - 8);
  v3[21] = swift_task_alloc();
  v8 = type metadata accessor for Prompt.RenderError();
  v3[22] = v8;
  v3[23] = *(_QWORD *)(v8 - 8);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v9 = type metadata accessor for ModelManagerError();
  v3[28] = v9;
  v3[29] = *(_QWORD *)(v9 - 8);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = type metadata accessor for TokenGenerationError(0);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v10 = type metadata accessor for GenerativeFunctionInstrumenter();
  v3[46] = v10;
  v3[47] = *(_QWORD *)(v10 - 8);
  v3[48] = swift_task_alloc();
  v11 = type metadata accessor for GenerativeError();
  v3[49] = v11;
  v3[50] = *(_QWORD *)(v11 - 8);
  v3[51] = swift_task_alloc();
  v3[52] = swift_task_alloc();
  v3[53] = type metadata accessor for TokenGenerator();
  v12 = (_QWORD *)swift_task_alloc();
  v3[54] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<PromptCompletionEvent, Error>.Iterator);
  *v12 = v3;
  v12[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return AsyncThrowingStream.Iterator.next()();
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_228_1();
  *(_QWORD *)(v1 + 440) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_58();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_413_0();
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 48) + 24))
  {
    type metadata accessor for TokenGeneratorResponsePromptCompletionStream.AsyncIterator(0);
    OUTLINED_FUNCTION_301_0();
    GenerativeFunctionInstrumenter.inferenceEnd()();
    OUTLINED_FUNCTION_325_0();
    OUTLINED_FUNCTION_301_0();
    OUTLINED_FUNCTION_371_0();
    OUTLINED_FUNCTION_325_0();
  }
  OUTLINED_FUNCTION_343();
  OUTLINED_FUNCTION_581();
  swift_task_dealloc();
  OUTLINED_FUNCTION_147();
  OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_160_2();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_36_3();
  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_40_4();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_64_4();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_79_2();
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_141_2();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_195_1();
  OUTLINED_FUNCTION_250_1();
  OUTLINED_FUNCTION_208_2();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_52_4();
  return OUTLINED_FUNCTION_111_1(v1);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_228_1();
  *(_QWORD *)(v1 + 448) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_58();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_228_1();
  *(_QWORD *)(v1 + 416) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_58();
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_147_2();
  OUTLINED_FUNCTION_281_0();
  OUTLINED_FUNCTION_558_0();
  swift_release();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_147();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_36_3();
  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_40_4();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_64_4();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_79_2();
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_141_2();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_184_2();
  OUTLINED_FUNCTION_226_1();
  OUTLINED_FUNCTION_195_1();
  OUTLINED_FUNCTION_250_1();
  OUTLINED_FUNCTION_208_2();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_52_4();
  return OUTLINED_FUNCTION_71_2(v0);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_413_0();
  OUTLINED_FUNCTION_333_0();
  if (v0)
  {
    OUTLINED_FUNCTION_134();
    return OUTLINED_FUNCTION_286_1();
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_47_0();
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_43_2();
    OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_79_2();
    OUTLINED_FUNCTION_78_2();
    OUTLINED_FUNCTION_141_2();
    OUTLINED_FUNCTION_152_1();
    OUTLINED_FUNCTION_195_1();
    OUTLINED_FUNCTION_250_1();
    OUTLINED_FUNCTION_208_2();
    OUTLINED_FUNCTION_68();
    v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_52_4();
    return OUTLINED_FUNCTION_111_1(v2);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_146();
  OUTLINED_FUNCTION_228_1();
  *(_QWORD *)(v1 + 424) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_134();
  return OUTLINED_FUNCTION_58();
}

void specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  OUTLINED_FUNCTION_147_2();
  v1 = OUTLINED_FUNCTION_733(*(_QWORD *)(v0 + 440));
  MEMORY[0x2495A7370](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v2 = OUTLINED_FUNCTION_98_1();
  v3 = *(_QWORD *)(v0 + 440);
  if (!v2)
  {
    OUTLINED_FUNCTION_503_0();
    *(_QWORD *)(v0 + 24) = v3;
    OUTLINED_FUNCTION_287();
  }
  v4 = *(_QWORD *)(v0 + 408);
  v5 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 56);
  OUTLINED_FUNCTION_160_0();
  OUTLINED_FUNCTION_48_1(v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, (void (*)(uint64_t))MEMORY[0x24BE3B470]);
  v8 = OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_48_1(v9, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  OUTLINED_FUNCTION_100_2(v8, v7);
  if (v3)
  {
    OUTLINED_FUNCTION_11_4(*(_QWORD *)(v0 + 400));
    OUTLINED_FUNCTION_7_2();

    OUTLINED_FUNCTION_437_0(*(_QWORD *)(v0 + 88));
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_47_0();
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_43_2();
    OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_79_2();
    OUTLINED_FUNCTION_78_2();
    OUTLINED_FUNCTION_141_2();
    OUTLINED_FUNCTION_152_1();
    OUTLINED_FUNCTION_184_2();
    OUTLINED_FUNCTION_226_1();
    OUTLINED_FUNCTION_195_1();
    OUTLINED_FUNCTION_250_1();
    v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_533_0();
    OUTLINED_FUNCTION_71_2(v10);
  }
  else
  {
    OUTLINED_FUNCTION_93_2();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);

  OUTLINED_FUNCTION_147_2();
  v1 = OUTLINED_FUNCTION_733(v0[52]);
  MEMORY[0x2495A7370](v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v2 = OUTLINED_FUNCTION_98_1();
  v3 = v0[52];
  if (!v2)
  {
    OUTLINED_FUNCTION_503_0();
    v0[3] = v3;
    OUTLINED_FUNCTION_287();
  }
  v4 = v0[48];
  v5 = v0[49];
  v6 = v0[47];
  v7 = v0[6];
  OUTLINED_FUNCTION_160_0();
  OUTLINED_FUNCTION_48_1(v4, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, (void (*)(uint64_t))MEMORY[0x24BE3B470]);
  v8 = OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_48_1(v9, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
  OUTLINED_FUNCTION_100_2(v8, v7);
  if (v3)
  {
    OUTLINED_FUNCTION_11_4(v0[47]);
    OUTLINED_FUNCTION_7_2();
    OUTLINED_FUNCTION_504();
    swift_release();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_378_0();
    OUTLINED_FUNCTION_559_0();
    OUTLINED_FUNCTION_437_0(v0[11]);
    OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_43_2();
    OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_79_2();
    OUTLINED_FUNCTION_78_2();
    OUTLINED_FUNCTION_141_2();
    OUTLINED_FUNCTION_152_1();
    OUTLINED_FUNCTION_184_2();
    OUTLINED_FUNCTION_226_1();
    OUTLINED_FUNCTION_195_1();
    OUTLINED_FUNCTION_250_1();
    v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_742();
    OUTLINED_FUNCTION_71_2(v10);
  }
  else
  {
    OUTLINED_FUNCTION_93_2();
  }
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_147_2();
  OUTLINED_FUNCTION_733(*(_QWORD *)(v0 + 400));
  OUTLINED_FUNCTION_655_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_147_2();
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 424);
  OUTLINED_FUNCTION_655_0();
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2[8] = a1;
  v2[9] = a2;
  v3 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v4 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v5 = type metadata accessor for BindableVariable();
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v6 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v2[20] = v6;
  v2[21] = *(_QWORD *)(v6 - 8);
  v2[22] = swift_task_alloc();
  v7 = type metadata accessor for Prompt.RenderError();
  v2[23] = v7;
  v2[24] = *(_QWORD *)(v7 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v8 = type metadata accessor for ModelManagerError();
  v2[29] = v8;
  v2[30] = *(_QWORD *)(v8 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = type metadata accessor for TokenGenerationError(0);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v9 = type metadata accessor for GenerativeFunctionInstrumenter();
  v2[47] = v9;
  v2[48] = *(_QWORD *)(v9 - 8);
  v2[49] = swift_task_alloc();
  v10 = type metadata accessor for GenerativeError();
  v2[50] = v10;
  v2[51] = *(_QWORD *)(v10 - 8);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = type metadata accessor for TokenGenerator();
  v11 = (_QWORD *)swift_task_alloc();
  v2[55] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingStream<String, Error>.Iterator);
  *v11 = v2;
  v11[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return AsyncThrowingStream.Iterator.next()();
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  OUTLINED_FUNCTION_147_2();
  v44 = v30[3];
  v45 = v30[2];
  if (!v44)
  {
    type metadata accessor for TokenGeneratorResponseStringStreamAsyncIterator(0);
    OUTLINED_FUNCTION_301_0();
    GenerativeFunctionInstrumenter.inferenceEnd()();
    OUTLINED_FUNCTION_325_0();
    OUTLINED_FUNCTION_301_0();
    OUTLINED_FUNCTION_371_0();
    OUTLINED_FUNCTION_325_0();
  }
  v40 = v30[38];
  v41 = v30[37];
  OUTLINED_FUNCTION_378_0();
  OUTLINED_FUNCTION_559_0();
  v42 = v30[22];
  v43 = v30[19];
  OUTLINED_FUNCTION_669_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_147();
  OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_160_2();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_36_3();
  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_40_4();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_64_4();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_79_2();
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_141_2();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_184_2();
  OUTLINED_FUNCTION_226_1();
  OUTLINED_FUNCTION_195_1();
  OUTLINED_FUNCTION_93_2();
  return v33(v31, v32, v33, v34, v35, v36, v37, v38, v40, v41, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           v42,
           v43,
           a23,
           a24,
           a25,
           v44,
           v45,
           a28,
           a29,
           a30);
}

{
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  OUTLINED_FUNCTION_147_2();
  OUTLINED_FUNCTION_343();
  OUTLINED_FUNCTION_581();
  v41 = v31;
  v42 = v30[22];
  v43 = v30[19];
  v44 = v30[18];
  v45 = v30[15];
  v48 = v30[3];
  v49 = v30[2];
  v46 = v30[12];
  v47 = v30[4];
  swift_task_dealloc();
  OUTLINED_FUNCTION_42();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_66();
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_147();
  OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_71();
  OUTLINED_FUNCTION_160_2();
  OUTLINED_FUNCTION_47_0();
  OUTLINED_FUNCTION_36_3();
  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_40_4();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_43_2();
  OUTLINED_FUNCTION_46_3();
  OUTLINED_FUNCTION_64_4();
  OUTLINED_FUNCTION_75_2();
  OUTLINED_FUNCTION_79_2();
  OUTLINED_FUNCTION_78_2();
  OUTLINED_FUNCTION_141_2();
  OUTLINED_FUNCTION_152_1();
  OUTLINED_FUNCTION_184_2();
  OUTLINED_FUNCTION_226_1();
  OUTLINED_FUNCTION_93_2();
  return v35(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, v41,
           v42,
           v43,
           v44,
           v45,
           v46,
           v47,
           v48,
           v49,
           a28,
           a29,
           a30);
}

void specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_147_2();
  *(_QWORD *)(v30 + 32) = *(_QWORD *)(v30 + 448);
  MEMORY[0x2495A7370]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v31 = OUTLINED_FUNCTION_98_1();
  v32 = *(_QWORD *)(v30 + 448);
  if (!v31)
  {
    OUTLINED_FUNCTION_497_0();
    *(_QWORD *)(v30 + 40) = v32;
    OUTLINED_FUNCTION_287();
  }
  v33 = *(_QWORD *)(v30 + 416);
  v34 = *(_QWORD *)(v30 + 424);
  v35 = *(_QWORD *)(v30 + 408);
  v36 = *(_QWORD *)(v30 + 64);
  OUTLINED_FUNCTION_160_0();
  OUTLINED_FUNCTION_48_1(v33, v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 32));
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, (void (*)(uint64_t))MEMORY[0x24BE3B470]);
  v37 = OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_48_1(v38, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 16));
  OUTLINED_FUNCTION_100_2(v37, v36);
  if (v32)
  {
    OUTLINED_FUNCTION_11_4(*(_QWORD *)(v30 + 408));
    OUTLINED_FUNCTION_7_2();

    OUTLINED_FUNCTION_281_0();
    OUTLINED_FUNCTION_558_0();
    v47 = *(_QWORD *)(v30 + 176);
    v48 = *(_QWORD *)(v30 + 152);
    OUTLINED_FUNCTION_431_0();
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_47_0();
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_43_2();
    OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_79_2();
    OUTLINED_FUNCTION_78_2();
    OUTLINED_FUNCTION_141_2();
    OUTLINED_FUNCTION_152_1();
    OUTLINED_FUNCTION_184_2();
    OUTLINED_FUNCTION_226_1();
    OUTLINED_FUNCTION_195_1();
    OUTLINED_FUNCTION_250_1();
    OUTLINED_FUNCTION_533_0();
    OUTLINED_FUNCTION_93_2();
    v39(v39, v40, v41, v42, v43, v44, v45, v46, v32, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
      a20,
      a21,
      v47,
      v48,
      a24,
      a25,
      a26,
      a27,
      a28,
      a29,
      a30);
  }
  else
  {
    OUTLINED_FUNCTION_93_2();
  }
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v5[7] = a3;
  v5[8] = a5;
  v5[6] = a2;
  v10 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v5[9] = v10;
  v5[10] = *(_QWORD *)(v10 - 8);
  v5[11] = swift_task_alloc();
  v11 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v5[12] = v11;
  v5[13] = *(_QWORD *)(v11 - 8);
  v5[14] = swift_task_alloc();
  v12 = type metadata accessor for BindableVariable();
  v5[15] = v12;
  v5[16] = *(_QWORD *)(v12 - 8);
  v5[17] = swift_task_alloc();
  v5[18] = swift_task_alloc();
  v13 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v5[19] = v13;
  v5[20] = *(_QWORD *)(v13 - 8);
  v5[21] = swift_task_alloc();
  v14 = type metadata accessor for Prompt.RenderError();
  v5[22] = v14;
  v5[23] = *(_QWORD *)(v14 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v15 = type metadata accessor for ModelManagerError();
  v5[28] = v15;
  v5[29] = *(_QWORD *)(v15 - 8);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = type metadata accessor for TokenGenerationError(0);
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  v5[45] = swift_task_alloc();
  v16 = type metadata accessor for GenerativeError();
  v5[46] = v16;
  v5[47] = *(_QWORD *)(v16 - 8);
  v5[48] = swift_task_alloc();
  v5[49] = swift_task_alloc();
  v5[50] = type metadata accessor for TokenGenerator();
  v17 = (_QWORD *)swift_task_alloc();
  v5[51] = v17;
  *v17 = v5;
  v17[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return closure #1 in CatalogClient.modelBundleIdentifier(for:instrumenter:)(a1, a3, a4, a5);
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, uint64_t a2, int *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t);

  v3[6] = a2;
  v6 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v3[7] = v6;
  v3[8] = *(_QWORD *)(v6 - 8);
  v3[9] = swift_task_alloc();
  v7 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v3[10] = v7;
  v3[11] = *(_QWORD *)(v7 - 8);
  v3[12] = swift_task_alloc();
  v8 = type metadata accessor for BindableVariable();
  v3[13] = v8;
  v3[14] = *(_QWORD *)(v8 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v9 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v3[17] = v9;
  v3[18] = *(_QWORD *)(v9 - 8);
  v3[19] = swift_task_alloc();
  v10 = type metadata accessor for Prompt.RenderError();
  v3[20] = v10;
  v3[21] = *(_QWORD *)(v10 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  v11 = type metadata accessor for ModelManagerError();
  v3[26] = v11;
  v3[27] = *(_QWORD *)(v11 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = type metadata accessor for TokenGenerationError(0);
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v12 = type metadata accessor for GenerativeError();
  v3[44] = v12;
  v3[45] = *(_QWORD *)(v12 - 8);
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  v3[48] = type metadata accessor for TokenGenerator();
  v15 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v13 = (_QWORD *)swift_task_alloc();
  v3[49] = v13;
  *v13 = v3;
  v13[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return v15(a1);
}

void sub_248B820A0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v1 = OUTLINED_FUNCTION_98_1();
  v2 = *(_QWORD *)(v0 + 400);
  if (!v1)
  {
    OUTLINED_FUNCTION_504();
    *(_QWORD *)(v0 + 24) = v2;
    OUTLINED_FUNCTION_287();
  }
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 48);
  OUTLINED_FUNCTION_160_0();
  OUTLINED_FUNCTION_48_1(v3, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, (void (*)(uint64_t))MEMORY[0x24BE3B470]);
  v7 = OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_48_1(v8, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  OUTLINED_FUNCTION_100_2(v7, v6);
  if (v2)
  {
    OUTLINED_FUNCTION_11_4(*(_QWORD *)(v0 + 360));
    OUTLINED_FUNCTION_7_2();

    OUTLINED_FUNCTION_669_0();
    OUTLINED_FUNCTION_437_0(*(_QWORD *)(v0 + 72));
    OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_43_2();
    OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_79_2();
    OUTLINED_FUNCTION_78_2();
    OUTLINED_FUNCTION_141_2();
    OUTLINED_FUNCTION_152_1();
    OUTLINED_FUNCTION_184_2();
    OUTLINED_FUNCTION_226_1();
    OUTLINED_FUNCTION_195_1();
    OUTLINED_FUNCTION_250_1();
    v9 = (uint64_t (*)(void))OUTLINED_FUNCTION_742();
    OUTLINED_FUNCTION_71_2(v9);
  }
  else
  {
    OUTLINED_FUNCTION_93_2();
  }
}

uint64_t specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:)(uint64_t a1, int *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(_QWORD *);

  v2[9] = a1;
  v4 = type metadata accessor for GenerativeError.RuntimeError.ErrorType.ConfigurationErrorInfo.ErrorType();
  v2[10] = v4;
  v2[11] = *(_QWORD *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v5 = type metadata accessor for GenerativeError.RuntimeError.ErrorType();
  v2[13] = v5;
  v2[14] = *(_QWORD *)(v5 - 8);
  v2[15] = swift_task_alloc();
  v6 = type metadata accessor for BindableVariable();
  v2[16] = v6;
  v2[17] = *(_QWORD *)(v6 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v7 = type metadata accessor for GenerativeError.AvailabilityError.ErrorType();
  v2[20] = v7;
  v2[21] = *(_QWORD *)(v7 - 8);
  v2[22] = swift_task_alloc();
  v8 = type metadata accessor for Prompt.RenderError();
  v2[23] = v8;
  v2[24] = *(_QWORD *)(v8 - 8);
  v2[25] = swift_task_alloc();
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v9 = type metadata accessor for ModelManagerError();
  v2[29] = v9;
  v2[30] = *(_QWORD *)(v9 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeError?);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = type metadata accessor for TokenGenerationError(0);
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  v2[46] = swift_task_alloc();
  v10 = type metadata accessor for GenerativeError();
  v2[47] = v10;
  v2[48] = *(_QWORD *)(v10 - 8);
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = type metadata accessor for TokenGenerator();
  v13 = (uint64_t (*)(_QWORD *))((char *)a2 + *a2);
  v11 = (_QWORD *)swift_task_alloc();
  v2[52] = v11;
  *v11 = v2;
  v11[1] = specialized static TokenGenerator.mapErrorToGenerativeFunctionsModelError<A>(generativeFunctionInstrumenter:_:);
  return v13(v2 + 2);
}

void sub_248B82BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v10 = OUTLINED_FUNCTION_98_1();
  v11 = *(_QWORD *)(v9 + 424);
  if (!v10)
  {
    OUTLINED_FUNCTION_674_0();
    *(_QWORD *)(v9 + 48) = v11;
    OUTLINED_FUNCTION_287();
  }
  v12 = *(_QWORD *)(v9 + 392);
  v13 = *(_QWORD *)(v9 + 400);
  v14 = *(_QWORD *)(v9 + 384);
  v15 = *(_QWORD *)(v9 + 72);
  OUTLINED_FUNCTION_160_0();
  OUTLINED_FUNCTION_48_1(v12, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
  lazy protocol witness table accessor for type OneShotRequest and conformance OneShotRequest(&lazy protocol witness table cache variable for type GenerativeError and conformance GenerativeError, (void (*)(uint64_t))MEMORY[0x24BE3B470]);
  v16 = OUTLINED_FUNCTION_3();
  OUTLINED_FUNCTION_48_1(v17, v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
  OUTLINED_FUNCTION_100_2(v16, v15);
  if (v11)
  {
    OUTLINED_FUNCTION_11_4(*(_QWORD *)(v9 + 384));
    OUTLINED_FUNCTION_7_2();

    v26 = *(_QWORD *)(v9 + 296);
    v27 = *(_QWORD *)(v9 + 288);
    v28 = *(_QWORD *)(v9 + 280);
    v29 = *(_QWORD *)(v9 + 272);
    v30 = *(_QWORD *)(v9 + 264);
    OUTLINED_FUNCTION_431_0();
    OUTLINED_FUNCTION_147();
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_42();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_68();
    OUTLINED_FUNCTION_84();
    OUTLINED_FUNCTION_36_3();
    OUTLINED_FUNCTION_38_4();
    OUTLINED_FUNCTION_40_4();
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_43_2();
    OUTLINED_FUNCTION_46_3();
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_79_2();
    OUTLINED_FUNCTION_78_2();
    OUTLINED_FUNCTION_141_2();
    OUTLINED_FUNCTION_152_1();
    OUTLINED_FUNCTION_184_2();
    OUTLINED_FUNCTION_226_1();
    OUTLINED_FUNCTION_195_1();
    OUTLINED_FUNCTION_250_1();
    OUTLINED_FUNCTION_742();
    OUTLINED_FUNCTION_93_2();
    v18(v18, v19, v20, v21, v22, v23, v24, v25, a9, v11, v26, v27, v28, v29, v30);
  }
  else
  {
    OUTLINED_FUNCTION_93_2();
  }
}

