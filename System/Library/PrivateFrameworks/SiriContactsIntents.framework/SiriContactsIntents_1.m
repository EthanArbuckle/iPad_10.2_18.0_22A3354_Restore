uint64_t ContactsAddressHandle.Builder.withAddressHandle(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressHandle) = a1;
  swift_retain();
  swift_release();
  return swift_retain();
}

uint64_t ContactsAddressHandle.Builder.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel);
  swift_release();
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

unint64_t static ContactsAddressHandle.catTypeName.getter()
{
  return 0xD000000000000016;
}

uint64_t ContactsAddressHandle.init(builder:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_15();
  *(_QWORD *)(v1 + 16) = 0;
  v5 = a1 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel;
  swift_beginAccess();
  outlined init with copy of SpeakableString?(v5, v2);
  outlined init with take of SpeakableString?(v2, v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressHandle);
  swift_retain();
  swift_release();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressHandle) = v6;
  return v1;
}

uint64_t ContactsAddressHandle.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_15();
  v9 = a1 == 0x4C73736572646461 && a2 == 0xEC0000006C656261;
  if (v9 || (result = OUTLINED_FUNCTION_2_19(), (result & 1) != 0))
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel, v4);
    v11 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload(v4, 1, v11) == 1)
    {
      result = outlined destroy of SpeakableString?(v4);
LABEL_8:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return result;
    }
    *(_QWORD *)(a3 + 24) = v11;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(boxed_opaque_existential_1, v4, v11);
  }
  else
  {
    if (a1 != 0x4873736572646461 || a2 != 0xED0000656C646E61)
    {
      result = OUTLINED_FUNCTION_2_19();
      if ((result & 1) == 0)
        goto LABEL_8;
    }
    v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressHandle);
    if (!v14)
      goto LABEL_8;
    *(_QWORD *)(a3 + 24) = type metadata accessor for DialogLocation();
    *(_QWORD *)a3 = v14;
    return swift_retain();
  }
}

SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional __swiftcall ContactsAddressHandle.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsAddressHandle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriContactsIntents_ContactsAddressHandle_CodingKeys_addressHandle;
  else
    v4.value = SiriContactsIntents_ContactsAddressHandle_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t ContactsAddressHandle.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x4873736572646461;
  else
    return 0x4C73736572646461;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactsAddressHandle.CodingKeys(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactsAddressHandle.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsAddressHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsAddressHandle.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsAddressHandle.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional result;

  result.value = ContactsAddressHandle.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsAddressHandle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactsAddressHandle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsAddressHandle.CodingKeys()
{
  char *v0;

  return ContactsAddressHandle.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsAddressHandle.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsAddressHandle::CodingKeys_optional result;

  result.value = ContactsAddressHandle.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsAddressHandle.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsAddressHandle.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ContactsAddressHandle.deinit()
{
  uint64_t v0;

  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
  swift_release();
  return v0;
}

uint64_t ContactsAddressHandle.__deallocating_deinit()
{
  ContactsAddressHandle.deinit();
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContactsAddressHandle()
{
  return type metadata accessor for ContactsAddressHandle(0);
}

uint64_t type metadata accessor for ContactsAddressHandle(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsAddressHandle);
}

void type metadata completion function for ContactsAddressHandle()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsAddressHandle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsAddressHandle.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
  OUTLINED_FUNCTION_7_15();
  if (!v1)
  {
    type metadata accessor for DialogLocation();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DialogLocation and conformance DialogLocation, (uint64_t (*)(uint64_t))MEMORY[0x24BE927B0], MEMORY[0x24BE927C0]);
    OUTLINED_FUNCTION_7_15();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ContactsAddressHandle.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ContactsAddressHandle.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsAddressHandle.Builder()
{
  return type metadata accessor for ContactsAddressHandle.Builder(0);
}

uint64_t type metadata accessor for ContactsAddressHandle.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsAddressHandle.Builder);
}

void type metadata completion function for ContactsAddressHandle.Builder()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsAddressHandle.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsAddressHandle.CodingKeys>);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  *(_QWORD *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsAddressHandle(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    OUTLINED_FUNCTION_2_43();
    outlined init with take of SpeakableString?(v7, v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
    type metadata accessor for DialogLocation();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DialogLocation and conformance DialogLocation, (uint64_t (*)(uint64_t))MEMORY[0x24BE927B0], MEMORY[0x24BE927C8]);
    OUTLINED_FUNCTION_2_43();
    OUTLINED_FUNCTION_3_21();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressHandle) = v10;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v1;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsAddressHandle()
{
  static ContactsAddressHandle.catTypeName.getter();
  return 0xD000000000000016;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsAddressHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsAddressHandle.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsAddressHandle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContactsAddressHandle.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsAddressHandle(_QWORD *a1)
{
  return ContactsAddressHandle.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsAddressHandle()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsAddressHandle and conformance ContactsAddressHandle, type metadata accessor for ContactsAddressHandle, (uint64_t)&protocol conformance descriptor for ContactsAddressHandle);
}

uint64_t base witness table accessor for Encodable in ContactsAddressHandle()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsAddressHandle and conformance ContactsAddressHandle, type metadata accessor for ContactsAddressHandle, (uint64_t)&protocol conformance descriptor for ContactsAddressHandle);
}

unint64_t lazy protocol witness table accessor for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAddressHandle.CodingKeys, &type metadata for ContactsAddressHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAddressHandle.CodingKeys, &type metadata for ContactsAddressHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAddressHandle.CodingKeys, &type metadata for ContactsAddressHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAddressHandle.CodingKeys, &type metadata for ContactsAddressHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAddressHandle.CodingKeys and conformance ContactsAddressHandle.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContactsAddressHandle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FE9412C + 4 * byte_21FEDCEF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FE94160 + 4 * asc_21FEDCEF0[v4]))();
}

uint64_t sub_21FE94160(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE94168(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE94170);
  return result;
}

uint64_t sub_21FE9417C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE94184);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FE94188(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE94190(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContactsAddressHandle.CodingKeys()
{
  return &type metadata for ContactsAddressHandle.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_2_43()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t UsoTask_request_common_Person.contactIds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (v4)
  {
    v1 = UsoEntity_common_Person.contactIds.getter();
    v0 = OUTLINED_FUNCTION_2();
  }
  else
  {
    v1 = MEMORY[0x24BEE4AF8];
  }
  MEMORY[0x2207D6D40](&v4, v0);
  if (v4)
  {
    v2 = UsoEntity_common_Person.contactIds.getter();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  v4 = v1;
  specialized Array.append<A>(contentsOf:)(v2);
  return v4;
}

uint64_t UsoTask_update_common_Person.updateTaskType.getter()
{
  if ((UsoTask_update_common_Person.isUpdateNicknameTask.getter() & 1) != 0)
    return 0;
  if ((UsoTask_update_common_Person.isUpdateRelationshipTask.getter() & 1) != 0)
    return 1;
  return 2;
}

uint64_t UsoTask_update_common_Person.updateRelationshipInfoLocation.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = MEMORY[0x2207D6D64](&v5);
  if (v5 && (v1 = MEMORY[0x2207D6AA0](v0), OUTLINED_FUNCTION_2(), v1))
  {
    swift_release();
    return 0;
  }
  else
  {
    v3 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    if (v5 && (v4 = MEMORY[0x2207D6AA0](v3), OUTLINED_FUNCTION_2(), v4))
    {
      swift_release();
      return 1;
    }
    else
    {
      return 2;
    }
  }
}

uint64_t UsoTask_noVerb_common_Person.isGetAttributeIntent.getter()
{
  return UsoTask_noVerb_common_Person.isGetAttributeIntent.getter((_QWORD *(*)(uint64_t *__return_ptr))MEMORY[0x24BE9EB40]);
}

uint64_t UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter()
{
  return UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter((void (*)(uint64_t *__return_ptr, uint64_t))MEMORY[0x24BE9EB40]);
}

uint64_t UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter()
{
  return UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter((void (*)(uint64_t *__return_ptr, uint64_t))MEMORY[0x24BEA0B28]);
}

uint64_t UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter(void (*a1)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v25;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_55_0();
  v5 = v4 - v3;
  v6 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v25 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v25 - v15;
  a1(&v26, v14);
  if (!v26 || (v17 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(), v18 = swift_release(), !v17))
  {
    OUTLINED_FUNCTION_3_26();
    goto LABEL_7;
  }
  MEMORY[0x2207D6BE4](v18);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_10(v5);
  if (v19)
  {
LABEL_7:
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    v23 = 0;
    return v23 & 1;
  }
  v20 = OUTLINED_FUNCTION_56((uint64_t)v16, v5, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32));
  OUTLINED_FUNCTION_8_21(v20, *MEMORY[0x24BEA0C28]);
  v21 = specialized == infix<A>(_:_:)((uint64_t)v16, (uint64_t)v13);
  OUTLINED_FUNCTION_2_44((uint64_t)v13);
  v22 = OUTLINED_FUNCTION_56((uint64_t)v10, (uint64_t)v16, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
  if ((v21 & 1) != 0)
  {
    OUTLINED_FUNCTION_2_44((uint64_t)v10);
    OUTLINED_FUNCTION_2_44((uint64_t)v16);
    v23 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_8_21(v22, *MEMORY[0x24BEA0C58]);
    v23 = specialized == infix<A>(_:_:)((uint64_t)v10, (uint64_t)v13);
    OUTLINED_FUNCTION_2_44((uint64_t)v13);
    OUTLINED_FUNCTION_2_44((uint64_t)v10);
    OUTLINED_FUNCTION_2_44((uint64_t)v16);
  }
  return v23 & 1;
}

uint64_t UsoTask_checkExistence_common_Person.isGetAttributeIntent.getter()
{
  return UsoTask_noVerb_common_Person.isGetAttributeIntent.getter((_QWORD *(*)(uint64_t *__return_ptr))MEMORY[0x24BEA0B28]);
}

uint64_t UsoTask_noVerb_common_Person.isGetAttributeIntent.getter(_QWORD *(*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1(&v8);
  if (!v8)
    return 0;
  MEMORY[0x2207D6AAC](v2);
  v3 = OUTLINED_FUNCTION_10_25();
  if (!v1)
  {
    MEMORY[0x2207D6A7C](v3);
    v4 = OUTLINED_FUNCTION_10_25();
    MEMORY[0x2207D6AC4](v4);
    v5 = OUTLINED_FUNCTION_10_25();
    v7 = MEMORY[0x2207D6A70](v5);
    OUTLINED_FUNCTION_2();
    if (!v7)
      return 0;
  }
  swift_release();
  return 1;
}

BOOL static UsoTask_update_common_Person.UpdateRelationshipInfoLocation.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

unint64_t UsoTask_update_common_Person.isChangeContactPoster.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v0 = type metadata accessor for UsoEntity_commonContact_ContactAttribute.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_55_0();
  v4 = v3 - v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_commonContact_ContactAttribute.DefinedValues?, UsoEntity_commonContact_ContactAttribute.DefinedValues?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_55_0();
  v9 = v8 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  OUTLINED_FUNCTION_28();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)&v26 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v26 - v17;
  v19 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (!v27)
    goto LABEL_21;
  v20 = MEMORY[0x2207D6A40](v19);
  swift_release();
  if (!v20)
    return v20 & 1;
  if (!(v20 >> 62))
  {
    if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_5;
LABEL_10:
    OUTLINED_FUNCTION_5();
LABEL_11:
    OUTLINED_FUNCTION_3_26();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  OUTLINED_FUNCTION_5();
  if (!v22)
    goto LABEL_10;
LABEL_5:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v20 & 0xC000000000000001) == 0, v20);
  if ((v20 & 0xC000000000000001) != 0)
    MEMORY[0x2207D80C0](0, v20);
  else
    swift_retain();
  OUTLINED_FUNCTION_5();
  dispatch thunk of CodeGenListEntry.entry.getter();
  v21 = swift_release();
  if (!v27)
    goto LABEL_11;
  MEMORY[0x2207D66C8](v21);
  OUTLINED_FUNCTION_2();
LABEL_12:
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v16, *MEMORY[0x24BE9ED18], v0);
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v0);
  v20 = v9 + *(int *)(v5 + 48);
  outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?((uint64_t)v18, v9);
  outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?((uint64_t)v16, v20);
  OUTLINED_FUNCTION_10(v9);
  if (!v23)
  {
    outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?(v9, (uint64_t)v13);
    OUTLINED_FUNCTION_10(v20);
    if (!v23)
    {
      OUTLINED_FUNCTION_56(v4, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32));
      lazy protocol witness table accessor for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues();
      LOBYTE(v20) = dispatch thunk of static Equatable.== infix(_:_:)();
      v25 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
      v25(v4, v0);
      OUTLINED_FUNCTION_40((uint64_t)v16);
      OUTLINED_FUNCTION_40((uint64_t)v18);
      v25((uint64_t)v13, v0);
      OUTLINED_FUNCTION_40(v9);
      return v20 & 1;
    }
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v18, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v13, v0);
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_40((uint64_t)v16);
  OUTLINED_FUNCTION_40((uint64_t)v18);
  OUTLINED_FUNCTION_10(v20);
  if (!v23)
  {
LABEL_20:
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v9, &demangling cache variable for type metadata for (UsoEntity_commonContact_ContactAttribute.DefinedValues?, UsoEntity_commonContact_ContactAttribute.DefinedValues?));
LABEL_21:
    LOBYTE(v20) = 0;
    return v20 & 1;
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v9, &demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  LOBYTE(v20) = 1;
  return v20 & 1;
}

uint64_t UsoTask_update_common_Person.isUpdateNicknameTask.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v0 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  if (!v3)
    return 0;
  v1 = MEMORY[0x2207D6A7C](v0);
  swift_release();
  if (!v1)
    return 0;
  swift_release();
  return 1;
}

uint64_t UsoTask_update_common_Person.isUpdateRelationshipTask.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v0 = MEMORY[0x2207D6D64](&v5);
  if (!v5 || (v1 = MEMORY[0x2207D6AA0](v0), swift_release(), !v1))
  {
    v2 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    if (!v5)
      return 0;
    v3 = MEMORY[0x2207D6AA0](v2);
    swift_release();
    if (!v3)
      return 0;
  }
  swift_release();
  return 1;
}

uint64_t outlined init with copy of UsoEntity_commonContact_ContactAttribute.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_commonContact_ContactAttribute.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_commonContact_ContactAttribute.DefinedValues();
    result = MEMORY[0x2207D86A8](MEMORY[0x24BE9ED30], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_commonContact_ContactAttribute.DefinedValues and conformance UsoEntity_commonContact_ContactAttribute.DefinedValues);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_44(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_3_26()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_8_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_10_25()
{
  return swift_release();
}

id SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v14 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v14, sel_setTitle_, a1);
  OUTLINED_FUNCTION_4_33(a2, v15, &lazy cache variable for type metadata for SFRichText, 0x24BE84F78, (SEL *)&selRef_setDescriptions_);
  objc_msgSend(v14, sel_setFootnote_, a5);
  if (a4)
    OUTLINED_FUNCTION_46_2(v14, sel_setThumbnail_);
  OUTLINED_FUNCTION_4_33(a3, v16, &lazy cache variable for type metadata for SFAbstractCommand, 0x24BE84D38, (SEL *)&selRef_setCommands_);
  if (a6)
    objc_msgSend(v14, sel_setAction_, a6);
  v17 = v14;
  if (a7)
  {
    v17 = a7;
    objc_msgSend(v14, sel_setTrailingMiddleText_, v17);

  }
  return v14;
}

id SFRowCardSection.init(blueTitle:subtitle:commands:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return SFRowCardSection.init(blueTitle:subtitle:commands:)(a1, a2, a3, a4, 4);
}

void @nonobjc SFFormattedText.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    v2 = (void *)MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_55_1();
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend((id)OUTLINED_FUNCTION_7_14(), sel_textWithString_, v2);

  OUTLINED_FUNCTION_22_6();
}

id SFRowCardSection.init(title:subtitle:commands:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return SFRowCardSection.init(blueTitle:subtitle:commands:)(a1, a2, a3, a4, 0);
}

id SFRowCardSection.init(blueTitle:subtitle:commands:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v19;

  v10 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFFormattedText);
  v11 = v10;
  @nonobjc SFFormattedText.__allocating_init(string:)(a1, a2);
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v12, sel_setTextColor_, a5);
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE84F78]), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v15 = OUTLINED_FUNCTION_13_3();
    *(_OWORD *)(v15 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v15 + 32) = v13;
    OUTLINED_FUNCTION_5_25();
    v16 = v13;
    OUTLINED_FUNCTION_4_33(v19, v17, &lazy cache variable for type metadata for SFFormattedText, 0x24BE84E50, (SEL *)&selRef_setFormattedTextPieces_);
    objc_msgSend(v11, sel_setLeadingText_, v14);

  }
  OUTLINED_FUNCTION_46_2(v11, sel_setLeadingSubtitle_);
  outlined bridged method (mbnn) of @objc SFRichText.formattedTextPieces.setter(a4, v11, &lazy cache variable for type metadata for SFAbstractCommand, 0x24BE84D38, (SEL *)&selRef_setCommands_);

  return v11;
}

void SFRowCardSection.init(leadingText:image:)(void *a1, void *a2)
{
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  objc_msgSend(v4, sel_setLeadingText_, a1);
  OUTLINED_FUNCTION_46_2(v4, sel_setImage_);

  OUTLINED_FUNCTION_22_6();
}

id SFContactImage.init(contactId:size:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  id v10;
  uint64_t v11;
  id v12;

  v10 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v11 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v11 + 16) = xmmword_21FED8CB0;
  *(_QWORD *)(v11 + 32) = a1;
  *(_QWORD *)(v11 + 40) = a2;
  v12 = v10;
  outlined bridged method (mbnn) of @objc SFContactImage.contactIdentifiers.setter(v11, v12);
  if ((a5 & 1) == 0)
    objc_msgSend(v12, sel_setSize_, *(double *)&a3, *(double *)&a4);

  return v12;
}

void SFActionItem.init(phoneNumber:)(uint64_t a1, uint64_t a2)
{
  SFActionItem.init(phoneNumber:)(a1, a2, (SEL *)&selRef_setPhoneNumber_);
}

void SFActionItem.init(email:)(uint64_t a1, uint64_t a2)
{
  SFActionItem.init(phoneNumber:)(a1, a2, (SEL *)&selRef_setEmail_);
}

void SFActionItem.init(phoneNumber:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v6;
  id v7;
  void *v8;

  v6 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  v7 = v6;
  if (a2)
  {
    v8 = (void *)MEMORY[0x2207D7CB8](a1, a2);
    OUTLINED_FUNCTION_55_1();
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v6, *a3, v8);

  OUTLINED_FUNCTION_22_6();
}

id SFRichText.init(string:bold:color:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v8 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFFormattedText);
  v9 = v8;
  @nonobjc SFFormattedText.__allocating_init(string:)(a1, a2);
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, sel_setIsBold_, a3 & 1);
    objc_msgSend(v11, sel_setTextColor_, a4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v12 = OUTLINED_FUNCTION_13_3();
    *(_OWORD *)(v12 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v12 + 32) = v11;
    OUTLINED_FUNCTION_5_25();
    v13 = v11;
    outlined bridged method (mbnn) of @objc SFRichText.formattedTextPieces.setter(v15, v9, &lazy cache variable for type metadata for SFFormattedText, 0x24BE84E50, (SEL *)&selRef_setFormattedTextPieces_);

  }
  return v9;
}

void outlined bridged method (mbnn) of @objc SFContactImage.contactIdentifiers.setter(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setContactIdentifiers_, isa);

}

void outlined bridged method (mbnn) of @objc SFRichText.formattedTextPieces.setter(uint64_t a1, void *a2, unint64_t *a3, uint64_t a4, SEL *a5)
{
  Class isa;

  type metadata accessor for CNContact(0, a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_55_1();
  objc_msgSend(a2, *a5, isa);

}

void OUTLINED_FUNCTION_4_33(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, SEL *a5)
{
  void *v5;

  outlined bridged method (mbnn) of @objc SFRichText.formattedTextPieces.setter(a1, v5, a3, a4, a5);
}

uint64_t OUTLINED_FUNCTION_5_25()
{
  return specialized Array._endMutation()();
}

id AgeDateTime.__allocating_init(dateComponents:qualifier:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  Class isa;
  uint64_t v17;
  uint64_t v19;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone(v2);
  UUID.init()();
  v9 = UUID.uuidString.getter();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v12 = static String.EMPTY.getter();
  v13 = (void *)MEMORY[0x2207D7CB8](v12);
  swift_bridgeObjectRelease();
  v14 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(v9, v11, (uint64_t)v13, v8);

  v15 = v14;
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v15, sel_setDateComponents_, isa);

  objc_msgSend(v15, sel_setQualifier_, a2);
  v17 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_94_0(v17);
  return v15;
}

{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  Class isa;
  uint64_t v23;
  int EnumTagSinglePayload;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v30;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v30 - v8;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_allocWithZone(v2);
  UUID.init()();
  v15 = UUID.uuidString.getter();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v18 = static String.EMPTY.getter();
  v19 = (void *)MEMORY[0x2207D7CB8](v18);
  swift_bridgeObjectRelease();
  v20 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(v15, v17, (uint64_t)v19, v14);

  v21 = v20;
  isa = DateComponents._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v21, sel_setDateComponents_, isa);

  outlined init with copy of TerminalElement.Qualifier?(a2, (uint64_t)v9);
  v23 = type metadata accessor for TerminalElement.Qualifier();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v23);
  v25 = 0;
  if (EnumTagSinglePayload != 1)
  {
    outlined init with copy of TerminalElement.Qualifier?((uint64_t)v9, (uint64_t)v7);
    v26 = *(_QWORD *)(v23 - 8);
    v27 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v7, v23);
    if (v27 == *MEMORY[0x24BE9FE18])
    {
      v25 = 1;
    }
    else if (v27 == *MEMORY[0x24BE9FE20])
    {
      v25 = 2;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v23);
      v25 = 0;
    }
  }
  objc_msgSend(v21, sel_setQualifier_, v25);

  outlined destroy of TerminalElement.Qualifier?(a2);
  v28 = type metadata accessor for DateComponents();
  OUTLINED_FUNCTION_94_0(v28);
  outlined destroy of TerminalElement.Qualifier?((uint64_t)v9);
  return v21;
}

id outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v6;
  id v7;

  v6 = (void *)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(a4, sel_initWithIdentifier_displayString_, v6, a3);

  return v7;
}

uint64_t outlined destroy of TerminalElement.Qualifier?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ModifyContactAttributeCATsModern()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeCATsModern;
  if (!type metadata singleton initialization cache for ModifyContactAttributeCATsModern)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ModifyContactAttributeCATsModern()
{
  return swift_initClassMetadata2();
}

uint64_t ModifyContactAttributeCATsModern.confirmModifyNickname(requestedNickname:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v2[4] = swift_task_alloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATsModern.confirmModifyNickname(requestedNickname:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t EnumTagSinglePayload;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);

  OUTLINED_FUNCTION_26_3();
  v1 = v0[4];
  v2 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = swift_allocObject();
  v0[5] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21FED8CB0;
  v4 = (uint64_t *)(v3 + 48);
  *(_QWORD *)(v3 + 32) = 0xD000000000000011;
  *(_QWORD *)(v3 + 40) = 0x800000021FEE0960;
  OUTLINED_FUNCTION_10_6(v2, v5, &demangling cache variable for type metadata for SpeakableString?);
  v6 = OUTLINED_FUNCTION_31_4();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v1, 1, v6);
  v8 = v0[4];
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_12_5(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v3 + 72) = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(boxed_opaque_existential_1, v8, v6);
  }
  v10 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  v0[6] = v10;
  *v10 = v0;
  v10[1] = ModifyContactAttributeCATsModern.confirmModifyNickname(requestedNickname:);
  v11 = OUTLINED_FUNCTION_3_27(0xD00000000000002CLL);
  return OUTLINED_FUNCTION_1_40(v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return swift_task_switch();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_0();
    v3 = OUTLINED_FUNCTION_19_23();
    return v4(v3);
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_25_0();
  v5[8] = OUTLINED_FUNCTION_25_0();
  v5[9] = OUTLINED_FUNCTION_25_0();
  v5[10] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);

  OUTLINED_FUNCTION_26_3();
  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_21_18();
  v0[11] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED9150;
  *(_QWORD *)(v2 + 32) = 0xD000000000000015;
  *(_QWORD *)(v2 + 40) = 0x800000021FEE0780;
  OUTLINED_FUNCTION_10_6(v1, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_26_21(v4);
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 72) = v1;
    v7 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v7);
  }
  v9 = v0[3];
  *(_QWORD *)(v2 + 80) = 0xD000000000000014;
  *(_QWORD *)(v2 + 88) = 0x800000021FEE0900;
  OUTLINED_FUNCTION_10_6(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_27_4();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 120) = v1;
    v11 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v11);
  }
  v12 = OUTLINED_FUNCTION_10_26();
  OUTLINED_FUNCTION_10_6(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  v14 = OUTLINED_FUNCTION_28_5();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 168) = v1;
    v15 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v15);
  }
  v16 = OUTLINED_FUNCTION_9_25();
  OUTLINED_FUNCTION_10_6(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  v18 = OUTLINED_FUNCTION_16_17();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 216) = v1;
    v19 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v19);
  }
  v20 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  v0[12] = v20;
  *v20 = v0;
  v20[1] = ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:);
  v21 = OUTLINED_FUNCTION_3_27(0xD000000000000030);
  return OUTLINED_FUNCTION_1_40(v21, v22, v23, v24);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_12_26();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_10();
  }
  else
  {
    OUTLINED_FUNCTION_23_23();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    swift_task_dealloc();
    v2 = OUTLINED_FUNCTION_19_23();
    return OUTLINED_FUNCTION_14_26(v2, v3);
  }
}

uint64_t ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v5[7] = OUTLINED_FUNCTION_25_0();
  v5[8] = OUTLINED_FUNCTION_25_0();
  v5[9] = OUTLINED_FUNCTION_25_0();
  v5[10] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);

  OUTLINED_FUNCTION_26_3();
  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_21_18();
  v0[11] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED9150;
  *(_QWORD *)(v2 + 32) = 0x4E64657461647075;
  *(_QWORD *)(v2 + 40) = 0xEF656D616E6B6369;
  OUTLINED_FUNCTION_10_6(v1, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_26_21(v4);
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 72) = v1;
    v7 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v7);
  }
  v9 = v0[3];
  *(_QWORD *)(v2 + 80) = 0xD000000000000010;
  *(_QWORD *)(v2 + 88) = 0x800000021FEE08A0;
  OUTLINED_FUNCTION_10_6(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_27_4();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 120) = v1;
    v11 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v11);
  }
  v12 = OUTLINED_FUNCTION_10_26();
  OUTLINED_FUNCTION_10_6(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  v14 = OUTLINED_FUNCTION_28_5();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 168) = v1;
    v15 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v15);
  }
  v16 = OUTLINED_FUNCTION_9_25();
  OUTLINED_FUNCTION_10_6(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  v18 = OUTLINED_FUNCTION_16_17();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 216) = v1;
    v19 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v19);
  }
  v20 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  v0[12] = v20;
  *v20 = v0;
  v20[1] = ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:);
  v21 = OUTLINED_FUNCTION_3_27(0xD000000000000032);
  return OUTLINED_FUNCTION_1_40(v21, v22, v23, v24);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_12_26();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_10();
  }
  else
  {
    OUTLINED_FUNCTION_23_23();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    swift_task_dealloc();
    v2 = OUTLINED_FUNCTION_19_23();
    return OUTLINED_FUNCTION_14_26(v2, v3);
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + 96) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v5 + 48) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v5 + 56) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v5 + 64) = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t EnumTagSinglePayload;
  uint64_t *v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);

  OUTLINED_FUNCTION_26_3();
  v1 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_21_18();
  *(_QWORD *)(v0 + 72) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED9150;
  *(_QWORD *)(v2 + 32) = 0xD000000000000013;
  *(_QWORD *)(v2 + 40) = 0x800000021FEE0840;
  OUTLINED_FUNCTION_10_6(v1, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_28_5();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 72) = v4;
    v7 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v7);
  }
  v9 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 80) = 0x4E746361746E6F63;
  *(_QWORD *)(v2 + 88) = 0xEB00000000656D61;
  OUTLINED_FUNCTION_10_6(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_16_17();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 120) = v4;
    v11 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v11);
  }
  v13 = *(_QWORD *)(v0 + 48);
  v14 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 128) = 0x704F796669646F6DLL;
  *(_QWORD *)(v2 + 136) = 0xEF6E6F6974617265;
  OUTLINED_FUNCTION_10_6(v14, v12, &demangling cache variable for type metadata for SpeakableString?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v13, 1, v4);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_12_5(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 168) = v4;
    v16 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v16);
  }
  v17 = *(_BYTE *)(v0 + 96);
  *(_QWORD *)(v2 + 176) = 0x4D6563696F567369;
  *(_QWORD *)(v2 + 184) = 0xEB0000000065646FLL;
  *(_QWORD *)(v2 + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v2 + 192) = v17;
  v18 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v0 + 80) = v18;
  *v18 = v0;
  v18[1] = ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:);
  v19 = OUTLINED_FUNCTION_3_27(0xD000000000000036);
  return OUTLINED_FUNCTION_1_40(v19, v20, v21, v22);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return swift_task_switch();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    v3 = OUTLINED_FUNCTION_19_23();
    return v4(v3);
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ModifyContactAttributeCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_10_4();
  return ModifyContactAttributeCATsModern.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ModifyContactAttributeCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  outlined init with copy of URL?(a1, v11 - v10, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, &demangling cache variable for type metadata for URL?);
  return v12;
}

uint64_t ObjC metadata update function for ModifyContactAttributeCATsModern()
{
  return type metadata accessor for ModifyContactAttributeCATsModern();
}

uint64_t OUTLINED_FUNCTION_1_40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_3_27@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_9_25()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 176) = 0x704F796669646F6DLL;
  *(_QWORD *)(v1 + 184) = 0xEF6E6F6974617265;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 128) = 0x4E746361746E6F63;
  *(_QWORD *)(v1 + 136) = 0xEB00000000656D61;
  return result;
}

uint64_t OUTLINED_FUNCTION_12_26()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 104) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_26(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_16_17()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_19_23()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_21_18()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_23_23()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_26_21(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t RRReferenceResolverProtocol.resolveCommonPerson()@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  UsoEntityBuilder_common_Person.init()();
  v6 = MEMORY[0x2207D6B18]();
  OUTLINED_FUNCTION_2();
  if (v6)
  {
    RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(v6, a1, a2, a3);
    return swift_release();
  }
  else
  {
    v8 = OUTLINED_FUNCTION_33_11();
    return __swift_storeEnumTagSinglePayload(a3, 1, 1, v8);
  }
}

uint64_t RRReferenceResolverProtocol.resolveAttributeDisambiguationReference(from:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  v9 = OUTLINED_FUNCTION_33_11();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v13 = v12 - v11;
  RRReferenceResolverProtocol.resolvePositionEntity(from:)(a2, a3, v8);
  if (__swift_getEnumTagSinglePayload(v8, 1, v9) == 1)
  {
    outlined destroy of FlowActivity?(v8, &demangling cache variable for type metadata for RREntity?);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v13, v8, v9);
    RREntity.usoEntity.getter();
    type metadata accessor for UsoEntity_common_ContactAddress();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    OUTLINED_FUNCTION_2();
    v14 = v22;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v15 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_29_21();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)OUTLINED_FUNCTION_1();
      v22 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v18 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ContactAddress?);
      v19 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_50_0();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v16, v17, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_ContactAddress: %s", v18);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_50_0();

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  return v14;
}

void RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_log_type_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;

  v136 = a3;
  v133 = a1;
  v134 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_2();
  v119 = v6;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_68();
  v124 = v8;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v9);
  v122 = (uint64_t)&v118 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5_2();
  v120 = v12;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_68();
  v123 = v14;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_68();
  v121 = v16;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v17);
  v126 = (char *)&v118 - v18;
  v132 = type metadata accessor for RRCandidate();
  v127 = *(_QWORD *)(v132 - 8);
  MEMORY[0x24BDAC7A8](v132);
  OUTLINED_FUNCTION_5_2();
  v125 = v19;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v20);
  v128 = (char *)&v118 - v21;
  v22 = type metadata accessor for RRResult();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_5_2();
  v118 = v24;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_68();
  v131 = v26;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v118 - v28;
  v30 = type metadata accessor for RRQuery();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_55_0();
  v34 = (_QWORD *)(v33 - v32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  OUTLINED_FUNCTION_28();
  v36 = MEMORY[0x24BDAC7A8](v35);
  v38 = (uint64_t *)((char *)&v118 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v118 - v39;
  v129 = OUTLINED_FUNCTION_33_11();
  v130 = a4;
  __swift_storeEnumTagSinglePayload(a4, 1, 1, v129);
  *v34 = v133;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v31 + 104))(v34, *MEMORY[0x24BEA59D0], v30);
  swift_retain();
  MEMORY[0x2207D7B44](v34, v134, v136);
  (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v34, v30);
  v136 = v40;
  outlined init with copy of Result<RRResult, Error>((uint64_t)v40, (uint64_t)v38, &demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v41 = *v38;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v42 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_31_17();
    OUTLINED_FUNCTION_31_17();
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)OUTLINED_FUNCTION_1();
      v46 = OUTLINED_FUNCTION_1();
      v137 = v41;
      v138 = v46;
      *(_DWORD *)v45 = 136315138;
      OUTLINED_FUNCTION_31_17();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v47 = String.init<A>(describing:)();
      v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v43, v44, "#ReferenceResolution Received a failure: %s -> nil", v45);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_7_12();
LABEL_12:
    OUTLINED_FUNCTION_7_30(v65, &demangling cache variable for type metadata for Result<RRResult, Error>);
    return;
  }
  (*(void (**)(char *, uint64_t *, uint64_t))(v23 + 32))(v29, v38, v22);
  v49 = *(_QWORD *)(v23 + 16);
  v50 = v131;
  ((void (*)(uint64_t *, char *, uint64_t))v49)(v131, v29, v22);
  v51 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 88))(v50, v22);
  v52 = v22;
  v53 = v29;
  v54 = v23;
  if (v51 == *MEMORY[0x24BEA5AA8])
  {
    v135 = v29;
    OUTLINED_FUNCTION_35_1((uint64_t)v50, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 96));
    v56 = v127;
    v55 = v128;
    v57 = v132;
    (*(void (**)(char *, uint64_t *, uint64_t))(v127 + 32))(v128, v50, v132);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v58 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.siriContacts);
    (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v125, v55, v57);
    Logger.logObject.getter();
    v59 = OUTLINED_FUNCTION_54_2();
    if (os_log_type_enabled((os_log_t)v49, v59))
    {
      v60 = OUTLINED_FUNCTION_1();
      v134 = v52;
      v61 = (uint8_t *)v60;
      v138 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v61 = 136315138;
      lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, (uint64_t (*)(uint64_t))MEMORY[0x24BEA5580], MEMORY[0x24BEA5590]);
      v62 = dispatch thunk of CustomStringConvertible.description.getter();
      v64 = OUTLINED_FUNCTION_34_12(v62, v63);
      OUTLINED_FUNCTION_36_12(v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_21_19();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v49, v59, "#ReferenceResolution Found a candidate %s", v61);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_21_19();

    v76 = (uint64_t)v126;
    RRCandidate.entity.getter();
    ((void (*)(char *, uint64_t))v23)(v55, v57);
    v77 = OUTLINED_FUNCTION_35_1((uint64_t)v135, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    OUTLINED_FUNCTION_7_30(v77, &demangling cache variable for type metadata for Result<RRResult, Error>);
    OUTLINED_FUNCTION_3_28(v78, &demangling cache variable for type metadata for RREntity?);
    OUTLINED_FUNCTION_28_15(v76, 0);
    v79 = v76;
    goto LABEL_48;
  }
  v66 = v132;
  if (v51 == *MEMORY[0x24BEA5AB8])
  {
    v67 = v52;
    OUTLINED_FUNCTION_35_1((uint64_t)v50, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 96));
    v68 = *v50;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v69 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v69, (uint64_t)static Logger.siriContacts);
    v70 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v70))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_4_31(&dword_21FE16000, v49, (os_log_type_t)v50, "#ReferenceResolution Found ambiguous entities -> returning the first one");
      OUTLINED_FUNCTION_0();
    }

    v71 = v124;
    specialized Collection.first.getter(v68, v124);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_7(v71);
    if (!v72)
    {
      v86 = v123;
      RRCandidate.entity.getter();
      v87 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v53, v67);
LABEL_45:
      OUTLINED_FUNCTION_7_30(v87, &demangling cache variable for type metadata for Result<RRResult, Error>);
      OUTLINED_FUNCTION_3_28(v102, &demangling cache variable for type metadata for RREntity?);
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v71, v66);
      goto LABEL_46;
    }
    v73 = OUTLINED_FUNCTION_6_34();
    OUTLINED_FUNCTION_7_30(v73, &demangling cache variable for type metadata for Result<RRResult, Error>);
    OUTLINED_FUNCTION_3_28(v74, &demangling cache variable for type metadata for RREntity?);
    outlined destroy of FlowActivity?(v71, &demangling cache variable for type metadata for RRCandidate?);
    v75 = 1;
    v86 = v123;
LABEL_47:
    OUTLINED_FUNCTION_28_15(v86, v75);
    v79 = v86;
LABEL_48:
    outlined init with take of RREntity?(v79, v49);
    return;
  }
  if (v51 == *MEMORY[0x24BEA5AB0])
  {
    v80 = v52;
    OUTLINED_FUNCTION_35_1((uint64_t)v50, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 96));
    v81 = *v50;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v82 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v82, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain();
    v83 = Logger.logObject.getter();
    v84 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_3(v84))
    {
      v85 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_DWORD *)v85 = 134217984;
      v138 = *(_QWORD *)(v81 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v83, (os_log_type_t)v52, "#ReferenceResolution Found %ld candidates. Using the first one", v85);
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_5_0();
    v86 = v121;
    v71 = v122;
    specialized Collection.first.getter(v81, v122);
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_13_7(v71);
    v49 = v80;
    if (!v72)
    {
      RRCandidate.entity.getter();
      v87 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v29, v80);
      goto LABEL_45;
    }
    v96 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v29, v80);
    OUTLINED_FUNCTION_7_30(v96, &demangling cache variable for type metadata for Result<RRResult, Error>);
    OUTLINED_FUNCTION_3_28(v97, &demangling cache variable for type metadata for RREntity?);
    v95 = v71;
    goto LABEL_39;
  }
  if (v51 == *MEMORY[0x24BEA5AC0])
  {
    OUTLINED_FUNCTION_35_1((uint64_t)v50, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 96));
    v49 = *v50;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v88 = OUTLINED_FUNCTION_26();
    v89 = OUTLINED_FUNCTION_10_1(v88, (uint64_t)static Logger.siriContacts);
    v90 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_3(v90))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_4_31(&dword_21FE16000, v89, (os_log_type_t)v52, "#ReferenceResolution Found ambiguous entities -> returning the first one");
      OUTLINED_FUNCTION_0();
    }

    v91 = v119;
    if (!*(_QWORD *)(v49 + 16))
    {
      OUTLINED_FUNCTION_5_0();
      v112 = OUTLINED_FUNCTION_6_34();
      OUTLINED_FUNCTION_7_30(v112, &demangling cache variable for type metadata for Result<RRResult, Error>);
      OUTLINED_FUNCTION_3_28(v113, &demangling cache variable for type metadata for RREntity?);
      v75 = 1;
      v86 = v120;
      goto LABEL_47;
    }
    v92 = *(_QWORD *)(v49 + 32);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_5_0();
    specialized Collection.first.getter(v92, v91);
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_13_7(v91);
    v86 = v120;
    if (!v72)
    {
      RRCandidate.entity.getter();
      v114 = OUTLINED_FUNCTION_6_34();
      OUTLINED_FUNCTION_7_30(v114, &demangling cache variable for type metadata for Result<RRResult, Error>);
      OUTLINED_FUNCTION_3_28(v115, &demangling cache variable for type metadata for RREntity?);
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v91, v66);
LABEL_46:
      v75 = 0;
      goto LABEL_47;
    }
    v93 = OUTLINED_FUNCTION_6_34();
    OUTLINED_FUNCTION_7_30(v93, &demangling cache variable for type metadata for Result<RRResult, Error>);
    OUTLINED_FUNCTION_3_28(v94, &demangling cache variable for type metadata for RREntity?);
    v95 = v91;
LABEL_39:
    outlined destroy of FlowActivity?(v95, &demangling cache variable for type metadata for RRCandidate?);
    v75 = 1;
    goto LABEL_47;
  }
  if (v51 == *MEMORY[0x24BEA5AC8])
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v98 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v98, (uint64_t)static Logger.siriContacts);
    v99 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v99))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v100, v101, "#ReferenceResolution No matches found");
      OUTLINED_FUNCTION_0();
    }

    v65 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v29, v52);
    goto LABEL_12;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v103 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v103, (uint64_t)static Logger.siriContacts);
  v104 = v118;
  ((void (*)(uint64_t, char *, uint64_t))v49)(v118, v29, v52);
  v105 = Logger.logObject.getter();
  v106 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v105, v106))
  {
    v107 = v52;
    v108 = (uint8_t *)OUTLINED_FUNCTION_1();
    v138 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v108 = 136315138;
    v135 = v29;
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type RRResult and conformance RRResult, (uint64_t (*)(uint64_t))MEMORY[0x24BEA5AD0], MEMORY[0x24BEA5AE8]);
    v109 = dispatch thunk of CustomStringConvertible.description.getter();
    v111 = OUTLINED_FUNCTION_34_12(v109, v110);
    OUTLINED_FUNCTION_36_12(v111);
    OUTLINED_FUNCTION_30_16();
    OUTLINED_FUNCTION_5();
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v104, v107);
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v105, v106, "#ReferenceResolution Received unknown result type %s", v108);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v116 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  v116(v104, v52);
  v117 = ((uint64_t (*)(char *, uint64_t))v116)(v29, v52);
  OUTLINED_FUNCTION_7_30(v117, &demangling cache variable for type metadata for Result<RRResult, Error>);
  v116((uint64_t)v131, v52);
}

uint64_t RRReferenceResolverProtocol.resolvePositionEntity(from:)@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  USOParse.preferredUserDialogAct.getter((uint64_t)v11);
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    v13 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    v14 = (uint64_t)v11;
  }
  else
  {
    v15 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
    if (!v15)
      goto LABEL_9;
    v16 = static RRReferenceResolverProtocol.extractPositionEntity(task:)();
    if (!v16)
    {
      swift_release();
      goto LABEL_9;
    }
    RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(v16, a1, a2, (uint64_t)v8);
    swift_release();
    swift_release();
    v17 = type metadata accessor for RREntity();
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v17) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a3, v8, v17);
      v23 = a3;
      v24 = 0;
      v22 = v17;
      return __swift_storeEnumTagSinglePayload(v23, v24, 1, v22);
    }
    v13 = &demangling cache variable for type metadata for RREntity?;
    v14 = (uint64_t)v8;
  }
  outlined destroy of FlowActivity?(v14, v13);
LABEL_9:
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriContacts);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_21FE16000, v19, v20, "#ReferenceResolution Did not resolve RREntity from UsoParse, returning nil", v21, 2u);
    MEMORY[0x2207D8768](v21, -1, -1);
  }

  v22 = type metadata accessor for RREntity();
  v23 = a3;
  v24 = 1;
  return __swift_storeEnumTagSinglePayload(v23, v24, 1, v22);
}

uint64_t static RRReferenceResolverProtocol.extractPositionEntity(task:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[2];
  _BYTE v17[32];
  _BYTE v18[24];
  uint64_t v19;

  v1 = v0;
  static UsoTask_CodegenConverter.convert(task:)();
  if (v19)
  {
    outlined init with copy of Result<RRResult, Error>((uint64_t)v18, (uint64_t)v17, &demangling cache variable for type metadata for Any?);
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    if (OUTLINED_FUNCTION_2_45())
    {
      v1 = v16[1];
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      OUTLINED_FUNCTION_49();
      if (v16[0])
      {
        swift_retain();
        v2 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
        swift_release();
        OUTLINED_FUNCTION_2();
        if (v2)
        {
          if (one-time initialization token for siriContacts != -1)
            swift_once();
          v3 = OUTLINED_FUNCTION_26();
          __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
          OUTLINED_FUNCTION_29_21();
          v4 = Logger.logObject.getter();
          v5 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v4, v5))
          {
            v6 = (uint8_t *)OUTLINED_FUNCTION_1();
            v16[0] = (void *)OUTLINED_FUNCTION_1();
            *(_DWORD *)v6 = 136315138;
            CodeGenBase.entity.getter();
            v7 = UsoEntity.debugString.getter();
            v9 = v8;
            OUTLINED_FUNCTION_2();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, (uint64_t *)v16);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            OUTLINED_FUNCTION_50_0();
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_43_0(&dword_21FE16000, v4, v5, "#ReferenceResolution Found positional reference, returning: %s", v6);
            OUTLINED_FUNCTION_16();
            OUTLINED_FUNCTION_0();
          }

          OUTLINED_FUNCTION_50_0();
          swift_retain();
          v10 = CodeGenBase.entity.getter();
          OUTLINED_FUNCTION_49();
          OUTLINED_FUNCTION_50_0();
          goto LABEL_22;
        }
        swift_release();
      }
      OUTLINED_FUNCTION_49();
    }
    else
    {
      type metadata accessor for UsoTask_request_common_Person();
      if (OUTLINED_FUNCTION_2_45()
        || (type metadata accessor for UsoTask_summarise_common_Person(), OUTLINED_FUNCTION_2_45())
        || (type metadata accessor for UsoTask_read_common_Person(), OUTLINED_FUNCTION_2_45()))
      {
        OUTLINED_FUNCTION_27_18();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        v10 = static RRReferenceResolverProtocol.helper(person:)(v16[0]);
        swift_release();
        swift_release();
LABEL_22:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
        outlined destroy of FlowActivity?((uint64_t)v18, &demangling cache variable for type metadata for Any?);
        return v10;
      }
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  }
  outlined destroy of FlowActivity?((uint64_t)v18, &demangling cache variable for type metadata for Any?);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v11 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v11, (uint64_t)static Logger.siriContacts);
  v12 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_30_3(v12))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_2_5(&dword_21FE16000, v13, v14, "#ReferenceResolution Found no positional reference, returning nil");
    OUTLINED_FUNCTION_0();
  }

  return 0;
}

uint64_t static RRReferenceResolverProtocol.helper(person:)(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (a1)
  {
    v1 = a1;
    swift_retain();
    v2 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    if (v2)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v3 = OUTLINED_FUNCTION_26();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
      OUTLINED_FUNCTION_29_21();
      v4 = Logger.logObject.getter();
      v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)OUTLINED_FUNCTION_1();
        v16 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v6 = 136315138;
        CodeGenBase.entity.getter();
        v7 = UsoEntity.debugString.getter();
        v9 = v8;
        OUTLINED_FUNCTION_2();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v16);
        OUTLINED_FUNCTION_30_16();
        OUTLINED_FUNCTION_50_0();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_43_0(&dword_21FE16000, v4, v5, "#ReferenceResolution Found positional reference, returning: %s", v6);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_50_0();
      swift_retain();
      v14 = CodeGenBase.entity.getter();
      OUTLINED_FUNCTION_50_0();
      return v14;
    }
    OUTLINED_FUNCTION_49();
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v10 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v10, (uint64_t)static Logger.siriContacts);
  v11 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_30_3(v11))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_2_5(&dword_21FE16000, v12, v13, "#ReferenceResolution Found no positional reference, returning nil");
    OUTLINED_FUNCTION_0();
  }

  return 0;
}

uint64_t outlined init with take of RREntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void outlined init with copy of Result<RRResult, Error>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  OUTLINED_FUNCTION_31_0();
}

uint64_t OUTLINED_FUNCTION_2_45()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_3_28(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FlowActivity?(*(_QWORD *)(v2 - 160), a2);
}

uint64_t OUTLINED_FUNCTION_6_34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

void OUTLINED_FUNCTION_7_30(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FlowActivity?(*(_QWORD *)(v2 - 112), a2);
}

uint64_t OUTLINED_FUNCTION_21_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_27_18()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_28_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 168));
}

uint64_t OUTLINED_FUNCTION_29_21()
{
  return swift_retain_n();
}

id OUTLINED_FUNCTION_31_17()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_33_11()
{
  return type metadata accessor for RREntity();
}

uint64_t OUTLINED_FUNCTION_34_12(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_36_12(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t UsoEntity_common_Person.contactId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, unint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_1_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_17_2();
  v4 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v7 = *(_QWORD *)(v3 + 72);
    v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
    OUTLINED_FUNCTION_25_16();
    while (1)
    {
      v8(v1, v6, v2);
      if ((closure #1 in UsoEntity_common_Person.contactId.getter() & 1) != 0)
        break;
      OUTLINED_FUNCTION_92(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      v6 += v7;
      if (!--v5)
      {
        OUTLINED_FUNCTION_5();
        goto LABEL_6;
      }
    }
    OUTLINED_FUNCTION_5();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v1, v2);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  __swift_storeEnumTagSinglePayload(v0, v9, 1, v2);
  OUTLINED_FUNCTION_5();
  if (__swift_getEnumTagSinglePayload(v0, 1, v2) == 1)
  {
    outlined destroy of UsoIdentifier?(v0);
    return 0;
  }
  else
  {
    v10 = UsoIdentifier.value.getter();
    OUTLINED_FUNCTION_92(v0, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  return v10;
}

uint64_t UsoEntity_common_PostalAddress.requestedAddressField.getter()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = (char *)static ContactNLIntent.ContactPostalAddressField.allCases.getter();
  v1 = *((_QWORD *)v0 + 2);
  if (v1)
  {
    v2 = v0 + 32;
    while (1)
    {
      v4 = *v2++;
      v3 = v4;
      CodeGenBase.entity.getter();
      v5 = UsoEntity.attributes.getter();
      OUTLINED_FUNCTION_2();
      if (!*(_QWORD *)(v5 + 16))
        break;
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)&aCity_2[8 * v3], qword_21FEDD1F8[v3]);
      if ((v7 & 1) == 0)
        break;
      v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
      OUTLINED_FUNCTION_25_16();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v8 >> 62)
      {
        OUTLINED_FUNCTION_25_16();
        v12 = _CocoaArrayWrapper.endIndex.getter();
        result = OUTLINED_FUNCTION_5();
        if (!v12)
          goto LABEL_13;
      }
      else if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_13;
      }
      if ((v8 & 0xC000000000000001) != 0)
      {
        MEMORY[0x2207D80C0](0, v8);
      }
      else
      {
        if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        swift_retain();
      }
      OUTLINED_FUNCTION_5();
      dispatch thunk of UsoValue.getAsPrimitiveValueString()();
      v11 = v10;
      OUTLINED_FUNCTION_45();
      OUTLINED_FUNCTION_5();
      if (!v11)
      {
        v13 = v3;
        goto LABEL_20;
      }
LABEL_14:
      if (!--v1)
        goto LABEL_19;
    }
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_19:
  v13 = 5;
LABEL_20:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t UsoEntity_common_Person.contactIds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x24BDAC7A8](v0);
  v37 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v33 - v5;
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v33 - v7;
  v9 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  v10 = MEMORY[0x24BEE4AF8];
  if (v9)
    v11 = v9;
  else
    v11 = MEMORY[0x24BEE4AF8];
  v39 = MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(v11 + 16);
  v38 = v0;
  if (v12)
  {
    v13 = 0;
    v35 = v11;
    v36 = v6;
    v34 = v12;
    while (v13 < *(_QWORD *)(v11 + 16))
    {
      v14 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
      v15 = *(_QWORD *)(v1 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v8, v11 + v14 + v15 * v13, v0);
      if ((closure #1 in UsoEntity_common_Person.contactId.getter() & 1) != 0)
      {
        v16 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
        v16(v6, v8, v0);
        if ((OUTLINED_FUNCTION_16_18() & 1) == 0)
        {
          OUTLINED_FUNCTION_13_30();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v11 = v39;
        }
        v17 = *(_QWORD *)(v11 + 16);
        if (v17 >= *(_QWORD *)(v11 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v11 = v39;
        }
        *(_QWORD *)(v11 + 16) = v17 + 1;
        v18 = v11 + v14 + v17 * v15;
        v6 = v36;
        v0 = v38;
        v16((char *)v18, v36, v38);
        v39 = v11;
        v12 = v34;
        v11 = v35;
      }
      else
      {
        OUTLINED_FUNCTION_92((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
      }
      if (v12 == ++v13)
      {
        v10 = v39;
        goto LABEL_16;
      }
    }
    __break(1u);
    OUTLINED_FUNCTION_92((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
    OUTLINED_FUNCTION_5();
    result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_16:
    OUTLINED_FUNCTION_5();
    v19 = *(_QWORD *)(v10 + 16);
    if (v19)
    {
      v39 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
      v20 = v10 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      v36 = *(char **)(v1 + 72);
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
      do
      {
        v22 = (uint64_t)v37;
        v21(v37, v20, v0);
        v23 = UsoIdentifier.value.getter();
        v25 = v24;
        OUTLINED_FUNCTION_92(v22, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
        if ((OUTLINED_FUNCTION_16_18() & 1) == 0)
        {
          v26 = (char *)OUTLINED_FUNCTION_13_30();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26, v27, v28);
          v22 = v39;
        }
        v30 = *(_QWORD *)(v22 + 16);
        v29 = *(_QWORD *)(v22 + 24);
        if (v30 >= v29 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1);
          v22 = v39;
        }
        *(_QWORD *)(v22 + 16) = v30 + 1;
        v31 = v22 + 16 * v30;
        *(_QWORD *)(v31 + 32) = v23;
        *(_QWORD *)(v31 + 40) = v25;
        v20 += (unint64_t)v36;
        --v19;
        v0 = v38;
      }
      while (v19);
      OUTLINED_FUNCTION_45();
    }
    else
    {
      OUTLINED_FUNCTION_45();
      return MEMORY[0x24BEE4AF8];
    }
    return v22;
  }
  return result;
}

uint64_t static UsoEntity.from(_:)(uint64_t a1)
{
  return static UsoEntity.from(_:)(a1, (void (*)(_QWORD))MEMORY[0x24BEA2BC0], (void (*)(uint64_t))static UsoEntityBuilder_common_PostalAddress.from(_:));
}

{
  return static UsoEntity.from(_:)(a1, (void (*)(_QWORD))MEMORY[0x24BEA2600], (void (*)(uint64_t))static UsoEntityBuilder_common_PhoneNumber.from(_:));
}

{
  return static UsoEntity.from(_:)(a1, (void (*)(_QWORD))MEMORY[0x24BEA27E0], (void (*)(uint64_t))static UsoEntityBuilder_common_EmailAddress.from(_:));
}

uint64_t static UsoEntity.from(_:)(uint64_t a1, void (*a2)(_QWORD), void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  a2(0);
  a3(a1);
  v5 = MEMORY[0x2207D6B18]();
  if (v5)
  {
    v6 = v5;
  }
  else
  {
    v6 = type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_11_3();
    v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    *v8 = _typeName(_:qualified:)();
    v8[1] = v9;
    OUTLINED_FUNCTION_8_22();
    v8[2] = v10;
    v8[3] = v11;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  OUTLINED_FUNCTION_2();
  return v6;
}

uint64_t ContactAttribute.asUsoBuilder.getter()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  if (one-time initialization token for transformer != -1)
    swift_once();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<ContactAttribute, UsoEntityBuilderProtocol_common_ContactAddress?>);
  __swift_project_value_buffer(v1, (uint64_t)static Transformer<>.transformer);
  v2 = (void (*)(uint64_t *__return_ptr, uint64_t *))Transformer.transform.getter();
  v5 = v0;
  v2(&v4, &v5);
  OUTLINED_FUNCTION_2();
  return v4;
}

uint64_t static UsoEntity.from(_:_:)(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;

  v50 = a2;
  v48 = type metadata accessor for ContactsError();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_17_2();
  v49 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntityBuilder_common_Person();
  OUTLINED_FUNCTION_32_0();
  v6 = UsoEntityBuilder_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_PersonName();
  OUTLINED_FUNCTION_32_0();
  v7 = UsoEntityBuilder_common_PersonName.init()();
  v8 = OUTLINED_FUNCTION_3_29(v7, sel_nickname);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  MEMORY[0x2207D6DA0](v9, v11);
  v12 = OUTLINED_FUNCTION_23_5();
  v13 = OUTLINED_FUNCTION_3_29(v12, sel_givenName);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_1_41();
  v14 = OUTLINED_FUNCTION_2_46();
  MEMORY[0x2207D6DAC](v14);
  v15 = OUTLINED_FUNCTION_23_5();
  v16 = OUTLINED_FUNCTION_3_29(v15, sel_familyName);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_1_41();
  v17 = OUTLINED_FUNCTION_2_46();
  MEMORY[0x2207D6DB8](v17);
  v18 = OUTLINED_FUNCTION_23_5();
  v19 = OUTLINED_FUNCTION_3_29(v18, sel_middleName);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_1_41();
  v20 = OUTLINED_FUNCTION_2_46();
  MEMORY[0x2207D6DC4](v20);
  v21 = OUTLINED_FUNCTION_23_5();
  v22 = OUTLINED_FUNCTION_3_29(v21, sel_namePrefix);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_1_41();
  v23 = OUTLINED_FUNCTION_2_46();
  MEMORY[0x2207D6D88](v23);
  v24 = OUTLINED_FUNCTION_23_5();
  v25 = OUTLINED_FUNCTION_3_29(v24, sel_nameSuffix);
  OUTLINED_FUNCTION_5_14();
  OUTLINED_FUNCTION_1_41();
  v26 = OUTLINED_FUNCTION_2_46();
  MEMORY[0x2207D6D94](v26);
  OUTLINED_FUNCTION_23_5();
  v27 = swift_retain();
  MEMORY[0x2207D6C98](v27, MEMORY[0x24BEA23C0]);
  OUTLINED_FUNCTION_52();
  v28 = CNContact.formattedFullName.getter();
  v30 = v29;
  MEMORY[0x2207D6CC8](v28);
  v31 = swift_bridgeObjectRelease();
  v32 = MEMORY[0x2207D6CBC](v31);
  if (v32)
  {
    v33 = OUTLINED_FUNCTION_3_29(v32, sel_identifier);
    OUTLINED_FUNCTION_5_14();

    OUTLINED_FUNCTION_9_26();
    UsoIdentifier.init(value:appBundleId:namespace:)();
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    OUTLINED_FUNCTION_2();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v49);
  }
  if (v50)
  {
    v34 = v50;
    if (ContactAttribute.asUsoBuilder.getter())
    {
      MEMORY[0x2207D6CB0]();

      swift_release();
    }
    else
    {

    }
  }
  v35 = MEMORY[0x2207D6B18](v6);
  if (v35)
  {
    v36 = v35;
  }
  else
  {
    v37 = type metadata accessor for TransformationError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type TransformationError and conformance TransformationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEA8DC8], MEMORY[0x24BEA8DD0]);
    OUTLINED_FUNCTION_11_3();
    v39 = v38;
    type metadata accessor for CNContact();
    *v2 = _typeName(_:qualified:)();
    v2[1] = v40;
    OUTLINED_FUNCTION_8_22();
    v2[2] = v41;
    v2[3] = v42;
    swift_storeEnumTagMultiPayload();
    ContactsError.errorDescription.getter();
    v36 = v43;
    v45 = v44;
    outlined destroy of ContactsError((uint64_t)v2);
    *v39 = v36;
    v39[1] = v45;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, *MEMORY[0x24BEA8DC0], v37);
    swift_willThrow();
  }
  swift_release();
  OUTLINED_FUNCTION_52();
  return v36;
}

uint64_t closure #1 in UsoEntity_common_Person.contactId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v14;

  type metadata accessor for UsoIdentifier();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_1_30();
  v0 = type metadata accessor for IdentifierAppBundle();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UsoIdentifier.appBundleSemantic.getter();
  v4 = IdentifierAppBundle.rawValue.getter();
  v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4 == 0x73746361746E6F43 && v6 == 0xE800000000000000)
  {
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_7_31();
  }
  else
  {
    OUTLINED_FUNCTION_9_26();
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_7_31();
    if ((v8 & 1) == 0)
      goto LABEL_14;
  }
  v9 = UsoIdentifier.namespace.getter();
  if (!v10)
  {
LABEL_14:
    OUTLINED_FUNCTION_12_27();
    v12 = 0;
    return v12 & 1;
  }
  if (v9 == 0x64695F6D657469 && v10 == 0xE700000000000000)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_12_27();
  OUTLINED_FUNCTION_5();
  return v12 & 1;
}

uint64_t outlined destroy of UsoIdentifier?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void OUTLINED_FUNCTION_1_41()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_2_46()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_3_29(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_7_31()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_12_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_13_30()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_16_18()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void specialized SiriKitContactIntent.me.getter()
{
  void *v0;
  id v1;
  void *v2;
  Class isa;

  v1 = objc_msgSend(v0, sel_isMe);
  if (v1)
  {
    v2 = v1;
    type metadata accessor for NSNumber();
    isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    static NSObject.== infix(_:_:)();

  }
  OUTLINED_FUNCTION_22_6();
}

uint64_t specialized SiriKitContactIntent.me.getter()
{
  Class isa;
  Class v1;
  char v2;

  type metadata accessor for NSNumber();
  isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
  v1 = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v2 = static NSObject.== infix(_:_:)();

  return v2 & 1;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t *v26;
  char v28;
  uint64_t v29;
  uint64_t *v31;
  uint64_t v35;

  v6 = v5;
  v35 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v31 = v6;
      v10 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v11 = (id)MEMORY[0x2207D80C0](v10, a1);
LABEL_7:
        v12 = v11;
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_30;
        v14 = objc_msgSend(v11, sel_label);
        if (v14)
        {
          v15 = v14;
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v18 = v17;

        }
        else
        {
          v16 = 0;
          v18 = 0;
        }
        v19 = static Dictionary<>.nlSemantic(forCNLabel:)(v16, v18);
        v6 = v20;
        swift_bridgeObjectRelease();
        if (v19 == a2 && v6 == a3)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v22 & 1) == 0)
            goto LABEL_23;
        }
        v23 = objc_msgSend(v12, sel_value, v31);
        v24 = objc_msgSend(v23, sel_name);

        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v6 = v26;

        if (v25 == a4 && v6 == a5)
        {
          swift_bridgeObjectRelease();
LABEL_25:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          v6 = &v35;
          specialized ContiguousArray._endMutation()();
          goto LABEL_26;
        }
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
          goto LABEL_25;
LABEL_23:

LABEL_26:
        ++v10;
        if (v13 == v9)
        {
          v29 = v35;
          goto LABEL_33;
        }
      }
      if (v10 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9)
        goto LABEL_32;
    }
    v11 = *(id *)(a1 + 8 * v10 + 32);
    goto LABEL_7;
  }
LABEL_32:
  v29 = MEMORY[0x24BEE4AF8];
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = MEMORY[0x24BEE4AF8];
  v9 = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    type metadata accessor for SiriMatch();
    swift_bridgeObjectRetain();
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v8 = *(v4 - 3);
      v7 = *(v4 - 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SiriMatch.__allocating_init(identifier:fullName:)(v8, v7, v5, v6);
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v4 += 4;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v9;
  }
  return result;
}

void ModifyContactAttributeIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  (*(void (**)(uint64_t))(v13 + 16))(v11 - v10);
  v14 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = __swift_mutable_project_boxed_opaque_existential_1(a2, v14);
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_55_0();
  v19 = v18 - v17;
  (*(void (**)(uint64_t))(v20 + 16))(v18 - v17);
  specialized ModifyContactAttributeIntentHandler.init(contactService:contactResolver:)(v12, v19, v6, v7, v14, v8, v15);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  OUTLINED_FUNCTION_7();
}

void *specialized BaseIntentHandler.meCard.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v10[5];

  v1 = v0;
  v2 = direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard;
  v3 = *(void **)(v0 + direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard);
  v4 = v3;
  if (v3 == (void *)1)
  {
    outlined init with copy of DeviceState(v1 + direct field offset for BaseIntentHandler.contactService, (uint64_t)v10);
    v5 = v10[3];
    v6 = v10[4];
    OUTLINED_FUNCTION_120_2(v10);
    v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
    v7 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v4;
    v8 = v4;
    outlined consume of CNContact??(v7);
  }
  outlined copy of CNContact??(v3);
  return v4;
}

id specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)(os_log_type_t a1, void (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *v8;
  id result;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  a2(0);
  outlined init with copy of DeviceState(v2 + direct field offset for BaseIntentHandler.contactService, (uint64_t)v17);
  v5 = v18;
  v6 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  if ((v7 & 1) != 0)
  {
    if ((a1 & 1) == 0 || (v8 = specialized BaseIntentHandler.meCard.getter(), v8, v8))
    {
      result = 0;
      *(_BYTE *)(v3 + direct field offset for BaseIntentHandler.passedPrereqs) = 1;
      return result;
    }
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v14 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v14, (uint64_t)static Logger.siriContacts);
    v15 = OUTLINED_FUNCTION_38_6();
    if (OUTLINED_FUNCTION_53(v15))
    {
      v16 = (uint8_t *)OUTLINED_FUNCTION_1();
      v17[0] = OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_61_9(4.8149e-34, v17[0]);
      OUTLINED_FUNCTION_60_13();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, 0, a1, "[%s] MeCard was not found and user requested info about their MeCard or relationships. Returning unsupported due to missingMeCard.", v16);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 2);
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v10 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v10, (uint64_t)static Logger.siriContacts);
    v11 = OUTLINED_FUNCTION_38_6();
    if (OUTLINED_FUNCTION_53(v11))
    {
      v12 = (uint8_t *)OUTLINED_FUNCTION_1();
      v17[0] = OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_61_9(4.8149e-34, v17[0]);
      OUTLINED_FUNCTION_60_13();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v7, a1, "[%s] Siri isn't authorized to access Contacts app data, need to prompt the user.", v12);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 1);
  }
  return v13;
}

void specialized BaseIntentHandler.resolveContacts(intent:)(void *a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), char *a6, uint64_t (*a7)(void))
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *p_isa;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (**v45)(uint64_t, NSObject *);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t);
  NSObject *v49;
  os_log_type_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  BOOL v57;
  char *v58;
  os_log_type_t v59;
  _DWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(void);
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  BOOL v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, void (**)(uint64_t, NSObject *), uint64_t);
  uint64_t *v99;
  __int128 *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  void (*v105)(uint64_t *, NSObject *, uint64_t);
  uint64_t v106;
  uint64_t (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  __int128 *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t isa;
  os_log_type_t v135;
  _QWORD *v136;
  uint64_t v137;
  NSObject *v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  os_log_type_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  NSObject *v153;
  _QWORD *v154;
  id v155;
  uint64_t v156;
  NSObject *v157;
  NSObject *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  char v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  uint64_t v173;
  Class v174;
  id v175;
  uint64_t v176;
  NSObject *v177;
  NSObject *v178;
  uint64_t (*v179)(uint64_t, _QWORD);
  unint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  NSObject *v183;
  uint64_t v184;
  uint64_t v185;
  os_log_type_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(uint64_t, uint64_t);
  unint64_t v195;
  uint64_t (*v196)(uint64_t, _QWORD);
  uint64_t v197;
  NSObject *v198;
  uint64_t v199;
  BOOL v200;
  uint64_t v201;
  _DWORD *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  Class v206;
  os_log_type_t v207;
  _DWORD *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  void (*v212)(uint64_t, char *, uint64_t);
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  void *v219;
  Class v220;
  id v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t (*v225)(uint64_t, _QWORD);
  id v226;
  uint64_t (*v227)(uint64_t, _QWORD);
  _DWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  _QWORD v233[3];
  uint64_t (*v234)(void);
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  __int128 *v239;
  void (**v240)(uint64_t, NSObject *);
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  void (*v245)(uint64_t, uint64_t);
  uint64_t v246;
  id v247;
  NSObject *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t (*v252)(_QWORD);
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 v259;
  NSObject *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  void (*v267)(uint64_t, uint64_t);
  uint64_t *v268;
  uint64_t v269;
  char *v270;
  void (*v271)(uint64_t, void (**)(uint64_t, NSObject *), uint64_t);
  NSObject *v272;
  void (*v273)(uint64_t, char *, uint64_t);
  uint64_t v274;
  uint64_t v275[5];

  v234 = a7;
  v265 = a6;
  v252 = a5;
  v257 = a4;
  v261 = a3;
  v269 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  v271 = *(void (**)(uint64_t, void (**)(uint64_t, NSObject *), uint64_t))(v269 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_5_2();
  v268 = v10;
  MEMORY[0x24BDAC7A8](v11);
  v272 = ((char *)v233 - v12);
  v256 = type metadata accessor for PersonNameComponents();
  v255 = *(_QWORD *)(v256 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v14);
  v15 = type metadata accessor for ContactQuery();
  v270 = *(char **)(v15 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_5_2();
  v266 = v17;
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_19_16((uint64_t)v233 - v19);
  v264 = type metadata accessor for RecommenderType();
  v262 = *(_QWORD *)(v264 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_9_5();
  v263 = v21;
  v250 = type metadata accessor for SearchSuggestedContacts();
  v246 = *(_QWORD *)(v250 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v23);
  type metadata accessor for ContactResolverDomain();
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v25);
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_9_5();
  v244 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleTypePreference?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v29);
  v30 = type metadata accessor for ContactResolverConfig();
  p_isa = *(_QWORD **)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v32);
  v33 = type metadata accessor for Contact();
  v34 = *(__int128 **)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  v40 = MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)v233 - v41;
  v43 = MEMORY[0x24BDAC7A8](v40);
  v45 = (void (**)(uint64_t, NSObject *))((char *)v233 - v44);
  v247 = a1;
  a2(v43);
  if (one-time initialization token for siriContacts != -1)
    goto LABEL_103;
  while (1)
  {
    v46 = OUTLINED_FUNCTION_26();
    v47 = __swift_project_value_buffer(v46, (uint64_t)static Logger.siriContacts);
    v48 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v34 + 2);
    v260 = v45;
    v273 = (void (*)(uint64_t, char *, uint64_t))v48;
    v48(v42, v45, v33);
    v258 = v47;
    v49 = Logger.logObject.getter();
    v50 = static os_log_type_t.debug.getter();
    v51 = os_log_type_enabled(v49, v50);
    v242 = v30;
    v241 = p_isa;
    v253 = v15;
    v239 = v34;
    if (v51)
    {
      v52 = OUTLINED_FUNCTION_1();
      v275[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v52 = 136315394;
      v274 = OUTLINED_FUNCTION_13_31();
      OUTLINED_FUNCTION_52_6();
      *(_WORD *)(v52 + 12) = 2080;
      lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type Contact and conformance Contact, (uint64_t (*)(uint64_t))MEMORY[0x24BE93CC0], MEMORY[0x24BE93CE8]);
      v53 = dispatch thunk of CustomStringConvertible.description.getter();
      v55 = OUTLINED_FUNCTION_157(v53, v54);
      OUTLINED_FUNCTION_152_1(v55);
      OUTLINED_FUNCTION_33_12();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_92_5();
      OUTLINED_FUNCTION_33_6(&dword_21FE16000, v49, v50, "[%s] Built skeleton contact for resolution: %s", (uint8_t *)v52);
      OUTLINED_FUNCTION_51_11();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_92_5();

    v56 = v260;
    v57 = Contact.isEmpty.getter();
    v58 = v266;
    if (v57)
    {
      OUTLINED_FUNCTION_19_24();
      v59 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_3(v59))
      {
        v60 = (_DWORD *)OUTLINED_FUNCTION_1();
        v61 = OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_121_2(v61);
        *v60 = 136315138;
        v64 = OUTLINED_FUNCTION_17_19(v63, v62, v275);
        OUTLINED_FUNCTION_12_28(v64);
        OUTLINED_FUNCTION_23_24(&dword_21FE16000, v65, v66, "[%s] No search terms provided to resolve contact with, returning needsValue.");
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v67 = (uint64_t)v260;
      OUTLINED_FUNCTION_69_12(v252);
      v68 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
      v69 = v67;
      goto LABEL_15;
    }
    if (objc_msgSend(v247, sel_intentId))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_162_0();
    }
    else
    {
      static String.EMPTY.getter();
    }
    v70 = v251;
    v71 = v243;
    static ContactHandleTypePreference.preferPhone.getter();
    v72 = type metadata accessor for ContactHandleTypePreference();
    __swift_storeEnumTagSinglePayload(v71, 0, 1, v72);
    static Locale.current.getter();
    static ContactResolverDomain.all.getter();
    (*(void (**)(_QWORD, _QWORD, uint64_t))(v246 + 104))(v259, *MEMORY[0x24BE939D8], v250);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v262 + 104))(v263, *MEMORY[0x24BE937B0], v264);
    v73 = v249;
    OUTLINED_FUNCTION_159();
    v74 = v261;
    ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)();
    Contact.asContactQuery.getter();
    v75 = v270;
    v76 = v253;
    v265 = (char *)*((_QWORD *)v270 + 2);
    ((void (*)(char *, uint64_t, uint64_t))v265)(v58, v70, v253);
    v77 = OUTLINED_FUNCTION_19_24();
    v78 = static os_log_type_t.debug.getter();
    v79 = v78;
    if (os_log_type_enabled(v77, v78))
    {
      v80 = OUTLINED_FUNCTION_1();
      v275[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v80 = 136315394;
      LODWORD(v264) = v79;
      v274 = OUTLINED_FUNCTION_17_19(v74, v81, v275);
      OUTLINED_FUNCTION_52_6();
      *(_WORD *)(v80 + 12) = 2080;
      lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactQuery and conformance ContactQuery, (uint64_t (*)(uint64_t))MEMORY[0x24BE934C0], MEMORY[0x24BE934D0]);
      v82 = dispatch thunk of CustomStringConvertible.description.getter();
      v84 = OUTLINED_FUNCTION_157(v82, v83);
      OUTLINED_FUNCTION_152_1(v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_173(*((uint64_t (**)(void))v270 + 1));
      OUTLINED_FUNCTION_33_6(&dword_21FE16000, v77, (os_log_type_t)v264, "[%s] Converted skeleton contact to ContactQuery: %s", (uint8_t *)v80);
      OUTLINED_FUNCTION_51_11();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_134_0();
    OUTLINED_FUNCTION_173(v85);

    outlined init with copy of DeviceState((uint64_t)v248 + direct field offset for BaseIntentHandler.contactResolver, (uint64_t)v275);
    v86 = v275[3];
    v87 = v275[4];
    v88 = OUTLINED_FUNCTION_120_2(v275);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ContactQuery>);
    v89 = (v75[80] + 32) & ~(unint64_t)v75[80];
    v90 = swift_allocObject();
    v259 = xmmword_21FED8CB0;
    *(_OWORD *)(v90 + 16) = xmmword_21FED8CB0;
    ((void (*)(unint64_t, uint64_t, uint64_t))v265)(v90 + v89, v70, v76);
    v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 8))(v90, v73, v86, v87);
    OUTLINED_FUNCTION_5_0();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v275);
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_19_24();
    v92 = OUTLINED_FUNCTION_8();
    v93 = OUTLINED_FUNCTION_42(v92);
    v34 = &xmmword_21FED9000;
    v233[1] = 0;
    if (v93)
    {
      v94 = OUTLINED_FUNCTION_1();
      v275[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v94 = 136315394;
      v95 = OUTLINED_FUNCTION_13_31();
      OUTLINED_FUNCTION_101_4(v95);
      OUTLINED_FUNCTION_135_2();
      *(_WORD *)(v94 + 12) = 2080;
      v96 = OUTLINED_FUNCTION_23_9();
      MEMORY[0x2207D7DE4](v96, v269);
      OUTLINED_FUNCTION_99_5();
      v97 = OUTLINED_FUNCTION_117_2();
      OUTLINED_FUNCTION_152_1(v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_33_6(&dword_21FE16000, v88, (os_log_type_t)v87, "[%s] ContactResolver recommendations: %s", (uint8_t *)v94);
      OUTLINED_FUNCTION_51_11();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_30();
    v45 = v240;
    v98 = v271;
    v99 = v268;
    v100 = v239;
    v266 = *(char **)(v91 + 16);
    if (!v266)
      break;
    OUTLINED_FUNCTION_19_10();
    v265 = (char *)(v91 + v101);
    LODWORD(v264) = *MEMORY[0x24BE93670];
    LODWORD(v250) = *MEMORY[0x24BE93658];
    LODWORD(v246) = *MEMORY[0x24BE93660];
    LODWORD(v243) = *MEMORY[0x24BE93668];
    v102 = *((_QWORD *)v98 + 9);
    v262 = *((_QWORD *)v98 + 2);
    v263 = v102;
    v233[0] = v91;
    OUTLINED_FUNCTION_23_9();
    v103 = 0;
    p_isa = (_QWORD *)MEMORY[0x24BEE4AF8];
    v15 = v269;
    while (1)
    {
      v270 = v103;
      v104 = &v265[v263 * (_QWORD)v103];
      v88 = v272;
      v105 = (void (*)(uint64_t *, NSObject *, uint64_t))v262;
      ((void (*)(NSObject *, char *, uint64_t))v262)(v272, v104, v15);
      v105(v99, v88, v15);
      v106 = OUTLINED_FUNCTION_134_0();
      v108 = v107(v106);
      if ((_DWORD)v108 == (_DWORD)v264)
      {
        OUTLINED_FUNCTION_68_13();
        OUTLINED_FUNCTION_94_5();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>);
        v109 = OUTLINED_FUNCTION_67_10();
        v110 = OUTLINED_FUNCTION_96_4(v109);
        *(_QWORD *)(v111 + 3024) = 1;
LABEL_23:
        v98(v110, v45, v33);
        v98 = v271;
LABEL_24:
        v42 = v270;
        goto LABEL_25;
      }
      if ((_DWORD)v108 == (_DWORD)v250)
      {
        OUTLINED_FUNCTION_68_13();
        OUTLINED_FUNCTION_94_5();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>);
        v112 = OUTLINED_FUNCTION_67_10();
        v110 = OUTLINED_FUNCTION_96_4(v112);
        *(_QWORD *)(v113 + 3024) = 0;
        goto LABEL_23;
      }
      v42 = v270;
      if ((_DWORD)v108 == (_DWORD)v246)
      {
        OUTLINED_FUNCTION_68_13();
        v125 = *v99;
        v126 = *(_QWORD *)(*v99 + 16);
        if (v126)
        {
          v244 = p_isa;
          v275[0] = MEMORY[0x24BEE4AF8];
          v127 = v125;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v88 = v275[0];
          v128 = (*((unsigned __int8 *)v100 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v100 + 80);
          v233[2] = v127;
          v129 = v127 + v128;
          v130 = v100;
          v131 = *((_QWORD *)v100 + 9);
          v132 = v238;
          do
          {
            OUTLINED_FUNCTION_95_5(v132, v129);
            static Contact.confidenceScore = 0;
            v275[0] = (uint64_t)v88;
            v133 = v33;
            isa = (unint64_t)v88[2].isa;
            if (isa >= (unint64_t)v88[3].isa >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v88 = v275[0];
            }
            v88[2].isa = (Class)(isa + 1);
            (*((void (**)(char *, uint64_t, uint64_t))v130 + 4))((char *)v88 + v128 + isa * v131, v132, v133);
            v129 += v131;
            --v126;
            v33 = v133;
          }
          while (v126);
          swift_bridgeObjectRelease();
          v100 = v130;
          v45 = v240;
          v34 = &xmmword_21FED9000;
          v15 = v269;
          v98 = v271;
          p_isa = v244;
          goto LABEL_24;
        }
        swift_bridgeObjectRelease();
        v88 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v88 = MEMORY[0x24BEE4AF8];
        if ((_DWORD)v108 != (_DWORD)v243)
          goto LABEL_107;
      }
LABEL_25:
      (*((void (**)(NSObject *, uint64_t))v98 + 1))(v272, v15);
      v30 = (uint64_t)v88[2].isa;
      v114 = p_isa[2];
      v15 = v114 + v30;
      if (__OFADD__(v114, v30))
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v15 > p_isa[3] >> 1)
      {
        if (v114 <= v15)
          v116 = v114 + v30;
        else
          v116 = v114;
        p_isa = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v116, 1, (uint64_t)p_isa);
      }
      v99 = v268;
      v15 = v269;
      if (v88[2].isa)
      {
        v117 = p_isa[2];
        if ((p_isa[3] >> 1) - v117 < v30)
          goto LABEL_101;
        v118 = (*((unsigned __int8 *)v100 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v100 + 80);
        v119 = *((_QWORD *)v100 + 9);
        v120 = (char *)p_isa + v118 + v119 * v117;
        if ((char *)v88 + v118 < &v120[v119 * v30] && v120 < (char *)v88 + v118 + v119 * v30)
          goto LABEL_106;
        swift_arrayInitWithCopy();
        if (v30)
        {
          v122 = p_isa[2];
          v123 = __OFADD__(v122, v30);
          v124 = v122 + v30;
          if (v123)
            goto LABEL_102;
          p_isa[2] = v124;
        }
      }
      else if (v30)
      {
        goto LABEL_100;
      }
      v103 = v42 + 1;
      OUTLINED_FUNCTION_5();
      v98 = v271;
      if (v103 == v266)
      {
        OUTLINED_FUNCTION_30();
        goto LABEL_56;
      }
    }
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    swift_once();
  }
  swift_bridgeObjectRelease();
  p_isa = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_56:
  OUTLINED_FUNCTION_23_9();
  OUTLINED_FUNCTION_19_24();
  v135 = OUTLINED_FUNCTION_8();
  v136 = p_isa;
  if (OUTLINED_FUNCTION_7_17(v135))
  {
    v137 = OUTLINED_FUNCTION_1();
    v275[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v137 = *((_QWORD *)v34 + 5);
    v274 = OUTLINED_FUNCTION_13_31();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v137 + 12) = 2048;
    v274 = p_isa[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_117();
    OUTLINED_FUNCTION_10_27(&dword_21FE16000, v88, (os_log_type_t)p_isa, "[%s] ContactResolver weighted recommendations count: %ld");
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_117();
  v138 = v260;
  v139 = p_isa[2];
  if (v139 == 1)
  {
    v153 = v248;
    v154 = specialized BaseIntentHandler.meCard.getter();
    if (!v154)
    {
LABEL_91:
      OUTLINED_FUNCTION_19_24();
      v207 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_7_17(v207))
      {
        v208 = (_DWORD *)OUTLINED_FUNCTION_1();
        v275[0] = OUTLINED_FUNCTION_1();
        *v208 = 136315138;
        v274 = OUTLINED_FUNCTION_13_31();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_29_22(&dword_21FE16000, v153, (os_log_type_t)p_isa, "[%s] 1 recommendation returned. Returning success.");
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v272 = OUTLINED_FUNCTION_69_12(v252);
      OUTLINED_FUNCTION_97_4();
      if (v136[2])
      {
        OUTLINED_FUNCTION_19_10();
        v210 = (char *)v136 + v209;
        v211 = (char *)v136 + v209;
        v212 = v273;
        v273((uint64_t)v45, v211, v33);
        v213 = Contact.id.getter();
        v215 = v214;
        v216 = v267;
        v267((uint64_t)v45, v33);
        v217 = v236;
        v212(v236, v210, v33);
        OUTLINED_FUNCTION_5();
        v218 = v254;
        PersonNameComponents.init()();
        Contact.namePrefix.getter();
        PersonNameComponents.namePrefix.setter();
        Contact.givenName.getter();
        PersonNameComponents.givenName.setter();
        Contact.middleName.getter();
        PersonNameComponents.middleName.setter();
        Contact.familyName.getter();
        PersonNameComponents.familyName.setter();
        Contact.nameSuffix.getter();
        PersonNameComponents.nameSuffix.setter();
        v219 = (void *)objc_opt_self();
        v220 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        v221 = OUTLINED_FUNCTION_134_3(v219, sel_localizedStringFromPersonNameComponents_style_options_, (uint64_t)v220);

        v222 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v224 = v223;

        OUTLINED_FUNCTION_147_1();
        OUTLINED_FUNCTION_105_3(v218, v225);
        v216(v217, v33);
        v226 = SiriMatch.__allocating_init(identifier:fullName:)(v213, v215, v222, v224);
        static SiriMatchResolutionResult.success(with:)();

        OUTLINED_FUNCTION_89_3();
        OUTLINED_FUNCTION_147_1();
        OUTLINED_FUNCTION_105_3(v249, v227);
        v216((uint64_t)v260, v33);
        goto LABEL_16;
      }
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      OUTLINED_FUNCTION_2_31();
      OUTLINED_FUNCTION_54_11();
      v108 = OUTLINED_FUNCTION_19_20();
      __break(1u);
LABEL_107:
      MEMORY[0x24BDAC7A8](v108);
      fatalError(_:file:line:)(v234);
    }
    p_isa = v154;
    v155 = objc_msgSend(v154, sel_identifier);
    v156 = OUTLINED_FUNCTION_4_6();
    v158 = v157;

    if (!v136[2])
      goto LABEL_105;
    OUTLINED_FUNCTION_19_10();
    v160 = v235;
    OUTLINED_FUNCTION_95_5(v235, (uint64_t)v136 + v159);
    v161 = Contact.id.getter();
    v153 = v162;
    OUTLINED_FUNCTION_150(v160);
    if (v156 == v161 && v158 == v153)
    {
      OUTLINED_FUNCTION_30();
    }
    else
    {
      v164 = OUTLINED_FUNCTION_11_18();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_5_0();
      if ((v164 & 1) == 0)
        goto LABEL_90;
    }
    v206 = Int._bridgeToObjectiveC()().super.super.isa;
    v153 = MEMORY[0x2207D7CB8](1699574633, 0xE400000000000000);
    objc_msgSend(v247, sel_setValue_forProperty_, v206, v153);

    p_isa = &v153->isa;
LABEL_90:

    goto LABEL_91;
  }
  if (v139)
  {
    v271 = (void (*)(uint64_t, void (**)(uint64_t, NSObject *), uint64_t))objc_opt_self();
    OUTLINED_FUNCTION_19_10();
    v166 = (uint64_t)p_isa + v165;
    v270 = *(char **)(v167 + 72);
    v244 = p_isa;
    OUTLINED_FUNCTION_92_2();
    v168 = MEMORY[0x24BEE4AF8];
    v169 = v237;
    do
    {
      OUTLINED_FUNCTION_95_5(v169, v166);
      v170 = Contact.id.getter();
      v171 = v33;
      v272 = v172;
      v173 = v254;
      PersonNameComponents.init()();
      Contact.namePrefix.getter();
      PersonNameComponents.namePrefix.setter();
      Contact.givenName.getter();
      PersonNameComponents.givenName.setter();
      Contact.middleName.getter();
      PersonNameComponents.middleName.setter();
      Contact.familyName.getter();
      PersonNameComponents.familyName.setter();
      Contact.nameSuffix.getter();
      PersonNameComponents.nameSuffix.setter();
      v174 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
      v175 = OUTLINED_FUNCTION_134_3(v271, sel_localizedStringFromPersonNameComponents_style_options_, (uint64_t)v174);

      v176 = OUTLINED_FUNCTION_156_1();
      v178 = v177;

      OUTLINED_FUNCTION_147_1();
      OUTLINED_FUNCTION_105_3(v173, v179);
      v33 = v171;
      v267(v169, v171);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_144_2(0, *(_QWORD *)(v168 + 16) + 1);
        v168 = v184;
      }
      v181 = *(_QWORD *)(v168 + 16);
      v180 = *(_QWORD *)(v168 + 24);
      if (v181 >= v180 >> 1)
      {
        OUTLINED_FUNCTION_144_2(v180 > 1, v181 + 1);
        v168 = v185;
      }
      *(_QWORD *)(v168 + 16) = v181 + 1;
      v182 = (_QWORD *)(v168 + 32 * v181);
      v183 = v272;
      v182[4] = v170;
      v182[5] = v183;
      v182[6] = v176;
      v182[7] = v178;
      v166 += (uint64_t)v270;
      --v139;
    }
    while (v139);
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_29();
    OUTLINED_FUNCTION_19_24();
    v186 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_42(v186))
    {
      v187 = OUTLINED_FUNCTION_1();
      v275[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v187 = 136315394;
      v188 = OUTLINED_FUNCTION_13_31();
      OUTLINED_FUNCTION_101_4(v188);
      OUTLINED_FUNCTION_57_9();
      *(_WORD *)(v187 + 12) = 2080;
      OUTLINED_FUNCTION_23_9();
      v189 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, String));
      MEMORY[0x2207D7DE4](v168, v189);
      OUTLINED_FUNCTION_99_5();
      v190 = OUTLINED_FUNCTION_117_2();
      OUTLINED_FUNCTION_152_1(v190);
      OUTLINED_FUNCTION_57_9();
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_33_6(&dword_21FE16000, v178, (os_log_type_t)v181, "[%s] Multiple recommendations returned. Returning disambiguation of %s.", (uint8_t *)v187);
      OUTLINED_FUNCTION_51_11();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_30();
    v191 = (uint64_t)v260;
    v192 = v249;
    v193 = v251;
    v194 = v245;
    OUTLINED_FUNCTION_69_12(v252);
    v195 = specialized Sequence.compactMap<A>(_:)(v168);
    swift_bridgeObjectRelease();
    static SiriMatchResolutionResult.disambiguation(with:)(v195);
    OUTLINED_FUNCTION_55_1();
    v194(v193, v253);
    OUTLINED_FUNCTION_147_1();
    OUTLINED_FUNCTION_105_3(v192, v196);
    v69 = v191;
  }
  else
  {
    OUTLINED_FUNCTION_117();
    v140 = v138;
    v141 = *(_QWORD *)(Contact.contactRelations.getter() + 16);
    swift_bridgeObjectRelease();
    if (v141)
    {
      OUTLINED_FUNCTION_19_24();
      v142 = OUTLINED_FUNCTION_8();
      v143 = OUTLINED_FUNCTION_3(v142);
      v144 = v249;
      v145 = v261;
      if (v143)
      {
        v146 = (_DWORD *)OUTLINED_FUNCTION_1();
        v147 = OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_121_2(v147);
        *v146 = 136315138;
        v149 = OUTLINED_FUNCTION_17_19(v145, v148, v275);
        OUTLINED_FUNCTION_12_28(v149);
        OUTLINED_FUNCTION_23_24(&dword_21FE16000, v150, v151, "[%s] No recommendations returned for requested relationship. Returning unsupported.");
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_18_22();
      v152 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 5);
    }
    else
    {
      v197 = Contact.organizationName.getter();
      v140 = v198;
      swift_bridgeObjectRelease();
      if (((unint64_t)v140 & 0x2000000000000000) != 0)
        v199 = ((unint64_t)v140 >> 56) & 0xF;
      else
        v199 = v197 & 0xFFFFFFFFFFFFLL;
      OUTLINED_FUNCTION_19_24();
      v45 = (void (**)(uint64_t, NSObject *))OUTLINED_FUNCTION_8();
      v200 = os_log_type_enabled(v140, (os_log_type_t)v45);
      v144 = v249;
      v201 = v261;
      if (v199)
      {
        if (v200)
        {
          v202 = (_DWORD *)OUTLINED_FUNCTION_1();
          v203 = OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_121_2(v203);
          *v202 = 136315138;
          v205 = OUTLINED_FUNCTION_17_19(v201, v204, v275);
          OUTLINED_FUNCTION_12_28(v205);
          OUTLINED_FUNCTION_29_22(&dword_21FE16000, v140, (os_log_type_t)v45, "[%s] No recommendations returned for requested company. Returning unsupported.");
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_18_22();
        v152 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 4);
      }
      else
      {
        if (v200)
        {
          v228 = (_DWORD *)OUTLINED_FUNCTION_1();
          v229 = OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_121_2(v229);
          *v228 = 136315138;
          v231 = OUTLINED_FUNCTION_17_19(v201, v230, v275);
          OUTLINED_FUNCTION_12_28(v231);
          OUTLINED_FUNCTION_29_22(&dword_21FE16000, v140, (os_log_type_t)v45, "[%s] No recommendations returned. Returning unsupported.");
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_18_22();
        v152 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_resolutionResultUnsupportedWithReason_, 3);
      }
    }
    v232 = v152;
    OUTLINED_FUNCTION_89_3();
    v45[1](v144, v140);
    v69 = (uint64_t)v138;
  }
LABEL_15:
  OUTLINED_FUNCTION_150(v69);
LABEL_16:
  OUTLINED_FUNCTION_7();
}

void specialized BaseIntentHandler.resolveSiriMatches(for:)(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  os_log_type_t v5;
  char v6;
  id v7;
  id v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  unint64_t v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  OUTLINED_FUNCTION_149_1(a1);
  v7 = specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)((os_log_type_t)(v6 & 1), (void (*)(_QWORD))type metadata accessor for GetContactSiriMatchesResolutionResult);
  if (v7)
  {
    v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v9 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v9 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v9 + 32) = v8;
    v42[0] = v9;
LABEL_3:
    specialized Array._endMutation()();
    goto LABEL_4;
  }
  type metadata accessor for GetContactSiriMatchesResolutionResult();
  OUTLINED_FUNCTION_166_0();
  if ((v10 & 1) == 0 || (v1 = v2, (v11 = specialized BaseIntentHandler.meCard.getter()) == 0))
  {
    outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(v4);
    if (!v22)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v36 = OUTLINED_FUNCTION_55();
      *(_OWORD *)(v36 + 16) = xmmword_21FED8AB0;
      specialized BaseIntentHandler.resolveContacts(intent:)(v4, (void (*)(uint64_t))GetContactIntent.siriInferenceContact.getter, 0xD000000000000010, 0x800000021FEE25F0, (uint64_t (*)(_QWORD))type metadata accessor for GetContactSiriMatchesResolutionResult, outlined read-only object #0 of specialized BaseIntentHandler.resolveContacts(intent:), implicit closure #1 in Recommendation<A>.assignConfidence()partial apply);
      *(_QWORD *)(v36 + 32) = v37;
      v42[0] = v36;
      goto LABEL_3;
    }
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v23 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v23, (uint64_t)static Logger.siriContacts);
    v24 = OUTLINED_FUNCTION_38_6();
    if (OUTLINED_FUNCTION_44_6(v24))
    {
      v25 = (uint8_t *)OUTLINED_FUNCTION_1();
      v42[0] = OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_111_3(4.8149e-34);
      OUTLINED_FUNCTION_6_35(16, v26, v27);
      OUTLINED_FUNCTION_43_13();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v1, v5, "[%s] Received raw contact identifier, returning this as siriMatch. Contact resolution not needed.", v25);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_148_2(direct field offset for BaseIntentHandler.contactService, v39, v40, v41);
    v28 = OUTLINED_FUNCTION_50_13(v42);
    if (v2)
    {
      OUTLINED_FUNCTION_22_2();
      OUTLINED_FUNCTION_110_4(v31, v32, v33);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v34 = 0;
      *(_OWORD *)(OUTLINED_FUNCTION_55() + 16) = xmmword_21FED8AB0;
    }
    else
    {
      v34 = (void *)v28;
      OUTLINED_FUNCTION_110_4(v28, v29, v30);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v38 = OUTLINED_FUNCTION_55();
      *(_OWORD *)(v38 + 16) = xmmword_21FED8AB0;
      if (v34 && OUTLINED_FUNCTION_106_0(v38, sel_fullName))
      {
        OUTLINED_FUNCTION_128_0();
        OUTLINED_FUNCTION_168_0();
        goto LABEL_20;
      }
    }
    static String.EMPTY.getter();
LABEL_20:
    OUTLINED_FUNCTION_97_4();
    v35 = OUTLINED_FUNCTION_64_9();
    OUTLINED_FUNCTION_106_4();

    OUTLINED_FUNCTION_45_10();
    goto LABEL_4;
  }
  v12 = v11;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v13 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v13, (uint64_t)static Logger.siriContacts);
  v14 = OUTLINED_FUNCTION_38_6();
  if (OUTLINED_FUNCTION_42(v14))
  {
    v15 = (uint8_t *)OUTLINED_FUNCTION_1();
    v42[0] = OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_115_2(4.8149e-34);
    OUTLINED_FUNCTION_6_35(16, v16, v17);
    OUTLINED_FUNCTION_62_13();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v1, v3, "[%s] Returning MeCard as siriMatch. Contact resolution not needed.", v15);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  *(_OWORD *)(OUTLINED_FUNCTION_55() + 16) = xmmword_21FED8AB0;
  OUTLINED_FUNCTION_97_4();
  v18 = objc_msgSend(v12, sel_identifier);
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_125_0();
  v19 = CNContact.formattedFullName.getter();
  v21 = OUTLINED_FUNCTION_76_9(v19, v20);
  OUTLINED_FUNCTION_106_4();

  OUTLINED_FUNCTION_45_10();
LABEL_4:
  OUTLINED_FUNCTION_66_14();
}

{
  NSObject *v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  os_log_type_t v5;
  char v6;
  id v7;
  id v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  unint64_t v16;
  uint64_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];

  OUTLINED_FUNCTION_149_1(a1);
  v7 = specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)((os_log_type_t)(v6 & 1), (void (*)(_QWORD))type metadata accessor for GetContactAttributeSiriMatchesResolutionResult);
  if (v7)
  {
    v8 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v9 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v9 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v9 + 32) = v8;
    v42[0] = v9;
LABEL_3:
    specialized Array._endMutation()();
    goto LABEL_4;
  }
  type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
  OUTLINED_FUNCTION_166_0();
  if ((v10 & 1) == 0 || (v1 = v2, (v11 = specialized BaseIntentHandler.meCard.getter()) == 0))
  {
    outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(v4);
    if (!v22)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v36 = OUTLINED_FUNCTION_55();
      *(_OWORD *)(v36 + 16) = xmmword_21FED8AB0;
      specialized BaseIntentHandler.resolveContacts(intent:)(v4, (void (*)(uint64_t))GetContactAttributeIntent.siriInferenceContact.getter, 0xD000000000000019, 0x800000021FEE0A00, (uint64_t (*)(_QWORD))type metadata accessor for GetContactAttributeSiriMatchesResolutionResult, outlined read-only object #0 of specialized BaseIntentHandler.resolveContacts(intent:), implicit closure #1 in Recommendation<A>.assignConfidence()partial apply);
      *(_QWORD *)(v36 + 32) = v37;
      v42[0] = v36;
      goto LABEL_3;
    }
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v23 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v23, (uint64_t)static Logger.siriContacts);
    v24 = OUTLINED_FUNCTION_38_6();
    if (OUTLINED_FUNCTION_44_6(v24))
    {
      v25 = (uint8_t *)OUTLINED_FUNCTION_1();
      v42[0] = OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_111_3(4.8149e-34);
      OUTLINED_FUNCTION_6_35(25, v26, v27);
      OUTLINED_FUNCTION_43_13();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v1, v5, "[%s] Received raw contact identifier, returning this as siriMatch. Contact resolution not needed.", v25);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_148_2(direct field offset for BaseIntentHandler.contactService, v39, v40, v41);
    v28 = OUTLINED_FUNCTION_50_13(v42);
    if (v2)
    {
      OUTLINED_FUNCTION_22_2();
      OUTLINED_FUNCTION_110_4(v31, v32, v33);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v34 = 0;
      *(_OWORD *)(OUTLINED_FUNCTION_55() + 16) = xmmword_21FED8AB0;
    }
    else
    {
      v34 = (void *)v28;
      OUTLINED_FUNCTION_110_4(v28, v29, v30);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v38 = OUTLINED_FUNCTION_55();
      *(_OWORD *)(v38 + 16) = xmmword_21FED8AB0;
      if (v34 && OUTLINED_FUNCTION_106_0(v38, sel_fullName))
      {
        OUTLINED_FUNCTION_128_0();
        OUTLINED_FUNCTION_168_0();
        goto LABEL_20;
      }
    }
    static String.EMPTY.getter();
LABEL_20:
    OUTLINED_FUNCTION_97_4();
    v35 = OUTLINED_FUNCTION_64_9();
    OUTLINED_FUNCTION_106_4();

    OUTLINED_FUNCTION_45_10();
    goto LABEL_4;
  }
  v12 = v11;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v13 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v13, (uint64_t)static Logger.siriContacts);
  v14 = OUTLINED_FUNCTION_38_6();
  if (OUTLINED_FUNCTION_42(v14))
  {
    v15 = (uint8_t *)OUTLINED_FUNCTION_1();
    v42[0] = OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_115_2(4.8149e-34);
    OUTLINED_FUNCTION_6_35(25, v16, v17);
    OUTLINED_FUNCTION_62_13();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v1, v3, "[%s] Returning MeCard as siriMatch. Contact resolution not needed.", v15);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  *(_OWORD *)(OUTLINED_FUNCTION_55() + 16) = xmmword_21FED8AB0;
  OUTLINED_FUNCTION_97_4();
  v18 = objc_msgSend(v12, sel_identifier);
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_125_0();
  v19 = CNContact.formattedFullName.getter();
  v21 = OUTLINED_FUNCTION_76_9(v19, v20);
  OUTLINED_FUNCTION_106_4();

  OUTLINED_FUNCTION_45_10();
LABEL_4:
  OUTLINED_FUNCTION_66_14();
}

uint64_t specialized BaseIntentHandler.resolveSiriMatches(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  uint64_t v50[3];
  uint64_t v51;
  uint64_t v52;

  v2 = v1;
  v4 = specialized BaseIntentHandler.needsMeCard(_:)(a1);
  v5 = specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)((os_log_type_t)(v4 & 1), (void (*)(_QWORD))type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult);
  if (v5)
  {
    v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v7 + 32) = v6;
    v50[0] = v7;
LABEL_3:
    specialized Array._endMutation()();
    return v50[0];
  }
  type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
  v10 = specialized SiriKitContactIntent.me.getter();
  if ((v10 & 1) != 0 && (v10 = (uint64_t)specialized BaseIntentHandler.meCard.getter()) != 0)
  {
    v11 = (void *)v10;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v50[0] = v16;
      *(_DWORD *)v15 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021FEE1E20, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21FE16000, v13, v14, "[%s] Returning MeCard as siriMatch. Contact resolution not needed.", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v16, -1, -1);
      MEMORY[0x2207D8768](v15, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_21FED8AB0;
    type metadata accessor for SiriMatch();
    v18 = objc_msgSend(v11, sel_identifier);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    v22 = CNContact.formattedFullName.getter();
    v24 = SiriMatch.__allocating_init(identifier:fullName:)(v19, v21, v22, v23);
    v25 = static SiriMatchResolutionResult.success(with:)();

    *(_QWORD *)(v17 + 32) = v25;
    v50[0] = v17;
    specialized Array._endMutation()();
    v8 = v50[0];

  }
  else
  {
    ModifyContactAttributeIntent.contactIdentifier.getter(v10);
    if (!v27)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_21FED8AB0;
      specialized BaseIntentHandler.resolveContacts(intent:)(a1, (void (*)(uint64_t))ModifyContactAttributeIntent.siriInferenceContact.getter, 0xD00000000000001CLL, 0x800000021FEE1E20, (uint64_t (*)(_QWORD))type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult, outlined read-only object #0 of specialized BaseIntentHandler.resolveContacts(intent:), partial apply for implicit closure #1 in Recommendation<A>.assignConfidence());
      *(_QWORD *)(v42 + 32) = v43;
      v50[0] = v42;
      goto LABEL_3;
    }
    v28 = v26;
    v29 = v27;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.siriContacts);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v50[0] = v34;
      *(_DWORD *)v33 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021FEE1E20, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21FE16000, v31, v32, "[%s] Received raw contact identifier, returning this as siriMatch. Contact resolution not needed.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v34, -1, -1);
      MEMORY[0x2207D8768](v33, -1, -1);
    }

    outlined init with copy of DeviceState(v2 + direct field offset for BaseIntentHandler.contactService, (uint64_t)v50);
    v35 = v51;
    v36 = v52;
    __swift_project_boxed_opaque_existential_1(v50, v51);
    v44 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 8))(v28, v29, v35, v36);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v50);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v45 = swift_allocObject();
    v46 = v45;
    *(_OWORD *)(v45 + 16) = xmmword_21FED8AB0;
    if (v44 && (v47 = objc_msgSend(v44, sel_fullName)) != 0)
    {
      v48 = v47;
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v39 = v49;

    }
    else
    {
      v37 = static String.EMPTY.getter();
      v39 = v38;
    }
    type metadata accessor for SiriMatch();
    v40 = SiriMatch.__allocating_init(identifier:fullName:)(v28, v29, v37, v39);
    v41 = static SiriMatchResolutionResult.success(with:)();

    *(_QWORD *)(v46 + 32) = v41;
    v50[0] = v46;
    specialized Array._endMutation()();
    v8 = v50[0];

  }
  return v8;
}

void specialized BaseIntentHandler.needsMeCard(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  char v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;

  swift_getObjectType();
  dynamic_cast_existential_1_unconditional((uint64_t)a1);
  v3 = v2;
  v4 = a1;
  specialized SiriKitContactIntent.me.getter();
  if ((v5 & 1) != 0)
  {

  }
  else
  {
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
    v8 = v7;

    if (v8)
      OUTLINED_FUNCTION_5();
  }
  OUTLINED_FUNCTION_22_6();
}

uint64_t specialized BaseIntentHandler.needsMeCard(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;

  swift_getObjectType();
  if (!dynamic_cast_existential_1_conditional((uint64_t)a1))
    return 1;
  v3 = v2;
  v4 = a1;
  if ((specialized SiriKitContactIntent.me.getter() & 1) != 0)
  {

    return 1;
  }
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
  v7 = v6;

  if (v7)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  return 0;
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v8 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v7, 1, 1, v8);
  v9 = (_QWORD *)OUTLINED_FUNCTION_6_16();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v10 = (_QWORD *)OUTLINED_FUNCTION_6_16();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = &_sIeghH_IeAgH_TRTATu;
  v10[5] = v9;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(v7, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v10);
  return swift_release();
}

uint64_t ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  __n128 *v3;
  id v4;

  if (objc_msgSend(*(id *)(v0 + 16), sel_contactAttributeToModify) != (id)10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v3 = (__n128 *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_129(v3, (__n128)xmmword_21FED8AB0);
    v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_notRequired);
LABEL_6:
    v3[2].n128_u64[0] = (unint64_t)v4;
    specialized Array._endMutation()();
    v2 = (uint64_t)v3;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }
  v1 = objc_msgSend(*(id *)(v0 + 16), sel_relatedContact);

  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v3 = (__n128 *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_129(v3, (__n128)xmmword_21FED8AB0);
    v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
    goto LABEL_6;
  }
  v2 = specialized BaseIntentHandler.resolveSiriMatches(for:)(*(void **)(v0 + 16));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t @objc ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(void *a1, int a2, void *a3, void *aBlock)
{
  return @objc ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(a1, a2, a3, aBlock);
}

{
  void *v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v6 = _Block_copy(aBlock);
  v7 = (_QWORD *)OUTLINED_FUNCTION_55();
  v7[2] = a3;
  v7[3] = v6;
  v7[4] = a1;
  v8 = a3;
  v9 = a1;
  v10 = OUTLINED_FUNCTION_159();
  return _runTaskForBridgedAsyncMethod(_:)(v10, v11);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:);
  return ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)()
{
  uint64_t (**v0)(void);
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  void *v3;
  Class isa;

  v1 = (void (**)(_QWORD, _QWORD))*((_QWORD *)*v0 + 4);
  v3 = (void *)*((_QWORD *)*v0 + 2);
  v2 = (void *)*((_QWORD *)*v0 + 3);
  OUTLINED_FUNCTION_3_0();

  type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
  isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_5();
  ((void (**)(_QWORD, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return OUTLINED_FUNCTION_31_5(v0[1]);
}

uint64_t ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[14] = a1;
  v2[15] = v1;
  v2[16] = OUTLINED_FUNCTION_78_3();
  v2[17] = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)()
{
  uint64_t v0;
  id v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  os_log_type_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t *v16;
  void *v17;
  uint64_t *v18;
  void *v19;
  char **p_attr;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t **v72;
  void *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  Swift::String v77;
  BOOL v78;
  char v79;
  BOOL v80;
  char v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  os_log_type_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116[2];

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = (void **)(v0 + 112);
  v1 = *(id *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v5 = os_signpost(_:dso:log:name:signpostID:)();
  v6 = v3 + *(int *)(v4 + 20);
  *(_QWORD *)v6 = "ResolveModifyRelationship";
  *(_QWORD *)(v6 + 8) = 25;
  *(_BYTE *)(v6 + 16) = 2;
  if (OUTLINED_FUNCTION_20_9(v5, sel_contactAttributeToModify) != (id)10)
  {
    OUTLINED_FUNCTION_127_2();
    if (!v78)
      swift_once();
    v8 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v8, (uint64_t)static Logger.siriContacts);
    v9 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v9))
    {
      v10 = (_DWORD *)OUTLINED_FUNCTION_1();
      v11 = OUTLINED_FUNCTION_1();
      v116[0] = v11;
      *v10 = 136315138;
      *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_3_30(v11, 0x800000021FEE1E20, v116);
      OUTLINED_FUNCTION_134_0();
      OUTLINED_FUNCTION_86_2();
      OUTLINED_FUNCTION_23_24(&dword_21FE16000, v12, v13, "[%s] Since we're not modifying relationship, returning notRequired for modifyRelationship.");
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_46_12();
    v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_notRequired);
    goto LABEL_26;
  }
  v1 = *(id *)(v0 + 120);
  if ((*((_BYTE *)v1 + direct field offset for BaseIntentHandler.passedPrereqs) & 1) == 0)
  {
    v7 = OUTLINED_FUNCTION_85_8(10, (void (*)(_QWORD))type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult);
    if (v7)
    {
      v1 = v7;
      static os_signpost_type_t.end.getter();
      goto LABEL_79;
    }
  }
  outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(*v2);
  if (!v16)
  {
    OUTLINED_FUNCTION_127_2();
    if (!v78)
      swift_once();
    v43 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v43, (uint64_t)static Logger.siriContacts);
    v44 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v44))
    {
      v45 = (_DWORD *)OUTLINED_FUNCTION_1();
      v46 = OUTLINED_FUNCTION_1();
      v116[0] = v46;
      *v45 = 136315138;
      *(_QWORD *)(v0 + 24) = OUTLINED_FUNCTION_3_30(v46, 0x800000021FEE1E20, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_23_24(&dword_21FE16000, v47, v48, "[%s] modifyRelationship slot is empty, return needsValue to get value from user.");
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_46_12();
    v14 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
LABEL_26:
    v49 = v14;
LABEL_27:
    OUTLINED_FUNCTION_171();
    goto LABEL_79;
  }
  v17 = v15;
  v18 = v16;
  v19 = specialized BaseIntentHandler.meCard.getter();
  p_attr = (char **)&xmmword_21FED9000;
  if (!v19)
  {
LABEL_74:
    OUTLINED_FUNCTION_127_2();
    if (!v78)
      swift_once();
    v85 = OUTLINED_FUNCTION_26();
    v86 = (void *)__swift_project_value_buffer(v85, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_29();
    Logger.logObject.getter();
    v87 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v87))
    {
      v88 = OUTLINED_FUNCTION_1();
      v89 = OUTLINED_FUNCTION_1();
      v116[0] = v89;
      *(_DWORD *)v88 = p_attr[5];
      *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_3_30(v89, 0x800000021FEE1E20, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v88 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v17, (unint64_t)v18, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_91_6();
      OUTLINED_FUNCTION_8_23(&dword_21FE16000, v90, v91, "[%s] Successfully resolved modifyRelationship: %s");
      OUTLINED_FUNCTION_51_11();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_30();

    OUTLINED_FUNCTION_46_12();
    swift_getObjCClassFromMetadata();
    v92 = (void *)MEMORY[0x2207D7CB8](v17, v18);
    v93 = swift_bridgeObjectRelease();
    v1 = OUTLINED_FUNCTION_175(v93, sel_successWithResolvedString_);

    static os_signpost_type_t.end.getter();
    goto LABEL_79;
  }
  v21 = v19;
  v22 = *v2;
  v23 = objc_msgSend(v19, sel_contactRelations);

  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  OUTLINED_FUNCTION_134_0();
  v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v22);
  if (!v26)
  {
    OUTLINED_FUNCTION_117();
    p_attr = (char **)&xmmword_21FED9000;
    goto LABEL_74;
  }
  v27 = v26;
  v114 = v25;
  v28 = v26 & 0xC000000000000001;
  OUTLINED_FUNCTION_123_1();
  if (v28)
    OUTLINED_FUNCTION_29_6();
  v29 = *(id *)(v27 + 32);
  p_attr = (char **)&xmmword_21FED9000;
  OUTLINED_FUNCTION_5();
  v30 = outlined bridged method (ob) of @objc SiriMatch.fullName.getter(v29);
  if (!v31)
    goto LABEL_72;
  v107 = v30;
  v108 = v31;
  v109 = (uint64_t)v17;
  v110 = (unint64_t)v18;
  OUTLINED_FUNCTION_127_2();
  v32 = v114;
  if (!v78)
    swift_once();
  v33 = OUTLINED_FUNCTION_26();
  v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_29();
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.debug.getter();
  v106 = (void *)v34;
  if (os_log_type_enabled(v35, v36))
  {
    v112 = v36;
    v37 = OUTLINED_FUNCTION_1();
    v111 = OUTLINED_FUNCTION_1();
    v116[0] = v111;
    *(_DWORD *)v37 = 136315394;
    *(_QWORD *)(v0 + 96) = OUTLINED_FUNCTION_3_30(v111, 0x800000021FEE1E20, v116);
    OUTLINED_FUNCTION_52_6();
    *(_WORD *)(v37 + 12) = 2080;
    v38 = OUTLINED_FUNCTION_24_11();
    v39 = MEMORY[0x2207D7DE4](v38, v24);
    v41 = v40;
    swift_bridgeObjectRelease();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v116);
    OUTLINED_FUNCTION_165(v42);
    OUTLINED_FUNCTION_52_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_33_6(&dword_21FE16000, v35, v112, "[%s] Existing contactRelations: %s", (uint8_t *)v37);
    OUTLINED_FUNCTION_51_11();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_30();

  p_attr = &stru_24E5C6FF8.attr;
  v50 = v114 >> 62;
  v18 = (uint64_t *)v110;
  if (objc_msgSend(*v2, sel_modifyOperation) != (id)1)
  {
LABEL_65:
    OUTLINED_FUNCTION_24_11();
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_132_3();
    v82 = specialized _ArrayProtocol.filter(_:)(v32, (uint64_t)v17, v18, v107, v108);
    p_attr = (char **)&xmmword_21FED9000;
    if (OUTLINED_FUNCTION_20_9(v82, sel_modifyOperation) != (id)3)
    {
      OUTLINED_FUNCTION_55_1();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_96();
      goto LABEL_74;
    }
    if (v50)
    {
      swift_bridgeObjectRetain();
      v83 = OUTLINED_FUNCTION_33_10();
      OUTLINED_FUNCTION_55_1();
    }
    else
    {
      v83 = *(_QWORD *)((v114 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    OUTLINED_FUNCTION_55_1();
    if (!v83)
    {
      OUTLINED_FUNCTION_5_0();
LABEL_81:
      OUTLINED_FUNCTION_66_4();
      OUTLINED_FUNCTION_24_11();
      v1 = v106;
      Logger.logObject.getter();
      v95 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_53(v95))
      {
        v96 = OUTLINED_FUNCTION_1();
        v115 = OUTLINED_FUNCTION_1();
        v116[0] = v115;
        *(_DWORD *)v96 = 136315650;
        *(_QWORD *)(v0 + 48) = OUTLINED_FUNCTION_3_30(v115, 0x800000021FEE1E20, v116);
        OUTLINED_FUNCTION_135_2();
        *(_WORD *)(v96 + 12) = 2080;
        OUTLINED_FUNCTION_132_3();
        *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v17, (unint64_t)v18, v116);
        OUTLINED_FUNCTION_135_2();
        OUTLINED_FUNCTION_91_6();
        *(_WORD *)(v96 + 22) = 2080;
        OUTLINED_FUNCTION_24_11();
        v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, (unint64_t)v108, v116);
        OUTLINED_FUNCTION_165(v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_91_6();
        OUTLINED_FUNCTION_86_6(&dword_21FE16000, v98, v99, "[%s] User is trying to delete a relationship %s for contact named %s which doesn't exist. Returning relationshipNonexistent.");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_30();

      OUTLINED_FUNCTION_46_12();
      v100 = OUTLINED_FUNCTION_170();
      static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(v100);
      goto LABEL_27;
    }
    if (!(v82 >> 62))
    {
      v84 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_71;
    }
LABEL_92:
    OUTLINED_FUNCTION_24_11();
    v84 = OUTLINED_FUNCTION_33_10();
    OUTLINED_FUNCTION_5_0();
LABEL_71:
    OUTLINED_FUNCTION_5_0();
    if (v84)
    {
LABEL_72:
      swift_bridgeObjectRelease();
      goto LABEL_74;
    }
    goto LABEL_81;
  }
  if (v50)
  {
    OUTLINED_FUNCTION_24_11();
    v51 = OUTLINED_FUNCTION_33_10();
  }
  else
  {
    v51 = *(_QWORD *)((v114 & 0xFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_24_11();
  }
  if (v51)
  {
    if (v51 < 1)
    {
      __break(1u);
      goto LABEL_92;
    }
    v52 = 0;
    v53 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v113 = v51;
    do
    {
      if ((v114 & 0xC000000000000001) != 0)
        v54 = (id)MEMORY[0x2207D80C0](v52, v32);
      else
        v54 = *(id *)(v32 + 8 * v52 + 32);
      v55 = v54;
      if (objc_msgSend(v54, sel_label))
      {
        v56 = OUTLINED_FUNCTION_128_0();
        v58 = v57;

      }
      else
      {
        v56 = 0;
        v58 = 0;
      }
      v17 = (void *)static Dictionary<>.nlSemantic(forCNLabel:)(v56, v58);
      v60 = v59;
      OUTLINED_FUNCTION_117();
      v61 = objc_msgSend(v55, sel_value);
      v62 = objc_msgSend(v61, sel_name);

      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v65 = v64;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_143_2(0, v53[2] + 1);
        v53 = v69;
      }
      v67 = v53[2];
      v66 = v53[3];
      if (v67 >= v66 >> 1)
      {
        OUTLINED_FUNCTION_143_2(v66 > 1, v67 + 1);
        v53 = v70;
      }
      ++v52;
      v53[2] = v67 + 1;
      v68 = &v53[4 * v67];
      v68[4] = v17;
      v68[5] = v60;
      v68[6] = v63;
      v68[7] = v65;
      v32 = v114;
    }
    while (v113 != v52);
  }
  else
  {
    v53 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  OUTLINED_FUNCTION_5_0();
  v71 = v53[2];
  v18 = (uint64_t *)v110;
  if (!v71)
  {
LABEL_64:
    OUTLINED_FUNCTION_18_0();
    v50 = v114 >> 62;
    v17 = (void *)v109;
    v32 = v114;
    goto LABEL_65;
  }
  v72 = (uint64_t **)(v53 + 7);
  while (1)
  {
    v74 = (uint64_t)*(v72 - 3);
    v73 = *(v72 - 2);
    v76 = (uint64_t)*(v72 - 1);
    v75 = *v72;
    v77 = String.lowercased()();
    v78 = v74 == v77._countAndFlagsBits && v73 == v77._object;
    if (v78)
    {
      OUTLINED_FUNCTION_24_11();
    }
    else
    {
      v79 = OUTLINED_FUNCTION_11_18();
      OUTLINED_FUNCTION_132_3();
      OUTLINED_FUNCTION_24_11();
      swift_bridgeObjectRelease();
      if ((v79 & 1) == 0)
      {
        OUTLINED_FUNCTION_96();
        OUTLINED_FUNCTION_5_0();
        v18 = (uint64_t *)v110;
        goto LABEL_63;
      }
    }
    v80 = v76 == v107 && v108 == v75;
    v18 = (uint64_t *)v110;
    if (v80)
      break;
    v81 = OUTLINED_FUNCTION_11_18();
    OUTLINED_FUNCTION_96();
    OUTLINED_FUNCTION_5_0();
    if ((v81 & 1) != 0)
      goto LABEL_85;
LABEL_63:
    v72 += 4;
    if (!--v71)
      goto LABEL_64;
  }
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_5_0();
LABEL_85:
  OUTLINED_FUNCTION_18_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_66_4();
  OUTLINED_FUNCTION_92_2();
  Logger.logObject.getter();
  v101 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_53(v101))
  {
    v102 = OUTLINED_FUNCTION_1();
    v103 = OUTLINED_FUNCTION_1();
    v116[0] = v103;
    *(_DWORD *)v102 = 136315650;
    *(_QWORD *)(v0 + 72) = OUTLINED_FUNCTION_3_30(v103, 0x800000021FEE1E20, v116);
    OUTLINED_FUNCTION_57_9();
    *(_WORD *)(v102 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, v116);
    OUTLINED_FUNCTION_57_9();
    OUTLINED_FUNCTION_91_6();
    *(_WORD *)(v102 + 22) = 2080;
    OUTLINED_FUNCTION_92_2();
    *(_QWORD *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, (unint64_t)v108, v116);
    OUTLINED_FUNCTION_57_9();
    OUTLINED_FUNCTION_91_6();
    OUTLINED_FUNCTION_86_6(&dword_21FE16000, v104, v105, "[%s] User is trying to add a relationship %s for contact named %s which already exists. Returning relationshipAlreadySet.");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_30();

  v1 = (id)OUTLINED_FUNCTION_46_12();
  static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(1);
  OUTLINED_FUNCTION_171();
LABEL_79:
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(id))(v0 + 8))(v1);
}

uint64_t @objc ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)(void *a1, int a2, void *a3, void *aBlock)
{
  return @objc ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(a1, a2, a3, aBlock);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:);
  return ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)(void *a1)
{
  uint64_t (**v1)(void);
  const void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v3 = (const void *)*((_QWORD *)*v1 + 4);
  v5 = (void *)*((_QWORD *)*v1 + 2);
  v4 = (void *)*((_QWORD *)*v1 + 3);
  OUTLINED_FUNCTION_3_0();

  v6 = OUTLINED_FUNCTION_159();
  v7(v6);
  _Block_release(v3);

  return OUTLINED_FUNCTION_31_5(v1[1]);
}

uint64_t ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = OUTLINED_FUNCTION_78_3();
  v2[5] = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  void *v3;
  id v4;
  uint64_t v5;
  char **p_attr;
  id v7;
  id v8;
  id v9;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  char v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  char v27;
  void *v28;
  uint64_t v29;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(int **)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 16);
  v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_53_0();
  v5 = v1 + v2[5];
  *(_QWORD *)v5 = "ResolveModifyNickname";
  *(_QWORD *)(v5 + 8) = 21;
  *(_BYTE *)(v5 + 16) = 2;
  p_attr = &stru_24E5C6FF8.attr;
  if (objc_msgSend(v3, sel_contactAttributeToModify) == (id)6)
  {
    v7 = objc_msgSend(*(id *)(v0 + 16), sel_contactAttributeToModify);
    if (v7 != (id)6 || (v7 = OUTLINED_FUNCTION_63_9(), v7 != (id)3))
    {
      p_attr = *(char ***)(v0 + 24);
      if ((*((_BYTE *)p_attr + direct field offset for BaseIntentHandler.passedPrereqs) & 1) == 0
        && OUTLINED_FUNCTION_85_8((uint64_t)v7, (void (*)(_QWORD))type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult))
      {
        goto LABEL_8;
      }
      v11 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(*(void **)(v0 + 16));
      if (!v12)
      {
        OUTLINED_FUNCTION_98_3();
        v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
        goto LABEL_7;
      }
      v13 = (id)v11;
      v14 = v12;
      v15 = specialized BaseIntentHandler.meCard.getter();
      if (!v15)
        goto LABEL_24;
      v16 = v15;
      v2 = (int *)OUTLINED_FUNCTION_128_1(v15);

      OUTLINED_FUNCTION_156_1();
      OUTLINED_FUNCTION_136_2();
      if (v13 == v4 && v14 == v16)
      {
        OUTLINED_FUNCTION_5();
      }
      else
      {
        v18 = OUTLINED_FUNCTION_78_8();
        OUTLINED_FUNCTION_5();
        if ((v18 & 1) == 0)
        {
LABEL_24:
          v20 = specialized BaseIntentHandler.meCard.getter();
          if (!v20)
            goto LABEL_32;
          v21 = v20;
          v22 = OUTLINED_FUNCTION_128_1(v20);
          OUTLINED_FUNCTION_124_1();

          v23 = specialized BaseIntentHandler.meCard.getter();
          if (!v23)
            goto LABEL_32;
          v24 = v23;
          v25 = OUTLINED_FUNCTION_128_1(v23);

          OUTLINED_FUNCTION_156_1();
          OUTLINED_FUNCTION_136_2();
          if (v13 == v21 && v14 == v24)
          {
            OUTLINED_FUNCTION_5();
            goto LABEL_36;
          }
          v27 = OUTLINED_FUNCTION_78_8();
          OUTLINED_FUNCTION_5();
          if ((v27 & 1) == 0)
          {
LABEL_32:
            if (OUTLINED_FUNCTION_63_9() == (id)3 || OUTLINED_FUNCTION_63_9() == (id)2)
            {
              OUTLINED_FUNCTION_5_0();
              OUTLINED_FUNCTION_98_3();
              v19 = OUTLINED_FUNCTION_170();
              goto LABEL_34;
            }
          }
LABEL_36:
          OUTLINED_FUNCTION_98_3();
          swift_getObjCClassFromMetadata();
          v28 = (void *)MEMORY[0x2207D7CB8](v13, v14);
          v29 = OUTLINED_FUNCTION_5_0();
          p_attr = (char **)OUTLINED_FUNCTION_175(v29, sel_successWithResolvedString_);

          goto LABEL_37;
        }
      }
      if (OUTLINED_FUNCTION_63_9() == (id)1)
      {
        OUTLINED_FUNCTION_5_0();
        OUTLINED_FUNCTION_98_3();
        v19 = 1;
LABEL_34:
        p_attr = (char **)static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(v19);
LABEL_37:
        static os_signpost_type_t.end.getter();
        goto LABEL_9;
      }
      goto LABEL_24;
    }
  }
  OUTLINED_FUNCTION_98_3();
  v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_notRequired);
LABEL_7:
  v9 = v8;
LABEL_8:
  OUTLINED_FUNCTION_171();
LABEL_9:
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(char **))(v0 + 8))(p_attr);
}

uint64_t @objc ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)(void *a1, int a2, void *a3, void *aBlock)
{
  return @objc ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(a1, a2, a3, aBlock);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:);
  return ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)((uint64_t)v6);
}

uint64_t ModifyContactAttributeIntentHandler.confirm(intent:)(uint64_t a1)
{
  _QWORD *v1;

  v1[10] = a1;
  v1[11] = OUTLINED_FUNCTION_78_3();
  v1[12] = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeIntentHandler.confirm(intent:)()
{
  uint64_t v0;
  void **v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void *v22;
  _DWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  os_log_type_t v28;
  _BOOL4 v29;
  void *v30;
  _DWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  os_log_type_t v48;
  _BOOL4 v49;
  void *v50;
  _DWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  char *v64;
  id v65;
  char *v66;
  id v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  os_log_type_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v1 = (void **)(v0 + 80);
  v2 = *(NSObject **)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v6 = os_signpost(_:dso:log:name:signpostID:)();
  v7 = v4 + *(int *)(v3 + 20);
  *(_QWORD *)v7 = "ConfirmModifyContactAttribute";
  *(_QWORD *)(v7 + 8) = 29;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = OUTLINED_FUNCTION_20_9(v6, sel_contactAttributeToModify);
  if (v8 != (id)6)
  {
    if (v8 == (id)10)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v9 = OUTLINED_FUNCTION_26();
      v10 = OUTLINED_FUNCTION_87_6(v9, (uint64_t)static Logger.siriContacts);
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.debug.getter();
      v13 = OUTLINED_FUNCTION_30_18(v11);
      v14 = *v1;
      if (v13)
      {
        v72 = v12;
        v15 = OUTLINED_FUNCTION_1();
        v69 = (_QWORD *)OUTLINED_FUNCTION_1();
        v75 = OUTLINED_FUNCTION_1();
        v77 = v75;
        *(_DWORD *)v15 = 136315394;
        *(_QWORD *)(v0 + 64) = OUTLINED_FUNCTION_3_30(v75, 0x800000021FEE1E20, &v77);
        OUTLINED_FUNCTION_119_2();
        *(_WORD *)(v15 + 12) = 2112;
        *(_QWORD *)(v0 + 72) = v14;
        v16 = v14;
        OUTLINED_FUNCTION_61_8();
        *v69 = v14;

        OUTLINED_FUNCTION_33_6(&dword_21FE16000, v11, v72, "[%s] Confirming intent for modifyRelationship: %@", (uint8_t *)v15);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v35 = *v1;
      outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(*v1);
      v37 = v36;
      v39 = v38;
      outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v35);
      v41 = v40;
      if (v40)
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v40 & 0xC000000000000001) == 0, v40);
        if ((v41 & 0xC000000000000001) != 0)
          v42 = (id)MEMORY[0x2207D80C0](0, v41);
        else
          v42 = *(id *)(v41 + 32);
        v43 = v42;
        OUTLINED_FUNCTION_55_1();
        v41 = outlined bridged method (ob) of @objc SiriMatch.fullName.getter(v43);
        v45 = v44;
      }
      else
      {
        v45 = 0;
      }
      OUTLINED_FUNCTION_27_19();
      ModifyContactAttributeIntentResponse.__allocating_init(relationshipLabel:contactName:code:)(v37, v39, v41, v45, 1);
      goto LABEL_31;
    }
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v26 = OUTLINED_FUNCTION_26();
    v27 = OUTLINED_FUNCTION_87_6(v26, (uint64_t)static Logger.siriContacts);
    Logger.logObject.getter();
    v28 = OUTLINED_FUNCTION_8();
    v29 = OUTLINED_FUNCTION_42(v28);
    v30 = *v1;
    if (v29)
    {
      v31 = (_DWORD *)OUTLINED_FUNCTION_1();
      v32 = (_QWORD *)OUTLINED_FUNCTION_1();
      v70 = OUTLINED_FUNCTION_1();
      v77 = v70;
      *v31 = 136315394;
      v33 = OUTLINED_FUNCTION_3_30(v70, 0x800000021FEE1E20, &v77);
      OUTLINED_FUNCTION_165(v33);
      OUTLINED_FUNCTION_119_2();
      OUTLINED_FUNCTION_174();
      v34 = OUTLINED_FUNCTION_163_0();
      OUTLINED_FUNCTION_61_8();
      *v32 = v30;

      OUTLINED_FUNCTION_10_27(&dword_21FE16000, v2, (os_log_type_t)(v0 + 64), "[%s] Returning continueInApp for intent: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    v62 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
    v63 = OUTLINED_FUNCTION_170();
LABEL_30:
    v64 = OUTLINED_FUNCTION_38_12(v63);
LABEL_31:
    v66 = v64;
    goto LABEL_32;
  }
  if (objc_msgSend(*v1, sel_modifyOperation) == (id)3)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v17 = *v1;
    v18 = OUTLINED_FUNCTION_26();
    v19 = OUTLINED_FUNCTION_87_6(v18, (uint64_t)static Logger.siriContacts);
    Logger.logObject.getter();
    v20 = OUTLINED_FUNCTION_8();
    v21 = OUTLINED_FUNCTION_3(v20);
    v22 = *v1;
    if (v21)
    {
      v23 = (_DWORD *)OUTLINED_FUNCTION_1();
      v73 = (_QWORD *)OUTLINED_FUNCTION_1();
      v76 = OUTLINED_FUNCTION_1();
      v77 = v76;
      *v23 = 136315394;
      v24 = OUTLINED_FUNCTION_3_30(v76, 0x800000021FEE1E20, &v77);
      OUTLINED_FUNCTION_145_0(v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_174();
      *(_QWORD *)(v0 + 56) = v22;
      v25 = v22;
      OUTLINED_FUNCTION_61_8();
      *v73 = v22;

      OUTLINED_FUNCTION_10_27(&dword_21FE16000, v2, (os_log_type_t)v17, "[%s] Returning success for intent: %@");
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    v65 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
    v63 = 4;
    goto LABEL_30;
  }
  v74 = v7;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v46 = OUTLINED_FUNCTION_26();
  v47 = OUTLINED_FUNCTION_87_6(v46, (uint64_t)static Logger.siriContacts);
  Logger.logObject.getter();
  v48 = OUTLINED_FUNCTION_8();
  v49 = OUTLINED_FUNCTION_42(v48);
  v50 = *v1;
  if (v49)
  {
    v51 = (_DWORD *)OUTLINED_FUNCTION_1();
    v52 = (_QWORD *)OUTLINED_FUNCTION_1();
    v71 = OUTLINED_FUNCTION_1();
    v77 = v71;
    *v51 = 136315394;
    v53 = OUTLINED_FUNCTION_3_30(v71, 0x800000021FEE1E20, &v77);
    OUTLINED_FUNCTION_146_1(v53, v54, v55, v56, v57, v58, v59, v60, v0 + 48, v71, v74, (_QWORD *)(v0 + 32));
    OUTLINED_FUNCTION_119_2();
    OUTLINED_FUNCTION_174();
    *(_QWORD *)(v0 + 40) = v50;
    v61 = v50;
    OUTLINED_FUNCTION_61_8();
    *v52 = v50;

    OUTLINED_FUNCTION_10_27(&dword_21FE16000, v2, (os_log_type_t)(v0 + 64), "[%s] Confirming intent for modifyNickname: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v68 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
  v66 = OUTLINED_FUNCTION_38_12(1);
LABEL_32:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(char *))(v0 + 8))(v66);
}

uint64_t @objc ModifyContactAttributeIntentHandler.confirm(intent:)(void *a1, int a2, void *a3, void *aBlock)
{
  return @objc ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(a1, a2, a3, aBlock);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.confirm(intent:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:);
  return ModifyContactAttributeIntentHandler.confirm(intent:)((uint64_t)v6);
}

uint64_t ModifyContactAttributeIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[51] = a1;
  v2[52] = v1;
  v2[53] = OUTLINED_FUNCTION_78_3();
  v2[54] = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeIntentHandler.handle(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  _DWORD *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  NSObject *v25;
  void **v26;
  id v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id *v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  id v45;
  os_log_type_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  id v57;
  const char *v58;
  id v59;
  uint64_t v60;
  os_log_type_t v61;
  _QWORD *v62;
  uint64_t *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  id v74;
  NSObject *v75;
  id v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  NSObject *v87;
  id v88;
  id v89;
  os_log_type_t v90;
  _BOOL4 v91;
  void *v92;
  _QWORD *v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  id v99;
  os_log_type_t v100;
  _BOOL4 v101;
  id v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  id v106;
  id v107;
  os_log_type_t v108;
  _BOOL4 v109;
  id v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  id v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  os_log_type_t v126;
  _DWORD *v127;
  _QWORD *v128;
  char *v129;
  _BOOL4 v130;
  void *v131;
  _QWORD *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL4 v136;
  id v137;
  _QWORD *v138;
  _DWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  NSObject *v153;
  NSObject *v154;
  os_log_type_t v155;
  _BOOL4 v156;
  void *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  id v168;
  id v169;
  id v170;
  os_log_type_t v171;
  _BOOL8 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  id *v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  NSObject *v205;
  uint64_t *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;

  v1 = v0;
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v1 + 432);
  v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_53_0();
  v5 = v2 + *(int *)(v3 + 20);
  *(_QWORD *)v5 = "HandleModifyContactAttribute";
  *(_QWORD *)(v5 + 8) = 28;
  v214 = v5;
  *(_BYTE *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = (char *)(v1 + 392);
  v7 = *(void **)(v1 + 408);
  v8 = OUTLINED_FUNCTION_26();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
  v10 = v7;
  v212 = v9;
  v11 = (void *)v9;
  Logger.logObject.getter();
  v12 = OUTLINED_FUNCTION_8();
  v13 = OUTLINED_FUNCTION_3(v12);
  v14 = *(void **)(v1 + 408);
  v204 = v1 + 392;
  if (v13)
  {
    v15 = (_DWORD *)OUTLINED_FUNCTION_1();
    v200 = OUTLINED_FUNCTION_1();
    v16 = OUTLINED_FUNCTION_1();
    v215 = v16;
    *v15 = 136315394;
    *(_QWORD *)v6 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v200, v204, v16, v209, v212, v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_174();
    *(_QWORD *)(v1 + 400) = v14;
    v17 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v201 = v14;

    OUTLINED_FUNCTION_8_23(&dword_21FE16000, v18, v19, "[%s] Handling intent: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  v20 = (id *)(v1 + 408);

  v21 = specialized BaseIntentHandler.meCard.getter();
  if (!v21)
  {
    v59 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentResponse());
    v60 = OUTLINED_FUNCTION_170();
    v6 = OUTLINED_FUNCTION_38_12(v60);
    goto LABEL_57;
  }
  v22 = v21;
  v23 = (uint64_t *)(v1 + 240);
  v24 = v1 + 248;
  v25 = (v1 + 280);
  v26 = (void **)(v1 + 408);
  v27 = objc_msgSend(*(id *)(v1 + 408), sel_contactAttributeToModify);
  if (v27 == (id)6)
  {
    v61 = v1 - 104;
    v62 = (_QWORD *)v1;
    v63 = (uint64_t *)(v1 + 224);
    v64 = (char *)objc_msgSend(*v20, sel_modifyOperation);
    v207 = v22;
    if ((unint64_t)(v64 - 1) >= 2)
    {
      if (v64 != (char *)3)
      {
        v99 = *v20;
        OUTLINED_FUNCTION_41_11();
        v100 = OUTLINED_FUNCTION_38_6();
        v101 = OUTLINED_FUNCTION_42(v100);
        v102 = *v20;
        if (v101)
        {
          v103 = OUTLINED_FUNCTION_1();
          v104 = (_QWORD *)OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_107_4();
          *(_DWORD *)v103 = 136315394;
          v105 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v199, v204, (uint64_t)v22, (uint64_t)v62, v212, v214);
          OUTLINED_FUNCTION_165(v105);
          OUTLINED_FUNCTION_33_12();
          *(_WORD *)(v103 + 12) = 2112;
          v62[22] = v102;
          v106 = v102;
          OUTLINED_FUNCTION_93_6();
          *v104 = v102;

          OUTLINED_FUNCTION_33_6(&dword_21FE16000, v25, (os_log_type_t)v22, "[%s] Unknown modifyOperation received in modifyNickname intent, returning failure: %@", (uint8_t *)v103);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        v1 = (uint64_t)v62;
LABEL_36:
        v115 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
        v6 = OUTLINED_FUNCTION_20_20();
        OUTLINED_FUNCTION_56_12((uint64_t)v6, v116, v117, v118, v119, v120, v121, v122, v187, v189, v192, v194, v196, v199, v204, v207);
        goto LABEL_57;
      }
      OUTLINED_FUNCTION_139_2(v62[52]);
      v83 = v62[20];
      v84 = v62[21];
      OUTLINED_FUNCTION_131_1();
      (*(void (**)(void *, uint64_t, uint64_t))(v84 + 40))(v22, v83, v84);
      v210 = v62;
      v85 = (void *)v62[51];
      __swift_destroy_boxed_opaque_existential_0((uint64_t)(v62 + 17));
      v86 = v85;
      v87 = OUTLINED_FUNCTION_41_11();
      static os_log_type_t.debug.getter();
      v136 = OUTLINED_FUNCTION_30_18(v87);
      v137 = *v20;
      if (v136)
      {
        v138 = v210 + 27;
        v139 = (_DWORD *)OUTLINED_FUNCTION_1();
        v140 = (_QWORD *)OUTLINED_FUNCTION_1();
        v215 = OUTLINED_FUNCTION_1();
        *v139 = 136315394;
        v141 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v199, v204, (uint64_t)v22, (uint64_t)v210, (uint64_t)v87, v214);
        OUTLINED_FUNCTION_145_0(v141);
        OUTLINED_FUNCTION_33_12();
        OUTLINED_FUNCTION_83_6();
        *v138 = v137;
        v142 = v137;
        OUTLINED_FUNCTION_86_2();
        *v140 = v137;

        OUTLINED_FUNCTION_8_23(&dword_21FE16000, v143, v144, "[%s] Delete nickname complete for intent, returning success: %@");
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v169 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
      v6 = OUTLINED_FUNCTION_38_12(4);

    }
    else
    {
      v197 = (uint64_t)v23;
      v202 = (uint64_t)v25;
      v210 = v62;
      v65 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(*v20);
      v67 = v20;
      if (v66)
      {
        v68 = v65;
        v69 = v66;
        v1 = (uint64_t)v210;
        OUTLINED_FUNCTION_139_2(v210[52]);
        v71 = v210[15];
        v72 = v210[16];
        OUTLINED_FUNCTION_131_1();
        (*(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v72 + 32))(v68, v69, v22, v71, v72);
        v73 = (void *)v210[51];
        OUTLINED_FUNCTION_117();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)(v210 + 12));
        v74 = v73;
        v75 = OUTLINED_FUNCTION_41_11();
        static os_log_type_t.debug.getter();
        v130 = OUTLINED_FUNCTION_30_18(v75);
        v131 = *v67;
        if (v130)
        {
          v213 = (uint64_t)v75;
          OUTLINED_FUNCTION_1();
          v132 = (_QWORD *)OUTLINED_FUNCTION_1();
          v215 = OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_90_4(4.8151e-34);
          v70 = v210 + 33;
          *v70 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v197, v202, v24, (uint64_t)v22, (uint64_t)v210, v213, v214);
          OUTLINED_FUNCTION_33_12();
          OUTLINED_FUNCTION_55_12();
          *(_QWORD *)(v1 + 272) = v131;
          v133 = v131;
          OUTLINED_FUNCTION_153_1();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v132 = v131;

          OUTLINED_FUNCTION_8_23(&dword_21FE16000, v134, v135, "[%s] Add nickname complete for intent, returning success: %@");
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        v168 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
        v6 = OUTLINED_FUNCTION_38_12(4);

        goto LABEL_57;
      }
      v107 = OUTLINED_FUNCTION_137_2();
      OUTLINED_FUNCTION_41_11();
      v108 = OUTLINED_FUNCTION_38_6();
      v109 = OUTLINED_FUNCTION_3(v108);
      v110 = *v20;
      if (v109)
      {
        v111 = v210 + 29;
        v112 = OUTLINED_FUNCTION_1();
        v113 = (_QWORD *)OUTLINED_FUNCTION_1();
        v215 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v112 = 136315394;
        *v63 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v197, (uint64_t)v25, v24, (uint64_t)v207, (uint64_t)v210, v212, v214);
        OUTLINED_FUNCTION_33_12();
        *(_WORD *)(v112 + 12) = 2112;
        *v111 = v110;
        v114 = v110;
        OUTLINED_FUNCTION_153_1();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v113 = v110;

        OUTLINED_FUNCTION_33_6(&dword_21FE16000, v25, v61, "[%s] Didn't resolve modifyNickName for intent, returning failure: %@", (uint8_t *)v112);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v145 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
      v6 = OUTLINED_FUNCTION_20_20();
      OUTLINED_FUNCTION_56_12((uint64_t)v6, v146, v147, v148, v149, v150, v151, v152, v187, v189, v192, v194, (uint64_t)v23, (uint64_t)v25, v24, v207);
    }
LABEL_26:
    v1 = (uint64_t)v210;
    goto LABEL_57;
  }
  v199 = v1 + 280;
  v28 = (id *)(v1 + 312);
  if (v27 != (id)10)
  {
    v210 = (_QWORD *)v1;
    v76 = OUTLINED_FUNCTION_137_2();
    OUTLINED_FUNCTION_41_11();
    v77 = OUTLINED_FUNCTION_38_6();
    v78 = OUTLINED_FUNCTION_44_6(v77);
    v6 = (char *)*v20;
    if (v78)
    {
      v208 = (uint64_t)v22;
      v79 = OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_107_4();
      *(_DWORD *)v79 = 136315394;
      *(_QWORD *)(v1 + 352) = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v1 + 312, v199, v204, v208, v1, v212, v214);
      v80 = OUTLINED_FUNCTION_33_12();
      *(_WORD *)(v79 + 12) = 2080;
      *v198 = OUTLINED_FUNCTION_106_0(v80, sel_contactAttributeToModify);
      v81 = String.init<A>(describing:)();
      *v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v215);
      OUTLINED_FUNCTION_33_12();
      OUTLINED_FUNCTION_55_1();

      OUTLINED_FUNCTION_33_6(&dword_21FE16000, (v1 + 312), (os_log_type_t)v1, "[%s] Unsupported attribute requested to be modified: %s", (uint8_t *)v79);
      OUTLINED_FUNCTION_51_11();
      OUTLINED_FUNCTION_0();
    }

    v88 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
    OUTLINED_FUNCTION_38_12(100);
    OUTLINED_FUNCTION_124_1();
    goto LABEL_26;
  }
  v192 = v1 + 352;
  v194 = v1 + 296;
  outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(*v20);
  if (v30)
  {
    v31 = v29;
    v32 = v30;
    v196 = v1 + 312;
    v189 = v1 + 360;
    outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(*v26);
    if (v33)
    {
      v28 = v33;
      v34 = (unint64_t)v33 & 0xC000000000000001;
      OUTLINED_FUNCTION_123_1();
      if (v34)
        OUTLINED_FUNCTION_29_6();
      v35 = v28[4];
      OUTLINED_FUNCTION_5();
      v36 = outlined bridged method (ob) of @objc SiriMatch.fullName.getter(v35);
      v26 = (void **)(v1 + 408);
      if (v37)
      {
        v38 = v36;
        v39 = v37;
        v40 = (char *)objc_msgSend(*(id *)(v1 + 408), sel_modifyOperation);
        v207 = v22;
        if ((unint64_t)(v40 - 1) < 2)
        {
          v199 = v1 + 376;
          OUTLINED_FUNCTION_140_1(*(_QWORD *)(v1 + 416));
          v41 = (uint64_t)v22;
          v42 = *(_QWORD *)(v1 + 48);
          v43 = v38;
          v44 = OUTLINED_FUNCTION_120_2((_QWORD *)(v1 + 16));
          OUTLINED_FUNCTION_103_4(v31, v32, v43, v39, v41, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 48));
          OUTLINED_FUNCTION_48();
          OUTLINED_FUNCTION_5_0();
          __swift_destroy_boxed_opaque_existential_0(v1 + 16);
          v45 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
          v6 = OUTLINED_FUNCTION_20_20();
          OUTLINED_FUNCTION_41_11();
          v46 = OUTLINED_FUNCTION_38_6();
          v47 = OUTLINED_FUNCTION_42(v46);
          if (v47)
          {
            OUTLINED_FUNCTION_1();
            v55 = (_QWORD *)OUTLINED_FUNCTION_1();
            OUTLINED_FUNCTION_1();
            OUTLINED_FUNCTION_107_4();
            OUTLINED_FUNCTION_90_4(4.8151e-34);
            v56 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v199, (uint64_t)v44, (uint64_t)v207, v209, v212, v214);
            *v190 = v56;
            OUTLINED_FUNCTION_33_12();
            OUTLINED_FUNCTION_55_12();
            v57 = OUTLINED_FUNCTION_163_0();
            OUTLINED_FUNCTION_153_1();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v55 = v6;

            v58 = "[%s] Add relationship failed for intent, returning failure: %@";
            v44 = v205;
            goto LABEL_41;
          }
          goto LABEL_50;
        }
        v123 = v31;
        if (v40 == (char *)3)
        {
          v204 = v1 + 336;
          OUTLINED_FUNCTION_140_1(*(_QWORD *)(v1 + 416));
          v42 = *(_QWORD *)(v1 + 88);
          v124 = v38;
          v44 = OUTLINED_FUNCTION_120_2((_QWORD *)(v1 + 56));
          OUTLINED_FUNCTION_103_4(v123, v32, v124, v39, (uint64_t)v207, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56));
          if (v1 == -360)
          {
            __swift_destroy_boxed_opaque_existential_0(-304);
            v44 = OUTLINED_FUNCTION_27_19();
            OUTLINED_FUNCTION_138_2(v123, v32, v124);
            v6 = (char *)v170;
            OUTLINED_FUNCTION_41_11();
            v171 = OUTLINED_FUNCTION_8();
            v172 = OUTLINED_FUNCTION_3(v171);
            if (v172)
            {
              OUTLINED_FUNCTION_1();
              v180 = (_QWORD *)OUTLINED_FUNCTION_1();
              v215 = OUTLINED_FUNCTION_1();
              OUTLINED_FUNCTION_90_4(4.8151e-34);
              v181 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v199, v204, (uint64_t)v207, v209, v212, v214);
              *v206 = v181;
              OUTLINED_FUNCTION_33_12();
              OUTLINED_FUNCTION_55_12();
              MEMORY[0xFFFFFFFFFFFFFFF0] = v6;
              v182 = v6;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *v180 = v6;

              OUTLINED_FUNCTION_8_23(&dword_21FE16000, v183, v184, "[%s] Delete relationship complete for intent, returning success: %@");
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              OUTLINED_FUNCTION_16();
              OUTLINED_FUNCTION_0();
            }
            OUTLINED_FUNCTION_56_12(v172, v173, v174, v175, v176, v177, v178, v179, v187, v189, v192, v194, v196, v199, v204, v207);

            goto LABEL_56;
          }
          OUTLINED_FUNCTION_48();
          OUTLINED_FUNCTION_5_0();
          __swift_destroy_boxed_opaque_existential_0(v1 + 56);
          v125 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
          v6 = OUTLINED_FUNCTION_20_20();
          OUTLINED_FUNCTION_41_11();
          v126 = OUTLINED_FUNCTION_38_6();
          v47 = OUTLINED_FUNCTION_42(v126);
          if (v47)
          {
            v127 = (_DWORD *)OUTLINED_FUNCTION_1();
            v128 = (_QWORD *)OUTLINED_FUNCTION_1();
            OUTLINED_FUNCTION_1();
            OUTLINED_FUNCTION_107_4();
            *v127 = 136315394;
            *(_QWORD *)(v1 + 320) = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v199, v204, (uint64_t)v207, v1, v212, v214);
            OUTLINED_FUNCTION_119_2();
            OUTLINED_FUNCTION_83_6();
            *(_QWORD *)(v1 + 328) = v6;
            v129 = v6;
            OUTLINED_FUNCTION_86_2();
            *v128 = v6;

            v58 = "[%s] Delete relationship failed for intent, returning failure: %@";
LABEL_41:
            OUTLINED_FUNCTION_10_27(&dword_21FE16000, v44, (os_log_type_t)v42, v58);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            OUTLINED_FUNCTION_16();
            OUTLINED_FUNCTION_0();
          }
LABEL_50:
          OUTLINED_FUNCTION_56_12(v47, v48, v49, v50, v51, v52, v53, v54, v187, v189, v192, v194, v196, v199, v204, v207);

          OUTLINED_FUNCTION_22_2();
LABEL_56:

          goto LABEL_57;
        }
        v153 = *v26;
        OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_5_0();
        v154 = v153;
        OUTLINED_FUNCTION_41_11();
        v155 = OUTLINED_FUNCTION_38_6();
        v156 = OUTLINED_FUNCTION_42(v155);
        v157 = *v26;
        if (v156)
        {
          OUTLINED_FUNCTION_1();
          v211 = v1;
          v158 = (_QWORD *)OUTLINED_FUNCTION_1();
          v215 = OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_90_4(4.8151e-34);
          v159 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v199, v204, (uint64_t)v22, v211, v212, v214);
          OUTLINED_FUNCTION_146_1(v159, v160, v161, v162, v163, v164, v165, v166, v188, v191, v193, v195);
          OUTLINED_FUNCTION_33_12();
          OUTLINED_FUNCTION_55_12();
          v167 = OUTLINED_FUNCTION_163_0();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v158 = v157;

          OUTLINED_FUNCTION_10_27(&dword_21FE16000, v153, (os_log_type_t)v22, "[%s] Unknown modifyOperation received in modifyRelationship intent, returning failure: %@");
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        goto LABEL_36;
      }
    }
    OUTLINED_FUNCTION_48();
  }
  v89 = OUTLINED_FUNCTION_137_2();
  OUTLINED_FUNCTION_41_11();
  v90 = OUTLINED_FUNCTION_38_6();
  v91 = OUTLINED_FUNCTION_3(v90);
  v92 = *v26;
  if (v91)
  {
    OUTLINED_FUNCTION_1();
    v93 = (_QWORD *)OUTLINED_FUNCTION_1();
    v215 = OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_90_4(4.8151e-34);
    v94 = OUTLINED_FUNCTION_2_47((uint64_t)"ortedValueOutput", v187, v189, v192, v194, v196, v199, v204, (uint64_t)v22, v1, v212, v214);
    *v203 = v94;
    OUTLINED_FUNCTION_33_12();
    OUTLINED_FUNCTION_83_6();
    *(_QWORD *)(v1 + 288) = v92;
    v95 = v92;
    OUTLINED_FUNCTION_86_2();
    *v93 = v92;

    OUTLINED_FUNCTION_8_23(&dword_21FE16000, v96, v97, "[%s] Didn't resolve modifyRelationship and/or fullName for intent, returning failure: %@");
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v98 = objc_allocWithZone((Class)OUTLINED_FUNCTION_27_19());
  OUTLINED_FUNCTION_20_20();
  OUTLINED_FUNCTION_124_1();
LABEL_57:
  v185 = *(_QWORD *)(v1 + 432);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_53_0();
  outlined destroy of Signpost.OpenSignpost(v185);
  swift_task_dealloc();
  return (*(uint64_t (**)(char *))(v1 + 8))(v6);
}

uint64_t @objc ModifyContactAttributeIntentHandler.handle(intent:)(void *a1, int a2, void *a3, void *aBlock)
{
  return @objc ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)(a1, a2, a3, aBlock);
}

uint64_t @objc closure #1 in ModifyContactAttributeIntentHandler.handle(intent:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:);
  return ModifyContactAttributeIntentHandler.handle(intent:)((uint64_t)v6);
}

id ModifyContactAttributeIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModifyContactAttributeIntentHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ModifyContactAttributeIntentHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeIntentHandler;
  if (!type metadata singleton initialization cache for ModifyContactAttributeIntentHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ObjC metadata update function for ModifyContactAttributeIntentHandler()
{
  return type metadata accessor for ModifyContactAttributeIntentHandler();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t v0;

  OUTLINED_FUNCTION_25_1();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_81_5();
  }
  else
  {
    OUTLINED_FUNCTION_114_1();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
    OUTLINED_FUNCTION_84_5();
    if (!v5 && v4)
    {
      v4 = v3 >= v2;
      v5 = v3 == v2;
    }
    else
    {
      v4 = 0;
      v5 = 0;
    }
    if (v5 || !v4)
    {
      OUTLINED_FUNCTION_74_7();
      return OUTLINED_FUNCTION_39_12();
    }
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_54_11();
  }
  result = OUTLINED_FUNCTION_19_20();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_81_5();
  }
  else
  {
    OUTLINED_FUNCTION_114_1();
    if (v4 + 8 * v3 <= v2 || v2 + 8 * v3 <= v4)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      OUTLINED_FUNCTION_74_7();
      return OUTLINED_FUNCTION_39_12();
    }
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_54_11();
  }
  result = OUTLINED_FUNCTION_19_20();
  __break(1u);
  return result;
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  void (*v3)(_QWORD);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_81_5();
  }
  else
  {
    OUTLINED_FUNCTION_114_1();
    v3(0);
    OUTLINED_FUNCTION_84_5();
    if (!v6 & v5)
      v7 = v4 > v2;
    else
      v7 = 0;
    if (!v7)
    {
      OUTLINED_FUNCTION_74_7();
      return OUTLINED_FUNCTION_39_12();
    }
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_54_11();
  }
  result = OUTLINED_FUNCTION_19_20();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_81_5();
  }
  else
  {
    if (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3)
      return swift_arrayInitWithCopy();
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_54_11();
  }
  result = OUTLINED_FUNCTION_19_20();
  __break(1u);
  return result;
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(void *a1)
{
  if (objc_msgSend(a1, sel_modifyNickName))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_162_0();
  }
  return OUTLINED_FUNCTION_159();
}

uint64_t outlined bridged method (ob) of @objc SiriMatch.fullName.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_fullName);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id outlined copy of CNContact??(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t partial apply for implicit closure #1 in Recommendation<A>.assignConfidence()()
{
  return implicit closure #1 in Recommendation<A>.assignConfidence()();
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.handle(intent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)dispatch thunk of ContactsDelegateFlow.execute());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t objectdestroy_4Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21FE9FBE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.confirm(intent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)dispatch thunk of ContactsDelegateFlow.execute());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyNickName(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)dispatch thunk of ContactsDelegateFlow.execute());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveModifyRelationship(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)dispatch thunk of ContactsDelegateFlow.execute());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in ModifyContactAttributeIntentHandler.resolveRelatedSiriMatches(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)protocol witness for Flow.execute() in conformance ContactsDelegateFlow);
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

id specialized ModifyContactAttributeIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a7;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v13);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v25 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v25 - v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a5);
  v23 = specialized BaseIntentHandler.init(contactService:contactResolver:)((uint64_t)v20, (uint64_t)v15, a3, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a4);
  return v23;
}

uint64_t OUTLINED_FUNCTION_2_47@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, a1 | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_3_30(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, a2, a3);
}

uint64_t OUTLINED_FUNCTION_6_35(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2, a3);
}

void OUTLINED_FUNCTION_8_23(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v5, v6, a4, v4, 0x16u);
}

void OUTLINED_FUNCTION_10_27(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t OUTLINED_FUNCTION_12_28(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_13_31()
{
  uint64_t v0;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(_QWORD *)(v0 - 248), *(_QWORD *)(v0 - 288), (uint64_t *)(v0 - 128));
}

uint64_t OUTLINED_FUNCTION_17_19(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, *(_QWORD *)(v3 - 288), a3);
}

uint64_t OUTLINED_FUNCTION_18_22()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 - 328))(0);
}

uint64_t OUTLINED_FUNCTION_19_24()
{
  return Logger.logObject.getter();
}

char *OUTLINED_FUNCTION_20_20()
{
  return ModifyContactAttributeIntentResponse.init(code:userActivity:)(5, 0);
}

void OUTLINED_FUNCTION_23_24(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v5, v6, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_27_19()
{
  return type metadata accessor for ModifyContactAttributeIntentResponse();
}

void OUTLINED_FUNCTION_29_22(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

BOOL OUTLINED_FUNCTION_30_18(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_33_12()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

char *OUTLINED_FUNCTION_38_12(uint64_t a1)
{
  return ModifyContactAttributeIntentResponse.init(code:userActivity:)(a1, 0);
}

uint64_t OUTLINED_FUNCTION_39_12()
{
  return swift_arrayInitWithCopy();
}

uint64_t OUTLINED_FUNCTION_41_11()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_43_13()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_45_10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_46_12()
{
  return type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult();
}

uint64_t OUTLINED_FUNCTION_50_13(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8))(v1, v2, v3, v4);
}

uint64_t OUTLINED_FUNCTION_51_11()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_55_12()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2112;
}

void OUTLINED_FUNCTION_56_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

}

uint64_t OUTLINED_FUNCTION_57_9()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_60_13()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_61_9(float a1, uint64_t a2, ...)
{
  unint64_t v2;
  uint64_t v3;
  float *v4;
  va_list va;

  va_start(va, a2);
  *v4 = a1;
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_62_13()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id OUTLINED_FUNCTION_63_9()
{
  uint64_t v0;
  uint64_t v1;

  return objc_msgSend(*(id *)(v0 + 16), (SEL)(v1 + 1059));
}

id OUTLINED_FUNCTION_64_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return SiriMatch.__allocating_init(identifier:fullName:)(v0, v2, v1, v3);
}

uint64_t OUTLINED_FUNCTION_67_10()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_68_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_69_12@<X0>(uint64_t (*a1)(_QWORD)@<X8>)
{
  return a1(0);
}

void OUTLINED_FUNCTION_70_11()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_74_7()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_76_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return SiriMatch.__allocating_init(identifier:fullName:)(v2, v3, a1, a2);
}

uint64_t OUTLINED_FUNCTION_78_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id OUTLINED_FUNCTION_82_4()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;

  *(_WORD *)(v1 + 12) = 2112;
  *v2 = v0;
  return v0;
}

void OUTLINED_FUNCTION_83_6()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2112;
}

id OUTLINED_FUNCTION_85_8(uint64_t a1, void (*a2)(_QWORD))
{
  return specialized BaseIntentHandler.checkPrerequisites<A>(resultType:needsMeCard:)(OS_LOG_TYPE_INFO, a2);
}

void OUTLINED_FUNCTION_86_6(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

id OUTLINED_FUNCTION_87_6(uint64_t a1, uint64_t a2)
{
  void *v2;

  __swift_project_value_buffer(a1, a2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_89_3()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 - 384))();
}

void OUTLINED_FUNCTION_90_4(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_91_6()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_92_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  *(_QWORD *)(v3 - 200) = v4;
  return v4(v1, v2);
}

uint64_t OUTLINED_FUNCTION_93_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_94_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v0, v1, v3);
}

uint64_t OUTLINED_FUNCTION_95_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 152))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_96_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v2 - 272);
  return a1 + v1;
}

uint64_t OUTLINED_FUNCTION_97_4()
{
  return type metadata accessor for SiriMatch();
}

uint64_t OUTLINED_FUNCTION_98_3()
{
  return type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
}

uint64_t OUTLINED_FUNCTION_99_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_101_4(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = result;
  return result;
}

id OUTLINED_FUNCTION_102_6()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_103_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  return a6(a1, a2, a3, a4, a5, v6, v7);
}

uint64_t OUTLINED_FUNCTION_105_3@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 256));
}

id OUTLINED_FUNCTION_106_4()
{
  return static SiriMatchResolutionResult.success(with:)();
}

uint64_t OUTLINED_FUNCTION_110_4(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)va);
}

void OUTLINED_FUNCTION_111_3(float a1)
{
  float *v1;

  *v1 = a1;
}

void OUTLINED_FUNCTION_115_2(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_117_2()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_119_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

_QWORD *OUTLINED_FUNCTION_120_2(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

uint64_t OUTLINED_FUNCTION_121_2(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_123_1()
{
  char v0;
  uint64_t v1;
  uint64_t v2;

  if (v0)
    v2 = 1;
  else
    v2 = 0;
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, v2, v1);
}

void OUTLINED_FUNCTION_124_1()
{
  void *v0;

}

void OUTLINED_FUNCTION_125_0()
{
  void *v0;

}

id OUTLINED_FUNCTION_128_1(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 3912));
}

uint64_t OUTLINED_FUNCTION_129(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult();
}

_QWORD *OUTLINED_FUNCTION_131_1()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_132_3()
{
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_134_3(id a1, SEL a2, uint64_t a3)
{
  return objc_msgSend(a1, a2, a3, 2, 0);
}

uint64_t OUTLINED_FUNCTION_135_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_136_2()
{
  void *v0;

}

id OUTLINED_FUNCTION_137_2()
{
  id *v0;

  return *v0;
}

void OUTLINED_FUNCTION_138_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  ModifyContactAttributeIntentResponse.__allocating_init(relationshipLabel:contactName:code:)(a1, a2, a3, v3, 4);
}

uint64_t OUTLINED_FUNCTION_139_2@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of DeviceState(a1 + v1, v2);
}

uint64_t OUTLINED_FUNCTION_140_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of DeviceState(a1 + v1, v2);
}

void OUTLINED_FUNCTION_143_2(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_144_2(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

_QWORD *OUTLINED_FUNCTION_145_0(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

_QWORD *OUTLINED_FUNCTION_146_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  *a12 = a1;
  return a12;
}

uint64_t OUTLINED_FUNCTION_148_2@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  return outlined init with copy of DeviceState(v4 + a1, (uint64_t)va);
}

void OUTLINED_FUNCTION_149_1(void *a1)
{
  specialized BaseIntentHandler.needsMeCard(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_150(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 200))(a1, v1);
}

uint64_t OUTLINED_FUNCTION_152_1(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t OUTLINED_FUNCTION_156_1()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_157(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_159()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_162_0()
{
  void *v0;

}

id OUTLINED_FUNCTION_163_0()
{
  void *v0;
  _QWORD *v1;

  *v1 = v0;
  return v0;
}

_QWORD *OUTLINED_FUNCTION_165(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  return v1;
}

void OUTLINED_FUNCTION_166_0()
{
  specialized SiriKitContactIntent.me.getter();
}

void OUTLINED_FUNCTION_168_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_170()
{
  return 2;
}

uint64_t OUTLINED_FUNCTION_171()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_173@<X0>(uint64_t (*a1)(void)@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 384) = a1;
  return a1();
}

void OUTLINED_FUNCTION_174()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2112;
}

id OUTLINED_FUNCTION_175(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void FlowFactory.deviceState.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(v1 + 16, a1);
}

uint64_t FlowFactory.commonCATs.getter()
{
  return swift_retain();
}

void FlowFactory.referenceResolver.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(v1 + 64, a1);
}

uint64_t FlowFactory.__allocating_init(referenceResolver:deviceState:commonCATs:sirikitEventSender:)(__int128 *a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;

  v8 = OUTLINED_FUNCTION_13_3();
  FlowFactory.init(referenceResolver:deviceState:commonCATs:sirikitEventSender:)(a1, a2, a3, a4);
  return v8;
}

uint64_t FlowFactory.init(referenceResolver:deviceState:commonCATs:sirikitEventSender:)(__int128 *a1, __int128 *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;

  outlined init with take of FlowProviding(a1, v4 + 64);
  outlined init with take of FlowProviding(a2, v4 + 16);
  *(_QWORD *)(v4 + 56) = a3;
  outlined init with take of FlowProviding(a4, v4 + 104);
  return v4;
}

void FlowFactory.makeGetContactFlow(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactIntent, GetContactIntentResponse>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_1_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<GetContactFlowStrategy>);
  OUTLINED_FUNCTION_44_12();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_27();
  type metadata accessor for GetContactFlowStrategy(0);
  v2 = OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_28_16(v2);
  FlowFactory.getContactFlowProducers()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<GetContactIntent, GetContactIntentResponse>);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_51_12();
  OUTLINED_FUNCTION_80_7(&lazy protocol witness table cache variable for type GetContactFlowStrategy and conformance ContactsFlowStrategy<A, B>);
  OUTLINED_FUNCTION_15_20();
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_2_48();
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_54_12();
  OUTLINED_FUNCTION_1_26();
  OUTLINED_FUNCTION_85_9();
  OUTLINED_FUNCTION_79_5(&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<GetContactIntent, GetContactIntentResponse>> and conformance AnyValueFlow<A>);
  OUTLINED_FUNCTION_38_13();
  OUTLINED_FUNCTION_15_14();
  OUTLINED_FUNCTION_7();
}

void FlowFactory.makeGetContactAttributeFlow(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_1_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<GetContactAttributeFlowStrategy>);
  OUTLINED_FUNCTION_44_12();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_27();
  type metadata accessor for GetContactAttributeFlowStrategy(0);
  v2 = OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_28_16(v2);
  FlowFactory.getContactAttributeFlowProducers()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_51_12();
  OUTLINED_FUNCTION_80_7(&lazy protocol witness table cache variable for type GetContactAttributeFlowStrategy and conformance ContactsFlowStrategy<A, B>);
  OUTLINED_FUNCTION_15_20();
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_2_48();
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_54_12();
  OUTLINED_FUNCTION_1_26();
  OUTLINED_FUNCTION_85_9();
  OUTLINED_FUNCTION_79_5(&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<GetContactAttributeIntent, GetContactAttributeIntentResponse>> and conformance AnyValueFlow<A>);
  OUTLINED_FUNCTION_38_13();
  OUTLINED_FUNCTION_15_14();
  OUTLINED_FUNCTION_7();
}

void FlowFactory.makeModifyContactAttributeFlow(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_1_30();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHFlowFactory<ModifyContactAttributeFlowStrategy>);
  OUTLINED_FUNCTION_44_12();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_27();
  type metadata accessor for ModifyContactAttributeFlowStrategy(0);
  v2 = OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_28_16(v2);
  FlowFactory.modifyContactAttributeFlowProducers()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowFactory<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_51_12();
  OUTLINED_FUNCTION_80_7(&lazy protocol witness table cache variable for type ModifyContactAttributeFlowStrategy and conformance ContactsFlowStrategy<A, B>);
  OUTLINED_FUNCTION_15_20();
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_2_48();
  OUTLINED_FUNCTION_22_18();
  OUTLINED_FUNCTION_54_12();
  OUTLINED_FUNCTION_1_26();
  OUTLINED_FUNCTION_85_9();
  OUTLINED_FUNCTION_79_5(&lazy protocol witness table cache variable for type AnyValueFlow<RCHFlowResult<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>> and conformance AnyValueFlow<A>);
  OUTLINED_FUNCTION_38_13();
  OUTLINED_FUNCTION_15_14();
  OUTLINED_FUNCTION_7();
}

uint64_t FlowFactory.makeUnsupportedLearnPronunciationFlow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = OUTLINED_FUNCTION_87_0();
  *(_QWORD *)(v1 + 40) = OUTLINED_FUNCTION_34_13(v2);
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = FlowFactory.makeUnsupportedLearnPronunciationFlow();
  return ContactsCommonCATs.unsupportedLearnPronunciation()();
}

{
  OUTLINED_FUNCTION_26_22();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_26();
  v1 = OUTLINED_FUNCTION_10_1(v0, (uint64_t)static Logger.siriContacts);
  v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_73_10(v2))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_47_0(&dword_21FE16000, v1, v3, "#FlowFactory building flow for unsupportedLearnPronunciation");
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_91_7();
  FlowFactory.getUnsupportedFlow(for:)();
  OUTLINED_FUNCTION_50_14();
  OUTLINED_FUNCTION_21_0();
  v4 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_14_26(v4, v5);
}

uint64_t FlowFactory.makeUnsupportedActionFlow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v0;
  v2 = OUTLINED_FUNCTION_87_0();
  *(_QWORD *)(v1 + 40) = OUTLINED_FUNCTION_34_13(v2);
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = FlowFactory.makeUnsupportedActionFlow();
  return ContactsCommonCATs.unsupportedAction()();
}

{
  OUTLINED_FUNCTION_26_22();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_26();
  v1 = OUTLINED_FUNCTION_10_1(v0, (uint64_t)static Logger.siriContacts);
  v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_73_10(v2))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_47_0(&dword_21FE16000, v1, v3, "#FlowFactory building flow for unsupportedAction");
    OUTLINED_FUNCTION_1_4();
  }
  OUTLINED_FUNCTION_91_7();
  FlowFactory.getUnsupportedFlow(for:)();
  OUTLINED_FUNCTION_50_14();
  OUTLINED_FUNCTION_21_0();
  v4 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_14_26(v4, v5);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t FlowFactory.makeAppPunchoutFlow()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v1 = OUTLINED_FUNCTION_26();
  v2 = OUTLINED_FUNCTION_10_1(v1, (uint64_t)static Logger.siriContacts);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_47_0(&dword_21FE16000, v2, v4, "#FlowFactory building flow for unsupported multiple contacts request");
    OUTLINED_FUNCTION_1_4();
  }
  v5 = v0[3];

  OUTLINED_FUNCTION_48_11();
  if ((DeviceState.isVox.getter() & 1) != 0
    || (v6 = OUTLINED_FUNCTION_48_11(), (DeviceState.supportsCompactView.getter(v6) & 1) == 0)
    || (__swift_project_boxed_opaque_existential_1((_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 40)),
        (dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0))
  {
    v7 = (_QWORD *)swift_task_alloc();
    v0[4] = v7;
    *v7 = v0;
    v7[1] = FlowFactory.makeAppPunchoutFlow();
    return FlowFactory.makeUnsupportedActionFlow()();
  }
  else
  {
    OUTLINED_FUNCTION_44();
    static OutputPublisherFactory.makeOutputPublisherAsync()();
    type metadata accessor for SimpleOutputFlowAsync();
    OUTLINED_FUNCTION_32_0();
    v0[2] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
    Flow.eraseToAnyFlow()();
    swift_release();
    v9 = OUTLINED_FUNCTION_36_0();
    return v10(v9);
  }
}

uint64_t FlowFactory.makeAppPunchoutFlow()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = swift_task_dealloc();
  if (!v1)
    v4 = a1;
  return OUTLINED_FUNCTION_11_20(v4, *(uint64_t (**)(void))(v6 + 8));
}

uint64_t closure #1 in FlowFactory.makeAppPunchoutFlow()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in FlowFactory.makeAppPunchoutFlow()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 64) + 104), *(_QWORD *)(*(_QWORD *)(v0 + 64) + 128));
  type metadata accessor for SiriKitEvent();
  static SiriKitEvent.uufrReady()();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  *(_QWORD *)(v0 + 40) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(v0 + 48) = &protocol witness table for InstalledAppsProvider;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  v2 = v1;
  outlined destroy of AppUtil(v0 + 16);
  v3 = *(uint64_t **)(v0 + 56);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v4 = OUTLINED_FUNCTION_13_3();
    *(_OWORD *)(v4 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v4 + 32) = v2;
    specialized Array._endMutation()();
    v5 = type metadata accessor for AceOutput();
    v6 = MEMORY[0x24BE99088];
    v3[3] = v5;
    v3[4] = v6;
    __swift_allocate_boxed_opaque_existential_1(v3);
    AceOutput.init(commands:flowActivity:)();
  }
  else
  {
    type metadata accessor for EmptyOutput();
    static EmptyOutput.instance.getter();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void FlowFactory.getUnsupportedFlow(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[6];

  OUTLINED_FUNCTION_77_7();
  v2 = v1;
  v3 = OUTLINED_FUNCTION_87_0();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x24BDAC7A8](v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, v3);
  v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  *(_QWORD *)(v7 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8)) = v0;
  OUTLINED_FUNCTION_44();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  type metadata accessor for SimpleOutputFlowAsync();
  OUTLINED_FUNCTION_32_0();
  v8[1] = SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)();
  Flow.eraseToAnyFlow()();
  OUTLINED_FUNCTION_15_14();
  OUTLINED_FUNCTION_18_15();
}

uint64_t closure #1 in FlowFactory.getUnsupportedFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[21] = swift_task_alloc();
  type metadata accessor for CATOption();
  v3[22] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in FlowFactory.getUnsupportedFlow(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(uint64_t **)(v0 + 144);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 160) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 160) + 40));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  static Device.current.getter();
  ObjC metadata update function for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  v3 = CATWrapper.__allocating_init(options:globals:)();
  *(_QWORD *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(_QWORD *)(v0 + 56) = v3;
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v0 + 16);
  v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v4);
  v5 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  v6 = MEMORY[0x24BE99088];
  v2[3] = v5;
  v2[4] = v6;
  __swift_allocate_boxed_opaque_existential_1(v2);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of FlowActivity?(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of FlowActivity?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
  swift_task_dealloc();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void FlowFactory.getContactFlowProducers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  type metadata accessor for CATOption();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_13_32();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v7 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v8 = *(int *)(v3 + 20);
  v20 = v6;
  v9 = &v6[v8];
  *(_QWORD *)v9 = "MakeGetContactFlowProducers";
  *((_QWORD *)v9 + 1) = 27;
  v9[16] = 2;
  type metadata accessor for GetContactIntent();
  type metadata accessor for GetContactIntentResponse();
  RCHChildFlowProducersAsync.init()();
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_2_48();
  static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
  OUTLINED_FUNCTION_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactIntent, GetContactIntentResponse>);
  OUTLINED_FUNCTION_60_14();
  RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
  type metadata accessor for GetContactCATs();
  OUTLINED_FUNCTION_10_28();
  v10 = OUTLINED_FUNCTION_47_11();
  OUTLINED_FUNCTION_43_14(v1 + 64);
  OUTLINED_FUNCTION_22_11();
  static Device.current.getter();
  if (one-time initialization token for current != -1)
    swift_once();
  ObjC metadata update function for ContactsLabelCATs();
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_1_42();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_23_25(v11);
  type metadata accessor for GetContactNeedsValueStrategy();
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type GetContactNeedsValueStrategy and conformance ContactsNeedsValueStrategy<A, B, C>);
  OUTLINED_FUNCTION_59_12();
  OUTLINED_FUNCTION_11_24();
  OUTLINED_FUNCTION_60_14();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_87_7();
  v12 = static ContactService.current;
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_10_28();
  v13 = OUTLINED_FUNCTION_1_42();
  v14 = specialized GetContactDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v10, (uint64_t)&v21, v12, v13, 0);
  v15 = OUTLINED_FUNCTION_23_25(v14);
  type metadata accessor for GetContactDisambiguationStrategy(v15);
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactDisambiguationStrategy and conformance ContactsDisambiguationStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for GetContactDisambiguationStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_60_14();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  v16 = OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v16 + 16) = v10;
  *(_QWORD *)(v16 + 24) = v1;
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_60_14();
  RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_87_7();
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_1_42();
  OUTLINED_FUNCTION_83_7();
  specialized GetContactHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_23_25(v17);
  type metadata accessor for GetContactHandleIntentStrategy();
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  swift_release();
  OUTLINED_FUNCTION_60_14();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  static os_signpost_type_t.end.getter();
  v18 = (uint64_t)v20;
  OUTLINED_FUNCTION_27_3();
  swift_release();
  outlined destroy of Signpost.OpenSignpost(v18);
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in FlowFactory.getContactFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  BOOL v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  BOOL ContactNeeds;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  id v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void *v45;
  id v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t);
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[5];

  v61 = a3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactIntent>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v56 - v12;
  v14 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v14);
  v15 = (void *)ParameterResolutionRecord.result.getter();
  v16 = INIntentResolutionResult.isUnsupportedRelationshipNotFound.getter();

  if (v16)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      MEMORY[0x2207D8768](v20, -1, -1);
    }
    v60 = a1;

    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1)
      swift_once();
    v21 = static ContactService.current;
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v23 = v22;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 40));
    if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
    {
      v63[0] = v23;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    }
    else
    {
      v63[0] = v23;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    }
    type metadata accessor for ContactsCommonCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    v36 = CATWrapper.__allocating_init(options:globals:)();
    static Device.current.getter();
    swift_retain();
    static CATOption.defaultMode.getter();
    v37 = CATWrapper.__allocating_init(options:globals:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactIntent, GetContactIntentResponse>);
    v38 = swift_allocObject();
    v63[0] = specialized ContactsUnsetRelationshipFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v36, (uint64_t)v63, v21, v37, 0, v38);
    swift_allocObject();
    swift_weakInit();
    type metadata accessor for GetContactIntentResponse();
    lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type ContactsUnsetRelationshipFlowStrategy<GetContactIntent, GetContactIntentResponse> and conformance ContactsUnsetRelationshipFlowStrategy<A, B>, &demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactIntent, GetContactIntentResponse>);
    v39 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedFlowProducer<A, B>(unsupportedValueFlowProducer:unsetRelationshipStrategy:_:)();
    swift_release();
    swift_release();
    swift_release();
    v40 = v39(v60, a2);
    swift_release();
    swift_release();
  }
  else
  {
    v24 = (void *)ParameterResolutionRecord.result.getter();
    ContactNeeds = INIntentResolutionResult.isGetContactNeedsValue.getter();

    v59 = a2;
    if (ContactNeeds)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.siriContacts);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, a2, v7);
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v63[0] = v58;
        *(_DWORD *)v29 = 136315138;
        v57 = v29 + 4;
        v30 = (void *)ParameterResolutionRecord.result.getter();
        v31 = objc_msgSend(v30, sel_unsupportedReason);
        v60 = a1;
        v32 = (Swift::Int)v31;

        LOBYTE(v62) = SiriKitContactUnsupportedReason.init(rawValue:)(v32);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
        v33 = String.init<A>(describing:)();
        v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v63);
        a1 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
        _os_log_impl(&dword_21FE16000, v27, v28, "#FlowFactory GetContact unsupported reason is %s. Creating prompt producer to handle unsupported with needs value.", v29, 0xCu);
        v35 = v58;
        swift_arrayDestroy();
        MEMORY[0x2207D8768](v35, -1, -1);
        MEMORY[0x2207D8768](v29, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      }

      swift_retain();
      static Device.current.getter();
      if (one-time initialization token for current != -1)
        swift_once();
      type metadata accessor for ContactsLabelCATs();
      swift_retain();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
      v63[0] = v51;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      v52 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.siriContacts);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v63[0] = v58;
        *(_DWORD *)v44 = 136315138;
        v57 = v44 + 4;
        v45 = (void *)ParameterResolutionRecord.result.getter();
        v46 = objc_msgSend(v45, sel_unsupportedReason);
        v60 = a1;
        v47 = (Swift::Int)v46;

        LOBYTE(v62) = SiriKitContactUnsupportedReason.init(rawValue:)(v47);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
        v48 = String.init<A>(describing:)();
        v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v63);
        a1 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
        _os_log_impl(&dword_21FE16000, v42, v43, "#FlowFactory GetContact unsupported reason is %s. Creating cancel producer to handle unsupported without needs value.", v44, 0xCu);
        v50 = v58;
        swift_arrayDestroy();
        MEMORY[0x2207D8768](v50, -1, -1);
        MEMORY[0x2207D8768](v44, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      }

      swift_retain();
      static Device.current.getter();
      if (one-time initialization token for current != -1)
        swift_once();
      type metadata accessor for ContactsLabelCATs();
      swift_retain();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
      v63[0] = v53;
      type metadata accessor for GetContactUnsupportedValueStrategy();
      lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactUnsupportedValueStrategy);
      v52 = static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    }
    v54 = (uint64_t (*)(uint64_t, uint64_t))v52;
    swift_release();
    v40 = v54(a1, v59);
  }
  swift_release();
  return v40;
}

uint64_t closure #1 in closure #1 in FlowFactory.getContactFlowProducers()()
{
  uint64_t Strong;
  char v1;
  char v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(Strong + 16), *(_QWORD *)(Strong + 40));
    v1 = dispatch thunk of DeviceState.isWatch.getter();
    swift_release();
    v2 = v1 ^ 1;
  }
  else
  {
    v2 = 1;
  }
  return v2 & 1;
}

void FlowFactory.getContactAttributeFlowProducers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_57_10();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_13_32();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_15();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v5 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_88_3();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_92_6();
  v6 = v0 + *(int *)(v3 + 20);
  *(_QWORD *)v6 = "MakeGetContactAttributeFlowProducers";
  *(_QWORD *)(v6 + 8) = 36;
  *(_BYTE *)(v6 + 16) = 2;
  type metadata accessor for GetContactAttributeIntent();
  type metadata accessor for GetContactAttributeIntentResponse();
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_2_48();
  OUTLINED_FUNCTION_62_14();
  OUTLINED_FUNCTION_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_40_8();
  type metadata accessor for GetContactAttributeCATs();
  OUTLINED_FUNCTION_10_28();
  v7 = OUTLINED_FUNCTION_47_11();
  OUTLINED_FUNCTION_43_14(v1 + 64);
  OUTLINED_FUNCTION_55_3();
  static Device.current.getter();
  if (one-time initialization token for current != -1)
    swift_once();
  v8 = static ContactService.current;
  ObjC metadata update function for ContactsLabelCATs();
  swift_retain();
  OUTLINED_FUNCTION_10_28();
  v9 = OUTLINED_FUNCTION_58_10();
  v10 = specialized GetContactAttributeNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)((uint64_t)&v13, v7, (uint64_t)&v12, v8, v9, 0);
  OUTLINED_FUNCTION_23_25(v10);
  type metadata accessor for GetContactAttributeNeedsValueStrategy();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactAttributeNeedsValueStrategy and conformance ContactsNeedsValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactAttributeNeedsValueStrategy);
  static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_2();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  OUTLINED_FUNCTION_55_3();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_89_4();
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_87_7();
  swift_retain();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_58_10();
  OUTLINED_FUNCTION_83_7();
  specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_23_25(v11);
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_61_10();
  OUTLINED_FUNCTION_84_6();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_66();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  SiriContactsIntents::GetContactAttributeSlots_optional v15;
  uint64_t v16;
  SiriContactsIntents::GetContactAttributeSlots value;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v28[5];

  v6 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for ParameterIdentifier();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v28[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  v11 = ParameterIdentifier.name.getter();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  v15.value = GetContactAttributeSlots.init(rawValue:)(v14).value;
  if (v15.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault)
    goto LABEL_2;
  value = v15.value;
  if (GetContactAttributeSlots.rawValue.getter(v15.value) == 0xD000000000000014 && v18 == 0x800000021FEDFA30)
    goto LABEL_7;
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
    goto LABEL_12;
  if (GetContactAttributeSlots.rawValue.getter(value) == 0xD000000000000019 && v20 == 0x800000021FEDFA50)
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_2:
      static Device.current.getter();
      if (one-time initialization token for current != -1)
        swift_once();
      type metadata accessor for ContactsLabelCATs();
      swift_retain();
      static CATOption.defaultMode.getter();
      CATWrapper.__allocating_init(options:globals:)();
      swift_retain();
      specialized GCAContactsDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
      v28[0] = v16;
      type metadata accessor for GCAContactsDisambiguationStrategy(0);
      lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GCAContactsDisambiguationStrategy and conformance ContactsDisambiguationStrategy<A, B>, (void (*)(uint64_t))type metadata accessor for GCAContactsDisambiguationStrategy);
      goto LABEL_15;
    }
  }
LABEL_12:
  swift_retain();
  static Device.current.getter();
  if (one-time initialization token for current != -1)
    swift_once();
  v22 = static ContactService.current;
  type metadata accessor for ContactsLabelCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  v23 = CATWrapper.__allocating_init(options:globals:)();
  v28[0] = specialized ContactAttributeDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a3, (uint64_t)v28, v22, v23, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs>);
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs> and conformance ContactAttributeDisambiguationStrategy<A, B, C>, &demangling cache variable for type metadata for ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs>);
LABEL_15:
  v24 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  swift_release();
  v25 = v24(a1, a2);
  swift_release();
  return v25;
}

uint64_t closure #2 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[5];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v10);
  v11 = (void *)ParameterResolutionRecord.result.getter();
  v12 = INIntentResolutionResult.isUnsupportedRelationshipNotFound.getter();

  if (v12)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      MEMORY[0x2207D8768](v16, -1, -1);
    }

    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1)
      swift_once();
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v43[0] = v17;
    type metadata accessor for GetContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactAttributeUnsupportedValueStrategy);
    static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    swift_release();
    type metadata accessor for ContactsCommonCATs();
    static CATOption.defaultMode.getter();
    v18 = CATWrapper.__allocating_init(options:globals:)();
    static Device.current.getter();
    v19 = static ContactService.current;
    swift_retain();
    static CATOption.defaultMode.getter();
    v20 = CATWrapper.__allocating_init(options:globals:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
    v21 = swift_allocObject();
    v43[0] = specialized ContactsUnsetRelationshipFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v18, (uint64_t)v43, v19, v20, 0, v21);
    type metadata accessor for GetContactAttributeIntentResponse();
    lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type ContactsUnsetRelationshipFlowStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse> and conformance ContactsUnsetRelationshipFlowStrategy<A, B>, &demangling cache variable for type metadata for ContactsUnsetRelationshipFlowStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
    v22 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedFlowProducer<A, B>(unsupportedValueFlowProducer:unsetRelationshipStrategy:_:)();
    swift_release();
    swift_release();
    v23 = a1;
  }
  else
  {
    v40 = a3;
    v41 = a1;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.siriContacts);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v43[0] = v38;
      v39 = a2;
      *(_DWORD *)v27 = 136315138;
      v37[1] = v27 + 4;
      v28 = (void *)ParameterResolutionRecord.result.getter();
      v29 = objc_msgSend(v28, sel_unsupportedReason);

      LOBYTE(v42) = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v29);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
      v30 = String.init<A>(describing:)();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v43);
      a2 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl(&dword_21FE16000, v25, v26, "#FlowFactory GetContactAttribute unsupported reason is %s. Creating cancel producer to handle unsupported without needs value.", v27, 0xCu);
      v32 = v38;
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v32, -1, -1);
      MEMORY[0x2207D8768](v27, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    v33 = v41;
    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1)
      swift_once();
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v43[0] = v34;
    type metadata accessor for GetContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type GetContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for GetContactAttributeUnsupportedValueStrategy);
    v22 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    swift_release();
    v23 = v33;
  }
  v35 = v22(v23, a2);
  swift_release();
  return v35;
}

void FlowFactory.modifyContactAttributeFlowProducers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_57_10();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  v3 = OUTLINED_FUNCTION_13_32();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_15();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v5 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_88_3();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_92_6();
  v6 = v0 + *(int *)(v3 + 20);
  *(_QWORD *)v6 = "MakeModifyContactAttributeFlowProducers";
  *(_QWORD *)(v6 + 8) = 39;
  *(_BYTE *)(v6 + 16) = 2;
  type metadata accessor for ModifyContactAttributeIntent();
  type metadata accessor for ModifyContactAttributeIntentResponse();
  OUTLINED_FUNCTION_52_12();
  OUTLINED_FUNCTION_41_12();
  OUTLINED_FUNCTION_2_48();
  OUTLINED_FUNCTION_62_14();
  OUTLINED_FUNCTION_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RCHChildFlowProducersAsync<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  OUTLINED_FUNCTION_40_8();
  type metadata accessor for ModifyContactAttributeCATs();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_47_11();
  OUTLINED_FUNCTION_43_14(v1 + 64);
  outlined init with copy of ContactServiceProtocol(v1 + 16, (uint64_t)&v14);
  v7 = one-time initialization token for current;
  OUTLINED_FUNCTION_55_3();
  if (v7 != -1)
    swift_once();
  ObjC metadata update function for ContactsLabelCATs();
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_1_42();
  OUTLINED_FUNCTION_69_13();
  OUTLINED_FUNCTION_23_25(v8);
  type metadata accessor for ModifyContactAttributeNeedsValueStrategy();
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type ModifyContactAttributeNeedsValueStrategy and conformance ContactsNeedsValueStrategy<A, B, C>);
  OUTLINED_FUNCTION_59_12();
  OUTLINED_FUNCTION_11_24();
  OUTLINED_FUNCTION_21_20();
  RCHChildFlowProducersAsync.needsValueFlowProducer.setter();
  OUTLINED_FUNCTION_35_11();
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_1_42();
  OUTLINED_FUNCTION_83_7();
  specialized GCAContactsDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  v10 = OUTLINED_FUNCTION_23_25(v9);
  type metadata accessor for ModifyContactAttributeDisambiguationStrategy(v10);
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type ModifyContactAttributeDisambiguationStrategy and conformance ContactsDisambiguationStrategy<A, B>);
  static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_11_24();
  OUTLINED_FUNCTION_21_20();
  RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter();
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_89_4();
  OUTLINED_FUNCTION_35_11();
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_1_42();
  OUTLINED_FUNCTION_42_7();
  OUTLINED_FUNCTION_23_25(v11);
  type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type ModifyContactAttributeConfirmIntentStrategy and conformance ModifyContactAttributeConfirmIntentStrategy);
  static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)();
  OUTLINED_FUNCTION_11_24();
  OUTLINED_FUNCTION_21_20();
  RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter();
  OUTLINED_FUNCTION_35_11();
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_1_42();
  OUTLINED_FUNCTION_42_7();
  OUTLINED_FUNCTION_23_25(v12);
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy);
  static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)();
  OUTLINED_FUNCTION_11_24();
  OUTLINED_FUNCTION_21_20();
  RCHChildFlowProducersAsync.handleIntentFlowProducer.setter();
  OUTLINED_FUNCTION_35_11();
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_10_28();
  OUTLINED_FUNCTION_1_42();
  OUTLINED_FUNCTION_83_7();
  specialized GetContactHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  OUTLINED_FUNCTION_23_25(v13);
  type metadata accessor for ModifyContactAttributeContinueInAppFlowStrategy();
  OUTLINED_FUNCTION_27_20(&lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy);
  static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)();
  OUTLINED_FUNCTION_61_10();
  OUTLINED_FUNCTION_84_6();
  RCHChildFlowProducersAsync.continueInAppFlowProducer.setter();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_66();
  outlined destroy of Signpost.OpenSignpost(v0);
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in FlowFactory.modifyContactAttributeFlowProducers()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[5];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v10);
  v11 = (void *)ParameterResolutionRecord.result.getter();
  v12 = INIntentResolutionResult.isModifyContactAttributeNeedsValue.getter();

  if (v12)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_21FE16000, v14, v15, "#FlowFactory ModifyContactAttribute unsupported. Creating prompt producer to handle unsupported with needs value.", v16, 2u);
      MEMORY[0x2207D8768](v16, -1, -1);
    }

    swift_retain();
    static Device.current.getter();
    if (one-time initialization token for current != -1)
      swift_once();
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v40[0] = v17;
    type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ModifyContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy);
    v18 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)();
    swift_release();
    v19 = v18(a1, a2);
  }
  else
  {
    v37 = a3;
    v38 = a1;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v40[0] = v35;
      v36 = a2;
      *(_DWORD *)v23 = 136315138;
      v34[1] = v23 + 4;
      v24 = (void *)ParameterResolutionRecord.result.getter();
      v25 = objc_msgSend(v24, sel_unsupportedReason);

      LOBYTE(v39) = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v25);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
      v26 = String.init<A>(describing:)();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v40);
      a2 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      _os_log_impl(&dword_21FE16000, v21, v22, "#FlowFactory ModifyContactAttribute unsupported reason is %s. Creating cancel producer to handle unsupported without needs value.", v23, 0xCu);
      v28 = v35;
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v28, -1, -1);
      MEMORY[0x2207D8768](v23, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    swift_retain();
    static Device.current.getter();
    v29 = v38;
    if (one-time initialization token for current != -1)
      swift_once();
    type metadata accessor for ContactsLabelCATs();
    swift_retain();
    static CATOption.defaultMode.getter();
    CATWrapper.__allocating_init(options:globals:)();
    specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
    v40[0] = v30;
    type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ModifyContactAttributeUnsupportedValueStrategy and conformance ContactsUnsupportedValueStrategy<A, B, C>, (void (*)(uint64_t))type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy);
    v31 = (uint64_t (*)(uint64_t, uint64_t))static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)();
    swift_release();
    v19 = v31(v29, a2);
  }
  v32 = v19;
  swift_release();
  return v32;
}

BOOL closure #2 in FlowFactory.modifyContactAttributeFlowProducers()()
{
  char *v0;
  char *v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  v0 = (char *)IntentResolutionRecord.intentResponse.getter();
  v1 = &v0[OBJC_IVAR___ModifyContactAttributeIntentResponse_code];
  swift_beginAccess();
  v2 = *(_QWORD *)v1;

  return v2 == 1;
}

uint64_t FlowFactory.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(v0 + 64);
  __swift_destroy_boxed_opaque_existential_0(v0 + 104);
  return v0;
}

uint64_t FlowFactory.__deallocating_deinit()
{
  FlowFactory.deinit();
  return swift_deallocClassInstance();
}

void protocol witness for FlowProviding.deviceState.getter in conformance FlowFactory(uint64_t a1@<X8>)
{
  FlowFactory.deviceState.getter(a1);
}

uint64_t protocol witness for FlowProviding.commonCATs.getter in conformance FlowFactory()
{
  return FlowFactory.commonCATs.getter();
}

void protocol witness for FlowProviding.referenceResolver.getter in conformance FlowFactory(uint64_t a1@<X8>)
{
  FlowFactory.referenceResolver.getter(a1);
}

void protocol witness for FlowProviding.makeGetContactFlow(intent:) in conformance FlowFactory()
{
  FlowFactory.makeGetContactFlow(intent:)();
}

void protocol witness for FlowProviding.makeGetContactAttributeFlow(intent:) in conformance FlowFactory()
{
  FlowFactory.makeGetContactAttributeFlow(intent:)();
}

void protocol witness for FlowProviding.makeModifyContactAttributeFlow(intent:) in conformance FlowFactory()
{
  FlowFactory.makeModifyContactAttributeFlow(intent:)();
}

uint64_t protocol witness for FlowProviding.makeUnsupportedLearnPronunciationFlow() in conformance FlowFactory()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowProviding.makeUnsupportedLearnPronunciationFlow() in conformance FlowFactory;
  return FlowFactory.makeUnsupportedLearnPronunciationFlow()();
}

uint64_t protocol witness for FlowProviding.makeUnsupportedActionFlow() in conformance FlowFactory()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for FlowProviding.makeUnsupportedLearnPronunciationFlow() in conformance FlowFactory;
  return FlowFactory.makeUnsupportedActionFlow()();
}

uint64_t protocol witness for FlowProviding.makeAppPunchoutFlow() in conformance FlowFactory()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance ContactsFlowStrategy<A, B>;
  return FlowFactory.makeAppPunchoutFlow()();
}

uint64_t protocol witness for FlowProviding.makeGuardFlow(with:) in conformance FlowFactory()
{
  return FlowFactory.makeGuardFlow(with:)();
}

uint64_t partial apply for closure #1 in FlowFactory.makeAppPunchoutFlow()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in FlowFactory.makeAppPunchoutFlow();
  return closure #1 in FlowFactory.makeAppPunchoutFlow()(a1, v1);
}

uint64_t dispatch thunk of FlowProviding.deviceState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FlowProviding.commonCATs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FlowProviding.referenceResolver.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FlowProviding.makeGetContactFlow(intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FlowProviding.makeGetContactAttributeFlow(intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of FlowProviding.makeModifyContactAttributeFlow(intent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_20_19(v1, (uint64_t)dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow());
  return OUTLINED_FUNCTION_6_29(v2, v3, v4);
}

uint64_t dispatch thunk of FlowProviding.makeUnsupportedActionFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_20_19(v1, (uint64_t)dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow());
  return OUTLINED_FUNCTION_6_29(v2, v3, v4);
}

uint64_t dispatch thunk of FlowProviding.makeAppPunchoutFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_20_19(v1, (uint64_t)dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow());
  return OUTLINED_FUNCTION_6_29(v2, v3, v4);
}

uint64_t dispatch thunk of FlowProviding.makeGuardFlow(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t type metadata accessor for FlowFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for FlowFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FlowFactory.__allocating_init(referenceResolver:deviceState:commonCATs:sirikitEventSender:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of FlowFactory.makeGetContactFlow(intent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of FlowFactory.makeGetContactAttributeFlow(intent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of FlowFactory.makeModifyContactAttributeFlow(intent:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of FlowFactory.makeUnsupportedLearnPronunciationFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_13(v1, (uint64_t)dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow(), v4);
  return OUTLINED_FUNCTION_3_2(v2);
}

uint64_t dispatch thunk of FlowFactory.makeUnsupportedActionFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_13(v1, (uint64_t)dispatch thunk of FlowProviding.makeUnsupportedLearnPronunciationFlow(), v4);
  return OUTLINED_FUNCTION_3_2(v2);
}

uint64_t dispatch thunk of FlowFactory.makeAppPunchoutFlow()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_56_13(v1, (uint64_t)dispatch thunk of ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:), v4);
  return OUTLINED_FUNCTION_3_2(v2);
}

uint64_t dispatch thunk of FlowFactory.makeGuardFlow(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t sub_21FEA3B94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_87_0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FlowFactory.getUnsupportedFlow(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(OUTLINED_FUNCTION_87_0() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1 + v5;
  v7 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return closure #1 in FlowFactory.getUnsupportedFlow(for:)(a1, v6, v7);
}

uint64_t specialized ContactsUnsetRelationshipFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];
  uint64_t v18;
  _BYTE v19[40];
  _BYTE v20[24];
  ValueMetadata *v21;
  _UNKNOWN **v22;

  v12 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v12);
  v21 = &type metadata for SiriContactsFeatureFlagProvider;
  v22 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for ModifyContactAttributeCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  *(_QWORD *)(a6 + 176) = CATWrapper.__allocating_init(options:globals:)();
  swift_release();
  outlined init with copy of ContactServiceProtocol(a2, (uint64_t)v19);
  outlined init with copy of ContactServiceProtocol((uint64_t)v20, (uint64_t)v17);
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
  MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(void))(v14 + 16))();
  swift_retain();
  v15 = specialized ContactsDisambiguationStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v19, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);
  return v15;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[40];
  _BYTE v18[24];
  uint64_t v19;
  _BYTE v20[40];
  _BYTE v21[24];
  ValueMetadata *v22;
  _UNKNOWN **v23;

  v12 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v12);
  v22 = &type metadata for SiriContactsFeatureFlagProvider;
  v23 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for ModifyContactAttributeCATs();
  swift_retain();
  static CATOption.defaultMode.getter();
  *(_QWORD *)(a6 + 176) = CATWrapper.__allocating_init(options:globals:)();
  swift_release();
  outlined init with copy of ContactServiceProtocol(a2, (uint64_t)v20);
  outlined init with copy of ContactServiceProtocol((uint64_t)v21, (uint64_t)v18);
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
  MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(void))(v14 + 16))();
  *(_BYTE *)(a6 + 168) = 1;
  outlined init with copy of ContactServiceProtocol((uint64_t)v20, (uint64_t)v17);
  swift_retain();
  v15 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v17, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);
  return v15;
}

uint64_t specialized ContactsDisambiguationStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[40];
  _BYTE v19[24];
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v20 = &type metadata for SiriContactsFeatureFlagProvider;
  v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(_BYTE *)(a6 + 168) = 1;
  outlined init with copy of ContactServiceProtocol(a2, (uint64_t)v18);
  outlined init with copy of ContactServiceProtocol((uint64_t)v19, (uint64_t)v16);
  v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(void))(v13 + 16))();
  swift_retain();
  v14 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v18, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);
  return v14;
}

uint64_t specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v13;
  ValueMetadata *v14;
  _UNKNOWN **v15;
  _QWORD v16[5];

  v16[4] = &protocol witness table for ContactService;
  v16[3] = type metadata accessor for ContactService();
  v15 = &protocol witness table for SiriContactsFeatureFlagProvider;
  v16[0] = a3;
  v14 = &type metadata for SiriContactsFeatureFlagProvider;
  *(_BYTE *)(a6 + 113) = 0;
  *(_QWORD *)(a6 + 96) = a1;
  outlined init with copy of ContactServiceProtocol(a2, a6 + 16);
  outlined init with copy of ContactServiceProtocol((uint64_t)v16, a6 + 56);
  *(_QWORD *)(a6 + 104) = a4;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a6 + 16), *(_QWORD *)(a6 + 40));
  OUTLINED_FUNCTION_55_3();
  OUTLINED_FUNCTION_23_8();
  LOBYTE(a3) = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_66();
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_0(a2);
  *(_BYTE *)(a6 + 112) = a3 & 1;
  *(_QWORD *)(a6 + 120) = a5;
  outlined init with take of FlowProviding(&v13, a6 + 128);
  return a6;
}

uint64_t specialized ContactAttributeDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[40];
  _BYTE v19[24];
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v20 = &type metadata for SiriContactsFeatureFlagProvider;
  v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for ReferenceResolutionClient();
  ReferenceResolutionClient.__allocating_init()();
  outlined init with copy of ContactServiceProtocol(a2, (uint64_t)v18);
  outlined init with copy of ContactServiceProtocol((uint64_t)v19, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttributeDisambiguationStrategy<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeCATs>);
  v10 = swift_allocObject();
  v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(void))(v12 + 16))();
  swift_retain();
  v13 = swift_retain();
  v14 = specialized ContactAttributeDisambiguationStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v13, a1, (uint64_t)v18, a3, a4, a5, v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);
  return v14;
}

uint64_t specialized ContactAttributeDisambiguationStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[24];
  uint64_t v20;
  _BYTE v21[40];
  _BYTE v22[24];
  ValueMetadata *v23;
  _UNKNOWN **v24;
  _QWORD v25[5];

  v14 = type metadata accessor for ReferenceResolutionClient();
  v25[4] = MEMORY[0x24BEA54A0];
  v25[3] = v14;
  v25[0] = a1;
  v23 = &type metadata for SiriContactsFeatureFlagProvider;
  v24 = &protocol witness table for SiriContactsFeatureFlagProvider;
  outlined init with copy of ContactServiceProtocol((uint64_t)v25, a7 + 168);
  outlined init with copy of ContactServiceProtocol(a3, (uint64_t)v21);
  outlined init with copy of ContactServiceProtocol((uint64_t)v22, (uint64_t)v19);
  v15 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v20);
  MEMORY[0x24BDAC7A8](v15);
  (*(void (**)(void))(v16 + 16))();
  swift_retain();
  v17 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a2, (uint64_t)v21, a4, a5, a6, a7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v25);
  return v17;
}

void specialized GetContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  uint64_t v0;
  void (*v1)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v2)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  _BYTE v15[40];
  _QWORD v16[5];

  OUTLINED_FUNCTION_77_7();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v16[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v16[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  OUTLINED_FUNCTION_65_11(v11, v9, v7, v5, v3, v13);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_63_10();
  OUTLINED_FUNCTION_46_13();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_8_24();
  outlined init with copy of ContactServiceProtocol(v10, (uint64_t)v15);
  v2(v12, v15, v8, v6, v4, v0);
  __swift_destroy_boxed_opaque_existential_0(v10);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  OUTLINED_FUNCTION_77_8();
  OUTLINED_FUNCTION_18_15();
}

uint64_t specialized GetContactDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[40];
  _BYTE v16[24];
  ValueMetadata *v17;
  _UNKNOWN **v18;

  v17 = &type metadata for SiriContactsFeatureFlagProvider;
  v18 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for GetContactDisambiguationStrategy(0);
  v10 = swift_allocObject();
  v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  MEMORY[0x24BDAC7A8](v11);
  (*(void (**)(void))(v12 + 16))();
  outlined init with copy of ContactServiceProtocol(a2, (uint64_t)v15);
  v13 = specialized ContactsDisambiguationStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v15, a3, a4, a5, v10);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  return v13;
}

uint64_t specialized GetContactHandleIntentStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  uint64_t v17;
  __int128 v18[2];
  _BYTE v19[24];
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v20 = &type metadata for SiriContactsFeatureFlagProvider;
  v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(_QWORD *)(a6 + 192) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(a6 + 200) = &protocol witness table for InstalledAppsProvider;
  swift_retain();
  static SiriKitEventSender.current.getter();
  outlined init with take of FlowProviding(v18, a6 + 208);
  swift_release();
  outlined init with copy of ContactServiceProtocol(a2, (uint64_t)v18);
  outlined init with copy of ContactServiceProtocol((uint64_t)v19, (uint64_t)v16);
  v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(void))(v13 + 16))();
  swift_retain();
  v14 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v18, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);
  return v14;
}

uint64_t specialized GetContactAttributeNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[40];
  _BYTE v18[40];
  _BYTE v19[24];
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v20 = &type metadata for SiriContactsFeatureFlagProvider;
  v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  type metadata accessor for GetContactAttributeNeedsValueStrategy();
  v12 = swift_allocObject();
  v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(void))(v14 + 16))();
  outlined init with copy of ContactServiceProtocol(a1, (uint64_t)v18);
  outlined init with copy of ContactServiceProtocol(a3, (uint64_t)v17);
  v15 = specialized ContactsNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)((uint64_t)v18, a2, (uint64_t)v17, a4, a5, a6, v12);
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  return v15;
}

uint64_t specialized ContactsNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  uint64_t v19;
  _BYTE v20[40];
  _BYTE v21[24];
  ValueMetadata *v22;
  _UNKNOWN **v23;

  v22 = &type metadata for SiriContactsFeatureFlagProvider;
  v23 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(_BYTE *)(a7 + 168) = 1;
  outlined init with copy of ContactServiceProtocol(a1, a7 + 176);
  outlined init with copy of ContactServiceProtocol(a3, (uint64_t)v20);
  outlined init with copy of ContactServiceProtocol((uint64_t)v21, (uint64_t)v18);
  v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v18, v19);
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(void))(v15 + 16))();
  swift_retain();
  v16 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a2, (uint64_t)v20, a4, a5, a6, a7);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a3);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v16;
}

void specialized GetContactNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  uint64_t v0;
  void (*v1)(_QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[5];

  OUTLINED_FUNCTION_77_7();
  v9[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v9[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  v1(0);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_63_10();
  OUTLINED_FUNCTION_46_13();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_8_24();
  OUTLINED_FUNCTION_93_7();
  specialized GetContactNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v3, v4, v5, v6, v7, v8, v0);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v9);
  OUTLINED_FUNCTION_77_8();
  OUTLINED_FUNCTION_18_15();
}

void specialized GCAContactsDisambiguationStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  _BYTE v13[40];
  _BYTE v14[40];
  _QWORD v15[5];

  OUTLINED_FUNCTION_77_7();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v15[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v15[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  OUTLINED_FUNCTION_65_11(v9, v7, v5, v3, v1, v11);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_64_10();
  OUTLINED_FUNCTION_94_6();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_30_19();
  OUTLINED_FUNCTION_75_10();
  *(_BYTE *)(v0 + 168) = 1;
  outlined init with copy of ContactServiceProtocol((uint64_t)v14, (uint64_t)v13);
  specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v10, (uint64_t)v13, v6, v4, v2, v0);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_0(v8);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  OUTLINED_FUNCTION_18_15();
}

uint64_t partial apply for closure #1 in FlowFactory.modifyContactAttributeFlowProducers()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in FlowFactory.modifyContactAttributeFlowProducers()(a1, a2, v2);
}

void specialized ModifyContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  _QWORD v7[5];

  OUTLINED_FUNCTION_77_7();
  v7[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v7[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  OUTLINED_FUNCTION_65_11(v0, v1, v2, v3, v4, v5);
  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_64_10();
  OUTLINED_FUNCTION_94_6();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_30_19();
  specialized ContactsUnsupportedValueStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v7);
  OUTLINED_FUNCTION_77_8();
  OUTLINED_FUNCTION_18_15();
}

void specialized GetContactHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];

  OUTLINED_FUNCTION_77_7();
  v6 = v5;
  OUTLINED_FUNCTION_68_14();
  v16[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v16[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  OUTLINED_FUNCTION_65_11(v7, v8, v9, v10, v11, v12);
  v13 = OUTLINED_FUNCTION_13_3();
  v14 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, (uint64_t)&type metadata for SiriContactsFeatureFlagProvider);
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(void))(v15 + 16))();
  v6(v4, v3, v2, v1, v0, v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  OUTLINED_FUNCTION_77_8();
  OUTLINED_FUNCTION_18_15();
}

uint64_t specialized ModifyContactAttributeContinueInAppFlowStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  uint64_t v17;
  _BYTE v18[40];
  _BYTE v19[24];
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v20 = &type metadata for SiriContactsFeatureFlagProvider;
  v21 = &protocol witness table for SiriContactsFeatureFlagProvider;
  *(_QWORD *)(a6 + 192) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(a6 + 200) = &protocol witness table for InstalledAppsProvider;
  outlined init with copy of ContactServiceProtocol(a2, (uint64_t)v18);
  outlined init with copy of ContactServiceProtocol((uint64_t)v19, (uint64_t)v16);
  v12 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v16, v17);
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(void))(v13 + 16))();
  swift_retain();
  v14 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(a1, (uint64_t)v18, a3, a4, a5, a6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v19);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a2);
  return v14;
}

void specialized ContactsUnsupportedValueStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[5];
  uint64_t v14;
  _QWORD v15[5];

  OUTLINED_FUNCTION_77_7();
  v1 = v0;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v15[3] = &type metadata for SiriContactsFeatureFlagProvider;
  v15[4] = &protocol witness table for SiriContactsFeatureFlagProvider;
  OUTLINED_FUNCTION_75_10();
  outlined init with copy of ContactServiceProtocol((uint64_t)v15, (uint64_t)v13);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v13[3]);
  OUTLINED_FUNCTION_46_13();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_8_24();
  OUTLINED_FUNCTION_44();
  specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v11, (uint64_t)&v14, v7, v5, v3, v1);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
  OUTLINED_FUNCTION_2();
  __swift_destroy_boxed_opaque_existential_0(v9);
  OUTLINED_FUNCTION_18_15();
}

uint64_t specialized GetContactNeedsValueStrategy.init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[40];
  _BYTE v20[40];
  _BYTE v21[40];

  OUTLINED_FUNCTION_68_14();
  outlined init with copy of ContactServiceProtocol(v10, (uint64_t)v21);
  outlined init with copy of ContactServiceProtocol(v7, (uint64_t)v20);
  *(_BYTE *)(a7 + 168) = 1;
  outlined init with copy of ContactServiceProtocol((uint64_t)v21, a7 + 176);
  outlined init with copy of ContactServiceProtocol((uint64_t)v20, (uint64_t)v19);
  OUTLINED_FUNCTION_93_7();
  v17 = specialized ContactsStrategy.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(v11, v12, v13, v14, v15, v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v21);
  __swift_destroy_boxed_opaque_existential_0(v7);
  __swift_destroy_boxed_opaque_existential_0(v8);
  return v17;
}

uint64_t partial apply for closure #1 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in FlowFactory.getContactAttributeFlowProducers()(a1, a2, v2);
}

uint64_t partial apply for closure #2 in FlowFactory.getContactAttributeFlowProducers()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #2 in FlowFactory.getContactAttributeFlowProducers()(a1, a2, v2);
}

uint64_t sub_21FEA4F24()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FlowFactory.getContactFlowProducers()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in FlowFactory.getContactFlowProducers()(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_21FEA4F58()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in FlowFactory.getContactFlowProducers()()
{
  return closure #1 in closure #1 in FlowFactory.getContactFlowProducers()();
}

uint64_t OUTLINED_FUNCTION_1_42()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_2_48()
{
  return App.__allocating_init(appIdentifier:)();
}

uint64_t OUTLINED_FUNCTION_8_24()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void OUTLINED_FUNCTION_9_27()
{
  uint64_t v0;
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(v0 + 64, v1 - 120);
}

uint64_t OUTLINED_FUNCTION_10_28()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_11_24()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_13_32()
{
  return type metadata accessor for Signpost.OpenSignpost();
}

uint64_t OUTLINED_FUNCTION_15_20()
{
  return RCHFlowFactory.init(strategy:childFlowFactory:)();
}

uint64_t OUTLINED_FUNCTION_21_20()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_22_18()
{
  return RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)();
}

uint64_t OUTLINED_FUNCTION_23_25(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_26_22()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_27_20(_QWORD *a1)
{
  void (*v1)(uint64_t);

  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(a1, v1);
}

uint64_t OUTLINED_FUNCTION_28_16(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = outlined init with take of FlowProviding((__int128 *)(v1 - 120), a1 + 16);
  *(_QWORD *)(v1 - 120) = a1;
  return result;
}

uint64_t OUTLINED_FUNCTION_30_19()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t OUTLINED_FUNCTION_34_13(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 - 8);
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_35_11()
{
  uint64_t v0;
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(v0, v1 - 120);
}

uint64_t OUTLINED_FUNCTION_38_13()
{
  return Flow.eraseToAnyFlow()();
}

uint64_t OUTLINED_FUNCTION_40_8()
{
  return RCHChildFlowProducersAsync.appResolutionFlowProducer.setter();
}

uint64_t OUTLINED_FUNCTION_41_12()
{
  return type metadata accessor for App();
}

void OUTLINED_FUNCTION_42_7()
{
  specialized ModifyContactAttributeHandleIntentStrategy.__allocating_init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
}

void OUTLINED_FUNCTION_43_14(uint64_t a1)
{
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(a1, v1 - 120);
}

uint64_t OUTLINED_FUNCTION_47_11()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_48_11()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(v0, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_50_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_51_12()
{
  return RCHChildFlowFactory.init(producers:)();
}

uint64_t OUTLINED_FUNCTION_52_12()
{
  return RCHChildFlowProducersAsync.init()();
}

uint64_t OUTLINED_FUNCTION_54_12()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_56_13@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, uint64_t a3)
{
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return a3;
}

uint64_t OUTLINED_FUNCTION_57_10()
{
  return type metadata accessor for CATOption();
}

uint64_t OUTLINED_FUNCTION_58_10()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_59_12()
{
  return static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)();
}

uint64_t OUTLINED_FUNCTION_61_10()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_62_14()
{
  return static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)();
}

uint64_t OUTLINED_FUNCTION_63_10()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_mutable_project_boxed_opaque_existential_1(v1 - 104, v0);
}

uint64_t OUTLINED_FUNCTION_64_10()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_mutable_project_boxed_opaque_existential_1(v1 - 104, v0);
}

uint64_t OUTLINED_FUNCTION_65_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  return a6(0);
}

void OUTLINED_FUNCTION_69_13()
{
  specialized GetContactNeedsValueStrategy.__allocating_init(referenceResolver:catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)();
}

BOOL OUTLINED_FUNCTION_73_10(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_75_10()
{
  uint64_t v0;
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(v0, v1 - 144);
}

uint64_t OUTLINED_FUNCTION_77_8()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_79_5(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](a1, v1);
}

void OUTLINED_FUNCTION_80_7(_QWORD *a1)
{
  void (*v1)(uint64_t);

  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(a1, v1);
}

uint64_t OUTLINED_FUNCTION_84_6()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_85_9()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_87_7()
{
  return static Device.current.getter();
}

uint64_t OUTLINED_FUNCTION_88_3()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_89_4()
{
  return RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter();
}

void OUTLINED_FUNCTION_91_7()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_92_6()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t GetContactDirectInvocationsModel.init(contact:)@<X0>(id a1@<X0>, unint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  _BYTE *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  id v35;
  uint64_t v36;
  char **p_attr;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v50;
  char v51;
  uint64_t v52;
  _BOOL8 v53;
  Swift::Int v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  id v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  void *v77;
  void *v78;
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  char v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  _BOOL8 v89;
  Swift::Int v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  char v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  id v105;
  void *v106;
  void *v107;
  id v108;
  uint64_t result;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  id v118;
  id v119;
  _QWORD *v120;
  _QWORD *v121;
  _BYTE v122[24];
  ValueMetadata *v123;
  _UNKNOWN **v124;

  v123 = &type metadata for InstalledAppsProvider;
  v124 = &protocol witness table for InstalledAppsProvider;
  v118 = a1;
  v3 = objc_msgSend(a1, sel_emailAddresses);
  v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((unint64_t)v4 >> 62)
    goto LABEL_59;
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v111 = a2;
    if (!v5)
    {
      v7 = (_QWORD *)MEMORY[0x24BEE4B00];
      goto LABEL_14;
    }
    if (v5 < 1)
      break;
    v6 = 0;
    v117 = (void *)(v4 & 0xC000000000000001);
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    v120 = (_QWORD *)MEMORY[0x24BEE4B00];
    v8 = v4;
    do
    {
      if (v117)
        v9 = (id)MEMORY[0x2207D80C0](v6, v4);
      else
        v9 = *(id *)(v4 + 8 * v6 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_value, v110, v111);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      v12 = v122;
      AppUtil.buildPunchoutFor(emailAddress:)();
      v14 = v13;
      v15 = OUTLINED_FUNCTION_18_0();
      if (v14)
      {
        v16 = OUTLINED_FUNCTION_47_3(v15, sel_identifier);
        v17 = OUTLINED_FUNCTION_4_6();
        v19 = v18;

        v20 = v14;
        swift_isUniquelyReferenced_nonNull_native();
        v121 = v120;
        v12 = &v121;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v20, v17, v19);
        v120 = v121;

        OUTLINED_FUNCTION_18_0();
        v15 = OUTLINED_FUNCTION_59_1();
      }
      ++v6;
      v21 = OUTLINED_FUNCTION_47_3(v15, sel_identifier);
      v22 = OUTLINED_FUNCTION_4_6();
      v3 = v23;

      v25 = OUTLINED_FUNCTION_47_3(v24, sel_value);
      OUTLINED_FUNCTION_4_6();

      static AppUtil.buildMessagesPunchoutFor(handleString:)();
      v27 = v26;
      swift_bridgeObjectRelease();
      swift_isUniquelyReferenced_nonNull_native();
      v121 = v7;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v27, v22, (uint64_t)v3);
      v7 = v121;

      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_59_1();
      v4 = v8;
    }
    while (v5 != v6);
LABEL_14:
    v28 = swift_bridgeObjectRelease();
    v35 = OUTLINED_FUNCTION_6_36(v28, sel_phoneNumbers, v29, v30, v31, v32, v33, v34, v110, v111, v114, v115, v116, (uint64_t)v117, v118);
    a2 = OUTLINED_FUNCTION_105();

    if (a2 >> 62)
    {
      swift_bridgeObjectRetain();
      v36 = OUTLINED_FUNCTION_94();
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    p_attr = &stru_24E5C6FF8.attr;
    if (v36)
    {
      if (v36 < 1)
        goto LABEL_66;
      v38 = 0;
      v116 = a2;
      v117 = (void *)(a2 & 0xC000000000000001);
      v115 = v36;
      while (1)
      {
        v39 = v117 ? (id)MEMORY[0x2207D80C0](v38, a2) : *(id *)(a2 + 8 * v38 + 32);
        v4 = (uint64_t)v39;
        v40 = objc_msgSend(v39, sel_value);
        v41 = objc_msgSend(v40, sel_stringValue);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        static AppUtil.buildMessagesPunchoutFor(handleString:)();
        v43 = v42;
        v44 = OUTLINED_FUNCTION_167();
        v45 = OUTLINED_FUNCTION_47_3(v44, sel_identifier);
        v46 = OUTLINED_FUNCTION_4_6();
        v48 = v47;

        v36 = v43;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v121 = v7;
        a2 = (unint64_t)v7;
        v50 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
        v52 = v7[2];
        v53 = (v51 & 1) == 0;
        v54 = v52 + v53;
        if (__OFADD__(v52, v53))
          break;
        v55 = v50;
        v56 = v51;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SAUIAppPunchOut>);
        a2 = (unint64_t)&v121;
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v54))
        {
          a2 = (unint64_t)v121;
          v57 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v48);
          if ((v56 & 1) != (v58 & 1))
            goto LABEL_67;
          v55 = v57;
        }
        v7 = v121;
        if ((v56 & 1) != 0)
        {
          v59 = v121[7];

          *(_QWORD *)(v59 + 8 * v55) = v36;
        }
        else
        {
          OUTLINED_FUNCTION_4_34((uint64_t)&v121[v55 >> 6]);
          v60 = (uint64_t *)(v7[6] + 16 * v55);
          *v60 = v46;
          v60[1] = v48;
          *(_QWORD *)(v7[7] + 8 * v55) = v36;
          v61 = v7[2];
          v62 = __OFADD__(v61, 1);
          v63 = v61 + 1;
          if (v62)
            goto LABEL_57;
          v7[2] = v63;
          swift_bridgeObjectRetain();
        }
        ++v38;

        OUTLINED_FUNCTION_18_0();
        OUTLINED_FUNCTION_59_1();
        a2 = v116;
        p_attr = &stru_24E5C6FF8.attr;
        if (v115 == v38)
          goto LABEL_31;
      }
      __break(1u);
    }
    else
    {
LABEL_31:
      v64 = swift_bridgeObjectRelease();
      v71 = OUTLINED_FUNCTION_6_36(v64, sel_postalAddresses, v65, v66, v67, v68, v69, v70, v110, v112, v114, v115, v116, (uint64_t)v117, v118);
      v72 = OUTLINED_FUNCTION_105();

      if (v72 >> 62)
      {
        swift_bridgeObjectRetain();
        v73 = OUTLINED_FUNCTION_94();
        OUTLINED_FUNCTION_167();
      }
      else
      {
        v73 = *(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v110 = (uint64_t)v7;
      if (!v73)
      {
LABEL_51:
        v98 = OUTLINED_FUNCTION_167();
        v105 = OUTLINED_FUNCTION_6_36(v98, p_attr[184], v99, v100, v101, v102, v103, v104, v110, v113, v114, v115, v116, (uint64_t)v117, v118);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        AppUtil.buildPunchoutFor(contactIdentifier:)();
        v107 = v106;
        OUTLINED_FUNCTION_167();
        if (v107)
        {
          type metadata accessor for SAUIAppPunchOut();
          v108 = v107;
          SAClientBoundCommand.data.getter();

        }
        GetContactDirectInvocationsModel.init(contactCardPunchout:sendEmailPunchouts:sendMessagePunchouts:navigationPunchouts:)();

        return outlined destroy of AppUtil((uint64_t)v122);
      }
      v116 = v72 & 0xC000000000000001;
      v74 = (_QWORD *)MEMORY[0x24BEE4B00];
      v75 = 4;
      v114 = v73;
      v115 = v72;
      while (1)
      {
        v76 = v116 ? (id)MEMORY[0x2207D80C0](v75 - 4, v72) : *(id *)(v72 + 8 * v75);
        v77 = v76;
        v4 = v75 - 3;
        if (__OFADD__(v75 - 4, 1))
          break;
        a2 = (unint64_t)v122;
        AppUtil.buildPunchoutFor(labeledAddress:contact:)();
        if (v78)
        {
          v79 = v78;
          v117 = v77;
          v80 = objc_msgSend(v77, p_attr[184], v110);
          v81 = OUTLINED_FUNCTION_4_6();
          v83 = v82;

          v84 = v79;
          v85 = swift_isUniquelyReferenced_nonNull_native();
          v121 = v74;
          a2 = (unint64_t)v74;
          v86 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v83);
          v88 = v74[2];
          v89 = (v87 & 1) == 0;
          v90 = v88 + v89;
          if (__OFADD__(v88, v89))
            goto LABEL_56;
          v91 = v86;
          v92 = v87;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SAUIAppPunchOut>);
          a2 = (unint64_t)&v121;
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v85, v90))
          {
            a2 = (unint64_t)v121;
            v93 = specialized __RawDictionaryStorage.find<A>(_:)(v81, v83);
            if ((v92 & 1) != (v94 & 1))
              goto LABEL_67;
            v91 = v93;
          }
          v74 = v121;
          if ((v92 & 1) != 0)
          {
            a2 = v121[7];

            *(_QWORD *)(a2 + 8 * v91) = v84;
          }
          else
          {
            OUTLINED_FUNCTION_4_34((uint64_t)&v121[v91 >> 6]);
            v95 = (uint64_t *)(v74[6] + 16 * v91);
            *v95 = v81;
            v95[1] = v83;
            *(_QWORD *)(v74[7] + 8 * v91) = v84;
            v96 = v74[2];
            v62 = __OFADD__(v96, 1);
            v97 = v96 + 1;
            if (v62)
              goto LABEL_58;
            v74[2] = v97;
            swift_bridgeObjectRetain();
          }

          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_59_1();
          p_attr = (char **)(&stru_24E5C6FF8 + 8);
          v73 = v114;
          v72 = v115;
        }
        else
        {

        }
        ++v75;
        if (v4 == v73)
          goto LABEL_51;
      }
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    if (v4 < 0)
      v3 = (id)v4;
    else
      v3 = (id)(v4 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    v5 = OUTLINED_FUNCTION_94();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t type metadata accessor for SAUIAppPunchOut()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAUIAppPunchOut;
  if (!lazy cache variable for type metadata for SAUIAppPunchOut)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
  }
  return result;
}

void OUTLINED_FUNCTION_4_34(uint64_t a1@<X8>)
{
  char v1;

  *(_QWORD *)(a1 + 64) |= 1 << v1;
}

id OUTLINED_FUNCTION_6_36(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  return objc_msgSend(a15, a2);
}

void destroy for CompactViews(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);

}

uint64_t initializeWithCopy for CompactViews(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  void *v8;
  id v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  v8 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  v9 = v8;
  return a1;
}

_QWORD *assignWithCopy for CompactViews(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  v4 = (void *)a1[6];
  v5 = (void *)a2[6];
  a1[6] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for CompactViews(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(void **)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for CompactViews(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CompactViews(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CompactViews()
{
  return &type metadata for CompactViews;
}

void CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_32();
  v1 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v3 = v0 + *(int *)(v1 + 20);
  *(_QWORD *)v3 = "BuildGetAttributeSnippetIOS";
  *(_QWORD *)(v3 + 8) = 27;
  *(_BYTE *)(v3 + 16) = 2;
  CompactViews.buildCardSections(handles:contact:contactAttribute:localeString:)();
  OUTLINED_FUNCTION_28_17();
  if (v5)
  {
    OUTLINED_FUNCTION_23_9();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    v4 = OUTLINED_FUNCTION_167();
    if (v6)
      goto LABEL_5;
LABEL_7:
    OUTLINED_FUNCTION_167();
    OUTLINED_FUNCTION_55_1();
    goto LABEL_8;
  }
  if (!MEMORY[0x10])
    goto LABEL_7;
LABEL_5:
  OUTLINED_FUNCTION_33_3(v4, &lazy cache variable for type metadata for SACardSnippet);
  AppUtil.sashBundleId.getter();
  static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
  OUTLINED_FUNCTION_167();
  OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_18_0();
LABEL_8:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_1_29();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall CompactViews.buildCompactForgetRelationshipView(relatedContactName:meCardName:meCardContactID:)(Swift::String_optional relatedContactName, Swift::String meCardName, Swift::String meCardContactID)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  Swift::tuple_OpaquePointer_OpaquePointer result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_32();
  v32 = v4;
  v33 = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_55_0();
  v9 = v8 - v7;
  v10 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v12 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v13 = v3 + *(int *)(v10 + 20);
  *(_QWORD *)v13 = "BuildForgetRelationshipViewIOS";
  *(_QWORD *)(v13 + 8) = 30;
  *(_BYTE *)(v13 + 16) = 2;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (v14)
  {
    v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v16 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v16 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v16 + 32) = v15;
    OUTLINED_FUNCTION_8_25();
    v17 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v17 + 16) = xmmword_21FED8AB0;
    v18 = v15;
    *(_QWORD *)(v17 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    OUTLINED_FUNCTION_8_25();
    v31 = v17;

  }
  else
  {
    v31 = MEMORY[0x24BEE4AF8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v19 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v19 + 16) = xmmword_21FED8AB0;
  OUTLINED_FUNCTION_33_3(v19, &lazy cache variable for type metadata for SFRichText);
  OUTLINED_FUNCTION_25_16();
  v20 = @nonobjc SFRichText.__allocating_init(string:)(v32, v33);
  v21 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v21 + 16) = xmmword_21FED8AB0;
  OUTLINED_FUNCTION_25_16();
  OUTLINED_FUNCTION_25_25();
  *(_QWORD *)(v21 + 32) = SFRichText.init(string:bold:color:)(v22, v23, v24, v25);
  OUTLINED_FUNCTION_8_25();
  ContactsLabelCATs.relationshipRemoved()();
  Result<>.firstPrint.getter();
  OUTLINED_FUNCTION_101_2();
  v26 = outlined destroy of UsoEntity_common_Person.DefinedValues?(v9, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v21)
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_101_2();
  }
  OUTLINED_FUNCTION_33_3(v26, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  v27 = @nonobjc SFRichText.__allocating_init(string:)(v9, v21);
  *(_QWORD *)(v19 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v20, v21, v31, 0, v27, 0, 0);
  OUTLINED_FUNCTION_8_25();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
  result._1._rawValue = v29;
  result._0._rawValue = v28;
  return result;
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall CompactViews.buildCompactSetRelationshipView(relatedContactName:meCardName:relationship:meCardContactID:)(Swift::String_optional relatedContactName, Swift::String meCardName, Swift::String_optional relationship, Swift::String meCardContactID)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  void *v36;
  Swift::tuple_OpaquePointer_OpaquePointer result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_32();
  v39 = v5;
  v40 = v6;
  v41 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_9_5();
  v42 = v13;
  v14 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v16 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v17 = v4 + *(int *)(v14 + 20);
  *(_QWORD *)v17 = "BuildSetRelationshipViewIOS";
  *(_QWORD *)(v17 + 8) = 27;
  *(_BYTE *)(v17 + 16) = 2;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (v18)
  {
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v20 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v20 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v20 + 32) = v19;
    OUTLINED_FUNCTION_8_25();
    v21 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v21 + 16) = xmmword_21FED8AB0;
    v22 = v19;
    *(_QWORD *)(v21 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    OUTLINED_FUNCTION_8_25();
    v38 = v21;

  }
  else
  {
    v38 = MEMORY[0x24BEE4AF8];
  }
  if (!v39)
    static String.EMPTY.getter();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  v23 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v11, 0, 1, v23);
  ContactsLabelCATs.relationship(relationship:)(v11);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v11, &demangling cache variable for type metadata for SpeakableString?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v24 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v24 + 16) = xmmword_21FED8AB0;
  v25 = OUTLINED_FUNCTION_33_3(v24, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  OUTLINED_FUNCTION_33_3(v25, &lazy cache variable for type metadata for SFRichText);
  OUTLINED_FUNCTION_25_16();
  v26 = @nonobjc SFRichText.__allocating_init(string:)(v40, v41);
  v27 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v27 + 16) = xmmword_21FED8AB0;
  OUTLINED_FUNCTION_25_16();
  OUTLINED_FUNCTION_25_25();
  *(_QWORD *)(v27 + 32) = SFRichText.init(string:bold:color:)(v28, v29, v30, v31);
  OUTLINED_FUNCTION_8_25();
  v32 = Result<>.firstPrint.getter();
  v34 = @nonobjc SFRichText.__allocating_init(string:)(v32, v33);
  *(_QWORD *)(v24 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v26, v27, v38, 0, v34, 0, 0);
  OUTLINED_FUNCTION_8_25();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v42, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
  result._1._rawValue = v36;
  result._0._rawValue = v35;
  return result;
}

Swift::tuple_OpaquePointer_OpaquePointer __swiftcall CompactViews.buildCompactSetNickNameView(newNickName:meCardName:meCardContactID:)(Swift::String newNickName, Swift::String meCardName, Swift::String meCardContactID)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  Swift::tuple_OpaquePointer_OpaquePointer result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  OUTLINED_FUNCTION_32();
  v5 = v4;
  v7 = v6;
  v41 = v8;
  v42 = v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_9_5();
  v43 = v11;
  v12 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v14 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v15 = v3 + *(int *)(v12 + 20);
  *(_QWORD *)v15 = "BuildSetNickNameViewIOS";
  *(_QWORD *)(v15 + 8) = 23;
  *(_BYTE *)(v15 + 16) = 2;
  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (v16)
  {
    v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v18 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v18 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v18 + 32) = v17;
    OUTLINED_FUNCTION_8_25();
    v19 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v19 + 16) = xmmword_21FED8AB0;
    v20 = v17;
    *(_QWORD *)(v19 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    OUTLINED_FUNCTION_8_25();
    v40 = v19;

  }
  else
  {
    v40 = MEMORY[0x24BEE4AF8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v21 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v21 + 16) = xmmword_21FED8AB0;
  OUTLINED_FUNCTION_33_3(v21, &lazy cache variable for type metadata for SFRichText);
  OUTLINED_FUNCTION_25_16();
  v22 = @nonobjc SFRichText.__allocating_init(string:)(v41, v42);
  v23 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v23 + 16) = xmmword_21FED8AB0;
  OUTLINED_FUNCTION_25_16();
  OUTLINED_FUNCTION_25_25();
  *(_QWORD *)(v23 + 32) = SFRichText.init(string:bold:color:)(v24, v25, v26, v27);
  v28 = OUTLINED_FUNCTION_8_25();
  v29 = v23;
  OUTLINED_FUNCTION_33_3(v28, &lazy cache variable for type metadata for SFContactImage);
  swift_bridgeObjectRetain();
  v30 = SFContactImage.init(contactId:size:)(v7, v5, 0, 0, 1);
  ContactsLabelCATs.nickName()();
  v31 = Result<>.firstPrint.getter();
  v33 = v32;
  v34 = outlined destroy of UsoEntity_common_Person.DefinedValues?(v43, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v33)
  {
    v34 = static String.EMPTY.getter();
    v31 = v34;
    v33 = v35;
  }
  OUTLINED_FUNCTION_33_3(v34, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  v36 = @nonobjc SFRichText.__allocating_init(string:)(v31, v33);
  *(_QWORD *)(v21 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v22, v29, v40, v30, v36, 0, 0);
  OUTLINED_FUNCTION_8_25();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
  result._1._rawValue = v38;
  result._0._rawValue = v37;
  return result;
}

void CompactViews.buildCompactConfirmationView(attributeType:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_32();
  v13 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v6 = v5 - v4;
  v7 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v9 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v10 = v0 + *(int *)(v7 + 20);
  *(_QWORD *)v10 = "BuildConfirmationViewIOS";
  *(_QWORD *)(v10 + 8) = 24;
  *(_BYTE *)(v10 + 16) = 2;
  type metadata accessor for SiriKitAceViewBuilder();
  swift_retain();
  SiriKitAceViewBuilder.__allocating_init()();
  GenericViews.getConfirmText(forAttribute:)(v13);
  v11 = static ContactsDirectInvocations.confirm()();
  dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)();
  OUTLINED_FUNCTION_2();
  swift_bridgeObjectRelease();

  ContactsLabelCATs.cancel()();
  Result<>.firstPrint.getter();
  OUTLINED_FUNCTION_101_2();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v6, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v2)
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_101_2();
  }
  v12 = static ContactsDirectInvocations.deny()();
  dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)();
  OUTLINED_FUNCTION_55_1();

  swift_release();
  dispatch thunk of SiriKitAceViewBuilder.build()();
  OUTLINED_FUNCTION_21_9();
  OUTLINED_FUNCTION_2();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
}

uint64_t static CompactViews.formatPhoneNumberForDisplay(_:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  Swift::String v4;
  CNPhoneNumber v5;
  id v6;
  void *v7;

  v3 = a1;
  OUTLINED_FUNCTION_33_3(a1, (unint64_t *)&lazy cache variable for type metadata for CNPhoneNumber);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v3;
  v4._object = a2;
  v5.super.isa = CNPhoneNumber.__allocating_init(stringValue:)(v4).super.isa;
  v6 = -[objc_class formattedStringValue](v5.super.isa, sel_formattedStringValue);
  if (v6)
  {
    v7 = v6;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {

    swift_bridgeObjectRetain();
  }
  return v3;
}

id @nonobjc SFRichText.__allocating_init(string:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  if (a2)
  {
    v2 = (void *)MEMORY[0x2207D7CB8]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_textWithString_, v2);

  return v3;
}

int64x2_t one-time initialization function for contactImageSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4041000000000000uLL);
  static CompactViews.contactImageSize = (__int128)result;
  return result;
}

void CompactViews.buildCardSections(handles:contact:contactAttribute:localeString:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t rawValue;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  OUTLINED_FUNCTION_32();
  v2 = v1;
  v50 = v3;
  v51 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v13 = v0 + *(int *)(v11 + 20);
  *(_QWORD *)v13 = "BuildCardSectionsIOS";
  *(_QWORD *)(v13 + 8) = 20;
  *(_BYTE *)(v13 + 16) = 2;
  switch((unint64_t)OUTLINED_FUNCTION_30_20())
  {
    case 1uLL:
      if (!v10)
        goto LABEL_37;
      if (v10 >> 62)
      {
        OUTLINED_FUNCTION_25_16();
        v45 = OUTLINED_FUNCTION_18_14();
        OUTLINED_FUNCTION_5();
        if (!v45)
          goto LABEL_37;
        OUTLINED_FUNCTION_25_16();
        v16 = OUTLINED_FUNCTION_18_14();
        OUTLINED_FUNCTION_5();
      }
      else
      {
        v16 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v16)
          goto LABEL_37;
      }
      if (v16 == 1)
      {
        OUTLINED_FUNCTION_11_25();
        OUTLINED_FUNCTION_29_6();
      }
      CompactViews.buildEmailMultipleAttributesSnippet(contact:emailAddresses:localeString:)(v8, v10, v50, v51);
      goto LABEL_29;
    case 2uLL:
      if (!v10)
        goto LABEL_37;
      if (v10 >> 62)
      {
        OUTLINED_FUNCTION_25_16();
        v46 = OUTLINED_FUNCTION_18_14();
        OUTLINED_FUNCTION_5();
        if (!v46)
          goto LABEL_37;
        OUTLINED_FUNCTION_25_16();
        v17 = OUTLINED_FUNCTION_18_14();
        OUTLINED_FUNCTION_5();
      }
      else
      {
        v17 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v17)
          goto LABEL_37;
      }
      if (v17 == 1)
      {
        OUTLINED_FUNCTION_11_25();
        OUTLINED_FUNCTION_29_6();
      }
      static CompactViews.buildPhoneMultipleAttributesSnippet(contact:phoneNumbers:localeString:)(v8, v10, v50, v51);
LABEL_29:
      OUTLINED_FUNCTION_28_17();
      if (!v44)
        goto LABEL_40;
      goto LABEL_26;
    case 3uLL:
      if (!v10)
        goto LABEL_37;
      if (v10 >> 62)
      {
        OUTLINED_FUNCTION_25_16();
        v47 = OUTLINED_FUNCTION_18_14();
        OUTLINED_FUNCTION_5();
        if (v47)
        {
          OUTLINED_FUNCTION_25_16();
          v18 = OUTLINED_FUNCTION_18_14();
          OUTLINED_FUNCTION_5();
          goto LABEL_18;
        }
      }
      else
      {
        v18 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v18)
        {
LABEL_18:
          if (v18 == 1)
          {
            OUTLINED_FUNCTION_11_25();
            OUTLINED_FUNCTION_29_6();
          }
          Array<A>.toCNPostalAddresses.getter(v10);
          v39 = (void *)OUTLINED_FUNCTION_12_29();
          rawValue = CompactViews.buildAddressMultipleAttributesSnippet(contact:postalAddresses:localeString:)(v39, v40, v41, v42);
LABEL_25:
          swift_bridgeObjectRelease();
          if (rawValue >> 62)
            goto LABEL_26;
          goto LABEL_40;
        }
      }
LABEL_37:
      v14 = v8;
      v15 = 1;
LABEL_38:
      CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(v14, v15);
LABEL_39:
      OUTLINED_FUNCTION_28_17();
      if (v48)
      {
LABEL_26:
        OUTLINED_FUNCTION_27_21();
        OUTLINED_FUNCTION_33_3(v43, &lazy cache variable for type metadata for SFCardSection);
        OUTLINED_FUNCTION_23_9();
        OUTLINED_FUNCTION_21_21();
        OUTLINED_FUNCTION_167();
        goto LABEL_41;
      }
LABEL_40:
      OUTLINED_FUNCTION_23_9();
      v49 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      OUTLINED_FUNCTION_33_3(v49, &lazy cache variable for type metadata for SFCardSection);
LABEL_41:
      OUTLINED_FUNCTION_167();
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_1_29();
      OUTLINED_FUNCTION_54_6();
      OUTLINED_FUNCTION_7();
      return;
    case 4uLL:
      type metadata accessor for ContactsAgeInfo();
      v19 = *(void **)(v2 + 48);
      v20 = v19;
      v21 = v8;
      ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(v21, v6, v19);
      static CompactViews.formattedAgeDigit(_:)();
      v23 = v22;
      v25 = v24;
      OUTLINED_FUNCTION_2();
      rawValue = (unint64_t)CompactViews.buildAgeAttributeSnippet(contact:requestedAge:)(v21, v23, v25);
      goto LABEL_25;
    case 5uLL:
      CompactViews.buildBirthdayAttributeSnippet(contact:)(v8);
      goto LABEL_39;
    case 6uLL:
      v27 = OUTLINED_FUNCTION_33_13();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_36_13();
      OUTLINED_FUNCTION_18_0();
      v28 = OUTLINED_FUNCTION_33_13();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_36_13();
      v29 = CNContact.formattedFullName.getter();
      v31 = v30;
      v32 = objc_msgSend(v8, sel_identifier, v50, v51);
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v35 = v34;

      v36._countAndFlagsBits = 20;
      v36._object = (void *)2;
      v37._countAndFlagsBits = v29;
      v37._object = v31;
      v38._countAndFlagsBits = v33;
      v38._object = v35;
      rawValue = (unint64_t)CompactViews.buildCompactSetNickNameView(newNickName:meCardName:meCardContactID:)(v36, v37, v38)._0._rawValue;
      OUTLINED_FUNCTION_18_0();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    case 9uLL:
    case 0xBuLL:
      v14 = v8;
      v15 = 0;
      goto LABEL_38;
    default:
      v15 = OUTLINED_FUNCTION_30_20() == 0;
      v14 = v8;
      goto LABEL_38;
  }
}

uint64_t CompactViews.buildPhoneSingleAttributeSnippet(contact:phoneNumber:localeString:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  objc_class *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  id v49;
  uint64_t v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;

  v54 = a3;
  v55 = a1;
  v6 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v10 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v11 = &v9[*(int *)(v7 + 20)];
  *(_QWORD *)v11 = "BuildPhoneSingleAttributeSnippetIOS";
  *((_QWORD *)v11 + 1) = 35;
  v11[16] = 2;
  v12 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a2);
  if (v13)
  {
    v14 = v12;
    v15 = v13;
    v53 = a4;
    v16 = objc_msgSend(v55, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppUtil.buildPunchoutFor(contactIdentifier:)();
    v18 = v17;
    swift_bridgeObjectRelease();
    v52 = a2;
    if (v18)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v19 = swift_allocObject();
      v51 = xmmword_21FED8AB0;
      *(_OWORD *)(v19 + 16) = xmmword_21FED8AB0;
      *(_QWORD *)(v19 + 32) = v18;
      v56 = v19;
      specialized Array._endMutation()();
      v47 = v56;
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v51;
      v21 = v18;
      *(_QWORD *)(v20 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
      v56 = v20;
      specialized Array._endMutation()();
      v46 = v56;

    }
    else
    {
      v46 = MEMORY[0x24BEE4AF8];
      v47 = MEMORY[0x24BEE4AF8];
    }
    v23 = static CompactViews.formatPhoneNumberForDisplay(_:)(v14, v15);
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    *(_QWORD *)&v51 = v14;
    v26 = swift_allocObject();
    v48 = xmmword_21FED8AB0;
    *(_OWORD *)(v26 + 16) = xmmword_21FED8AB0;
    v50 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
    v49 = SFRichText.init(string:bold:color:)(v23, v25, 1, 4);
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = v48;
    v28 = v55;
    v29 = CNContact.formattedFullName.getter();
    *(_QWORD *)(v27 + 32) = SFRichText.init(string:bold:color:)(v29, v30, 0, 0);
    v56 = v27;
    specialized Array._endMutation()();
    v31 = v56;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    v32 = objc_msgSend(v28, sel_identifier);
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v35 = v34;

    v36 = SFContactImage.init(contactId:size:)(v33, v35, 0, 0, 1);
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    v37 = CATWrapper.__allocating_init(options:globals:)();
    v38 = (objc_class *)outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v52);
    v40 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v38, v39, v54, v53, 2, v37);
    v42 = v41;
    swift_release();
    swift_bridgeObjectRelease();
    v43 = @nonobjc SFRichText.__allocating_init(string:)(v40, v42);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFActionItem);
    SFActionItem.init(phoneNumber:)(v51, (uint64_t)v15);
    *(_QWORD *)(v26 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v49, v31, v46, v36, v43, v44, 0);
    v56 = v26;
    specialized Array._endMutation()();
    v22 = v56;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v22 = MEMORY[0x24BEE4AF8];
  }
  outlined destroy of Signpost.OpenSignpost((uint64_t)v9);
  return v22;
}

uint64_t static CompactViews.buildPhoneMultipleAttributesSnippet(contact:phoneNumbers:localeString:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_class *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v47 = a3;
  v48 = a4;
  v6 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v6);
  v46 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v11 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v12 = &v10[*(int *)(v8 + 20)];
  *(_QWORD *)v12 = "BuildPhoneMultipleAttributesSnippetIOS";
  *((_QWORD *)v12 + 1) = 38;
  v12[16] = 2;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = swift_allocObject();
  v44 = xmmword_21FED8AB0;
  *(_OWORD *)(v13 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v13 + 32) = static CompactViews.buildHeaderItem(contact:)(a1);
  v53 = v13;
  specialized Array._endMutation()();
  v14 = v53;
  v52 = MEMORY[0x24BEE4AF8];
  if (!(a2 >> 62))
  {
    v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v15)
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease();
LABEL_20:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v10);
    return v14;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v15 = result;
  if (!result)
    goto LABEL_19;
LABEL_5:
  if (v15 >= 1)
  {
    v41 = v10;
    v42 = v15;
    v17 = 0;
    v49 = a2 & 0xC000000000000001;
    v43 = a2;
    do
    {
      if (v49)
        v18 = (id)MEMORY[0x2207D80C0](v17, a2);
      else
        v18 = *(id *)(a2 + 8 * v17 + 32);
      v19 = v18;
      v20 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v18);
      if (v21)
      {
        v22 = v20;
        v23 = v21;
        static AppUtil.buildPunchoutFor(phoneNumber:)();
        v25 = v24;
        v50 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
        v26 = static CompactViews.formatPhoneNumberForDisplay(_:)(v22, v23);
        v28 = v27;
        swift_bridgeObjectRelease();
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
        type metadata accessor for ContactsLabelCATs();
        static CATOption.defaultMode.getter();
        v29 = CATWrapper.__allocating_init(options:globals:)();
        v30 = (objc_class *)outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v19);
        v32 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v30, v31, v47, v48, 2, v29);
        v34 = v33;
        swift_release();
        swift_bridgeObjectRelease();
        v35 = @nonobjc SFRichText.__allocating_init(string:)(v32, v34);
        v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = v44;
        v37 = v25;
        v38 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

        *(_QWORD *)(v36 + 32) = v38;
        v51 = v36;
        specialized Array._endMutation()();
        SFRowCardSection.init(blueTitle:subtitle:commands:)(v26, v28, v35, v51);
        MEMORY[0x2207D7DC0]();
        if (*(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v39 = v37;
        MEMORY[0x2207D7DC0]();
        v15 = v42;
        if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        v19 = v39;
        a2 = v43;
      }
      ++v17;

    }
    while (v15 != v17);
    swift_bridgeObjectRelease();
    v14 = v53;
    v10 = v41;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(void *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  char *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v39 = a2;
  v3 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v6 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v7 = &v5[*(int *)(v3 + 20)];
  *(_QWORD *)v7 = "BuildNameAttributeSnippetIOS";
  *((_QWORD *)v7 + 1) = 28;
  v7[16] = 2;
  v8 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  AppUtil.buildPunchoutFor(contactIdentifier:)();
  v10 = v9;
  swift_bridgeObjectRelease();
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v11 = swift_allocObject();
    v37 = xmmword_21FED8AB0;
    *(_OWORD *)(v11 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v11 + 32) = v10;
    v40 = v11;
    specialized Array._endMutation()();
    v38 = v40;
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = v37;
    v13 = v10;
    *(_QWORD *)(v12 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    v40 = v12;
    specialized Array._endMutation()();
    *(_QWORD *)&v37 = v40;

  }
  else
  {
    *(_QWORD *)&v37 = MEMORY[0x24BEE4AF8];
    v38 = MEMORY[0x24BEE4AF8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v14 = swift_allocObject();
  v36 = xmmword_21FED8AB0;
  *(_OWORD *)(v14 + 16) = xmmword_21FED8AB0;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  v15 = CNContact.formattedFullName.getter();
  v17 = @nonobjc SFRichText.__allocating_init(string:)(v15, v16);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = v36;
  v19 = objc_msgSend(a1, sel_organizationName);
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  *(_QWORD *)(v18 + 32) = SFRichText.init(string:bold:color:)(v20, v22, 0, 0);
  v40 = v18;
  specialized Array._endMutation()();
  v23 = v40;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
  v24 = objc_msgSend(a1, sel_identifier);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  v28 = SFContactImage.init(contactId:size:)(v25, v27, 0, 0, 1);
  v29 = 0;
  if ((v39 & 1) != 0)
  {
    v30 = objc_msgSend(a1, sel_identifier);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE84D40]), sel_init);
    outlined bridged method (mbnn) of @objc SFActionItem.contactIdentifier.setter(v31, v33, v29);
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  *(_QWORD *)(v14 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v17, v23, v37, v28, 0, v29, 0);
  v40 = v14;
  specialized Array._endMutation()();
  v34 = v40;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v5);
  return v34;
}

uint64_t CompactViews.buildEmailSingleAttributeSnippet(contact:emailAddress:localeString:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  objc_class *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a3;
  v7 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v7);
  v51 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v12 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v13 = &v11[*(int *)(v9 + 20)];
  *(_QWORD *)v13 = "BuildEmailSingleAttributeSnippetIOS";
  *((_QWORD *)v13 + 1) = 35;
  v13[16] = 2;
  v14 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a2);
  if (v15)
  {
    v16 = v15;
    v17 = v14;
    v49 = a2;
    v50 = a4;
    v18 = objc_msgSend(a1, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppUtil.buildPunchoutFor(contactIdentifier:)();
    v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v21 = swift_allocObject();
      v48 = xmmword_21FED8AB0;
      *(_OWORD *)(v21 + 16) = xmmword_21FED8AB0;
      *(_QWORD *)(v21 + 32) = v20;
      v53 = v21;
      specialized Array._endMutation()();
      v45 = v53;
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v48;
      v23 = v20;
      *(_QWORD *)(v22 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
      v53 = v22;
      specialized Array._endMutation()();
      v44 = v53;

    }
    else
    {
      v44 = MEMORY[0x24BEE4AF8];
      v45 = MEMORY[0x24BEE4AF8];
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v25 = swift_allocObject();
    v46 = xmmword_21FED8AB0;
    *(_OWORD *)(v25 + 16) = xmmword_21FED8AB0;
    v51 = (char *)type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
    swift_bridgeObjectRetain();
    v47 = v17;
    *(_QWORD *)&v48 = SFRichText.init(string:bold:color:)(v17, v16, 1, 4);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v46;
    v27 = CNContact.formattedFullName.getter();
    *(_QWORD *)(v26 + 32) = SFRichText.init(string:bold:color:)(v27, v28, 0, 0);
    v53 = v26;
    specialized Array._endMutation()();
    v29 = v53;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    v30 = objc_msgSend(a1, sel_identifier);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    v34 = SFContactImage.init(contactId:size:)(v31, v33, 0, 0, 1);
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    v35 = CATWrapper.__allocating_init(options:globals:)();
    v36 = (objc_class *)outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v49);
    v38 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v36, v37, v52, v50, 1, v35);
    v40 = v39;
    swift_release();
    swift_bridgeObjectRelease();
    v41 = @nonobjc SFRichText.__allocating_init(string:)(v38, v40);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFActionItem);
    SFActionItem.init(email:)(v47, v16);
    *(_QWORD *)(v25 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)((void *)v48, v29, v44, v34, v41, v42, 0);
    v53 = v25;
    specialized Array._endMutation()();
    v24 = v53;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v24 = MEMORY[0x24BEE4AF8];
  }
  outlined destroy of Signpost.OpenSignpost((uint64_t)v11);
  return v24;
}

uint64_t CompactViews.buildEmailMultipleAttributesSnippet(contact:emailAddresses:localeString:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  objc_class *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = v4;
  v49 = a3;
  v50 = a4;
  v8 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v8);
  v48 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v13 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v14 = &v12[*(int *)(v10 + 20)];
  *(_QWORD *)v14 = "BuildEmailMultipleAttributesSnippetIOS";
  *((_QWORD *)v14 + 1) = 38;
  v14[16] = 2;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  v43 = xmmword_21FED8AB0;
  *(_OWORD *)(v15 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v15 + 32) = static CompactViews.buildHeaderItem(contact:)(a1);
  v53 = v15;
  specialized Array._endMutation()();
  v16 = v53;
  v56 = v53;
  v55 = MEMORY[0x24BEE4AF8];
  if (!(a2 >> 62))
  {
    v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_5;
LABEL_22:
    swift_bridgeObjectRelease();
LABEL_23:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v12);
    return v16;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v17 = result;
  if (!result)
    goto LABEL_22;
LABEL_5:
  if (v17 >= 1)
  {
    v42 = v12;
    v19 = 0;
    v51 = a2 & 0xC000000000000001;
    v45 = v5 + 8;
    v46 = v17;
    v47 = a2;
    do
    {
      if (v51)
        v20 = (id)MEMORY[0x2207D80C0](v19, a2);
      else
        v20 = *(id *)(a2 + 8 * v19 + 32);
      v21 = v20;
      v22 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v20);
      if (v23)
      {
        v24 = v22;
        v25 = v23;
        AppUtil.buildPunchoutFor(emailAddress:)();
        if (v26)
        {
          v27 = v26;
          MEMORY[0x2207D7DC0]();
          if (*(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = v43;
          v29 = v27;
          v30 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

          *(_QWORD *)(v28 + 32) = v30;
          v53 = v28;
          specialized Array._endMutation()();
          v52 = v53;

        }
        else
        {
          v52 = MEMORY[0x24BEE4AF8];
        }
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
        v53 = v24;
        v54 = v25;
        v31 = String.init<A>(_:)();
        v33 = v32;
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
        type metadata accessor for ContactsLabelCATs();
        static CATOption.defaultMode.getter();
        v34 = CATWrapper.__allocating_init(options:globals:)();
        v35 = (objc_class *)outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v21);
        v37 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v35, v36, v49, v50, 1, v34);
        v39 = v38;
        swift_release();
        swift_bridgeObjectRelease();
        v40 = @nonobjc SFRichText.__allocating_init(string:)(v37, v39);
        SFRowCardSection.init(blueTitle:subtitle:commands:)(v31, v33, v40, v52);
        MEMORY[0x2207D7DC0]();
        if (*(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v17 = v46;
        a2 = v47;
      }
      ++v19;

    }
    while (v17 != v19);
    swift_bridgeObjectRelease();
    v16 = v56;
    v12 = v42;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t CompactViews.buildAddressSingleAttributeSnippet(contact:postalAddress:localeString:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  char *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  void *v31;
  objc_class *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  __int128 v41;
  id v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v45 = a3;
  v46 = a4;
  v6 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v10 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v11 = &v9[*(int *)(v7 + 20)];
  *(_QWORD *)v11 = "BuildAddressSingleAttributeSnippetIOS";
  *((_QWORD *)v11 + 1) = 37;
  v11[16] = 2;
  AppUtil.buildPunchoutFor(labeledAddress:contact:)();
  if (v12)
  {
    v13 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v14 = swift_allocObject();
    v43 = xmmword_21FED8AB0;
    *(_OWORD *)(v14 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v14 + 32) = v13;
    v47 = v14;
    specialized Array._endMutation()();
    v44 = v47;
    v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = v43;
    v16 = v13;
    *(_QWORD *)(v15 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    v47 = v15;
    specialized Array._endMutation()();
    *(_QWORD *)&v43 = v47;

  }
  else
  {
    *(_QWORD *)&v43 = MEMORY[0x24BEE4AF8];
    v44 = MEMORY[0x24BEE4AF8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v17 = swift_allocObject();
  v41 = xmmword_21FED8AB0;
  *(_OWORD *)(v17 + 16) = xmmword_21FED8AB0;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  v18 = CNLabeledValue<>.formattedString.getter();
  v42 = SFRichText.init(string:bold:color:)(v18, v19, 1, 0);
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v41;
  v21 = CNContact.formattedFullName.getter();
  *(_QWORD *)(v20 + 32) = SFRichText.init(string:bold:color:)(v21, v22, 0, 0);
  v47 = v20;
  specialized Array._endMutation()();
  v23 = v47;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
  v24 = objc_msgSend(a1, sel_identifier);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v27 = v26;

  v28 = SFContactImage.init(contactId:size:)(v25, v27, 0, 0, 1);
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  v29 = CATWrapper.__allocating_init(options:globals:)();
  v30 = objc_msgSend(a2, sel_label);
  if (v30)
  {
    v31 = v30;
    v32 = (objc_class *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

  }
  else
  {
    v32 = 0;
    v34 = 0;
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
  v35 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v32, v34, v45, v46, 3, v29);
  v37 = v36;
  swift_release();
  swift_bridgeObjectRelease();
  v38 = @nonobjc SFRichText.__allocating_init(string:)(v35, v37);
  *(_QWORD *)(v17 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v42, v23, v43, v28, v38, 0, 0);
  v47 = v17;
  specialized Array._endMutation()();
  v39 = v47;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v9);
  return v39;
}

uint64_t CompactViews.buildAddressMultipleAttributesSnippet(contact:postalAddresses:localeString:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  objc_class *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v5 = v4;
  v59 = a3;
  v60 = a4;
  v8 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v8);
  v58 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v13 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v14 = *(int *)(v10 + 20);
  v48 = v12;
  v15 = &v12[v14];
  *(_QWORD *)v15 = "BuildAddressMultipleAttributesSnippetIOS";
  *((_QWORD *)v15 + 1) = 40;
  v15[16] = 2;
  v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v16 = swift_allocObject();
  v49 = xmmword_21FED8AB0;
  *(_OWORD *)(v16 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v16 + 32) = static CompactViews.buildHeaderItem(contact:)(a1);
  v63 = v16;
  specialized Array._endMutation()();
  v17 = v63;
  v62 = MEMORY[0x24BEE4AF8];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v19 = (uint64_t)v48;
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_24:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v19);
    return v17;
  }
  v57 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
  v56 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  result = type metadata accessor for ContactsLabelCATs();
  v55 = result;
  if (v18 >= 1)
  {
    v21 = 0;
    v51 = a2 & 0xC000000000000001;
    v52 = v5 + 8;
    v53 = v18;
    v54 = a1;
    do
    {
      if (v51)
        v22 = (id)MEMORY[0x2207D80C0](v21, a2);
      else
        v22 = *(id *)(a2 + 8 * v21 + 32);
      v23 = v22;
      AppUtil.buildPunchoutFor(labeledAddress:contact:)();
      if (v24)
      {
        v25 = v24;
        MEMORY[0x2207D7DC0]();
        if (*(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v26 = swift_allocObject();
        *(_OWORD *)(v26 + 16) = v49;
        v27 = v25;
        v28 = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();

        *(_QWORD *)(v26 + 32) = v28;
        v61 = v26;
        specialized Array._endMutation()();
        v29 = v61;

      }
      else
      {
        v29 = MEMORY[0x24BEE4AF8];
      }
      v30 = a2;
      v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAD98]), sel_init);
      v32 = objc_msgSend(v23, sel_value);
      v33 = objc_msgSend(v31, sel_stringFromPostalAddress_, v32);

      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v36 = v35;

      static CATOption.defaultMode.getter();
      v37 = CATWrapper.__allocating_init(options:globals:)();
      v38 = objc_msgSend(v23, sel_label);
      if (v38)
      {
        v39 = v38;
        v40 = (objc_class *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v42 = v41;

      }
      else
      {
        v40 = 0;
        v42 = 0;
      }
      v43 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v40, v42, v59, v60, 3, v37);
      v45 = v44;
      swift_release();
      swift_bridgeObjectRelease();
      v46 = @nonobjc SFRichText.__allocating_init(string:)(v43, v45);
      SFRowCardSection.init(title:subtitle:commands:)(v34, v36, v46, v29);
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v21;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      a2 = v30;
    }
    while (v53 != v21);
    swift_bridgeObjectRelease();
    v17 = v63;
    v19 = (uint64_t)v48;
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t CompactViews.buildBirthdayAttributeSnippet(contact:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  char *v12;
  uint64_t v13;
  int EnumTagSinglePayload;
  uint64_t v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x24BDAC7A8](v47);
  v46 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v11 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v12 = &v10[*(int *)(v8 + 20)];
  *(_QWORD *)v12 = "BuildBirthdayAttributeSnippetIOS";
  *((_QWORD *)v12 + 1) = 32;
  v12[16] = 2;
  CNContact.timezonedBirthdate.getter((uint64_t)v7);
  v13 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v13);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Date?);
  if (EnumTagSinglePayload == 1)
  {
    v15 = CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(a1, 1);
  }
  else
  {
    v45 = v2;
    v16 = objc_msgSend(a1, sel_identifier);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    AppUtil.buildPunchoutFor(contactIdentifier:)();
    v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v19 = swift_allocObject();
      v44 = xmmword_21FED8AB0;
      *(_OWORD *)(v19 + 16) = xmmword_21FED8AB0;
      *(_QWORD *)(v19 + 32) = v18;
      v48 = v19;
      specialized Array._endMutation()();
      v42 = v48;
      v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v44;
      v21 = v18;
      *(_QWORD *)(v20 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
      v48 = v20;
      specialized Array._endMutation()();
      v41 = v48;

    }
    else
    {
      v41 = MEMORY[0x24BEE4AF8];
      v42 = MEMORY[0x24BEE4AF8];
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v22 = swift_allocObject();
    v43 = xmmword_21FED8AB0;
    *(_OWORD *)(v22 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)&v44 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
    v23 = CNContact.formattedBirthdateString.getter();
    v25 = @nonobjc SFRichText.__allocating_init(string:)(v23, v24);
    v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = v43;
    v27 = CNContact.formattedFullName.getter();
    *(_QWORD *)(v26 + 32) = SFRichText.init(string:bold:color:)(v27, v28, 0, 0);
    v48 = v26;
    specialized Array._endMutation()();
    v29 = v48;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    v30 = objc_msgSend(a1, sel_identifier);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    v34 = SFContactImage.init(contactId:size:)(v31, v33, 0, 0, 1);
    v35 = (uint64_t)v46;
    ContactsLabelCATs.birthday()();
    v36 = Result<>.firstPrint.getter();
    v38 = v37;
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v35, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    v39 = @nonobjc SFRichText.__allocating_init(string:)(v36, v38);
    *(_QWORD *)(v22 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v25, v29, v41, v34, v39, 0, 0);
    v48 = v22;
    specialized Array._endMutation()();
    v15 = v48;
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v10);
  return v15;
}

void static CompactViews.formattedAgeDigit(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  _QWORD v27[4];

  OUTLINED_FUNCTION_32();
  v1 = v0;
  v2 = type metadata accessor for CharacterSet();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_55_0();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_55_0();
  v18 = v17 - v16;
  if (v1)
  {
    if ((*(_BYTE *)(v1 + 40) & 1) == 0 && *(double *)(v1 + 32) >= 1.0)
    {
      v27[1] = *(_QWORD *)(v1 + 32);
      swift_retain();
      static Locale.autoupdatingCurrent.getter();
      lazy protocol witness table accessor for type Double and conformance Double();
      FloatingPointFormatStyle.init(locale:)();
      lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>();
      BinaryFloatingPoint.formatted<A>(_:)();
      OUTLINED_FUNCTION_49();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v14);
      goto LABEL_11;
    }
    if (!*(_QWORD *)(v1 + 56))
    {
      if (!*(_QWORD *)(v1 + 48) && !*(_QWORD *)(v1 + 24))
        goto LABEL_11;
      swift_retain();
    }
    swift_retain();
    swift_retain();
    v19 = COERCE_DOUBLE(dispatch thunk of DialogDuration.valueInYears.getter());
    if ((v20 & 1) == 0 && v19 >= 1.0)
    {
      dispatch thunk of DialogDuration.years.getter();
      v21 = type metadata accessor for SpeakableString();
      if (__swift_getEnumTagSinglePayload(v12, 1, v21) == 1)
      {
        OUTLINED_FUNCTION_49();
        OUTLINED_FUNCTION_21_9();
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v12, &demangling cache variable for type metadata for SpeakableString?);
        goto LABEL_11;
      }
      v22 = SpeakableString.print.getter();
      v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v12, v21);
      v27[2] = v22;
      v27[3] = v24;
      static CharacterSet.decimalDigits.getter();
      CharacterSet.inverted.getter();
      v25 = *(void (**)(char *, uint64_t))(v3 + 8);
      v25(v8, v2);
      lazy protocol witness table accessor for type String and conformance String();
      v26 = StringProtocol.components(separatedBy:)();
      v25(v6, v2);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v26 + 16))
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_18_0();
        OUTLINED_FUNCTION_49();
        OUTLINED_FUNCTION_21_9();
        goto LABEL_11;
      }
      OUTLINED_FUNCTION_18_0();
    }
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_21_9();
  }
LABEL_11:
  OUTLINED_FUNCTION_7();
}

id CompactViews.buildAgeAttributeSnippet(contact:requestedAge:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id result;
  id v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  id v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v53 = a3;
  v50 = a2;
  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x24BDAC7A8](v52);
  v51 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v47 - v9;
  v11 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v14 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v15 = &v13[*(int *)(v11 + 20)];
  *(_QWORD *)v15 = "BuildAgeAttributeSnippetIOS";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v16 = objc_msgSend(a1, sel_birthday);
  if (v16)
  {
    v17 = v16;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = type metadata accessor for DateComponents();
    v19 = (uint64_t)v8;
    v20 = 0;
  }
  else
  {
    v18 = type metadata accessor for DateComponents();
    v19 = (uint64_t)v8;
    v20 = 1;
  }
  __swift_storeEnumTagSinglePayload(v19, v20, 1, v18);
  outlined init with take of DateComponents?((uint64_t)v8, (uint64_t)v10);
  type metadata accessor for DateComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v18) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v10, &demangling cache variable for type metadata for DateComponents?);
LABEL_12:
    v29 = CompactViews.buildNameAttributeSnippet(contact:withActionsItems:)(a1, 1);
LABEL_16:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v13);
    return (id)v29;
  }
  DateComponents.year.getter();
  v22 = v21;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v10, v18);
  if ((v22 & 1) != 0 || !v53)
    goto LABEL_12;
  swift_bridgeObjectRetain();
  v23 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  AppUtil.buildPunchoutFor(contactIdentifier:)();
  v25 = v24;
  swift_bridgeObjectRelease();
  if (v25)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v26 = swift_allocObject();
    v49 = xmmword_21FED8AB0;
    *(_OWORD *)(v26 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v26 + 32) = v25;
    v54 = v26;
    specialized Array._endMutation()();
    v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = v49;
    v28 = v25;
    *(_QWORD *)(v27 + 32) = static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)();
    v54 = v27;
    specialized Array._endMutation()();
    v47 = v54;

  }
  else
  {
    v47 = MEMORY[0x24BEE4AF8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v30 = swift_allocObject();
  v49 = xmmword_21FED8AB0;
  *(_OWORD *)(v30 + 16) = xmmword_21FED8AB0;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  v31 = CNContact.formattedFullName.getter();
  v48 = @nonobjc SFRichText.__allocating_init(string:)(v31, v32);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = v49;
  v34 = (uint64_t)v51;
  ContactsLabelCATs.age()();
  v35 = Result<>.firstPrint.getter();
  v37 = v36;
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v34, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  result = @nonobjc SFRichText.__allocating_init(string:)(v35, v37);
  if (result)
  {
    v39 = result;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFDetailedRowCardSection);
    *(_QWORD *)(v33 + 32) = v39;
    v54 = v33;
    specialized Array._endMutation()();
    v40 = v54;
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
    v41 = objc_msgSend(a1, sel_identifier);
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    v45 = SFContactImage.init(contactId:size:)(v42, v44, 0, 0, 1);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFFormattedText);
    @nonobjc SFFormattedText.__allocating_init(string:)(v50, v53);
    *(_QWORD *)(v30 + 32) = SFDetailedRowCardSection.init(title:descriptions:commands:thumbnail:footnote:action:trailingMiddleText:)(v48, v40, v47, v45, 0, 0, v46);
    v54 = v30;
    specialized Array._endMutation()();
    v29 = v54;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t static CompactViews.buildHeaderItem(contact:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v2 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v6 = &v4[*(int *)(v2 + 20)];
  *(_QWORD *)v6 = "BuildHeaderItemIOS";
  *((_QWORD *)v6 + 1) = 18;
  v6[16] = 2;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRowCardSection);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFRichText);
  v7 = CNContact.formattedFullName.getter();
  v9 = SFRichText.init(string:bold:color:)(v7, v8, 1, 0);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SFContactImage);
  v10 = objc_msgSend(a1, sel_identifier);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;

  if (one-time initialization token for contactImageSize != -1)
    swift_once();
  v14 = SFContactImage.init(contactId:size:)(v11, v13, static CompactViews.contactImageSize, *((uint64_t *)&static CompactViews.contactImageSize + 1), 0);
  SFRowCardSection.init(leadingText:image:)(v9, v14);
  v16 = v15;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v4);
  return v16;
}

unint64_t lazy protocol witness table accessor for type Double and conformance Double()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Double and conformance Double;
  if (!lazy protocol witness table cache variable for type Double and conformance Double)
  {
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE13D0], MEMORY[0x24BEE13C8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double and conformance Double);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>;
  if (!lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    result = MEMORY[0x2207D86A8](MEMORY[0x24BDCD4C0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc SFActionItem.contactIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setContactIdentifier_, v4);

}

uint64_t OUTLINED_FUNCTION_8_25()
{
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_11_25()
{
  uint64_t v0;

  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t OUTLINED_FUNCTION_12_29()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_15_21()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_21_21()
{
  return _bridgeCocoaArray<A>(_:)();
}

id OUTLINED_FUNCTION_29_23()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

id OUTLINED_FUNCTION_30_20()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1439));
}

id OUTLINED_FUNCTION_33_13()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 3912));
}

void OUTLINED_FUNCTION_36_13()
{
  void *v0;

}

void ContactsError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for Parse();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  v8 = type metadata accessor for NLIntent();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  v3 = type metadata accessor for Parse.DirectInvocation();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v4 = type metadata accessor for ContactsError();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  outlined init with copy of ContactsError(v0, v6 - v5);
  v7 = (char *)sub_21FEAA32C + 4 * word_21FEDD330[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21FEAA32C()
{
  void **v0;
  uint64_t v1;
  void *v2;
  Swift::Int v3;
  id v4;
  Swift::String v5;

  v2 = *v0;
  v3 = OUTLINED_FUNCTION_20_21();
  _StringGuts.grow(_:)(v3);
  OUTLINED_FUNCTION_49_6();
  *(_QWORD *)(v1 - 112) = 0xD000000000000020;
  *(_QWORD *)(v1 - 104) = 0x800000021FEE3200;
  *(_QWORD *)(v1 - 160) = v2;
  v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v5._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v5);
  OUTLINED_FUNCTION_55_1();

  return *(_QWORD *)(v1 - 112);
}

void specialized fatalError(_:file:line:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized fatalError(_:file:line:)(a1, a2, a3, a4);
}

{
  specialized fatalError(_:file:line:)(a1, a2, a3, a4);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)();
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25[3];

  v7 = type metadata accessor for ContactsError();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_55_0();
  v10 = v9 - v8;
  swift_storeEnumTagMultiPayload();
  ContactsError.errorDescription.getter();
  v12 = v11;
  v14 = v13;
  outlined destroy of ContactsError(v10);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_26();
  v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain();
  Logger.logObject.getter();
  v17 = OUTLINED_FUNCTION_38_6();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)OUTLINED_FUNCTION_1();
    v25[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v18 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_91_6();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v16, v17, "%s", v18);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_5_26();
  v19 = static FatalError.fatalErrorClosure;
  swift_storeEnumTagMultiPayload();
  ContactsError.errorDescription.getter();
  v21 = v20;
  v23 = v22;
  outlined destroy of ContactsError(v10);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v19)(v21, v23, a1, a2, a3, a4);
}

void specialized fatalError(_:file:line:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[3];

  v0 = static String.EMPTY.getter();
  v2 = v1;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_26();
  v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain();
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_38_6();
  if (os_log_type_enabled(v4, v5))
  {
    v9 = v0;
    v6 = (uint8_t *)OUTLINED_FUNCTION_1();
    v10[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v2, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_91_6();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v4, v5, "%s", v6);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_5_26();
  v7 = static FatalError.fatalErrorClosure;
  v8 = static String.EMPTY.getter();
  ((void (*)(uint64_t))v7)(v8);
}

void fatalError(_:file:line:)(uint64_t (*a1)(void))
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)();
  uint64_t v11;
  uint64_t v12[3];

  v2 = a1();
  v4 = v3;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_26();
  v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain();
  Logger.logObject.getter();
  v7 = OUTLINED_FUNCTION_38_6();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_1();
    v12[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_91_6();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v6, v7, "%s", v8);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_30();
  v9 = OUTLINED_FUNCTION_5_26();
  v10 = static FatalError.fatalErrorClosure;
  v11 = ((uint64_t (*)(uint64_t))a1)(v9);
  ((void (*)(uint64_t))v10)(v11);
}

void (*static FatalError.fatalErrorClosure.getter())()
{
  void (*v0)();

  OUTLINED_FUNCTION_5_26();
  v0 = static FatalError.fatalErrorClosure;
  swift_retain();
  return v0;
}

void static FatalError.fatalErrorClosure.setter(void (*a1)(), uint64_t a2)
{
  OUTLINED_FUNCTION_7_32();
  static FatalError.fatalErrorClosure = a1;
  qword_255586FF0 = a2;
  swift_release();
  OUTLINED_FUNCTION_65_9();
}

uint64_t (*static FatalError.fatalErrorClosure.modify())()
{
  OUTLINED_FUNCTION_7_32();
  return protocol witness for CATType.mockGlobals.modify in conformance ContactsBirthdayInfo;
}

void closure #1 in variable initialization expression of static FatalError.defaultFatalErrorClosure()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for ContactsError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContactsError;
  if (!type metadata singleton initialization cache for ContactsError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of ContactsError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContactsError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void (*static FatalError.defaultFatalErrorClosure.getter())()
{
  return closure #1 in variable initialization expression of static FatalError.defaultFatalErrorClosure;
}

void static FatalError.replaceFatalError(closure:)(void (*a1)(), uint64_t a2)
{
  OUTLINED_FUNCTION_7_32();
  static FatalError.fatalErrorClosure = a1;
  qword_255586FF0 = a2;
  swift_retain();
  swift_release();
  OUTLINED_FUNCTION_65_9();
}

uint64_t static FatalError.restoreFatalError()()
{
  OUTLINED_FUNCTION_7_32();
  static FatalError.fatalErrorClosure = closure #1 in variable initialization expression of static FatalError.defaultFatalErrorClosure;
  qword_255586FF0 = 0;
  return swift_release();
}

uint64_t base witness table accessor for Error in ContactsError()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
}

ValueMetadata *type metadata accessor for FatalError()
{
  return &type metadata for FatalError;
}

char *initializeBufferWithCopyOfBuffer for ContactsError(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = (char *)*a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = (char *)*a2;
        v8 = v7;
        *(_QWORD *)a1 = v7;
        goto LABEL_13;
      case 1u:
      case 2u:
      case 3u:
      case 5u:
      case 6u:
      case 7u:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        v17 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v17;
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 4u:
        v10 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_13;
      case 8u:
      case 0xAu:
        v11 = a2[1];
        *(_QWORD *)a1 = *a2;
        *((_QWORD *)a1 + 1) = v11;
        v12 = a2[2];
        v13 = a2[3];
        *((_QWORD *)a1 + 2) = v12;
        *((_QWORD *)a1 + 3) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 9u:
        *(_QWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 0xBu:
        v14 = a2[3];
        *((_QWORD *)a1 + 3) = v14;
        (**(void (***)(char *, _QWORD *))(v14 - 8))(a1, a2);
        goto LABEL_13;
      case 0xCu:
        v15 = type metadata accessor for NLIntent();
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        goto LABEL_13;
      case 0xDu:
        v16 = type metadata accessor for Parse();
        (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a1, a2, v16);
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for ContactsError(id *a1)
{
  uint64_t v2;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:

      return;
    case 1u:
    case 2u:
    case 3u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      goto LABEL_2;
    case 4u:
      v2 = type metadata accessor for Parse.DirectInvocation();
      goto LABEL_9;
    case 8u:
    case 0xAu:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      return;
    case 0xBu:
      __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
      return;
    case 0xCu:
      v2 = type metadata accessor for NLIntent();
      goto LABEL_9;
    case 0xDu:
      v2 = type metadata accessor for Parse();
LABEL_9:
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
      break;
    default:
      return;
  }
}

_QWORD *initializeWithCopy for ContactsError(_QWORD *a1, char *a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = *(void **)a2;
      v7 = v6;
      *a1 = v6;
      goto LABEL_11;
    case 1u:
    case 2u:
    case 3u:
    case 5u:
    case 6u:
    case 7u:
    case 0xEu:
    case 0xFu:
    case 0x10u:
      v15 = *((_QWORD *)a2 + 1);
      *a1 = *(_QWORD *)a2;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 4u:
      v8 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_11;
    case 8u:
    case 0xAu:
      v9 = *((_QWORD *)a2 + 1);
      *a1 = *(_QWORD *)a2;
      a1[1] = v9;
      v10 = *((_QWORD *)a2 + 2);
      v11 = *((_QWORD *)a2 + 3);
      a1[2] = v10;
      a1[3] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 9u:
      *a1 = *(_QWORD *)a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
      swift_bridgeObjectRetain();
      goto LABEL_11;
    case 0xBu:
      v12 = *((_QWORD *)a2 + 3);
      a1[3] = v12;
      (**(void (***)(_QWORD *, const void *))(v12 - 8))(a1, a2);
      goto LABEL_11;
    case 0xCu:
      v13 = type metadata accessor for NLIntent();
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      goto LABEL_11;
    case 0xDu:
      v14 = type metadata accessor for Parse();
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void **assignWithCopy for ContactsError(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of ContactsError((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = *a2;
        v7 = v6;
        *a1 = v6;
        goto LABEL_12;
      case 1u:
      case 2u:
      case 3u:
      case 5u:
      case 6u:
      case 7u:
      case 0xEu:
      case 0xFu:
      case 0x10u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 4u:
        v8 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        goto LABEL_12;
      case 8u:
      case 0xAu:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 9u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        goto LABEL_12;
      case 0xBu:
        v9 = a2[3];
        a1[3] = v9;
        (**((void (***)(void **, const void *))v9 - 1))(a1, a2);
        goto LABEL_12;
      case 0xCu:
        v10 = type metadata accessor for NLIntent();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        goto LABEL_12;
      case 0xDu:
        v11 = type metadata accessor for Parse();
        (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for ContactsError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 13:
      v8 = type metadata accessor for Parse();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      break;
    case 12:
      v9 = type metadata accessor for NLIntent();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      break;
    case 4:
      v7 = type metadata accessor for Parse.DirectInvocation();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithTake for ContactsError(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 != a2)
  {
    outlined destroy of ContactsError((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 13:
        v8 = type metadata accessor for Parse();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        break;
      case 12:
        v9 = type metadata accessor for NLIntent();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        break;
      case 4:
        v7 = type metadata accessor for Parse.DirectInvocation();
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata completion function for ContactsError()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Parse.DirectInvocation();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for NLIntent();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Parse();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void OUTLINED_FUNCTION_0_41()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
  *(_QWORD *)(v0 - 104) = 0xE000000000000000;
}

void OUTLINED_FUNCTION_1_43()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_2_49(Swift::Int a1)
{
  _StringGuts.grow(_:)(a1);
}

void OUTLINED_FUNCTION_3_31(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;

  v2 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_5_26()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_7_32()
{
  return swift_beginAccess();
}

void OUTLINED_FUNCTION_9_28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 - 104);
  *(_QWORD *)(v0 - 112) = *(_QWORD *)(v0 - 112);
  *(_QWORD *)(v0 - 104) = v1;
}

void OUTLINED_FUNCTION_15_22()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  String.append(_:)(v2);
}

void OUTLINED_FUNCTION_18_23(Swift::Int a1)
{
  _StringGuts.grow(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_20_21()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 112) = 0;
  *(_QWORD *)(v0 - 104) = 0xE000000000000000;
  return 34;
}

void OUTLINED_FUNCTION_21_22(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_22_19@<X0>(uint64_t (*a1)(void)@<X8>)
{
  return a1();
}

uint64_t AppUtil.init(installedApps:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of FlowProviding(a1, a2);
}

void AppUtil.buildPunchoutFor(contactIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t (**v13)(uint64_t, uint64_t);
  uint64_t (**v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSURL *v22;
  char v23;
  void *v24;
  void *v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  NSURL *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;

  OUTLINED_FUNCTION_32();
  v35 = v2;
  v36 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5_2();
  v32 = v5;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v6);
  v33 = (char *)&v31 - v7;
  v34 = OUTLINED_FUNCTION_18_5();
  v8 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v9 = OUTLINED_FUNCTION_2_50();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v11 = v0 + *(int *)(v9 + 20);
  *(_QWORD *)v11 = "BuildPunchoutForContact";
  *(_QWORD *)(v11 + 8) = 23;
  *(_BYTE *)(v11 + 16) = 2;
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81860]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v12);
  v14 = v13;
  OUTLINED_FUNCTION_5_11();
  if (!v14)
  {
    v14 = (uint64_t (**)(uint64_t, uint64_t))v12;
    OUTLINED_FUNCTION_40_5();
    v15 = UUID.uuidString.getter();
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v34);
    outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v15, v17, v14, (SEL *)&selRef_setAceId_);

  }
  OUTLINED_FUNCTION_24_25();
  if ((OUTLINED_FUNCTION_23_26(v14[1]) & 1) != 0)
  {
    if (v36)
    {
      v18._countAndFlagsBits = OUTLINED_FUNCTION_21_23(0xD000000000000012);
      String.append(_:)(v18);
      v19 = v37;
      v20 = (uint64_t)v33;
      OUTLINED_FUNCTION_28_18();
      OUTLINED_FUNCTION_5();
      v21 = OUTLINED_FUNCTION_11_26();
      OUTLINED_FUNCTION_5_27(v20);
      if (!v23)
      {
        URL._bridgeToObjectiveC()(v22);
        v19 = v24;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
      }
LABEL_20:
      OUTLINED_FUNCTION_12_17(v12, sel_setPunchOutUri_);

      goto LABEL_21;
    }
    outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(0xD00000000000001BLL, 0x800000021FEDFB20, v12, (SEL *)&selRef_setBundleId_);
  }
  else
  {
    OUTLINED_FUNCTION_24_25();
    if ((OUTLINED_FUNCTION_23_26(v14[4]) & 1) != 0)
    {
      v25 = v36;
      if (v36)
      {
        v26 = v32;
        if (one-time initialization token for phoneContactsTabURLQueryPrefix != -1)
          swift_once();
        v27._countAndFlagsBits = OUTLINED_FUNCTION_21_23(0xD00000000000001FLL);
        v27._object = v25;
        String.append(_:)(v27);
      }
      else
      {
        v26 = v32;
      }
      OUTLINED_FUNCTION_28_18();
      OUTLINED_FUNCTION_5();
      v28 = OUTLINED_FUNCTION_11_26();
      v19 = 0;
      if (OUTLINED_FUNCTION_146(v26) != 1)
      {
        URL._bridgeToObjectiveC()(v29);
        v19 = v30;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8))(v26, v28);
      }
      goto LABEL_20;
    }

  }
LABEL_21:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
}

void static AppUtil.buildPunchoutFor(string:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSURL *v16;
  char v17;
  uint64_t v18;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_15();
  v18 = OUTLINED_FUNCTION_18_5();
  v4 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v5 = OUTLINED_FUNCTION_2_50();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v7 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v8 = v0 + *(int *)(v5 + 20);
  *(_QWORD *)v8 = "BuildPunchoutForString";
  *(_QWORD *)(v8 + 8) = 22;
  *(_BYTE *)(v8 + 16) = 2;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81860]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v9);
  v11 = v10;
  OUTLINED_FUNCTION_5_11();
  if (!v11)
  {
    v12 = v9;
    OUTLINED_FUNCTION_40_5();
    v13 = UUID.uuidString.getter();
    v15 = v14;
    (*(void (**)(void *, uint64_t))(v4 + 8))(v1, v18);
    outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v13, v15, v12, (SEL *)&selRef_setAceId_);

  }
  URL.init(string:)();
  OUTLINED_FUNCTION_11_26();
  OUTLINED_FUNCTION_5_27(v2);
  if (!v17)
  {
    v1 = (void *)v2;
    URL._bridgeToObjectiveC()(v16);
    OUTLINED_FUNCTION_10_29();
  }
  OUTLINED_FUNCTION_12_17(v9, sel_setPunchOutUri_);

  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
}

unint64_t static AppUtil.contactsAppID.getter()
{
  return OUTLINED_FUNCTION_25_26(27);
}

id AppUtil.buildSash()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v3 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v4 = v0 + *(int *)(v1 + 20);
  *(_QWORD *)v4 = "BuildSash";
  *(_QWORD *)(v4 + 8) = 9;
  *(_BYTE *)(v4 + 16) = 2;
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81988]), sel_init);
  v6 = AppUtil.sashBundleId.getter();
  outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v6, v7, v5, (SEL *)&selRef_setApplicationBundleIdentifier_);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  return v5;
}

unint64_t AppUtil.sashBundleId.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[3];
  v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2) & 1) != 0)
    return 0xD00000000000001BLL;
  if (one-time initialization token for siriBundleID != -1)
    swift_once();
  v3 = static String.siriBundleID;
  OUTLINED_FUNCTION_25_16();
  return v3;
}

void AppUtil.buildPunchoutFor(emailAddress:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  NSURL *v21;
  char v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  void *v26;

  OUTLINED_FUNCTION_32();
  v24._countAndFlagsBits = v2;
  v24._object = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v25 = v5;
  v23 = OUTLINED_FUNCTION_18_5();
  v6 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = OUTLINED_FUNCTION_2_50();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v9 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_15_21();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v10 = v0 + *(int *)(v7 + 20);
  *(_QWORD *)v10 = "BuildPunchoutForEmailAddress";
  *(_QWORD *)(v10 + 8) = 28;
  *(_BYTE *)(v10 + 16) = 2;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81860]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v11);
  v13 = v12;
  OUTLINED_FUNCTION_5_11();
  if (!v13)
  {
    v14 = v11;
    OUTLINED_FUNCTION_40_5();
    v15 = UUID.uuidString.getter();
    v17 = v16;
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v1, v23);
    outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v15, v17, v14, (SEL *)&selRef_setAceId_);

  }
  v18 = v1[3];
  v19 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v18);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19) & 1) != 0)
  {
    if (one-time initialization token for emailURLPrefix != -1)
      swift_once();
    v26 = *(void **)algn_25558DCF8;
    swift_bridgeObjectRetain();
    String.append(_:)(v24);
    v20 = v26;
    OUTLINED_FUNCTION_28_18();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_11_26();
    OUTLINED_FUNCTION_5_27(v25);
    if (!v22)
    {
      v20 = (void *)v25;
      URL._bridgeToObjectiveC()(v21);
      OUTLINED_FUNCTION_10_29();
    }
    OUTLINED_FUNCTION_12_17(v11, sel_setPunchOutUri_);

  }
  else
  {

  }
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_7();
}

void AppUtil.buildPunchoutFor(labeledAddress:contact:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  char v31;
  os_log_type_t v32;
  uint8_t *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  int EnumTagSinglePayload;
  os_log_type_t v43;
  uint8_t *v44;
  const char *v45;
  uint64_t v46;
  os_log_type_t v47;
  void (*v48)(char *, char *, uint64_t);
  NSURL *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  void *v59;
  id v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;

  OUTLINED_FUNCTION_32();
  v2 = v0;
  v78 = v4;
  v79 = v3;
  v82 = type metadata accessor for Logger();
  v74 = *(_QWORD *)(v82 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_9_5();
  v73 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5_2();
  v72 = (char *)v8;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v69 - v10;
  v80 = OUTLINED_FUNCTION_11_26();
  v76 = *(_QWORD *)(v80 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_5_2();
  v71 = v13;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v14);
  v70 = (char *)&v69 - v15;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v16);
  v77 = (char *)&v69 - v17;
  v75 = OUTLINED_FUNCTION_18_5();
  v18 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_15();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v23 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_92_6();
  v24 = *(int *)(v21 + 20);
  v81 = v1;
  v25 = v1 + v24;
  *(_QWORD *)v25 = "BuildPunchoutForPostalAddress";
  *(_QWORD *)(v25 + 8) = 29;
  *(_BYTE *)(v25 + 16) = 2;
  v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81860]), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v26);
  v28 = v27;
  OUTLINED_FUNCTION_5_11();
  if (!v28)
  {
    v29 = v25;
    OUTLINED_FUNCTION_34_14();
    v30 = v82;
    if (!v31)
      swift_once();
    __swift_project_value_buffer((uint64_t)v30, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_70();
    v32 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v30, v32))
    {
      v33 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_21FE16000, v30, v32, "#buildPunchoutFor address: Ace ID is nil, setting random UUID to punchout", v33, 2u);
      OUTLINED_FUNCTION_0();
    }

    v34 = v26;
    UUID.init()();
    v35 = UUID.uuidString.getter();
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v75);
    outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v35, v37, v34, (SEL *)&selRef_setAceId_);

    v25 = v29;
  }
  v38 = v2[3];
  v39 = v2[4];
  v40 = __swift_project_boxed_opaque_existential_1(v2, v38);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39) & 1) == 0)
  {
    OUTLINED_FUNCTION_34_14();
    v46 = v82;
    if (!v31)
      swift_once();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_70();
    v47 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v47))
    {
      v44 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v44 = 0;
      v45 = "#buildPunchoutFor address: Maps is not installed, returning nil for punchout";
LABEL_19:
      _os_log_impl(&dword_21FE16000, v40, (os_log_type_t)v38, v45, v44, 2u);
      OUTLINED_FUNCTION_0();
    }
    goto LABEL_20;
  }
  v40 = v79;
  CNLabeledValue<>.buildMapsURL(contact:)(v78, (uint64_t)v11);
  v41 = v80;
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v80);
  v38 = v82;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of URL?((uint64_t)v11);
    OUTLINED_FUNCTION_34_14();
    if (!v31)
      swift_once();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_70();
    v43 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v43))
    {
      v44 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v44 = 0;
      v45 = "#buildPunchoutFor address: failed to build Maps punchout URL, returning nil";
      goto LABEL_19;
    }
LABEL_20:

LABEL_21:
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_27_3();
    OUTLINED_FUNCTION_54_6();
    OUTLINED_FUNCTION_7();
    return;
  }
  v48 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
  v48(v77, v11, v41);
  URL._bridgeToObjectiveC()(v49);
  v51 = v50;
  OUTLINED_FUNCTION_12_17(v26, sel_setPunchOutUri_);

  OUTLINED_FUNCTION_34_14();
  if (!v31)
    swift_once();
  v52 = __swift_project_value_buffer(v38, (uint64_t)static Logger.siriContacts);
  v53 = v73;
  v54 = v74;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16))(v73, v52, v38);
  v55 = v26;
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v56, v57))
  {

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v38);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v41);
    goto LABEL_21;
  }
  v58 = (uint8_t *)OUTLINED_FUNCTION_1();
  v59 = (void *)OUTLINED_FUNCTION_1();
  v84 = v59;
  *(_DWORD *)v58 = 136315138;
  v60 = objc_msgSend(v55, sel_punchOutUri);
  if (v60)
  {
    v61 = v60;
    v78 = v59;
    v79 = v25;
    v62 = v71;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v63 = (uint64_t)v72;
    v64 = v80;
    v48(v72, v62, v80);
    __swift_storeEnumTagSinglePayload(v63, 0, 1, v64);
    if (OUTLINED_FUNCTION_146(v63) != 1)
    {
      v65 = v70;
      v48(v70, (char *)v63, v64);
      lazy protocol witness table accessor for type URL and conformance URL();
      v66 = dispatch thunk of CustomStringConvertible.description.getter();
      v68 = v67;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v65, v64);
      v83 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FE16000, v56, v57, "#buildPunchoutFor address: punchout URI: %s", v58, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }

  }
  else
  {

    __swift_storeEnumTagSinglePayload((uint64_t)v72, 1, 1, v80);
  }
  __break(1u);
}

unint64_t static AppUtil.messagesAppID.getter()
{
  return OUTLINED_FUNCTION_25_26(19);
}

unint64_t static AppUtil.phoneAppID.getter()
{
  return OUTLINED_FUNCTION_25_26(21);
}

uint64_t static AppUtil.contactsApp.getter()
{
  type metadata accessor for App();
  return App.__allocating_init(appIdentifier:)();
}

void static AppUtil.buildMessagesPunchoutFor(handleString:)()
{
  static AppUtil.buildMessagesPunchoutFor(handleString:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void **v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  Swift::String v31;
  void *v32;
  uint64_t v33;
  NSURL *v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;

  OUTLINED_FUNCTION_32();
  v37 = v3;
  v41 = v4;
  v42 = v5;
  v40 = v6;
  v46 = v7;
  v44 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_37_2();
  v45 = type metadata accessor for CharacterSet();
  v43 = *(_QWORD *)(v45 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OUTLINED_FUNCTION_18_5();
  v38 = *(_QWORD *)(v13 - 8);
  v39 = v13;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_2_50();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_15();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v17 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_92_6();
  v18 = v2 + *(int *)(v15 + 20);
  *(_QWORD *)v18 = "BuildPunchoutForPhoneNumber";
  *(_QWORD *)(v18 + 8) = 27;
  *(_BYTE *)(v18 + 16) = 2;
  v19 = objc_allocWithZone(MEMORY[0x24BE81860]);
  v20 = objc_msgSend(v19, sel_init, v37);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v20);
  v22 = v21;
  OUTLINED_FUNCTION_5_11();
  if (!v22)
  {
    v23 = v20;
    OUTLINED_FUNCTION_40_5();
    v24 = UUID.uuidString.getter();
    v26 = v25;
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v1, v39);
    outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v24, v26, v23, (SEL *)&selRef_setAceId_);

  }
  v47 = v44;
  v48 = v46;
  static CharacterSet.urlPathAllowed.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v27 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v45);
  if (v29)
  {
    if (*v40 != -1)
      swift_once();
    v30 = *v42;
    v47 = *v41;
    v48 = v30;
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = v27;
    v31._object = v29;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32 = v48;
    OUTLINED_FUNCTION_28_18();
    OUTLINED_FUNCTION_5();
    v33 = OUTLINED_FUNCTION_11_26();
    OUTLINED_FUNCTION_5_27(v0);
    if (!v35)
    {
      URL._bridgeToObjectiveC()(v34);
      v32 = v36;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v0, v33);
    }
    OUTLINED_FUNCTION_12_17(v20, sel_setPunchOutUri_);

    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v2);
    OUTLINED_FUNCTION_7();
  }
  else
  {
    __break(1u);
  }
}

void static AppUtil.buildPunchoutFor(phoneNumber:)()
{
  static AppUtil.buildMessagesPunchoutFor(handleString:)();
}

Swift::Bool __swiftcall InstalledAppsProvider.isContactsAppInstalled()()
{
  Swift::Bool result;

  OUTLINED_FUNCTION_6_37(27, 0x800000021FEDFB20);
  return result;
}

Swift::Bool __swiftcall InstalledAppsProvider.isMapsAppInstalled()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Swift::Bool result;

  if (one-time initialization token for MAPS_APP_ID_IOS != -1)
    swift_once();
  v0 = static String.MAPS_APP_ID_IOS;
  v1 = *(_QWORD *)algn_25558DCE8;
  objc_allocWithZone(MEMORY[0x24BDC1540]);
  OUTLINED_FUNCTION_25_16();
  v2 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v0, v1, 0);
  if (v2)

  OUTLINED_FUNCTION_24_19();
  return result;
}

uint64_t static AppUtil.mapsAppID.getter()
{
  uint64_t v0;

  if (one-time initialization token for MAPS_APP_ID_IOS != -1)
    swift_once();
  v0 = static String.MAPS_APP_ID_IOS;
  OUTLINED_FUNCTION_25_16();
  return v0;
}

Swift::Bool __swiftcall InstalledAppsProvider.isMailAppInstalled()()
{
  Swift::Bool result;

  OUTLINED_FUNCTION_6_37(20, 0x800000021FEE3270);
  return result;
}

unint64_t static AppUtil.mailAppID.getter()
{
  return OUTLINED_FUNCTION_25_26(20);
}

Swift::Bool __swiftcall InstalledAppsProvider.isPhoneAppInstalled()()
{
  Swift::Bool result;

  OUTLINED_FUNCTION_6_37(21, 0x800000021FEE1F20);
  return result;
}

void InstalledAppsProvider.isContactsAppInstalled()(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;

  v4 = objc_allocWithZone(MEMORY[0x24BDC1540]);
  v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (v5)

  OUTLINED_FUNCTION_24_19();
}

BOOL protocol witness for InstalledAppsProviding.isContactsAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isContactsAppInstalled()();
}

BOOL protocol witness for InstalledAppsProviding.isMapsAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isMapsAppInstalled()();
}

BOOL protocol witness for InstalledAppsProviding.isMailAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isMailAppInstalled()();
}

BOOL protocol witness for InstalledAppsProviding.isPhoneAppInstalled() in conformance InstalledAppsProvider()
{
  return InstalledAppsProvider.isPhoneAppInstalled()();
}

uint64_t static AppUtil.contactsAppCandidate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v0 = type metadata accessor for ContactResolver.AppCandidateType();
  MEMORY[0x24BDAC7A8](v0);
  (*(void (**)(char *, _QWORD))(v2 + 104))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BE936C0]);
  return ContactResolver.AppCandidate.init(bundleId:type:)();
}

void one-time initialization function for phoneContactsTabURLQueryPrefix()
{
  static String.phoneContactsTabURLQueryPrefix = 0x3D64693F776F6873;
  *(_QWORD *)algn_25558DCB8 = 0xE800000000000000;
}

void one-time initialization function for phoneURLPrefix()
{
  static String.phoneURLPrefix = 980182388;
  *(_QWORD *)algn_25558DCC8 = 0xE400000000000000;
}

void one-time initialization function for messagesURLPrefix()
{
  static String.messagesURLPrefix = 980643187;
  *(_QWORD *)algn_25558DCD8 = 0xE400000000000000;
}

void one-time initialization function for MAPS_APP_ID_IOS()
{
  strcpy((char *)&static String.MAPS_APP_ID_IOS, "com.apple.Maps");
  algn_25558DCE8[7] = -18;
}

void one-time initialization function for emailURLPrefix()
{
  static String.emailURLPrefix = 0x3A6F746C69616DLL;
  *(_QWORD *)algn_25558DCF8 = 0xE700000000000000;
}

void one-time initialization function for iosSiriSettings()
{
  static String.iosSiriSettings = 0x6F723A7366657270;
  *(_QWORD *)algn_25558DD08 = 0xEF495249533D746FLL;
}

void one-time initialization function for siriBundleID()
{
  strcpy((char *)&static String.siriBundleID, "com.apple.siri");
  algn_25558DD18[7] = -18;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t dispatch thunk of InstalledAppsProviding.isContactsAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of InstalledAppsProviding.isMapsAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of InstalledAppsProviding.isMailAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of InstalledAppsProviding.isPhoneAppInstalled()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for InstalledAppsProvider()
{
  return &type metadata for InstalledAppsProvider;
}

uint64_t initializeWithCopy for AppUtil(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AppUtil(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppUtil(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppUtil(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppUtil(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppUtil()
{
  return &type metadata for AppUtil;
}

void outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6;

  v6 = (id)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);

}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x2207D86A8](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_50()
{
  return type metadata accessor for Signpost.OpenSignpost();
}

uint64_t OUTLINED_FUNCTION_5_27(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

void OUTLINED_FUNCTION_6_37(uint64_t a1, uint64_t a2)
{
  InstalledAppsProvider.isContactsAppInstalled()(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

uint64_t OUTLINED_FUNCTION_10_29()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_11_26()
{
  return type metadata accessor for URL();
}

uint64_t OUTLINED_FUNCTION_21_23@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a1;
  *(_QWORD *)(v2 - 88) = (v1 - 32) | 0x8000000000000000;
  return *(_QWORD *)(v2 - 112);
}

uint64_t OUTLINED_FUNCTION_23_26@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

_QWORD *OUTLINED_FUNCTION_24_25()
{
  _QWORD *v0;

  return __swift_project_boxed_opaque_existential_1(v0, v0[3]);
}

unint64_t OUTLINED_FUNCTION_25_26(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t OUTLINED_FUNCTION_28_18()
{
  return URL.init(string:)();
}

uint64_t RREntity.isFromContactSource.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  char v13;
  void (*v14)(_BYTE *, uint64_t);
  uint64_t v15;
  char v16;
  _BYTE v18[80];
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_32();
  v19 = v0;
  v20 = v1;
  v2 = OUTLINED_FUNCTION_33_11();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v18[-v7];
  if (RREntity.appBundleId.getter() == 0x73746361746E6F43 && v9 == 0xE800000000000000)
  {
    OUTLINED_FUNCTION_5();
    v11 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_9_26();
    v11 = OUTLINED_FUNCTION_11_18();
    OUTLINED_FUNCTION_5();
  }
  OUTLINED_FUNCTION_54_13((uint64_t)v8);
  if ((v11 & 1) != 0)
    goto LABEL_11;
  if (RREntity.appBundleId.getter() == 0xD00000000000001BLL && v12 == 0x800000021FEDFB20)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v13 = 1;
    goto LABEL_13;
  }
  v13 = OUTLINED_FUNCTION_11_18();
  swift_bridgeObjectRelease();
LABEL_13:
  v14 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v14(v8, v2);
  OUTLINED_FUNCTION_54_13((uint64_t)v6);
  if ((v13 & 1) == 0)
  {
    if (RREntity.appBundleId.getter() != 0xD000000000000015 || v15 != 0x800000021FEE1F20)
    {
      v16 = OUTLINED_FUNCTION_11_18();
      OUTLINED_FUNCTION_5();
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  v16 = 1;
LABEL_19:
  v14(v6, v2);
  return v16 & 1;
}

void static RREntity.makeEntityList(for:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  _QWORD v78[3];
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t (*v98)(unint64_t, uint64_t, uint64_t);
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, char *, uint64_t);
  id v103;
  uint64_t v104;
  uint64_t v105;

  OUTLINED_FUNCTION_32();
  v103 = v1;
  OUTLINED_FUNCTION_47_12();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_68();
  v96 = v4;
  MEMORY[0x24BDAC7A8](v5);
  v81 = (char *)v78 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_68();
  v95 = v9;
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v78 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v78 - v14;
  v16 = OUTLINED_FUNCTION_33_11();
  v101 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v22);
  v79 = (uint64_t)v78 - v23;
  v24 = OUTLINED_FUNCTION_24_26();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_14_27();
  v97 = UUID.uuidString.getter();
  v27 = v26;
  v28 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  OUTLINED_FUNCTION_37_15();
  UUID.init()();
  v94 = UUID.uuidString.getter();
  v30 = v29;
  OUTLINED_FUNCTION_37_15();
  UUID.init()();
  v31 = UUID.uuidString.getter();
  v33 = v32;
  v28(v0, v24);
  v105 = MEMORY[0x24BEE4AF8];
  v34 = v103;
  RREntity.init(from:)(v34);
  v78[2] = v34;
  v92 = v30;
  v91 = v31;
  v103 = v33;
  OUTLINED_FUNCTION_10_8((uint64_t)v15);
  v35 = v101;
  v36 = v79;
  v102 = *(void (**)(uint64_t, char *, uint64_t))(v101 + 32);
  v102(v79, v15, v16);
  v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
  v39 = *(_QWORD *)(v37 + 16);
  v38 = *(_QWORD *)(v37 + 24);
  if (v39 >= v38 >> 1)
    v37 = OUTLINED_FUNCTION_26_23(v38 > 1, v39 + 1);
  v93 = v27;
  *(_QWORD *)(v37 + 16) = v39 + 1;
  v100 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v40 = *(_QWORD *)(v35 + 72);
  v98 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v35 + 16);
  v99 = v40;
  v41 = v98(v37 + v100 + v40 * v39, v36, v16);
  v105 = v37;
  v42 = (uint64_t)OUTLINED_FUNCTION_25_27(v41, sel_postalAddresses);
  v78[1] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((unint64_t)v43 >> 62)
  {
    if (v43 < 0)
      v42 = v43;
    else
      v42 = v43 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v44 = OUTLINED_FUNCTION_40_9();
    OUTLINED_FUNCTION_9_0();
  }
  else
  {
    v44 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v45 = v82;
  if (v44)
  {
    if (v44 < 1)
    {
      __break(1u);
      goto LABEL_52;
    }
    v42 = 0;
    v89 = v43 & 0xC000000000000001;
    v46 = (uint64_t)v81;
    v31 = v80;
    v90 = v43;
    do
    {
      if (v89)
        v47 = (id)MEMORY[0x2207D80C0](v42, v43);
      else
        v47 = OUTLINED_FUNCTION_53_5(v43 + 8 * v42);
      v48 = v47;
      swift_bridgeObjectRetain();
      GroupIdentifier.init(id:seq:)();
      RREntity.init(from:groupId:)(v48, v46, (uint64_t)v13);
      v49 = v101;
      OUTLINED_FUNCTION_10_8((uint64_t)v13);
      OUTLINED_FUNCTION_6_38(v31, (uint64_t)v13);
      OUTLINED_FUNCTION_30_21(v45, v31);
      v50 = v105;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v50 = OUTLINED_FUNCTION_42_8(0, *(_QWORD *)(v50 + 16) + 1);
      v52 = *(_QWORD *)(v50 + 16);
      v51 = *(_QWORD *)(v50 + 24);
      if (v52 >= v51 >> 1)
        v50 = OUTLINED_FUNCTION_42_8(v51 > 1, v52 + 1);
      *(_QWORD *)(v50 + 16) = v52 + 1;
      v53 = v50 + v100 + v52 * v99;
      v45 = v82;
      OUTLINED_FUNCTION_6_38(v53, v82);

      v105 = v50;
      v31 = v80;
      OUTLINED_FUNCTION_92(v80, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
      v46 = (uint64_t)v81;
      ++v42;
      v43 = v90;
    }
    while (v44 != v42);
  }
  swift_bridgeObjectRelease();
  v54 = OUTLINED_FUNCTION_9_0();
  v55 = OUTLINED_FUNCTION_25_27(v54, sel_phoneNumbers);
  v56 = OUTLINED_FUNCTION_35_12();

  if (v56 >> 62)
  {
    OUTLINED_FUNCTION_25_16();
    v57 = OUTLINED_FUNCTION_40_9();
    OUTLINED_FUNCTION_5();
  }
  else
  {
    v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  OUTLINED_FUNCTION_27_22();
  v58 = v92;
  if (!v57)
    goto LABEL_28;
  if (v57 < 1)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v59 = 0;
  v97 = v56 & 0xC000000000000001;
  v93 = v56;
  do
  {
    if (v97)
      OUTLINED_FUNCTION_71_8();
    v60 = OUTLINED_FUNCTION_53_5(v56 + 8 * v59);
    swift_bridgeObjectRetain();
    v61 = v96;
    GroupIdentifier.init(id:seq:)();
    v62 = v95;
    RREntity.init(from:groupId:)(v60, v61, v95);
    OUTLINED_FUNCTION_10_8(v62);
    v63 = v84;
    OUTLINED_FUNCTION_6_38(v84, v62);
    OUTLINED_FUNCTION_30_21(v85, v63);
    if ((OUTLINED_FUNCTION_51_13() & 1) == 0)
      v43 = OUTLINED_FUNCTION_13_33(0, *(_QWORD *)(v43 + 16) + 1);
    v58 = v92;
    v56 = v93;
    v44 = *(_QWORD *)(v43 + 16);
    v64 = *(_QWORD *)(v43 + 24);
    v31 = v44 + 1;
    if (v44 >= v64 >> 1)
      v43 = OUTLINED_FUNCTION_13_33(v64 > 1, v44 + 1);
    v65 = OUTLINED_FUNCTION_50_15();
    OUTLINED_FUNCTION_6_38(v65, v85);

    v105 = v43;
    OUTLINED_FUNCTION_92(v84, *(uint64_t (**)(uint64_t, uint64_t))(v101 + 8));
    OUTLINED_FUNCTION_27_22();
    ++v59;
  }
  while (v57 != v59);
LABEL_28:
  swift_bridgeObjectRelease();
  v66 = OUTLINED_FUNCTION_5();
  v67 = OUTLINED_FUNCTION_25_27(v66, sel_emailAddresses);
  v68 = OUTLINED_FUNCTION_35_12();

  if (v68 >> 62)
  {
    OUTLINED_FUNCTION_25_16();
    v69 = OUTLINED_FUNCTION_40_9();
    OUTLINED_FUNCTION_5();
    if (v69)
    {
LABEL_30:
      if (v69 >= 1)
      {
        v70 = 0;
        v97 = v68 & 0xC000000000000001;
        v71 = v68;
        do
        {
          if (v97)
            OUTLINED_FUNCTION_71_8();
          v72 = OUTLINED_FUNCTION_53_5(v68 + 8 * v70);
          OUTLINED_FUNCTION_25_16();
          GroupIdentifier.init(id:seq:)();
          RREntity.init(from:groupId:)(v72, v43, v31);
          OUTLINED_FUNCTION_10_8(v31);
          OUTLINED_FUNCTION_6_38(v44, v31);
          OUTLINED_FUNCTION_30_21(v83, v44);
          if ((OUTLINED_FUNCTION_51_13() & 1) == 0)
            v43 = OUTLINED_FUNCTION_13_33(0, *(_QWORD *)(v43 + 16) + 1);
          v68 = v71;
          v74 = *(_QWORD *)(v43 + 16);
          v73 = *(_QWORD *)(v43 + 24);
          if (v74 >= v73 >> 1)
            v43 = OUTLINED_FUNCTION_13_33(v73 > 1, v74 + 1);
          v75 = OUTLINED_FUNCTION_50_15();
          OUTLINED_FUNCTION_6_38(v75, v83);

          v105 = v43;
          v44 = v86;
          OUTLINED_FUNCTION_92(v86, *(uint64_t (**)(uint64_t, uint64_t))(v101 + 8));
          v43 = v88;
          v31 = v87;
          ++v70;
        }
        while (v69 != v70);
        goto LABEL_46;
      }
LABEL_53:
      __break(1u);
      return;
    }
  }
  else
  {
    v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v69)
      goto LABEL_30;
  }
LABEL_46:
  OUTLINED_FUNCTION_5();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_92(v79, *(uint64_t (**)(uint64_t, uint64_t))(v101 + 8));
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v76 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v76, (uint64_t)static Logger.siriContacts);
  v77 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_7_17(v77))
  {
    OUTLINED_FUNCTION_11_27();
    v104 = OUTLINED_FUNCTION_10_30();
    MEMORY[0] = 136315138;
    OUTLINED_FUNCTION_23();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_49_16();
  }

  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_7();
}

void static RREntity.makeDisambiguationGroup(for:with:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;

  OUTLINED_FUNCTION_32();
  v3 = v2;
  v40 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_9_5();
  v32 = v6;
  v7 = OUTLINED_FUNCTION_47_12();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_58_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  v13 = OUTLINED_FUNCTION_33_11();
  v39 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_9_5();
  v38 = v14;
  v15 = OUTLINED_FUNCTION_24_26();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_14_27();
  UUID.uuidString.getter();
  v30 = v0;
  v31 = v15;
  v29 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v29(v0, v15);
  v42 = MEMORY[0x24BEE4AF8];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    if (!v17)
      goto LABEL_20;
  }
  else
  {
    v17 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v17)
      goto LABEL_20;
  }
  type metadata accessor for UsoEntity();
  if (v17 < 1)
  {
    __break(1u);
    return;
  }
  v18 = 0;
  v16 = 0;
  v35 = v3 & 0xC000000000000001;
  v33 = v3;
  v37 = v8;
  v36 = v12;
  v34 = v17;
  do
  {
    if (v35)
      v19 = (id)MEMORY[0x2207D80C0](v18, v3);
    else
      v19 = OUTLINED_FUNCTION_53_5(v3 + 8 * v18);
    v20 = v19;
    v21 = v40;
    v22 = v20;
    OUTLINED_FUNCTION_25_16();
    GroupIdentifier.init(id:seq:)();
    v41 = v22;
    static UsoEntity.from(_:_:)((uint64_t)v21, v22);
    outlined bridged method (ob) of @objc INObject.identifier.getter(v22);
    if (!v23)
    {
      UUID.init()();
      UUID.uuidString.getter();
      v29(v30, v31);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v32, v1, v7);
    __swift_storeEnumTagSinglePayload(v32, 0, 1, v7);
    OUTLINED_FUNCTION_9_26();
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

    v17 = 0;
    v3 = v33;

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v1, v7);
    __swift_storeEnumTagSinglePayload(v36, 0, 1, v13);
    if (__swift_getEnumTagSinglePayload(v36, 1, v13) == 1)
    {

      outlined destroy of RREntity?(v36);
      v24 = v34;
    }
    else
    {
      OUTLINED_FUNCTION_56(v38, v36, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 32));
      v17 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = OUTLINED_FUNCTION_26_23(0, *(_QWORD *)(v42 + 16) + 1);
      v24 = v34;
      v26 = *(_QWORD *)(v17 + 16);
      v25 = *(_QWORD *)(v17 + 24);
      if (v26 >= v25 >> 1)
        v17 = OUTLINED_FUNCTION_26_23(v25 > 1, v26 + 1);
      *(_QWORD *)(v17 + 16) = v26 + 1;
      OUTLINED_FUNCTION_56(v17+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v26, v38, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 16));

      v42 = v17;
      OUTLINED_FUNCTION_92(v38, *(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
      v3 = v33;
    }
    ++v18;
  }
  while (v24 != v18);
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v27 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v27, (uint64_t)static Logger.siriContacts);
  v28 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_7_17(v28))
  {
    OUTLINED_FUNCTION_11_27();
    OUTLINED_FUNCTION_10_30();
    *(_DWORD *)v16 = 136315138;
    OUTLINED_FUNCTION_23();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_49_16();
  }

  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_7();
}

void static RREntity.makeDisambiguationGroup(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  OUTLINED_FUNCTION_32();
  v2 = v1;
  OUTLINED_FUNCTION_47_12();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_58_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v8 = OUTLINED_FUNCTION_33_11();
  v40 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v39 = (uint64_t)&v34 - v12;
  v13 = (_DWORD *)OUTLINED_FUNCTION_24_26();
  v14 = *((_QWORD *)v13 - 1);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_55_0();
  v17 = v16 - v15;
  UUID.init()();
  v38 = UUID.uuidString.getter();
  v19 = v18;
  (*(void (**)(uint64_t, _DWORD *))(v14 + 8))(v17, v13);
  v44 = MEMORY[0x24BEE4AF8];
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0)
      v13 = (_DWORD *)v2;
    else
      v13 = (_DWORD *)(v2 & 0xFFFFFFFFFFFFFF8);
    OUTLINED_FUNCTION_75_2();
    v20 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v20 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_75_2();
  }
  if (v20)
  {
    if (v20 < 1)
    {
      __break(1u);
      return;
    }
    v21 = 0;
    v13 = 0;
    v41 = v2 & 0xC000000000000001;
    v42 = v20;
    v36 = v0;
    v37 = v2;
    v35 = v11;
    do
    {
      if (v41)
        v22 = (id)MEMORY[0x2207D80C0](v21, v2);
      else
        v22 = OUTLINED_FUNCTION_53_5(v2 + 8 * v21);
      v23 = v22;
      OUTLINED_FUNCTION_25_16();
      GroupIdentifier.init(id:seq:)();
      RREntity.init(from:groupId:)(v23, v0, v7);
      OUTLINED_FUNCTION_10_8(v7);
      v25 = v39;
      v24 = v40;
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
      v26(v39, v7, v8);
      OUTLINED_FUNCTION_56((uint64_t)v11, v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
      v27 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v27 = OUTLINED_FUNCTION_43_15(0, *(_QWORD *)(v27 + 16) + 1);
      v29 = *(_QWORD *)(v27 + 16);
      v28 = *(_QWORD *)(v27 + 24);
      if (v29 >= v28 >> 1)
        v27 = OUTLINED_FUNCTION_43_15(v28 > 1, v29 + 1);
      *(_QWORD *)(v27 + 16) = v29 + 1;
      v30 = v40;
      v31 = v27
          + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))
          + *(_QWORD *)(v40 + 72) * v29;
      v11 = v35;
      v26(v31, (uint64_t)v35, v8);

      v44 = v27;
      OUTLINED_FUNCTION_92(v39, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
      v0 = v36;
      v2 = v37;
      ++v21;
    }
    while (v42 != v21);
  }
  OUTLINED_FUNCTION_5();
  swift_bridgeObjectRelease();
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v32 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v32, (uint64_t)static Logger.siriContacts);
  v33 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_7_17(v33))
  {
    OUTLINED_FUNCTION_11_27();
    v43 = OUTLINED_FUNCTION_10_30();
    *v13 = 136315138;
    OUTLINED_FUNCTION_23();
    OUTLINED_FUNCTION_75_2();
    OUTLINED_FUNCTION_49_16();
  }

  OUTLINED_FUNCTION_23();
  OUTLINED_FUNCTION_7();
}

uint64_t RREntity.init(from:groupId:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:_:)((uint64_t)a1, 0);
  if (v3)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    v12 = v11;
    type metadata accessor for CNContact();
    *v12 = _typeName(_:qualified:)();
    v12[1] = v13;
    v12[2] = 0xD000000000000017;
    v12[3] = 0x800000021FEE3450;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    v14 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a2, v14);
  }
  else
  {
    v16 = type metadata accessor for GroupIdentifier();
    v19[1] = a3;
    v17 = a2;
    v18 = *(_QWORD *)(v16 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v9, v17, v16);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v16);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v16);
  }
}

{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;

  v23 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UsoIdentifier();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:)((uint64_t)a1);
  if (v3)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    *v14 = _typeName(_:qualified:)();
    v14[1] = v15;
    v14[2] = 0xD00000000000001ELL;
    v14[3] = 0x800000021FEE3410;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    v16 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v23, v16);
  }
  else
  {
    v22[1] = a3;
    result = UsoEntity.usoIdentifiers.getter();
    if (*(_QWORD *)(result + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, result + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
      swift_bridgeObjectRelease();
      UsoIdentifier.value.getter();
      v18 = v23;
      v22[0] = v19;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v20 = type metadata accessor for GroupIdentifier();
      v21 = *(_QWORD *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v8, v18, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v20);
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v18, v20);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;

  v23 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UsoIdentifier();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:)((uint64_t)a1);
  if (v3)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    *v14 = _typeName(_:qualified:)();
    v14[1] = v15;
    v14[2] = 0xD00000000000001CLL;
    v14[3] = 0x800000021FEE33D0;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    v16 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v23, v16);
  }
  else
  {
    v22[1] = a3;
    result = UsoEntity.usoIdentifiers.getter();
    if (*(_QWORD *)(result + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, result + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
      swift_bridgeObjectRelease();
      UsoIdentifier.value.getter();
      v18 = v23;
      v22[0] = v19;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v20 = type metadata accessor for GroupIdentifier();
      v21 = *(_QWORD *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v8, v18, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v20);
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v18, v20);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;

  v23 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UsoIdentifier();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:)((uint64_t)a1);
  if (v3)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    *v14 = _typeName(_:qualified:)();
    v14[1] = v15;
    v14[2] = 0xD00000000000001DLL;
    v14[3] = 0x800000021FEE3390;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    v16 = type metadata accessor for GroupIdentifier();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v23, v16);
  }
  else
  {
    v22[1] = a3;
    result = UsoEntity.usoIdentifiers.getter();
    if (*(_QWORD *)(result + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, result + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), v9);
      swift_bridgeObjectRelease();
      UsoIdentifier.value.getter();
      v18 = v23;
      v22[0] = v19;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      v20 = type metadata accessor for GroupIdentifier();
      v21 = *(_QWORD *)(v20 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v8, v18, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v20);
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

      return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v18, v20);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void RREntity.init(from:)(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for UsoEntity();
  static UsoEntity.from(_:_:)((uint64_t)a1, 0);
  if (v1)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    v8 = v7;
    type metadata accessor for CNContact();
    *v8 = _typeName(_:qualified:)();
    v8[1] = v9;
    v8[2] = 0xD000000000000017;
    v8[3] = 0x800000021FEE3450;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

  }
  else
  {
    v10 = type metadata accessor for GroupIdentifier();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v10);
    RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();

  }
}

uint64_t outlined destroy of RREntity?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_6_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 176))(a1, a2, v2);
}

void OUTLINED_FUNCTION_8_26(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_10_30()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_11_27()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_13_33(char a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_14_27()
{
  return UUID.init()();
}

uint64_t OUTLINED_FUNCTION_15_23()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_16_19()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_17_20(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 160) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_24_26()
{
  return type metadata accessor for UUID();
}

id OUTLINED_FUNCTION_25_27(uint64_t a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(*(id *)(v2 - 368), a2);
}

uint64_t OUTLINED_FUNCTION_26_23(char a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_28_19(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_30_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 208))(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_35_12()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_37_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_40_9()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_42_8(char a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_43_15(char a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_44_13(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);

}

uint64_t OUTLINED_FUNCTION_47_12()
{
  return type metadata accessor for GroupIdentifier();
}

void OUTLINED_FUNCTION_49_16()
{
  JUMPOUT(0x2207D7DE4);
}

uint64_t OUTLINED_FUNCTION_50_15()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 16) = v1;
  return v0 + *(_QWORD *)(v3 - 192) + v2 * *(_QWORD *)(v3 - 200);
}

uint64_t OUTLINED_FUNCTION_51_13()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_54_13(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t ContactsEmailHandle.Builder.withEmailLabel(print:speak:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_14_9();
  v4 = v2 - v3;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  v8 = OUTLINED_FUNCTION_31_4();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  outlined init with take of SpeakableString?((uint64_t)v7, v4);
  v9 = v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailLabel;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v4, v9);
  swift_endAccess();
  return swift_retain();
}

uint64_t ContactsEmailHandle.Builder.__deallocating_deinit()
{
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailLabel);
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailHandle);
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

unint64_t static ContactsEmailHandle.catTypeName.getter()
{
  return 0xD000000000000014;
}

uint64_t ContactsEmailHandle.init(builder:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_55_0();
  *(_QWORD *)(v0 + 16) = 0;
  OUTLINED_FUNCTION_7_20();
  OUTLINED_FUNCTION_13_23();
  OUTLINED_FUNCTION_11_16(OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel);
  OUTLINED_FUNCTION_7_20();
  OUTLINED_FUNCTION_13_23();
  swift_release();
  OUTLINED_FUNCTION_11_16(OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle);
  return v0;
}

uint64_t ContactsEmailHandle.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_9();
  v10 = v8 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - v12;
  v14 = a1 == 0x62614C6C69616D65 && a2 == 0xEA00000000006C65;
  if (v14 || (OUTLINED_FUNCTION_8_14() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel, (uint64_t)v13);
    v15 = OUTLINED_FUNCTION_31_4();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15) != 1)
    {
      v17 = OUTLINED_FUNCTION_9_18();
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v17, v13, v15);
    }
    v16 = (uint64_t)v13;
    goto LABEL_16;
  }
  if (a1 != 0x6E61486C69616D65 || a2 != 0xEB00000000656C64)
  {
    result = OUTLINED_FUNCTION_8_14();
    if ((result & 1) == 0)
      goto LABEL_17;
  }
  outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle, v10);
  v20 = OUTLINED_FUNCTION_31_4();
  if (__swift_getEnumTagSinglePayload(v10, 1, v20) == 1)
  {
    v16 = v10;
LABEL_16:
    result = outlined destroy of SpeakableString?(v16);
LABEL_17:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  v21 = OUTLINED_FUNCTION_9_18();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v21, v10, v20);
}

SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional __swiftcall ContactsEmailHandle.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsEmailHandle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriContactsIntents_ContactsEmailHandle_CodingKeys_emailHandle;
  else
    v4.value = SiriContactsIntents_ContactsEmailHandle_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t ContactsEmailHandle.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E61486C69616D65;
  else
    return 0x62614C6C69616D65;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactsEmailHandle.CodingKeys(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactsEmailHandle.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsEmailHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsEmailHandle.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsEmailHandle.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional result;

  result.value = ContactsEmailHandle.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsEmailHandle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactsEmailHandle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsEmailHandle.CodingKeys()
{
  char *v0;

  return ContactsEmailHandle.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsEmailHandle.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsEmailHandle::CodingKeys_optional result;

  result.value = ContactsEmailHandle.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsEmailHandle.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsEmailHandle.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ContactsEmailHandle.deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel);
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle);
  return v0;
}

uint64_t ContactsEmailHandle.__deallocating_deinit()
{
  ContactsEmailHandle.deinit();
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContactsEmailHandle()
{
  return type metadata accessor for ContactsEmailHandle(0);
}

uint64_t type metadata accessor for ContactsEmailHandle(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsEmailHandle);
}

void type metadata completion function for ContactsEmailHandle()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsEmailHandle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsEmailHandle.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
  OUTLINED_FUNCTION_2_28();
  if (!v1)
    OUTLINED_FUNCTION_2_28();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ContactsEmailHandle.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ContactsEmailHandle.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsEmailHandle.Builder()
{
  return type metadata accessor for ContactsEmailHandle.Builder(0);
}

uint64_t type metadata accessor for ContactsEmailHandle.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsEmailHandle.Builder);
}

uint64_t ContactsEmailHandle.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_14_9();
  MEMORY[0x24BDAC7A8](v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsEmailHandle.CodingKeys>);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  *(_QWORD *)(v3 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsEmailHandle(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    OUTLINED_FUNCTION_3_17();
    OUTLINED_FUNCTION_14_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailLabel);
    OUTLINED_FUNCTION_3_17();
    OUTLINED_FUNCTION_0_27();
    OUTLINED_FUNCTION_14_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsEmailHandle_emailHandle);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v3;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsEmailHandle()
{
  static ContactsEmailHandle.catTypeName.getter();
  return 0xD000000000000014;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsEmailHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return ContactsEmailHandle.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsEmailHandle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContactsEmailHandle.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsEmailHandle(_QWORD *a1)
{
  return ContactsEmailHandle.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsEmailHandle()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsEmailHandle and conformance ContactsEmailHandle, type metadata accessor for ContactsEmailHandle, (uint64_t)&protocol conformance descriptor for ContactsEmailHandle);
}

uint64_t base witness table accessor for Encodable in ContactsEmailHandle()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsEmailHandle and conformance ContactsEmailHandle, type metadata accessor for ContactsEmailHandle, (uint64_t)&protocol conformance descriptor for ContactsEmailHandle);
}

unint64_t lazy protocol witness table accessor for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsEmailHandle.CodingKeys, &type metadata for ContactsEmailHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsEmailHandle.CodingKeys, &type metadata for ContactsEmailHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsEmailHandle.CodingKeys, &type metadata for ContactsEmailHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsEmailHandle.CodingKeys, &type metadata for ContactsEmailHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsEmailHandle.CodingKeys and conformance ContactsEmailHandle.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContactsEmailHandle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FEB08A8 + 4 * byte_21FEDD605[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FEB08DC + 4 * asc_21FEDD600[v4]))();
}

uint64_t sub_21FEB08DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FEB08E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FEB08ECLL);
  return result;
}

uint64_t sub_21FEB08F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FEB0900);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FEB0904(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FEB090C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContactsEmailHandle.CodingKeys()
{
  return &type metadata for ContactsEmailHandle.CodingKeys;
}

uint64_t type metadata accessor for GetContactAttributeCATsModern()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactAttributeCATsModern;
  if (!type metadata singleton initialization cache for GetContactAttributeCATsModern)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactAttributeCATsModern()
{
  return swift_initClassMetadata2();
}

uint64_t GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[5] = a4;
  v7[6] = v6;
  OUTLINED_FUNCTION_17_21(a1, a2, a3, a4, a5, a6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[7] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_81_4();
  OUTLINED_FUNCTION_15_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v4 = OUTLINED_FUNCTION_13_3();
  v5 = (__n128 *)OUTLINED_FUNCTION_40_10(v4);
  OUTLINED_FUNCTION_2_13(v5, (__n128)xmmword_21FED9630);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsAddressHandle]);
  v7 = OUTLINED_FUNCTION_44_14(v6);
  v8 = OUTLINED_FUNCTION_0_42(v7, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_26_24(v8, v9, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_8_27(v10);
  if (v11)
  {
    OUTLINED_FUNCTION_66_4();
    v12 = OUTLINED_FUNCTION_24_11();
    OUTLINED_FUNCTION_12_5(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_25_28();
    OUTLINED_FUNCTION_13_34((uint64_t)v13);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_24_11();
  }
  v14 = OUTLINED_FUNCTION_7_33();
  if (v0)
  {
    v14 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(_QWORD *)(v2 + 200) = 0;
    *(_QWORD *)(v2 + 208) = 0;
  }
  OUTLINED_FUNCTION_19_25(v14);
  OUTLINED_FUNCTION_12_30(v15);
  OUTLINED_FUNCTION_20_22();
  v16 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v1 + 72) = v16;
  *v16 = v1;
  v16[1] = GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  v17 = OUTLINED_FUNCTION_10_31(v3 + 21);
  return OUTLINED_FUNCTION_5_28(v17, v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_4_35();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_1();
  }
  else
  {
    OUTLINED_FUNCTION_36_14();
    OUTLINED_FUNCTION_14_0();
    v2 = OUTLINED_FUNCTION_19_23();
    return OUTLINED_FUNCTION_1_2(v2, v3);
  }
}

uint64_t GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[5] = a4;
  v7[6] = v6;
  OUTLINED_FUNCTION_17_21(a1, a2, a3, a4, a5, a6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[7] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_81_4();
  OUTLINED_FUNCTION_15_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v4 = OUTLINED_FUNCTION_13_3();
  v5 = (__n128 *)OUTLINED_FUNCTION_40_10(v4);
  OUTLINED_FUNCTION_2_13(v5, (__n128)xmmword_21FED9630);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsEmailHandle]);
  v7 = OUTLINED_FUNCTION_44_14(v6);
  v8 = OUTLINED_FUNCTION_0_42(v7, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_26_24(v8, v9, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_8_27(v10);
  if (v11)
  {
    OUTLINED_FUNCTION_66_4();
    v12 = OUTLINED_FUNCTION_24_11();
    OUTLINED_FUNCTION_12_5(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_25_28();
    OUTLINED_FUNCTION_13_34((uint64_t)v13);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_24_11();
  }
  v14 = OUTLINED_FUNCTION_7_33();
  if (v0)
  {
    v14 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(_QWORD *)(v2 + 200) = 0;
    *(_QWORD *)(v2 + 208) = 0;
  }
  OUTLINED_FUNCTION_19_25(v14);
  OUTLINED_FUNCTION_12_30(v15);
  OUTLINED_FUNCTION_20_22();
  v16 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v1 + 72) = v16;
  *v16 = v1;
  v16[1] = GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  v17 = OUTLINED_FUNCTION_10_31(v3 + 19);
  return OUTLINED_FUNCTION_5_28(v17, v18, v19, v20);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_4_35();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_1();
  }
  else
  {
    OUTLINED_FUNCTION_36_14();
    OUTLINED_FUNCTION_14_0();
    v2 = OUTLINED_FUNCTION_19_23();
    return OUTLINED_FUNCTION_1_2(v2, v3);
  }
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_52_13();
  OUTLINED_FUNCTION_14_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GetContactAttributeCATsModern.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  _QWORD *v7;

  v7[5] = a4;
  v7[6] = v6;
  OUTLINED_FUNCTION_17_21(a1, a2, a3, a4, a5, a6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[7] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_81_4();
  OUTLINED_FUNCTION_15_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v4 = OUTLINED_FUNCTION_13_3();
  v5 = (__n128 *)OUTLINED_FUNCTION_40_10(v4);
  OUTLINED_FUNCTION_2_13(v5, (__n128)xmmword_21FED9630);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsPhoneHandle]);
  v7 = OUTLINED_FUNCTION_44_14(v6);
  v8 = OUTLINED_FUNCTION_0_42(v7, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_26_24(v8, v9, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_8_27(v10);
  if (v11)
  {
    OUTLINED_FUNCTION_66_4();
    v12 = OUTLINED_FUNCTION_24_11();
    OUTLINED_FUNCTION_12_5(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_25_28();
    OUTLINED_FUNCTION_13_34((uint64_t)v13);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_24_11();
  }
  v14 = OUTLINED_FUNCTION_7_33();
  if (v0)
  {
    v14 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(_QWORD *)(v2 + 200) = 0;
    *(_QWORD *)(v2 + 208) = 0;
  }
  OUTLINED_FUNCTION_19_25(v14);
  OUTLINED_FUNCTION_12_30(v15);
  OUTLINED_FUNCTION_20_22();
  v16 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v1 + 72) = v16;
  *v16 = v1;
  v16[1] = GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  v17 = OUTLINED_FUNCTION_10_31(v3 + 19);
  return OUTLINED_FUNCTION_5_28(v17, v18, v19, v20);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = v7;
  *(_BYTE *)(v8 + 90) = a7;
  OUTLINED_FUNCTION_17_21(a1, a2, a3, a4, a5, a6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v8 + 56) = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_81_4();
  OUTLINED_FUNCTION_15_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v4 = OUTLINED_FUNCTION_13_3();
  v5 = (__n128 *)OUTLINED_FUNCTION_40_10(v4);
  OUTLINED_FUNCTION_2_13(v5, (__n128)xmmword_21FED9640);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsAddressHandle]);
  v7 = OUTLINED_FUNCTION_44_14(v6);
  v8 = OUTLINED_FUNCTION_0_42(v7, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_26_24(v8, v9, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_8_27(v10);
  if (v11)
  {
    OUTLINED_FUNCTION_66_4();
    v12 = OUTLINED_FUNCTION_24_11();
    OUTLINED_FUNCTION_12_5(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_25_28();
    OUTLINED_FUNCTION_13_34((uint64_t)v13);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_24_11();
  }
  v14 = OUTLINED_FUNCTION_7_33();
  if (v0)
  {
    v14 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(_QWORD *)(v2 + 200) = 0;
    *(_QWORD *)(v2 + 208) = 0;
  }
  OUTLINED_FUNCTION_34_15(v14);
  OUTLINED_FUNCTION_14_28();
  *(_BYTE *)(v2 + 336) = v15;
  OUTLINED_FUNCTION_53_2();
  v16 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v1 + 72) = v16;
  *v16 = v1;
  v16[1] = GetContactAttributeCATsModern.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  v17 = OUTLINED_FUNCTION_10_31(v3 + 26);
  return OUTLINED_FUNCTION_5_28(v17, v18, v19, v20);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v5 + 72) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)()
{
  uint64_t v0;
  unint64_t v1;
  __n128 *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v15)(void);

  v1 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (__n128 *)OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 48) = v2;
  OUTLINED_FUNCTION_5_9(v2, (__n128)xmmword_21FED9150);
  if (v1)
  {
    v3 = type metadata accessor for DialogCalendar();
    v4 = v1;
  }
  else
  {
    v3 = OUTLINED_FUNCTION_51_14();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v5 = *(_QWORD *)(v0 + 24);
  v2[3].n128_u64[0] = v4;
  v2[4].n128_u64[1] = v3;
  v2[5].n128_u64[0] = 0x6F666E49656761;
  v2[5].n128_u64[1] = 0xE700000000000000;
  if (v5)
  {
    type metadata accessor for ContactsAgeInfo();
    v6 = v5;
  }
  else
  {
    OUTLINED_FUNCTION_51_14();
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  v7 = *(_QWORD *)(v0 + 32);
  v2[6].n128_u64[0] = v6;
  OUTLINED_FUNCTION_28_8();
  v2[7].n128_u64[1] = v8;
  v2[8].n128_u64[0] = v9;
  v2[8].n128_u64[1] = 0xE700000000000000;
  v10 = 0;
  if (v7)
  {
    v10 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[9].n128_u64[1] = 0;
    v2[10].n128_u64[0] = 0;
  }
  v11 = *(_BYTE *)(v0 + 72);
  v2[9].n128_u64[0] = v7;
  v2[10].n128_u64[1] = v10;
  v2[11].n128_u64[0] = 1699574633;
  v2[11].n128_u64[1] = 0xE400000000000000;
  v2[13].n128_u64[1] = MEMORY[0x24BEE1328];
  v2[12].n128_u8[0] = v11;
  OUTLINED_FUNCTION_20_22();
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v12;
  *v12 = v0;
  v12[1] = GetContactAttributeCATsModern.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:);
  OUTLINED_FUNCTION_38_14();
  return OUTLINED_FUNCTION_37_16(0xD000000000000028, v13, (uint64_t)v2, v15);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_28_20();
  if (v1)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_1();
  }
  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_1_2(v0, *(uint64_t (**)(void))(v2 + 8));
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GetContactAttributeCATsModern.intentHandledShowBirthday(birthdayInfo:contact:isMe:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowBirthday(birthdayInfo:contact:isMe:)()
{
  uint64_t v0;
  unint64_t v1;
  __n128 *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v12)(void);

  v1 = *(_QWORD *)(v0 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (__n128 *)OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 40) = v2;
  OUTLINED_FUNCTION_5_9(v2, (__n128)xmmword_21FED8CA0);
  if (v1)
  {
    type metadata accessor for DialogCalendar();
    v3 = v1;
  }
  else
  {
    OUTLINED_FUNCTION_51_14();
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v4 = *(_QWORD *)(v0 + 24);
  v2[3].n128_u64[0] = v3;
  OUTLINED_FUNCTION_28_8();
  v2[4].n128_u64[1] = v5;
  v2[5].n128_u64[0] = v6;
  v2[5].n128_u64[1] = 0xE700000000000000;
  v7 = 0;
  if (v4)
  {
    v7 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[6].n128_u64[1] = 0;
    v2[7].n128_u64[0] = 0;
  }
  v8 = *(_BYTE *)(v0 + 64);
  v2[6].n128_u64[0] = v4;
  v2[7].n128_u64[1] = v7;
  v2[8].n128_u64[0] = 1699574633;
  v2[8].n128_u64[1] = 0xE400000000000000;
  v2[10].n128_u64[1] = MEMORY[0x24BEE1328];
  v2[9].n128_u8[0] = v8;
  v12 = (uint64_t (*)(void))((int)*MEMORY[0x24BE92A08] + MEMORY[0x24BE92A08]);
  OUTLINED_FUNCTION_53_2();
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v9;
  *v9 = v0;
  v9[1] = GetContactAttributeCATsModern.intentHandledShowBirthday(birthdayInfo:contact:isMe:);
  OUTLINED_FUNCTION_38_14();
  return OUTLINED_FUNCTION_33_14(0xD00000000000002DLL, v10, (uint64_t)v2, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  OUTLINED_FUNCTION_40_0();
  v4 = *v3;
  *v5 = v4;
  *(_QWORD *)(v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_1();
  }
  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_1_2(v0, *(uint64_t (**)(void))(v4 + 8));
  }
}

uint64_t GetContactAttributeCATsModern.intentHandledShowCompany(isMe:companyName:contact:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 72) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v4 + 40) = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowCompany(isMe:companyName:contact:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t (*v17)(void);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21FED8CA0;
  *(_QWORD *)(v3 + 32) = 1699574633;
  *(_QWORD *)(v3 + 40) = 0xE400000000000000;
  v4 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v3 + 48) = v2;
  v5 = (uint64_t *)(v3 + 96);
  *(_QWORD *)(v3 + 72) = v4;
  *(_QWORD *)(v3 + 80) = 0x4E796E61706D6F63;
  *(_QWORD *)(v3 + 88) = 0xEB00000000656D61;
  OUTLINED_FUNCTION_21_8(v3, v6, &demangling cache variable for type metadata for SpeakableString?);
  v7 = OUTLINED_FUNCTION_31_4();
  v8 = OUTLINED_FUNCTION_42_9(v7);
  if ((_DWORD)v8 == 1)
  {
    OUTLINED_FUNCTION_12_5(v8, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v3 + 112) = 0u;
  }
  else
  {
    *(_QWORD *)(v3 + 120) = v1;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
    OUTLINED_FUNCTION_24_5((uint64_t)boxed_opaque_existential_1);
  }
  v10 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_0_12();
  *(_QWORD *)(v3 + 128) = v11;
  *(_QWORD *)(v3 + 136) = v12;
  v13 = 0;
  if (v10)
  {
    v13 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 160) = 0;
  }
  *(_QWORD *)(v3 + 144) = v10;
  *(_QWORD *)(v3 + 168) = v13;
  v17 = (uint64_t (*)(void))((int)*MEMORY[0x24BE92A08] + MEMORY[0x24BE92A08]);
  OUTLINED_FUNCTION_53_2();
  v14 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v0 + 56) = v14;
  *v14 = v0;
  v14[1] = GetContactAttributeCATsModern.intentHandledShowCompany(isMe:companyName:contact:);
  OUTLINED_FUNCTION_38_14();
  return OUTLINED_FUNCTION_33_14(0xD00000000000002CLL, v15, v3, v17);
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_28_20();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_1();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_0();
    v2 = OUTLINED_FUNCTION_19_23();
    return OUTLINED_FUNCTION_1_2(v2, v3);
  }
}

uint64_t GetContactAttributeCATsModern.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = v7;
  *(_BYTE *)(v8 + 90) = a7;
  OUTLINED_FUNCTION_17_21(a1, a2, a3, a4, a5, a6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v8 + 56) = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_81_4();
  OUTLINED_FUNCTION_15_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v4 = OUTLINED_FUNCTION_13_3();
  v5 = (__n128 *)OUTLINED_FUNCTION_40_10(v4);
  OUTLINED_FUNCTION_2_13(v5, (__n128)xmmword_21FED9640);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsEmailHandle]);
  v7 = OUTLINED_FUNCTION_44_14(v6);
  v8 = OUTLINED_FUNCTION_0_42(v7, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_26_24(v8, v9, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_8_27(v10);
  if (v11)
  {
    OUTLINED_FUNCTION_66_4();
    v12 = OUTLINED_FUNCTION_24_11();
    OUTLINED_FUNCTION_12_5(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_25_28();
    OUTLINED_FUNCTION_13_34((uint64_t)v13);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_24_11();
  }
  v14 = OUTLINED_FUNCTION_7_33();
  if (v0)
  {
    v14 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(_QWORD *)(v2 + 200) = 0;
    *(_QWORD *)(v2 + 208) = 0;
  }
  OUTLINED_FUNCTION_34_15(v14);
  OUTLINED_FUNCTION_14_28();
  *(_BYTE *)(v2 + 336) = v15;
  OUTLINED_FUNCTION_53_2();
  v16 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v1 + 72) = v16;
  *v16 = v1;
  v16[1] = GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  v17 = OUTLINED_FUNCTION_10_31(v3 + 24);
  return OUTLINED_FUNCTION_5_28(v17, v18, v19, v20);
}

uint64_t GetContactAttributeCATsModern.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:)(char a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 24) = a4;
  *(_QWORD *)(v6 + 32) = v5;
  *(_BYTE *)(v6 + 82) = a5;
  *(_QWORD *)(v6 + 16) = a3;
  *(_BYTE *)(v6 + 81) = a2;
  *(_BYTE *)(v6 + 80) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v6 + 40) = swift_task_alloc();
  *(_QWORD *)(v6 + 48) = swift_task_alloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int EnumTagSinglePayload;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v24)(void);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 81);
  v3 = *(_BYTE *)(v0 + 80);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v4 = OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 56) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_21FED9630;
  *(_QWORD *)(v4 + 32) = 0x656D616E6B63696ELL;
  *(_QWORD *)(v4 + 40) = 0xEF74736575716552;
  v5 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v4 + 48) = v3;
  *(_QWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 80) = 0x656D614E7473616CLL;
  *(_QWORD *)(v4 + 88) = 0xEF74736575716552;
  *(_BYTE *)(v4 + 96) = v2;
  v6 = (uint64_t *)(v4 + 144);
  *(_QWORD *)(v4 + 120) = v5;
  *(_QWORD *)(v4 + 128) = 0x756C6156656D616ELL;
  *(_QWORD *)(v4 + 136) = 0xE900000000000065;
  OUTLINED_FUNCTION_21_8(v4, v7, &demangling cache variable for type metadata for SpeakableString?);
  v8 = OUTLINED_FUNCTION_31_4();
  v9 = OUTLINED_FUNCTION_42_9(v8);
  if ((_DWORD)v9 == 1)
  {
    OUTLINED_FUNCTION_12_5(v9, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
  }
  else
  {
    *(_QWORD *)(v4 + 168) = v1;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v6);
    OUTLINED_FUNCTION_24_5((uint64_t)boxed_opaque_existential_1);
  }
  v11 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_0_12();
  *(_QWORD *)(v4 + 176) = v12;
  *(_QWORD *)(v4 + 184) = v13;
  if (v11)
  {
    v14 = type metadata accessor for DialogPerson();
    v15 = v11;
  }
  else
  {
    v14 = OUTLINED_FUNCTION_51_14();
    *(_QWORD *)(v4 + 200) = 0;
    *(_QWORD *)(v4 + 208) = 0;
  }
  v16 = *(_BYTE *)(v0 + 82);
  *(_QWORD *)(v4 + 192) = v15;
  *(_QWORD *)(v4 + 216) = v14;
  *(_QWORD *)(v4 + 224) = 1699574633;
  *(_QWORD *)(v4 + 232) = 0xE400000000000000;
  *(_BYTE *)(v4 + 240) = v16;
  *(_QWORD *)(v4 + 264) = v5;
  strcpy((char *)(v4 + 272), "nicknameValue");
  *(_WORD *)(v4 + 286) = -4864;
  if (v11)
  {
    v17 = *(_QWORD *)(v0 + 40);
    swift_retain();
    DialogPerson.nickname.getter();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v17, 1, v1);
    v19 = *(_QWORD *)(v0 + 40);
    if (EnumTagSinglePayload != 1)
    {
      *(_QWORD *)(v4 + 312) = v1;
      v20 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v4 + 288));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(v20, v19, v1);
      goto LABEL_12;
    }
    outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v0 + 40), &demangling cache variable for type metadata for SpeakableString?);
  }
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
LABEL_12:
  v24 = (uint64_t (*)(void))((int)*MEMORY[0x24BE92A08] + MEMORY[0x24BE92A08]);
  v21 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v21;
  *v21 = v0;
  v21[1] = GetContactAttributeCATsModern.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:);
  OUTLINED_FUNCTION_38_14();
  return OUTLINED_FUNCTION_37_16(0xD000000000000029, v22, v4, v24);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_40_0();
  *v3 = *v2;
  *(_QWORD *)(v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_1();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_0();
    swift_task_dealloc();
    v5 = OUTLINED_FUNCTION_19_23();
    return OUTLINED_FUNCTION_1_2(v5, v6);
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:hasAnyMatchingLabels:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, char a7, char a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 40) = a4;
  *(_QWORD *)(v9 + 48) = v8;
  *(_BYTE *)(v9 + 91) = a8;
  *(_BYTE *)(v9 + 90) = a7;
  OUTLINED_FUNCTION_17_21(a1, a2, a3, a4, a5, a6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v9 + 56) = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeCATsModern.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:hasAnyMatchingLabels:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);

  OUTLINED_FUNCTION_81_4();
  OUTLINED_FUNCTION_15_24();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v4 = OUTLINED_FUNCTION_13_3();
  v5 = (__n128 *)OUTLINED_FUNCTION_40_10(v4);
  OUTLINED_FUNCTION_2_13(v5, (__n128)xmmword_21FEDD880);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactsPhoneHandle]);
  v7 = OUTLINED_FUNCTION_44_14(v6);
  v8 = OUTLINED_FUNCTION_0_42(v7, (uint64_t)"alternativeHandles");
  OUTLINED_FUNCTION_26_24(v8, v9, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_8_27(v10);
  if (v11)
  {
    OUTLINED_FUNCTION_66_4();
    v12 = OUTLINED_FUNCTION_24_11();
    OUTLINED_FUNCTION_12_5(v12, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_25_28();
    OUTLINED_FUNCTION_13_34((uint64_t)v13);
    OUTLINED_FUNCTION_66_4();
    OUTLINED_FUNCTION_24_11();
  }
  v14 = OUTLINED_FUNCTION_7_33();
  if (v0)
  {
    v14 = type metadata accessor for DialogPerson();
  }
  else
  {
    *(_QWORD *)(v2 + 200) = 0;
    *(_QWORD *)(v2 + 208) = 0;
  }
  v15 = *(_BYTE *)(v1 + 91);
  v16 = *(_BYTE *)(v1 + 90);
  v17 = *(_BYTE *)(v1 + 89);
  v18 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)(v2 + 192) = v0;
  *(_QWORD *)(v2 + 216) = v14;
  *(_QWORD *)(v2 + 224) = 1699574633;
  *(_QWORD *)(v2 + 232) = 0xE400000000000000;
  v19 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v2 + 240) = v18;
  *(_QWORD *)(v2 + 264) = v19;
  strcpy((char *)(v2 + 272), "hasSameLabels");
  *(_WORD *)(v2 + 286) = -4864;
  *(_BYTE *)(v2 + 288) = v17;
  *(_QWORD *)(v2 + 312) = v19;
  *(_QWORD *)(v2 + 320) = v3 + 2;
  *(_QWORD *)(v2 + 328) = 0x800000021FEE3560;
  *(_BYTE *)(v2 + 336) = v16;
  *(_QWORD *)(v2 + 360) = v19;
  *(_QWORD *)(v2 + 368) = 0x4D6563696F567369;
  *(_QWORD *)(v2 + 376) = 0xEB0000000065646FLL;
  *(_QWORD *)(v2 + 408) = v19;
  *(_BYTE *)(v2 + 384) = v15;
  OUTLINED_FUNCTION_53_2();
  v20 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v1 + 72) = v20;
  *v20 = v1;
  v20[1] = GetContactAttributeCATsModern.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:);
  v21 = OUTLINED_FUNCTION_10_31(v3 + 24);
  return OUTLINED_FUNCTION_5_28(v21, v22, v23, v24);
}

uint64_t ObjC metadata update function for GetContactAttributeCATsModern()
{
  return type metadata accessor for GetContactAttributeCATsModern();
}

uint64_t OUTLINED_FUNCTION_0_42@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 88) = (a2 - 32) | 0x8000000000000000;
  *(_QWORD *)(v3 + 96) = v2;
  *(_QWORD *)(v3 + 120) = result;
  strcpy((char *)(v3 + 128), "requestedLabel");
  *(_BYTE *)(v3 + 143) = -18;
  return result;
}

uint64_t OUTLINED_FUNCTION_4_35()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_5_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_7_33()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = 0x746361746E6F63;
  *(_QWORD *)(v0 + 184) = 0xE700000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_8_27(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_10_31@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

void OUTLINED_FUNCTION_12_30(char a1@<W8>)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 240) = v1;
  *(_QWORD *)(v3 + 264) = v2;
  *(_QWORD *)(v3 + 272) = 0x4D6563696F567369;
  *(_QWORD *)(v3 + 280) = 0xEB0000000065646FLL;
  *(_QWORD *)(v3 + 312) = v2;
  *(_BYTE *)(v3 + 288) = a1;
}

uint64_t OUTLINED_FUNCTION_13_34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, v1, v2);
}

void OUTLINED_FUNCTION_14_28()
{
  char v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 240) = v1;
  *(_QWORD *)(v3 + 264) = v2;
  strcpy((char *)(v3 + 272), "hasSameLabels");
  *(_WORD *)(v3 + 286) = -4864;
  *(_BYTE *)(v3 + 288) = v0;
  *(_QWORD *)(v3 + 312) = v2;
  *(_QWORD *)(v3 + 320) = 0x4D6563696F567369;
  *(_QWORD *)(v3 + 328) = 0xEB0000000065646FLL;
  *(_QWORD *)(v3 + 360) = v2;
}

uint64_t OUTLINED_FUNCTION_17_21(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 89) = a6;
  *(_BYTE *)(v6 + 88) = a5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_19_25(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v2[24] = v1;
  v2[27] = result;
  v2[28] = 1699574633;
  v2[29] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_22()
{
  return swift_retain();
}

uint64_t *OUTLINED_FUNCTION_25_28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 168) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_26_24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  return outlined init with copy of URL?(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_28_20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_33_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_34_15(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v2[24] = v1;
  v2[27] = result;
  v2[28] = 1699574633;
  v2[29] = 0xE400000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_36_14()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_37_16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_40_10(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_42_9(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_44_14(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[6] = v1;
  v2[9] = result;
  v2[10] = v3;
  return result;
}

uint64_t OUTLINED_FUNCTION_51_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_52_13()
{
  return swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for siriContacts()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.siriContacts);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  swift_bridgeObjectRetain();
  return Logger.init(subsystem:category:)();
}

uint64_t static Logger.siriContacts.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

void one-time initialization function for siriContacts()
{
  strcpy((char *)&static LogConst.Category.siriContacts, "SiriContacts");
  algn_25558DD58[5] = 0;
  *(_WORD *)&algn_25558DD58[6] = -5120;
}

void GetContactAttributeViewBuilder.makeViewsForWatch()()
{
  unint64_t *v0;
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[7];
  uint64_t v22;
  _QWORD v23[10];

  v1 = v0;
  v2 = type metadata accessor for Locale();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v6, (uint64_t)static Logger.siriContacts);
  v7 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_42(v7))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_6_39(&dword_21FE16000, v8, v9, "#GetContactAttributeViewBuilder Constructing view for watchOS.");
    OUTLINED_FUNCTION_0();
  }

  v10 = v0[9];
  outlined init with copy of DeviceState((uint64_t)(v1 + 4), (uint64_t)v23);
  v23[8] = &type metadata for InstalledAppsProvider;
  v23[9] = &protocol witness table for InstalledAppsProvider;
  v22 = v10;
  v11 = *v1;
  v12 = (void *)v1[1];
  v13 = (void *)v1[3];
  __swift_project_boxed_opaque_existential_1(v1 + 4, v1[7]);
  swift_retain();
  dispatch thunk of DeviceState.siriLocale.getter();
  v21[5] = Locale.identifier.getter();
  v21[6] = v14;
  v21[3] = 45;
  v21[4] = 0xE100000000000000;
  v21[1] = 95;
  v21[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  v15 = OUTLINED_FUNCTION_33_5();
  v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  WatchViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)(v11, v12, v13, v15, v17);
  v19 = v18;
  swift_bridgeObjectRelease();
  outlined destroy of WatchViews((uint64_t)&v22);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v20 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v20 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v20 + 32) = v19;
    v22 = v20;
    specialized Array._endMutation()();
  }
  OUTLINED_FUNCTION_7();
}

uint64_t GetContactAttributeViewBuilder.makeViewsForMac()()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  os_log_type_t v3;
  __n128 *v4;
  Class isa;
  objc_class *v6;
  id v7;
  Class v8;
  unint64_t v9;
  _QWORD v11[5];

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
  v3 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_4_31(&dword_21FE16000, v0, v1, "#GetContactAttributeViewBuilder Constructing PersonSnippet with display properties for macOS.");
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v4 = (__n128 *)OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_11_28(v4, (__n128)xmmword_21FED8AB0);
  isa = v0[3].isa;
  v6 = v0[1].isa;
  v7 = -[objc_class contactAttributeType](isa, sel_contactAttributeType);
  v8 = v0[2].isa;
  v11[3] = &type metadata for InstalledAppsProvider;
  v11[4] = &protocol witness table for InstalledAppsProvider;
  SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(v6, (uint64_t)v7, v8, (uint64_t)v11);
  v4[2].n128_u64[0] = v9;
  v11[0] = v4;
  specialized Array._endMutation()();
  return v11[0];
}

uint64_t GetContactAttributeViewBuilder.makeViewsForCarPlay()()
{
  return GetContactAttributeViewBuilder.makeViewsForCarPlay()("#GetContactAttributeViewBuilder Constructing no views for CarPlay.");
}

uint64_t GetContactAttributeViewBuilder.makeViewsForCarDND()()
{
  return GetContactAttributeViewBuilder.makeViewsForCarPlay()("#GetContactAttributeViewBuilder Constructing no views for CarDNDMode.");
}

uint64_t GetContactAttributeViewBuilder.makeViewsForCarPlay()(const char *a1)
{
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v4;
  os_log_type_t v5;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v4, (uint64_t)static Logger.siriContacts);
  v5 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v5))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_4_31(&dword_21FE16000, v1, v2, a1);
    OUTLINED_FUNCTION_0();
  }

  return MEMORY[0x24BEE4AF8];
}

void GetContactAttributeViewBuilder.makeViewsForIOS()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  unint64_t v15;
  _QWORD v16[7];
  _QWORD v17[7];

  v1 = v0;
  v16[0] = type metadata accessor for Locale();
  v2 = *(_QWORD *)(v16[0] - 8);
  MEMORY[0x24BDAC7A8](v16[0]);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v5, (uint64_t)static Logger.siriContacts);
  v6 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_42(v6))
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_6_39(&dword_21FE16000, v7, v8, "#GetContactAttributeViewBuilder Constructing compact view for iOS.");
    OUTLINED_FUNCTION_0();
  }

  v9 = v0[9];
  v17[4] = &type metadata for InstalledAppsProvider;
  v17[5] = &protocol witness table for InstalledAppsProvider;
  v17[0] = v9;
  v17[6] = 0;
  __swift_project_boxed_opaque_existential_1(v1 + 4, v1[7]);
  swift_retain();
  dispatch thunk of DeviceState.siriLocale.getter();
  v16[5] = Locale.identifier.getter();
  v16[6] = v10;
  v16[3] = 45;
  v16[4] = 0xE100000000000000;
  v16[1] = 95;
  v16[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_33_5();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, _QWORD))(v2 + 8))(v4, v16[0]);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  v12 = v11;
  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  if (v12)
  {
    v13 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v13 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v13 + 32) = v12;
    v17[0] = v13;
  }
  else
  {
    v14 = (__n128 *)OUTLINED_FUNCTION_55();
    OUTLINED_FUNCTION_11_28(v14, (__n128)xmmword_21FED8AB0);
    SAABPersonSnippet.init(_:isMe:)((id)v1[1], (id)v1[2]);
    v14[2].n128_u64[0] = v15;
    v17[0] = v14;
  }
  specialized Array._endMutation()();
  OUTLINED_FUNCTION_7();
}

unint64_t type metadata accessor for SAABPersonSnippet()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAABPersonSnippet;
  if (!lazy cache variable for type metadata for SAABPersonSnippet)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
  }
  return result;
}

uint64_t destroy for GetContactAttributeViewBuilder(id *a1)
{
  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_0((uint64_t)(a1 + 4));
  return swift_release();
}

uint64_t initializeWithCopy for GetContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  id v11;
  id v12;
  id v13;

  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2 + 32;
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v8;
  v9 = v8;
  v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  swift_bridgeObjectRetain();
  v11 = v4;
  v12 = v5;
  v13 = v6;
  v10(a1 + 32, v7, v9);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for GetContactAttributeViewBuilder(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  v7 = (void *)a2[2];
  v8 = (void *)a1[2];
  a1[2] = v7;
  v9 = v7;

  v10 = (void *)a2[3];
  v11 = (void *)a1[3];
  a1[3] = v10;
  v12 = v10;

  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  a1[9] = a2[9];
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy80_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x50uLL);
}

uint64_t assignWithTake for GetContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  __swift_destroy_boxed_opaque_existential_0(a1 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GetContactAttributeViewBuilder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 80))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GetContactAttributeViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GetContactAttributeViewBuilder()
{
  return &type metadata for GetContactAttributeViewBuilder;
}

void OUTLINED_FUNCTION_6_39(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

unint64_t OUTLINED_FUNCTION_11_28(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for SAABPersonSnippet();
}

double specialized SiriKitContactIntent.value(forSlot:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  double result;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  v7 = (void *)MEMORY[0x2207D7CB8](v6);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v2, sel_valueForKey_, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of SpeakableString?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of SpeakableString?((uint64_t)v5, &demangling cache variable for type metadata for NLContextUpdate?);
}

id specialized ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(void *a1, _QWORD *a2)
{
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v18;

  v4 = objc_msgSend(a1, sel_relatedSiriMatches);
  if (v4)
  {
    v5 = v4;
    OUTLINED_FUNCTION_97_4();
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v6 & 0xC000000000000001) == 0, v6);
    v7 = (v6 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D80C0](0, v6) : *(id *)(v6 + 32);
    v8 = v7;
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v8, sel_identifier);

    if (v9)
    {
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v11;

      v13 = a2[3];
      v14 = a2[4];
      __swift_project_boxed_opaque_existential_1(a2, v13);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8))(v10, v12, v13, v14);
      swift_bridgeObjectRelease();
      if (v18)
        return (id)v18;
    }
  }
  v15 = objc_msgSend(a1, sel_relatedContact);
  if (v15)
  {
    v16 = v15;
    type metadata accessor for CNContact();
    CNContact.init(from:)(v16);
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACA0]), sel_init);
}

uint64_t ModifyContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  v5 = type metadata accessor for Parse();
  v4[20] = v5;
  v4[21] = *(_QWORD *)(v5 - 8);
  v4[22] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for ParameterIdentifier();
  v4[23] = v6;
  v4[24] = *(_QWORD *)(v6 - 8);
  v4[25] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  SiriContactsIntents::ModifyContactAttributeSlots_optional v8;
  uint64_t *v9;
  SiriContactsIntents::ModifyContactAttributeSlots value;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23[2];

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 208) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  v4 = ParameterIdentifier.name.getter();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  v8.value = ModifyContactAttributeSlots.init(rawValue:)(v7).value;
  *(SiriContactsIntents::ModifyContactAttributeSlots_optional *)(v0 + 66) = v8;
  if (v8.value == SiriContactsIntents_ModifyContactAttributeSlots_unknownDefault)
  {
    OUTLINED_FUNCTION_31_3();
    OUTLINED_FUNCTION_25_7();
    OUTLINED_FUNCTION_6_7();
    *v9 = v4;
    v9[1] = (uint64_t)v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_task_dealloc();
    OUTLINED_FUNCTION_14_0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    value = v8.value;
    swift_bridgeObjectRelease();
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
    *(_QWORD *)(v0 + 216) = v13;
    v14 = v13;
    Logger.logObject.getter();
    v15 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_42(v15))
    {
      v16 = OUTLINED_FUNCTION_1();
      v17 = OUTLINED_FUNCTION_1();
      v23[0] = v17;
      *(_DWORD *)v16 = 136315394;
      *(_QWORD *)(v0 + 112) = OUTLINED_FUNCTION_3_30(v17, 0x800000021FEE1E20, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      *(_BYTE *)(v0 + 65) = value;
      v18 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_33_6(&dword_21FE16000, v14, (os_log_type_t)v4, "[%s] Slot: %s", (uint8_t *)v16);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }

    v20 = *(_QWORD *)(v0 + 152);
    Input.parse.getter();
    v21 = ParameterResolutionRecord.intent.getter();
    *(_QWORD *)(v0 + 224) = v21;
    v22 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v22;
    *v22 = v0;
    v22[1] = ModifyContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v20 + 176, v21, (uint64_t)&protocol witness table for ModifyContactAttributeIntent);
  }
}

{
  uint64_t v0;
  os_log_type_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  id v6;
  os_log_type_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void);
  int v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  uint64_t *v40;
  unsigned __int8 v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  unsigned __int8 v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  const char *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  char v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;
  void *v70;
  _OWORD v71[2];

  v2 = *(void **)(v0 + 240);
  if (!v2)
    goto LABEL_6;
  type metadata accessor for ModifyContactAttributeIntent();
  v3 = swift_dynamicCastClass();
  if (!v3)
  {

LABEL_6:
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_42(v11))
    {
      v12 = OUTLINED_FUNCTION_1();
      v13 = OUTLINED_FUNCTION_1();
      *(_QWORD *)&v71[0] = v13;
      *(_DWORD *)v12 = 136315394;
      *(_QWORD *)(v0 + 80) = OUTLINED_FUNCTION_24_27(v13, v14, v15, v16, v17, v18, v19, v20);
      v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2080;
      *(_QWORD *)(v0 + 72) = OUTLINED_FUNCTION_24_27(v21, v22, v23, v24, v25, v26, v27, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_33_6(&dword_21FE16000, v10, v1, "[%s] failed to convert parse to expected intent type %s, returning empty answeredValue and same intent", (uint8_t *)v12);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }

    memset(v71, 0, sizeof(v71));
    ParameterResolutionRecord.intent.getter();
    type metadata accessor for ModifyContactAttributeIntent();
    goto LABEL_9;
  }
  v4 = (void *)v3;
  v5 = *(NSObject **)(v0 + 216);
  v6 = v2;
  Logger.logObject.getter();
  v7 = OUTLINED_FUNCTION_8();
  v70 = v6;
  if (os_log_type_enabled(v5, v7))
  {
    v8 = OUTLINED_FUNCTION_1();
    v68 = (_QWORD *)OUTLINED_FUNCTION_1();
    v69 = OUTLINED_FUNCTION_1();
    *(_QWORD *)&v71[0] = v69;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v0 + 96) = OUTLINED_FUNCTION_3_30(v69, 0x800000021FEE1E20, (uint64_t *)v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    *(_QWORD *)(v0 + 104) = v4;
    v9 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v68 = v4;

    OUTLINED_FUNCTION_33_6(&dword_21FE16000, v5, v7, "[%s] SiriKit Intent:     %@", (uint8_t *)v8);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_7_27();
    OUTLINED_FUNCTION_0();
  }

  v32 = *(unsigned __int8 *)(v0 + 66);
  v33 = (void *)OUTLINED_FUNCTION_17_22();
  OUTLINED_FUNCTION_26_25(v33);
  OUTLINED_FUNCTION_24_7();
  *(_QWORD *)(v0 + 56) = ContactAttributeType.init(rawValue:)((unint64_t)v6);
  *(_BYTE *)(v0 + 64) = v34 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttributeType?);
  v35 = Optional.debugDescription.getter();
  v37 = v36;
  switch(v32)
  {
    case 2:
      v38 = (void *)OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_26_25(v38);
      OUTLINED_FUNCTION_24_7();
      if (v6 != (id)10)
      {
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        OUTLINED_FUNCTION_6_7();
        v40 = v57;
        v41 = 2;
        goto LABEL_25;
      }
      OUTLINED_FUNCTION_11_29();
      objc_msgSend((id)OUTLINED_FUNCTION_116(), sel_modifyOperation);
      OUTLINED_FUNCTION_32_16();
      OUTLINED_FUNCTION_14_29(v42, sel_setModifyOperation_);
      v43 = objc_msgSend((id)OUTLINED_FUNCTION_116(), sel_relatedContact);
      OUTLINED_FUNCTION_32_16();
      OUTLINED_FUNCTION_14_29(v44, sel_setRelatedContact_);

      v45 = (void *)OUTLINED_FUNCTION_116();
      if (outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v45))
      {
        OUTLINED_FUNCTION_97_4();
        Array._bridgeToObjectiveC()();
        OUTLINED_FUNCTION_0_28();
      }
      else
      {
        v38 = 0;
      }
      v61 = sel_setRelatedSiriMatches_;
      break;
    case 3:
      v46 = (void *)OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_26_25(v46);
      OUTLINED_FUNCTION_24_7();
      if (v6 != (id)6)
      {
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        OUTLINED_FUNCTION_6_7();
        v40 = v58;
        v41 = 3;
        goto LABEL_25;
      }
      OUTLINED_FUNCTION_11_29();
      objc_msgSend((id)OUTLINED_FUNCTION_116(), sel_modifyOperation);
      OUTLINED_FUNCTION_24_7();
      objc_msgSend(v4, sel_setModifyOperation_, 6);
      goto LABEL_33;
    case 4:
      v38 = (void *)OUTLINED_FUNCTION_17_22();
      OUTLINED_FUNCTION_26_25(v38);
      OUTLINED_FUNCTION_24_7();
      if (v6 == (id)6)
      {
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        OUTLINED_FUNCTION_6_7();
        v40 = v39;
        v41 = 4;
LABEL_25:
        *v40 = ModifyContactAttributeSlots.rawValue.getter(v41);
        v40[1] = v59;
        v40[2] = v35;
        v40[3] = v37;
        goto LABEL_26;
      }
      OUTLINED_FUNCTION_11_29();
      v51 = (void *)OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_26_25(v51);
      OUTLINED_FUNCTION_32_16();
      OUTLINED_FUNCTION_14_29(v52, sel_setContactAttributeToModify_);
      objc_msgSend((id)OUTLINED_FUNCTION_116(), sel_modifyOperation);
      OUTLINED_FUNCTION_32_16();
      OUTLINED_FUNCTION_14_29(v53, sel_setModifyOperation_);
      v54 = (void *)OUTLINED_FUNCTION_116();
      v55 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(v54);
      if (v56)
      {
        MEMORY[0x2207D7CB8](v55);
        OUTLINED_FUNCTION_0_28();
      }
      else
      {
        v38 = 0;
      }
      v61 = sel_setModifyRelationship_;
      break;
    default:
      v47 = *(_BYTE *)(v0 + 66);
      OUTLINED_FUNCTION_31_3();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      OUTLINED_FUNCTION_11_3();
      v49 = v48;
      *v48 = ModifyContactAttributeSlots.rawValue.getter(v47);
      v49[1] = v50;
      v49[2] = v35;
      v49[3] = v37;
LABEL_26:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();

      swift_task_dealloc();
      OUTLINED_FUNCTION_21_0();
      v31 = *(uint64_t (**)(void))(v0 + 8);
      return v31();
  }
  objc_msgSend(v4, v61, v38);

LABEL_33:
  v62 = *(NSObject **)(v0 + 216);
  Logger.logObject.getter();
  v63 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)OUTLINED_FUNCTION_1();
    v65 = OUTLINED_FUNCTION_1();
    *(_QWORD *)&v71[0] = v65;
    *(_DWORD *)v64 = 136315138;
    *(_QWORD *)(v0 + 88) = OUTLINED_FUNCTION_3_30(v65, 0x800000021FEE1E20, (uint64_t *)v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21FE16000, v62, v63, "[%s] Converted ContactIntent to SK intent.", v64, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  v66 = *(_BYTE *)(v0 + 66);
  v67 = (void *)ParameterResolutionRecord.intent.getter();
  *(_QWORD *)(v0 + 40) = &type metadata for ModifyContactAttributeSlots;
  *(_QWORD *)(v0 + 48) = &protocol witness table for ModifyContactAttributeSlots;
  *(_BYTE *)(v0 + 16) = v66;
  specialized SiriKitContactIntent.value(forSlot:)((_QWORD *)(v0 + 16), v71);

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
LABEL_9:
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  v29 = *(_QWORD *)(v0 + 128);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<ModifyContactAttributeIntent>);
  __swift_storeEnumTagSinglePayload(v29, 0, 1, v30);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  v31 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return v31();
}

uint64_t ModifyContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = *(void **)(*(_QWORD *)v1 + 224);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc();

  OUTLINED_FUNCTION_38_15(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

uint64_t ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for Locale();
  v3[5] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for NLContextUpdate();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[9] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for TemplatingResult();
  v3[10] = v5;
  v3[11] = *(_QWORD *)(v5 - 8);
  v3[12] = OUTLINED_FUNCTION_25_0();
  v3[13] = OUTLINED_FUNCTION_25_0();
  v3[14] = OUTLINED_FUNCTION_25_0();
  v6 = type metadata accessor for SpeakableString();
  v3[15] = v6;
  v3[16] = *(_QWORD *)(v6 - 8);
  v3[17] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ParameterIdentifier();
  v3[18] = v7;
  v3[19] = *(_QWORD *)(v7 - 8);
  v3[20] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  uint64_t *v8;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  v4 = ParameterIdentifier.name.getter();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  switch(ModifyContactAttributeSlots.init(rawValue:)(v7).value)
  {
    case SiriContactsIntents_ModifyContactAttributeSlots_modifyRelationship:
      v11 = (_QWORD *)v0[4];
      v10 = v0[5];
      OUTLINED_FUNCTION_9_0();
      v12 = (void *)OUTLINED_FUNCTION_116();
      v13 = specialized ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(v12, v11 + 7);
      v0[23] = v13;

      type metadata accessor for DialogPerson();
      __swift_project_boxed_opaque_existential_1(v11 + 2, v11[5]);
      v14 = v13;
      dispatch thunk of DeviceState.siriLocale.getter();
      DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v14, 1, v10, 0);
      v0[24] = v15;
      v16 = (_QWORD *)swift_task_alloc();
      v0[25] = v16;
      *v16 = v0;
      v16[1] = ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
      OUTLINED_FUNCTION_15_25();
      result = ModifyContactAttributeCATs.promptForRelationship(contact:)(v17, v18);
      break;
    case SiriContactsIntents_ModifyContactAttributeSlots_modifyNickName:
      OUTLINED_FUNCTION_9_0();
      v20 = (_QWORD *)swift_task_alloc();
      v0[27] = v20;
      *v20 = v0;
      v20[1] = ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
      OUTLINED_FUNCTION_15_25();
      result = ModifyContactAttributeCATs.promptForNickname()(v21);
      break;
    case SiriContactsIntents_ModifyContactAttributeSlots_relatedSiriMatches:
      OUTLINED_FUNCTION_9_0();
      v22 = (void *)OUTLINED_FUNCTION_116();
      outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(v22);
      if (!v23)
        static String.EMPTY.getter();
      v25 = v0[16];
      v24 = v0[17];
      v26 = v0[15];
      v27 = v0[9];
      SpeakableString.init(print:speak:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v27, v24, v26);
      __swift_storeEnumTagSinglePayload(v27, 0, 1, v26);
      v28 = (_QWORD *)swift_task_alloc();
      v0[21] = v28;
      *v28 = v0;
      v28[1] = ModifyContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
      OUTLINED_FUNCTION_15_25();
      result = ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)(v29, v30);
      break;
    default:
      OUTLINED_FUNCTION_31_3();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
      OUTLINED_FUNCTION_11_3();
      *v8 = v4;
      v8[1] = (uint64_t)v6;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      OUTLINED_FUNCTION_5_29();
      OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_23_0();
      OUTLINED_FUNCTION_15_25();
      __asm { BR              X0 }
      return result;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  outlined destroy of SpeakableString?(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  OUTLINED_FUNCTION_51_3();
  v1 = v0[14];
  v3 = v0[7];
  v2 = v0[8];
  v4 = v0[6];
  v5 = (uint64_t *)v0[2];
  static ContactsContextProvider.needsValueRelatedSiriMatches()();
  v6 = OUTLINED_FUNCTION_162();
  v7 = MEMORY[0x24BE99088];
  v5[3] = v6;
  v5[4] = v7;
  __swift_allocate_boxed_opaque_existential_1(v5);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = v0[16];
  (*(void (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[14], v0[10]);
  OUTLINED_FUNCTION_38_15(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_132();
  v9 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_19_1(v9);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  OUTLINED_FUNCTION_51_3();
  v1 = (void *)v0[23];
  v2 = v0[13];
  v3 = v0[8];
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21FED8CB0;
  static ContactsContextProvider.makeSDAForNeedsValueModifyRelationship()();
  NLContextUpdate.nluSystemDialogActs.setter();
  v4 = OUTLINED_FUNCTION_162();
  OUTLINED_FUNCTION_32_8(v4, MEMORY[0x24BE99088]);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v2, v3);

  v5 = v0[13];
  v6 = v0[11];
  v7 = v0[10];
  (*(void (**)(_QWORD, _QWORD))(v0[7] + 8))(v0[8], v0[6]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_132();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_19_1(v8);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  OUTLINED_FUNCTION_51_3();
  v1 = v0[12];
  v2 = v0[8];
  static ContactsContextProvider.needsValueModifyNickname()();
  v3 = OUTLINED_FUNCTION_162();
  OUTLINED_FUNCTION_32_8(v3, MEMORY[0x24BE99088]);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v1, v2);
  v5 = v0[11];
  v4 = v0[12];
  v6 = v0[10];
  OUTLINED_FUNCTION_34_16(v0[7]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_132();
  v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_19_1(v7);
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  OUTLINED_FUNCTION_5_29();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_5_29();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_5_29();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for ModifyContactAttributeNeedsValueStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeNeedsValueStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeNeedsValueStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_relatedSiriMatches);
  OUTLINED_FUNCTION_24_7();
  if (!v1)
    return 0;
  OUTLINED_FUNCTION_97_4();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_modifyRelationship);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_34_16(*(_QWORD *)(v3 - 8));
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_29()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_11_29()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_14_29(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_17_22()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_24_27(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  unint64_t v8;
  va_list va;

  va_start(va, a8);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, v8, (uint64_t *)va);
}

id OUTLINED_FUNCTION_26_25(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1414));
}

void OUTLINED_FUNCTION_32_16()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_34_16@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_38_15@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t SpeakableString.init(printed:phonetic:phonemeData:)@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v4 = type metadata accessor for SpeakableString();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Optional<A>.isNilOrEmpty.getter() & 1) != 0 && (Optional<A>.isNilOrEmpty.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else if (a1)
  {
    swift_bridgeObjectRelease();
  }
  SpeakableString.init(print:speak:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
}

void specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19_26();
  OUTLINED_FUNCTION_16_20();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  OUTLINED_FUNCTION_34_17();
  OUTLINED_FUNCTION_18_24();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_9_29();
  if ((OUTLINED_FUNCTION_20_23() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
    v3 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v3))
    {
      v4 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v4);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v5, v6, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_51();
    }

    ErrorViewBuilder.makeViewsForWatch()();
  }
  else if ((OUTLINED_FUNCTION_27_23() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v7, (uint64_t)static Logger.siriContacts);
    v8 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v8))
    {
      v9 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v9);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v10, v11, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_51();
    }

    ErrorViewBuilder.makeViewsForMac()();
  }
  else if ((OUTLINED_FUNCTION_30_22() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v13))
    {
      v14 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v14);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v15, v16, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_51();
    }

    ErrorViewBuilder.makeViewsForCarDND()();
  }
  else if ((OUTLINED_FUNCTION_29_24() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v17, (uint64_t)static Logger.siriContacts);
    v18 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v18))
    {
      v19 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v19);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v20, v21, "#IdiomSensitiveViewBuilder Building views for CarPlay");
      OUTLINED_FUNCTION_2_51();
    }

    ErrorViewBuilder.makeViewsForCarPlay()();
  }
  else if ((OUTLINED_FUNCTION_28_21() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v22 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v22, (uint64_t)static Logger.siriContacts);
    v23 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v23))
    {
      v24 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v24);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v25, v26, "#IdiomSensitiveViewBuilder Building views for XROS");
      OUTLINED_FUNCTION_2_51();
    }

    ErrorViewBuilder.makeViewsForXROS()();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v27 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v27, (uint64_t)static Logger.siriContacts);
    v28 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v28))
    {
      v29 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v29);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v30, v31, "#IdiomSensitiveViewBuilder Building views for IOS");
      OUTLINED_FUNCTION_2_51();
    }

    ErrorViewBuilder.makeViewsForIOS()();
  }
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_7();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  os_log_type_t v16;
  _WORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  os_log_type_t v27;
  _WORD *v28;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19_26();
  OUTLINED_FUNCTION_16_20();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  OUTLINED_FUNCTION_23_27();
  OUTLINED_FUNCTION_18_24();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_9_29();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_14_30();
  if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
    v3 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v3))
    {
      v4 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v4);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v5, v6, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_51();
    }

    ConfirmationViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_14_30();
  if ((dispatch thunk of DeviceState.isMac.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v7, (uint64_t)static Logger.siriContacts);
    v8 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v8))
    {
      v9 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v9);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v10, v11, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_51();
    }

    ConfirmationViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_14_30();
  if ((dispatch thunk of DeviceState.isCarDNDMode.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_7_34();
    if (os_log_type_enabled(v0, v13))
    {
      v14 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_21FE16000, v0, v13, "#IdiomSensitiveViewBuilder Building views for CarDND", v14, 2u);
      OUTLINED_FUNCTION_0();
    }

    goto LABEL_38;
  }
  OUTLINED_FUNCTION_14_30();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_14_30();
    if ((dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v20 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v20, (uint64_t)static Logger.siriContacts);
      v21 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v21))
      {
        v22 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v22);
        v25 = "#IdiomSensitiveViewBuilder Building views for XROS";
        goto LABEL_36;
      }
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v26 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v26, (uint64_t)static Logger.siriContacts);
      v27 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v27))
      {
        v28 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v28);
        v25 = "#IdiomSensitiveViewBuilder Building views for IOS";
LABEL_36:
        OUTLINED_FUNCTION_0_43(&dword_21FE16000, v23, v24, v25);
        OUTLINED_FUNCTION_2_51();
      }
    }

    ConfirmationViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v15, (uint64_t)static Logger.siriContacts);
  v16 = OUTLINED_FUNCTION_7_34();
  if (OUTLINED_FUNCTION_7_17(v16))
  {
    v17 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_28(v17);
    OUTLINED_FUNCTION_0_43(&dword_21FE16000, v18, v19, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_51();
  }

  ConfirmationViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_25_29();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19_26();
  OUTLINED_FUNCTION_16_20();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  OUTLINED_FUNCTION_34_17();
  OUTLINED_FUNCTION_18_24();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_9_29();
  if ((OUTLINED_FUNCTION_20_23() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
    v3 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v3))
    {
      v4 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v4);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v5, v6, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_51();
    }

    MissingMeCardViewBuilder.makeViewsForWatch()();
  }
  else if ((OUTLINED_FUNCTION_27_23() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v7, (uint64_t)static Logger.siriContacts);
    v8 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v8))
    {
      v9 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v9);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v10, v11, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_51();
    }

    MissingMeCardViewBuilder.makeViewsForMac()();
  }
  else if ((OUTLINED_FUNCTION_30_22() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v13))
    {
      v14 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v14);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v15, v16, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_51();
    }

    MissingMeCardViewBuilder.makeViewsForCarDND()();
  }
  else if ((OUTLINED_FUNCTION_29_24() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v17, (uint64_t)static Logger.siriContacts);
    v18 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v18))
    {
      v19 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v19);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v20, v21, "#IdiomSensitiveViewBuilder Building views for CarPlay");
      OUTLINED_FUNCTION_2_51();
    }

    MissingMeCardViewBuilder.makeViewsForCarPlay()();
  }
  else if ((OUTLINED_FUNCTION_28_21() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v22 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v22, (uint64_t)static Logger.siriContacts);
    v23 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v23))
    {
      v24 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v24);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v25, v26, "#IdiomSensitiveViewBuilder Building views for XROS");
      OUTLINED_FUNCTION_2_51();
    }

    MissingMeCardViewBuilder.makeViewsForXROS()();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v27 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v27, (uint64_t)static Logger.siriContacts);
    v28 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v28))
    {
      v29 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v29);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v30, v31, "#IdiomSensitiveViewBuilder Building views for IOS");
      OUTLINED_FUNCTION_2_51();
    }

    MissingMeCardViewBuilder.makeViewsForIOS()();
  }
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  os_log_type_t v29;
  _WORD *v30;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19_26();
  OUTLINED_FUNCTION_16_20();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  OUTLINED_FUNCTION_23_27();
  OUTLINED_FUNCTION_18_24();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_9_29();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_13_35();
  if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
    v3 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v3))
    {
      v4 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v4);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v5, v6, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_51();
    }

    GetContactAttributeViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_13_35();
  if ((dispatch thunk of DeviceState.isMac.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v7, (uint64_t)static Logger.siriContacts);
    v8 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v8))
    {
      v9 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v9);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v10, v11, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_51();
    }

    GetContactAttributeViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_13_35();
  if ((dispatch thunk of DeviceState.isCarDNDMode.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v13))
    {
      v14 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v14);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v15, v16, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_51();
    }

    GetContactAttributeViewBuilder.makeViewsForCarDND()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_13_35();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_13_35();
    if ((dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v22 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v22, (uint64_t)static Logger.siriContacts);
      v23 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v23))
      {
        v24 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v24);
        v27 = "#IdiomSensitiveViewBuilder Building views for XROS";
        goto LABEL_36;
      }
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v28 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v28, (uint64_t)static Logger.siriContacts);
      v29 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v29))
      {
        v30 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v30);
        v27 = "#IdiomSensitiveViewBuilder Building views for IOS";
LABEL_36:
        OUTLINED_FUNCTION_0_43(&dword_21FE16000, v25, v26, v27);
        OUTLINED_FUNCTION_2_51();
      }
    }

    GetContactAttributeViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v17 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v17, (uint64_t)static Logger.siriContacts);
  v18 = OUTLINED_FUNCTION_7_34();
  if (OUTLINED_FUNCTION_7_17(v18))
  {
    v19 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_28(v19);
    OUTLINED_FUNCTION_0_43(&dword_21FE16000, v20, v21, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_51();
  }

  GetContactAttributeViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_25_29();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  os_log_type_t v29;
  _WORD *v30;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19_26();
  OUTLINED_FUNCTION_16_20();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  OUTLINED_FUNCTION_23_27();
  OUTLINED_FUNCTION_18_24();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_9_29();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_12_31();
  if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
    v3 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v3))
    {
      v4 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v4);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v5, v6, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_51();
    }

    ModifyContactAttributeViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_12_31();
  if ((dispatch thunk of DeviceState.isMac.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v7, (uint64_t)static Logger.siriContacts);
    v8 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v8))
    {
      v9 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v9);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v10, v11, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_51();
    }

    ModifyContactAttributeViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_12_31();
  if ((dispatch thunk of DeviceState.isCarDNDMode.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v13))
    {
      v14 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v14);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v15, v16, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_51();
    }

    ModifyContactAttributeViewBuilder.makeViewsForCarDND()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_12_31();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_12_31();
    if ((dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v22 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v22, (uint64_t)static Logger.siriContacts);
      v23 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v23))
      {
        v24 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v24);
        v27 = "#IdiomSensitiveViewBuilder Building views for XROS";
        goto LABEL_36;
      }
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v28 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v28, (uint64_t)static Logger.siriContacts);
      v29 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v29))
      {
        v30 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v30);
        v27 = "#IdiomSensitiveViewBuilder Building views for IOS";
LABEL_36:
        OUTLINED_FUNCTION_0_43(&dword_21FE16000, v25, v26, v27);
        OUTLINED_FUNCTION_2_51();
      }
    }

    ModifyContactAttributeViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v17 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v17, (uint64_t)static Logger.siriContacts);
  v18 = OUTLINED_FUNCTION_7_34();
  if (OUTLINED_FUNCTION_7_17(v18))
  {
    v19 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_28(v19);
    OUTLINED_FUNCTION_0_43(&dword_21FE16000, v20, v21, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_51();
  }

  ModifyContactAttributeViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_25_29();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_7();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  os_log_type_t v29;
  _WORD *v30;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_19_26();
  OUTLINED_FUNCTION_16_20();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  OUTLINED_FUNCTION_23_27();
  OUTLINED_FUNCTION_18_24();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_9_29();
  OUTLINED_FUNCTION_21_24();
  OUTLINED_FUNCTION_11_30();
  if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
    v3 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v3))
    {
      v4 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v4);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v5, v6, "#IdiomSensitiveViewBuilder Building views for Watch");
      OUTLINED_FUNCTION_2_51();
    }

    ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_11_30();
  if ((dispatch thunk of DeviceState.isMac.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v7, (uint64_t)static Logger.siriContacts);
    v8 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v8))
    {
      v9 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v9);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v10, v11, "#IdiomSensitiveViewBuilder Building views for Mac");
      OUTLINED_FUNCTION_2_51();
    }

    ModifyNicknameUnsupportedViewBuilder.makeViewsForMac()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_11_30();
  if ((dispatch thunk of DeviceState.isCarDNDMode.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_7_34();
    if (OUTLINED_FUNCTION_7_17(v13))
    {
      v14 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_8_28(v14);
      OUTLINED_FUNCTION_0_43(&dword_21FE16000, v15, v16, "#IdiomSensitiveViewBuilder Building views for CarDND");
      OUTLINED_FUNCTION_2_51();
    }

    ModifyNicknameUnsupportedViewBuilder.makeViewsForCarDND()();
    goto LABEL_38;
  }
  OUTLINED_FUNCTION_11_30();
  if ((dispatch thunk of DeviceState.isCarPlay.getter() & 1) == 0)
  {
    OUTLINED_FUNCTION_11_30();
    if ((dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v22 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v22, (uint64_t)static Logger.siriContacts);
      v23 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v23))
      {
        v24 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v24);
        v27 = "#IdiomSensitiveViewBuilder Building views for XROS";
        goto LABEL_36;
      }
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v28 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v28, (uint64_t)static Logger.siriContacts);
      v29 = OUTLINED_FUNCTION_7_34();
      if (OUTLINED_FUNCTION_7_17(v29))
      {
        v30 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_8_28(v30);
        v27 = "#IdiomSensitiveViewBuilder Building views for IOS";
LABEL_36:
        OUTLINED_FUNCTION_0_43(&dword_21FE16000, v25, v26, v27);
        OUTLINED_FUNCTION_2_51();
      }
    }

    ModifyNicknameUnsupportedViewBuilder.makeViewsForIOS()();
    goto LABEL_38;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v17 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v17, (uint64_t)static Logger.siriContacts);
  v18 = OUTLINED_FUNCTION_7_34();
  if (OUTLINED_FUNCTION_7_17(v18))
  {
    v19 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_8_28(v19);
    OUTLINED_FUNCTION_0_43(&dword_21FE16000, v20, v21, "#IdiomSensitiveViewBuilder Building views for CarPlay");
    OUTLINED_FUNCTION_2_51();
  }

  ModifyNicknameUnsupportedViewBuilder.makeViewsForCarPlay()();
LABEL_38:
  OUTLINED_FUNCTION_171();
  OUTLINED_FUNCTION_25_29();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_32_17();
  OUTLINED_FUNCTION_7();
}

uint64_t ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[18] = a1;
  v2[19] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v2[20] = OUTLINED_FUNCTION_0_0();
  v3 = type metadata accessor for TemplatingResult();
  v2[21] = v3;
  v2[22] = *(_QWORD *)(v3 - 8);
  v2[23] = OUTLINED_FUNCTION_0_0();
  return swift_task_switch();
}

uint64_t ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  if ((ContactsStrategy.isSmartEnabled.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v1 = OUTLINED_FUNCTION_26();
    v2 = OUTLINED_FUNCTION_10_1(v1, (uint64_t)static Logger.siriContacts);
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_21FE16000, v2, v3, "#ModifyContactAttributeContinueInAppFlowStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent", v4, 2u);
      OUTLINED_FUNCTION_0();
    }

  }
  v5 = v0[19];
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 40));
  v6 = DeviceState.toSiriKitDeviceState.getter();
  v0[24] = v6;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 40));
  v7 = dispatch thunk of DeviceState.isXRDevice.getter();
  v8 = (_QWORD *)swift_task_alloc();
  v0[25] = v8;
  *v8 = v0;
  v8[1] = ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:);
  return ModifyContactAttributeCATs.unsupportedAttributeToModify(device:contactsAppUnavailable:)(v0[23], v6, v7 & 1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 168);
  v4 = *(uint64_t **)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  outlined init with copy of DeviceState(v5 + 16, v0 + 16);
  v6 = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(_QWORD *)(v0 + 56) = v6;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v0 + 16);
  v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v7);
  v8 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  v9 = MEMORY[0x24BE99088];
  v4[3] = v8;
  v4[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ModifyContactAttributeContinueInAppFlowStrategy.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of AppUtil(v0 + 168);
}

uint64_t ModifyContactAttributeContinueInAppFlowStrategy.__deallocating_deinit()
{
  uint64_t v0;

  v0 = ContactsUnsupportedValueStrategy.deinit();
  outlined destroy of AppUtil(v0 + 168);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ModifyContactAttributeContinueInAppFlowStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeContinueInAppFlowStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeContinueInAppFlowStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ModifyContactAttributeContinueInAppFlowStrategy()
{
  return swift_initClassMetadata2();
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy)
  {
    v1 = type metadata accessor for ModifyContactAttributeContinueInAppFlowStrategy();
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ModifyContactAttributeContinueInAppFlowStrategy, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeContinueInAppFlowStrategy and conformance ModifyContactAttributeContinueInAppFlowStrategy);
  }
  return result;
}

uint64_t protocol witness for ContinueInAppDialogFlowStrategyAsync.makeContinueInAppResponse(intentResolutionRecord:) in conformance ModifyContactAttributeContinueInAppFlowStrategy(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = ModifyContactAttributeCATs.promptForNickname();
  return ModifyContactAttributeContinueInAppFlowStrategy.makeContinueInAppResponse(intentResolutionRecord:)(a1);
}

void OUTLINED_FUNCTION_0_43(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_2_51()
{
  JUMPOUT(0x2207D8768);
}

uint64_t OUTLINED_FUNCTION_7_34()
{
  return static os_log_type_t.info.getter();
}

_WORD *OUTLINED_FUNCTION_8_28(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_9_29()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_11_30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_12_31()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_13_35()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 56);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_14_30()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  __swift_project_boxed_opaque_existential_1(v1, v2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_18_24()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_19_26()
{
  return type metadata accessor for Signpost.OpenSignpost();
}

uint64_t OUTLINED_FUNCTION_20_23()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = v0 + *(int *)(v1 + 20);
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 16) = v5;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  return dispatch thunk of DeviceState.isWatch.getter();
}

void OUTLINED_FUNCTION_21_24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v5 = v0 + *(int *)(v1 + 20);
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = v3;
  *(_BYTE *)(v5 + 16) = v4;
}

id OUTLINED_FUNCTION_23_27()
{
  return (id)static Signpost.contactsLog;
}

uint64_t OUTLINED_FUNCTION_27_23()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isMac.getter();
}

uint64_t OUTLINED_FUNCTION_28_21()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isXRDevice.getter();
}

uint64_t OUTLINED_FUNCTION_29_24()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isCarPlay.getter();
}

uint64_t OUTLINED_FUNCTION_30_22()
{
  _QWORD *v0;

  __swift_project_boxed_opaque_existential_1(v0, v0[3]);
  return dispatch thunk of DeviceState.isCarDNDMode.getter();
}

uint64_t OUTLINED_FUNCTION_32_17()
{
  uint64_t v0;

  return v0;
}

id OUTLINED_FUNCTION_34_17()
{
  return (id)static Signpost.contactsLog;
}

uint64_t dispatch thunk of FindMyFriendFlowProviding.makeFlow(parse:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t ContactsLabeledAddress.Builder.__deallocating_deinit()
{
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtCC19SiriContactsIntents22ContactsLabeledAddress7Builder_label);
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtCC19SiriContactsIntents22ContactsLabeledAddress7Builder_addressString);
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

unint64_t static ContactsLabeledAddress.catTypeName.getter()
{
  return 0xD000000000000017;
}

uint64_t ContactsLabeledAddress.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - v11;
  v13 = a1 == 0x6C6562616CLL && a2 == 0xE500000000000000;
  if (v13 || (OUTLINED_FUNCTION_8_14() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_label, (uint64_t)v12);
    v14 = type metadata accessor for SpeakableString();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14) != 1)
    {
      v16 = OUTLINED_FUNCTION_9_18();
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v16, v12, v14);
    }
    v15 = (uint64_t)v12;
    goto LABEL_16;
  }
  if (a1 != 0x5373736572646461 || a2 != 0xED0000676E697274)
  {
    result = OUTLINED_FUNCTION_8_14();
    if ((result & 1) == 0)
      goto LABEL_17;
  }
  outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_addressString, (uint64_t)v10);
  v19 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v19) == 1)
  {
    v15 = (uint64_t)v10;
LABEL_16:
    result = outlined destroy of SpeakableString?(v15);
LABEL_17:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  v20 = OUTLINED_FUNCTION_9_18();
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v20, v10, v19);
}

SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional __swiftcall ContactsLabeledAddress.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsLabeledAddress.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriContactsIntents_ContactsLabeledAddress_CodingKeys_addressString;
  else
    v4.value = SiriContactsIntents_ContactsLabeledAddress_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t ContactsLabeledAddress.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x5373736572646461;
  else
    return 0x6C6562616CLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactsLabeledAddress.CodingKeys(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactsLabeledAddress.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsLabeledAddress.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsLabeledAddress.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsLabeledAddress.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional result;

  result.value = ContactsLabeledAddress.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsLabeledAddress.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactsLabeledAddress.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsLabeledAddress.CodingKeys()
{
  char *v0;

  return ContactsLabeledAddress.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsLabeledAddress.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsLabeledAddress::CodingKeys_optional result;

  result.value = ContactsLabeledAddress.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsLabeledAddress.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsLabeledAddress.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ContactsLabeledAddress.deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_label);
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_addressString);
  return v0;
}

uint64_t ContactsLabeledAddress.__deallocating_deinit()
{
  ContactsLabeledAddress.deinit();
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContactsLabeledAddress()
{
  return type metadata accessor for ContactsLabeledAddress(0);
}

uint64_t type metadata accessor for ContactsLabeledAddress(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsLabeledAddress);
}

void type metadata completion function for ContactsLabeledAddress()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsLabeledAddress.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsLabeledAddress.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
  OUTLINED_FUNCTION_2_28();
  if (!v1)
  {
    v8[14] = 1;
    OUTLINED_FUNCTION_2_28();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t ContactsLabeledAddress.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ContactsLabeledAddress.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsLabeledAddress.Builder()
{
  return type metadata accessor for ContactsLabeledAddress.Builder(0);
}

uint64_t type metadata accessor for ContactsLabeledAddress.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsLabeledAddress.Builder);
}

uint64_t ContactsLabeledAddress.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD *v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsLabeledAddress.CodingKeys>);
  v9 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  *(_QWORD *)(v3 + 16) = 0;
  v10 = a1[3];
  v16 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    v11 = (uint64_t)v16;

    type metadata accessor for ContactsLabeledAddress(0);
    swift_deallocPartialClassInstance();
    v13 = v11;
  }
  else
  {
    v14[0] = v8;
    v14[1] = v9;
    type metadata accessor for SpeakableString();
    v18 = 0;
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    OUTLINED_FUNCTION_3_17();
    OUTLINED_FUNCTION_14_21(OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_label);
    v17 = 1;
    OUTLINED_FUNCTION_3_17();
    OUTLINED_FUNCTION_0_27();
    OUTLINED_FUNCTION_14_21(OBJC_IVAR____TtC19SiriContactsIntents22ContactsLabeledAddress_addressString);
    v13 = (uint64_t)v16;
  }
  __swift_destroy_boxed_opaque_existential_0(v13);
  return v3;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsLabeledAddress()
{
  static ContactsLabeledAddress.catTypeName.getter();
  return 0xD000000000000017;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsLabeledAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return ContactsLabeledAddress.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsLabeledAddress@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContactsLabeledAddress.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsLabeledAddress(_QWORD *a1)
{
  return ContactsLabeledAddress.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsLabeledAddress()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsLabeledAddress and conformance ContactsLabeledAddress, type metadata accessor for ContactsLabeledAddress, (uint64_t)&protocol conformance descriptor for ContactsLabeledAddress);
}

uint64_t base witness table accessor for Encodable in ContactsLabeledAddress()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsLabeledAddress and conformance ContactsLabeledAddress, type metadata accessor for ContactsLabeledAddress, (uint64_t)&protocol conformance descriptor for ContactsLabeledAddress);
}

unint64_t lazy protocol witness table accessor for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsLabeledAddress.CodingKeys, &type metadata for ContactsLabeledAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsLabeledAddress.CodingKeys, &type metadata for ContactsLabeledAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsLabeledAddress.CodingKeys, &type metadata for ContactsLabeledAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsLabeledAddress.CodingKeys, &type metadata for ContactsLabeledAddress.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabeledAddress.CodingKeys and conformance ContactsLabeledAddress.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContactsLabeledAddress.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FEB6A58 + 4 * byte_21FEDDB05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FEB6A8C + 4 * byte_21FEDDB00[v4]))();
}

uint64_t sub_21FEB6A8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FEB6A94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FEB6A9CLL);
  return result;
}

uint64_t sub_21FEB6AA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FEB6AB0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FEB6AB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FEB6ABC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContactsLabeledAddress.CodingKeys()
{
  return &type metadata for ContactsLabeledAddress.CodingKeys;
}

void specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_78_9();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_50();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_11_4();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_69();
  MEMORY[0x24BDAC7A8](v6);
  if (v1)
  {
    swift_retain();
    UsoEntity_common_Person.contactId.getter();
    OUTLINED_FUNCTION_60();
    OUTLINED_FUNCTION_45();
  }
  OUTLINED_FUNCTION_7();
}

uint64_t specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, void (*a2)(uint64_t, _BYTE *))
{
  _BYTE v5[8];

  swift_unknownObjectWeakInit();
  a2(a1, v5);
  return swift_unknownObjectWeakDestroy();
}

void specialized static SiriKitGetEntityIntent.resolveAddressType(from:)(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  BOOL v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t *v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD v116[2];
  uint64_t *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v117 = a2;
  v123 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v123 - 8);
  v4 = MEMORY[0x24BDAC7A8](v123);
  v118 = (char *)v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v116 - v7;
  v9 = MEMORY[0x24BDAC7A8](v6);
  v120 = (char *)v116 - v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v116 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v121 = (char *)v116 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v116[0] = (char *)v116 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v116 - v18;
  if (one-time initialization token for siriContacts != -1)
    goto LABEL_111;
  while (1)
  {
    v20 = type metadata accessor for Logger();
    v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
    swift_retain_n();
    v116[1] = v21;
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    v24 = os_log_type_enabled(v22, v23);
    v122 = a1;
    v119 = v13;
    if (v24)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v126 = v26;
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v125 = v122;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ContactAddress?);
      v27 = String.init<A>(describing:)();
      *(_QWORD *)&v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v126);
      a1 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FE16000, v22, v23, "#SiriKitGetEntityIntent resolveAddressType from address %s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v26, -1, -1);
      v29 = v25;
      v13 = v119;
      MEMORY[0x2207D8768](v29, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v30 = v123;
    if (!a1)
    {
      v43 = v117;
      *v117 = 0;
      v43[1] = 0;
      v44 = -1;
      goto LABEL_98;
    }
    swift_retain();
    CodeGenBase.entity.getter();
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (!v128)
    {
      outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
LABEL_28:
      swift_retain();
      CodeGenBase.entity.getter();
      swift_release();
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v128)
      {
        type metadata accessor for UsoEntity_common_EmailAddress();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v121 = (char *)v125;
          swift_retain();
          v19 = (char *)dispatch thunk of CodeGenBase.usoIdentifiers.getter();
          swift_release();
          v45 = MEMORY[0x24BEE4AF8];
          v126 = MEMORY[0x24BEE4AF8];
          a1 = *((_QWORD *)v19 + 2);
          if (!a1)
          {
            v47 = v123;
LABEL_79:
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v45 + 16))
            {
              v80 = v116[0];
              (*(void (**)(_QWORD, unint64_t, uint64_t))(v3 + 16))(v116[0], v45 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v47);
              swift_release();
              v81 = UsoIdentifier.value.getter();
              v83 = v82;
              (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v80, v47);
            }
            else
            {
              v84 = swift_release();
              v81 = MEMORY[0x2207D6C5C](v84);
              if (v85)
              {
                v81 = String.convertToContactAttributeLabel.getter();
                v83 = v86;
                swift_bridgeObjectRelease();
              }
              else
              {
                v83 = 0;
              }
            }
            swift_bridgeObjectRetain_n();
            v107 = Logger.logObject.getter();
            v108 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v107, v108))
            {
              v109 = (uint8_t *)swift_slowAlloc();
              v110 = swift_slowAlloc();
              *(_QWORD *)&v125 = v110;
              *(_DWORD *)v109 = 136315138;
              v126 = v81;
              v127 = v83;
              swift_bridgeObjectRetain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
              v111 = String.init<A>(describing:)();
              v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, (uint64_t *)&v125);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_21FE16000, v107, v108, "#SiriKitGetEntityIntent address was converted to an email with value %s", v109, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x2207D8768](v110, -1, -1);
              MEMORY[0x2207D8768](v109, -1, -1);
              swift_release();

            }
            else
            {

              swift_release();
              swift_bridgeObjectRelease_n();
            }
            swift_release();
            v113 = v117;
            *v117 = v81;
            v113[1] = v83;
            *((_BYTE *)v113 + 16) = 0;
            return;
          }
          v46 = 0;
          v47 = v123;
          while (1)
          {
            if (v46 >= *((_QWORD *)v19 + 2))
              goto LABEL_109;
            v48 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
            v49 = *(_QWORD *)(v3 + 72);
            (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v13, &v19[v48 + v49 * v46], v47);
            v50 = UsoIdentifier.namespace.getter();
            if (v51)
            {
              if (v50 == 0x7079546C69616D65 && v51 == 0xE900000000000065)
              {
                swift_bridgeObjectRelease();
LABEL_41:
                v8 = *(char **)(v3 + 32);
                ((void (*)(char *, char *, uint64_t))v8)(v120, v13, v123);
                v54 = v126;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v54 = v126;
                }
                v55 = *(_QWORD *)(v54 + 16);
                if (v55 >= *(_QWORD *)(v54 + 24) >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  v54 = v126;
                }
                *(_QWORD *)(v54 + 16) = v55 + 1;
                v47 = v123;
                ((void (*)(unint64_t, char *, uint64_t))v8)(v54 + v48 + v55 * v49, v120, v123);
                v126 = v54;
                v13 = v119;
                goto LABEL_46;
              }
              v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v53 & 1) != 0)
                goto LABEL_41;
            }
            v47 = v123;
            (*(void (**)(char *, uint64_t))(v3 + 8))(v13, v123);
LABEL_46:
            if (a1 == ++v46)
            {
              v45 = v126;
              goto LABEL_79;
            }
          }
        }
      }
      else
      {
        outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
      }
      swift_retain();
      CodeGenBase.entity.getter();
      swift_release();
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v128)
      {
        type metadata accessor for UsoEntity_common_PostalAddress();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v120 = (char *)v125;
          swift_retain();
          v56 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
          swift_release();
          v57 = MEMORY[0x24BEE4AF8];
          v126 = MEMORY[0x24BEE4AF8];
          v19 = *(char **)(v56 + 16);
          if (v19)
          {
            a1 = 0;
            v58 = v123;
            v121 = *(char **)(v56 + 16);
            while (1)
            {
              if (a1 >= *(_QWORD *)(v56 + 16))
                goto LABEL_110;
              v59 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
              v13 = *(char **)(v3 + 72);
              (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, v56 + v59 + (_QWORD)v13 * a1, v58);
              v60 = UsoIdentifier.namespace.getter();
              if (v61)
              {
                if (v60 == 0x5473736572646461 && v61 == 0xEB00000000657079)
                {
                  swift_bridgeObjectRelease();
LABEL_62:
                  v64 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
                  v64(v118, v8, v123);
                  v65 = v126;
                  v66 = v8;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    v65 = v126;
                  }
                  v67 = *(_QWORD *)(v65 + 16);
                  if (v67 >= *(_QWORD *)(v65 + 24) >> 1)
                  {
                    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    v65 = v126;
                  }
                  *(_QWORD *)(v65 + 16) = v67 + 1;
                  v58 = v123;
                  v64((char *)(v65 + v59 + v67 * (_QWORD)v13), v118, v123);
                  v126 = v65;
                  v8 = v66;
                  v19 = v121;
                  goto LABEL_67;
                }
                v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if ((v63 & 1) != 0)
                  goto LABEL_62;
              }
              v58 = v123;
              (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v123);
LABEL_67:
              if (v19 == (char *)++a1)
              {
                v57 = v126;
                goto LABEL_84;
              }
            }
          }
          v58 = v123;
LABEL_84:
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v57 + 16))
          {
            v87 = v116[0];
            (*(void (**)(_QWORD, unint64_t, uint64_t))(v3 + 16))(v116[0], v57 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v58);
            swift_release();
            v88 = UsoIdentifier.value.getter();
            v90 = v89;
            (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v87, v58);
          }
          else
          {
            v91 = swift_release();
            MEMORY[0x2207D6CF8](v91);
            if (!v92)
            {
              if (UsoEntity_common_PostalAddress.requestedAddressField.getter() == 5)
              {
                v88 = 0;
                v90 = 0;
              }
              else
              {
                ContactNLIntent.ContactPostalAddressField.rawValue.getter();
                v88 = v114;
                v90 = v115;
              }
              v94 = v117;
              *(_QWORD *)&v125 = v88;
              goto LABEL_89;
            }
            v88 = String.convertToContactAttributeLabel.getter();
            v90 = v93;
            swift_bridgeObjectRelease();
          }
          *(_QWORD *)&v125 = v88;
          v94 = v117;
LABEL_89:
          *((_QWORD *)&v125 + 1) = v90;
          swift_bridgeObjectRetain_n();
          v95 = Logger.logObject.getter();
          v96 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v95, v96))
          {
            v97 = (uint8_t *)swift_slowAlloc();
            v98 = swift_slowAlloc();
            v124 = v98;
            *(_DWORD *)v97 = 136315138;
            v126 = v88;
            v127 = v90;
            swift_bridgeObjectRetain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            v99 = String.init<A>(describing:)();
            v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v124);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_21FE16000, v95, v96, "#SiriKitGetEntityIntent address was converted to a postal address with value %s", v97, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2207D8768](v98, -1, -1);
            MEMORY[0x2207D8768](v97, -1, -1);
            swift_release();

          }
          else
          {

            swift_release();
            swift_bridgeObjectRelease_n();
          }
          swift_release();
          swift_beginAccess();
          *(_OWORD *)v94 = v125;
          *((_BYTE *)v94 + 16) = 2;
          return;
        }
      }
      else
      {
        outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v126, &demangling cache variable for type metadata for Any?);
      }
      v72 = Logger.logObject.getter();
      v73 = static os_log_type_t.debug.getter();
      v74 = os_log_type_enabled(v72, v73);
      v75 = v117;
      if (v74)
      {
        v76 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v76 = 0;
        _os_log_impl(&dword_21FE16000, v72, v73, "#SiriKitGetEntityIntent address did not convert to a known contact address type", v76, 2u);
        MEMORY[0x2207D8768](v76, -1, -1);
        swift_release();

      }
      else
      {

        swift_release();
      }
      *v75 = 0;
      v75[1] = 0;
      *((_BYTE *)v75 + 16) = -1;
      return;
    }
    type metadata accessor for UsoEntity_common_PhoneNumber();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_28;
    v31 = (char *)v125;
    swift_retain();
    v8 = (char *)dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    swift_release();
    v32 = MEMORY[0x24BEE4AF8];
    v126 = MEMORY[0x24BEE4AF8];
    v33 = (char *)*((_QWORD *)v8 + 2);
    v119 = v31;
    v120 = v33;
    if (!v33)
      break;
    v13 = 0;
    while ((unint64_t)v13 < *((_QWORD *)v8 + 2))
    {
      v34 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v35 = *(_QWORD *)(v3 + 72);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v19, &v8[v34 + v35 * (_QWORD)v13], v30);
      v36 = UsoIdentifier.namespace.getter();
      if (v37)
      {
        if (v36 == 0x707954656E6F6870 && v37 == 0xE900000000000065)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          v40 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
          v40(v121, v19, v30);
          v41 = v126;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v41 = v126;
          }
          v42 = *(_QWORD *)(v41 + 16);
          if (v42 >= *(_QWORD *)(v41 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            v41 = v126;
          }
          *(_QWORD *)(v41 + 16) = v42 + 1;
          v30 = v123;
          v40((char *)(v41 + v34 + v42 * v35), v121, v123);
          v126 = v41;
          a1 = v122;
          goto LABEL_24;
        }
        v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v39 & 1) != 0)
          goto LABEL_19;
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v19, v30);
LABEL_24:
      if (v120 == ++v13)
      {
        v32 = v126;
        goto LABEL_69;
      }
    }
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    swift_once();
  }
LABEL_69:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v32 + 16))
  {
    v68 = v116[0];
    (*(void (**)(_QWORD, unint64_t, uint64_t))(v3 + 16))(v116[0], v32 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v30);
    swift_release();
    v69 = UsoIdentifier.value.getter();
    v71 = v70;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v68, v30);
  }
  else
  {
    v77 = swift_release();
    v69 = MEMORY[0x2207D6C08](v77);
    if (v78)
    {
      v69 = String.convertToContactAttributeLabel.getter();
      v71 = v79;
      swift_bridgeObjectRelease();
    }
    else
    {
      v71 = 0;
    }
  }
  swift_bridgeObjectRetain_n();
  v101 = Logger.logObject.getter();
  v102 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v101, v102))
  {
    v103 = (uint8_t *)swift_slowAlloc();
    v104 = swift_slowAlloc();
    *(_QWORD *)&v125 = v104;
    *(_DWORD *)v103 = 136315138;
    v126 = v69;
    v127 = v71;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v105 = String.init<A>(describing:)();
    v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, (uint64_t *)&v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v101, v102, "#SiriKitGetEntityIntent address was converted to a phone number with value %s", v103, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v104, -1, -1);
    MEMORY[0x2207D8768](v103, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  swift_release();
  v43 = v117;
  *v117 = v69;
  v43[1] = v71;
  v44 = 1;
LABEL_98:
  *((_BYTE *)v43 + 16) = v44;
}

void UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  v53 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_74_8();
  v7 = OUTLINED_FUNCTION_38_7();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5_2();
  v59 = v9;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v10);
  v52 = (uint64_t)&v50 - v11;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_68();
  v60 = v13;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_45_11();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v50 - v17;
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_75_11();
  v54 = v0;
  v19 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  v20 = MEMORY[0x24BEE4AF8];
  v58 = v7;
  if (v19)
  {
    v21 = v19;
    v61 = MEMORY[0x24BEE4AF8];
    v22 = *(_QWORD *)(v19 + 16);
    v56 = v19;
    v57 = v22;
    if (v22)
    {
      v50 = v18;
      v51 = v1;
      v23 = 0;
      v55 = v2;
      do
      {
        if (v23 >= *(_QWORD *)(v21 + 16))
          goto LABEL_45;
        v24 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
        v25 = *(_QWORD *)(v8 + 72);
        OUTLINED_FUNCTION_108_0(v3, v21 + v24 + v25 * v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
        if ((closure #1 in UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter(v3) & 1) != 0)
        {
          OUTLINED_FUNCTION_70_12((uint64_t)v2, v3);
          v26 = v61;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_11_31();
            v26 = v61;
          }
          v27 = *(_QWORD *)(v26 + 16);
          if (v27 >= *(_QWORD *)(v26 + 24) >> 1)
          {
            OUTLINED_FUNCTION_11_31();
            v26 = v61;
          }
          *(_QWORD *)(v26 + 16) = v27 + 1;
          v28 = v26 + v24 + v27 * v25;
          v2 = v55;
          v7 = v58;
          OUTLINED_FUNCTION_70_12(v28, (uint64_t)v55);
          v61 = v26;
          v21 = v56;
        }
        else
        {
          OUTLINED_FUNCTION_28_0(v3, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
        }
        ++v23;
      }
      while (v57 != v23);
      v29 = v61;
      v18 = v50;
      v1 = v51;
    }
    else
    {
      v29 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    specialized Collection.first.getter(v29, v1);
    OUTLINED_FUNCTION_2();
    v30 = OUTLINED_FUNCTION_6_2(v1, 1, v7);
    if (!v31)
    {
      OUTLINED_FUNCTION_108_0((uint64_t)v18, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
      UsoIdentifier.value.getter();
      v42 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
      v43 = (uint64_t)v18;
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_56_14(v30, &demangling cache variable for type metadata for UsoIdentifier?);
    v20 = MEMORY[0x24BEE4AF8];
  }
  v32 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v61 = v20;
  v33 = *(_QWORD *)(v32 + 16);
  if (!v33)
  {
    v41 = v20;
LABEL_35:
    OUTLINED_FUNCTION_55_1();
    v44 = v53;
    specialized Collection.first.getter(v41, v53);
    OUTLINED_FUNCTION_2();
    v45 = OUTLINED_FUNCTION_6_2(v44, 1, v7);
    if (v31)
    {
      v46 = OUTLINED_FUNCTION_80_8(v45, &demangling cache variable for type metadata for UsoIdentifier?);
      v47 = MEMORY[0x2207D6E24](v46);
      if (!v48)
      {
        if (MEMORY[0x2207D6E30](v47))
        {
          dispatch thunk of CodeGenExpression.operand.getter();
          OUTLINED_FUNCTION_2();
        }
      }
      goto LABEL_40;
    }
    v49 = v52;
    OUTLINED_FUNCTION_108_0(v52, v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    UsoIdentifier.value.getter();
    v42 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    v43 = v49;
LABEL_39:
    OUTLINED_FUNCTION_28_0(v43, v42);
LABEL_40:
    OUTLINED_FUNCTION_7();
    return;
  }
  v34 = 0;
  v55 = "ontacts.Deny";
  v56 = 0x800000021FEDF7D0;
  v57 = v33;
  while (v34 < *(_QWORD *)(v32 + 16))
  {
    v3 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v35 = *(_QWORD *)(v8 + 72);
    OUTLINED_FUNCTION_108_0(v60, v32 + v3 + v35 * v34, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
    v36 = UsoIdentifier.namespace.getter();
    if (v37)
    {
      if (v36 == 0xD000000000000012 && v37 == v56)
      {
        OUTLINED_FUNCTION_5_0();
LABEL_26:
        OUTLINED_FUNCTION_70_12(v59, v60);
        v39 = v61;
        if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
        {
          OUTLINED_FUNCTION_11_31();
          v39 = v61;
        }
        v40 = *(_QWORD *)(v39 + 16);
        if (v40 >= *(_QWORD *)(v39 + 24) >> 1)
        {
          OUTLINED_FUNCTION_11_31();
          v39 = v61;
        }
        *(_QWORD *)(v39 + 16) = v40 + 1;
        v7 = v58;
        OUTLINED_FUNCTION_70_12(v39 + v3 + v40 * v35, v59);
        v61 = v39;
        v33 = v57;
        goto LABEL_32;
      }
      v38 = OUTLINED_FUNCTION_11_18();
      OUTLINED_FUNCTION_5_0();
      if ((v38 & 1) != 0)
        goto LABEL_26;
    }
    OUTLINED_FUNCTION_28_0(v60, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
LABEL_32:
    if (v33 == ++v34)
    {
      v41 = v61;
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_45:
  __break(1u);
  OUTLINED_FUNCTION_28_0(v3, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  OUTLINED_FUNCTION_5();
  swift_release();
  __break(1u);
}

uint64_t one-time initialization function for transformer()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<ContactAttribute, UsoEntityBuilderProtocol_common_ContactAddress?>);
  __swift_allocate_value_buffer(v0, static Transformer<>.transformer);
  __swift_project_value_buffer(v0, (uint64_t)static Transformer<>.transformer);
  OUTLINED_FUNCTION_73_7();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntityBuilderProtocol_common_ContactAddress?);
  return Transformer.init(transform:)();
}

void closure #1 in closure #1 in variable initialization expression of static Transformer<>.transformer(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;

  v3 = *a1;
  v4 = objc_msgSend(*a1, sel_contactAttributeType);
  if (v4 == (id)1)
  {
    type metadata accessor for UsoEntityBuilder_common_EmailAddress();
    v5 = (id)UsoEntityBuilder_common_EmailAddress.init(emailAddress:)(v3);
    v6 = MEMORY[0x24BEA27C8];
    goto LABEL_10;
  }
  if (v4 == (id)3)
  {
    v5 = objc_msgSend(v3, sel_postalAddress);
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
      v7 = v5;
      CNLabeledValue<>.init(address:)(v7);
      v9 = v8;
      type metadata accessor for UsoEntityBuilder_common_PostalAddress();
      static UsoEntityBuilder_common_PostalAddress.from(_:)();
      v5 = v10;

      v6 = MEMORY[0x24BEA2BB0];
      goto LABEL_10;
    }
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  if (v4 != (id)2)
  {
    v5 = 0;
    goto LABEL_9;
  }
  type metadata accessor for UsoEntityBuilder_common_PhoneNumber();
  v5 = (id)UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(v3);
  v6 = MEMORY[0x24BEA25E8];
LABEL_10:
  *a2 = v5;
  a2[1] = v6;
}

void closure #1 in static Transformer<>.transformer(_:referenceResolver:)(void *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(a1, a2, (void (*)(uint64_t *__return_ptr, void *))MEMORY[0x24BEA0B28], a3);
}

{
  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(a1, a2, (void (*)(uint64_t *__return_ptr, void *))MEMORY[0x24BEA2068], a3);
}

void *specialized SiriKitGetEntityIntent.resolveReference(_:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  char *v41;
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  char *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 v60;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  v54 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v53 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v53 - v16;
  v55 = v0;
  specialized SiriKitGetEntityIntent.setIsMe(reference:)();
  if (!MEMORY[0x2207D6AA0]())
  {
    v19 = MEMORY[0x2207D6AD0]();
    v21 = v55;
    if (v20)
    {
      v22 = v19;
      v23 = v20;
      v58 = v19;
      v59 = v20;
      v56 = 39;
      v57 = 0xE100000000000000;
      v24 = type metadata accessor for Locale();
      __swift_storeEnumTagSinglePayload((uint64_t)v3, 1, 1, v24);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      v26 = v25;
      outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v3, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
      {
        v58 = v22;
        v59 = v23;
        v22 = StringProtocol.substring(to:)();
        v28 = v27;
        swift_bridgeObjectRelease();
        v23 = v28;
      }
      v29 = (void *)MEMORY[0x2207D7CB8](v22, v23);
      swift_bridgeObjectRelease();
      v30 = (void *)MEMORY[0x2207D7CB8](0x656D614E6C6C7566, 0xE800000000000000);
      objc_msgSend(v21, sel_setValue_forKey_, v29, v30);

    }
    if (MEMORY[0x2207D6A88](v19))
    {
      v31 = MEMORY[0x2207D6C80]();
      v33 = v32;
      swift_release();
      if (v33)
      {
        v34 = (void *)MEMORY[0x2207D7CB8](v31, v33);
        swift_bridgeObjectRelease();
        v35 = (void *)MEMORY[0x2207D7CB8](0xD000000000000010, 0x800000021FEDF9A0);
        objc_msgSend(v21, sel_setValue_forKey_, v34, v35);

      }
    }
    v36 = MEMORY[0x2207D6AAC]();
    specialized static SiriKitGetEntityIntent.resolveAddressType(from:)(v36, &v58);
    swift_release();
    v37 = v58;
    v38 = v59;
    v39 = v60;
    if (v60)
    {
      if (v60 != 1)
      {
        if (v60 != 2)
          goto LABEL_36;
        goto LABEL_35;
      }
      if (v59)
        v47 = MEMORY[0x2207D7CB8](v58, v59);
      else
        v47 = 0;
      v48 = 0x6D754E656E6F6870;
      v49 = 0xEB00000000726562;
    }
    else
    {
      if (v59)
        v47 = MEMORY[0x2207D7CB8](v58, v59);
      else
        v47 = 0;
      v48 = 0x6464416C69616D65;
      v49 = 0xEC00000073736572;
    }
    v50 = (void *)MEMORY[0x2207D7CB8](v48, v49);
    objc_msgSend(v21, sel_setValue_forKey_, v47, v50);
    swift_unknownObjectRelease();

LABEL_35:
    outlined consume of SpecifyingContactAddressType?(v37, v38, v39);
LABEL_36:
    v51 = v21;
    return v21;
  }
  if (!MEMORY[0x2207D6E18]())
  {
LABEL_21:
    UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
    if (v44)
    {
      v45 = MEMORY[0x2207D7CB8]();
      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = 0;
    }
    v21 = v55;
    v46 = (void *)MEMORY[0x2207D7CB8](0x52746361746E6F63, 0xEF6E6F6974616C65);
    objc_msgSend(v21, sel_setValue_forKey_, v45, v46);
    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_36;
  }
  MEMORY[0x2207D6A4C]();
  (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v15, *MEMORY[0x24BEA0470], v4);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v4);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of URL?((uint64_t)v17, (uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined init with copy of URL?((uint64_t)v15, v18, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v4) == 1)
  {
    swift_release();
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    if (__swift_getEnumTagSinglePayload(v18, 1, v4) == 1)
    {
      outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  outlined init with copy of URL?((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if (__swift_getEnumTagSinglePayload(v18, 1, v4) == 1)
  {
    swift_release();
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v12, v4);
LABEL_19:
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v8, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
    goto LABEL_23;
  }
  v41 = v53;
  v40 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 32))(v53, v18, v4);
  lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
  v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  v43 = *(void (**)(char *, uint64_t))(v40 + 8);
  v43(v41, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  v43(v12, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if ((v42 & 1) != 0)
    goto LABEL_21;
LABEL_23:
  swift_release();
  return 0;
}

void SiriKitGetEntityIntent.resolveReference(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_55_0();
  OUTLINED_FUNCTION_78_9();
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_55_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_45_11();
  v5 = MEMORY[0x24BDAC7A8](v4);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_74_8();
  SiriKitGetEntityIntent.setIsMe(reference:)();
}

void closure #1 in static Transformer<>.transformer(_:)(void *a1@<X1>, _QWORD *a2@<X8>)
{
  closure #1 in static Transformer<>.transformer(_:)(a1, (void (*)(uint64_t *__return_ptr, void *))MEMORY[0x24BEA0B28], a2);
}

{
  closure #1 in static Transformer<>.transformer(_:)(a1, (void (*)(uint64_t *__return_ptr, void *))MEMORY[0x24BE9EB40], a2);
}

void closure #1 in static Transformer<>.transformer(_:referenceResolver:)(void *a1@<X1>, uint64_t a2@<X2>, void (*a3)(uint64_t *__return_ptr, void *)@<X3>, _QWORD *a4@<X8>)
{
  id v8;
  char v9;
  char v10;
  void *v11;
  uint64_t v12;

  if (a1)
    v8 = a1;
  else
    v8 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactIntent()), sel_init);
  a3(&v12, a1);
  if (v12)
  {
    swift_retain();
    specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)();
    v10 = v9;
    OUTLINED_FUNCTION_52();
    if ((v10 & 1) != 0)
      specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(a2, (void (*)(uint64_t, _BYTE *))specialized static SiriKitContactIntent.runReferenceResolution(_:completion:));
    v11 = specialized SiriKitGetEntityIntent.resolveReference(_:)();
    OUTLINED_FUNCTION_52();

  }
  else
  {
    v11 = v8;
  }
  *a4 = v11;
}

void closure #1 in static Transformer<>.transformer(_:)(void *a1@<X1>, void (*a2)(uint64_t *__return_ptr, void *)@<X2>, _QWORD *a3@<X8>)
{
  id v6;
  void *v7;
  uint64_t v8;

  if (a1)
    v6 = a1;
  else
    v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactIntent()), sel_init);
  a2(&v8, a1);
  if (v8)
  {
    v7 = specialized SiriKitGetEntityIntent.resolveReference(_:)();
    swift_release();

  }
  else
  {
    v7 = v6;
  }
  *a3 = v7;
}

uint64_t static GetContactAttributeIntent.from(_:_:referenceResolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return OUTLINED_FUNCTION_4_3();
}

{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return OUTLINED_FUNCTION_4_3();
}

{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t static GetContactAttributeIntent.from(_:_:referenceResolver:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = *(id *)(v0 + 32);
  }
  else
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)static GetContactAttributeSlots.intentType.getter()), sel_init);
    v1 = 0;
  }
  OUTLINED_FUNCTION_87_8(v1);
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 56) = v3;
  if (v3)
  {
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v4;
    v5 = OUTLINED_FUNCTION_50_10(v4, (uint64_t)static GetContactAttributeIntent.from(_:_:referenceResolver:));
    return OUTLINED_FUNCTION_13_36(v5);
  }
  else
  {

    return OUTLINED_FUNCTION_1_2(0, *(uint64_t (**)(void))(v0 + 8));
  }
}

{
  uint64_t v0;
  void *v1;
  char v2;
  char v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 72);

  if (v1)
  {
    GetContactAttributeIntent.resolveStructuredName(from:)();
    OUTLINED_FUNCTION_53_2();
    specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)();
    v3 = v2;
    OUTLINED_FUNCTION_49();
    if ((v3 & 1) != 0)
      specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(*(_QWORD *)(v0 + 40), (void (*)(uint64_t, _BYTE *))specialized static SiriKitContactIntent.runReferenceResolution(_:completion:));
    v4 = *(_QWORD *)(v0 + 48);
    swift_release();
  }
  else
  {

    OUTLINED_FUNCTION_49();
    v4 = 0;
  }
  return OUTLINED_FUNCTION_1_2(v4, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = *(id *)(v0 + 32);
  }
  else
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)static GetContactAttributeSlots.intentType.getter()), sel_init);
    v1 = 0;
  }
  OUTLINED_FUNCTION_87_8(v1);
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v3 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 56) = v3;
  if (v3)
  {
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v4;
    v5 = OUTLINED_FUNCTION_50_10(v4, (uint64_t)static GetContactAttributeIntent.from(_:_:referenceResolver:));
    return OUTLINED_FUNCTION_13_36(v5);
  }
  else
  {

    return OUTLINED_FUNCTION_1_2(0, *(uint64_t (**)(void))(v0 + 8));
  }
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = (void *)v0[7];
  if (v1)
  {
    v2 = (id)v0[7];
  }
  else
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)static GetContactAttributeSlots.intentType.getter()), sel_init);
    v1 = 0;
  }
  v0[9] = v2;
  v3 = v1;
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v0[10] = v0[2];
  v4 = (_QWORD *)swift_task_alloc();
  v0[11] = v4;
  v5 = OUTLINED_FUNCTION_50_10(v4, (uint64_t)static GetContactAttributeIntent.from(_:_:referenceResolver:));
  return OUTLINED_FUNCTION_13_36(v5);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_46_14(v0);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  char v20;

  v1 = *(void **)(v0 + 96);

  if (v1)
  {
    MEMORY[0x2207D6D40]();
    if (*(_QWORD *)(v0 + 24))
    {
      v2 = objc_msgSend(*(id *)(v0 + 72), sel_contactAttributeToGet);
      if (!v2 || (v3 = v2, v4 = objc_msgSend(v2, sel_contactAttributeType), v3, v4 != (id)4))
      {
        MEMORY[0x2207D6AC4]();
        OUTLINED_FUNCTION_69_14();
        v5 = *(void **)(v0 + 72);
        OUTLINED_FUNCTION_73_7();
        v14 = OUTLINED_FUNCTION_0_44(4, v6, v7, v8, v9, v10, v11, v12, 0);
        OUTLINED_FUNCTION_12_17(v5, sel_setContactAttributeToGet_);

        v15 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        if (!*(_QWORD *)(v0 + 40)
          || (v16 = MEMORY[0x2207D6AAC](v15), v15 = swift_release(), !v16)
          || (v17 = *(void **)(v0 + 72),
              OUTLINED_FUNCTION_2(),
              v18 = objc_msgSend(v17, sel_contactAttributeToGet),
              v18,
              !v18))
        {
          if (MEMORY[0x2207D6AAC](v15))
          {
            GetContactAttributeIntent.setHandleAttribute(from:)();
            OUTLINED_FUNCTION_67_1();
          }
        }
      }
      swift_release();
    }
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    specialized SiriKitContactIntent.shouldRunReferenceResolution(given:)();
    v20 = v19;
    OUTLINED_FUNCTION_49();
    if ((v20 & 1) != 0)
      specialized SiriKitGetEntityIntent.runReferenceResolution(_:)(*(_QWORD *)(v0 + 64), (void (*)(uint64_t, _BYTE *))specialized static SiriKitContactIntent.runReferenceResolution(_:completion:));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 72));
  }
  else
  {

    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t static GetContactAttributeIntent.from(_:_:referenceResolver:)(uint64_t a1)
{
  OUTLINED_FUNCTION_17_23(a1);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  OUTLINED_FUNCTION_17_23(a1);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeIntent.resolveReferenceAndAttribute(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = swift_getObjectType();
  v3 = OUTLINED_FUNCTION_38_7();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = OUTLINED_FUNCTION_25_0();
  v2[8] = OUTLINED_FUNCTION_25_0();
  v2[9] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeIntent.resolveReferenceAndAttribute(_:)()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
  {
    OUTLINED_FUNCTION_53_2();
    SiriKitGetEntityIntent.resolveReference(_:)();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_46_14(v0);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v14;

  v1 = *(void **)(v0 + 96);
  if (v1)
  {
    OUTLINED_FUNCTION_73_7();
    v2 = v1;
    v3 = OUTLINED_FUNCTION_23_28();
    v11 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v3, v4, v5, v6, v7, v8, v9, v10, v14);
    OUTLINED_FUNCTION_1_37((uint64_t)v11, sel_setContactAttributeToGet_);

  }
  swift_release();
  v12 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_100_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_39_13(v12, *(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_49_0();
  *(_QWORD *)(v1 + 128) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v23;

  v1 = *(void **)(v0 + 128);
  if (v1)
  {
    v2 = *(void **)(v0 + 24);
    OUTLINED_FUNCTION_73_7();
    v3 = v1;
    v4 = OUTLINED_FUNCTION_23_28();
    v12 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v4, v5, v6, v7, v8, v9, v10, v11, v23);
    OUTLINED_FUNCTION_12_17(v2, sel_setContactAttributeToGet_);

    OUTLINED_FUNCTION_49();
  }
  else
  {
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_73_7();
    v20 = OUTLINED_FUNCTION_0_44(4, v13, v14, v15, v16, v17, v18, v19, 0);
    OUTLINED_FUNCTION_1_37((uint64_t)v20, sel_setContactAttributeToGet_);

  }
  swift_release();
  v21 = *(_QWORD *)(v0 + 24);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_100_2();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_39_13(v21, *(uint64_t (**)(void))(v0 + 8));
}

void GetContactAttributeIntent.resolveStructuredName(from:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;

  v1 = v0;
  if (MEMORY[0x2207D6A7C]())
  {
    swift_retain();
    CodeGenBase.entity.getter();
    OUTLINED_FUNCTION_67_1();
    OUTLINED_FUNCTION_103_5();
    OUTLINED_FUNCTION_45();
    if (one-time initialization token for GivenName != -1)
      swift_once();
    OUTLINED_FUNCTION_132_3();
    OUTLINED_FUNCTION_34_18();
    v3 = v2;
    OUTLINED_FUNCTION_96();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_167();
    if (v3)
    {
      OUTLINED_FUNCTION_73_7();
      OUTLINED_FUNCTION_68_15();
      v11 = 7;
    }
    else
    {
      OUTLINED_FUNCTION_24_10();
      CodeGenBase.entity.getter();
      OUTLINED_FUNCTION_67_1();
      OUTLINED_FUNCTION_103_5();
      OUTLINED_FUNCTION_45();
      if (one-time initialization token for FamilyName != -1)
        swift_once();
      OUTLINED_FUNCTION_132_3();
      OUTLINED_FUNCTION_34_18();
      v26 = v25;
      OUTLINED_FUNCTION_96();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_167();
      if (v26)
      {
        OUTLINED_FUNCTION_73_7();
        OUTLINED_FUNCTION_68_15();
        v11 = 8;
      }
      else
      {
        OUTLINED_FUNCTION_24_10();
        CodeGenBase.entity.getter();
        OUTLINED_FUNCTION_67_1();
        OUTLINED_FUNCTION_103_5();
        OUTLINED_FUNCTION_45();
        if (one-time initialization token for NickName != -1)
          swift_once();
        OUTLINED_FUNCTION_132_3();
        OUTLINED_FUNCTION_34_18();
        v28 = v27;
        OUTLINED_FUNCTION_96();
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_167();
        OUTLINED_FUNCTION_73_7();
        if (v28)
        {
          v29 = OUTLINED_FUNCTION_0_44(6, v4, v5, v6, v7, v8, v9, v10, 0);
LABEL_24:
          v30 = v29;
          OUTLINED_FUNCTION_1_37((uint64_t)v29, sel_setContactAttributeToGet_);

LABEL_25:
          swift_release();
          return;
        }
        v32 = 0;
        v11 = 9;
      }
    }
    v29 = OUTLINED_FUNCTION_0_44(v11, v4, v5, v6, v7, v8, v9, v10, v32);
    goto LABEL_24;
  }
  CodeGenBase.entity.getter();
  v12 = UsoEntity.attributes.getter();
  OUTLINED_FUNCTION_2();
  specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, v12);
  v14 = v13;
  OUTLINED_FUNCTION_55_1();
  if (v14)
  {
    if (v14 >> 62)
    {
      OUTLINED_FUNCTION_25_16();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_5();
      if (v31)
      {
LABEL_9:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v14 & 0xC000000000000001) == 0, v14);
        if ((v14 & 0xC000000000000001) != 0)
          MEMORY[0x2207D80C0](0, v14);
        else
          OUTLINED_FUNCTION_24_10();
        OUTLINED_FUNCTION_5();
        dispatch thunk of UsoValue.getAsPrimitiveValueString()();
        v16 = v15;
        swift_bridgeObjectRelease();
        if (!v16)
        {
          OUTLINED_FUNCTION_73_7();
          OUTLINED_FUNCTION_60_15();
          v33 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v17, v18, v19, v20, v21, v22, v23, v24, 0);
          objc_msgSend(v1, sel_setContactAttributeToGet_, v33);
          OUTLINED_FUNCTION_67_1();

          return;
        }
        goto LABEL_25;
      }
    }
    else if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
}

void GetContactAttributeIntent.setHandleAttribute(from:)()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  Swift::String v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  unsigned __int8 v131;
  id v132;
  void *v133[2];
  uint64_t v134;
  int v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  char *v141;
  void *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150[2];
  char v151;

  OUTLINED_FUNCTION_32();
  v2 = v0;
  v4 = v3;
  ObjectType = swift_getObjectType();
  v6 = OUTLINED_FUNCTION_38_7();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v141 = (char *)v133 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_68();
  v140 = v10;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_68();
  v139 = v12;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v13);
  v144 = (char *)v133 - v14;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_68();
  v143 = v16;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_68();
  v142 = v18;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_68();
  v136 = v20;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_69();
  MEMORY[0x24BDAC7A8](v22);
  v24 = (unint64_t)v133 - v23;
  v25 = type metadata accessor for Logger();
  v149 = *(_QWORD *)(v25 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_9_5();
  v148 = v27;
  v147 = OUTLINED_FUNCTION_11_13();
  if (!v147)
    goto LABEL_96;
  v134 = ObjectType;
  v138 = v4;
  if (one-time initialization token for siriContacts != -1)
    goto LABEL_106;
  while (1)
  {
    v28 = __swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
    v29 = v147;
    swift_bridgeObjectRetain_n();
    v146 = v28;
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    v135 = v31;
    v32 = os_log_type_enabled(v30, v31);
    v145 = v1;
    v137 = v2;
    if (v32)
    {
      v33 = (uint8_t *)OUTLINED_FUNCTION_1();
      v150[0] = OUTLINED_FUNCTION_1();
      v133[1] = (void *)v25;
      *(_DWORD *)v33 = 136315138;
      v133[0] = v33 + 4;
      v34 = OUTLINED_FUNCTION_132_3();
      v35 = MEMORY[0x2207D7DE4](v34, v6);
      v37 = v36;
      OUTLINED_FUNCTION_96();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v150);
      OUTLINED_FUNCTION_88_4(v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_5();
      _os_log_impl(&dword_21FE16000, v30, (os_log_type_t)v135, "#GetContactAttributeIntent: checking against %s", v33, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_30();
    v39 = v29;
    static GetContactAttributeIntent.shouldHandleAmbiguousAddressIdentifiers(for:)();
    v42 = v41;
    if ((v43 & 1) != 0)
    {
      v44 = v40;
      OUTLINED_FUNCTION_5();
      v45 = v148;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(v149 + 16))(v148, v146, v25);
      swift_bridgeObjectRetain_n();
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)OUTLINED_FUNCTION_1();
        v147 = OUTLINED_FUNCTION_1();
        v150[0] = v147;
        *(_DWORD *)v48 = 136315138;
        if (v42)
          v49 = v44;
        else
          v49 = 7104878;
        if (v42)
          v50 = v42;
        else
          v50 = 0xE300000000000000;
        swift_bridgeObjectRetain();
        v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v150);
        OUTLINED_FUNCTION_88_4(v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_30();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21FE16000, v46, v47, "#GetContactAttributeIntent: ambiguous address case; assuming user wants postalAddress for %s",
          v48,
          0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_30();
      (*(void (**)(uint64_t, unint64_t))(v149 + 8))(v45, v25);
      v2 = v137;
      OUTLINED_FUNCTION_73_7();
      OUTLINED_FUNCTION_20_0();
      v63 = v44;
      v64 = v42;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      goto LABEL_100;
    }
    OUTLINED_FUNCTION_5_0();
    v52 = MEMORY[0x24BEE4AF8];
    v150[0] = MEMORY[0x24BEE4AF8];
    v53 = *(_QWORD *)(v29 + 16);
    OUTLINED_FUNCTION_25_16();
    v146 = v6;
    v148 = v7;
    v149 = v53;
    if (!v53)
      break;
    v54 = 0;
    v2 = 0;
    while (v54 < *(_QWORD *)(v39 + 16))
    {
      v55 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v25 = *(_QWORD *)(v7 + 72);
      OUTLINED_FUNCTION_33(v24, v39 + v55 + v25 * v54, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
      if ((closure #1 in GetContactAttributeIntent.setHandleAttribute(from:)(v24) & 1) != 0)
      {
        OUTLINED_FUNCTION_29_25(v1, v24);
        v56 = v150[0];
        if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
        {
          v39 = (uint64_t)v150;
          OUTLINED_FUNCTION_11_31();
          OUTLINED_FUNCTION_106_5();
        }
        v57 = *(_QWORD *)(v56 + 16);
        if (v57 >= *(_QWORD *)(v56 + 24) >> 1)
        {
          v39 = (uint64_t)v150;
          OUTLINED_FUNCTION_11_31();
          OUTLINED_FUNCTION_106_5();
        }
        *(_QWORD *)(v56 + 16) = v57 + 1;
        v58 = v56 + v55 + v57 * v25;
        v1 = v145;
        v6 = v146;
        OUTLINED_FUNCTION_29_25(v58, v145);
        v150[0] = v56;
        v7 = v148;
      }
      else
      {
        OUTLINED_FUNCTION_39(v24, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
      }
      if (v149 == ++v54)
      {
        v59 = v150[0];
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    swift_once();
  }
  v59 = v52;
LABEL_28:
  OUTLINED_FUNCTION_5();
  v2 = v142;
  if (*(_QWORD *)(v59 + 16))
  {
    OUTLINED_FUNCTION_5();
    if (!*(_QWORD *)(v59 + 16))
    {
      __break(1u);
      goto LABEL_108;
    }
    OUTLINED_FUNCTION_19_10();
    v69 = v59 + v68;
    v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v71 = v136;
    OUTLINED_FUNCTION_29_25(v136, v59 + v68);
    v72 = UsoIdentifier.value.getter();
    v74 = v73;
    OUTLINED_FUNCTION_102_7();
    v70(v71, v69, v6);
    OUTLINED_FUNCTION_49();
    v75 = UsoIdentifier.namespace.getter();
    v77 = v76;
    OUTLINED_FUNCTION_102_7();
    static UsoIdentifierNamespace.attributeType(for:)(v75, v77);
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_73_7();
    OUTLINED_FUNCTION_20_0();
    v81 = v72;
    v82 = v74;
    v83 = 0;
    v84 = 0;
    v85 = 0;
LABEL_94:
    v132 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v78, v79, v80, v81, v82, v83, v84, v85, v133[0]);
    objc_msgSend(v137, sel_setContactAttributeToGet_, v132, v134);
LABEL_101:

LABEL_102:
    OUTLINED_FUNCTION_7();
    return;
  }
  OUTLINED_FUNCTION_49();
  v86 = MEMORY[0x24BEE4AF8];
  v150[0] = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_25_16();
  if (!v149)
    goto LABEL_47;
  v87 = 0;
  v25 = (unint64_t)"ilType";
  v1 = 0x800000021FEDF820;
  while (2)
  {
    if (v87 >= *(_QWORD *)(v39 + 16))
      goto LABEL_104;
    v88 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v24 = *(_QWORD *)(v7 + 72);
    OUTLINED_FUNCTION_33((uint64_t)v2, v39 + v88 + v24 * v87, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
    v39 = (uint64_t)v2;
    v89 = UsoIdentifier.namespace.getter();
    if (!v90)
      goto LABEL_44;
    if (v89 == 0xD000000000000011 && v90 == 0x800000021FEDF820)
    {
      OUTLINED_FUNCTION_5_0();
      goto LABEL_39;
    }
    v39 = OUTLINED_FUNCTION_11_18();
    OUTLINED_FUNCTION_5_0();
    if ((v39 & 1) != 0)
    {
LABEL_39:
      OUTLINED_FUNCTION_29_25(v143, (uint64_t)v2);
      v91 = v150[0];
      if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
      {
        v39 = (uint64_t)v150;
        OUTLINED_FUNCTION_11_31();
        v91 = v150[0];
      }
      OUTLINED_FUNCTION_107_5();
      if (v92)
      {
        v39 = (uint64_t)v150;
        OUTLINED_FUNCTION_11_31();
        OUTLINED_FUNCTION_106_5();
      }
      *(_QWORD *)(v91 + 16) = v2;
      v93 = v91 + v88 + v6 * v24;
      v6 = v146;
      OUTLINED_FUNCTION_29_25(v93, v143);
      v150[0] = v91;
      v7 = v148;
      v2 = v142;
    }
    else
    {
LABEL_44:
      OUTLINED_FUNCTION_39((uint64_t)v2, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
      v39 = v147;
    }
    if (v149 != ++v87)
      continue;
    break;
  }
  v86 = v150[0];
LABEL_47:
  OUTLINED_FUNCTION_5();
  v94 = *(_QWORD *)(v86 + 16);
  if (v94)
  {
    OUTLINED_FUNCTION_19_10();
    v96 = v86 + v95;
    v97 = *(_QWORD *)(v7 + 72);
    v24 = *(_QWORD *)(v7 + 16);
    OUTLINED_FUNCTION_53_2();
    v98 = MEMORY[0x24BEE4AF8];
    do
    {
      v99 = (uint64_t)v144;
      ((void (*)(char *, uint64_t, uint64_t))v24)(v144, v96, v6);
      v100._countAndFlagsBits = UsoIdentifier.value.getter();
      ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(v100);
      OUTLINED_FUNCTION_39(v99, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
      v101 = v150[0];
      if (LOBYTE(v150[0]) != 70)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_97_5(0, *(_QWORD *)(v98 + 16) + 1);
          v98 = v104;
        }
        v103 = *(_QWORD *)(v98 + 16);
        v102 = *(_QWORD *)(v98 + 24);
        if (v103 >= v102 >> 1)
        {
          v105 = OUTLINED_FUNCTION_91_2(v102);
          OUTLINED_FUNCTION_97_5(v105, v103 + 1);
          v98 = v106;
        }
        *(_QWORD *)(v98 + 16) = v103 + 1;
        *(_BYTE *)(v98 + v103 + 32) = v101;
        v6 = v146;
      }
      v96 += v97;
      --v94;
      v7 = v148;
    }
    while (v94);
    swift_release_n();
    v39 = v147;
  }
  else
  {
    OUTLINED_FUNCTION_49();
    v98 = MEMORY[0x24BEE4AF8];
  }
  if (!*(_QWORD *)(v98 + 16))
  {
    OUTLINED_FUNCTION_55_1();
    v150[0] = MEMORY[0x24BEE4AF8];
    if (v149)
    {
      v108 = 0;
      v25 = 0xEB00000000657079;
      v1 = 0x54746361746E6F63;
      v2 = v139;
      while (1)
      {
        if (v108 >= *(_QWORD *)(v39 + 16))
          goto LABEL_105;
        v24 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        v109 = *(_QWORD *)(v7 + 72);
        OUTLINED_FUNCTION_33((uint64_t)v2, v39 + v24 + v109 * v108, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16));
        v39 = (uint64_t)v2;
        v110 = UsoIdentifier.namespace.getter();
        if (v111)
        {
          if (v110 == 0x54746361746E6F63 && v111 == 0xEB00000000657079)
          {
            OUTLINED_FUNCTION_5_0();
LABEL_72:
            OUTLINED_FUNCTION_29_25(v140, (uint64_t)v2);
            v113 = v150[0];
            if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
            {
              v39 = (uint64_t)v150;
              OUTLINED_FUNCTION_11_31();
              v113 = v150[0];
            }
            OUTLINED_FUNCTION_107_5();
            if (v92)
            {
              v39 = (uint64_t)v150;
              OUTLINED_FUNCTION_11_31();
              OUTLINED_FUNCTION_106_5();
            }
            *(_QWORD *)(v113 + 16) = v2;
            v114 = v113 + v24 + v6 * v109;
            v6 = v146;
            OUTLINED_FUNCTION_29_25(v114, v140);
            v150[0] = v113;
            v7 = v148;
            v2 = v139;
            goto LABEL_77;
          }
          v39 = OUTLINED_FUNCTION_11_18();
          OUTLINED_FUNCTION_5_0();
          if ((v39 & 1) != 0)
            goto LABEL_72;
        }
        OUTLINED_FUNCTION_39((uint64_t)v2, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
        v39 = v147;
LABEL_77:
        if (v149 == ++v108)
        {
          v115 = v150[0];
          goto LABEL_80;
        }
      }
    }
    v115 = MEMORY[0x24BEE4AF8];
LABEL_80:
    OUTLINED_FUNCTION_5();
    v116 = *(_QWORD *)(v115 + 16);
    if (v116)
    {
      OUTLINED_FUNCTION_19_10();
      v119 = v117 + v118;
      v120 = *(_QWORD *)(v7 + 72);
      v121 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      swift_retain();
      v122 = MEMORY[0x24BEE4AF8];
      do
      {
        v123 = (uint64_t)v141;
        v121(v141, v119, v6);
        v124._countAndFlagsBits = UsoIdentifier.value.getter();
        v125.value = ContactNLIntent.NLContactTypeValue.init(rawValue:)(v124).value;
        OUTLINED_FUNCTION_39(v123, *(uint64_t (**)(uint64_t, uint64_t))(v148 + 8));
        if (v125.value != SiriContactsIntents_ContactNLIntent_NLContactTypeValue_unknownDefault)
        {
          if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
          {
            OUTLINED_FUNCTION_98_4(0, *(_QWORD *)(v122 + 16) + 1);
            v122 = v128;
          }
          v127 = *(_QWORD *)(v122 + 16);
          v126 = *(_QWORD *)(v122 + 24);
          if (v127 >= v126 >> 1)
          {
            v129 = OUTLINED_FUNCTION_91_2(v126);
            OUTLINED_FUNCTION_98_4(v129, v127 + 1);
            v122 = v130;
          }
          *(_QWORD *)(v122 + 16) = v127 + 1;
          *(SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional *)(v122 + v127 + 32) = v125;
        }
        v119 += v120;
        --v116;
      }
      while (v116);
      swift_release_n();
    }
    else
    {
      swift_release();
      v122 = MEMORY[0x24BEE4AF8];
    }
    if (*(_QWORD *)(v122 + 16))
    {
      v131 = *(_BYTE *)(v122 + 32);
      OUTLINED_FUNCTION_5_0();
      ContactNLIntent.NLContactTypeValue.attributeTypeAndLabel()(v131);
LABEL_93:
      OUTLINED_FUNCTION_73_7();
      OUTLINED_FUNCTION_85_10();
      OUTLINED_FUNCTION_60_15();
      goto LABEL_94;
    }
    OUTLINED_FUNCTION_5_0();
    v2 = v137;
LABEL_96:
    static SiriKitGetEntityIntent.resolveAddressType(from:)();
    if (v151 && v151 != 1 && v151 != 2)
      goto LABEL_102;
    OUTLINED_FUNCTION_73_7();
    OUTLINED_FUNCTION_85_10();
    OUTLINED_FUNCTION_60_15();
LABEL_100:
    v132 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v60, v61, v62, v63, v64, v65, v66, v67, v133[0]);
    objc_msgSend(v2, sel_setContactAttributeToGet_, v132, v134);
    goto LABEL_101;
  }
  OUTLINED_FUNCTION_5();
  if (*(_QWORD *)(v98 + 16))
  {
    v107 = *(_BYTE *)(v98 + 32);
    OUTLINED_FUNCTION_55_1();
    LOBYTE(v150[0]) = v107;
    ContactNLv3Intent.NLContactAttributesValue.attributeTypeAndLabel()();
    goto LABEL_93;
  }
LABEL_108:
  __break(1u);
  OUTLINED_FUNCTION_39(v24, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  OUTLINED_FUNCTION_5();
  swift_release();
  __break(1u);
}

void closure #1 in static Transformer<>.transformer(_:referenceResolver:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v4 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_45_11();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_75_11();
  if (!a2)
    objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntent()), sel_init);
  v6 = a2;
  OUTLINED_FUNCTION_32_18();
}

void sub_21FEBB158()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void (*v9)(void *, uint64_t);
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  int updated;
  char v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (*(_QWORD *)(v6 - 88))
  {
    MEMORY[0x2207D6A4C]();
    if (__swift_getEnumTagSinglePayload(v2, 1, v3) == 1)
    {
      v7 = outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v5, v2, v3);
      (*(void (**)(void *, _QWORD, uint64_t))(v0 + 104))(v4, *MEMORY[0x24BEA0470], v3);
      lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
      v8 = dispatch thunk of static Equatable.== infix(_:_:)();
      v9 = *(void (**)(void *, uint64_t))(v0 + 8);
      v9(v4, v3);
      v7 = ((uint64_t (*)(uint64_t, uint64_t))v9)(v5, v3);
      if ((v8 & 1) == 0)
      {
        v23 = *(void **)(v6 - 72);
        OUTLINED_FUNCTION_52();

        v22 = 0;
        goto LABEL_20;
      }
    }
    MEMORY[0x2207D6AD0](v7);
    if (v10)
    {
      OUTLINED_FUNCTION_49_17();
      v11 = OUTLINED_FUNCTION_95_6();
      v19 = OUTLINED_FUNCTION_1_44((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v24, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34,
              v35);
      OUTLINED_FUNCTION_53_11((uint64_t)v19, sel_setRelatedContact_);

    }
    OUTLINED_FUNCTION_52();
  }
  updated = UsoTask_update_common_Person.updateTaskType.getter();
  if (updated)
  {
    if (updated == 1)
    {
      if ((UsoTask_update_common_Person.updateRelationshipInfoLocation.getter() & 1) != 0)
      {
        OUTLINED_FUNCTION_31_18();
        if (*(_QWORD *)(v6 - 88))
          OUTLINED_FUNCTION_32_18();
      }
      v21 = UsoTask_update_common_Person.updateRelationshipInfoLocation.getter();
      if (v21 != 2 && (v21 & 1) == 0)
        OUTLINED_FUNCTION_32_18();
    }
  }
  else
  {
    OUTLINED_FUNCTION_31_18();
    if (*(_QWORD *)(v6 - 88))
    {
      UsoEntity_common_Person.updateModifyContactAttributeIntent(_:)();
      swift_release();
    }
  }
  v22 = *(_QWORD *)(v6 - 72);
LABEL_20:
  *v1 = v22;
}

void UsoEntity_common_Person.updateModifyContactAttributeIntent(_:)()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  Swift::String v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  char v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  int v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id *v81;
  void *v82;

  OUTLINED_FUNCTION_32();
  v81 = v2;
  v3 = OUTLINED_FUNCTION_78_9();
  v77 = *(_QWORD *)(v3 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v70 = v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_9_5();
  v80 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_5_2();
  v75 = v10;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_19_12();
  MEMORY[0x24BDAC7A8](v12);
  v78 = (uint64_t)&v68 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrimitiveStringOperators?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v14);
  v73 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v68 - v17;
  v19 = type metadata accessor for PrimitiveStringOperators();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v69 = (uint64_t)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v22);
  v72 = (uint64_t)&v68 - v23;
  OUTLINED_FUNCTION_54();
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v68 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v71 = (uint64_t)&v68 - v29;
  v79 = v0;
  if (!MEMORY[0x2207D6A7C](v28))
    goto LABEL_13;
  v76 = *v81;
  v30 = MEMORY[0x2207D6BD8](objc_msgSend(v76, sel_setContactAttributeToModify_, 6));
  if (!v30)
  {
    MEMORY[0x2207D6BCC]();
    if (v35)
    {
      v36 = v76;
      OUTLINED_FUNCTION_105_4(v76, sel_setModifyOperation_);
      v37 = String.firstLetterCapitalized()();
      OUTLINED_FUNCTION_5();
      outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.modifyNickName.setter(v37._countAndFlagsBits, (uint64_t)v37._object, v36);
    }
    goto LABEL_12;
  }
  v68 = v3;
  v74 = v30;
  dispatch thunk of CodeGenExpression.operand.getter();
  v31 = v82;
  if (v82)
  {
    v32 = String.firstLetterCapitalized()();
    swift_bridgeObjectRelease();
    v31 = (void *)MEMORY[0x2207D7CB8](v32._countAndFlagsBits, v32._object);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v76, sel_setModifyNickName_, v31);

  dispatch thunk of CodeGenExpression.operatorAsString.getter();
  v3 = v68;
  if (!v33)
  {
LABEL_9:
    OUTLINED_FUNCTION_105_4(*v81, sel_setModifyOperation_);
    OUTLINED_FUNCTION_49();
LABEL_12:
    swift_release();
LABEL_13:
    v38 = v80;
    goto LABEL_14;
  }
  PrimitiveStringOperators.init(rawValue:)();
  v34 = OUTLINED_FUNCTION_6_2((uint64_t)v18, 1, v19);
  if (v46)
  {
    OUTLINED_FUNCTION_35_7(v34, &demangling cache variable for type metadata for PrimitiveStringOperators?);
    goto LABEL_9;
  }
  v47 = v71;
  OUTLINED_FUNCTION_66_15(v71, (uint64_t)v18, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
  OUTLINED_FUNCTION_66_15((uint64_t)v27, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16));
  v48 = (*(uint64_t (**)(char *, uint64_t))(v20 + 88))(v27, v19);
  if (v48 == *MEMORY[0x24BEA0518] || v48 == *MEMORY[0x24BEA0530])
  {
    v66 = 3;
  }
  else
  {
    OUTLINED_FUNCTION_78_1((uint64_t)v27, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
    v66 = 0;
  }
  v38 = v80;
  objc_msgSend(v76, sel_setModifyOperation_, v66);
  OUTLINED_FUNCTION_49();
  swift_release();
  OUTLINED_FUNCTION_78_1(v47, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
LABEL_14:
  if (!MEMORY[0x2207D6AA0]())
    goto LABEL_45;
  objc_msgSend(*v81, sel_setContactAttributeToModify_, 10);
  UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
  if (v40)
  {
    v41 = (void *)MEMORY[0x2207D7CB8]();
    v39 = OUTLINED_FUNCTION_55_1();
  }
  else
  {
    v41 = 0;
  }
  v42 = v78;
  OUTLINED_FUNCTION_1_37(v39, sel_setModifyRelationship_);

  if (!MEMORY[0x2207D6E18]())
    goto LABEL_37;
  MEMORY[0x2207D6A4C]();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v1, *MEMORY[0x24BEA0470], v3);
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v3);
  v43 = v38 + *(int *)(v6 + 48);
  outlined init with copy of URL?(v42, v38, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined init with copy of URL?(v1, v43, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_6_2(v38, 1, v3);
  if (v46)
  {
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_58_2(v1);
    OUTLINED_FUNCTION_58_2(v42);
    v44 = OUTLINED_FUNCTION_6_2(v43, 1, v3);
    if (v46)
    {
      OUTLINED_FUNCTION_56_14(v44, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      goto LABEL_37;
    }
LABEL_28:
    OUTLINED_FUNCTION_56_14(v44, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
    goto LABEL_44;
  }
  v80 = v1;
  v45 = v75;
  outlined init with copy of URL?(v38, v75, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_6_2(v43, 1, v3);
  if (v46)
  {
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_58_2(v80);
    OUTLINED_FUNCTION_58_2(v78);
    v44 = OUTLINED_FUNCTION_39(v45, *(uint64_t (**)(uint64_t, uint64_t))(v77 + 8));
    goto LABEL_28;
  }
  v50 = v70;
  v51 = v77;
  OUTLINED_FUNCTION_33(v70, v43, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 32));
  lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
  v52 = dispatch thunk of static Equatable.== infix(_:_:)();
  OUTLINED_FUNCTION_49();
  v53 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v53(v50, v3);
  OUTLINED_FUNCTION_58_2(v80);
  OUTLINED_FUNCTION_58_2(v78);
  v53(v45, v3);
  OUTLINED_FUNCTION_58_2(v38);
  if ((v52 & 1) == 0)
    goto LABEL_44;
LABEL_37:
  if (!MEMORY[0x2207D6E30]())
  {
    OUTLINED_FUNCTION_105_4(*v81, sel_setModifyOperation_);
    goto LABEL_44;
  }
  dispatch thunk of CodeGenExpression.operatorAsString.getter();
  if (!v54)
  {
LABEL_42:
    v57 = *v81;
    v58 = dispatch thunk of CodeGenExpression.operatorAsString.getter();
    v60 = static ModifyOperation.from(_:)(v58, v59);
    OUTLINED_FUNCTION_55_1();
    objc_msgSend(v57, sel_setModifyOperation_, v60);
    OUTLINED_FUNCTION_2();
LABEL_44:
    OUTLINED_FUNCTION_47();
    goto LABEL_45;
  }
  v55 = (uint64_t)v73;
  PrimitiveStringOperators.init(rawValue:)();
  v56 = OUTLINED_FUNCTION_6_2(v55, 1, v19);
  if (v46)
  {
    OUTLINED_FUNCTION_80_8(v56, &demangling cache variable for type metadata for PrimitiveStringOperators?);
    goto LABEL_42;
  }
  v61 = v72;
  OUTLINED_FUNCTION_66_15(v72, v55, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 32));
  v62 = *v81;
  v63 = v69;
  OUTLINED_FUNCTION_66_15(v69, v61, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16));
  v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 88))(v63, v19);
  if (v64 == *MEMORY[0x24BEA0518] || v64 == *MEMORY[0x24BEA0530])
  {
    v67 = 3;
  }
  else
  {
    OUTLINED_FUNCTION_78_1(v63, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
    v67 = 0;
  }
  objc_msgSend(v62, sel_setModifyOperation_, v67);
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_78_1(v72, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
LABEL_45:
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = UsoIdentifier.namespace.getter();
  if (v7)
  {
    if (v6 == 0xD000000000000012 && v7 == 0x800000021FEDF7D0)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
LABEL_7:
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v9 = 1;
      return v9 & 1;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
    if ((v8 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  }
  v10 = UsoIdentifier.namespace.getter();
  if (v11)
  {
    if (v10 == 0x6369746E616D6573 && v11 == 0xEE0065756C61765FLL)
      v9 = 1;
    else
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v9 = 0;
  }
  return v9 & 1;
}

void specialized SiriKitGetEntityIntent.setIsMe(reference:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  void (*v14)(char *, uint64_t);
  Class isa;
  void *v16;
  Class v17;
  void *v18;
  uint64_t v19;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v19 - v11;
  MEMORY[0x2207D6A4C](v10);
  if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v5) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v4, v5);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x24BEA0470], v5);
    v13 = specialized == infix<A>(_:_:)((uint64_t)v12, (uint64_t)v9);
    v14 = *(void (**)(char *, uint64_t))(v6 + 8);
    v14(v9, v5);
    if ((v13 & 1) != 0)
    {
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v16 = (void *)MEMORY[0x2207D7CB8](1699574633, 0xE400000000000000);
      objc_msgSend(v1, sel_setValue_forKey_, isa, v16);

      v14(v12, v5);
      return;
    }
    v14(v12, v5);
  }
  v17 = Bool._bridgeToObjectiveC()().super.super.isa;
  v18 = (void *)MEMORY[0x2207D7CB8](1699574633, 0xE400000000000000);
  objc_msgSend(v1, sel_setValue_forKey_, v17, v18);

}

void SiriKitGetEntityIntent.setIsMe(reference:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_50();
  v4 = OUTLINED_FUNCTION_78_9();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_11_4();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_74_8();
  MEMORY[0x2207D6A4C]();
  OUTLINED_FUNCTION_6_2(v2, 1, v4);
  if (v7)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v0, v2, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v1, *MEMORY[0x24BEA0470], v4);
    v8 = specialized == infix<A>(_:_:)(v0, v1);
    OUTLINED_FUNCTION_96_5(v1);
    if ((v8 & 1) != 0)
    {
      Bool._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_52_14();
    }
    OUTLINED_FUNCTION_96_5(v0);
  }
  Bool._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_52_14();
}

void sub_21FEBC068(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(v1, sel_setValue_forKey_, v2, a1);

  JUMPOUT(0x21FEBC08CLL);
}

void static GetContactAttributeIntent.shouldHandleAmbiguousAddressIdentifiers(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  void (*v28)(void);
  void (*v29)(void);
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  void (*v65)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_28();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_19_12();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v60 - v8;
  v73 = OUTLINED_FUNCTION_38_7();
  v71 = *(_QWORD *)(v73 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_5_2();
  v64 = v11;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_68();
  v70 = v13;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_45_11();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_75_11();
  v16 = OUTLINED_FUNCTION_11_13();
  if (!v16)
    goto LABEL_44;
  v17 = v16;
  v18 = *(_QWORD *)(v16 + 16);
  if (!v18)
  {
    OUTLINED_FUNCTION_23_5();
    goto LABEL_44;
  }
  v63 = v6;
  OUTLINED_FUNCTION_19_10();
  v66 = v19;
  v20 = v17 + v19;
  v74 = *(_QWORD *)(v21 + 72);
  v72 = *(_QWORD *)(v21 + 16);
  swift_bridgeObjectRetain();
  v67 = v20;
  v68 = v18;
  v22 = v73;
  while (1)
  {
    OUTLINED_FUNCTION_57_11(v2, v20);
    v23 = v22;
    v22 = v2;
    UsoIdentifier.namespace.getter();
    if (!v24)
    {
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v2, v23);
      v22 = v23;
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_55_13();
    v26 = v26 && v25 == 0xEB00000000657079;
    if (v26)
      break;
    v27 = OUTLINED_FUNCTION_18_25();
    OUTLINED_FUNCTION_5();
    v28 = *(void (**)(void))(v71 + 8);
    OUTLINED_FUNCTION_84_7();
    v28();
    if ((v27 & 1) != 0)
    {
      v65 = v28;
      v61 = v0;
      v62 = v9;
      goto LABEL_16;
    }
LABEL_12:
    v20 += v74;
    if (!--v18)
    {
      OUTLINED_FUNCTION_30();
      goto LABEL_44;
    }
  }
  v61 = v0;
  v62 = v9;
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_84_7();
  v65 = v29;
  v29();
LABEL_16:
  OUTLINED_FUNCTION_23_5();
  v75 = MEMORY[0x24BEE4AF8];
  v69 = v17;
  swift_bridgeObjectRetain();
  v30 = 0;
  do
  {
    if (v30 >= *(_QWORD *)(v69 + 16))
    {
      __break(1u);
      return;
    }
    v31 = v30 + 1;
    OUTLINED_FUNCTION_57_11(v1, v67 + v30 * v74);
    v32 = 0;
    while (1)
    {
      v33 = outlined read-only object #0 of static GetContactAttributeIntent.shouldHandleAmbiguousAddressIdentifiers(for:)[v32 + 32];
      v34 = *(_QWORD *)&aAddress_6[8 * v33];
      v35 = *(_QWORD *)&aAnyAddrgymAddr_1[8 * v33 + 40];
      if (v34 == UsoIdentifier.value.getter() && v35 == v36)
        break;
      v38 = OUTLINED_FUNCTION_11_18();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_0();
      if ((v38 & 1) != 0)
        goto LABEL_27;
      if (++v32 == 6)
      {
        OUTLINED_FUNCTION_84_7();
        v65();
        goto LABEL_32;
      }
    }
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_0();
LABEL_27:
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32);
    v40 = v73;
    v39(v70, v1, v73);
    v41 = v75;
    if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
    {
      OUTLINED_FUNCTION_11_31();
      v40 = v73;
      v41 = v75;
    }
    v43 = *(_QWORD *)(v41 + 16);
    v42 = *(_QWORD *)(v41 + 24);
    if (v43 >= v42 >> 1)
    {
      OUTLINED_FUNCTION_91_2(v42);
      OUTLINED_FUNCTION_11_31();
      v40 = v73;
      v41 = v75;
    }
    *(_QWORD *)(v41 + 16) = v43 + 1;
    v39(v41 + v66 + v43 * v74, v70, v40);
    v75 = v41;
LABEL_32:
    v30 = v31;
  }
  while (v31 != v68);
  OUTLINED_FUNCTION_5_0();
  v44 = *(_QWORD *)(v75 + 16);
  if (v44)
  {
    v45 = v75 + v66;
    swift_retain();
    v47 = v61;
    v46 = (uint64_t)v62;
    v48 = v64;
    v49 = v65;
    while (1)
    {
      OUTLINED_FUNCTION_57_11(v48, v45);
      v50 = v48;
      UsoIdentifier.namespace.getter();
      if (v51)
      {
        OUTLINED_FUNCTION_55_13();
        if (v26 && v52 == 0xEB00000000657079)
        {
          OUTLINED_FUNCTION_51_15();
          OUTLINED_FUNCTION_5();
          goto LABEL_47;
        }
        v54 = OUTLINED_FUNCTION_18_25();
        OUTLINED_FUNCTION_5();
        if ((v54 & 1) != 0)
          break;
      }
      OUTLINED_FUNCTION_84_7();
      v49();
      v45 += v74;
      if (!--v44)
      {
        OUTLINED_FUNCTION_51_15();
        v55 = 1;
        goto LABEL_48;
      }
    }
    OUTLINED_FUNCTION_51_15();
LABEL_47:
    v50 = v73;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32))(v46, v48, v73);
    v55 = 0;
LABEL_48:
    __swift_storeEnumTagSinglePayload(v46, v55, 1, v50);
    OUTLINED_FUNCTION_51_15();
    outlined init with copy of URL?(v46, v47, &demangling cache variable for type metadata for UsoIdentifier?);
    OUTLINED_FUNCTION_6_2(v47, 1, v50);
    if (v26)
    {
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v47, &demangling cache variable for type metadata for UsoIdentifier?);
      v56 = (uint64_t)v63;
      specialized Collection.first.getter(v69, (uint64_t)v63);
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_6_2(v56, 1, v50);
      if (v26)
      {
        OUTLINED_FUNCTION_58_2(v46);
        OUTLINED_FUNCTION_58_2(v56);
      }
      else
      {
        v58 = v50;
        v59 = UsoIdentifier.value.getter();
        OUTLINED_FUNCTION_56_14(v59, &demangling cache variable for type metadata for UsoIdentifier?);
        ((void (*)(uint64_t, uint64_t))v49)(v56, v58);
      }
    }
    else
    {
      UsoIdentifier.value.getter();
      ((void (*)(uint64_t, uint64_t))v49)(v47, v50);
      v57 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_56_14(v57, &demangling cache variable for type metadata for UsoIdentifier?);
    }
  }
  else
  {
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_51_15();
  }
LABEL_44:
  OUTLINED_FUNCTION_7();
}

uint64_t closure #1 in GetContactAttributeIntent.setHandleAttribute(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  void (*v13)(char *, uint64_t, uint64_t);
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  _QWORD v24[2];

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)v24 - v7;
  v9 = UsoIdentifier.namespace.getter();
  if (v10)
  {
    if (v9 == 0x707954656E6F6870 && v10 == 0xE900000000000065)
      v12 = 1;
    else
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v13(v8, a1, v2);
  if ((v12 & 1) != 0)
  {
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v8, v2);
LABEL_27:
    v13(v6, a1, v2);
LABEL_28:
    v14(v6, v2);
    v22 = 1;
    return v22 & 1;
  }
  v15 = UsoIdentifier.namespace.getter();
  if (v16)
  {
    if (v15 == 0x7079546C69616D65 && v16 == 0xE900000000000065)
    {
      v14 = *(void (**)(char *, uint64_t))(v3 + 8);
      v14(v8, v2);
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v8, v2);
    swift_bridgeObjectRelease();
    v13(v6, a1, v2);
    if ((v18 & 1) != 0)
      goto LABEL_28;
  }
  else
  {
    v14 = *(void (**)(char *, uint64_t))(v3 + 8);
    v14(v8, v2);
    v13(v6, a1, v2);
  }
  v19 = UsoIdentifier.namespace.getter();
  if (v20)
  {
    if (v19 == 0x5473736572646461 && v20 == 0xEB00000000657079)
      v22 = 1;
    else
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v14(v6, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14(v6, v2);
    v22 = 0;
  }
  return v22 & 1;
}

uint64_t outlined consume of SpecifyingContactAddressType?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return outlined consume of SiriKitContactIntentResolvedValue(a1, a2, a3);
  return a1;
}

id OUTLINED_FUNCTION_0_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  return ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(a1, 0, 0, 0, 0, 0, 0, 0, a9);
}

id OUTLINED_FUNCTION_1_44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;

  return Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(0, 0, v20, v21, 0, 0, 0, 0, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

void OUTLINED_FUNCTION_11_31()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_13_36(uint64_t a1)
{
  return GetContactAttributeIntent.resolveReferenceAndAttribute(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_17_23(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 - 8) = *v1;
  *(_QWORD *)(v2 - 8) = *v1;
  *(_QWORD *)(v3 + 72) = a1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_18_25()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_23_28()
{
  return 4;
}

uint64_t OUTLINED_FUNCTION_29_25(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_31_18()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

void OUTLINED_FUNCTION_32_18()
{
  JUMPOUT(0x2207D6D64);
}

void OUTLINED_FUNCTION_34_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  specialized Dictionary.subscript.getter(v1, v2, v0);
}

uint64_t OUTLINED_FUNCTION_39_13(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_46_14(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 8) = *v2;
  *(_QWORD *)(v1 + 96) = a1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_49_17()
{
  return type metadata accessor for Contact();
}

uint64_t OUTLINED_FUNCTION_51_15()
{
  return swift_release();
}

void OUTLINED_FUNCTION_52_14()
{
  JUMPOUT(0x2207D7CB8);
}

id OUTLINED_FUNCTION_53_11(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_56_14(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_57_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 112))(a1, a2, v2);
}

id OUTLINED_FUNCTION_65_12(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  return objc_msgSend(v4, a2, v2, v3);
}

uint64_t OUTLINED_FUNCTION_66_15@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_67_11()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_69_14()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_70_12(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_76_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_78_9()
{
  return type metadata accessor for UsoEntity_common_Person.DefinedValues();
}

uint64_t OUTLINED_FUNCTION_80_8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

void OUTLINED_FUNCTION_82_5()
{
  JUMPOUT(0x2207D7CB8);
}

void OUTLINED_FUNCTION_86_7()
{
  UsoEntity_common_Person.updateModifyContactAttributeIntent(_:)();
}

id OUTLINED_FUNCTION_87_8@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = v1;
  return a1;
}

uint64_t OUTLINED_FUNCTION_88_4(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = a1;
  return v1 - 128;
}

id OUTLINED_FUNCTION_95_6()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_96_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_97_5(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_98_4(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

id OUTLINED_FUNCTION_100_2()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_102_7()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_103_5()
{
  return UsoEntity.attributes.getter();
}

id OUTLINED_FUNCTION_105_4(id a1, SEL a2)
{
  return objc_msgSend(a1, a2, 1);
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  int64_t v3;
  uint64_t v4;
  uint64_t result;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  int64_t v13;

  specialized _NativeDictionary.makeIterator()(a1, v12);
  v11 = v12[1];
  v3 = v12[3];
  v4 = v12[4];
  v13 = (unint64_t)(v12[2] + 64) >> 6;
  result = swift_bridgeObjectRetain();
  if (!v4)
    goto LABEL_3;
LABEL_2:
  v4 &= v4 - 1;
  while (1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = OUTLINED_FUNCTION_12_32();
    if ((a2(v10) & 1) != 0)
      goto LABEL_22;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_2;
LABEL_3:
    v6 = v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v6 >= v13)
      goto LABEL_22;
    v7 = *(_QWORD *)(v11 + 8 * v6);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3 + 2;
      if (v3 + 2 >= v13)
        goto LABEL_22;
      v7 = *(_QWORD *)(v11 + 8 * v8);
      if (!v7)
      {
        v8 = v3 + 3;
        if (v3 + 3 >= v13)
          goto LABEL_22;
        v7 = *(_QWORD *)(v11 + 8 * v8);
        if (!v7)
        {
          v8 = v3 + 4;
          if (v3 + 4 >= v13)
            goto LABEL_22;
          v7 = *(_QWORD *)(v11 + 8 * v8);
          if (!v7)
          {
            v8 = v3 + 5;
            if (v3 + 5 >= v13)
              goto LABEL_22;
            v7 = *(_QWORD *)(v11 + 8 * v8);
            if (!v7)
            {
              v9 = v3 + 6;
              while (v9 < v13)
              {
                v7 = *(_QWORD *)(v11 + 8 * v9++);
                if (v7)
                {
                  v8 = v9 - 1;
                  goto LABEL_18;
                }
              }
LABEL_22:
              swift_release();
              return OUTLINED_FUNCTION_12_32();
            }
          }
        }
      }
    }
LABEL_18:
    v4 = (v7 - 1) & v7;
    v3 = v8;
  }
  __break(1u);
  return result;
}

uint64_t static Dictionary<>.nlSemantic(forCNLabel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v7 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v8 = &v6[*(int *)(v4 + 20)];
  *(_QWORD *)v8 = "RelationshipLabelKeyForValue";
  *((_QWORD *)v8 + 1) = 28;
  v8[16] = 2;
  if (a2)
  {
    v9 = one-time initialization token for GenderedCNRelationLabelToNLSemanticValue;
    swift_bridgeObjectRetain();
    if (v9 != -1)
      swift_once();
    swift_beginAccess();
    v10 = static Dictionary<>.GenderedCNRelationLabelToNLSemanticValue;
    swift_bridgeObjectRetain();
    v11 = specialized Dictionary.subscript.getter(a1, a2, v10);
    v13 = v12;
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v13)
      goto LABEL_17;
    if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1)
      swift_once();
    v18 = swift_beginAccess();
    MEMORY[0x24BDAC7A8](v18);
    *(&v23 - 2) = a1;
    *(&v23 - 1) = a2;
    v19 = swift_bridgeObjectRetain();
    v11 = specialized Sequence.first(where:)(v19, (uint64_t (*)(uint64_t))partial apply for closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:));
    v21 = v20;
    swift_bridgeObjectRelease();
    if (v21)
    {
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      a1 = v11;
    }
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_21FE16000, v15, v16, "#NLSemanticForCNLabel provided value was nil, returning empty string for key", v17, 2u);
      MEMORY[0x2207D8768](v17, -1, -1);
    }

    a1 = static String.EMPTY.getter();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v6);
  return a1;
}

uint64_t one-time initialization function for NLSemanticValueToCNRelationLabel()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FEDDDE0;
  *(_QWORD *)(v0 + 32) = 0x656972666C726967;
  *(_QWORD *)(v0 + 40) = 0xEA0000000000646ELL;
  *(_QWORD *)(v0 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = 0x6E65697266796F62;
  *(_QWORD *)(v0 + 72) = 0xE900000000000064;
  *(_QWORD *)(v0 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 88) = v2;
  *(_QWORD *)(v0 + 96) = 0x726568746166;
  *(_QWORD *)(v0 + 104) = 0xE600000000000000;
  *(_QWORD *)(v0 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 120) = v3;
  *(_QWORD *)(v0 + 128) = 0x726568746F6DLL;
  *(_QWORD *)(v0 + 136) = 0xE600000000000000;
  *(_QWORD *)(v0 + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 152) = v4;
  OUTLINED_FUNCTION_9_30();
  *(_QWORD *)(v0 + 160) = v5;
  *(_QWORD *)(v0 + 168) = 0xE600000000000000;
  *(_QWORD *)(v0 + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 184) = v6;
  OUTLINED_FUNCTION_8_29();
  *(_QWORD *)(v0 + 192) = v7 & 0xFFFFFFFFFFFFLL | 0x72000000000000;
  *(_QWORD *)(v0 + 200) = 0xE700000000000000;
  *(_QWORD *)(v0 + 208) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 216) = v8;
  *(_QWORD *)(v0 + 224) = 0x726574736973;
  *(_QWORD *)(v0 + 232) = 0xE600000000000000;
  *(_QWORD *)(v0 + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 248) = v9;
  OUTLINED_FUNCTION_17_24();
  *(_QWORD *)(v0 + 256) = v10;
  *(_QWORD *)(v0 + 264) = 0xE700000000000000;
  *(_QWORD *)(v0 + 272) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 280) = v11;
  OUTLINED_FUNCTION_7_35();
  *(_QWORD *)(v0 + 288) = v12 & 0xFFFFFFFFFFFFLL | 0x5F67000000000000;
  *(_QWORD *)(v0 + 296) = 0xEE00656C616D6566;
  *(_QWORD *)(v0 + 304) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 312) = v13;
  *(_QWORD *)(v0 + 320) = 0x646E65697266;
  *(_QWORD *)(v0 + 328) = 0xE600000000000000;
  *(_QWORD *)(v0 + 336) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 344) = v14;
  *(_QWORD *)(v0 + 352) = 0x6573756F7073;
  *(_QWORD *)(v0 + 360) = 0xE600000000000000;
  *(_QWORD *)(v0 + 368) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 376) = v15;
  OUTLINED_FUNCTION_2_52();
  *(_QWORD *)(v0 + 384) = v16 & 0xFFFFFFFFFFFFLL | 0x735F000000000000;
  *(_QWORD *)(v0 + 392) = 0xED00006573756F70;
  *(_QWORD *)(v0 + 400) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 408) = v17;
  OUTLINED_FUNCTION_5_30();
  *(_QWORD *)(v0 + 416) = v18 | 0x6F70735F00000000;
  *(_QWORD *)(v0 + 424) = 0xEB00000000657375;
  *(_QWORD *)(v0 + 432) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 440) = v19;
  *(_QWORD *)(v0 + 448) = 1701210487;
  *(_QWORD *)(v0 + 456) = 0xE400000000000000;
  *(_QWORD *)(v0 + 464) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 472) = v20;
  *(_QWORD *)(v0 + 480) = 0x646E6162737568;
  *(_QWORD *)(v0 + 488) = 0xE700000000000000;
  *(_QWORD *)(v0 + 496) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 504) = v21;
  *(_QWORD *)(v0 + 512) = 0x72656E74726170;
  *(_QWORD *)(v0 + 520) = 0xE700000000000000;
  *(_QWORD *)(v0 + 528) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 536) = v22;
  OUTLINED_FUNCTION_10_32();
  *(_QWORD *)(v0 + 544) = v23;
  *(_QWORD *)(v0 + 552) = 0xE900000000000074;
  *(_QWORD *)(v0 + 560) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 568) = v24;
  OUTLINED_FUNCTION_5_30();
  *(_QWORD *)(v0 + 576) = v25 | 0x7373615F00000000;
  *(_QWORD *)(v0 + 584) = 0xEE00746E61747369;
  *(_QWORD *)(v0 + 592) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 600) = v26;
  *(_QWORD *)(v0 + 608) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 616) = v27;
  *(_QWORD *)(v0 + 624) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 632) = v28;
  *(_QWORD *)(v0 + 640) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 648) = v29;
  *(_QWORD *)(v0 + 656) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 664) = v30;
  OUTLINED_FUNCTION_13_37();
  *(_QWORD *)(v0 + 672) = v31;
  *(_QWORD *)(v0 + 680) = 0xE700000000000000;
  *(_QWORD *)(v0 + 688) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 696) = v32;
  strcpy((char *)(v0 + 704), "manager_female");
  *(_BYTE *)(v0 + 719) = -18;
  *(_QWORD *)(v0 + 720) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 728) = v33;
  OUTLINED_FUNCTION_2_52();
  *(_QWORD *)(v0 + 736) = v34 & 0xFFFFFFFFFFFFLL | 0x6D5F000000000000;
  OUTLINED_FUNCTION_6_40();
  *(_QWORD *)(v0 + 744) = v35;
  *(_QWORD *)(v0 + 752) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 760) = v36;
  OUTLINED_FUNCTION_5_30();
  *(_QWORD *)(v0 + 768) = v37 | 0x6E616D5F00000000;
  *(_QWORD *)(v0 + 776) = 0xEC00000072656761;
  *(_QWORD *)(v0 + 784) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 792) = v38;
  OUTLINED_FUNCTION_16_21();
  *(_QWORD *)(v0 + 800) = v39;
  *(_QWORD *)(v0 + 808) = 0xE900000000000065;
  *(_QWORD *)(v0 + 816) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 824) = v40;
  strcpy((char *)(v0 + 832), "male_colleague");
  *(_BYTE *)(v0 + 847) = -18;
  *(_QWORD *)(v0 + 848) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 856) = v41;
  *(_QWORD *)(v0 + 864) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 872) = v42;
  *(_QWORD *)(v0 + 880) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 888) = v43;
  OUTLINED_FUNCTION_15_26();
  *(_QWORD *)(v0 + 896) = v44;
  *(_QWORD *)(v0 + 904) = 0xE700000000000000;
  *(_QWORD *)(v0 + 912) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 920) = v45;
  OUTLINED_FUNCTION_5_30();
  *(_QWORD *)(v0 + 928) = v46 | 0x6165745F00000000;
  *(_QWORD *)(v0 + 936) = 0xEC00000072656863;
  *(_QWORD *)(v0 + 944) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 952) = v47;
  OUTLINED_FUNCTION_2_52();
  *(_QWORD *)(v0 + 960) = v48 & 0xFFFFFFFFFFFFLL | 0x745F000000000000;
  OUTLINED_FUNCTION_6_40();
  *(_QWORD *)(v0 + 968) = v49;
  *(_QWORD *)(v0 + 976) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 984) = v50;
  *(_QWORD *)(v0 + 992) = 0x646C696863;
  *(_QWORD *)(v0 + 1000) = 0xE500000000000000;
  *(_QWORD *)(v0 + 1008) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1016) = v51;
  *(_QWORD *)(v0 + 1024) = 7237491;
  *(_QWORD *)(v0 + 1032) = 0xE300000000000000;
  *(_QWORD *)(v0 + 1040) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1048) = v52;
  *(_QWORD *)(v0 + 1056) = 0x77656870656ELL;
  *(_QWORD *)(v0 + 1064) = 0xE600000000000000;
  *(_QWORD *)(v0 + 1072) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1080) = v53;
  *(_QWORD *)(v0 + 1088) = 0x656365696ELL;
  *(_QWORD *)(v0 + 1096) = 0xE500000000000000;
  *(_QWORD *)(v0 + 1104) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1112) = v54;
  *(_QWORD *)(v0 + 1120) = 0x656C636E75;
  *(_QWORD *)(v0 + 1128) = 0xE500000000000000;
  *(_QWORD *)(v0 + 1136) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1144) = v55;
  *(_QWORD *)(v0 + 1152) = 1953396065;
  *(_QWORD *)(v0 + 1160) = 0xE400000000000000;
  *(_QWORD *)(v0 + 1168) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1176) = v56;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1184) = v57 | 0x746F6D6400000000;
  *(_QWORD *)(v0 + 1192) = 0xEB00000000726568;
  *(_QWORD *)(v0 + 1200) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1208) = v58;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1216) = v59 | 0x7461666400000000;
  *(_QWORD *)(v0 + 1224) = 0xEB00000000726568;
  *(_QWORD *)(v0 + 1232) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1240) = v60;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1248) = v61 | 0x7261706400000000;
  *(_QWORD *)(v0 + 1256) = 0xEB00000000746E65;
  *(_QWORD *)(v0 + 1264) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1272) = v62;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1280) = v63 | 0x6E6F736400000000;
  *(_QWORD *)(v0 + 1288) = 0xE800000000000000;
  *(_QWORD *)(v0 + 1296) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1304) = v64;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1312) = v65 | 0x7561646400000000;
  *(_QWORD *)(v0 + 1320) = 0xED00007265746867;
  *(_QWORD *)(v0 + 1328) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1336) = v66;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1344) = v67 | 0x6968636400000000;
  *(_QWORD *)(v0 + 1352) = 0xEA0000000000646CLL;
  *(_QWORD *)(v0 + 1360) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1368) = v68;
  OUTLINED_FUNCTION_8_29();
  *(_QWORD *)(v0 + 1376) = v69 & 0xFFFFFFFFFFFFLL | 0x2D72000000000000;
  OUTLINED_FUNCTION_14_31();
  *(_QWORD *)(v0 + 1384) = v70;
  *(_QWORD *)(v0 + 1392) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1400) = v71;
  *(_QWORD *)(v0 + 1408) = 0x6C2D6E692D6E6F73;
  *(_QWORD *)(v0 + 1416) = 0xEA00000000007761;
  *(_QWORD *)(v0 + 1424) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1432) = v72;
  *(_QWORD *)(v0 + 1440) = 0x692D726574736973;
  OUTLINED_FUNCTION_11_32();
  *(_QWORD *)(v0 + 1448) = v73;
  *(_QWORD *)(v0 + 1456) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1464) = v74;
  *(_QWORD *)(v0 + 1472) = 0x7265746867756164;
  *(_QWORD *)(v0 + 1480) = 0xEF77616C2D6E692DLL;
  *(_QWORD *)(v0 + 1488) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1496) = v75;
  strcpy((char *)(v0 + 1504), "child-in-law");
  *(_BYTE *)(v0 + 1517) = 0;
  *(_WORD *)(v0 + 1518) = -5120;
  *(_QWORD *)(v0 + 1520) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1528) = v76;
  strcpy((char *)(v0 + 1536), "mother-in-law");
  *(_WORD *)(v0 + 1550) = -4864;
  *(_QWORD *)(v0 + 1552) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1560) = v77;
  strcpy((char *)(v0 + 1568), "father-in-law");
  *(_WORD *)(v0 + 1582) = -4864;
  *(_QWORD *)(v0 + 1584) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1592) = v78;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1600) = v79 | 0x6E75616400000000;
  *(_QWORD *)(v0 + 1608) = 0xE900000000000074;
  *(_QWORD *)(v0 + 1616) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1624) = v80;
  OUTLINED_FUNCTION_4_36();
  *(_QWORD *)(v0 + 1632) = v81 | 0x636E756400000000;
  *(_QWORD *)(v0 + 1640) = 0xEA0000000000656CLL;
  *(_QWORD *)(v0 + 1648) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1656) = v82;
  *(_QWORD *)(v0 + 1664) = 0x70656E646E617267;
  *(_QWORD *)(v0 + 1672) = 0xEB00000000776568;
  *(_QWORD *)(v0 + 1680) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1688) = v83;
  *(_QWORD *)(v0 + 1696) = 0x65696E646E617267;
  *(_QWORD *)(v0 + 1704) = 0xEA00000000006563;
  *(_QWORD *)(v0 + 1712) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1720) = v84;
  *(_QWORD *)(v0 + 1728) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 1736) = v85;
  *(_QWORD *)(v0 + 1744) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1752) = v86;
  strcpy((char *)(v0 + 1760), "great grandson");
  *(_BYTE *)(v0 + 1775) = -18;
  *(_QWORD *)(v0 + 1776) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1784) = v87;
  *(_QWORD *)(v0 + 1792) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 1800) = v88;
  *(_QWORD *)(v0 + 1808) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1816) = v89;
  *(_QWORD *)(v0 + 1824) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 1832) = v90;
  *(_QWORD *)(v0 + 1840) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1848) = v91;
  *(_QWORD *)(v0 + 1856) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 1864) = v92;
  *(_QWORD *)(v0 + 1872) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1880) = v93;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 1888) = v94 | 0x6572617000000000;
  *(_QWORD *)(v0 + 1896) = 0xEA0000000000746ELL;
  *(_QWORD *)(v0 + 1904) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1912) = v95;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 1920) = v96 | 0x6874616600000000;
  *(_QWORD *)(v0 + 1928) = 0xEA00000000007265;
  *(_QWORD *)(v0 + 1936) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1944) = v97;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 1952) = v98 | 0x68746F6D00000000;
  *(_QWORD *)(v0 + 1960) = 0xEA00000000007265;
  *(_QWORD *)(v0 + 1968) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 1976) = v99;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 1984) = v100 | 0x6C69686300000000;
  *(_QWORD *)(v0 + 1992) = 0xE900000000000064;
  *(_QWORD *)(v0 + 2000) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2008) = v101;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 2016) = v102 | 0x6E6F7300000000;
  *(_QWORD *)(v0 + 2024) = 0xE700000000000000;
  *(_QWORD *)(v0 + 2032) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2040) = v103;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 2048) = v104 | 0x6775616400000000;
  *(_QWORD *)(v0 + 2056) = 0xEC00000072657468;
  *(_QWORD *)(v0 + 2064) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2072) = v105;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 2080) = v106 | 0x746F726200000000;
  *(_QWORD *)(v0 + 2088) = 0xEB00000000726568;
  *(_QWORD *)(v0 + 2096) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2104) = v107;
  OUTLINED_FUNCTION_3_32();
  *(_QWORD *)(v0 + 2112) = v108 | 0x7473697300000000;
  *(_QWORD *)(v0 + 2120) = 0xEA00000000007265;
  *(_QWORD *)(v0 + 2128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2136) = v109;
  *(_QWORD *)(v0 + 2144) = 0x207265676E756F79;
  *(_QWORD *)(v0 + 2152) = 0xEF676E696C626973;
  *(_QWORD *)(v0 + 2160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2168) = v110;
  strcpy((char *)(v0 + 2176), "elder sibling");
  *(_WORD *)(v0 + 2190) = -4864;
  *(_QWORD *)(v0 + 2192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2200) = v111;
  *(_QWORD *)(v0 + 2208) = 0x207265676E756F79;
  OUTLINED_FUNCTION_6_40();
  *(_QWORD *)(v0 + 2216) = v112;
  *(_QWORD *)(v0 + 2224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2232) = v113;
  *(_QWORD *)(v0 + 2240) = 0x747365676E756F79;
  *(_QWORD *)(v0 + 2248) = 0xEF72657473697320;
  *(_QWORD *)(v0 + 2256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2264) = v114;
  strcpy((char *)(v0 + 2272), "elder sister");
  *(_BYTE *)(v0 + 2285) = 0;
  *(_WORD *)(v0 + 2286) = -5120;
  *(_QWORD *)(v0 + 2288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2296) = v115;
  strcpy((char *)(v0 + 2304), "eldest sister");
  *(_WORD *)(v0 + 2318) = -4864;
  *(_QWORD *)(v0 + 2320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2328) = v116;
  *(_QWORD *)(v0 + 2336) = 0x207265676E756F79;
  OUTLINED_FUNCTION_8_29();
  *(_QWORD *)(v0 + 2344) = v117 & 0xFFFFFFFFFFFFLL | 0xEF72000000000000;
  *(_QWORD *)(v0 + 2352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2360) = v118;
  *(_QWORD *)(v0 + 2368) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2376) = v119;
  *(_QWORD *)(v0 + 2384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2392) = v120;
  strcpy((char *)(v0 + 2400), "elder brother");
  *(_WORD *)(v0 + 2414) = -4864;
  *(_QWORD *)(v0 + 2416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2424) = v121;
  *(_QWORD *)(v0 + 2432) = 0x6220747365646C65;
  OUTLINED_FUNCTION_6_40();
  *(_QWORD *)(v0 + 2440) = v122;
  *(_QWORD *)(v0 + 2448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2456) = v123;
  *(_QWORD *)(v0 + 2464) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2472) = v124;
  *(_QWORD *)(v0 + 2480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2488) = v125;
  *(_QWORD *)(v0 + 2496) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2504) = v126;
  *(_QWORD *)(v0 + 2512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2520) = v127;
  *(_QWORD *)(v0 + 2528) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2536) = v128;
  *(_QWORD *)(v0 + 2544) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2552) = v129;
  *(_QWORD *)(v0 + 2560) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2568) = v130;
  *(_QWORD *)(v0 + 2576) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2584) = v131;
  *(_QWORD *)(v0 + 2592) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2600) = v132;
  *(_QWORD *)(v0 + 2608) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2616) = v133;
  *(_QWORD *)(v0 + 2624) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2632) = v134;
  *(_QWORD *)(v0 + 2640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2648) = v135;
  *(_QWORD *)(v0 + 2656) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2664) = v136;
  *(_QWORD *)(v0 + 2672) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2680) = v137;
  *(_QWORD *)(v0 + 2688) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2696) = v138;
  *(_QWORD *)(v0 + 2704) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2712) = v139;
  *(_QWORD *)(v0 + 2720) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2728) = v140;
  *(_QWORD *)(v0 + 2736) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2744) = v141;
  *(_QWORD *)(v0 + 2752) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2760) = v142;
  *(_QWORD *)(v0 + 2768) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2776) = v143;
  *(_QWORD *)(v0 + 2784) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2792) = v144;
  *(_QWORD *)(v0 + 2800) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2808) = v145;
  *(_QWORD *)(v0 + 2816) = 0xD000000000000019;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2824) = v146;
  *(_QWORD *)(v0 + 2832) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2840) = v147;
  *(_QWORD *)(v0 + 2848) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2856) = v148;
  *(_QWORD *)(v0 + 2864) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2872) = v149;
  *(_QWORD *)(v0 + 2880) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2888) = v150;
  *(_QWORD *)(v0 + 2896) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2904) = v151;
  *(_QWORD *)(v0 + 2912) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2920) = v152;
  *(_QWORD *)(v0 + 2928) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2936) = v153;
  *(_QWORD *)(v0 + 2944) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2952) = v154;
  *(_QWORD *)(v0 + 2960) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 2968) = v155;
  *(_QWORD *)(v0 + 2976) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 2984) = v156;
  *(_QWORD *)(v0 + 2992) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3000) = v157;
  *(_QWORD *)(v0 + 3008) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3016) = v158;
  *(_QWORD *)(v0 + 3024) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3032) = v159;
  *(_QWORD *)(v0 + 3040) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3048) = v160;
  *(_QWORD *)(v0 + 3056) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3064) = v161;
  *(_QWORD *)(v0 + 3072) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3080) = v162;
  *(_QWORD *)(v0 + 3088) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3096) = v163;
  *(_QWORD *)(v0 + 3104) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3112) = v164;
  *(_QWORD *)(v0 + 3120) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3128) = v165;
  *(_QWORD *)(v0 + 3136) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3144) = v166;
  *(_QWORD *)(v0 + 3152) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3160) = v167;
  *(_QWORD *)(v0 + 3168) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3176) = v168;
  *(_QWORD *)(v0 + 3184) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3192) = v169;
  *(_QWORD *)(v0 + 3200) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3208) = v170;
  *(_QWORD *)(v0 + 3216) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3224) = v171;
  *(_QWORD *)(v0 + 3232) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3240) = v172;
  *(_QWORD *)(v0 + 3248) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3256) = v173;
  *(_QWORD *)(v0 + 3264) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3272) = v174;
  *(_QWORD *)(v0 + 3280) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3288) = v175;
  OUTLINED_FUNCTION_9_30();
  *(_QWORD *)(v0 + 3296) = v176 & 0xFFFFFFFFFFFFLL | 0x5F73000000000000;
  *(_QWORD *)(v0 + 3304) = 0xEF676E696C626973;
  *(_QWORD *)(v0 + 3312) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3320) = v177;
  *(_QWORD *)(v0 + 3328) = 0xD000000000000017;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3336) = v178;
  *(_QWORD *)(v0 + 3344) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3352) = v179;
  *(_QWORD *)(v0 + 3360) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3368) = v180;
  *(_QWORD *)(v0 + 3376) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3384) = v181;
  *(_QWORD *)(v0 + 3392) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3400) = v182;
  *(_QWORD *)(v0 + 3408) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3416) = v183;
  *(_QWORD *)(v0 + 3424) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3432) = v184;
  *(_QWORD *)(v0 + 3440) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3448) = v185;
  *(_QWORD *)(v0 + 3456) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3464) = v186;
  *(_QWORD *)(v0 + 3472) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3480) = v187;
  *(_QWORD *)(v0 + 3488) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3496) = v188;
  *(_QWORD *)(v0 + 3504) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3512) = v189;
  *(_QWORD *)(v0 + 3520) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3528) = v190;
  *(_QWORD *)(v0 + 3536) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3544) = v191;
  *(_QWORD *)(v0 + 3552) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3560) = v192;
  *(_QWORD *)(v0 + 3568) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3576) = v193;
  *(_QWORD *)(v0 + 3584) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3592) = v194;
  *(_QWORD *)(v0 + 3600) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3608) = v195;
  *(_QWORD *)(v0 + 3616) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3624) = v196;
  *(_QWORD *)(v0 + 3632) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3640) = v197;
  *(_QWORD *)(v0 + 3648) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3656) = v198;
  *(_QWORD *)(v0 + 3664) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3672) = v199;
  *(_QWORD *)(v0 + 3680) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3688) = v200;
  *(_QWORD *)(v0 + 3696) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3704) = v201;
  *(_QWORD *)(v0 + 3712) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3720) = v202;
  *(_QWORD *)(v0 + 3728) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3736) = v203;
  *(_QWORD *)(v0 + 3744) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3752) = v204;
  *(_QWORD *)(v0 + 3760) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3768) = v205;
  *(_QWORD *)(v0 + 3776) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3784) = v206;
  *(_QWORD *)(v0 + 3792) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3800) = v207;
  *(_QWORD *)(v0 + 3808) = 0xD000000000000024;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3816) = v208;
  *(_QWORD *)(v0 + 3824) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3832) = v209;
  *(_QWORD *)(v0 + 3840) = 0xD000000000000024;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3848) = v210;
  *(_QWORD *)(v0 + 3856) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3864) = v211;
  *(_QWORD *)(v0 + 3872) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3880) = v212;
  *(_QWORD *)(v0 + 3888) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3896) = v213;
  *(_QWORD *)(v0 + 3904) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3912) = v214;
  *(_QWORD *)(v0 + 3920) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3928) = v215;
  *(_QWORD *)(v0 + 3936) = 0xD000000000000024;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3944) = v216;
  *(_QWORD *)(v0 + 3952) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3960) = v217;
  *(_QWORD *)(v0 + 3968) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 3976) = v218;
  *(_QWORD *)(v0 + 3984) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 3992) = v219;
  *(_QWORD *)(v0 + 4000) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4008) = v220;
  *(_QWORD *)(v0 + 4016) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4024) = v221;
  *(_QWORD *)(v0 + 4032) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4040) = v222;
  *(_QWORD *)(v0 + 4048) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4056) = v223;
  *(_QWORD *)(v0 + 4064) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4072) = v224;
  *(_QWORD *)(v0 + 4080) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4088) = v225;
  *(_QWORD *)(v0 + 4096) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4104) = v226;
  *(_QWORD *)(v0 + 4112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4120) = v227;
  *(_QWORD *)(v0 + 4128) = 0xD000000000000011;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4136) = v228;
  *(_QWORD *)(v0 + 4144) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4152) = v229;
  OUTLINED_FUNCTION_9_30();
  *(_QWORD *)(v0 + 4160) = v230 & 0xFFFFFFFFFFFFLL | 0x692D000000000000;
  OUTLINED_FUNCTION_11_32();
  *(_QWORD *)(v0 + 4168) = v231;
  *(_QWORD *)(v0 + 4176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4184) = v232;
  *(_QWORD *)(v0 + 4192) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4200) = v233;
  *(_QWORD *)(v0 + 4208) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4216) = v234;
  *(_QWORD *)(v0 + 4224) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4232) = v235;
  *(_QWORD *)(v0 + 4240) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4248) = v236;
  *(_QWORD *)(v0 + 4256) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4264) = v237;
  *(_QWORD *)(v0 + 4272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4280) = v238;
  *(_QWORD *)(v0 + 4288) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4296) = v239;
  *(_QWORD *)(v0 + 4304) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4312) = v240;
  OUTLINED_FUNCTION_7_35();
  *(_QWORD *)(v0 + 4320) = v241 & 0xFFFFFFFFFFFFLL | 0x2D67000000000000;
  OUTLINED_FUNCTION_14_31();
  *(_QWORD *)(v0 + 4328) = v242;
  *(_QWORD *)(v0 + 4336) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4344) = v243;
  *(_QWORD *)(v0 + 4352) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4360) = v244;
  *(_QWORD *)(v0 + 4368) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4376) = v245;
  *(_QWORD *)(v0 + 4384) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4392) = v246;
  *(_QWORD *)(v0 + 4400) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4408) = v247;
  *(_QWORD *)(v0 + 4416) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4424) = v248;
  *(_QWORD *)(v0 + 4432) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4440) = v249;
  *(_QWORD *)(v0 + 4448) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4456) = v250;
  *(_QWORD *)(v0 + 4464) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4472) = v251;
  *(_QWORD *)(v0 + 4480) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4488) = v252;
  *(_QWORD *)(v0 + 4496) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4504) = v253;
  *(_QWORD *)(v0 + 4512) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4520) = v254;
  *(_QWORD *)(v0 + 4528) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4536) = v255;
  *(_QWORD *)(v0 + 4544) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4552) = v256;
  *(_QWORD *)(v0 + 4560) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4568) = v257;
  *(_QWORD *)(v0 + 4576) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4584) = v258;
  *(_QWORD *)(v0 + 4592) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4600) = v259;
  *(_QWORD *)(v0 + 4608) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4616) = v260;
  *(_QWORD *)(v0 + 4624) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4632) = v261;
  *(_QWORD *)(v0 + 4640) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4648) = v262;
  *(_QWORD *)(v0 + 4656) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4664) = v263;
  *(_QWORD *)(v0 + 4672) = 0x6E6973756F63;
  *(_QWORD *)(v0 + 4680) = 0xE600000000000000;
  *(_QWORD *)(v0 + 4688) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4696) = v264;
  *(_QWORD *)(v0 + 4704) = 0x756F635F656C616DLL;
  *(_QWORD *)(v0 + 4712) = 0xEB000000006E6973;
  *(_QWORD *)(v0 + 4720) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4728) = v265;
  OUTLINED_FUNCTION_2_52();
  *(_QWORD *)(v0 + 4736) = v266 & 0xFFFFFFFFFFFFLL | 0x635F000000000000;
  *(_QWORD *)(v0 + 4744) = 0xED00006E6973756FLL;
  *(_QWORD *)(v0 + 4752) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4760) = v267;
  *(_QWORD *)(v0 + 4768) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4776) = v268;
  *(_QWORD *)(v0 + 4784) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4792) = v269;
  *(_QWORD *)(v0 + 4800) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4808) = v270;
  *(_QWORD *)(v0 + 4816) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4824) = v271;
  *(_QWORD *)(v0 + 4832) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4840) = v272;
  *(_QWORD *)(v0 + 4848) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4856) = v273;
  *(_QWORD *)(v0 + 4864) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4872) = v274;
  *(_QWORD *)(v0 + 4880) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4888) = v275;
  *(_QWORD *)(v0 + 4896) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4904) = v276;
  *(_QWORD *)(v0 + 4912) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4920) = v277;
  *(_QWORD *)(v0 + 4928) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4936) = v278;
  *(_QWORD *)(v0 + 4944) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4952) = v279;
  *(_QWORD *)(v0 + 4960) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 4968) = v280;
  *(_QWORD *)(v0 + 4976) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 4984) = v281;
  *(_QWORD *)(v0 + 4992) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5000) = v282;
  *(_QWORD *)(v0 + 5008) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5016) = v283;
  *(_QWORD *)(v0 + 5024) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5032) = v284;
  *(_QWORD *)(v0 + 5040) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5048) = v285;
  *(_QWORD *)(v0 + 5056) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5064) = v286;
  *(_QWORD *)(v0 + 5072) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5080) = v287;
  *(_QWORD *)(v0 + 5088) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5096) = v288;
  *(_QWORD *)(v0 + 5104) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5112) = v289;
  *(_QWORD *)(v0 + 5120) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5128) = v290;
  *(_QWORD *)(v0 + 5136) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5144) = v291;
  *(_QWORD *)(v0 + 5152) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5160) = v292;
  *(_QWORD *)(v0 + 5168) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5176) = v293;
  *(_QWORD *)(v0 + 5184) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5192) = v294;
  *(_QWORD *)(v0 + 5200) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5208) = v295;
  *(_QWORD *)(v0 + 5216) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5224) = v296;
  *(_QWORD *)(v0 + 5232) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5240) = v297;
  *(_QWORD *)(v0 + 5248) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5256) = v298;
  *(_QWORD *)(v0 + 5264) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5272) = v299;
  *(_QWORD *)(v0 + 5280) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5288) = v300;
  *(_QWORD *)(v0 + 5296) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5304) = v301;
  *(_QWORD *)(v0 + 5312) = 0xD000000000000023;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5320) = v302;
  *(_QWORD *)(v0 + 5328) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5336) = v303;
  *(_QWORD *)(v0 + 5344) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5352) = v304;
  *(_QWORD *)(v0 + 5360) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5368) = v305;
  *(_QWORD *)(v0 + 5376) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5384) = v306;
  *(_QWORD *)(v0 + 5392) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5400) = v307;
  *(_QWORD *)(v0 + 5408) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5416) = v308;
  *(_QWORD *)(v0 + 5424) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5432) = v309;
  *(_QWORD *)(v0 + 5440) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5448) = v310;
  *(_QWORD *)(v0 + 5456) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5464) = v311;
  *(_QWORD *)(v0 + 5472) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5480) = v312;
  *(_QWORD *)(v0 + 5488) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5496) = v313;
  *(_QWORD *)(v0 + 5504) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5512) = v314;
  *(_QWORD *)(v0 + 5520) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5528) = v315;
  *(_QWORD *)(v0 + 5536) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5544) = v316;
  *(_QWORD *)(v0 + 5552) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5560) = v317;
  *(_QWORD *)(v0 + 5568) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5576) = v318;
  *(_QWORD *)(v0 + 5584) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5592) = v319;
  *(_QWORD *)(v0 + 5600) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5608) = v320;
  *(_QWORD *)(v0 + 5616) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5624) = v321;
  *(_QWORD *)(v0 + 5632) = 0xD000000000000026;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5640) = v322;
  *(_QWORD *)(v0 + 5648) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5656) = v323;
  *(_QWORD *)(v0 + 5664) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5672) = v324;
  *(_QWORD *)(v0 + 5680) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5688) = v325;
  *(_QWORD *)(v0 + 5696) = 0x1000000000000025;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5704) = v326;
  *(_QWORD *)(v0 + 5712) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5720) = v327;
  *(_QWORD *)(v0 + 5728) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5736) = v328;
  *(_QWORD *)(v0 + 5744) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5752) = v329;
  *(_QWORD *)(v0 + 5760) = 0xD000000000000022;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5768) = v330;
  *(_QWORD *)(v0 + 5776) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5784) = v331;
  *(_QWORD *)(v0 + 5792) = 0xD000000000000025;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5800) = v332;
  *(_QWORD *)(v0 + 5808) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5816) = v333;
  *(_QWORD *)(v0 + 5824) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5832) = v334;
  *(_QWORD *)(v0 + 5840) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5848) = v335;
  *(_QWORD *)(v0 + 5856) = 0xD00000000000003ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5864) = v336;
  *(_QWORD *)(v0 + 5872) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5880) = v337;
  *(_QWORD *)(v0 + 5888) = 0xD000000000000038;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5896) = v338;
  *(_QWORD *)(v0 + 5904) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5912) = v339;
  *(_QWORD *)(v0 + 5920) = 0xD000000000000044;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5928) = v340;
  *(_QWORD *)(v0 + 5936) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5944) = v341;
  *(_QWORD *)(v0 + 5952) = 0xD000000000000042;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 5960) = v342;
  *(_QWORD *)(v0 + 5968) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 5976) = v343;
  OUTLINED_FUNCTION_5_30();
  *(_QWORD *)(v0 + 5984) = v344 | 0x7261705F00000000;
  *(_QWORD *)(v0 + 5992) = 0xEC00000072656E74;
  *(_QWORD *)(v0 + 6000) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6008) = v345;
  OUTLINED_FUNCTION_2_52();
  *(_QWORD *)(v0 + 6016) = v346 & 0xFFFFFFFFFFFFLL | 0x705F000000000000;
  OUTLINED_FUNCTION_6_40();
  *(_QWORD *)(v0 + 6024) = v347;
  *(_QWORD *)(v0 + 6032) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6040) = v348;
  OUTLINED_FUNCTION_5_30();
  *(_QWORD *)(v0 + 6048) = v349 | 0x6972665F00000000;
  *(_QWORD *)(v0 + 6056) = 0xEB00000000646E65;
  *(_QWORD *)(v0 + 6064) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6072) = v350;
  OUTLINED_FUNCTION_2_52();
  *(_QWORD *)(v0 + 6080) = v351 & 0xFFFFFFFFFFFFLL | 0x665F000000000000;
  *(_QWORD *)(v0 + 6088) = 0xED0000646E656972;
  *(_QWORD *)(v0 + 6096) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6104) = v352;
  *(_QWORD *)(v0 + 6112) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6120) = v353;
  *(_QWORD *)(v0 + 6128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6136) = v354;
  *(_QWORD *)(v0 + 6144) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6152) = v355;
  *(_QWORD *)(v0 + 6160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6168) = v356;
  *(_QWORD *)(v0 + 6176) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6184) = v357;
  *(_QWORD *)(v0 + 6192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6200) = v358;
  *(_QWORD *)(v0 + 6208) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6216) = v359;
  *(_QWORD *)(v0 + 6224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6232) = v360;
  *(_QWORD *)(v0 + 6240) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6248) = v361;
  *(_QWORD *)(v0 + 6256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6264) = v362;
  *(_QWORD *)(v0 + 6272) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6280) = v363;
  *(_QWORD *)(v0 + 6288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6296) = v364;
  *(_QWORD *)(v0 + 6304) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6312) = v365;
  *(_QWORD *)(v0 + 6320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6328) = v366;
  *(_QWORD *)(v0 + 6336) = 0xD00000000000001ALL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6344) = v367;
  *(_QWORD *)(v0 + 6352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6360) = v368;
  OUTLINED_FUNCTION_7_35();
  *(_QWORD *)(v0 + 6368) = v369 & 0xFFFFFFFFFFFFLL | 0x7367000000000000;
  *(_QWORD *)(v0 + 6376) = 0xEE00646C6968635FLL;
  *(_QWORD *)(v0 + 6384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6392) = v370;
  *(_QWORD *)(v0 + 6400) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6408) = v371;
  *(_QWORD *)(v0 + 6416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6424) = v372;
  *(_QWORD *)(v0 + 6432) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6440) = v373;
  *(_QWORD *)(v0 + 6448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6456) = v374;
  *(_QWORD *)(v0 + 6464) = 0xD000000000000031;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6472) = v375;
  *(_QWORD *)(v0 + 6480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6488) = v376;
  *(_QWORD *)(v0 + 6496) = 0xD000000000000035;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6504) = v377;
  *(_QWORD *)(v0 + 6512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6520) = v378;
  *(_QWORD *)(v0 + 6528) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6536) = v379;
  *(_QWORD *)(v0 + 6544) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6552) = v380;
  *(_QWORD *)(v0 + 6560) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6568) = v381;
  *(_QWORD *)(v0 + 6576) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6584) = v382;
  *(_QWORD *)(v0 + 6592) = 0xD00000000000002CLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6600) = v383;
  *(_QWORD *)(v0 + 6608) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6616) = v384;
  *(_QWORD *)(v0 + 6624) = 0xD000000000000028;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6632) = v385;
  *(_QWORD *)(v0 + 6640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6648) = v386;
  *(_QWORD *)(v0 + 6656) = 0xD00000000000001BLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6664) = v387;
  *(_QWORD *)(v0 + 6672) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6680) = v388;
  *(_QWORD *)(v0 + 6688) = 0x100000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6696) = v389;
  *(_QWORD *)(v0 + 6704) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6712) = v390;
  *(_QWORD *)(v0 + 6720) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6728) = v391;
  *(_QWORD *)(v0 + 6736) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6744) = v392;
  *(_QWORD *)(v0 + 6752) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6760) = v393;
  *(_QWORD *)(v0 + 6768) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6776) = v394;
  *(_QWORD *)(v0 + 6784) = 0xD000000000000018;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6792) = v395;
  *(_QWORD *)(v0 + 6800) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6808) = v396;
  *(_QWORD *)(v0 + 6816) = 0x726F5F656365696ELL;
  *(_QWORD *)(v0 + 6824) = 0xEF6E6973756F635FLL;
  *(_QWORD *)(v0 + 6832) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6840) = v397;
  *(_QWORD *)(v0 + 6848) = 0xD000000000000010;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6856) = v398;
  *(_QWORD *)(v0 + 6864) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6872) = v399;
  *(_QWORD *)(v0 + 6880) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6888) = v400;
  *(_QWORD *)(v0 + 6896) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6904) = v401;
  *(_QWORD *)(v0 + 6912) = 0xD000000000000027;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6920) = v402;
  *(_QWORD *)(v0 + 6928) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6936) = v403;
  *(_QWORD *)(v0 + 6944) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6952) = v404;
  *(_QWORD *)(v0 + 6960) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 6968) = v405;
  *(_QWORD *)(v0 + 6976) = 0xD00000000000001CLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 6984) = v406;
  *(_QWORD *)(v0 + 6992) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(v0 + 7000) = v407;
  *(_QWORD *)(v0 + 7008) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7016) = v408;
  *(_QWORD *)(v0 + 7024) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7032) = v409;
  *(_QWORD *)(v0 + 7040) = 0xD000000000000017;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7048) = v410;
  *(_QWORD *)(v0 + 7056) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7064) = v411;
  *(_QWORD *)(v0 + 7072) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7080) = v412;
  *(_QWORD *)(v0 + 7088) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7096) = v413;
  *(_QWORD *)(v0 + 7104) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7112) = v414;
  *(_QWORD *)(v0 + 7120) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7128) = v415;
  *(_QWORD *)(v0 + 7136) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7144) = v416;
  *(_QWORD *)(v0 + 7152) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7160) = v417;
  *(_QWORD *)(v0 + 7168) = 0xD000000000000018;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7176) = v418;
  *(_QWORD *)(v0 + 7184) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7192) = v419;
  *(_QWORD *)(v0 + 7200) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7208) = v420;
  *(_QWORD *)(v0 + 7216) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7224) = v421;
  *(_QWORD *)(v0 + 7232) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7240) = v422;
  *(_QWORD *)(v0 + 7248) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7256) = v423;
  *(_QWORD *)(v0 + 7264) = 0xD000000000000015;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7272) = v424;
  *(_QWORD *)(v0 + 7280) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7288) = v425;
  *(_QWORD *)(v0 + 7296) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7304) = v426;
  *(_QWORD *)(v0 + 7312) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7320) = v427;
  *(_QWORD *)(v0 + 7328) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7336) = v428;
  *(_QWORD *)(v0 + 7344) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7352) = v429;
  *(_QWORD *)(v0 + 7360) = 0xD000000000000012;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7368) = v430;
  *(_QWORD *)(v0 + 7376) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7384) = v431;
  *(_QWORD *)(v0 + 7392) = 0xD000000000000016;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7400) = v432;
  *(_QWORD *)(v0 + 7408) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7416) = v433;
  *(_QWORD *)(v0 + 7424) = 0xD000000000000013;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7432) = v434;
  *(_QWORD *)(v0 + 7440) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7448) = v435;
  *(_QWORD *)(v0 + 7456) = 0xD00000000000001FLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7464) = v436;
  *(_QWORD *)(v0 + 7472) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7480) = v437;
  *(_QWORD *)(v0 + 7488) = 0xD000000000000020;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7496) = v438;
  *(_QWORD *)(v0 + 7504) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7512) = v439;
  *(_QWORD *)(v0 + 7520) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7528) = v440;
  *(_QWORD *)(v0 + 7536) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7544) = v441;
  *(_QWORD *)(v0 + 7552) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7560) = v442;
  *(_QWORD *)(v0 + 7568) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7576) = v443;
  *(_QWORD *)(v0 + 7584) = 0xD00000000000001DLL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7592) = v444;
  *(_QWORD *)(v0 + 7600) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7608) = v445;
  *(_QWORD *)(v0 + 7616) = 0xD000000000000021;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7624) = v446;
  *(_QWORD *)(v0 + 7632) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7640) = v447;
  *(_QWORD *)(v0 + 7648) = 0xD00000000000001ELL;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7656) = v448;
  *(_QWORD *)(v0 + 7664) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7672) = v449;
  *(_QWORD *)(v0 + 7680) = 0xD000000000000014;
  OUTLINED_FUNCTION_0_45();
  *(_QWORD *)(v0 + 7688) = v450;
  *(_QWORD *)(v0 + 7696) = OUTLINED_FUNCTION_1_45();
  *(_QWORD *)(v0 + 7704) = v451;
  destructiveProjectEnumData for SpecifyingContactAddressType(v0);
  result = Dictionary.init(dictionaryLiteral:)();
  static Dictionary<>.NLSemanticValueToCNRelationLabel = result;
  return result;
}

uint64_t one-time initialization function for GenderedCNRelationLabelToNLSemanticValue()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21FEDB100;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v1;
  OUTLINED_FUNCTION_17_24();
  *(_QWORD *)(inited + 48) = v2;
  *(_QWORD *)(inited + 56) = 0xE700000000000000;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 72) = v3;
  *(_QWORD *)(inited + 80) = 0x6573756F7073;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 104) = v4;
  OUTLINED_FUNCTION_10_32();
  *(_QWORD *)(inited + 112) = v5;
  *(_QWORD *)(inited + 120) = 0xE900000000000074;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 136) = v6;
  OUTLINED_FUNCTION_13_37();
  *(_QWORD *)(inited + 144) = v7;
  *(_QWORD *)(inited + 152) = 0xE700000000000000;
  *(_QWORD *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 168) = v8;
  OUTLINED_FUNCTION_16_21();
  *(_QWORD *)(inited + 176) = v9;
  *(_QWORD *)(inited + 184) = 0xE900000000000065;
  *(_QWORD *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 200) = v10;
  OUTLINED_FUNCTION_15_26();
  *(_QWORD *)(inited + 208) = v11;
  *(_QWORD *)(inited + 216) = 0xE700000000000000;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 232) = v12;
  *(_QWORD *)(inited + 240) = 0x72656E74726170;
  *(_QWORD *)(inited + 248) = 0xE700000000000000;
  *(_QWORD *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 264) = v13;
  *(_QWORD *)(inited + 272) = 0x72656E74726170;
  *(_QWORD *)(inited + 280) = 0xE700000000000000;
  *(_QWORD *)(inited + 288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 296) = v14;
  *(_QWORD *)(inited + 304) = 0x646E65697266;
  *(_QWORD *)(inited + 312) = 0xE600000000000000;
  *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 328) = v15;
  *(_QWORD *)(inited + 336) = 0x646E65697266;
  *(_QWORD *)(inited + 344) = 0xE600000000000000;
  *(_QWORD *)(inited + 352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 360) = v16;
  *(_QWORD *)(inited + 368) = 0x6E6973756F63;
  *(_QWORD *)(inited + 376) = 0xE600000000000000;
  *(_QWORD *)(inited + 384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 392) = v17;
  *(_QWORD *)(inited + 400) = 0x6E6973756F63;
  *(_QWORD *)(inited + 408) = 0xE600000000000000;
  result = Dictionary.init(dictionaryLiteral:)();
  static Dictionary<>.GenderedCNRelationLabelToNLSemanticValue = result;
  return result;
}

uint64_t closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == a5 && a4 == a6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = -1;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  *a2 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  result = a1 + 64;
  v5 = v6;
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t OUTLINED_FUNCTION_1_45()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_12_32()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata completion function for ContactsNeedsValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsNeedsValueStrategy.deinit()
{
  uint64_t v0;

  v0 = ContactsStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_0(v0 + 176);
  return v0;
}

uint64_t ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _OWORD v8[2];
  uint64_t v9;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, a2, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, v6);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v5, &demangling cache variable for type metadata for NLContextUpdate?);
}

uint64_t ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[14] = a3;
  v4[15] = v3;
  v4[12] = a1;
  v4[13] = a2;
  v4[16] = *v3;
  v5 = type metadata accessor for Parse();
  v4[17] = v5;
  v4[18] = *(_QWORD *)(v5 - 8);
  v4[19] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for ParameterIdentifier();
  v4[20] = v6;
  v4[21] = *(_QWORD *)(v6 - 8);
  v4[22] = OUTLINED_FUNCTION_0_0();
  v4[23] = type metadata accessor for Signpost.OpenSignpost();
  v4[24] = OUTLINED_FUNCTION_0_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  SiriContactsIntents::GetContactSlots_optional v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[2];

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  v27 = *(_QWORD *)(v0 + 168);
  v28 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v6 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 248) = v6;
  v7 = v1 + v6;
  *(_QWORD *)v7 = "ParseResponseValueNeedsValue";
  *(_QWORD *)(v7 + 8) = 28;
  *(_BYTE *)(v7 + 16) = 2;
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v4 + 224);
  *(_QWORD *)(v0 + 208) = type metadata accessor for ParameterResolutionRecord();
  ParameterResolutionRecord.parameter.getter();
  v8 = ParameterIdentifier.name.getter();
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v3, v28);
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v8;
  v11._object = v10;
  v12.value = GetContactSlots.init(rawValue:)(v11).value;
  *(SiriContactsIntents::GetContactSlots_optional *)(v0 + 252) = v12;
  if (v12.value == SiriContactsIntents_GetContactSlots_unknownDefault)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v13 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_44_6(v15))
    {
      v16 = OUTLINED_FUNCTION_1();
      v29[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v16 = 136315394;
      v17 = OUTLINED_FUNCTION_24_14();
      *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, (unint64_t)v10, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FE16000, v14, (os_log_type_t)0x1Cu, "#ContactsNeedsValueStrategyAsync<%s> parseValueResponse: encountered invalid parameter %s, throwing", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }
    swift_bridgeObjectRelease_n();

    v25 = *(_QWORD *)(v0 + 192);
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    *v26 = v8;
    v26[1] = (uint64_t)v10;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v25);
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_14_0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 128);
    swift_bridgeObjectRelease();
    Input.parse.getter();
    v21 = ParameterResolutionRecord.intent.getter();
    *(_QWORD *)(v0 + 216) = v21;
    v22 = *(_QWORD *)(v19 + 248);
    *(_QWORD *)(v0 + 224) = v22;
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 232) = v23;
    *v23 = v0;
    v23[1] = ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v20 + 176, v21, v22);
  }
}

{
  uint64_t v0;
  os_log_type_t v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v31[2];

  v2 = *(void **)(v0 + 240);
  if (v2)
  {
    if (swift_dynamicCastUnknownClass())
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v3 = OUTLINED_FUNCTION_26();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
      v4 = Logger.logObject.getter();
      v5 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_44_6(v5))
      {
        v6 = (uint8_t *)OUTLINED_FUNCTION_1();
        *(_QWORD *)&v31[0] = OUTLINED_FUNCTION_1();
        *(_DWORD *)v6 = 136315138;
        v7 = OUTLINED_FUNCTION_24_14();
        *(_QWORD *)(v0 + 88) = OUTLINED_FUNCTION_12_25(v7, v8, v9, v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21FE16000, v4, v1, "#ContactsNeedsValueStrategyAsync<%s> parseValueResponse: Converted ContactIntent to SK intent.", v6, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0();
      }

      v11 = *(_QWORD *)(v0 + 224);
      v12 = *(_BYTE *)(v0 + 252);
      v13 = *(_QWORD *)(v0 + 200);
      v14 = (void *)ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 40) = &type metadata for GetContactSlots;
      *(_QWORD *)(v0 + 48) = &protocol witness table for GetContactSlots;
      *(_BYTE *)(v0 + 16) = v12;
      (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v11 + 48))(v31, v0 + 16, v13, v11);

      __swift_destroy_boxed_opaque_existential_0(v0 + 16);
      goto LABEL_14;
    }

  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = OUTLINED_FUNCTION_1();
    *(_QWORD *)&v31[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v18 = 136315394;
    v19 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v0 + 72) = OUTLINED_FUNCTION_12_25(v19, v20, v21, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v23 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v0 + 80) = OUTLINED_FUNCTION_12_25(v23, v24, v25, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v16, v17, "#ContactsNeedsValueStrategyAsync<%s> parseValueResponse: failed to convert parse to expected intent type %s, returning empty answeredValue and same intent", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  memset(v31, 0, sizeof(v31));
  ParameterResolutionRecord.intent.getter();
LABEL_14:
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  v27 = *(_QWORD *)(v0 + 192);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = type metadata accessor for IntentPromptAnswer();
  __swift_storeEnumTagSinglePayload(v28, 0, 1, v29);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v27);
  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContactsNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)(*(_QWORD *)v1 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

uint64_t ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  v3 = type metadata accessor for NLContextUpdate();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for TemplatingResult();
  v2[8] = v4;
  v2[9] = *(_QWORD *)(v4 - 8);
  v2[10] = OUTLINED_FUNCTION_0_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))(**(int **)(class metadata base offset for ContactsCommonCATs
                                                 + **(_QWORD **)(v0[3] + 96)
                                                 + 416)
                                      + *(_QWORD *)(class metadata base offset for ContactsCommonCATs
                                                  + **(_QWORD **)(v0[3] + 96)
                                                  + 416));
  v1 = (_QWORD *)swift_task_alloc();
  v0[11] = v1;
  *v1 = v0;
  v1[1] = ContactsNeedsValueStrategy.makePromptForValue(resolveRecord:);
  return v3(v0[10]);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  *v2 = *v1;
  *(_QWORD *)(v3 + 96) = v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(uint64_t **)(v0 + 16);
  default argument 1 of ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)();
  v8 = type metadata accessor for AceOutput();
  v9 = MEMORY[0x24BE99088];
  v7[3] = v8;
  v7[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v7);
  ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v1, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  OUTLINED_FUNCTION_14_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t default argument 1 of ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)()
{
  return static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(0, 0, 0, 0, 0, 0);
}

uint64_t ContactsNeedsValueStrategy.__ivar_destroyer()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 + 176);
}

uint64_t ContactsNeedsValueStrategy.__deallocating_deinit()
{
  ContactsNeedsValueStrategy.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for ContactsNeedsValueStrategy()
{
  JUMPOUT(0x2207D8654);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>()
{
  return ContactsNeedsValueStrategy.actionForInput(_:resolveRecord:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.parseValueResponse(input:resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(**(_QWORD **)v3 + 296)
                                                          + *(_QWORD *)(**(_QWORD **)v3 + 296));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return v10(a1, a2, a3);
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makePromptForValue(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(**(_QWORD **)v2 + 304)
                                                + *(_QWORD *)(**(_QWORD **)v2 + 304));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return v8(a1, a2);
}

void protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  v5 = *(_QWORD *)(a3 + 256);
  v6 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 48) = v5;
  type metadata accessor for ContactsNeedsValueStrategy();
}

uint64_t sub_21FEC0EB0()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>;
  return NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)();
}

uint64_t protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>()
{
  uint64_t v0;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_3_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

void protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  v5 = *(_QWORD *)(a3 + 256);
  v6 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 48) = v5;
  type metadata accessor for ContactsNeedsValueStrategy();
}

uint64_t sub_21FEC0F78()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>;
  return NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)();
}

void protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *(_QWORD *)(v5 + 56) = swift_task_alloc();
  v7 = *(_QWORD *)(a5 + 256);
  v8 = *(_OWORD *)(a5 + 240);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a5 + 224);
  *(_OWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 48) = v7;
  type metadata accessor for ContactsNeedsValueStrategy();
}

uint64_t sub_21FEC1020()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

void protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactsNeedsValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)(v6 + 56) = swift_task_alloc();
  v8 = *(_QWORD *)(a6 + 256);
  v9 = *(_OWORD *)(a6 + 240);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a6 + 224);
  *(_OWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 48) = v8;
  type metadata accessor for ContactsNeedsValueStrategy();
}

uint64_t sub_21FEC10DC()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:) in conformance ContactsNeedsValueStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

uint64_t GetContactNeedsValueStrategy.__deallocating_deinit()
{
  uint64_t v0;

  v0 = ContactsStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_0(v0 + 176);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GetContactNeedsValueStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactNeedsValueStrategy;
  if (!type metadata singleton initialization cache for GetContactNeedsValueStrategy)
    return swift_getSingletonMetadata();
  return result;
}

void base witness table accessor for ParameterResolutionHandlingAsync in ContactsNeedsValueStrategy<A, B, C>()
{
  JUMPOUT(0x2207D86A8);
}

uint64_t USOParse.isOrdinalDisambiguation.getter()
{
  return USOParse.isOrdinalDisambiguation.getter((void (*)(_QWORD))MEMORY[0x24BEA0CF8]);
}

uint64_t USOParse.toSiriKitIntent(previousIntent:referenceResolver:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4[47] = a3;
  v4[48] = v3;
  v4[46] = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_update_common_Person, ModifyContactAttributeIntent?>);
  v4[49] = v5;
  v4[50] = *(_QWORD *)(v5 - 8);
  v4[51] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  v4[52] = v6;
  v4[53] = *(_QWORD *)(v6 - 8);
  v4[54] = OUTLINED_FUNCTION_0_0();
  v4[55] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  v4[56] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  v4[57] = OUTLINED_FUNCTION_25_0();
  v4[58] = OUTLINED_FUNCTION_25_0();
  v4[59] = OUTLINED_FUNCTION_25_0();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_update_common_Person, GetContactIntent?>);
  v4[60] = v7;
  v4[61] = *(_QWORD *)(v7 - 8);
  v4[62] = OUTLINED_FUNCTION_0_0();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_checkExistence_common_Person, GetContactIntent?>);
  v4[63] = v8;
  v4[64] = *(_QWORD *)(v8 - 8);
  v4[65] = OUTLINED_FUNCTION_0_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_read_common_Person, GetContactIntent?>);
  v4[66] = v9;
  v4[67] = *(_QWORD *)(v9 - 8);
  v4[68] = OUTLINED_FUNCTION_0_0();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_summarise_common_Person, GetContactIntent?>);
  v4[69] = v10;
  v4[70] = *(_QWORD *)(v10 - 8);
  v4[71] = OUTLINED_FUNCTION_0_0();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<UsoTask_noVerb_common_Person, GetContactIntent?>);
  v4[72] = v11;
  v4[73] = *(_QWORD *)(v11 - 8);
  v4[74] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v4[75] = OUTLINED_FUNCTION_0_0();
  v4[76] = type metadata accessor for Signpost.OpenSignpost();
  v4[77] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t USOParse.toSiriKitIntent(previousIntent:referenceResolver:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t EnumTagSinglePayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  os_log_type_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  void (*v106)(uint64_t, void *);
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD *v124;

  *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE0D00];
  v1 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v0 + 16) = 5198677;
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 24) = 0xE300000000000000;
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);
  v4 = *(_QWORD *)(v0 + 600);
  v124 = (_OWORD *)(v0 + 208);
  v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v6 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v6 + 16) = xmmword_21FED8CB0;
  outlined init with copy of ContactServiceProtocol(v0 + 16, v6 + 32);
  v119 = v6;
  LOBYTE(v118) = 2;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  v7 = *(int *)(v3 + 20);
  *(_DWORD *)(v0 + 696) = v7;
  v8 = v2 + v7;
  *(_QWORD *)v8 = "ToSiriKitIntent";
  *(_QWORD *)(v8 + 8) = 15;
  v9 = (_QWORD *)v0;
  *(_BYTE *)(v8 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  USOParse.preferredUserDialogAct.getter(v4);
  v10 = OUTLINED_FUNCTION_130_0();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v4, 1, v10);
  v12 = *(_QWORD *)(v0 + 600);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_143_1(EnumTagSinglePayload, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_12:
    v14 = v0 + 208;
    *v124 = 0u;
    *(_OWORD *)(v0 + 224) = 0u;
    goto LABEL_13;
  }
  v13 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v12, v10);
  if (!v13)
    goto LABEL_12;
  v14 = v0 + 208;
  static UsoTask_CodegenConverter.convert(task:)();
  OUTLINED_FUNCTION_49();
  if (!*(_QWORD *)(v0 + 232))
  {
LABEL_13:
    outlined destroy of FlowActivity?(v14, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  outlined init with take of Any(v124, (_OWORD *)(v0 + 176));
  outlined init with copy of Any(v0 + 176, v0 + 240);
  type metadata accessor for UsoTask_create_common_Person();
  if ((OUTLINED_FUNCTION_4_37() & 1) != 0
    || (type metadata accessor for UsoTask_delete_common_Person(), (OUTLINED_FUNCTION_4_37() & 1) != 0)
    || (type metadata accessor for UsoTask_update_common_Communication(), OUTLINED_FUNCTION_4_37()))
  {
    OUTLINED_FUNCTION_71_9();
LABEL_11:
    swift_release();
LABEL_42:
    OUTLINED_FUNCTION_125();
    goto LABEL_14;
  }
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_4_37())
  {
    *(_QWORD *)(v0 + 624) = *(_QWORD *)(v0 + 272);
    if ((UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter() & 1) == 0)
    {
      v16 = *(_QWORD *)(v0 + 368);
      if ((UsoTask_noVerb_common_Person.isGetAttributeIntent.getter() & 1) != 0)
      {
        if (v16)
        {
          static GetContactAttributeSlots.intentType.getter();
          OUTLINED_FUNCTION_2_25();
        }
        static GetContactAttributeSlots.intentType.getter();
        v37 = (_QWORD *)swift_task_alloc();
        v9[79] = v37;
        OUTLINED_FUNCTION_40_11(v37, (uint64_t)USOParse.toSiriKitIntent(previousIntent:referenceResolver:));
        OUTLINED_FUNCTION_21_25();
        return static GetContactAttributeIntent.from(_:_:referenceResolver:)(v38, v39, v40);
      }
      if (v16)
      {
        static GetContactSlots.intentType.getter();
        OUTLINED_FUNCTION_2_25();
      }
      v17 = (_QWORD *)v9[74];
      v28 = v9[73];
      v29 = v9[72];
      v41 = OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_31_19(v41);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
LABEL_45:
      Transformer.init(transform:)();
      Transformer.transform.getter();
      v42 = (*(uint64_t (**)(_QWORD *, uint64_t))(v28 + 8))(v17, v29);
      OUTLINED_FUNCTION_16_22(v42, v43, v44, v45, v46, v47, v48, v49, 10, v118, v6);
      OUTLINED_FUNCTION_2();
      if (v17)
      {
LABEL_46:

        OUTLINED_FUNCTION_11_33();
        goto LABEL_42;
      }
LABEL_41:
      OUTLINED_FUNCTION_11_33();
      goto LABEL_42;
    }
LABEL_36:
    __swift_destroy_boxed_opaque_existential_0(v0 + 176);
    goto LABEL_11;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (OUTLINED_FUNCTION_4_37())
  {
    if ((UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter() & 1) != 0)
      goto LABEL_36;
    v17 = *(_QWORD **)(v0 + 368);
    if (v17)
    {
      static GetContactSlots.intentType.getter();
      v17 = (_QWORD *)OUTLINED_FUNCTION_67_12();
    }
    outlined init with copy of ContactServiceProtocol(*(_QWORD *)(v0 + 376), v0 + 136);
    v18 = OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_60_16(v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
    Transformer.init(transform:)();
    OUTLINED_FUNCTION_39_14();
    OUTLINED_FUNCTION_73_11();
LABEL_25:
    v20 = OUTLINED_FUNCTION_79_6(v19);
    OUTLINED_FUNCTION_16_22(v20, v21, v22, v23, v24, v25, v26, v27, 10, v118, v6);
    OUTLINED_FUNCTION_2();
    if (v17)
      goto LABEL_46;
    goto LABEL_41;
  }
  type metadata accessor for UsoTask_read_common_Person();
  if (OUTLINED_FUNCTION_4_37())
  {
    if ((UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter() & 1) == 0)
    {
      if (*(_QWORD *)(v0 + 368))
      {
        static GetContactSlots.intentType.getter();
        OUTLINED_FUNCTION_2_25();
      }
      v17 = *(_QWORD **)(v0 + 544);
      v28 = *(_QWORD *)(v0 + 536);
      v29 = v9[66];
      v30 = OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_31_19(v30);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
      goto LABEL_45;
    }
    goto LABEL_36;
  }
  type metadata accessor for UsoTask_checkExistence_common_Person();
  if (!OUTLINED_FUNCTION_4_37())
  {
    type metadata accessor for UsoTask_request_common_Person();
    if (OUTLINED_FUNCTION_4_37())
    {
      v31 = *(_QWORD *)(v0 + 368);
      *(_QWORD *)(v0 + 672) = *(_QWORD *)(v0 + 304);
      if (v31)
      {
        static GetContactAttributeSlots.intentType.getter();
        swift_dynamicCastClass();
      }
      static GetContactAttributeSlots.intentType.getter();
      v32 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 680) = v32;
      *v32 = v0;
      v32[1] = USOParse.toSiriKitIntent(previousIntent:referenceResolver:);
      OUTLINED_FUNCTION_21_25();
      return static GetContactAttributeIntent.from(_:_:referenceResolver:)(v33, v34, v35);
    }
    type metadata accessor for UsoTask_update_common_Person();
    if (!OUTLINED_FUNCTION_4_37())
    {
LABEL_59:
      OUTLINED_FUNCTION_71_9();
      goto LABEL_42;
    }
    v51 = *(NSObject **)(v0 + 312);
    OUTLINED_FUNCTION_55_3();
    OUTLINED_FUNCTION_83_8();
    v52 = OUTLINED_FUNCTION_66();
    v53 = *(void **)(v0 + 320);
    if (v53)
    {
      v54 = MEMORY[0x2207D6A94](v52);
      OUTLINED_FUNCTION_2();
      if (v54)
      {
        OUTLINED_FUNCTION_51_15();
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v55 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_10_1(v55, (uint64_t)static Logger.siriContacts);
        v56 = OUTLINED_FUNCTION_8();
        if (OUTLINED_FUNCTION_3(v56))
        {
          *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
          OUTLINED_FUNCTION_18_26(&dword_21FE16000, v57, v58, "Learning pronunciation is unsupported");
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_66();
        goto LABEL_59;
      }
    }
    if ((UsoTask_update_common_Person.isChangeContactPoster.getter() & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v59 = (__int128 *)(v0 + 56);
      v60 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v60, (uint64_t)static Logger.siriContacts);
      v61 = OUTLINED_FUNCTION_8();
      if (os_log_type_enabled(v51, v61))
      {
        v62 = (uint8_t *)OUTLINED_FUNCTION_2_1();
        *(_WORD *)v62 = 0;
        OUTLINED_FUNCTION_31(&dword_21FE16000, v51, v61, "Encountered contact poster update request, treating as GetContact", v62);
        OUTLINED_FUNCTION_0();
      }
      v63 = *(_QWORD *)(v0 + 368);

      if (v63)
      {
        static GetContactSlots.intentType.getter();
        v64 = (void *)OUTLINED_FUNCTION_2_25();
      }
      else
      {
        v64 = 0;
      }
      v17 = *(_QWORD **)(v0 + 488);
      outlined init with copy of ContactServiceProtocol(*(_QWORD *)(v0 + 376), (uint64_t)v59);
      v93 = OUTLINED_FUNCTION_13_3();
      *(_QWORD *)(v93 + 16) = v64;
      outlined init with take of FlowProviding(v59, v93 + 24);
      v94 = v64;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
      OUTLINED_FUNCTION_53_12();
      OUTLINED_FUNCTION_39_14();
      v19 = (uint64_t (*)(uint64_t, uint64_t))v17[1];
      goto LABEL_25;
    }
    OUTLINED_FUNCTION_55_3();
    OUTLINED_FUNCTION_83_8();
    v70 = OUTLINED_FUNCTION_66();
    if (*(_QWORD *)(v0 + 328) && (v71 = MEMORY[0x2207D6AA0](v70), v72 = OUTLINED_FUNCTION_2(), v71))
    {
      v73 = MEMORY[0x2207D6E18](v72);
      if (v73)
      {
        v77 = *(_QWORD *)(v0 + 464);
        v76 = *(_QWORD *)(v0 + 472);
        v78 = *(_QWORD *)(v0 + 448);
        v122 = *(_QWORD *)(v0 + 440);
        v80 = *(_QWORD *)(v0 + 416);
        v79 = *(_QWORD *)(v0 + 424);
        MEMORY[0x2207D6A4C](v73, v74, v75);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v79 + 104))(v77, *MEMORY[0x24BEA0470], v80);
        OUTLINED_FUNCTION_52_15(v77);
        v81 = v78 + *(int *)(v122 + 48);
        outlined init with copy of Result<RRResult, Error>(v76, v78, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v82 = v81;
        outlined init with copy of Result<RRResult, Error>(v77, v81, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        OUTLINED_FUNCTION_6_2(v78, 1, v80);
        if (v83)
        {
          v84 = *(void **)(v0 + 472);
          v85 = *(_QWORD *)(v0 + 416);
          OUTLINED_FUNCTION_33_15(*(_QWORD *)(v0 + 464));
          OUTLINED_FUNCTION_33_15((uint64_t)v84);
          OUTLINED_FUNCTION_6_2(v81, 1, v85);
          if (!v83)
            goto LABEL_90;
          outlined destroy of FlowActivity?(*(_QWORD *)(v0 + 448), &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        }
        else
        {
          v95 = *(_QWORD *)(v0 + 416);
          outlined init with copy of Result<RRResult, Error>(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 456), &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v96 = __swift_getEnumTagSinglePayload(v81, 1, v95);
          v97 = *(_QWORD *)(v0 + 456);
          v121 = *(_QWORD *)(v0 + 464);
          v123 = *(_QWORD *)(v0 + 472);
          if (v96 == 1)
          {
            v84 = *(void **)(v0 + 416);
            v98 = *(_QWORD *)(v0 + 424);
            outlined destroy of FlowActivity?(v121, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            outlined destroy of FlowActivity?(v123, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            (*(void (**)(uint64_t, void *))(v98 + 8))(v97, v84);
LABEL_90:
            outlined destroy of FlowActivity?(*(_QWORD *)(v0 + 448), &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
LABEL_91:
            if (one-time initialization token for siriContacts != -1)
              swift_once();
            v99 = OUTLINED_FUNCTION_26();
            OUTLINED_FUNCTION_10_1(v99, (uint64_t)static Logger.siriContacts);
            v100 = OUTLINED_FUNCTION_8();
            if (OUTLINED_FUNCTION_3(v100))
            {
              *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
              OUTLINED_FUNCTION_18_26(&dword_21FE16000, v101, v102, "Modifying other contacts' relationships is unsupported");
              OUTLINED_FUNCTION_0();
            }
            swift_release();
LABEL_96:
            swift_release();

            OUTLINED_FUNCTION_66();
            OUTLINED_FUNCTION_71_9();
            OUTLINED_FUNCTION_125();
LABEL_14:
            static os_signpost_type_t.end.getter();
            OUTLINED_FUNCTION_54_14();
            OUTLINED_FUNCTION_50_16();
            OUTLINED_FUNCTION_22_0();
            OUTLINED_FUNCTION_14_0();
            OUTLINED_FUNCTION_13_0();
            OUTLINED_FUNCTION_21_0();
            swift_task_dealloc();
            OUTLINED_FUNCTION_45_0();
            OUTLINED_FUNCTION_17_0();
            OUTLINED_FUNCTION_23_0();
            OUTLINED_FUNCTION_31_2();
            OUTLINED_FUNCTION_30_2();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            OUTLINED_FUNCTION_21_25();
            __asm { BR              X2 }
          }
          v120 = *(_QWORD *)(v0 + 448);
          v103 = *(_QWORD *)(v0 + 424);
          v104 = *(_QWORD *)(v0 + 432);
          v84 = *(void **)(v0 + 416);
          (*(void (**)(uint64_t, uint64_t, void *))(v103 + 32))(v104, v82, v84);
          lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x24BEA0478], MEMORY[0x24BEA0488]);
          v105 = dispatch thunk of static Equatable.== infix(_:_:)();
          v106 = *(void (**)(uint64_t, void *))(v103 + 8);
          v106(v104, v84);
          OUTLINED_FUNCTION_33_15(v121);
          OUTLINED_FUNCTION_33_15(v123);
          v106(v97, v84);
          OUTLINED_FUNCTION_33_15(v120);
          if ((v105 & 1) == 0)
            goto LABEL_91;
        }
        swift_release();
      }
      swift_release();
      v86 = v0 + 16;
    }
    else
    {
      v86 = v0 + 16;
      v87 = OUTLINED_FUNCTION_55_3();
      MEMORY[0x2207D6D64](v87);
      v88 = OUTLINED_FUNCTION_66();
      if (*(_QWORD *)(v0 + 336))
      {
        v84 = *(void **)(v0 + 336);
        MEMORY[0x2207D6AD0](v88);
        OUTLINED_FUNCTION_60();
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v89 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_10_1(v89, (uint64_t)static Logger.siriContacts);
        v90 = OUTLINED_FUNCTION_8();
        if (OUTLINED_FUNCTION_3(v90))
        {
          *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
          OUTLINED_FUNCTION_18_26(&dword_21FE16000, v91, v92, "Modifying other contacts' attributes is unsupported");
          OUTLINED_FUNCTION_0();
        }
        goto LABEL_96;
      }
    }
    v107 = v86 + 80;
    v17 = *(_QWORD **)(v0 + 368);
    if (v17)
    {
      type metadata accessor for ModifyContactAttributeIntent();
      v17 = (_QWORD *)OUTLINED_FUNCTION_67_12();
    }
    outlined init with copy of ContactServiceProtocol(*(_QWORD *)(v0 + 376), v107);
    v108 = OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_60_16(v108);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeIntent?);
    OUTLINED_FUNCTION_53_12();
    OUTLINED_FUNCTION_39_14();
    OUTLINED_FUNCTION_73_11();
    v110 = OUTLINED_FUNCTION_79_6(v109);
    OUTLINED_FUNCTION_16_22(v110, v111, v112, v113, v114, v115, v116, v117, 10, v118, v119);
    OUTLINED_FUNCTION_2();
    if (v17)
      goto LABEL_46;
    goto LABEL_41;
  }
  *(_QWORD *)(v0 + 648) = *(_QWORD *)(v0 + 296);
  if ((UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter() & 1) != 0)
    goto LABEL_36;
  v50 = *(_QWORD *)(v0 + 368);
  if ((UsoTask_checkExistence_common_Person.isGetAttributeIntent.getter() & 1) == 0)
  {
    if (v50)
    {
      static GetContactSlots.intentType.getter();
      OUTLINED_FUNCTION_2_25();
    }
    v17 = (_QWORD *)v9[65];
    v29 = v9[63];
    v28 = v9[64];
    v69 = OUTLINED_FUNCTION_13_3();
    OUTLINED_FUNCTION_31_19(v69);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GetContactIntent?);
    goto LABEL_45;
  }
  if (v50)
  {
    static GetContactAttributeSlots.intentType.getter();
    OUTLINED_FUNCTION_2_25();
  }
  static GetContactAttributeSlots.intentType.getter();
  v65 = (_QWORD *)swift_task_alloc();
  v9[82] = v65;
  OUTLINED_FUNCTION_40_11(v65, (uint64_t)USOParse.toSiriKitIntent(previousIntent:referenceResolver:));
  OUTLINED_FUNCTION_21_25();
  return static GetContactAttributeIntent.from(_:_:referenceResolver:)(v66, v67, v68);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_48_0();
  *(_QWORD *)(v1 + 640) = v0;
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_48_0();
  *(_QWORD *)(v1 + 664) = v0;
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_48_0();
  *(_QWORD *)(v1 + 688) = v0;
  OUTLINED_FUNCTION_67_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t USOParse.toSiriKitIntent(previousIntent:referenceResolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  OUTLINED_FUNCTION_64_11();
  swift_release();
  OUTLINED_FUNCTION_75_12();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_0_46();
  OUTLINED_FUNCTION_54_14();
  OUTLINED_FUNCTION_50_16();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  return OUTLINED_FUNCTION_2_53(a14, a15, *(uint64_t (**)(void))(v15 + 8));
}

{
  uint64_t v15;

  OUTLINED_FUNCTION_64_11();
  swift_release();
  OUTLINED_FUNCTION_75_12();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_0_46();
  OUTLINED_FUNCTION_54_14();
  OUTLINED_FUNCTION_50_16();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  return OUTLINED_FUNCTION_2_53(a14, a15, *(uint64_t (**)(void))(v15 + 8));
}

{
  uint64_t v15;

  OUTLINED_FUNCTION_64_11();
  swift_release();
  OUTLINED_FUNCTION_75_12();
  OUTLINED_FUNCTION_15_27();
  OUTLINED_FUNCTION_0_46();
  OUTLINED_FUNCTION_54_14();
  OUTLINED_FUNCTION_50_16();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  return OUTLINED_FUNCTION_2_53(a14, a15, *(uint64_t (**)(void))(v15 + 8));
}

uint64_t USOParse.getSiriKitIntentType()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint8_t *v55;
  char v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];

  v0 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  v86 = v0;
  v87 = v1;
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_9_5();
  v83 = v2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v85 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_5_2();
  v84 = v7;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v8);
  v88 = (uint64_t)&v82 - v9;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v10);
  v89 = (uint64_t)&v82 - v11;
  v91 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  v12 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  OUTLINED_FUNCTION_55_0();
  v15 = v14 - v13;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_9_5();
  v90 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  OUTLINED_FUNCTION_28();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v82 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v82 - v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_55_0();
  v31 = v30 - v29;
  USOParse.preferredUserDialogAct.getter(v30 - v29);
  v32 = OUTLINED_FUNCTION_130_0();
  v33 = OUTLINED_FUNCTION_6_2(v31, 1, v32);
  if (v56)
  {
    OUTLINED_FUNCTION_83_5(v33, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_10:
    v94 = 0u;
    v95 = 0u;
    goto LABEL_11;
  }
  v34 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
  if (!v34)
    goto LABEL_10;
  static UsoTask_CodegenConverter.convert(task:)();
  OUTLINED_FUNCTION_2();
  if (!*((_QWORD *)&v95 + 1))
  {
LABEL_11:
    outlined destroy of FlowActivity?((uint64_t)&v94, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  outlined init with take of Any(&v94, v96);
  outlined init with copy of Any((uint64_t)v96, (uint64_t)&v94);
  type metadata accessor for UsoTask_create_common_Person();
  v35 = MEMORY[0x24BEE4AD8];
  if (OUTLINED_FUNCTION_4_37())
    goto LABEL_8;
  type metadata accessor for UsoTask_delete_common_Person();
  if (OUTLINED_FUNCTION_4_37())
    goto LABEL_8;
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_4_37())
  {
    v36 = v93;
    OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_36_15();
    v38 = OUTLINED_FUNCTION_49();
    if (v92 && (v39 = MEMORY[0x2207D6AAC](v38), OUTLINED_FUNCTION_67_1(), v39)
      || (v40 = OUTLINED_FUNCTION_36_15(), v92) && (v41 = MEMORY[0x2207D6A7C](v40), OUTLINED_FUNCTION_67_1(), v41))
    {
      OUTLINED_FUNCTION_2();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
LABEL_28:
      swift_release();
LABEL_29:
      static GetContactAttributeSlots.intentType.getter();
      OUTLINED_FUNCTION_34_19();
      return v36;
    }
    v45 = OUTLINED_FUNCTION_36_15();
    if (v92)
    {
      v46 = MEMORY[0x2207D6AC4](v45);
      OUTLINED_FUNCTION_49();
      OUTLINED_FUNCTION_67_1();
      OUTLINED_FUNCTION_30_23();
      if (v46)
        goto LABEL_28;
    }
    else
    {
      OUTLINED_FUNCTION_49();
      OUTLINED_FUNCTION_30_23();
    }
LABEL_65:
    static GetContactSlots.intentType.getter();
    OUTLINED_FUNCTION_34_19();
    return v36;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (OUTLINED_FUNCTION_4_37())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    OUTLINED_FUNCTION_51_15();
    if (v92 && (v42 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter(), v43 = OUTLINED_FUNCTION_49(), v42))
    {
      MEMORY[0x2207D6BE4](v43);
      OUTLINED_FUNCTION_2();
      v44 = v91;
    }
    else
    {
      v44 = v91;
      __swift_storeEnumTagSinglePayload((uint64_t)v27, 1, 1, v91);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v25, *MEMORY[0x24BEA0C28], v44);
    OUTLINED_FUNCTION_52_15((uint64_t)v25);
    v47 = *(int *)(v16 + 48);
    v48 = v90;
    v49 = v90 + v47;
    v36 = (uint64_t)&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?;
    outlined init with copy of Result<RRResult, Error>((uint64_t)v27, v90, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined init with copy of Result<RRResult, Error>((uint64_t)v25, v49, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    OUTLINED_FUNCTION_6_2(v48, 1, v44);
    if (v56)
    {
      OUTLINED_FUNCTION_51_15();
      OUTLINED_FUNCTION_132_2((uint64_t)v25);
      OUTLINED_FUNCTION_132_2((uint64_t)v27);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
      OUTLINED_FUNCTION_6_2(v49, 1, v44);
      if (v56)
      {
        outlined destroy of FlowActivity?(v48, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
        goto LABEL_9;
      }
    }
    else
    {
      outlined init with copy of Result<RRResult, Error>(v48, (uint64_t)v22, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      OUTLINED_FUNCTION_6_2(v49, 1, v44);
      if (!v56)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v49, v44);
        lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x24BEA0C60], MEMORY[0x24BEA0C70]);
        v36 = dispatch thunk of static Equatable.== infix(_:_:)();
        OUTLINED_FUNCTION_51_15();
        v57 = v48;
        v58 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
        v58(v15, v44);
        OUTLINED_FUNCTION_38_16((uint64_t)v25);
        OUTLINED_FUNCTION_38_16((uint64_t)v27);
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
        v58((uint64_t)v22, v44);
        OUTLINED_FUNCTION_38_16(v57);
        if ((v36 & 1) != 0)
          goto LABEL_9;
        goto LABEL_65;
      }
      OUTLINED_FUNCTION_51_15();
      OUTLINED_FUNCTION_132_2((uint64_t)v25);
      OUTLINED_FUNCTION_132_2((uint64_t)v27);
      OUTLINED_FUNCTION_30_23();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v44);
    }
    outlined destroy of FlowActivity?(v48, &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
    goto LABEL_65;
  }
  type metadata accessor for UsoTask_request_common_Person();
  v36 = v35 + 8;
  if (OUTLINED_FUNCTION_4_37())
  {
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
    goto LABEL_28;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if (OUTLINED_FUNCTION_4_37())
  {
    v36 = v93;
    OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_81_6();
    v50 = OUTLINED_FUNCTION_49();
    v51 = v92;
    if (v92)
    {
      v52 = MEMORY[0x2207D6A94](v50);
      OUTLINED_FUNCTION_2();
      if (v52)
      {
        OUTLINED_FUNCTION_67_1();
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v53 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_10_1(v53, (uint64_t)static Logger.siriContacts);
        v54 = OUTLINED_FUNCTION_8();
        if (OUTLINED_FUNCTION_3(v54))
        {
          v55 = (uint8_t *)OUTLINED_FUNCTION_2_1();
          *(_WORD *)v55 = 0;
          OUTLINED_FUNCTION_31(&dword_21FE16000, v51, (os_log_type_t)v52, "Learning pronunciation is unsupported", v55);
          OUTLINED_FUNCTION_0();
        }
        OUTLINED_FUNCTION_49();

        goto LABEL_84;
      }
    }
    if ((UsoTask_update_common_Person.isChangeContactPoster.getter() & 1) != 0)
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
      OUTLINED_FUNCTION_49();
      goto LABEL_65;
    }
    OUTLINED_FUNCTION_53_2();
    OUTLINED_FUNCTION_81_6();
    v59 = OUTLINED_FUNCTION_49();
    if (!v92 || (v60 = MEMORY[0x2207D6AA0](v59), v61 = OUTLINED_FUNCTION_2(), !v60))
    {
      v68 = OUTLINED_FUNCTION_53_2();
      MEMORY[0x2207D6D64](&v92, v68);
      v69 = OUTLINED_FUNCTION_49();
      v70 = v92;
      if (!v92)
      {
        OUTLINED_FUNCTION_30_23();
LABEL_88:
        OUTLINED_FUNCTION_49();
        type metadata accessor for ModifyContactAttributeIntent();
        OUTLINED_FUNCTION_34_19();
        return v36;
      }
      MEMORY[0x2207D6AD0](v69);
      OUTLINED_FUNCTION_60();
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v71 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v71, (uint64_t)static Logger.siriContacts);
      v72 = OUTLINED_FUNCTION_8();
      if (os_log_type_enabled(v70, v72))
      {
        v73 = (uint8_t *)OUTLINED_FUNCTION_2_1();
        *(_WORD *)v73 = 0;
        OUTLINED_FUNCTION_31(&dword_21FE16000, v70, v72, "Modifying other contacts' attributes is unsupported", v73);
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_49();

      goto LABEL_83;
    }
    if (!MEMORY[0x2207D6E18](v61))
    {
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
LABEL_87:
      swift_release();
      goto LABEL_88;
    }
    v62 = v89;
    MEMORY[0x2207D6A4C]();
    v63 = v88;
    v64 = v86;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v87 + 104))(v88, *MEMORY[0x24BEA0470], v86);
    __swift_storeEnumTagSinglePayload(v63, 0, 1, v64);
    v65 = v85;
    v66 = v85 + *(int *)(v3 + 48);
    outlined init with copy of Result<RRResult, Error>(v62, v85, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined init with copy of Result<RRResult, Error>(v63, v66, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    OUTLINED_FUNCTION_6_2(v65, 1, v64);
    if (v56)
    {
      OUTLINED_FUNCTION_85_7(v88);
      OUTLINED_FUNCTION_85_7(v89);
      v67 = OUTLINED_FUNCTION_6_2(v66, 1, v64);
      if (v56)
      {
        OUTLINED_FUNCTION_83_5(v67, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
LABEL_86:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
        OUTLINED_FUNCTION_67_1();
        goto LABEL_87;
      }
    }
    else
    {
      v74 = v84;
      outlined init with copy of Result<RRResult, Error>(v65, v84, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      OUTLINED_FUNCTION_6_2(v66, 1, v64);
      if (!v75)
      {
        v79 = v87;
        v80 = v83;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v87 + 32))(v83, v66, v64);
        lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x24BEA0478], MEMORY[0x24BEA0488]);
        v66 = dispatch thunk of static Equatable.== infix(_:_:)();
        v81 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
        v81(v80, v64);
        OUTLINED_FUNCTION_85_7(v88);
        OUTLINED_FUNCTION_85_7(v89);
        v81(v74, v64);
        OUTLINED_FUNCTION_85_7(v65);
        if ((v66 & 1) != 0)
          goto LABEL_86;
        goto LABEL_78;
      }
      v66 = (uint64_t)&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
      OUTLINED_FUNCTION_38_16(v88);
      OUTLINED_FUNCTION_38_16(v89);
      v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 8))(v74, v64);
    }
    OUTLINED_FUNCTION_83_5(v67, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
LABEL_78:
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v76 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v76, (uint64_t)static Logger.siriContacts);
    v77 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled((os_log_t)v66, v77))
    {
      v78 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v78 = 0;
      OUTLINED_FUNCTION_31(&dword_21FE16000, v66, v77, "Modifying other contacts' relationships is unsupported", v78);
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_49();

    swift_release();
LABEL_83:
    OUTLINED_FUNCTION_67_1();
    goto LABEL_84;
  }
  type metadata accessor for UsoTask_checkExistence_common_Person();
  if (!OUTLINED_FUNCTION_4_37())
  {
LABEL_84:
    OUTLINED_FUNCTION_30_23();
    goto LABEL_9;
  }
  if ((UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter() & 1) == 0)
  {
    v36 = UsoTask_checkExistence_common_Person.isGetAttributeIntent.getter();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_30_23();
    if ((v36 & 1) != 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_8:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v96);
  swift_release();
LABEL_9:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v94);
  return 0;
}

uint64_t USOParse.preferredUserDialogAct.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(_QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;

  v59 = a1;
  v2 = type metadata accessor for Siri_Nlu_External_UserParse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_5_2();
  v52 = v4;
  OUTLINED_FUNCTION_54();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v50 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v50 - v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5_2();
  v53 = v12;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v13);
  v58 = (char *)&v50 - v14;
  v15 = OUTLINED_FUNCTION_130_0();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v51 = (char *)&v50 - v20;
  OUTLINED_FUNCTION_54();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v50 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v54 = (char *)&v50 - v25;
  v56 = v1;
  v26 = USOParse.userParse.getter();
  v27 = MEMORY[0x2207D6524](v26);
  v28 = *(void (**)(_QWORD, _QWORD))(v3 + 8);
  v57 = v2;
  v55 = v28;
  v28(v10, v2);
  v29 = *(_QWORD *)(v27 + 16);
  if (v29)
  {
    v50 = v8;
    v30 = v27 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v31 = *(_QWORD *)(v16 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      OUTLINED_FUNCTION_43((uint64_t)v24, v30);
      if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
      v30 += v31;
      if (!--v29)
      {
        OUTLINED_FUNCTION_96();
        v32 = 1;
        v33 = v59;
        v8 = v50;
        goto LABEL_7;
      }
    }
    OUTLINED_FUNCTION_96();
    v34 = (uint64_t)v58;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v58, v24, v15);
    v32 = 0;
    v33 = v59;
    v8 = v50;
  }
  else
  {
    v32 = 1;
    v33 = v59;
LABEL_7:
    v34 = (uint64_t)v58;
  }
  OUTLINED_FUNCTION_144_0(v34, v32);
  OUTLINED_FUNCTION_96();
  v35 = OUTLINED_FUNCTION_6_2(v34, 1, v15);
  if (v36)
  {
    OUTLINED_FUNCTION_143_1(v35, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    v37 = USOParse.userParse.getter();
    v38 = MEMORY[0x2207D6524](v37);
    OUTLINED_FUNCTION_84_8((uint64_t)v8);
    v39 = *(_QWORD *)(v38 + 16);
    if (v39)
    {
      v40 = v38 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v41 = *(_QWORD *)(v16 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
      swift_bridgeObjectRetain();
      while (1)
      {
        v42(v19, v40, v15);
        if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
          break;
        (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
        v40 += v41;
        if (!--v39)
        {
          OUTLINED_FUNCTION_5_0();
          goto LABEL_16;
        }
      }
      OUTLINED_FUNCTION_5_0();
      v34 = v53;
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v53, v19, v15);
      v43 = 0;
    }
    else
    {
LABEL_16:
      v43 = 1;
      v34 = v53;
    }
    OUTLINED_FUNCTION_144_0(v34, v43);
    OUTLINED_FUNCTION_5_0();
    v45 = OUTLINED_FUNCTION_6_2(v34, 1, v15);
    if (v36)
    {
      OUTLINED_FUNCTION_143_1(v45, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      v46 = v52;
      v47 = USOParse.userParse.getter();
      v48 = MEMORY[0x2207D6524](v47);
      OUTLINED_FUNCTION_84_8(v46);
      specialized Collection.first.getter(v48, v33);
      return OUTLINED_FUNCTION_5_0();
    }
    v44 = (uint64_t)v51;
  }
  else
  {
    v44 = (uint64_t)v54;
  }
  OUTLINED_FUNCTION_43(v44, v34);
  OUTLINED_FUNCTION_43(v33, v44);
  return OUTLINED_FUNCTION_144_0(v33, 0);
}

uint64_t USOParse.isContactDisambiguation.getter()
{
  return USOParse.isOrdinalDisambiguation.getter((void (*)(_QWORD))MEMORY[0x24BEA0F38]);
}

uint64_t USOParse.isOrdinalDisambiguation.getter(void (*a1)(_QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_55_0();
  v5 = v4 - v3;
  USOParse.preferredUserDialogAct.getter(v4 - v3);
  v6 = OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_6_2(v5, 1, v6);
  if (v7)
  {
    outlined destroy of FlowActivity?(v5, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_8:
    v10 = 0u;
    v11 = 0u;
    goto LABEL_9;
  }
  v8 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  if (!v8)
    goto LABEL_8;
  static UsoTask_CodegenConverter.convert(task:)();
  OUTLINED_FUNCTION_2();
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_9:
    outlined destroy of FlowActivity?((uint64_t)&v10, &demangling cache variable for type metadata for Any?);
    return 0;
  }
  a1(0);
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    swift_release();
    return 1;
  }
  return result;
}

void partial apply for closure #1 in static Transformer<>.transformer(_:referenceResolver:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(a1, *(void **)(v1 + 16));
}

uint64_t objectdestroyTm_0()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 24);
  return swift_deallocObject();
}

void partial apply for closure #1 in static Transformer<>.transformer(_:referenceResolver:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(*(void **)(v1 + 16), v1 + 24, a1);
}

{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:referenceResolver:)(*(void **)(v1 + 16), v1 + 24, a1);
}

void partial apply for closure #1 in static Transformer<>.transformer(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:)(*(void **)(v1 + 16), a1);
}

{
  uint64_t v1;

  closure #1 in static Transformer<>.transformer(_:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_21FEC34B0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t OUTLINED_FUNCTION_0_46()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_2_53(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_4_37()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_11_33()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0);
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_15_27()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0);
}

_QWORD *OUTLINED_FUNCTION_16_22(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  _QWORD *(*v11)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v13;
  va_list va;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  va_arg(va1, _QWORD);
  v13 = v10;
  return v11((uint64_t *)va1, (uint64_t *)va);
}

void OUTLINED_FUNCTION_18_26(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_30_23()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 - 120);
}

id OUTLINED_FUNCTION_31_19(uint64_t a1)
{
  void *v1;

  *(_QWORD *)(a1 + 16) = v1;
  return v1;
}

void OUTLINED_FUNCTION_33_15(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of FlowActivity?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_34_19()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 - 160);
}

uint64_t OUTLINED_FUNCTION_36_15()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

void OUTLINED_FUNCTION_38_16(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of FlowActivity?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_39_14()
{
  return Transformer.transform.getter();
}

uint64_t OUTLINED_FUNCTION_40_11@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_50_16()
{
  uint64_t v0;

  return outlined destroy of Signpost.OpenSignpost(v0);
}

uint64_t OUTLINED_FUNCTION_52_15(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_53_12()
{
  return Transformer.init(transform:)();
}

uint64_t OUTLINED_FUNCTION_54_14()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

id OUTLINED_FUNCTION_60_16(uint64_t a1)
{
  __int128 *v1;
  void *v2;

  *(_QWORD *)(a1 + 16) = v2;
  outlined init with take of FlowProviding(v1, a1 + 24);
  return v2;
}

uint64_t OUTLINED_FUNCTION_67_12()
{
  return swift_dynamicCastClass();
}

uint64_t OUTLINED_FUNCTION_71_9()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0);
}

uint64_t OUTLINED_FUNCTION_75_12()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0);
}

uint64_t OUTLINED_FUNCTION_79_6@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_81_6()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

uint64_t OUTLINED_FUNCTION_83_8()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

uint64_t OUTLINED_FUNCTION_84_8(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 120))(a1, *(_QWORD *)(v1 - 104));
}

void ModifyContactAttributeIntent.__allocating_init(_:referenceResolver:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(void *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 *v82;
  __n128 *v83;
  id v84;
  unint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  __n128 *v107;
  unint64_t v108;

  v104 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v99 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_9_5();
  v101 = v7;
  v8 = type metadata accessor for PersonIntentNode();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_5_2();
  v100 = v10;
  MEMORY[0x24BDAC7A8](v11);
  v102 = (char *)&v91 - v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  OUTLINED_FUNCTION_28();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v91 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v91 - v20;
  v22 = type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_5_2();
  v103 = v24;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v91 - v26;
  v28 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v29 = one-time initialization token for setRelationship;
  v30 = v28;
  if (v29 != -1)
    swift_once();
  v105 = lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  v106 = v22;
  OUTLINED_FUNCTION_36_16();
  v32 = (uint64_t)v107;
  v31 = v108;
  outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v27);
  if (v31)
  {
    outlined destroy of ContactNLv3Intent((uint64_t)v27);
LABEL_8:
    v33 = (void *)MEMORY[0x2207D7CB8](v32, v31);
    OUTLINED_FUNCTION_5();
    goto LABEL_9;
  }
  if (one-time initialization token for removeRelationship != -1)
    swift_once();
  IntentNodeTraversable.value<A>(forNode:)();
  v32 = (uint64_t)v107;
  v31 = v108;
  outlined destroy of ContactNLv3Intent((uint64_t)v27);
  if (v31)
    goto LABEL_8;
  v33 = 0;
LABEL_9:
  objc_msgSend(v30, sel_setModifyRelationship_, v33);

  OUTLINED_FUNCTION_37_17();
  OUTLINED_FUNCTION_20_16((uint64_t)v21);
  if (v34)
  {
    outlined destroy of FlowActivity?((uint64_t)v21, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    v35 = PersonIntentNodeContaining.relationship.getter();
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v8);
    if (v37)
      outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v35, v37, v30, (SEL *)&selRef_setModifyRelationship_);
  }
  if (one-time initialization token for setNickName != -1)
    swift_once();
  v38 = OUTLINED_FUNCTION_36_16();
  if (v108)
  {
    String.firstLetterCapitalized()();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_30_24();
  }
  OUTLINED_FUNCTION_0_15(v38, sel_setModifyNickName_);

  ContactNLv3Intent.hasPersonNickName.getter();
  if ((v39 & 1) != 0)
  {
    outlined bridged method (pb) of @objc Contact.namePrefix.getter(v30, (SEL *)&selRef_modifyRelationship);
    v41 = v40;
    swift_bridgeObjectRelease();
    if (!v41)
    {
      OUTLINED_FUNCTION_37_17();
      OUTLINED_FUNCTION_20_16((uint64_t)v19);
      if (v34)
      {
        outlined destroy of FlowActivity?((uint64_t)v19, &demangling cache variable for type metadata for PersonIntentNode?);
        v43 = 0;
      }
      else
      {
        PersonIntentNodeContaining.nickName.getter();
        v43 = v42;
        v44 = OUTLINED_FUNCTION_14_32();
        if (v43)
        {
          String.firstLetterCapitalized()();
          OUTLINED_FUNCTION_5();
          OUTLINED_FUNCTION_30_24();
        }
      }
      OUTLINED_FUNCTION_0_15(v44, sel_setModifyNickName_);

    }
  }
  OUTLINED_FUNCTION_37_17();
  OUTLINED_FUNCTION_20_16((uint64_t)v16);
  if (v34)
  {
    outlined destroy of FlowActivity?((uint64_t)v16, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    v45 = (uint64_t)v102;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v102, v16, v8);
    ContactNLv3Intent.hasPersonNameNode.getter();
    if ((v46 & 1) != 0 && (ContactNLv3Intent.isForgetNickname.getter(), (v47 & 1) == 0))
    {
      outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v30);
      if (v48)
      {
        v49 = v100;
        v50 = v101;
        if ((v48 & 0xC000000000000001) != 0)
        {
          v51 = (char *)MEMORY[0x2207D80C0](0, v48);
        }
        else
        {
          if (!*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          v51 = (char *)*(id *)(v48 + 32);
        }
        v16 = v51;
        OUTLINED_FUNCTION_5();
        outlined bridged method (ob) of @objc INObject.identifier.getter(v16, (SEL *)&selRef_identifier);
        v97 = v53;
        v98 = v52;
      }
      else
      {
        v97 = 0;
        v98 = 0;
        v49 = v100;
        v50 = v101;
      }
      PersonIntentNodeContaining.firstName.getter();
      OUTLINED_FUNCTION_101_2();
      (*(void (**)(void *, uint64_t, uint64_t))(v9 + 16))(v49, v45, v8);
      if (v16)
      {
        v101 = v45;
      }
      else
      {
        v101 = PersonIntentNodeContaining.fullName.getter();
        v16 = v54;
      }
      v55 = *(void (**)(void *, uint64_t))(v9 + 8);
      v55(v49, v8);
      OUTLINED_FUNCTION_28_22();
      v100 = (void *)PersonIntentNodeContaining.middleName.getter();
      v96 = v56;
      OUTLINED_FUNCTION_28_22();
      v57 = PersonIntentNodeContaining.lastName.getter();
      v94 = v58;
      v95 = v57;
      OUTLINED_FUNCTION_28_22();
      v59 = PersonIntentNodeContaining.nickName.getter();
      v92 = v60;
      v93 = v59;
      OUTLINED_FUNCTION_28_22();
      PersonIntentNodeContaining.namePrefix.getter();
      v61 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
      if (__swift_getEnumTagSinglePayload(v50, 1, v61) == 1)
      {
        outlined destroy of FlowActivity?(v50, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
        v62 = 0;
        v63 = 0;
      }
      else
      {
        v64 = PersonOntologyNode.PersonNamePrefix.rawValue.getter();
        v65 = v50;
        v62 = v64;
        v63 = v66;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v65, v61);
      }
      v67 = v99;
      PersonIntentNodeContaining.namePostfix.getter();
      v68 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
      if (__swift_getEnumTagSinglePayload(v67, 1, v68) == 1)
      {
        outlined destroy of FlowActivity?(v67, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
        v69 = 0;
        v70 = 0;
      }
      else
      {
        v69 = PersonOntologyNode.PersonNamePostfix.rawValue.getter();
        v71 = v67;
        v70 = v72;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8))(v71, v68);
      }
      type metadata accessor for Contact();
      v73 = Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(v98, v97, v101, (uint64_t)v16, v100, v96, v95, v94, v93, v92, 0, 0, v62, v63, v69, v70, 0, 0, 0,
              0);
      OUTLINED_FUNCTION_0_15((uint64_t)v73, sel_setRelatedContact_);

      v55(v102, v8);
    }
    else
    {
      OUTLINED_FUNCTION_14_32();
    }
  }
  objc_msgSend(v30, sel_setContactAttributeToModify_, ModifyContactAttributeIntent.getContactAttributeToModify(from:)(a1));
  objc_msgSend(v30, sel_setModifyOperation_, ModifyContactAttributeIntent.modifyOperation(from:)(a1));
  if (one-time initialization token for contactId != -1)
    swift_once();
  OUTLINED_FUNCTION_27_24();
  OUTLINED_FUNCTION_36_16();
  if (v108)
  {
    v74 = String.sanitizeContactIdURL.getter((uint64_t)v107, v108);
    v76 = v75;
    OUTLINED_FUNCTION_5();
    v77 = OUTLINED_FUNCTION_24_28();
    if (v77)
    {
      v78 = v77;
      v79 = Contact.formattedFullName.getter();
      v81 = v80;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v82 = (__n128 *)OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_20_24(v82, (__n128)xmmword_21FED8AB0);
      v82[2].n128_u64[0] = (unint64_t)SiriMatch.__allocating_init(identifier:fullName:)(v74, v76, v79, v81);
      v107 = v82;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v83 = (__n128 *)OUTLINED_FUNCTION_13_3();
      OUTLINED_FUNCTION_20_24(v83, (__n128)xmmword_21FED8AB0);
      v84 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_bridgeObjectRetain();
      @nonobjc INObject.init(identifier:display:)(v74, v76, v74, v76);
      v83[2].n128_u64[0] = v85;
      v107 = v83;
    }
    specialized Array._endMutation()();
    outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.relatedSiriMatches.setter((uint64_t)v107, v30);
  }
  v86 = OUTLINED_FUNCTION_24_28();

  v87 = v103;
  outlined init with copy of ContactNLv3Intent(a1, v103);
  if (v86)
  {
    outlined destroy of ContactNLv3Intent(v87);
    v88 = v104;
  }
  else
  {
    OUTLINED_FUNCTION_27_24();
    IntentNodeTraversable.value<A>(forNode:)();
    v89 = v108;
    outlined destroy of ContactNLv3Intent(v87);
    OUTLINED_FUNCTION_5();
    v88 = v104;
    if (!v89)
    {
      ContactNLv3Intent.isForgetNickname.getter();
      if ((v90 & 1) == 0)
        ModifyContactAttributeIntent.runReferenceResolution(_:)();
    }
  }

  __swift_destroy_boxed_opaque_existential_0(v88);
  outlined destroy of ContactNLv3Intent(a1);
  OUTLINED_FUNCTION_7();
}

void ModifyContactAttributeIntentResponse.__allocating_init(relationshipLabel:contactName:code:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  id v11;
  char *v12;
  char *v13;
  id v14;

  v11 = objc_allocWithZone(v5);
  v12 = ModifyContactAttributeIntentResponse.init(code:userActivity:)(a5, 0);
  type metadata accessor for ContactRelation();
  v13 = v12;
  v14 = ContactRelation.__allocating_init(relationship:relatedFullName:)(a1, a2, a3, a4);
  objc_msgSend(v13, sel_setUpdatedRelationship_, v14);

  OUTLINED_FUNCTION_31_9();
}

uint64_t ModifyContactAttributeIntent.runReferenceResolution(_:)()
{
  char v1;

  swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_QWORD *)(OUTLINED_FUNCTION_13_3() + 16) = &v1;
  static SiriKitContactIntent.runReferenceResolution(_:completion:)();
  swift_release();
  return swift_unknownObjectWeakDestroy();
}

uint64_t ModifyContactAttributeIntent.getContactAttributeToModify(from:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  char v20;
  _BYTE v21[8];
  uint64_t v22;

  v3 = type metadata accessor for ContactNLv3Intent();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = &v21[-v8];
  MEMORY[0x24BDAC7A8](v7);
  v11 = &v21[-v10];
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(v1, (SEL *)&selRef_modifyRelationship);
  v13 = v12;
  swift_bridgeObjectRelease();
  if (!v13)
  {
    outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v1);
    v16 = v15;
    swift_bridgeObjectRelease();
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v11);
    if (v16)
    {
      outlined destroy of ContactNLv3Intent((uint64_t)v11);
      outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v9);
    }
    else
    {
      v21[0] = 44;
      v17 = ContactNLv3Intent.containsAttribute(_:)();
      outlined destroy of ContactNLv3Intent((uint64_t)v11);
      outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v9);
      if ((v17 & 1) == 0)
      {
        ContactNLv3Intent.isForgetNickname.getter();
        v20 = v19;
        outlined destroy of ContactNLv3Intent((uint64_t)v9);
        outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v6);
        if ((v20 & 1) == 0)
        {
          if (one-time initialization token for setNickName != -1)
            swift_once();
          lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
          IntentNodeTraversable.value<A>(forNode:)();
          if (!v22)
          {
            v14 = 0;
            goto LABEL_8;
          }
          swift_bridgeObjectRelease();
        }
LABEL_7:
        v14 = 6;
LABEL_8:
        outlined destroy of ContactNLv3Intent((uint64_t)v6);
        return v14;
      }
    }
    outlined destroy of ContactNLv3Intent((uint64_t)v9);
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v6);
    goto LABEL_7;
  }
  return 10;
}

uint64_t ModifyContactAttributeIntent.modifyOperation(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  char v14;
  char v15;
  int v17;
  char v18;
  char v19;
  _BYTE v20[8];
  uint64_t v21;

  v2 = type metadata accessor for ContactNLv3Intent();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v3);
  v8 = &v20[-v7];
  v9 = MEMORY[0x24BDAC7A8](v6);
  v11 = &v20[-v10];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v20[-v12];
  if (one-time initialization token for contactVerb != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v20[0] == 17)
  {
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v13);
  }
  else
  {
    specialized == infix<A>(_:_:)(v20[0], 15);
    v15 = v14;
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v13);
    if ((v15 & 1) != 0)
    {
LABEL_10:
      outlined destroy of ContactNLv3Intent((uint64_t)v13);
      return 3;
    }
  }
  if (one-time initialization token for removeRelationship != -1)
    swift_once();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v21)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined destroy of ContactNLv3Intent((uint64_t)v13);
  if (one-time initialization token for setRelationship != -1)
    swift_once();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v21)
  {
    swift_bridgeObjectRelease();
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v11);
LABEL_19:
    outlined destroy of ContactNLv3Intent((uint64_t)v11);
    outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v8);
    outlined destroy of ContactNLv3Intent((uint64_t)v8);
    return 1;
  }
  outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v11);
  if (one-time initialization token for setNickName != -1)
    swift_once();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v21)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  outlined destroy of ContactNLv3Intent((uint64_t)v11);
  outlined init with copy of ContactNLv3Intent(a1, (uint64_t)v8);
  IntentNodeTraversable.value<A>(forNode:)();
  v17 = v20[0];
  outlined init with copy of ContactNLv3Intent((uint64_t)v8, (uint64_t)v5);
  if (v17 == 17 || (IntentNodeTraversable.value<A>(forNode:)(), v20[0] == 17))
  {
    outlined destroy of ContactNLv3Intent((uint64_t)v5);
    outlined destroy of ContactNLv3Intent((uint64_t)v8);
  }
  else
  {
    specialized == infix<A>(_:_:)(v20[0], 4);
    v19 = v18;
    outlined destroy of ContactNLv3Intent((uint64_t)v5);
    outlined destroy of ContactNLv3Intent((uint64_t)v8);
    if ((v19 & 1) != 0)
      return 1;
  }
  return 0;
}

void ModifyContactAttributeIntent.__allocating_init(_:)(uint64_t a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;

  v3 = type metadata accessor for Parse.DirectInvocation();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v43 - v8;
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000026 && v10 == 0x800000021FEDF640)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_5();
  if ((v11 & 1) != 0)
  {
LABEL_5:
    v12 = objc_msgSend(objc_allocWithZone(v1), sel_init);
    v13 = Parse.DirectInvocation.userData.getter();
    if (v13)
    {
      specialized Dictionary.subscript.getter(0x656D616E6B63696ELL, 0xE800000000000000, v13, &v50);
      OUTLINED_FUNCTION_5();
      if (*((_QWORD *)&v51 + 1))
      {
        if ((OUTLINED_FUNCTION_10_33() & 1) == 0)
        {
LABEL_28:

          goto LABEL_29;
        }
        v15 = v48;
        v14 = v49;
        v16 = Parse.DirectInvocation.userData.getter();
        if (v16)
        {
          specialized Dictionary.subscript.getter(0x704F796669646F6DLL, 0xEF6E6F6974617265, v16, &v50);
          OUTLINED_FUNCTION_5();
          if (*((_QWORD *)&v51 + 1))
          {
            if ((OUTLINED_FUNCTION_10_33() & 1) != 0)
            {
              v17 = ModifyOperation.init(rawValue:)(v48);
              if ((v18 & 1) == 0)
              {
                v19 = v17;
                v46 = v3;
                if (one-time initialization token for siriContacts != -1)
                  swift_once();
                v20 = OUTLINED_FUNCTION_26();
                __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
                swift_bridgeObjectRetain_n();
                v21 = Logger.logObject.getter();
                v22 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v21, v22))
                {
                  v23 = OUTLINED_FUNCTION_1();
                  v44 = v19;
                  v24 = (uint8_t *)v23;
                  v25 = OUTLINED_FUNCTION_1();
                  v45 = v12;
                  *(_QWORD *)&v50 = v25;
                  *(_DWORD *)v24 = 136315138;
                  v43[1] = v24 + 4;
                  swift_bridgeObjectRetain();
                  v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, (uint64_t *)&v50);
                  OUTLINED_FUNCTION_88_4(v26);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  OUTLINED_FUNCTION_43_0(&dword_21FE16000, v21, v22, "Received updated nickname value %s from DirectInvocation", v24);
                  swift_arrayDestroy();
                  OUTLINED_FUNCTION_0();
                }

                swift_bridgeObjectRelease_n();
                outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(v15, v14, v12, (SEL *)&selRef_setModifyNickName_);
                objc_msgSend(v12, sel_setModifyOperation_, v19);
                objc_msgSend(v12, sel_setContactAttributeToModify_, 6);

                (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v46);
                goto LABEL_36;
              }
              OUTLINED_FUNCTION_18_0();
              goto LABEL_28;
            }

            OUTLINED_FUNCTION_18_0();
LABEL_29:
            if (one-time initialization token for siriContacts != -1)
              swift_once();
            v34 = OUTLINED_FUNCTION_26();
            __swift_project_value_buffer(v34, (uint64_t)static Logger.siriContacts);
            OUTLINED_FUNCTION_47_4((uint64_t)v9, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
            v35 = Logger.logObject.getter();
            v36 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v35, v36))
            {
              v46 = v3;
              v44 = a1;
              v37 = (uint8_t *)OUTLINED_FUNCTION_1();
              *(_QWORD *)&v50 = OUTLINED_FUNCTION_1();
              *(_DWORD *)v37 = 136315138;
              v38 = Parse.DirectInvocation.userData.getter();
              v47 = v4;
              v45 = v12;
              if (!v38)
                Dictionary.init(dictionaryLiteral:)();
              v39 = Dictionary.description.getter();
              v41 = v40;
              swift_bridgeObjectRelease();
              v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, (uint64_t *)&v50);
              OUTLINED_FUNCTION_88_4(v42);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v46);
              OUTLINED_FUNCTION_43_0(&dword_21FE16000, v35, v36, "Unable to extract nickname and modify operation from provided userData: %s", v37);
              swift_arrayDestroy();
              OUTLINED_FUNCTION_0();
            }

            OUTLINED_FUNCTION_12_33((uint64_t)v9);
            OUTLINED_FUNCTION_12_33(a1);

            goto LABEL_36;
          }
        }
        else
        {
          v50 = 0u;
          v51 = 0u;
        }

        OUTLINED_FUNCTION_18_0();
LABEL_18:
        outlined destroy of FlowActivity?((uint64_t)&v50, &demangling cache variable for type metadata for Any?);
        goto LABEL_29;
      }
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }

    goto LABEL_18;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v27 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_47_4((uint64_t)v7, a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)OUTLINED_FUNCTION_1();
    *(_QWORD *)&v50 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v30 = 136315138;
    v47 = v4;
    v31 = Parse.DirectInvocation.identifier.getter();
    v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)&v50);
    OUTLINED_FUNCTION_88_4(v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_12_33((uint64_t)v7);
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v28, v29, "DirectInvocation %s that cannot be handled. No object constructed", v30);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_12_33((uint64_t)v7);
  OUTLINED_FUNCTION_12_33(a1);
LABEL_36:
  OUTLINED_FUNCTION_7();
}

void ModifyContactAttributeIntent.siriInferenceContact.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, _QWORD);
  _BYTE v43[32];

  v1 = v0;
  v2 = type metadata accessor for ContactHandle.HandleType();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for ContactHandle();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Contact.init()();
  v8 = OUTLINED_FUNCTION_20_9(v7, sel_relatedContact);
  if (v8)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v8, (SEL *)&selRef_identifier);
    if (v9)
      Contact.id.setter();
  }
  v10 = OUTLINED_FUNCTION_0_47();
  if (v10)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v10, (SEL *)&selRef_givenName);
    if (v11)
      Contact.givenName.setter();
  }
  v12 = OUTLINED_FUNCTION_0_47();
  if (v12)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v12, (SEL *)&selRef_middleName);
    if (v13)
      Contact.middleName.setter();
  }
  v14 = OUTLINED_FUNCTION_0_47();
  if (v14)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v14, (SEL *)&selRef_familyName);
    if (v15)
      Contact.familyName.setter();
  }
  v16 = OUTLINED_FUNCTION_0_47();
  if (v16)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v16, (SEL *)&selRef_nickName);
    if (v17)
      Contact.nickname.setter();
  }
  v18 = OUTLINED_FUNCTION_0_47();
  if (v18)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v18, (SEL *)&selRef_namePrefix);
    if (v19)
      Contact.namePrefix.setter();
  }
  v20 = OUTLINED_FUNCTION_0_47();
  if (v20)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v20, (SEL *)&selRef_nameSuffix);
    if (v21)
      Contact.nameSuffix.setter();
  }
  v22 = OUTLINED_FUNCTION_0_47();
  if (v22)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v22, (SEL *)&selRef_fullName);
    if (v23)
      Contact.givenName.setter();
  }
  v24 = OUTLINED_FUNCTION_0_47();
  if (v24)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v24, (SEL *)&selRef_phoneNumber);
    if (v26)
    {
      OUTLINED_FUNCTION_19_27(v25, *MEMORY[0x24BE93580]);
      OUTLINED_FUNCTION_9_31();
      ContactHandle.init(id:type:label:value:isSuggested:)();
      v42 = (void (*)(_BYTE *, _QWORD))OUTLINED_FUNCTION_12_16();
      v28 = v27;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v29 = *(_QWORD *)(*(_QWORD *)v28 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v29);
      OUTLINED_FUNCTION_6_41(v29 + 1);
      OUTLINED_FUNCTION_47_4(v30 + v31 * v29, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
      v42(v43, 0);
    }
  }
  v32 = objc_msgSend(v1, sel_relatedContact);
  if (v32)
  {
    outlined bridged method (ob) of @objc INObject.identifier.getter(v32, (SEL *)&selRef_emailAddress);
    if (v34)
    {
      OUTLINED_FUNCTION_19_27(v33, *MEMORY[0x24BE93578]);
      OUTLINED_FUNCTION_9_31();
      ContactHandle.init(id:type:label:value:isSuggested:)();
      v35 = (void (*)(_BYTE *, _QWORD))OUTLINED_FUNCTION_12_16();
      v37 = v36;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v38 = *(_QWORD *)(*(_QWORD *)v37 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
      OUTLINED_FUNCTION_6_41(v38 + 1);
      OUTLINED_FUNCTION_47_4(v39 + v40 * v38, (uint64_t)v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32));
      v35(v43, 0);
    }
  }
}

void ModifyContactAttributeIntent.isMe.getter()
{
  type metadata accessor for NSNumber();
  NSNumber.init(BOOLeanLiteral:)(0);
  OUTLINED_FUNCTION_31_0();
}

void ModifyContactAttributeIntent.contactIdentifier.getter(uint64_t a1)
{
  void *v1;
  id v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;

  v2 = OUTLINED_FUNCTION_20_9(a1, sel_relatedContact);
  if (v2)
  {
    v3 = v2;
    if (objc_msgSend(v2, sel_identifier))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_26_26();
    }

    goto LABEL_15;
  }
  outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v1);
  if (!v4)
  {
LABEL_15:
    OUTLINED_FUNCTION_22_6();
    return;
  }
  v5 = v4;
  v6 = v4 & 0xFFFFFFFFFFFFFF8;
  if (!(v4 >> 62))
  {
    if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_8;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_14;
LABEL_8:
  if ((v5 & 0xC000000000000001) != 0)
  {
    v7 = (id)MEMORY[0x2207D80C0](0, v5);
    goto LABEL_11;
  }
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = *(id *)(v5 + 32);
LABEL_11:
    v8 = v7;
    swift_bridgeObjectRelease();
    outlined bridged method (ob) of @objc INObject.identifier.getter(v8, (SEL *)&selRef_identifier);
    OUTLINED_FUNCTION_101_2();
    goto LABEL_15;
  }
  __break(1u);
}

BOOL ModifyContactAttributeIntent.isDeleteNickname.getter(uint64_t a1)
{
  return OUTLINED_FUNCTION_20_9(a1, sel_contactAttributeToModify) == (id)6
      && OUTLINED_FUNCTION_20_9(6, sel_modifyOperation) == (id)3;
}

void ModifyContactAttributeIntent.requestedName.getter()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = objc_msgSend(v0, sel_relatedContact);
  if (v1)
  {
    v2 = v1;
    outlined bridged method (pb) of @objc Contact.namePrefix.getter(v1, (SEL *)&selRef_fullName);
    if (v4
      || (OUTLINED_FUNCTION_21_6(v3, (SEL *)&selRef_givenName), v6)
      || (OUTLINED_FUNCTION_21_6(v5, (SEL *)&selRef_middleName), v8)
      || (OUTLINED_FUNCTION_21_6(v7, (SEL *)&selRef_familyName), v9))
    {
      OUTLINED_FUNCTION_101_2();
    }
    else if (objc_msgSend(v2, sel_nickName))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_26_26();
    }

  }
  OUTLINED_FUNCTION_22_6();
}

uint64_t specialized closure #1 in ModifyContactAttributeIntent.runReferenceResolution(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;

  swift_beginAccess();
  result = MEMORY[0x2207D87F8](a4);
  if (result)
    __asm { BR              X10 }
  return result;
}

void protocol witness for SiriKitContactIntent.isMe.getter in conformance ModifyContactAttributeIntent()
{
  ModifyContactAttributeIntent.isMe.getter();
}

void @nonobjc INObject.init(identifier:display:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  void *v8;

  if (a2)
  {
    v7 = (void *)MEMORY[0x2207D7CB8]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  v8 = (void *)MEMORY[0x2207D7CB8](a3, a4);
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_initWithIdentifier_displayString_, v7, v8);

  OUTLINED_FUNCTION_31_9();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void outlined bridged method (ob) of @objc INObject.identifier.getter(void *a1)
{
  outlined bridged method (ob) of @objc INObject.identifier.getter(a1, (SEL *)&selRef_identifier);
}

void outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.modifyNickName.setter(uint64_t a1, uint64_t a2, void *a3)
{
  outlined bridged method (mbnn) of @objc SABaseClientBoundCommand.aceId.setter(a1, a2, a3, (SEL *)&selRef_setModifyNickName_);
}

void outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_modifyRelationship);
}

void outlined bridged method (pb) of @objc Contact.givenName.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_givenName);
}

void outlined bridged method (pb) of @objc Contact.middleName.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_middleName);
}

void outlined bridged method (pb) of @objc Contact.familyName.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_familyName);
}

void outlined bridged method (mbnn) of @objc ModifyContactAttributeIntent.relatedSiriMatches.setter(uint64_t a1, void *a2)
{
  Class isa;

  type metadata accessor for SiriMatch();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setRelatedSiriMatches_, isa);

}

void outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(void *a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(a1, sel_relatedSiriMatches);
  if (v1)
  {
    v2 = v1;
    type metadata accessor for SiriMatch();
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  OUTLINED_FUNCTION_31_0();
}

uint64_t sub_21FEC5B44()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ModifyContactAttributeIntent.runReferenceResolution(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return specialized closure #1 in ModifyContactAttributeIntent.runReferenceResolution(_:)(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

void outlined bridged method (ob) of @objc INObject.identifier.getter(void *a1, SEL *a2)
{
  id v3;

  v3 = objc_msgSend(a1, *a2);

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_101_2();

  }
  OUTLINED_FUNCTION_22_6();
}

id OUTLINED_FUNCTION_0_47()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1967));
}

void OUTLINED_FUNCTION_6_41(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 16) = a1;
}

uint64_t OUTLINED_FUNCTION_9_31()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_10_33()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_12_33(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_14_32()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_15_28()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v4, a2, v2);
}

uint64_t OUTLINED_FUNCTION_20_24(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for SiriMatch();
}

id OUTLINED_FUNCTION_24_28()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1967));
}

void OUTLINED_FUNCTION_26_26()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_27_24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 2072);
}

uint64_t OUTLINED_FUNCTION_28_22()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_30_24()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_36_16()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_37_17()
{
  return ContactNLv3Intent.person.getter();
}

uint64_t Parse.toSiriKitIntent(referenceResolver:previousIntent:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v4[9] = type metadata accessor for ContactsError();
  v4[10] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_14_14();
  v4[11] = OUTLINED_FUNCTION_0_0();
  v5 = OUTLINED_FUNCTION_52_9();
  v4[12] = v5;
  v4[13] = *(_QWORD *)(v5 - 8);
  v4[14] = OUTLINED_FUNCTION_9_1();
  v4[15] = OUTLINED_FUNCTION_25_0();
  v4[16] = OUTLINED_FUNCTION_25_0();
  v6 = OUTLINED_FUNCTION_29_26();
  v4[17] = v6;
  v4[18] = *(_QWORD *)(v6 - 8);
  v4[19] = OUTLINED_FUNCTION_9_1();
  v4[20] = OUTLINED_FUNCTION_25_0();
  v7 = OUTLINED_FUNCTION_90_5();
  v4[21] = v7;
  v4[22] = *(_QWORD *)(v7 - 8);
  v4[23] = OUTLINED_FUNCTION_0_0();
  v8 = OUTLINED_FUNCTION_104_0();
  v4[24] = v8;
  v4[25] = *(_QWORD *)(v8 - 8);
  v4[26] = OUTLINED_FUNCTION_9_1();
  v4[27] = OUTLINED_FUNCTION_25_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t Parse.toSiriKitIntent(referenceResolver:previousIntent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(_QWORD, _QWORD);
  _QWORD *v64;
  void (*v66)(_QWORD, _QWORD);
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;

  v1 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v4(v1, *(_QWORD *)(v0 + 64), v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v5 == *MEMORY[0x24BE98E08])
  {
    v6 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 104);
    OUTLINED_FUNCTION_54_15(*(_QWORD *)(v0 + 200));
    OUTLINED_FUNCTION_33(v7, v6, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v10 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 104);
    v13 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.siriContacts);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v14(v10, v9, v12);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_96_6(v15))
    {
      v17 = (uint8_t *)OUTLINED_FUNCTION_1();
      v70 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v17 = 136315138;
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, (void (*)(uint64_t))MEMORY[0x24BEA3710]);
      v18 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_85_11();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v15, v16, "#Parse.toSiriKitIntent Converting NLv3IntentOnly Parse to SiriKit Intent: %s", v17);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_85_11();

    v33 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 88);
    v34 = *(_QWORD *)(v0 + 96);
    v14(*(_QWORD *)(v0 + 112), v33, v34);
    ContactNLv3Intent.init(intent:)();
    v36 = ContactNLv3Intent.toSiriKitIntent(referenceResolver:previousIntent:)();
    v67 = v37;
    v69 = v36;
    outlined destroy of Signpost.OpenSignpost(v35, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    ((void (*)(uint64_t, uint64_t))(v0 + 24))(v33, v34);
LABEL_24:
    OUTLINED_FUNCTION_36_17();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id, uint64_t))(v0 + 8))(v69, v67);
  }
  if (v5 == *MEMORY[0x24BE98E88])
  {
    v20 = *(_QWORD *)(v0 + 216);
    v22 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 184);
    v23 = *(uint8_t **)(v0 + 168);
    OUTLINED_FUNCTION_54_15(*(_QWORD *)(v0 + 200));
    OUTLINED_FUNCTION_96_2(v21, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 32));
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v24 = OUTLINED_FUNCTION_26();
    v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.siriContacts);
    Logger.logObject.getter();
    v26 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v27);
      _os_log_impl(&dword_21FE16000, v25, v26, "#Parse.toSiriKitIntent Converting DirectInvocation Parse to SiriKit Intent", v23, 2u);
      OUTLINED_FUNCTION_0();
    }
    v28 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 184);
    v30 = *(_QWORD *)(v0 + 168);

    Parse.DirectInvocation.toSiriKitIntent()();
    v67 = v32;
    v69 = v31;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
    goto LABEL_24;
  }
  if (v5 != *MEMORY[0x24BE98E98])
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v49 = *(_QWORD *)(v0 + 208);
    v50 = *(_QWORD *)(v0 + 192);
    v51 = *(_QWORD *)(v0 + 64);
    v52 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.siriContacts);
    v4(v49, v51, v50);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.debug.getter();
    v55 = os_log_type_enabled(v53, v54);
    v56 = *(_QWORD *)(v0 + 208);
    v57 = *(_QWORD *)(v0 + 192);
    if (v55)
    {
      v58 = *(_QWORD *)(v0 + 80);
      v59 = (uint8_t *)OUTLINED_FUNCTION_1();
      v70 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v59 = 136315138;
      v4(v58, v56, v57);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      v60 = Error.localizedDescription.getter();
      v62 = v61;
      outlined destroy of Signpost.OpenSignpost(v58, (uint64_t (*)(_QWORD))type metadata accessor for ContactsError);
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, &v70);
      OUTLINED_FUNCTION_115_3();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_84_9(v56);
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v53, v54, "%s", v59);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    v66 = *(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 8);
    OUTLINED_FUNCTION_84_9(*(_QWORD *)(v0 + 208));

    v66(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 192));
    v67 = 0;
    v69 = 0;
    goto LABEL_24;
  }
  v38 = *(_QWORD *)(v0 + 144);
  OUTLINED_FUNCTION_54_15(*(_QWORD *)(v0 + 200));
  OUTLINED_FUNCTION_88_5(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 32));
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v39 = *(NSObject **)(v0 + 152);
  v40 = *(_QWORD *)(v0 + 144);
  v41 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_88_5(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16));
  Logger.logObject.getter();
  v42 = OUTLINED_FUNCTION_54_2();
  v43 = os_log_type_enabled(v39, v42);
  v45 = *(_QWORD *)(v0 + 144);
  v44 = *(_QWORD *)(v0 + 152);
  if (v43)
  {
    v68 = *(_QWORD *)(v0 + 136);
    v46 = (uint8_t *)OUTLINED_FUNCTION_1();
    v70 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v46 = 136315138;
    v47 = USOParse.debugDescription.getter();
    *(_QWORD *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v68);
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v39, v42, "#Parse.toSiriKitIntent Converting USO Parse to SiriKit Intent: %s", v46);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  v63 = *(void (**)(_QWORD, _QWORD))(v45 + 8);
  v63(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));

  *(_QWORD *)(v0 + 224) = v63;
  v64 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v64;
  *v64 = v0;
  v64[1] = Parse.toSiriKitIntent(referenceResolver:previousIntent:);
  return USOParse.toSiriKitIntent(previousIntent:referenceResolver:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(v0 + 224))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  OUTLINED_FUNCTION_36_17();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
}

uint64_t Parse.toSiriKitIntent(referenceResolver:previousIntent:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 240) = a1;
  *(_QWORD *)(v3 + 248) = a2;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_8_0();
}

void Parse.isLearnPronunciation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  v5 = OUTLINED_FUNCTION_7_36();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v29 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_50();
  v13 = OUTLINED_FUNCTION_29_26();
  v30 = *(_QWORD *)(v13 - 8);
  v31 = v13;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_9_5();
  v29 = v15;
  v16 = OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_66_16();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_59_4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v3, v1, v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 88))(v3, v16);
  if (v18 == *MEMORY[0x24BE98E08])
  {
    OUTLINED_FUNCTION_94_7();
    OUTLINED_FUNCTION_26_2((uint64_t)v11, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32));
    OUTLINED_FUNCTION_26_2((uint64_t)v9, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16));
    ContactNLv3Intent.init(intent:)();
    ContactNLv3Intent.isLearnPronunciation.getter();
    OUTLINED_FUNCTION_115(v19, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_23_6((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
    goto LABEL_17;
  }
  if (v18 != *MEMORY[0x24BE98E98])
  {
    (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v16);
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_94_7();
  v21 = v29;
  v20 = v30;
  v22 = v31;
  OUTLINED_FUNCTION_56(v29, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 32));
  USOParse.preferredUserDialogAct.getter(v2);
  v23 = OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_6_2(v2, 1, v23);
  if (v24)
  {
    outlined destroy of Any?(v2, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_14:
    OUTLINED_FUNCTION_80_9();
    goto LABEL_15;
  }
  v25 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_23_6(v2, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 8));
  if (!v25)
    goto LABEL_14;
  OUTLINED_FUNCTION_21_26();
  v26 = OUTLINED_FUNCTION_2();
  if (!v33)
  {
LABEL_15:
    OUTLINED_FUNCTION_58_11(v26, &demangling cache variable for type metadata for Any?);
    goto LABEL_16;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if ((OUTLINED_FUNCTION_10_34() & 1) == 0)
  {
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    goto LABEL_17;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  v27 = OUTLINED_FUNCTION_45();
  if (v32)
  {
    v28 = MEMORY[0x2207D6A94](v27);
    OUTLINED_FUNCTION_45();
    swift_release();
    OUTLINED_FUNCTION_92(v21, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
    if (v28)
      OUTLINED_FUNCTION_2();
  }
  else
  {
    OUTLINED_FUNCTION_92(v21, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
    OUTLINED_FUNCTION_45();
  }
LABEL_17:
  OUTLINED_FUNCTION_7();
}

void Parse.isRequestForMultipleContacts.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5_2();
  v31[0] = v5;
  OUTLINED_FUNCTION_54();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v31 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)v31 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v31 - v13;
  v15 = OUTLINED_FUNCTION_29_26();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_15();
  v17 = OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_66_16();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_58_4();
  OUTLINED_FUNCTION_33(v3, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 16));
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v0 + 88))(v3, v17) == *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_39(v3, *(uint64_t (**)(uint64_t, uint64_t))(v0 + 96));
    v19 = v16;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v2, v3, v15);
    OUTLINED_FUNCTION_78_10((uint64_t)v14);
    v20 = OUTLINED_FUNCTION_130_0();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v20) == 1)
    {
      outlined destroy of Any?((uint64_t)v14, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      Siri_Nlu_External_UserDialogAct.usoTask.getter();
      OUTLINED_FUNCTION_48_12();
      OUTLINED_FUNCTION_39((uint64_t)v14, v21);
      if (v14)
      {
        OUTLINED_FUNCTION_21_26();
        v22 = OUTLINED_FUNCTION_2();
        if (v32)
        {
          type metadata accessor for UsoTask_summarise_common_Person();
          if ((OUTLINED_FUNCTION_8_30() & 1) != 0)
            goto LABEL_35;
LABEL_11:
          OUTLINED_FUNCTION_78_10((uint64_t)v12);
          OUTLINED_FUNCTION_6_2((uint64_t)v12, 1, v20);
          if (v23)
          {
            outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
          }
          else
          {
            Siri_Nlu_External_UserDialogAct.usoTask.getter();
            OUTLINED_FUNCTION_48_12();
            OUTLINED_FUNCTION_39((uint64_t)v12, v24);
            if (v12)
            {
              OUTLINED_FUNCTION_21_26();
              v25 = OUTLINED_FUNCTION_2();
              if (v32)
              {
                type metadata accessor for UsoTask_read_common_Person();
                if ((OUTLINED_FUNCTION_8_30() & 1) != 0)
                  goto LABEL_35;
LABEL_20:
                OUTLINED_FUNCTION_78_10((uint64_t)v9);
                OUTLINED_FUNCTION_6_2((uint64_t)v9, 1, v20);
                if (v23)
                {
                  outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
                }
                else
                {
                  Siri_Nlu_External_UserDialogAct.usoTask.getter();
                  OUTLINED_FUNCTION_48_12();
                  OUTLINED_FUNCTION_39((uint64_t)v9, v26);
                  if (v9)
                  {
                    OUTLINED_FUNCTION_21_26();
                    v27 = OUTLINED_FUNCTION_2();
                    v28 = v31[0];
                    if (v32)
                    {
                      type metadata accessor for UsoTask_noVerb_common_Person();
                      if ((OUTLINED_FUNCTION_8_30() & 1) != 0)
                      {
                        OUTLINED_FUNCTION_113_3();
                        UsoTask_noVerb_common_Person.isRequestForMultipleContacts.getter();
LABEL_36:
                        OUTLINED_FUNCTION_45();
                        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v15);
                        goto LABEL_40;
                      }
LABEL_29:
                      OUTLINED_FUNCTION_78_10(v28);
                      OUTLINED_FUNCTION_6_2(v28, 1, v20);
                      if (v23)
                      {
                        outlined destroy of Any?(v28, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
                      }
                      else
                      {
                        Siri_Nlu_External_UserDialogAct.usoTask.getter();
                        OUTLINED_FUNCTION_48_12();
                        OUTLINED_FUNCTION_39(v28, v29);
                        if (v28)
                        {
                          OUTLINED_FUNCTION_21_26();
                          v30 = OUTLINED_FUNCTION_2();
                          if (v32)
                          {
                            type metadata accessor for UsoTask_checkExistence_common_Person();
                            if ((OUTLINED_FUNCTION_8_30() & 1) != 0)
                            {
LABEL_35:
                              OUTLINED_FUNCTION_113_3();
                              UsoTask_summarise_common_Person.isRequestForMultipleContacts.getter();
                              goto LABEL_36;
                            }
LABEL_39:
                            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v2, v15);
                            goto LABEL_40;
                          }
LABEL_38:
                          OUTLINED_FUNCTION_58_11(v30, &demangling cache variable for type metadata for Any?);
                          goto LABEL_39;
                        }
                      }
                      OUTLINED_FUNCTION_80_9();
                      goto LABEL_38;
                    }
LABEL_28:
                    OUTLINED_FUNCTION_58_11(v27, &demangling cache variable for type metadata for Any?);
                    goto LABEL_29;
                  }
                }
                OUTLINED_FUNCTION_80_9();
                v28 = v31[0];
                goto LABEL_28;
              }
LABEL_19:
              OUTLINED_FUNCTION_58_11(v25, &demangling cache variable for type metadata for Any?);
              goto LABEL_20;
            }
          }
          OUTLINED_FUNCTION_80_9();
          goto LABEL_19;
        }
LABEL_10:
        OUTLINED_FUNCTION_58_11(v22, &demangling cache variable for type metadata for Any?);
        goto LABEL_11;
      }
    }
    OUTLINED_FUNCTION_80_9();
    goto LABEL_10;
  }
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v3, v17);
LABEL_40:
  OUTLINED_FUNCTION_7();
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.DirectInvocation.getSelectionIndex()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  os_log_t v8;
  os_log_type_t v9;
  const char *v10;
  uint8_t *v11;
  uint32_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  __int128 v17;
  __int128 v18;

  v1 = v0;
  v2 = Parse.DirectInvocation.userData.getter();
  if (!v2)
  {
    v17 = 0u;
    v18 = 0u;
    goto LABEL_6;
  }
  specialized Dictionary.subscript.getter(0x7865646E69, 0xE500000000000000, v2, &v17);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v18 + 1))
  {
LABEL_6:
    outlined destroy of Any?((uint64_t)&v17, &demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  if ((swift_dynamicCast() & 1) != 0)
    return v16;
LABEL_7:
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_101_5();
    _os_log_impl(v7, v8, v9, v10, v11, v12);
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_31_3();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
  OUTLINED_FUNCTION_93_8();
  OUTLINED_FUNCTION_11_3();
  v14 = v13;
  v15 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v1, v15);
  swift_storeEnumTagMultiPayload();
  return swift_willThrow();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Parse.toContactId(existingCandidates:)(Swift::OpaquePointer existingCandidates)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t);
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD *v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t v75;
  void *v76;
  Swift::String result;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  _QWORD *rawValue;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v7 = v2;
  rawValue = existingCandidates._rawValue;
  v90 = type metadata accessor for Logger();
  v82 = *(_QWORD *)(v90 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_9_5();
  v88 = v9;
  OUTLINED_FUNCTION_68_16();
  v86 = type metadata accessor for ContactNLv3Intent();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_5_2();
  v91 = v11;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v78 - v13;
  v15 = type metadata accessor for NLIntent();
  OUTLINED_FUNCTION_79_7();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_51_16();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (uint64_t)&v78 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_5_2();
  v79 = v21;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_39_5();
  v78 = v23;
  OUTLINED_FUNCTION_68_16();
  v24 = type metadata accessor for USOParse();
  v25 = *(_QWORD *)(v24 - 8);
  v84 = (uint8_t *)v24;
  v85 = v25;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_9_5();
  v87 = v27;
  OUTLINED_FUNCTION_68_16();
  type metadata accessor for Parse();
  OUTLINED_FUNCTION_44_15();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_24_29();
  v29 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  v83 = v7;
  v80 = v29;
  v29(v6, v7);
  v30 = (*(uint64_t (**)())(v5 + 88))();
  if (v30 == *MEMORY[0x24BE98E08])
  {
    OUTLINED_FUNCTION_77_9();
    v31 = OUTLINED_FUNCTION_28_23();
    v32(v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v19, v15);
    ContactNLv3Intent.init(intent:)();
    ContactNLv3Intent.isContactDomain.getter();
    v33 = (uint64_t)v14;
    v34 = v91;
    if ((v35 & 1) == 0)
      goto LABEL_13;
    if (one-time initialization token for contactId == -1)
    {
LABEL_4:
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
      IntentNodeTraversable.value<A>(forNode:)();
      v7 = v93;
      if (v93)
      {
        v88 = v92;
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        __swift_project_value_buffer(v90, (uint64_t)static Logger.siriContacts);
        outlined init with copy of ContactNLv3Intent(v33, v34);
        v36 = Logger.logObject.getter();
        v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = OUTLINED_FUNCTION_1();
          v87 = v19;
          v39 = (uint8_t *)v38;
          v40 = OUTLINED_FUNCTION_1();
          v90 = v7;
          v85 = v40;
          v92 = v40;
          *(_DWORD *)v39 = 136315138;
          v84 = v39 + 4;
          lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
          v41 = dispatch thunk of CustomStringConvertible.description.getter();
          v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v92);
          OUTLINED_FUNCTION_98_5(v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of Signpost.OpenSignpost(v34, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
          _os_log_impl(&dword_21FE16000, v36, v37, "ContactIntent: %s", v39, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_0();
        }

        outlined destroy of Signpost.OpenSignpost(v34, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
        outlined destroy of Signpost.OpenSignpost(v33, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v19, v15);
        v1 = v88;
        goto LABEL_48;
      }
LABEL_13:
      v1 = OUTLINED_FUNCTION_31_3();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      OUTLINED_FUNCTION_11_3();
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_41_2();
      outlined destroy of Signpost.OpenSignpost(v33, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v19, v15);
      goto LABEL_48;
    }
LABEL_51:
    swift_once();
    goto LABEL_4;
  }
  if (v30 == *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_77_9();
    v44 = v87;
    v45 = OUTLINED_FUNCTION_28_23();
    v46(v45);
    v47 = rawValue;
    v34 = rawValue[2];
    if (v34)
    {
      v7 = v78;
      USOParse.preferredUserDialogAct.getter(v78);
      v48 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      if (__swift_getEnumTagSinglePayload(v7, 1, v48) == 1)
      {
        outlined destroy of Any?(v7, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      }
      else
      {
        v58 = Siri_Nlu_External_UserDialogAct.contactIds.getter();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 8))(v7, v48);
        v91 = *(_QWORD *)(v58 + 16);
        if (v91)
        {
          v59 = 0;
          v86 = v58;
          v60 = v58 + 32;
          v1 = v47[4];
          v7 = v47[5];
          v88 = (uint64_t)(v47 + 7);
          v90 = v60;
          while (1)
          {
            v61 = (uint64_t *)(v60 + 16 * v59);
            v3 = *v61;
            v15 = v61[1];
            if (v1 == *v61 && v7 == v15)
              goto LABEL_39;
            if ((OUTLINED_FUNCTION_2_19() & 1) != 0)
            {
              v1 = v3;
              v7 = v15;
LABEL_39:
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              (*(void (**)(uint64_t, uint8_t *))(v85 + 8))(v44, v84);
              goto LABEL_48;
            }
            v33 = v7;
            if (v34 != 1)
              break;
LABEL_36:
            ++v59;
            v60 = v90;
            v44 = v87;
            v7 = v33;
            if (v59 == v91)
              goto LABEL_40;
          }
          v63 = (_QWORD *)v88;
          v19 = 1;
          while (1)
          {
            v64 = v19 + 1;
            if (__OFADD__(v19, 1))
              break;
            v65 = *(v63 - 1) == v3 && *v63 == v15;
            if (v65 || (OUTLINED_FUNCTION_2_19() & 1) != 0)
            {
              v1 = v3;
              v7 = v15;
              v44 = v87;
              goto LABEL_39;
            }
            v63 += 2;
            ++v19;
            if (v64 == v34)
              goto LABEL_36;
          }
          __break(1u);
          goto LABEL_51;
        }
LABEL_40:
        swift_bridgeObjectRelease();
      }
    }
    type metadata accessor for ReferenceResolutionClient();
    ReferenceResolutionClient.__allocating_init()();
    v66 = v79;
    USOParse.preferredUserDialogAct.getter(v79);
    v67 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    if (__swift_getEnumTagSinglePayload(v66, 1, v67) == 1)
    {
      outlined destroy of Any?(v66, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      v1 = Siri_Nlu_External_UserDialogAct.contactId.getter();
      v7 = v68;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8))(v66, v67);
      if (v7)
      {
LABEL_46:
        v70 = OUTLINED_FUNCTION_28_23();
        v71(v70);
        swift_release();
        goto LABEL_48;
      }
    }
    if (!specialized RRReferenceResolverProtocol.resolvePersonDisambiguationReference(from:)()
      || (v1 = UsoEntity_common_Person.contactId.getter(), v7 = v69, swift_release(), !v7))
    {
      v1 = OUTLINED_FUNCTION_31_3();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      OUTLINED_FUNCTION_11_3();
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_41_2();
      swift_release();
      v72 = OUTLINED_FUNCTION_28_23();
      v74(v72, v73);
      goto LABEL_48;
    }
    goto LABEL_46;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v49 = v90;
  v50 = __swift_project_value_buffer(v90, (uint64_t)static Logger.siriContacts);
  v51 = v82;
  v52 = v88;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v88, v50, v49);
  v53 = Logger.logObject.getter();
  v54 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)OUTLINED_FUNCTION_1();
    v91 = OUTLINED_FUNCTION_1();
    v92 = v91;
    *(_DWORD *)v55 = 136315138;
    v89 = v55 + 4;
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6573726150, 0xE500000000000000, &v92);
    OUTLINED_FUNCTION_98_5(v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21FE16000, v53, v54, "Unexpected parse type: %s", v55, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v49);
  OUTLINED_FUNCTION_31_3();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
  OUTLINED_FUNCTION_11_3();
  v80(v57, v83);
  swift_storeEnumTagMultiPayload();
  OUTLINED_FUNCTION_41_2();
  (*(void (**)())(v5 + 8))();
LABEL_48:
  v75 = v1;
  v76 = (void *)v7;
  result._object = v76;
  result._countAndFlagsBits = v75;
  return result;
}

uint64_t Parse.confirmationResponse.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  NSObject *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  char v79;
  os_log_type_t v80;
  _WORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, NSObject *, uint64_t);
  os_log_type_t v92;
  uint8_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  os_log_type_t v99;
  _WORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  os_log_type_t v113;
  _WORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  os_log_type_t v123;
  _WORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  OUTLINED_FUNCTION_32();
  v150 = v2;
  v151 = v3;
  v147 = v4;
  v146 = OUTLINED_FUNCTION_90_5();
  v144 = *(_QWORD *)(v146 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_2();
  v128 = v6;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_39_5();
  v145 = (uint8_t *)v8;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  v10 = OUTLINED_FUNCTION_7_36();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v127 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_9_5();
  v136 = v16;
  v17 = OUTLINED_FUNCTION_130_0();
  v138 = *(_QWORD *)(v17 - 8);
  v139 = v17;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_5_2();
  v130 = v19;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_68();
  v129 = v21;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_68();
  v137 = v23;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_39_5();
  v141 = v25;
  v142 = OUTLINED_FUNCTION_29_26();
  v140 = *(_QWORD *)(v142 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_5_2();
  v132 = v27;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_68();
  v134 = v29;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_39_5();
  v143 = v31;
  v32 = OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_66_16();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_5_2();
  v131 = v34;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_68();
  v133 = v36;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v37);
  v39 = (char *)&v127 - v38;
  v40 = *(_QWORD *)(v0 + 16);
  v135 = v1;
  OUTLINED_FUNCTION_111_4((uint64_t)&v127 - v38, v1);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v0 + 88))(v39, v32);
  if (v41 == *MEMORY[0x24BE98E08])
  {
    OUTLINED_FUNCTION_42_10();
    OUTLINED_FUNCTION_33((uint64_t)v14, (uint64_t)v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 32));
    v42 = OUTLINED_FUNCTION_28_23();
    OUTLINED_FUNCTION_33(v42, v43, v44);
    ContactNLv3Intent.init(intent:)();
    v45 = ContactNLv3Intent.confirmationResponse.getter(v147);
    OUTLINED_FUNCTION_115(v45, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    return OUTLINED_FUNCTION_39((uint64_t)v14, *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
  }
  if (v41 == *MEMORY[0x24BE98E88])
  {
    OUTLINED_FUNCTION_42_10();
    v48 = v144;
    v47 = (uint64_t)v145;
    v49 = v146;
    OUTLINED_FUNCTION_66_15((uint64_t)v145, (uint64_t)v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v144 + 32));
    v51 = Parse.DirectInvocation.identifier.getter();
    v52 = v50;
    if (v51 == 0xD00000000000001FLL && v50 == 0x800000021FEDF780 || (OUTLINED_FUNCTION_11_18() & 1) != 0)
    {
      OUTLINED_FUNCTION_92_7();
      OUTLINED_FUNCTION_5_0();
LABEL_8:
      v53 = (unsigned int *)MEMORY[0x24BE98400];
LABEL_48:
      v117 = *v53;
      v118 = OUTLINED_FUNCTION_161();
      v119 = v147;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 104))(v147, v117, v118);
      v87 = v119;
      v88 = 0;
      v86 = v118;
      return __swift_storeEnumTagSinglePayload(v87, v88, 1, v86);
    }
    if (v51 == 0xD00000000000001CLL && v52 == 0x800000021FEDF7A0)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      OUTLINED_FUNCTION_92_7();
LABEL_47:
      v53 = (unsigned int *)MEMORY[0x24BE983F8];
      goto LABEL_48;
    }
    v98 = OUTLINED_FUNCTION_11_18();
    OUTLINED_FUNCTION_5_0();
    if ((v98 & 1) != 0)
      goto LABEL_32;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v106 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v106, (uint64_t)static Logger.siriContacts);
    v107 = v128;
    OUTLINED_FUNCTION_66_15(v128, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 16));
    Logger.logObject.getter();
    v108 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_23_13(v108))
    {
      v109 = (uint8_t *)OUTLINED_FUNCTION_1();
      v149 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v109 = 136315138;
      v110 = Parse.DirectInvocation.identifier.getter();
      v112 = OUTLINED_FUNCTION_69_15(v110, v111);
      OUTLINED_FUNCTION_27_25(v112);
      OUTLINED_FUNCTION_115_3();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_84_9(v128);
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v52, (os_log_type_t)0x1Cu, "Direct invocation %s is not a confirmation response.", v109);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    v120 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    v120(v107, v49);
    v121 = OUTLINED_FUNCTION_28_23();
    ((void (*)(uint64_t))v120)(v121);
    v122 = v147;
    v86 = OUTLINED_FUNCTION_161();
    v87 = v122;
LABEL_27:
    v88 = 1;
    return __swift_storeEnumTagSinglePayload(v87, v88, 1, v86);
  }
  if (v41 == *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_42_10();
    v54 = v140;
    v56 = v142;
    v55 = v143;
    (*(void (**)(uint64_t, char *, uint64_t))(v140 + 32))(v143, v39, v142);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v57 = OUTLINED_FUNCTION_26();
    v58 = __swift_project_value_buffer(v57, (uint64_t)static Logger.siriContacts);
    v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16);
    v60 = v134;
    v59(v134, v55, v56);
    v146 = (uint64_t)v58;
    Logger.logObject.getter();
    v61 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_7_17(v61))
    {
      v62 = (uint8_t *)OUTLINED_FUNCTION_1();
      v149 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v62 = 136315138;
      v59(v132, v60, v56);
      v63 = String.init<A>(describing:)();
      v65 = OUTLINED_FUNCTION_69_15(v63, v64);
      OUTLINED_FUNCTION_27_25(v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_103_6();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v58, (os_log_type_t)v40, "#confirmationResponse usoParse: %s", v62);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    v73 = *(uint8_t **)(v54 + 8);
    OUTLINED_FUNCTION_103_6();

    v74 = v138;
    v75 = v139;
    v76 = v141;
    v78 = v136;
    v77 = v137;
    USOParse.preferredUserDialogAct.getter(v136);
    OUTLINED_FUNCTION_6_2(v78, 1, v75);
    if (v79)
    {
      outlined destroy of Any?(v78, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      OUTLINED_FUNCTION_56_15();
      v80 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v80))
      {
        v81 = (_WORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_54_0(v81);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v82, v83, "#confirmationResponse got nil UDA, returning nil confirmation response");
        OUTLINED_FUNCTION_0();
      }

      v84 = v55;
      v85 = v56;
    }
    else
    {
      OUTLINED_FUNCTION_66_15(v76, v78, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 32));
      v91 = *(void (**)(uint64_t, NSObject *, uint64_t))(v74 + 16);
      OUTLINED_FUNCTION_117_3((uint64_t)v77);
      OUTLINED_FUNCTION_56_15();
      v92 = OUTLINED_FUNCTION_54_2();
      if (os_log_type_enabled(v77, v92))
      {
        v94 = (uint8_t *)OUTLINED_FUNCTION_1();
        v149 = OUTLINED_FUNCTION_1();
        v145 = v73;
        *(_DWORD *)v94 = 136315138;
        v91(v129, v77, v75);
        OUTLINED_FUNCTION_28_23();
        v95 = String.init<A>(describing:)();
        v97 = OUTLINED_FUNCTION_69_15(v95, v96);
        OUTLINED_FUNCTION_27_25(v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_38_17((uint64_t)v77);
        OUTLINED_FUNCTION_43_0(&dword_21FE16000, v77, v92, "#confirmationResponse userDialogAct: %s", v94);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_38_17((uint64_t)v77);

      if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
      {
        OUTLINED_FUNCTION_56_15();
        v99 = OUTLINED_FUNCTION_54_2();
        if (OUTLINED_FUNCTION_30_3(v99))
        {
          v100 = (_WORD *)OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_54_0(v100);
          OUTLINED_FUNCTION_2_5(&dword_21FE16000, v101, v102, "#confirmationResponse Returning .confirmed for UserAccepted");
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_38_17(v76);
        ((void (*)(uint64_t, uint64_t))v73)(v55, v142);
        goto LABEL_8;
      }
      v103 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      v104 = v130;
      OUTLINED_FUNCTION_117_3(v130);
      if ((v103 & 1) != 0)
      {
        OUTLINED_FUNCTION_38_17(v104);
        v105 = v142;
LABEL_44:
        OUTLINED_FUNCTION_56_15();
        v113 = OUTLINED_FUNCTION_54_2();
        if (OUTLINED_FUNCTION_30_3(v113))
        {
          v114 = (_WORD *)OUTLINED_FUNCTION_1();
          OUTLINED_FUNCTION_54_0(v114);
          OUTLINED_FUNCTION_2_5(&dword_21FE16000, v115, v116, "#confirmationResponse Returning .rejected for UserRejected / UserCancelled");
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_38_17(v141);
        ((void (*)(uint64_t, uint64_t))v73)(v55, v105);
        goto LABEL_47;
      }
      v103 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      OUTLINED_FUNCTION_38_17(v104);
      v105 = v142;
      if ((v103 & 1) != 0)
        goto LABEL_44;
      OUTLINED_FUNCTION_56_15();
      v123 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v123))
      {
        v124 = (_WORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_54_0(v124);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v125, v126, "#confirmationResponse Returning nil");
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_38_17(v141);
      v84 = v55;
      v85 = v105;
    }
    ((void (*)(uint64_t, uint64_t))v73)(v84, v85);
    v86 = OUTLINED_FUNCTION_161();
    v87 = v147;
    goto LABEL_27;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v66 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.siriContacts);
  v67 = v133;
  OUTLINED_FUNCTION_111_4(v133, v135);
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_96_6(v68))
  {
    v70 = (uint8_t *)OUTLINED_FUNCTION_1();
    v146 = OUTLINED_FUNCTION_1();
    v149 = v146;
    *(_DWORD *)v70 = 136315138;
    v145 = v70 + 4;
    OUTLINED_FUNCTION_111_4(v131, v67);
    v71 = String.init<A>(describing:)();
    v148 = OUTLINED_FUNCTION_69_15(v71, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_108_2(v67);
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v68, v69, "Unexpected parse type: %s", v70);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_108_2(v67);

  v89 = v147;
  v90 = OUTLINED_FUNCTION_161();
  __swift_storeEnumTagSinglePayload(v89, 1, 1, v90);
  return OUTLINED_FUNCTION_108_2((uint64_t)v39);
}

void Parse.cancelOrContactIntent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v18;

  OUTLINED_FUNCTION_32();
  v18 = OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  v4 = OUTLINED_FUNCTION_7_36();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_51_16();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - v7;
  v9 = OUTLINED_FUNCTION_104_0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_24_29();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v2, v0, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v2, v9);
  if (v11 == *MEMORY[0x24BE98E08])
  {
    OUTLINED_FUNCTION_118(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 96));
    OUTLINED_FUNCTION_56((uint64_t)v8, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32));
    OUTLINED_FUNCTION_56(v1, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
    ContactNLv3Intent.init(intent:)();
    ContactNLv3Intent.isContactDomain.getter();
    if ((v12 & 1) != 0)
    {
      if (one-time initialization token for contactConfirmation != -1)
        swift_once();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
      IntentNodeTraversable.value<A>(forNode:)();
      v13 = OUTLINED_FUNCTION_67_13();
      outlined destroy of Signpost.OpenSignpost(v13, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      OUTLINED_FUNCTION_92((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    }
    else
    {
      OUTLINED_FUNCTION_115(v12, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      OUTLINED_FUNCTION_92((uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
    }
  }
  else
  {
    v14 = v11;
    v15 = *MEMORY[0x24BE98E88];
    v16 = *MEMORY[0x24BE98E98];
    OUTLINED_FUNCTION_118(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    if (v14 == v15 || v14 == v16)
    {
      Parse.isCancel.getter();
      Parse.isContactIntent.getter();
    }
  }
  OUTLINED_FUNCTION_7();
}

uint64_t Parse.isUSODisambiguationTask.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v18;

  v4 = v1;
  OUTLINED_FUNCTION_29_26();
  OUTLINED_FUNCTION_44_15();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_7_3();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - v7;
  v9 = OUTLINED_FUNCTION_104_0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v13 = v12 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v12 - v11, v4, v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 88))(v13, v9) == *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_104_4(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 96));
    OUTLINED_FUNCTION_56((uint64_t)v8, v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    v14 = USOParse.isOrdinalDisambiguation.getter();
    OUTLINED_FUNCTION_56(v2, (uint64_t)v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    if ((v14 & 1) != 0)
      v15 = 1;
    else
      v15 = USOParse.isContactDisambiguation.getter();
    v16 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v16(v2, v0);
    v16((uint64_t)v8, v0);
  }
  else
  {
    OUTLINED_FUNCTION_104_4(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    v15 = 0;
  }
  return v15 & 1;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;

  if (*(_QWORD *)(a3 + 16))
  {
    OUTLINED_FUNCTION_109_4(a1, a2);
    if ((v3 & 1) != 0)
      swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_31_0();
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  unint64_t v6;
  char v7;
  double result;

  if (*(_QWORD *)(a3 + 16) && (v6 = OUTLINED_FUNCTION_109_4(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)a4);
  }
  else
  {
    result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = OUTLINED_FUNCTION_109_4(a1, a2);
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

void Parse.isCancel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  OUTLINED_FUNCTION_32();
  v41 = v0;
  v40 = OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  v7 = OUTLINED_FUNCTION_7_36();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_7_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_58_4();
  v39 = OUTLINED_FUNCTION_130_0();
  v36 = *(_QWORD *)(v39 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v13);
  v35 = (uint64_t)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v15);
  v34 = (uint64_t)&v33 - v16;
  v17 = OUTLINED_FUNCTION_29_26();
  v37 = *(_QWORD *)(v17 - 8);
  v38 = v17;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_59_4();
  v19 = OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_79_7();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v41, v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v3, v19);
  if (v21 == *MEMORY[0x24BE98E08])
  {
    OUTLINED_FUNCTION_56_6(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    OUTLINED_FUNCTION_56((uint64_t)v11, v3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
    OUTLINED_FUNCTION_56(v1, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16));
    ContactNLv3Intent.init(intent:)();
    if (one-time initialization token for contactConfirmation != -1)
      swift_once();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    IntentNodeTraversable.value<A>(forNode:)();
    v22 = OUTLINED_FUNCTION_67_13();
    outlined destroy of Signpost.OpenSignpost(v22, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else if (v21 == *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_56_6(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v23 = v37;
    v24 = v3;
    v25 = v38;
    OUTLINED_FUNCTION_33(v5, v24, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32));
    USOParse.preferredUserDialogAct.getter(v4);
    v26 = v39;
    OUTLINED_FUNCTION_6_2(v4, 1, v39);
    if (v27)
    {
      OUTLINED_FUNCTION_39(v5, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
      outlined destroy of Any?(v4, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      v28 = v36;
      v29 = v34;
      OUTLINED_FUNCTION_26_2(v34, v4, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32));
      v30 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
      v31 = v35;
      OUTLINED_FUNCTION_26_2(v35, v29, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 16));
      if ((v30 & 1) == 0)
        Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
      v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v32(v31, v26);
      v32(v29, v26);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v5, v25);
    }
  }
  else
  {
    OUTLINED_FUNCTION_56_6(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  }
  OUTLINED_FUNCTION_7();
}

void Parse.getSiriKitIntentType()()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  os_log_type_t v37;
  void *v38;
  os_log_t v39;
  os_log_type_t v40;
  const char *v41;
  uint8_t *v42;
  uint32_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint8_t *);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint8_t *v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;

  OUTLINED_FUNCTION_32();
  v70 = type metadata accessor for ContactsError();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_5();
  v69 = v4;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_9_5();
  v77 = v6;
  v7 = OUTLINED_FUNCTION_52_9();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5_2();
  v76 = v9;
  OUTLINED_FUNCTION_54();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v68 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v68 - v14;
  v16 = OUTLINED_FUNCTION_29_26();
  v73 = *(_QWORD *)(v16 - 8);
  v74 = (uint8_t *)v16;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_5_2();
  v75 = (uint8_t *)v18;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v19);
  v71 = (uint64_t)&v68 - v20;
  OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_44_15();
  MEMORY[0x24BDAC7A8](v21);
  v72 = (uint64_t)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v68 - v24;
  OUTLINED_FUNCTION_107_6((uint64_t)&v68 - v24, v1);
  v26 = v2[11]((uint64_t)v25, (uint64_t)v0);
  if (v26 == *MEMORY[0x24BE98E08])
  {
    OUTLINED_FUNCTION_92((uint64_t)v25, v2[12]);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v25, v7);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v27 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.siriContacts);
    v28 = *(_QWORD *)(v8 + 16);
    OUTLINED_FUNCTION_106_6((uint64_t)v13);
    Logger.logObject.getter();
    v29 = OUTLINED_FUNCTION_54_2();
    if (os_log_type_enabled(v0, v29))
    {
      v30 = OUTLINED_FUNCTION_1();
      v75 = (uint8_t *)v28;
      v31 = (uint8_t *)v30;
      v78 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v31 = 136315138;
      v74 = v31 + 4;
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type NLIntent and conformance NLIntent, (void (*)(uint64_t))MEMORY[0x24BEA3710]);
      v32 = dispatch thunk of CustomStringConvertible.description.getter();
      v34 = OUTLINED_FUNCTION_112_1(v32, v33);
      OUTLINED_FUNCTION_55_5(v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_75_13();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v0, v29, "#Parse.getSiriKitIntentType Getting SiriKit Intent Type for NLv3IntentOnly: %s", v31);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_75_13();

    OUTLINED_FUNCTION_106_6((uint64_t)v76);
    v44 = v77;
    ContactNLv3Intent.init(intent:)();
    ContactNLv3Intent.getSiriKitIntentType()();
    outlined destroy of Signpost.OpenSignpost(v44, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    ((void (*)(char *, uint64_t))v25)(v15, v7);
  }
  else if (v26 == *MEMORY[0x24BE98E88])
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v35 = OUTLINED_FUNCTION_26();
    v36 = (void *)__swift_project_value_buffer(v35, (uint64_t)static Logger.siriContacts);
    Logger.logObject.getter();
    v37 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_7_17(v37))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_101_5();
      _os_log_impl(v38, v39, v40, v41, v42, v43);
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_92((uint64_t)v25, v2[1]);
  }
  else if (v26 == *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_92((uint64_t)v25, v2[12]);
    v46 = v73;
    v45 = v74;
    v47 = v71;
    OUTLINED_FUNCTION_66_15(v71, (uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 32));
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v48 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.siriContacts);
    v49 = (uint64_t)v75;
    OUTLINED_FUNCTION_66_15((uint64_t)v75, v47, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16));
    Logger.logObject.getter();
    v50 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_23_13(v50))
    {
      v51 = (uint8_t *)OUTLINED_FUNCTION_1();
      v78 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v51 = 136315138;
      v52 = USOParse.debugDescription.getter();
      v54 = OUTLINED_FUNCTION_112_1(v52, v53);
      OUTLINED_FUNCTION_55_5(v54);
      OUTLINED_FUNCTION_115_3();
      OUTLINED_FUNCTION_5();
      (*(void (**)(uint8_t *, uint8_t *))(v46 + 8))(v75, v45);
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v0, (os_log_type_t)v8, "#Parse.getSiriKitIntentType Getting SiriKit Intent Type for USO Parse: %s", v51);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    v66 = *(void (**)(uint64_t, uint8_t *))(v46 + 8);
    v66(v49, v45);

    USOParse.getSiriKitIntentType()();
    v67 = OUTLINED_FUNCTION_28_23();
    ((void (*)(uint64_t))v66)(v67);
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v55 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.siriContacts);
    v56 = v72;
    OUTLINED_FUNCTION_107_6(v72, v1);
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_96_6(v57))
    {
      v59 = (uint8_t *)OUTLINED_FUNCTION_1();
      v77 = OUTLINED_FUNCTION_1();
      v78 = v77;
      v76 = v59;
      *(_DWORD *)v59 = 136315138;
      v75 = v59 + 4;
      v60 = v69;
      OUTLINED_FUNCTION_107_6(v69, v56);
      swift_storeEnumTagMultiPayload();
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (void (*)(uint64_t))type metadata accessor for ContactsError);
      OUTLINED_FUNCTION_93_8();
      v61 = Error.localizedDescription.getter();
      v62 = v56;
      v64 = v63;
      outlined destroy of Signpost.OpenSignpost(v60, (uint64_t (*)(_QWORD))type metadata accessor for ContactsError);
      v65 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v64, &v78);
      OUTLINED_FUNCTION_55_5(v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_109_1(v62);
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v57, v58, "%s", v76);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_109_1(v56);

    OUTLINED_FUNCTION_109_1((uint64_t)v25);
  }
  OUTLINED_FUNCTION_7();
}

void specialized RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  void (*v52)(uint64_t *, char *, uint64_t);
  uint64_t *v53;
  int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  int EnumTagSinglePayload;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void (*v114)(char *, char *);
  char *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135[3];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v118 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v123 = (uint64_t)&v116 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v121 = (uint64_t)&v116 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v119 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v122 = (char *)&v116 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v120 = (char *)&v116 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v125 = (char *)&v116 - v17;
  v18 = type metadata accessor for RRCandidate();
  v131 = *(_QWORD *)(v18 - 8);
  v132 = v18;
  v19 = MEMORY[0x24BDAC7A8](v18);
  v124 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v126 = (char *)&v116 - v21;
  v22 = type metadata accessor for RRResult();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v117 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v130 = (uint64_t *)((char *)&v116 - v27);
  MEMORY[0x24BDAC7A8](v26);
  v129 = (char *)&v116 - v28;
  v29 = type metadata accessor for RRQuery();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (uint64_t *)((char *)&v116 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  v34 = MEMORY[0x24BDAC7A8](v33);
  v36 = (void **)((char *)&v116 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v34);
  v38 = (char *)&v116 - v37;
  v135[1] = (uint64_t)v133;
  v127 = type metadata accessor for RREntity();
  v128 = a2;
  __swift_storeEnumTagSinglePayload(a2, 1, 1, v127);
  *v32 = a1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v30 + 104))(v32, *MEMORY[0x24BEA59D0], v29);
  v39 = type metadata accessor for ReferenceResolutionClient();
  swift_retain();
  MEMORY[0x2207D7B44](v32, v39, MEMORY[0x24BEA54A0]);
  (*(void (**)(_QWORD *, uint64_t))(v30 + 8))(v32, v29);
  v133 = v38;
  outlined init with copy of Any?((uint64_t)v38, (uint64_t)v36, &demangling cache variable for type metadata for Result<RRResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v40 = *v36;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.siriContacts);
    v42 = v40;
    v43 = v40;
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      v47 = swift_slowAlloc();
      v134 = (uint64_t)v40;
      v135[0] = v47;
      *(_DWORD *)v46 = 136315138;
      v48 = v40;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v49 = String.init<A>(describing:)();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FE16000, v44, v45, "#ReferenceResolution Received a failure: %s -> nil", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v47, -1, -1);
      MEMORY[0x2207D8768](v46, -1, -1);

    }
    else
    {

    }
LABEL_13:
    outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
    return;
  }
  v51 = v129;
  (*(void (**)(char *, void **, uint64_t))(v23 + 32))(v129, v36, v22);
  v52 = *(void (**)(uint64_t *, char *, uint64_t))(v23 + 16);
  v53 = v130;
  v52(v130, v51, v22);
  v54 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 88))(v53, v22);
  v55 = (char *)v22;
  v56 = v23;
  if (v54 == *MEMORY[0x24BEA5AA8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v23 + 96))(v53, v22);
    v57 = v131;
    v58 = v132;
    v59 = v126;
    (*(void (**)(char *, uint64_t *, uint64_t))(v131 + 32))(v126, v53, v132);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.siriContacts);
    v61 = v124;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v124, v59, v58);
    v62 = Logger.logObject.getter();
    v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = swift_slowAlloc();
      v130 = (uint64_t *)v55;
      v123 = v56;
      v65 = (uint8_t *)v64;
      v66 = swift_slowAlloc();
      v135[0] = v66;
      *(_DWORD *)v65 = 136315138;
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, (void (*)(uint64_t))MEMORY[0x24BEA5580]);
      v67 = dispatch thunk of CustomStringConvertible.description.getter();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v135);
      v58 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v69 = *(void (**)(char *, uint64_t))(v57 + 8);
      v69(v61, v58);
      _os_log_impl(&dword_21FE16000, v62, v63, "#ReferenceResolution Found a candidate %s", v65, 0xCu);
      swift_arrayDestroy();
      v70 = v66;
      v59 = v126;
      MEMORY[0x2207D8768](v70, -1, -1);
      v71 = v65;
      v56 = v123;
      v55 = (char *)v130;
      MEMORY[0x2207D8768](v71, -1, -1);
    }
    else
    {
      v69 = *(void (**)(char *, uint64_t))(v57 + 8);
      v69(v61, v58);
    }

    v83 = (uint64_t)v125;
    RRCandidate.entity.getter();
    v69(v59, v58);
    (*(void (**)(char *, char *))(v56 + 8))(v51, v55);
    outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
    v84 = v128;
    outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
    __swift_storeEnumTagSinglePayload(v83, 0, 1, v127);
    v85 = v83;
    v86 = v84;
    goto LABEL_49;
  }
  v72 = v131;
  v73 = v132;
  if (v54 == *MEMORY[0x24BEA5AB8])
  {
    (*(void (**)(uint64_t *, char *))(v23 + 96))(v53, v55);
    v74 = *v53;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v75 = type metadata accessor for Logger();
    __swift_project_value_buffer(v75, (uint64_t)static Logger.siriContacts);
    v76 = Logger.logObject.getter();
    v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v78 = 0;
      _os_log_impl(&dword_21FE16000, v76, v77, "#ReferenceResolution Found ambiguous entities -> returning the first one", v78, 2u);
      MEMORY[0x2207D8768](v78, -1, -1);
    }

    v79 = v123;
    specialized Collection.first.getter(v74, v123);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v79, 1, v73) == 1)
    {
      (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
      outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
      v80 = v128;
      outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
      outlined destroy of Any?(v79, &demangling cache variable for type metadata for RRCandidate?);
      v81 = 1;
      v82 = (uint64_t)v122;
LABEL_48:
      __swift_storeEnumTagSinglePayload(v82, v81, 1, v127);
      v85 = v82;
      v86 = v80;
LABEL_49:
      outlined init with take of Any?(v85, v86, &demangling cache variable for type metadata for RREntity?);
      return;
    }
    v82 = (uint64_t)v122;
    RRCandidate.entity.getter();
    (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
    outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
    v80 = v128;
    outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v79, v73);
LABEL_47:
    v81 = 0;
    goto LABEL_48;
  }
  if (v54 == *MEMORY[0x24BEA5AB0])
  {
    (*(void (**)(uint64_t *, char *))(v23 + 96))(v53, v55);
    v87 = *v53;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v88 = type metadata accessor for Logger();
    __swift_project_value_buffer(v88, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain();
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v91 = 134217984;
      v135[0] = *(_QWORD *)(v87 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FE16000, v89, v90, "#ReferenceResolution Found %ld candidates. Using the first one", v91, 0xCu);
      MEMORY[0x2207D8768](v91, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v82 = (uint64_t)v120;
    v101 = v121;
    specialized Collection.first.getter(v87, v121);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v101, 1, v73) != 1)
    {
      RRCandidate.entity.getter();
      (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
      outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
      v80 = v128;
      outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
      (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v101, v73);
      goto LABEL_47;
    }
    (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
    outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
    v80 = v128;
    outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
    v100 = v101;
LABEL_40:
    outlined destroy of Any?(v100, &demangling cache variable for type metadata for RRCandidate?);
    v81 = 1;
    goto LABEL_48;
  }
  if (v54 == *MEMORY[0x24BEA5AC0])
  {
    (*(void (**)(uint64_t *, char *))(v23 + 96))(v53, v55);
    v92 = *v53;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.siriContacts);
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v96 = 0;
      _os_log_impl(&dword_21FE16000, v94, v95, "#ReferenceResolution Found ambiguous entities -> returning the first one", v96, 2u);
      MEMORY[0x2207D8768](v96, -1, -1);
    }

    v97 = (uint64_t)v118;
    if (!*(_QWORD *)(v92 + 16))
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
      outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
      v80 = v128;
      outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
      v81 = 1;
      v82 = (uint64_t)v119;
      goto LABEL_48;
    }
    v98 = *(_QWORD *)(v92 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    specialized Collection.first.getter(v98, v97);
    swift_bridgeObjectRelease();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v97, 1, v73);
    v82 = (uint64_t)v119;
    if (EnumTagSinglePayload != 1)
    {
      RRCandidate.entity.getter();
      (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
      outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
      v80 = v128;
      outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v97, v73);
      goto LABEL_47;
    }
    (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
    outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
    v80 = v128;
    outlined destroy of Any?(v128, &demangling cache variable for type metadata for RREntity?);
    v100 = v97;
    goto LABEL_40;
  }
  if (v54 == *MEMORY[0x24BEA5AC8])
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v102 = type metadata accessor for Logger();
    __swift_project_value_buffer(v102, (uint64_t)static Logger.siriContacts);
    v103 = Logger.logObject.getter();
    v104 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v105 = 0;
      _os_log_impl(&dword_21FE16000, v103, v104, "#ReferenceResolution No matches found", v105, 2u);
      MEMORY[0x2207D8768](v105, -1, -1);
    }

    (*(void (**)(char *, char *))(v23 + 8))(v51, v55);
    goto LABEL_13;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v106 = type metadata accessor for Logger();
  __swift_project_value_buffer(v106, (uint64_t)static Logger.siriContacts);
  v107 = v117;
  v52((uint64_t *)v117, v51, (uint64_t)v55);
  v108 = Logger.logObject.getter();
  v109 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v108, v109))
  {
    v110 = (uint8_t *)swift_slowAlloc();
    v111 = swift_slowAlloc();
    v135[0] = v111;
    *(_DWORD *)v110 = 136315138;
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type RRResult and conformance RRResult, (void (*)(uint64_t))MEMORY[0x24BEA5AD0]);
    v112 = dispatch thunk of CustomStringConvertible.description.getter();
    v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v114 = *(void (**)(char *, char *))(v23 + 8);
    v114(v107, v55);
    _os_log_impl(&dword_21FE16000, v108, v109, "#ReferenceResolution Received unknown result type %s", v110, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v111, -1, -1);
    MEMORY[0x2207D8768](v110, -1, -1);

    v115 = v129;
  }
  else
  {

    v114 = *(void (**)(char *, char *))(v23 + 8);
    v114(v107, v55);
    v115 = v51;
  }
  v114(v115, v55);
  outlined destroy of Any?((uint64_t)v133, &demangling cache variable for type metadata for Result<RRResult, Error>);
  v114((char *)v130, v55);
}

uint64_t specialized RRReferenceResolverProtocol.resolvePersonDisambiguationReference(from:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for RREntity();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized RRReferenceResolverProtocol.resolvePositionEntity(from:)((uint64_t)v2);
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) == 1)
  {
    outlined destroy of Any?((uint64_t)v2, &demangling cache variable for type metadata for RREntity?);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
    RREntity.usoEntity.getter();
    type metadata accessor for UsoEntity_common_Person();
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    v7 = v18;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
    swift_retain_n();
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v12 = swift_slowAlloc();
      v17 = v7;
      v18 = v12;
      *(_DWORD *)v11 = 136315138;
      v16[1] = v11 + 4;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person?);
      v13 = Optional.debugDescription.getter();
      v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FE16000, v9, v10, "#ReferenceResolution Converted positional reference entity to UsoEntity_common_Person: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v12, -1, -1);
      MEMORY[0x2207D8768](v11, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v7;
}

uint64_t specialized RRReferenceResolverProtocol.resolvePositionEntity(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  USOParse.preferredUserDialogAct.getter((uint64_t)v7);
  v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8) == 1)
  {
    v9 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    v10 = (uint64_t)v7;
  }
  else
  {
    v11 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    if (!v11)
      goto LABEL_9;
    v12 = specialized static RRReferenceResolverProtocol.extractPositionEntity(task:)();
    if (!v12)
    {
      swift_release();
      goto LABEL_9;
    }
    specialized RRReferenceResolverProtocol.resolveEntity(referenceEntity:)(v12, (uint64_t)v4);
    swift_release();
    swift_release();
    v13 = type metadata accessor for RREntity();
    if (__swift_getEnumTagSinglePayload((uint64_t)v4, 1, v13) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, v4, v13);
      v19 = a1;
      v20 = 0;
      v18 = v13;
      return __swift_storeEnumTagSinglePayload(v19, v20, 1, v18);
    }
    v9 = &demangling cache variable for type metadata for RREntity?;
    v10 = (uint64_t)v4;
  }
  outlined destroy of Any?(v10, v9);
LABEL_9:
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_21FE16000, v15, v16, "#ReferenceResolution Did not resolve RREntity from UsoParse, returning nil", v17, 2u);
    MEMORY[0x2207D8768](v17, -1, -1);
  }

  v18 = type metadata accessor for RREntity();
  v19 = a1;
  v20 = 1;
  return __swift_storeEnumTagSinglePayload(v19, v20, 1, v18);
}

uint64_t specialized static RRReferenceResolverProtocol.extractPositionEntity(task:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[24];
  uint64_t v18;

  static UsoTask_CodegenConverter.convert(task:)();
  if (v18)
  {
    outlined init with copy of Any?((uint64_t)v17, (uint64_t)v16, &demangling cache variable for type metadata for Any?);
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      swift_release();
      if (v15)
      {
        swift_retain();
        v0 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
        swift_release();
        swift_release();
        if (v0)
        {
          if (one-time initialization token for siriContacts != -1)
            swift_once();
          v1 = type metadata accessor for Logger();
          __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
          swift_retain_n();
          v2 = Logger.logObject.getter();
          v3 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v2, v3))
          {
            v4 = (uint8_t *)swift_slowAlloc();
            v14 = swift_slowAlloc();
            v15 = v14;
            *(_DWORD *)v4 = 136315138;
            CodeGenBase.entity.getter();
            v5 = UsoEntity.debugString.getter();
            v7 = v6;
            swift_release();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v15);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_21FE16000, v2, v3, "#ReferenceResolution Found positional reference, returning: %s", v4, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x2207D8768](v14, -1, -1);
            MEMORY[0x2207D8768](v4, -1, -1);

          }
          else
          {

            swift_release_n();
          }
          swift_retain();
          v8 = CodeGenBase.entity.getter();
          swift_release();
          swift_release_n();
          goto LABEL_23;
        }
        swift_release();
      }
      swift_release();
    }
    else
    {
      type metadata accessor for UsoTask_request_common_Person();
      if ((swift_dynamicCast() & 1) != 0
        || (type metadata accessor for UsoTask_summarise_common_Person(), swift_dynamicCast())
        || (type metadata accessor for UsoTask_read_common_Person(), swift_dynamicCast()))
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        swift_release();
        v8 = specialized static RRReferenceResolverProtocol.helper(person:)(v15);
        swift_release();
        swift_release();
LABEL_23:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
        outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
        return v8;
      }
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  }
  outlined destroy of Any?((uint64_t)v17, &demangling cache variable for type metadata for Any?);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_21FE16000, v10, v11, "#ReferenceResolution Found no positional reference, returning nil", v12, 2u);
    MEMORY[0x2207D8768](v12, -1, -1);
  }

  return 0;
}

uint64_t specialized static RRReferenceResolverProtocol.helper(person:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;

  if (a1)
  {
    swift_retain();
    v1 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    swift_release();
    if (v1)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
      swift_retain_n();
      v3 = Logger.logObject.getter();
      v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        v5 = (uint8_t *)swift_slowAlloc();
        v6 = swift_slowAlloc();
        v16 = v6;
        *(_DWORD *)v5 = 136315138;
        CodeGenBase.entity.getter();
        v7 = UsoEntity.debugString.getter();
        v9 = v8;
        swift_release();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21FE16000, v3, v4, "#ReferenceResolution Found positional reference, returning: %s", v5, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x2207D8768](v6, -1, -1);
        MEMORY[0x2207D8768](v5, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      swift_retain();
      v14 = CodeGenBase.entity.getter();
      swift_release_n();
      return v14;
    }
    swift_release();
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.siriContacts);
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_21FE16000, v11, v12, "#ReferenceResolution Found no positional reference, returning nil", v13, 2u);
    MEMORY[0x2207D8768](v13, -1, -1);
  }

  return 0;
}

void Parse.DirectInvocation.toSiriKitIntent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;

  OUTLINED_FUNCTION_32();
  v18 = *(_QWORD *)(OUTLINED_FUNCTION_90_5() - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_55_0();
  v3 = v2 - v1;
  v4 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  *((_QWORD *)&v22 + 1) = MEMORY[0x24BEE0D00];
  v23 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)&v21 = 0xD000000000000010;
  *((_QWORD *)&v21 + 1) = 0x800000021FEE4F60;
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v9 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21FED8CB0;
  outlined init with copy of DeviceState((uint64_t)&v21, v10 + 32);
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  v11 = v8 + *(int *)(v4 + 20);
  *(_QWORD *)v11 = "ToSiriKitIntent";
  *(_QWORD *)(v11 + 8) = 15;
  *(_BYTE *)(v11 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v21);
  v13 = Parse.DirectInvocation.identifier.getter();
  v14 = v12;
  if (v13 == 0xD000000000000026 && v12 == 0x800000021FEDF640 || (OUTLINED_FUNCTION_11_18() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ModifyContactAttributeIntent();
    OUTLINED_FUNCTION_102_8(v3, *(uint64_t (**)(uint64_t, uint64_t))(v18 + 16));
    ModifyContactAttributeIntent.__allocating_init(_:)(v3);
    goto LABEL_7;
  }
  if (v13 == 0xD000000000000022 && v14 == 0x800000021FEDF6D0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = OUTLINED_FUNCTION_11_18();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
      goto LABEL_7;
  }
  v16 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GetContactIntent()), sel_init);
  v17 = Parse.DirectInvocation.userData.getter();
  if (!v17)
  {
    v21 = 0u;
    v22 = 0u;
    goto LABEL_17;
  }
  specialized Dictionary.subscript.getter(0x4E746361746E6F63, 0xEB00000000656D61, v17, &v21);
  OUTLINED_FUNCTION_5();
  if (!*((_QWORD *)&v22 + 1))
  {
LABEL_17:
    outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
    goto LABEL_7;
  }
  if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    outlined bridged method (mbnn) of @objc SiriMatch.fullName.setter(v19, v20, v16);
LABEL_7:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v8, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_7();
}

void Parse.isContactIntent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumTagSinglePayload;
  int v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[4];
  _QWORD v55[4];
  _QWORD v56[4];
  _QWORD v57[4];
  _QWORD v58[4];
  _QWORD v59[4];
  _QWORD v60[4];
  _QWORD v61[4];
  _QWORD v62[4];
  _BYTE v63[48];

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v43 = v5;
  v6 = OUTLINED_FUNCTION_29_26();
  v45 = *(char **)(v6 - 8);
  v46 = (char *)v6;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_9_5();
  v44 = v8;
  OUTLINED_FUNCTION_68_16();
  v9 = type metadata accessor for Parse.DirectInvocation();
  v47 = *(_QWORD *)(v9 - 8);
  v48 = v9;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_9_5();
  v53 = v11;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_9_5();
  v52 = v13;
  v14 = OUTLINED_FUNCTION_52_9();
  v50 = *(_QWORD *)(v14 - 8);
  v51 = (char *)v14;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_5_2();
  v49 = v16;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v42 - v18;
  v20 = OUTLINED_FUNCTION_104_0();
  OUTLINED_FUNCTION_79_7();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_24_29();
  Parse.confirmationResponse.getter();
  v23 = OUTLINED_FUNCTION_161();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v3, 1, v23);
  outlined destroy of Any?(v3, &demangling cache variable for type metadata for ConfirmationResponse?);
  if (EnumTagSinglePayload != 1)
    goto LABEL_15;
  OUTLINED_FUNCTION_26_2(v1, v0, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v20);
  if (v25 == *MEMORY[0x24BE98E08])
  {
    OUTLINED_FUNCTION_23_6(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    v26 = v50;
    v27 = v1;
    v28 = v51;
    OUTLINED_FUNCTION_96_2((uint64_t)v19, v27, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 32));
    OUTLINED_FUNCTION_96_2((uint64_t)v49, (uint64_t)v19, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16));
    ContactNLv3Intent.init(intent:)();
    ContactNLv3Intent.isContactDomain.getter();
    OUTLINED_FUNCTION_115(v29, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    (*(void (**)(char *, char *))(v26 + 8))(v19, v28);
    goto LABEL_15;
  }
  if (v25 == *MEMORY[0x24BE98E88])
  {
    OUTLINED_FUNCTION_23_6(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v53, v1, v48);
    v30 = static ContactsDirectInvocations.Identifiers.allCases.getter();
    if (v30[2])
    {
      swift_bridgeObjectRetain();
      v51 = "ontacts.SelectContact";
      v52 = "ontacts.ModifyNickname";
      v49 = "ontacts.ContactPicker";
      v50 = 0xD000000000000022;
      v45 = "Messages.NewMessageToContact";
      v46 = "ontacts.GetContact";
      v43 = "Phone.StartAudioCall";
      v44 = 0xD00000000000001FLL;
      v42[0] = "com.apple.siri.contacts.Confirm";
      v42[1] = 0xD00000000000001CLL;
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v53, v48);
    goto LABEL_15;
  }
  if (v25 != *MEMORY[0x24BE98E98])
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v20);
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_23_6(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96));
  v32 = v44;
  v31 = v45;
  OUTLINED_FUNCTION_26_2(v44, v1, *((uint64_t (**)(uint64_t, uint64_t, uint64_t))v45 + 4));
  v33 = v43;
  USOParse.preferredUserDialogAct.getter((uint64_t)v43);
  v34 = OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_6_2((uint64_t)v33, 1, v34);
  if (v35)
  {
    OUTLINED_FUNCTION_23_6(v32, *((uint64_t (**)(uint64_t, uint64_t))v31 + 1));
    outlined destroy of Any?((uint64_t)v33, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }
  else
  {
    v38 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v33, v34);
    if (v38)
    {
      static UsoTask_CodegenConverter.convert(task:)();
      OUTLINED_FUNCTION_2();
      v36 = OUTLINED_FUNCTION_23_6(v32, *((uint64_t (**)(uint64_t, uint64_t))v31 + 1));
      goto LABEL_18;
    }
    v36 = OUTLINED_FUNCTION_23_6(v32, *((uint64_t (**)(uint64_t, uint64_t))v31 + 1));
  }
  memset(v63, 0, 32);
LABEL_18:
  OUTLINED_FUNCTION_114_2(v36, v37, &demangling cache variable for type metadata for Any?);
  if (v62[3])
  {
    type metadata accessor for UsoTask_summarise_common_Person();
    OUTLINED_FUNCTION_25_30();
    v39 = OUTLINED_FUNCTION_10_34();
    if ((_DWORD)v39)
    {
      v41 = v61[0];
      goto LABEL_23;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v62, &demangling cache variable for type metadata for Any?);
  }
  v41 = 0;
LABEL_23:
  OUTLINED_FUNCTION_114_2(v39, v40, &demangling cache variable for type metadata for Any?);
  if (v41)
  {
    OUTLINED_FUNCTION_2();
    outlined destroy of Any?((uint64_t)v62, &demangling cache variable for type metadata for Any?);
LABEL_25:
    OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v61);
    OUTLINED_FUNCTION_32_19((uint64_t)v61);
LABEL_26:
    OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v60);
    OUTLINED_FUNCTION_32_19((uint64_t)v60);
LABEL_27:
    OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v59);
    OUTLINED_FUNCTION_32_19((uint64_t)v59);
LABEL_28:
    OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v58);
    OUTLINED_FUNCTION_32_19((uint64_t)v58);
LABEL_29:
    OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v57);
    OUTLINED_FUNCTION_32_19((uint64_t)v57);
LABEL_30:
    OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v56);
    OUTLINED_FUNCTION_32_19((uint64_t)v56);
LABEL_31:
    OUTLINED_FUNCTION_19_28((uint64_t)v63, (uint64_t)v55);
    OUTLINED_FUNCTION_32_19((uint64_t)v55);
    goto LABEL_15;
  }
  outlined init with take of Any?((uint64_t)v62, (uint64_t)v61, &demangling cache variable for type metadata for Any?);
  if (v61[3])
  {
    type metadata accessor for UsoTask_read_common_Person();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_release();
      goto LABEL_25;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v61, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v61);
  OUTLINED_FUNCTION_19_28((uint64_t)v61, (uint64_t)v60);
  if (v60[3])
  {
    type metadata accessor for UsoTask_request_common_Person();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_release();
      goto LABEL_26;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v60, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v60);
  OUTLINED_FUNCTION_19_28((uint64_t)v60, (uint64_t)v59);
  if (v59[3])
  {
    type metadata accessor for UsoTask_noVerb_common_Person();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_release();
      goto LABEL_27;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v59, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v59);
  OUTLINED_FUNCTION_19_28((uint64_t)v59, (uint64_t)v58);
  if (v58[3])
  {
    type metadata accessor for UsoTask_update_common_Person();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_release();
      goto LABEL_28;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v58, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v58);
  OUTLINED_FUNCTION_19_28((uint64_t)v58, (uint64_t)v57);
  if (v57[3])
  {
    type metadata accessor for UsoTask_create_common_Person();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_release();
      goto LABEL_29;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v57, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v57);
  OUTLINED_FUNCTION_19_28((uint64_t)v57, (uint64_t)v56);
  if (v56[3])
  {
    type metadata accessor for UsoTask_delete_common_Person();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_release();
      goto LABEL_30;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v56, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_12_34((uint64_t)v63, (uint64_t)v56);
  OUTLINED_FUNCTION_19_28((uint64_t)v56, (uint64_t)v55);
  if (v55[3])
  {
    type metadata accessor for UsoTask_checkExistence_common_Person();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
    {
      swift_release();
      goto LABEL_31;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v55, &demangling cache variable for type metadata for Any?);
  }
  OUTLINED_FUNCTION_19_28((uint64_t)v63, (uint64_t)v55);
  OUTLINED_FUNCTION_19_28((uint64_t)v55, (uint64_t)v54);
  if (v54[3])
  {
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    OUTLINED_FUNCTION_25_30();
    if ((OUTLINED_FUNCTION_10_34() & 1) != 0)
      swift_release();
  }
  else
  {
    outlined destroy of Any?((uint64_t)v54, &demangling cache variable for type metadata for Any?);
  }
LABEL_15:
  OUTLINED_FUNCTION_7();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v0 + 40));
  v1 = OUTLINED_FUNCTION_93_8();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for ContactsLabelCATContainer.LabelType();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError((unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType, (void (*)(uint64_t))MEMORY[0x24BE91C18]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  v0 = OUTLINED_FUNCTION_93_8();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x2207D806C](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type ContactsError and conformance ContactsError(&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType, (void (*)(uint64_t))MEMORY[0x24BE91C18]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

void outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_91_8(a1, a2, a3);
  OUTLINED_FUNCTION_102_8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  OUTLINED_FUNCTION_31_0();
}

void outlined init with take of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_91_8(a1, a2, a3);
  OUTLINED_FUNCTION_102_8(v3, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  OUTLINED_FUNCTION_31_0();
}

void lazy protocol witness table accessor for type ContactsError and conformance ContactsError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t v3;

  if (!*a1)
  {
    a2(255);
    v3 = OUTLINED_FUNCTION_93_8();
    atomic_store(MEMORY[0x2207D86A8](v3), a1);
  }
  OUTLINED_FUNCTION_31_0();
}

uint64_t OUTLINED_FUNCTION_7_36()
{
  return type metadata accessor for NLIntent();
}

uint64_t OUTLINED_FUNCTION_8_30()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_10_34()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_12_34(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with copy of Any?(a1, a2, v2);
}

void OUTLINED_FUNCTION_19_28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  outlined init with take of Any?(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_21_26()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t OUTLINED_FUNCTION_27_25(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_28_23()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_29_26()
{
  return type metadata accessor for USOParse();
}

void OUTLINED_FUNCTION_32_19(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of Any?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_36_17()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_38_17(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_42_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_54_15@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 96))(v1);
}

uint64_t OUTLINED_FUNCTION_56_15()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_58_11(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Any?(v2 - 112, a2);
}

uint64_t OUTLINED_FUNCTION_67_13()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_68_16()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_69_15(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_75_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_77_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 96))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_78_10@<X0>(uint64_t a1@<X8>)
{
  return USOParse.preferredUserDialogAct.getter(a1);
}

double OUTLINED_FUNCTION_80_9()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 112) = 0u;
  *(_OWORD *)(v0 - 96) = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_84_9(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_85_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_88_5@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_90_5()
{
  return type metadata accessor for Parse.DirectInvocation();
}

uint64_t OUTLINED_FUNCTION_91_8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return __swift_instantiateConcreteTypeFromMangledName(a3);
}

uint64_t OUTLINED_FUNCTION_92_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_93_8()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_94_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 96))(v2, v1);
}

BOOL OUTLINED_FUNCTION_96_6(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t OUTLINED_FUNCTION_98_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = a1;
  return v1 - 72;
}

uint64_t OUTLINED_FUNCTION_102_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_103_6()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_104_4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_105_5()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_106_6(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_107_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_108_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

unint64_t OUTLINED_FUNCTION_109_4(uint64_t a1, uint64_t a2)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_111_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

void OUTLINED_FUNCTION_114_2(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  outlined init with copy of Any?(v3 - 128, v3 - 160, a3);
}

uint64_t OUTLINED_FUNCTION_115_3()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_117_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, v1, v3);
}

uint64_t OUTLINED_FUNCTION_118@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

void protocol witness for SiriKitGetEntityIntent.contactRelation.getter in conformance GetContactIntent()
{
  void *v0;

  outlined bridged method (pb) of @objc Contact.namePrefix.getter(v0, (SEL *)&selRef_contactRelation);
}

uint64_t protocol witness for SiriKitGetEntityIntent.organizationName.getter in conformance GetContactIntent()
{
  void *v0;

  return outlined bridged method (pb) of @objc GetContactIntent.organizationName.getter(v0);
}

uint64_t protocol witness for SiriKitGetEntityIntent.fullName.getter in conformance GetContactIntent()
{
  void *v0;

  return outlined bridged method (pb) of @objc GetContactIntent.fullName.getter(v0);
}

uint64_t protocol witness for SiriKitGetEntityIntent.phoneNumber.getter in conformance GetContactIntent()
{
  void *v0;

  return outlined bridged method (pb) of @objc GetContactIntent.phoneNumber.getter(v0);
}

void protocol witness for SiriKitGetEntityIntent.phoneNumber.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  protocol witness for SiriKitGetEntityIntent.phoneNumber.setter in conformance GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setPhoneNumber_, a6, a7, a8);
}

void protocol witness for SiriKitGetEntityIntent.phoneNumber.modify in conformance GetContactIntent()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_5_31();
  v2 = (uint64_t *)OUTLINED_FUNCTION_18_27((uint64_t)v1);
  GetContactIntent.phoneNumber.modify(v2);
  *(_QWORD *)(v0 + 32) = v3;
  OUTLINED_FUNCTION_22_6();
}

void GetContactIntent.phoneNumber.modify(uint64_t *a1)
{
  void *v1;
  uint64_t v3;

  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc GetContactIntent.phoneNumber.getter(v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

void GetContactIntent.phoneNumber.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  GetContactIntent.phoneNumber.modify(a1, a2, (SEL *)&selRef_setPhoneNumber_, a4, a5, a6, a7, a8);
}

uint64_t protocol witness for SiriKitGetEntityIntent.emailAddress.getter in conformance GetContactIntent()
{
  void *v0;

  return outlined bridged method (pb) of @objc GetContactIntent.emailAddress.getter(v0);
}

void protocol witness for SiriKitGetEntityIntent.emailAddress.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  protocol witness for SiriKitGetEntityIntent.phoneNumber.setter in conformance GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setEmailAddress_, a6, a7, a8);
}

void protocol witness for SiriKitGetEntityIntent.emailAddress.modify in conformance GetContactIntent()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_5_31();
  v2 = (uint64_t *)OUTLINED_FUNCTION_18_27((uint64_t)v1);
  GetContactIntent.emailAddress.modify(v2);
  *(_QWORD *)(v0 + 32) = v3;
  OUTLINED_FUNCTION_22_6();
}

void GetContactIntent.emailAddress.modify(uint64_t *a1)
{
  void *v1;
  uint64_t v3;

  a1[2] = (uint64_t)v1;
  *a1 = outlined bridged method (pb) of @objc GetContactIntent.emailAddress.getter(v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

void GetContactIntent.emailAddress.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  GetContactIntent.phoneNumber.modify(a1, a2, (SEL *)&selRef_setEmailAddress_, a4, a5, a6, a7, a8);
}

void protocol witness for SiriKitGetEntityIntent.siriMatches.getter in conformance GetContactIntent()
{
  void *v0;

  outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(v0);
}

void protocol witness for SiriKitGetEntityIntent.siriMatches.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v9;
  NSArray v10;
  id v11;

  if (a1)
  {
    OUTLINED_FUNCTION_97_4();
    v10.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v10.super.isa = 0;
  }
  OUTLINED_FUNCTION_10_35(v8, sel_setSiriMatches_, a3, a4, a5, a6, a7, a8, v9, (uint64_t)v10.super.isa);
  OUTLINED_FUNCTION_9_32(v11);
}

void protocol witness for SiriKitGetEntityIntent.siriMatches.modify in conformance GetContactIntent()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_5_31();
  v2 = (_QWORD *)OUTLINED_FUNCTION_18_27((uint64_t)v1);
  GetContactIntent.siriMatches.modify(v2);
  *(_QWORD *)(v0 + 32) = v3;
  OUTLINED_FUNCTION_22_6();
}

void GetContactIntent.siriMatches.modify(_QWORD *a1)
{
  void *v1;
  uint64_t v3;

  a1[1] = v1;
  outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(v1);
  *a1 = v3;
  OUTLINED_FUNCTION_31_0();
}

void GetContactIntent.siriMatches.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v9 = *a1;
  if ((a2 & 1) != 0)
  {
    if (v9)
    {
      OUTLINED_FUNCTION_97_4();
      swift_bridgeObjectRetain();
      Array._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_21_27();
    }
    else
    {
      v11 = 0;
    }
    OUTLINED_FUNCTION_10_35((id)a1[1], sel_setSiriMatches_, a3, a4, a5, a6, a7, a8, v10, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v9)
    {
      OUTLINED_FUNCTION_97_4();
      Array._bridgeToObjectiveC()();
      OUTLINED_FUNCTION_21_27();
    }
    else
    {
      v11 = 0;
    }
    OUTLINED_FUNCTION_10_35((id)a1[1], sel_setSiriMatches_, a3, a4, a5, a6, a7, a8, v10, v11);
  }
  OUTLINED_FUNCTION_3_12(v12);
}

void protocol witness for SiriKitGetEntityIntent.contactIdentifier.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  protocol witness for SiriKitGetEntityIntent.phoneNumber.setter in conformance GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setContactIdentifier_, a6, a7, a8);
}

void protocol witness for SiriKitGetEntityIntent.phoneNumber.setter in conformance GetContactIntent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  uint64_t v10;
  uint64_t v11;
  id v12;

  if (a2)
  {
    v11 = MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_55_1();
  }
  else
  {
    v11 = 0;
  }
  OUTLINED_FUNCTION_10_35(v8, *a5, a3, a4, (uint64_t)a5, a6, a7, a8, v10, v11);
  OUTLINED_FUNCTION_3_12(v12);
}

void protocol witness for SiriKitGetEntityIntent.contactIdentifier.modify in conformance GetContactIntent()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_5_31();
  v2 = (_QWORD *)OUTLINED_FUNCTION_18_27((uint64_t)v1);
  GetContactIntent.contactIdentifier.modify(v2);
  *(_QWORD *)(v0 + 32) = v3;
  OUTLINED_FUNCTION_22_6();
}

void GetContactIntent.contactIdentifier.modify(_QWORD *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;

  a1[2] = v1;
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(v1, (SEL *)&selRef_contactIdentifier);
  *a1 = v3;
  a1[1] = v4;
  OUTLINED_FUNCTION_31_0();
}

void GetContactIntent.contactIdentifier.modify(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  GetContactIntent.phoneNumber.modify(a1, a2, (SEL *)&selRef_setContactIdentifier_, a4, a5, a6, a7, a8);
}

void GetContactIntent.phoneNumber.modify(uint64_t *a1, char a2, SEL *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  v10 = a1[1];
  if ((a2 & 1) != 0)
  {
    if (v10)
    {
      v11 = *a1;
      swift_bridgeObjectRetain();
      v19 = MEMORY[0x2207D7CB8](v11, v10);
      OUTLINED_FUNCTION_55_1();
    }
    else
    {
      v19 = 0;
    }
    OUTLINED_FUNCTION_10_35((id)a1[2], *a3, (uint64_t)a3, a4, a5, a6, a7, a8, v18, v19);
    OUTLINED_FUNCTION_55_1();
  }
  else if (v10)
  {
    v20 = MEMORY[0x2207D7CB8](*a1, v10);
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_10_35((id)a1[2], *a3, v12, v13, v14, v15, v16, v17, v18, v20);
  }
  else
  {
    OUTLINED_FUNCTION_10_35((id)a1[2], *a3, (uint64_t)a3, a4, a5, a6, a7, a8, v18, 0);
  }
  OUTLINED_FUNCTION_3_12(v21);
}

id protocol witness for SiriKitContactIntent.isMe.getter in conformance GetContactIntent()
{
  void *v0;

  return objc_msgSend(v0, sel_isMe);
}

void protocol witness for SiriKitContactIntent.contactIdentifier.getter in conformance GetContactIntent()
{
  void *v0;

  outlined bridged method (pb) of @objc Contact.namePrefix.getter(v0, (SEL *)&selRef_contactIdentifier);
}

void GetContactIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_7_37();
  GetContactIntentResponse.init(code:userActivity:)(a1, a2);
  OUTLINED_FUNCTION_22_6();
}

uint64_t protocol witness for SiriKitGetEntityIntentResponse.contactIdentifiers.getter in conformance GetContactIntentResponse()
{
  void *v0;

  return outlined bridged method (pb) of @objc GetContactIntentResponse.contactIdentifiers.getter(v0);
}

id GetContactIntent.__allocating_init()()
{
  return objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_init);
}

id key path getter for GetContactIntent.isMe : GetContactIntent@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isMe);
  *a2 = result;
  return result;
}

void key path getter for GetContactIntent.firstName : GetContactIntent(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend(*a1, *a2);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void key path setter for GetContactIntent.firstName : GetContactIntent(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  uint64_t v7;
  void *v8;

  v6 = *a2;
  if (a1[1])
    v7 = MEMORY[0x2207D7CB8](*a1);
  else
    v7 = 0;
  v8 = (void *)v7;
  objc_msgSend(v6, *a5);
  OUTLINED_FUNCTION_9_32(v8);
}

void key path getter for GetContactIntent.siriMatches : GetContactIntent(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, sel_siriMatches);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for SiriMatch();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void key path setter for GetContactIntent.siriMatches : GetContactIntent(_QWORD *a1, void **a2)
{
  void *v2;
  NSArray v3;
  Class isa;

  v2 = *a2;
  if (*a1)
  {
    type metadata accessor for SiriMatch();
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.isa = 0;
  }
  isa = v3.super.isa;
  objc_msgSend(v2, sel_setSiriMatches_);

}

id GetContactIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

void GetContactIntent.__allocating_init(coder:)()
{
  id v0;

  v0 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v0, sel_initWithCoder_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_31_0();
}

void GetContactIntent.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for GetContactIntent();
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void GetContactIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  OUTLINED_FUNCTION_22_6();
}

void GetContactIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v5;
  objc_super v6;

  if (a2)
  {
    v5 = (void *)MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v5 = 0;
  }
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for GetContactIntent();
  objc_msgSendSuper2(&v6, sel_initWithIdentifier_backingStore_, v5, a3);

  OUTLINED_FUNCTION_24_19();
}

void GetContactIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FECC98C()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

uint64_t sub_21FECC994()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSDictionary v4;

  OUTLINED_FUNCTION_19_29();
  if (v3)
  {
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v4.super.isa = 0;
  }
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithDomain_verb_parametersByName_, v0, v2, v4.super.isa);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void GetContactIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FECCA2C()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

void *sub_21FECCA34()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  NSDictionary v4;
  objc_super v6;

  OUTLINED_FUNCTION_19_29();
  if (v3)
  {
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v4.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for GetContactIntent();
  objc_msgSendSuper2(&v6, sel_initWithDomain_verb_parametersByName_, v0, v2, v4.super.isa);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

id GetContactIntent.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactIntent);
}

unint64_t GetContactIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GetContactIntentResponseCode(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetContactIntentResponseCode()
{
  _QWORD *v0;

  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance GetContactIntentResponseCode(int a1)
{
  Swift::UInt *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetContactIntentResponseCode(uint64_t a1)
{
  _QWORD *v1;

  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = GetContactIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void key path getter for GetContactIntentResponse.contactIdentifiers : GetContactIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, sel_contactIdentifiers);
  if (v3)
  {
    v4 = v3;
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void key path setter for GetContactIntentResponse.contactIdentifiers : GetContactIntentResponse(_QWORD *a1, void **a2)
{
  void *v2;
  NSArray v3;
  Class isa;

  v2 = *a2;
  if (*a1)
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v3.super.isa = 0;
  isa = v3.super.isa;
  objc_msgSend(v2, sel_setContactIdentifiers_);

}

uint64_t GetContactIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___GetContactIntentResponse_code;
  OUTLINED_FUNCTION_7_32();
  return *(_QWORD *)v1;
}

uint64_t GetContactIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___GetContactIntentResponse_code);
  result = OUTLINED_FUNCTION_7_32();
  *v3 = a1;
  return result;
}

char *GetContactIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;

  v5 = (char *)objc_msgSend(v2, sel_init);
  v6 = &v5[OBJC_IVAR___GetContactIntentResponse_code];
  OUTLINED_FUNCTION_7_32();
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

uint64_t type metadata accessor for GetContactIntent()
{
  return objc_opt_self();
}

id GetContactIntentResponse.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)OUTLINED_FUNCTION_23_29(OBJC_IVAR___GetContactIntentResponse_code);
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for GetContactIntentResponse()
{
  return objc_opt_self();
}

void GetContactIntentResponse.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_23_29(OBJC_IVAR___GetContactIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void GetContactIntentResponse.__allocating_init(backingStore:)()
{
  id v0;

  v0 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v0, sel_initWithBackingStore_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_31_0();
}

void GetContactIntentResponse.init(backingStore:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_23_29(OBJC_IVAR___GetContactIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithBackingStore_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void GetContactIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v1;

  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_55_1();
  }
  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithPropertiesByName_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_22_6();
}

void GetContactIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR___GetContactIntentResponse_code] = 0;
  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_55_1();
  }
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for GetContactIntentResponse();
  v8 = OUTLINED_FUNCTION_8_31((uint64_t)v9.super_class, sel_initWithPropertiesByName_, v2, v3, v4, v5, v6, v7, v9);
  OUTLINED_FUNCTION_26_0();
  if (v1)

  OUTLINED_FUNCTION_24_19();
}

id GetContactIntentResponse.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactIntentResponse);
}

uint64_t GetContactSiriMatchesUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 8) < 0xFFFFFFFFFFFFFFF9)
    return 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactSiriMatchesUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = GetContactSiriMatchesUnsupportedReason.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetContactSiriMatchesUnsupportedReason(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

id static GetContactSiriMatchesResolutionResult.unsupported(forReason:)()
{
  void *ObjCClassFromMetadata;

  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  return OUTLINED_FUNCTION_46_2(ObjCClassFromMetadata, sel_unsupportedWithReason_);
}

void GetContactSiriMatchesResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v3;
  Class isa;

  v3 = OUTLINED_FUNCTION_7_37();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_55_1();
  objc_msgSend(v3, sel_initWithJSONDictionary_forIntent_, isa, a2);

  OUTLINED_FUNCTION_22_6();
}

void GetContactSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  Class isa;
  id v5;
  objc_super v6;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_55_1();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for GetContactSiriMatchesResolutionResult();
  objc_msgSendSuper2(&v6, sel_initWithJSONDictionary_forIntent_, isa, a2);
  OUTLINED_FUNCTION_26_0();
  v5 = v2;

  if (v5)
  OUTLINED_FUNCTION_24_19();
}

uint64_t type metadata accessor for GetContactSiriMatchesResolutionResult()
{
  return objc_opt_self();
}

id GetContactSiriMatchesResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactSiriMatchesResolutionResult);
}

id GetContactIntent.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for GetContactIntentResponseCode, &type metadata for GetContactIntentResponseCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactIntentResponseCode and conformance GetContactIntentResponseCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason;
  if (!lazy protocol witness table cache variable for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for GetContactSiriMatchesUnsupportedReason, &type metadata for GetContactSiriMatchesUnsupportedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactSiriMatchesUnsupportedReason and conformance GetContactSiriMatchesUnsupportedReason);
  }
  return result;
}

char *keypath_get_selector_isMe()
{
  return sel_isMe;
}

id sub_21FECD414(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIsMe_, *a1);
}

char *keypath_get_selector_firstName()
{
  return sel_firstName;
}

void sub_21FECD434(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_firstName, a2);
}

void sub_21FECD450(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setFirstName_);
}

char *keypath_get_selector_nickName()
{
  return sel_nickName;
}

void sub_21FECD478(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_nickName, a2);
}

void sub_21FECD494(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setNickName_);
}

char *keypath_get_selector_lastName()
{
  return sel_lastName;
}

void sub_21FECD4BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_lastName, a2);
}

void sub_21FECD4D8(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setLastName_);
}

char *keypath_get_selector_middleName()
{
  return sel_middleName;
}

void sub_21FECD500(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_middleName, a2);
}

void sub_21FECD51C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setMiddleName_);
}

char *keypath_get_selector_organizationName()
{
  return sel_organizationName;
}

void sub_21FECD544(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_organizationName, a2);
}

void sub_21FECD560(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setOrganizationName_);
}

char *keypath_get_selector_contactIdentifier()
{
  return sel_contactIdentifier;
}

void sub_21FECD588(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_contactIdentifier, a2);
}

void sub_21FECD5A4(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setContactIdentifier_);
}

char *keypath_get_selector_contactRelation()
{
  return sel_contactRelation;
}

void sub_21FECD5CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_contactRelation, a2);
}

void sub_21FECD5E8(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setContactRelation_);
}

char *keypath_get_selector_fullName()
{
  return sel_fullName;
}

void sub_21FECD610(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_fullName, a2);
}

void sub_21FECD62C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setFullName_);
}

char *keypath_get_selector_phoneNumber()
{
  return sel_phoneNumber;
}

void sub_21FECD654(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_phoneNumber, a2);
}

void sub_21FECD670(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setPhoneNumber_);
}

char *keypath_get_selector_emailAddress()
{
  return sel_emailAddress;
}

void sub_21FECD698(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_emailAddress, a2);
}

void sub_21FECD6B4(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for GetContactIntent.firstName : GetContactIntent(a1, a2, a3, a4, (SEL *)&selRef_setEmailAddress_);
}

char *keypath_get_selector_siriMatches()
{
  return sel_siriMatches;
}

char *keypath_get_selector_contactIdentifiers()
{
  return sel_contactIdentifiers;
}

uint64_t sub_21FECD6F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GetContactIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21FECD720(uint64_t *a1)
{
  return GetContactIntentResponse.code.setter(*a1);
}

ValueMetadata *type metadata accessor for GetContactIntentResponseCode()
{
  return &type metadata for GetContactIntentResponseCode;
}

uint64_t method lookup function for GetContactIntentResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GetContactIntentResponse.code.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

ValueMetadata *type metadata accessor for GetContactSiriMatchesUnsupportedReason()
{
  return &type metadata for GetContactSiriMatchesUnsupportedReason;
}

uint64_t method lookup function for GetContactSiriMatchesResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static GetContactSiriMatchesResolutionResult.unsupported(forReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_contactRelation);
}

void outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_contactIdentifier);
}

void outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(void *a1)
{
  if (objc_msgSend(a1, sel_siriMatches))
  {
    OUTLINED_FUNCTION_97_4();
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_26_0();
  }
  OUTLINED_FUNCTION_31_0();
}

uint64_t outlined bridged method (pb) of @objc GetContactIntentResponse.contactIdentifiers.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_contactIdentifiers);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void *OUTLINED_FUNCTION_5_31()
{
  return malloc(0x28uLL);
}

id OUTLINED_FUNCTION_7_37()
{
  objc_class *v0;

  return objc_allocWithZone(v0);
}

id OUTLINED_FUNCTION_8_31(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;

  return objc_msgSendSuper2(&a9, a2, v9);
}

void OUTLINED_FUNCTION_9_32(id a1)
{

}

id OUTLINED_FUNCTION_10_35(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return objc_msgSend(a1, a2, a10);
}

void OUTLINED_FUNCTION_12_35()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_18_27(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_19_29()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_20_25()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_21_27()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_22_20()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_23_29@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + a1) = 0;
  return type metadata accessor for GetContactIntentResponse();
}

void protocol witness for SiriKitGetEntityIntent.phoneNumber.modify in conformance GetContactAttributeIntent()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_5_31();
  v2 = (uint64_t *)OUTLINED_FUNCTION_18_27((uint64_t)v1);
  GetContactIntent.phoneNumber.modify(v2);
  *(_QWORD *)(v0 + 32) = v3;
  OUTLINED_FUNCTION_22_6();
}

void protocol witness for SiriKitGetEntityIntent.emailAddress.modify in conformance GetContactAttributeIntent()
{
  uint64_t v0;
  void *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = OUTLINED_FUNCTION_5_31();
  v2 = (uint64_t *)OUTLINED_FUNCTION_18_27((uint64_t)v1);
  GetContactIntent.emailAddress.modify(v2);
  *(_QWORD *)(v0 + 32) = v3;
  OUTLINED_FUNCTION_22_6();
}

void GetContactAttributeIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_7_37();
  GetContactAttributeIntentResponse.init(code:userActivity:)(a1, a2);
  OUTLINED_FUNCTION_22_6();
}

uint64_t GetContactAttributeContactAttributeToGetUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 4) < 0xFFFFFFFFFFFFFFFDLL)
    return 0;
  return result;
}

id GetContactAttributeIntent.__allocating_init()()
{
  return objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_init);
}

id key path getter for GetContactAttributeIntent.contactAttributeToGet : GetContactAttributeIntent@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_contactAttributeToGet);
  *a2 = result;
  return result;
}

void key path getter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(id *a1, uint64_t a2, uint64_t a3, SEL *a4, void (*a5)(_QWORD))
{
  uint64_t *v5;
  id v7;
  void *v8;
  uint64_t v9;

  v7 = OUTLINED_FUNCTION_15_29(a1, a2, a3, a4);
  if (v7)
  {
    v8 = v7;
    a5(0);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v9 = 0;
  }
  *v5 = v9;
  OUTLINED_FUNCTION_22_6();
}

void key path setter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(_QWORD *a1, int a2, uint64_t a3, int a4, void (*a5)(_QWORD), int a6, int a7, int a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  if (*a1)
  {
    a5(0);
    LODWORD(a1) = Array._bridgeToObjectiveC()().super.isa;
    v8 = (int)a1;
  }
  else
  {
    v8 = 0;
  }
  OUTLINED_FUNCTION_14_33((int)a1, a2, v8, a4, (int)a5, a6, a7, a8, v9, v10);
  OUTLINED_FUNCTION_3_12(v11);
}

id GetContactAttributeIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactAttributeIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

void GetContactAttributeIntent.__allocating_init(coder:)()
{
  id v0;

  v0 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v0, sel_initWithCoder_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_31_0();
}

void GetContactAttributeIntent.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for GetContactAttributeIntent();
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void GetContactAttributeIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  OUTLINED_FUNCTION_22_6();
}

void GetContactAttributeIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v5;
  objc_super v6;

  if (a2)
  {
    v5 = (void *)MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v5 = 0;
  }
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for GetContactAttributeIntent();
  objc_msgSendSuper2(&v6, sel_initWithIdentifier_backingStore_, v5, a3);

  OUTLINED_FUNCTION_24_19();
}

void GetContactAttributeIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FECDCCC()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

uint64_t sub_21FECDCD4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSDictionary v4;

  OUTLINED_FUNCTION_19_29();
  if (v3)
  {
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v4.super.isa = 0;
  }
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithDomain_verb_parametersByName_, v0, v2, v4.super.isa);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void GetContactAttributeIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FECDD6C()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

void sub_21FECDD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSDictionary v13;
  objc_class *ContactAttributeIntent;

  OUTLINED_FUNCTION_19_29();
  if (v12)
  {
    v13.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v13.super.isa = 0;
  }
  ContactAttributeIntent = (objc_class *)type metadata accessor for GetContactAttributeIntent();
  a9.receiver = v10;
  a9.super_class = ContactAttributeIntent;
  objc_msgSendSuper2(&a9, sel_initWithDomain_verb_parametersByName_, v9, v11, v13.super.isa);
  OUTLINED_FUNCTION_26_0();

  OUTLINED_FUNCTION_13_38();
}

id GetContactAttributeIntent.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeIntent);
}

unint64_t GetContactAttributeIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = GetContactAttributeIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = OUTLINED_FUNCTION_15_29(a1, a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  *v4 = v7;
  v4[1] = v9;
  OUTLINED_FUNCTION_22_6();
}

void key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v8 = a1[1];
  if (v8)
  {
    LODWORD(a1) = MEMORY[0x2207D7CB8](*a1);
    v9 = (int)a1;
  }
  else
  {
    v9 = 0;
  }
  OUTLINED_FUNCTION_14_33((int)a1, v8, v9, a4, a5, a6, a7, a8, v10, v11);
  OUTLINED_FUNCTION_9_32(v12);
}

uint64_t GetContactAttributeIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___GetContactAttributeIntentResponse_code;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t GetContactAttributeIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___GetContactAttributeIntentResponse_code);
  result = OUTLINED_FUNCTION_27_26();
  *v3 = a1;
  return result;
}

char *GetContactAttributeIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;

  v5 = (char *)objc_msgSend(v2, sel_init);
  v6 = &v5[OBJC_IVAR___GetContactAttributeIntentResponse_code];
  OUTLINED_FUNCTION_27_26();
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

uint64_t type metadata accessor for GetContactAttributeIntent()
{
  return objc_opt_self();
}

id GetContactAttributeIntentResponse.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)OUTLINED_FUNCTION_21_28(OBJC_IVAR___GetContactAttributeIntentResponse_code);
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for GetContactAttributeIntentResponse()
{
  return objc_opt_self();
}

void GetContactAttributeIntentResponse.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_21_28(OBJC_IVAR___GetContactAttributeIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void GetContactAttributeIntentResponse.__allocating_init(backingStore:)()
{
  id v0;

  v0 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v0, sel_initWithBackingStore_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_31_0();
}

void GetContactAttributeIntentResponse.init(backingStore:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_21_28(OBJC_IVAR___GetContactAttributeIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithBackingStore_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void GetContactAttributeIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v1;

  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_55_1();
  }
  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithPropertiesByName_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_22_6();
}

void GetContactAttributeIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR___GetContactAttributeIntentResponse_code] = 0;
  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_55_1();
  }
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for GetContactAttributeIntentResponse();
  v8 = OUTLINED_FUNCTION_8_31((uint64_t)v9.super_class, sel_initWithPropertiesByName_, v2, v3, v4, v5, v6, v7, v9);
  OUTLINED_FUNCTION_26_0();
  if (v1)

  OUTLINED_FUNCTION_24_19();
}

id GetContactAttributeIntentResponse.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeIntentResponse);
}

uint64_t GetContactAttributeSiriMatchesUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 8) < 0xFFFFFFFFFFFFFFF9)
    return 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeSiriMatchesUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = GetContactAttributeSiriMatchesUnsupportedReason.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for GetContactAttributeSiriMatchesResolutionResult);
}

uint64_t type metadata accessor for GetContactAttributeSiriMatchesResolutionResult()
{
  return objc_opt_self();
}

id GetContactAttributeSiriMatchesResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeSiriMatchesResolutionResult);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeContactAttributeToGetUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = GetContactAttributeContactAttributeToGetUnsupportedReason.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void GetContactAttributeSiriMatchesResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v3;
  Class isa;

  v3 = OUTLINED_FUNCTION_7_37();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_55_1();
  objc_msgSend(v3, sel_initWithJSONDictionary_forIntent_, isa, a2);

  OUTLINED_FUNCTION_22_6();
}

void GetContactAttributeContactAttributeToGetResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult);
}

void GetContactAttributeSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  void *v3;
  Class isa;
  uint64_t v7;
  id v8;
  id v9;
  objc_super v10;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v7 = OUTLINED_FUNCTION_167();
  v10.receiver = v3;
  v10.super_class = (Class)a3(v7);
  v8 = objc_msgSendSuper2(&v10, sel_initWithJSONDictionary_forIntent_, isa, a2);

  v9 = v8;
  if (v9)

  OUTLINED_FUNCTION_13_38();
}

uint64_t type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult()
{
  return objc_opt_self();
}

id GetContactAttributeContactAttributeToGetResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult);
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for GetContactAttributeIntentResponseCode, &type metadata for GetContactAttributeIntentResponseCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeIntentResponseCode and conformance GetContactAttributeIntentResponseCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason;
  if (!lazy protocol witness table cache variable for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for GetContactAttributeSiriMatchesUnsupportedReason, &type metadata for GetContactAttributeSiriMatchesUnsupportedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeSiriMatchesUnsupportedReason and conformance GetContactAttributeSiriMatchesUnsupportedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason;
  if (!lazy protocol witness table cache variable for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for GetContactAttributeContactAttributeToGetUnsupportedReason, &type metadata for GetContactAttributeContactAttributeToGetUnsupportedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeContactAttributeToGetUnsupportedReason and conformance GetContactAttributeContactAttributeToGetUnsupportedReason);
  }
  return result;
}

id sub_21FECE7A8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIsMe_, *a1);
}

void sub_21FECE7BC(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_firstName);
}

void sub_21FECE7D8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setFirstName_, a6, a7, a8);
}

void sub_21FECE7F4(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_nickName);
}

void sub_21FECE810(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setNickName_, a6, a7, a8);
}

void sub_21FECE82C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_lastName);
}

void sub_21FECE848(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setLastName_, a6, a7, a8);
}

void sub_21FECE864(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_middleName);
}

void sub_21FECE880(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setMiddleName_, a6, a7, a8);
}

void sub_21FECE89C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_organizationName);
}

void sub_21FECE8B8(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setOrganizationName_, a6, a7, a8);
}

void sub_21FECE8D4(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_contactIdentifier);
}

void sub_21FECE8F0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setContactIdentifier_, a6, a7, a8);
}

void sub_21FECE90C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_contactRelation);
}

void sub_21FECE928(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setContactRelation_, a6, a7, a8);
}

void sub_21FECE944(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_fullName);
}

void sub_21FECE960(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setFullName_, a6, a7, a8);
}

void sub_21FECE97C(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_phoneNumber);
}

void sub_21FECE998(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setPhoneNumber_, a6, a7, a8);
}

void sub_21FECE9B4(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_emailAddress);
}

void sub_21FECE9D0(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setEmailAddress_, a6, a7, a8);
}

void sub_21FECE9EC(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_siriMatches, (void (*)(_QWORD))type metadata accessor for SiriMatch);
}

void sub_21FECEA10(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for SiriMatch, (int)&selRef_setSiriMatches_, a7, a8);
}

char *keypath_get_selector_contactAttributeToGet()
{
  return sel_contactAttributeToGet;
}

id sub_21FECEA44(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactAttributeToGet_, *a1);
}

char *keypath_get_selector_contactHandleMatches()
{
  return sel_contactHandleMatches;
}

void sub_21FECEA64(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_contactHandleMatches, (void (*)(_QWORD))type metadata accessor for ContactAttribute);
}

void sub_21FECEA88(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for ContactAttribute, (int)&selRef_setContactHandleMatches_, a7, a8);
}

char *keypath_get_selector_contactHandleAlternatives()
{
  return sel_contactHandleAlternatives;
}

void sub_21FECEAB8(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_contactHandleAlternatives, (void (*)(_QWORD))type metadata accessor for ContactAttribute);
}

void sub_21FECEADC(_QWORD *a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.siriMatches : GetContactAttributeIntent(a1, a2, a3, a4, (void (*)(_QWORD))type metadata accessor for ContactAttribute, (int)&selRef_setContactHandleAlternatives_, a7, a8);
}

char *keypath_get_selector_property()
{
  return sel_property;
}

void sub_21FECEB14(id *a1, uint64_t a2, uint64_t a3)
{
  key path getter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, (SEL *)&selRef_property);
}

void sub_21FECEB30(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  key path setter for GetContactAttributeIntent.firstName : GetContactAttributeIntent(a1, a2, a3, a4, (int)&selRef_setProperty_, a6, a7, a8);
}

uint64_t sub_21FECEB4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = GetContactAttributeIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21FECEB74(uint64_t *a1)
{
  return GetContactAttributeIntentResponse.code.setter(*a1);
}

void type metadata accessor for GetContactAttributeIntentResponseCode()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t method lookup function for GetContactAttributeIntentResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GetContactAttributeIntentResponse.code.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

void type metadata accessor for GetContactAttributeSiriMatchesUnsupportedReason()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t method lookup function for GetContactAttributeSiriMatchesResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for GetContactAttributeContactAttributeToGetUnsupportedReason()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t method lookup function for GetContactAttributeContactAttributeToGetResolutionResult()
{
  return swift_lookUpClassMethod();
}

id OUTLINED_FUNCTION_14_33(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  SEL *v10;
  void *v11;

  return objc_msgSend(v11, *v10);
}

id OUTLINED_FUNCTION_15_29(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  return objc_msgSend(*a1, *a4);
}

uint64_t OUTLINED_FUNCTION_21_28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + a1) = 0;
  return type metadata accessor for GetContactAttributeIntentResponse();
}

uint64_t OUTLINED_FUNCTION_27_26()
{
  return swift_beginAccess();
}

uint64_t ModifyContactAttributeModifyNickNameUnsupportedReason.init(rawValue:)(uint64_t a1)
{
  uint64_t v1;

  if (a1 == 2)
    v1 = 2;
  else
    v1 = 0;
  if (a1 == 1)
    return 1;
  else
    return v1;
}

void ModifyContactAttributeIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_7_37();
  ModifyContactAttributeIntentResponse.init(code:userActivity:)(a1, a2);
  OUTLINED_FUNCTION_22_6();
}

id ModifyContactAttributeIntent.__allocating_init()()
{
  return objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_init);
}

void key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  void *v6;
  uint64_t v7;
  id v8;

  v6 = *a2;
  if (a1[1])
    v7 = MEMORY[0x2207D7CB8](*a1);
  else
    v7 = 0;
  v8 = (id)v7;
  objc_msgSend(v6, *a5);

}

void key path getter for ModifyContactAttributeIntent.relatedSiriMatches : ModifyContactAttributeIntent(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, sel_relatedSiriMatches);
  if (v3)
  {
    v4 = v3;
    type metadata accessor for SiriMatch();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void key path setter for ModifyContactAttributeIntent.relatedSiriMatches : ModifyContactAttributeIntent(_QWORD *a1, void **a2)
{
  void *v2;
  NSArray v3;
  Class isa;

  v2 = *a2;
  if (*a1)
  {
    type metadata accessor for SiriMatch();
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.isa = 0;
  }
  isa = v3.super.isa;
  objc_msgSend(v2, sel_setRelatedSiriMatches_);

}

id key path getter for ModifyContactAttributeIntent.relatedContact : ModifyContactAttributeIntent@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_relatedContact);
  *a2 = result;
  return result;
}

id ModifyContactAttributeIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModifyContactAttributeIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t ModifyContactAttributeIntent.__allocating_init(coder:)()
{
  uint64_t v0;
  id v1;

  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithCoder_);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

void ModifyContactAttributeIntent.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for ModifyContactAttributeIntent();
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void ModifyContactAttributeIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x2207D7CB8]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  OUTLINED_FUNCTION_22_6();
}

void ModifyContactAttributeIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v5;
  objc_super v6;

  if (a2)
  {
    v5 = (void *)MEMORY[0x2207D7CB8]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for ModifyContactAttributeIntent();
  objc_msgSendSuper2(&v6, sel_initWithIdentifier_backingStore_, v5, a3);

  OUTLINED_FUNCTION_24_19();
}

void ModifyContactAttributeIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FECF06C()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

uint64_t sub_21FECF074()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;

  OUTLINED_FUNCTION_19_29();
  if (v3)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_4_21();
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithDomain_verb_parametersByName_, v0, v2, v4);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void ModifyContactAttributeIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FECF108()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

void sub_21FECF110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  objc_class *v14;

  OUTLINED_FUNCTION_19_29();
  if (v12)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_4_21();
  }
  else
  {
    v13 = 0;
  }
  v14 = (objc_class *)type metadata accessor for ModifyContactAttributeIntent();
  a9.receiver = v10;
  a9.super_class = v14;
  objc_msgSendSuper2(&a9, sel_initWithDomain_verb_parametersByName_, v9, v11, v13);
  OUTLINED_FUNCTION_26_0();

  OUTLINED_FUNCTION_13_38();
}

id ModifyContactAttributeIntent.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeIntent);
}

unint64_t ModifyContactAttributeIntentResponseCode.init(rawValue:)(unint64_t result)
{
  uint64_t v1;

  if (result == 100)
    v1 = 100;
  else
    v1 = 0;
  if (result >= 7)
    return v1;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = ModifyContactAttributeIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id key path getter for ModifyContactAttributeIntentResponse.updatedRelationship : ModifyContactAttributeIntentResponse@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_updatedRelationship);
  *a2 = result;
  return result;
}

uint64_t ModifyContactAttributeIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___ModifyContactAttributeIntentResponse_code;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t ModifyContactAttributeIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___ModifyContactAttributeIntentResponse_code);
  result = OUTLINED_FUNCTION_27_26();
  *v3 = a1;
  return result;
}

char *ModifyContactAttributeIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;

  v5 = (char *)objc_msgSend(v2, sel_init);
  v6 = &v5[OBJC_IVAR___ModifyContactAttributeIntentResponse_code];
  OUTLINED_FUNCTION_27_26();
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

uint64_t type metadata accessor for ModifyContactAttributeIntent()
{
  return objc_opt_self();
}

id ModifyContactAttributeIntentResponse.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)OUTLINED_FUNCTION_12_36(OBJC_IVAR___ModifyContactAttributeIntentResponse_code);
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for ModifyContactAttributeIntentResponse()
{
  return objc_opt_self();
}

void ModifyContactAttributeIntentResponse.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_12_36(OBJC_IVAR___ModifyContactAttributeIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

uint64_t ModifyContactAttributeIntentResponse.__allocating_init(backingStore:)()
{
  uint64_t v0;
  id v1;

  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithBackingStore_);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

void ModifyContactAttributeIntentResponse.init(backingStore:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_12_36(OBJC_IVAR___ModifyContactAttributeIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithBackingStore_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void ModifyContactAttributeIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v1;

  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_55_1();
  }
  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithPropertiesByName_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_22_6();
}

void ModifyContactAttributeIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR___ModifyContactAttributeIntentResponse_code] = 0;
  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_55_1();
  }
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for ModifyContactAttributeIntentResponse();
  v8 = OUTLINED_FUNCTION_8_31((uint64_t)v9.super_class, sel_initWithPropertiesByName_, v2, v3, v4, v5, v6, v7, v9);
  OUTLINED_FUNCTION_26_0();
  if (v1)

  OUTLINED_FUNCTION_24_19();
}

id ModifyContactAttributeIntentResponse.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeIntentResponse);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeModifyNickNameUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = ModifyContactAttributeModifyNickNameUnsupportedReason.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult);
}

uint64_t type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult()
{
  return objc_opt_self();
}

id ModifyContactAttributeModifyNickNameResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult);
}

void ModifyContactAttributeModifyRelationshipResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult);
}

uint64_t type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult()
{
  return objc_opt_self();
}

id ModifyContactAttributeModifyRelationshipResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult);
}

uint64_t ModifyContactAttributeRelatedSiriMatchesUnsupportedReason.init(rawValue:)(uint64_t result)
{
  if ((unint64_t)(result - 4) < 0xFFFFFFFFFFFFFFFDLL)
    return 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = ModifyContactAttributeRelatedSiriMatchesUnsupportedReason.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void ModifyContactAttributeRelatedSiriMatchesResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult);
}

void ModifyContactAttributeModifyNickNameResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  void *v3;
  void *v4;
  uint64_t v7;
  id v8;
  id v9;
  objc_super v10;

  Dictionary._bridgeToObjectiveC()();
  v7 = OUTLINED_FUNCTION_4_21();
  v10.receiver = v3;
  v10.super_class = (Class)a3(v7);
  v8 = objc_msgSendSuper2(&v10, sel_initWithJSONDictionary_forIntent_, v4, a2);

  v9 = v8;
  if (v9)

  OUTLINED_FUNCTION_13_38();
}

uint64_t type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult()
{
  return objc_opt_self();
}

id ModifyContactAttributeRelatedSiriMatchesResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ModifyContactAttributeRelatedSiriMatchesResolutionResult);
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ModifyContactAttributeIntentResponseCode, &type metadata for ModifyContactAttributeIntentResponseCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeIntentResponseCode and conformance ModifyContactAttributeIntentResponseCode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ModifyContactAttributeModifyNickNameUnsupportedReason, &type metadata for ModifyContactAttributeModifyNickNameUnsupportedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeModifyNickNameUnsupportedReason and conformance ModifyContactAttributeModifyNickNameUnsupportedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ModifyContactAttributeModifyRelationshipUnsupportedReason, &type metadata for ModifyContactAttributeModifyRelationshipUnsupportedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeModifyRelationshipUnsupportedReason and conformance ModifyContactAttributeModifyRelationshipUnsupportedReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ModifyContactAttributeRelatedSiriMatchesUnsupportedReason, &type metadata for ModifyContactAttributeRelatedSiriMatchesUnsupportedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeRelatedSiriMatchesUnsupportedReason and conformance ModifyContactAttributeRelatedSiriMatchesUnsupportedReason);
  }
  return result;
}

char *keypath_get_selector_contactAttributeToModify()
{
  return sel_contactAttributeToModify;
}

void sub_21FECFB58(id *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_contactAttributeToModify);
  OUTLINED_FUNCTION_31_0();
}

id sub_21FECFB84(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactAttributeToModify_, *a1);
}

char *keypath_get_selector_modifyOperation()
{
  return sel_modifyOperation;
}

void sub_21FECFBA4(id *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = objc_msgSend(*a1, sel_modifyOperation);
  OUTLINED_FUNCTION_31_0();
}

id sub_21FECFBD0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setModifyOperation_, *a1);
}

char *keypath_get_selector_modifyNickName()
{
  return sel_modifyNickName;
}

void sub_21FECFBF0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_modifyNickName, a2);
}

void sub_21FECFC0C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setModifyNickName_);
}

char *keypath_get_selector_modifyRelationship()
{
  return sel_modifyRelationship;
}

void sub_21FECFC34(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_modifyRelationship, a2);
}

void sub_21FECFC50(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setModifyRelationship_);
}

char *keypath_get_selector_relatedSiriMatches()
{
  return sel_relatedSiriMatches;
}

char *keypath_get_selector_relatedContact()
{
  return sel_relatedContact;
}

id sub_21FECFC90(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setRelatedContact_, *a1);
}

char *keypath_get_selector_updatedRelationship()
{
  return sel_updatedRelationship;
}

id sub_21FECFCB4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUpdatedRelationship_, *a1);
}

void sub_21FECFCC8(uint64_t *a1@<X8>)
{
  *a1 = ModifyContactAttributeIntentResponse.code.getter();
  OUTLINED_FUNCTION_31_0();
}

void sub_21FECFCEC(uint64_t *a1)
{
  ModifyContactAttributeIntentResponse.code.setter(*a1);
  OUTLINED_FUNCTION_31_0();
}

void type metadata accessor for ModifyContactAttributeIntentResponseCode()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t method lookup function for ModifyContactAttributeIntentResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ModifyContactAttributeIntentResponse.code.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

void type metadata accessor for ModifyContactAttributeModifyNickNameUnsupportedReason()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t method lookup function for ModifyContactAttributeModifyNickNameResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static ModifyContactAttributeModifyNickNameResolutionResult.unsupported(forReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

void type metadata accessor for ModifyContactAttributeModifyRelationshipUnsupportedReason()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t method lookup function for ModifyContactAttributeModifyRelationshipResolutionResult()
{
  return swift_lookUpClassMethod();
}

void type metadata accessor for ModifyContactAttributeRelatedSiriMatchesUnsupportedReason()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t method lookup function for ModifyContactAttributeRelatedSiriMatchesResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static ModifyContactAttributeRelatedSiriMatchesResolutionResult.unsupported(forReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t OUTLINED_FUNCTION_12_36@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + a1) = 0;
  return type metadata accessor for ModifyContactAttributeIntentResponse();
}

id LearnPronunciationIntent.__allocating_init()()
{
  return objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_init);
}

id LearnPronunciationIntent.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for LearnPronunciationIntent()
{
  return objc_opt_self();
}

uint64_t LearnPronunciationIntent.__allocating_init(coder:)()
{
  uint64_t v0;
  id v1;

  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithCoder_);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

void LearnPronunciationIntent.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void LearnPronunciationIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(objc_allocWithZone(v4), sel_initWithIdentifier_backingStore_, v6, a3);

  OUTLINED_FUNCTION_22_6();
}

void LearnPronunciationIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void *v5;
  objc_super v6;

  if (a2)
  {
    v5 = (void *)MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v5 = 0;
  }
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  objc_msgSendSuper2(&v6, sel_initWithIdentifier_backingStore_, v5, a3);

  OUTLINED_FUNCTION_24_19();
}

void LearnPronunciationIntent.__allocating_init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FED0020()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

uint64_t sub_21FED0028()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  NSDictionary v4;

  OUTLINED_FUNCTION_19_29();
  if (v3)
  {
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v4.super.isa = 0;
  }
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithDomain_verb_parametersByName_, v0, v2, v4.super.isa);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void LearnPronunciationIntent.init(domain:verb:parametersByName:)()
{
  OUTLINED_FUNCTION_12_35();
}

void sub_21FED00C0()
{
  OUTLINED_FUNCTION_20_25();
  OUTLINED_FUNCTION_22_20();
}

void *sub_21FED00C8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  NSDictionary v4;
  objc_super v6;

  OUTLINED_FUNCTION_19_29();
  if (v3)
  {
    v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v4.super.isa = 0;
  }
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for LearnPronunciationIntent();
  objc_msgSendSuper2(&v6, sel_initWithDomain_verb_parametersByName_, v0, v2, v4.super.isa);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

id LearnPronunciationIntent.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for LearnPronunciationIntent);
}

unint64_t LearnPronunciationIntentResponseCode.init(rawValue:)(unint64_t result)
{
  if (result > 6)
    return 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LearnPronunciationIntentResponseCode@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = LearnPronunciationIntentResponseCode.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t LearnPronunciationIntentResponse.code.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR___LearnPronunciationIntentResponse_code;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t LearnPronunciationIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t result;

  v3 = (_QWORD *)(v1 + OBJC_IVAR___LearnPronunciationIntentResponse_code);
  result = OUTLINED_FUNCTION_27_26();
  *v3 = a1;
  return result;
}

void LearnPronunciationIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_7_37();
  LearnPronunciationIntentResponse.init(code:userActivity:)(a1, a2);
  OUTLINED_FUNCTION_22_6();
}

char *LearnPronunciationIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  void *v2;
  char *v5;
  char *v6;
  char *v7;

  v5 = (char *)objc_msgSend(v2, sel_init);
  v6 = &v5[OBJC_IVAR___LearnPronunciationIntentResponse_code];
  OUTLINED_FUNCTION_27_26();
  *(_QWORD *)v6 = a1;
  v7 = v5;
  objc_msgSend(v7, sel_setUserActivity_, a2);

  return v7;
}

id LearnPronunciationIntentResponse.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)OUTLINED_FUNCTION_10_36(OBJC_IVAR___LearnPronunciationIntentResponse_code);
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for LearnPronunciationIntentResponse()
{
  return objc_opt_self();
}

void LearnPronunciationIntentResponse.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_10_36(OBJC_IVAR___LearnPronunciationIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

uint64_t LearnPronunciationIntentResponse.__allocating_init(backingStore:)()
{
  uint64_t v0;
  id v1;

  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithBackingStore_);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

void LearnPronunciationIntentResponse.init(backingStore:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)OUTLINED_FUNCTION_10_36(OBJC_IVAR___LearnPronunciationIntentResponse_code);
  OUTLINED_FUNCTION_8_31((uint64_t)v7.super_class, sel_initWithBackingStore_, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_11_34();
}

void LearnPronunciationIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v1;

  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_12_37();
  }
  v1 = OUTLINED_FUNCTION_7_37();
  OUTLINED_FUNCTION_46_2(v1, sel_initWithPropertiesByName_);
  OUTLINED_FUNCTION_26_0();
  OUTLINED_FUNCTION_22_6();
}

void LearnPronunciationIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR___LearnPronunciationIntentResponse_code] = 0;
  if (a1)
  {
    Dictionary._bridgeToObjectiveC()();
    OUTLINED_FUNCTION_12_37();
  }
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for LearnPronunciationIntentResponse();
  v8 = OUTLINED_FUNCTION_8_31((uint64_t)v9.super_class, sel_initWithPropertiesByName_, v2, v3, v4, v5, v6, v7, v9);
  OUTLINED_FUNCTION_26_0();
  if (v1)

  OUTLINED_FUNCTION_24_19();
}

id LearnPronunciationIntentResponse.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for LearnPronunciationIntentResponse);
}

unint64_t lazy protocol witness table accessor for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for LearnPronunciationIntentResponseCode, &type metadata for LearnPronunciationIntentResponseCode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LearnPronunciationIntentResponseCode and conformance LearnPronunciationIntentResponseCode);
  }
  return result;
}

uint64_t sub_21FED0704@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = LearnPronunciationIntentResponse.code.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21FED072C(uint64_t *a1)
{
  return LearnPronunciationIntentResponse.code.setter(*a1);
}

ValueMetadata *type metadata accessor for LearnPronunciationIntentResponseCode()
{
  return &type metadata for LearnPronunciationIntentResponseCode;
}

uint64_t method lookup function for LearnPronunciationIntentResponse()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LearnPronunciationIntentResponse.code.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t OUTLINED_FUNCTION_10_36@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + a1) = 0;
  return type metadata accessor for LearnPronunciationIntentResponse();
}

uint64_t OUTLINED_FUNCTION_12_37()
{
  return swift_bridgeObjectRelease();
}

unint64_t ContactAttributeType.init(rawValue:)(unint64_t result)
{
  if (result > 0xB)
    return 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ContactAttributeType@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = ContactAttributeType.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id static ContactAttributeTypeResolutionResult.success(with:)(uint64_t a1)
{
  return static ContactAttributeTypeResolutionResult.success(with:)(a1, (SEL *)&selRef_successWithResolvedValue_);
}

id static ContactAttributeTypeResolutionResult.confirmationRequired(with:)(uint64_t a1)
{
  return static ContactAttributeTypeResolutionResult.success(with:)(a1, (SEL *)&selRef_confirmationRequiredWithValueToConfirm_);
}

id static ContactAttributeTypeResolutionResult.success(with:)(uint64_t a1, SEL *a2)
{
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), *a2, a1);
}

id ContactAttributeTypeResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  void *v3;
  id v5;
  id v6;

  v5 = objc_allocWithZone(v2);
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6 = objc_msgSend(v5, sel_initWithJSONDictionary_forIntent_, v3, a2);

  return v6;
}

id ContactAttributeTypeResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  id v6;
  objc_super v8;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ContactAttributeTypeResolutionResult();
  v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, v3, a2);

  v6 = v5;
  if (v6)

  return v6;
}

uint64_t type metadata accessor for ContactAttributeTypeResolutionResult()
{
  return objc_opt_self();
}

id ContactAttributeTypeResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContactAttributeTypeResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ContactAttributeType and conformance ContactAttributeType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactAttributeType and conformance ContactAttributeType;
  if (!lazy protocol witness table cache variable for type ContactAttributeType and conformance ContactAttributeType)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactAttributeType, &type metadata for ContactAttributeType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactAttributeType and conformance ContactAttributeType);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContactAttributeType()
{
  return &type metadata for ContactAttributeType;
}

uint64_t method lookup function for ContactAttributeTypeResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static ContactAttributeTypeResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactAttributeTypeResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

unint64_t ModifyOperation.init(rawValue:)(unint64_t result)
{
  if (result > 3)
    return 0;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyOperation@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = ModifyOperation.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id ModifyOperationResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  void *v3;
  id v5;
  id v6;

  v5 = objc_allocWithZone(v2);
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6 = objc_msgSend(v5, sel_initWithJSONDictionary_forIntent_, v3, a2);

  return v6;
}

id ModifyOperationResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  id v6;
  objc_super v8;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for ModifyOperationResolutionResult();
  v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, v3, a2);

  v6 = v5;
  if (v6)

  return v6;
}

uint64_t type metadata accessor for ModifyOperationResolutionResult()
{
  return objc_opt_self();
}

id ModifyOperationResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ModifyOperationResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type ModifyOperation and conformance ModifyOperation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModifyOperation and conformance ModifyOperation;
  if (!lazy protocol witness table cache variable for type ModifyOperation and conformance ModifyOperation)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ModifyOperation, &type metadata for ModifyOperation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyOperation and conformance ModifyOperation);
  }
  return result;
}

ValueMetadata *type metadata accessor for ModifyOperation()
{
  return &type metadata for ModifyOperation;
}

uint64_t method lookup function for ModifyOperationResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static ModifyOperationResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ModifyOperationResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

void specialized RawRepresentable<>.hashValue.getter(uint64_t a1)
{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter);
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))UsoIdentifierNamespace.rawValue.getter);
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ContactNLIntent.NLContactTypeValue.rawValue.getter);
}

{
  OUTLINED_FUNCTION_12_38(a1, a1, (void (*)(uint64_t))ContactNLv3Constants.rawValue.getter);
}

{
  OUTLINED_FUNCTION_12_38(a1, a1, (void (*)(uint64_t))ContactNLv3Intent.NLContactAttributesValue.rawValue.getter);
}

{
  OUTLINED_FUNCTION_12_38(a1, a1, (void (*)(uint64_t))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
}

{
  OUTLINED_FUNCTION_12_38(a1, a1, (void (*)(uint64_t))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ContactsAgeInfo.CodingKeys.rawValue.getter);
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))GetContactSlots.rawValue.getter);
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))GetContactAttributeSlots.rawValue.getter);
}

{
  specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(uint64_t))ModifyContactAttributeSlots.rawValue.getter);
}

void specialized RawRepresentable<>.hashValue.getter()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  OUTLINED_FUNCTION_9_33();
  OUTLINED_FUNCTION_11_35();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>.hashValue.getter();
}

{
  specialized RawRepresentable<>.hashValue.getter();
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_9_33();
  OUTLINED_FUNCTION_14_34(v0);
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_9_33();
  OUTLINED_FUNCTION_13_39(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

void specialized RawRepresentable<>.hashValue.getter(uint64_t a1, void (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_9_33();
  a2(a1);
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

void specialized RawRepresentable<>.hash(into:)(int a1, Swift::UInt a2)
{
  OUTLINED_FUNCTION_2_54(a1, a2);
  OUTLINED_FUNCTION_31_0();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ModifyContactAttributeSlots.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))GetContactAttributeSlots.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))UsoIdentifierNamespace.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(void))ContactNLv3Constants.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(void))ContactNLv3Intent.NLContactAttributesValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(void))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))GetContactSlots.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ContactNLIntent.NLContactTypeValue.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ContactsAgeInfo.CodingKeys.rawValue.getter);
}

{
  return specialized RawRepresentable<>.hash(into:)(a1, a2, (void (*)(uint64_t))ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter);
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

{
  OUTLINED_FUNCTION_3_33();
  return OUTLINED_FUNCTION_0_48();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  OUTLINED_FUNCTION_10_37();
  return swift_bridgeObjectRelease();
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  a3(a2);
  OUTLINED_FUNCTION_10_37();
  return OUTLINED_FUNCTION_0_48();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2 + 1);
  OUTLINED_FUNCTION_31_0();
}

void specialized RawRepresentable<>._rawHashValue(seed:)()
{
  OUTLINED_FUNCTION_7_38();
  OUTLINED_FUNCTION_11_35();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  OUTLINED_FUNCTION_6_42();
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  OUTLINED_FUNCTION_6_42();
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  OUTLINED_FUNCTION_6_42();
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  OUTLINED_FUNCTION_6_42();
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  OUTLINED_FUNCTION_6_42();
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  OUTLINED_FUNCTION_6_42();
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_7_38();
  OUTLINED_FUNCTION_14_34(v0);
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = OUTLINED_FUNCTION_7_38();
  OUTLINED_FUNCTION_13_39(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ContactsAgeInfo.CodingKeys.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ContactNLIntent.NLContactTypeValue.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))GetContactSlots.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ContactNLv3Intent.NLContactAttributesValue.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ContactNLv3Constants.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))UsoIdentifierNamespace.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))GetContactAttributeSlots.rawValue.getter);
}

{
  specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(uint64_t))ModifyContactAttributeSlots.rawValue.getter);
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_7_38();
  a3(v4);
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

{
  OUTLINED_FUNCTION_7_38();
  a3(a2);
  OUTLINED_FUNCTION_3_33();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_4_38();
  OUTLINED_FUNCTION_1_46();
}

unint64_t Qualifier.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

void protocol witness for Hashable.hashValue.getter in conformance Qualifier()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Qualifier()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Qualifier@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = Qualifier.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

id QualifierResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  objc_class *v2;
  void *v3;
  id v5;
  id v6;

  v5 = objc_allocWithZone(v2);
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6 = objc_msgSend(v5, sel_initWithJSONDictionary_forIntent_, v3, a2);

  return v6;
}

id QualifierResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v5;
  id v6;
  objc_super v8;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for QualifierResolutionResult();
  v5 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, v3, a2);

  v6 = v5;
  if (v6)

  return v6;
}

uint64_t type metadata accessor for QualifierResolutionResult()
{
  return objc_opt_self();
}

id QualifierResolutionResult.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for QualifierResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type Qualifier and conformance Qualifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Qualifier and conformance Qualifier;
  if (!lazy protocol witness table cache variable for type Qualifier and conformance Qualifier)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for Qualifier, &type metadata for Qualifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Qualifier and conformance Qualifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for Qualifier()
{
  return &type metadata for Qualifier;
}

uint64_t method lookup function for QualifierResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static QualifierResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static QualifierResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t OUTLINED_FUNCTION_0_48()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_2_54(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t OUTLINED_FUNCTION_3_33()
{
  return String.hash(into:)();
}

Swift::Int OUTLINED_FUNCTION_4_38()
{
  return Hasher._finalize()();
}

uint64_t OUTLINED_FUNCTION_6_42()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_7_38()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_9_33()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_10_37()
{
  return String.hash(into:)();
}

void OUTLINED_FUNCTION_11_35()
{
  unsigned __int8 v0;

  Hasher._combine(_:)(v0 + 1);
}

void OUTLINED_FUNCTION_12_38(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  specialized RawRepresentable<>._rawHashValue(seed:)(0, a2, a3);
}

void OUTLINED_FUNCTION_13_39(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

uint64_t OUTLINED_FUNCTION_14_34(uint64_t a1, ...)
{
  uint64_t (*v1)(char *, uint64_t);
  uint64_t v2;
  va_list va;

  va_start(va, a1);
  return v1(va, v2);
}

id static ContactAttributeResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___ContactAttributeResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_successWithResolvedObject_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static ContactAttributeResolutionResult.disambiguation(with:)(unint64_t a1)
{
  void *ObjCClassFromMetadata;
  Class isa;
  id v3;
  objc_super v4;

  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_12_39();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    OUTLINED_FUNCTION_12_39();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  OUTLINED_FUNCTION_12_39();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4.receiver = ObjCClassFromMetadata;
  v4.super_class = (Class)&OBJC_METACLASS___ContactAttributeResolutionResult;
  v3 = objc_msgSendSuper2(&v4, sel_disambiguationWithObjectsToDisambiguate_, isa);

  OUTLINED_FUNCTION_24_19();
}

unint64_t type metadata accessor for INObject()
{
  unint64_t result;

  result = lazy cache variable for type metadata for INObject;
  if (!lazy cache variable for type metadata for INObject)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INObject);
  }
  return result;
}

id static ContactAttributeResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___ContactAttributeResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_confirmationRequiredWithObjectToConfirm_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

id key path getter for ContactAttribute.ageDateTime : ContactAttribute@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_ageDateTime);
  *a2 = result;
  return result;
}

id key path getter for ContactAttribute.postalAddress : ContactAttribute@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_postalAddress);
  *a2 = result;
  return result;
}

void ContactAttribute.__allocating_init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

uint64_t sub_21FED1D3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void ContactAttribute.init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

void *sub_21FED1DD4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  objc_super v5;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ContactAttribute();
  objc_msgSendSuper2(&v5, sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

uint64_t type metadata accessor for ContactAttribute()
{
  return objc_opt_self();
}

uint64_t ContactAttribute.__allocating_init(coder:)(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithCoder_, a1);
  OUTLINED_FUNCTION_26_0();
  return v1;
}

void *ContactAttribute.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for ContactAttribute();
  OUTLINED_FUNCTION_8_31((uint64_t)v8.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v8);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

id ContactAttribute.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ContactAttribute);
}

void static ContactAttributeResolutionResult.success(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static ContactAttributeResolutionResult.disambiguation(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static ContactAttributeResolutionResult.confirmationRequired(with:)()
{
  specialized fatalError(_:file:line:)();
}

id ContactAttributeResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = OUTLINED_FUNCTION_7_37();
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v5 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, v2, a2);

  return v5;
}

void ContactAttributeResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for ContactAttributeResolutionResult();
  objc_msgSendSuper2(&v6, sel_initWithJSONDictionary_forIntent_, v3, a2);
  OUTLINED_FUNCTION_26_0();
  v5 = v2;

  if (v5)
  OUTLINED_FUNCTION_24_19();
}

uint64_t type metadata accessor for ContactAttributeResolutionResult()
{
  return objc_opt_self();
}

id ContactAttributeResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ContactAttributeResolutionResult);
}

char *keypath_get_selector_contactAttributeType()
{
  return sel_contactAttributeType;
}

id sub_21FED22CC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_contactAttributeType);
  *a2 = result;
  return result;
}

id sub_21FED22FC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactAttributeType_, *a1);
}

char *keypath_get_selector_handleLabel()
{
  return sel_handleLabel;
}

void sub_21FED231C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_handleLabel, a2);
}

void sub_21FED2338(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setHandleLabel_);
}

char *keypath_get_selector_handleValue()
{
  return sel_handleValue;
}

void sub_21FED2360(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_handleValue, a2);
}

void sub_21FED237C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setHandleValue_);
}

char *keypath_get_selector_ageDateTime()
{
  return sel_ageDateTime;
}

id sub_21FED23A8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAgeDateTime_, *a1);
}

char *keypath_get_selector_postalAddress()
{
  return sel_postalAddress;
}

id sub_21FED23CC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPostalAddress_, *a1);
}

uint64_t method lookup function for ContactAttributeResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static ContactAttributeResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactAttributeResolutionResult.disambiguation(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static ContactAttributeResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

id OUTLINED_FUNCTION_0_49(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_4_39()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_7_39()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_32()
{
  return swift_getObjCClassFromMetadata();
}

uint64_t OUTLINED_FUNCTION_9_34()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_10_38()
{
  JUMPOUT(0x2207D7CB8);
}

unint64_t OUTLINED_FUNCTION_12_39()
{
  return type metadata accessor for INObject();
}

void PostalAddress.__allocating_init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

uint64_t sub_21FED24A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void PostalAddress.init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

void *sub_21FED2540()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  objc_super v5;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for PostalAddress();
  objc_msgSendSuper2(&v5, sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

uint64_t type metadata accessor for PostalAddress()
{
  return objc_opt_self();
}

uint64_t PostalAddress.__allocating_init(coder:)(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithCoder_, a1);
  OUTLINED_FUNCTION_26_0();
  return v1;
}

void *PostalAddress.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for PostalAddress();
  OUTLINED_FUNCTION_8_31((uint64_t)v8.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v8);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

id PostalAddress.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for PostalAddress);
}

id static PostalAddressResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___PostalAddressResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_successWithResolvedObject_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static PostalAddressResolutionResult.disambiguation(with:)(unint64_t a1)
{
  void *ObjCClassFromMetadata;
  Class isa;
  id v3;
  objc_super v4;

  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_12_39();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    OUTLINED_FUNCTION_12_39();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  OUTLINED_FUNCTION_12_39();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4.receiver = ObjCClassFromMetadata;
  v4.super_class = (Class)&OBJC_METACLASS___PostalAddressResolutionResult;
  v3 = objc_msgSendSuper2(&v4, sel_disambiguationWithObjectsToDisambiguate_, isa);

  OUTLINED_FUNCTION_24_19();
}

id static PostalAddressResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___PostalAddressResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_confirmationRequiredWithObjectToConfirm_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static PostalAddressResolutionResult.success(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static PostalAddressResolutionResult.disambiguation(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static PostalAddressResolutionResult.confirmationRequired(with:)()
{
  specialized fatalError(_:file:line:)();
}

id PostalAddressResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = OUTLINED_FUNCTION_7_37();
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v5 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, v2, a2);

  return v5;
}

void PostalAddressResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for PostalAddressResolutionResult();
  objc_msgSendSuper2(&v6, sel_initWithJSONDictionary_forIntent_, v3, a2);
  OUTLINED_FUNCTION_26_0();
  v5 = v2;

  if (v5)
  OUTLINED_FUNCTION_24_19();
}

uint64_t type metadata accessor for PostalAddressResolutionResult()
{
  return objc_opt_self();
}

id PostalAddressResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for PostalAddressResolutionResult);
}

char *keypath_get_selector_street()
{
  return sel_street;
}

void sub_21FED2B84(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_street, a2);
}

void sub_21FED2BA0(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setStreet_);
}

char *keypath_get_selector_subLocality()
{
  return sel_subLocality;
}

void sub_21FED2BC8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_subLocality, a2);
}

void sub_21FED2BE4(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setSubLocality_);
}

char *keypath_get_selector_city()
{
  return sel_city;
}

void sub_21FED2C0C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_city, a2);
}

void sub_21FED2C28(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setCity_);
}

char *keypath_get_selector_subAdministrativeArea()
{
  return sel_subAdministrativeArea;
}

void sub_21FED2C50(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_subAdministrativeArea, a2);
}

void sub_21FED2C6C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setSubAdministrativeArea_);
}

char *keypath_get_selector_state()
{
  return sel_state;
}

void sub_21FED2C94(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_state, a2);
}

void sub_21FED2CB0(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setState_);
}

char *keypath_get_selector_postalCode()
{
  return sel_postalCode;
}

void sub_21FED2CD8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_postalCode, a2);
}

void sub_21FED2CF4(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setPostalCode_);
}

char *keypath_get_selector_country()
{
  return sel_country;
}

void sub_21FED2D1C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_country, a2);
}

void sub_21FED2D38(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setCountry_);
}

char *keypath_get_selector_isoCountryCode()
{
  return sel_isoCountryCode;
}

void sub_21FED2D60(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_isoCountryCode, a2);
}

void sub_21FED2D7C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setIsoCountryCode_);
}

void sub_21FED2D98(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_handleLabel, a2);
}

void sub_21FED2DB4(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setHandleLabel_);
}

uint64_t method lookup function for PostalAddressResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static PostalAddressResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static PostalAddressResolutionResult.disambiguation(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static PostalAddressResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

id static SiriMatchResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___SiriMatchResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_successWithResolvedObject_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static SiriMatchResolutionResult.disambiguation(with:)(unint64_t a1)
{
  void *ObjCClassFromMetadata;
  Class isa;
  id v3;
  objc_super v4;

  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_12_39();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    OUTLINED_FUNCTION_12_39();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  OUTLINED_FUNCTION_12_39();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4.receiver = ObjCClassFromMetadata;
  v4.super_class = (Class)&OBJC_METACLASS___SiriMatchResolutionResult;
  v3 = objc_msgSendSuper2(&v4, sel_disambiguationWithObjectsToDisambiguate_, isa);

  OUTLINED_FUNCTION_24_19();
}

id static SiriMatchResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___SiriMatchResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_confirmationRequiredWithObjectToConfirm_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void key path getter for SiriMatch.fullName : SiriMatch(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_fullName);
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void key path setter for SiriMatch.fullName : SiriMatch(_QWORD *a1, void **a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *a2;
  if (a1[1])
    v3 = MEMORY[0x2207D7CB8](*a1);
  else
    v3 = 0;
  v4 = (id)v3;
  objc_msgSend(v2, sel_setFullName_);

}

void SiriMatch.__allocating_init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

uint64_t sub_21FED3040()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void SiriMatch.init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

void *sub_21FED30D8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  objc_super v5;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for SiriMatch();
  objc_msgSendSuper2(&v5, sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

uint64_t type metadata accessor for SiriMatch()
{
  return objc_opt_self();
}

uint64_t SiriMatch.__allocating_init(coder:)(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithCoder_, a1);
  OUTLINED_FUNCTION_26_0();
  return v1;
}

void *SiriMatch.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for SiriMatch();
  OUTLINED_FUNCTION_8_31((uint64_t)v8.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v8);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

id SiriMatch.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for SiriMatch);
}

void static SiriMatchResolutionResult.success(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static SiriMatchResolutionResult.disambiguation(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static SiriMatchResolutionResult.confirmationRequired(with:)()
{
  specialized fatalError(_:file:line:)();
}

id SiriMatchResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = OUTLINED_FUNCTION_7_37();
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v5 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, v2, a2);

  return v5;
}

void SiriMatchResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for SiriMatchResolutionResult();
  objc_msgSendSuper2(&v6, sel_initWithJSONDictionary_forIntent_, v3, a2);
  OUTLINED_FUNCTION_26_0();
  v5 = v2;

  if (v5)
  OUTLINED_FUNCTION_24_19();
}

uint64_t type metadata accessor for SiriMatchResolutionResult()
{
  return objc_opt_self();
}

id SiriMatchResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for SiriMatchResolutionResult);
}

uint64_t method lookup function for SiriMatchResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static SiriMatchResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static SiriMatchResolutionResult.disambiguation(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static SiriMatchResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void Contact.__allocating_init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

uint64_t sub_21FED3630()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void Contact.init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

void *sub_21FED36C8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  objc_super v5;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for Contact();
  objc_msgSendSuper2(&v5, sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

uint64_t type metadata accessor for Contact()
{
  return objc_opt_self();
}

{
  return MEMORY[0x24BE93CC0]();
}

uint64_t Contact.__allocating_init(coder:)(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithCoder_, a1);
  OUTLINED_FUNCTION_26_0();
  return v1;
}

void *Contact.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for Contact();
  OUTLINED_FUNCTION_8_31((uint64_t)v8.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v8);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

id Contact.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for Contact);
}

id static ContactResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___ContactResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_successWithResolvedObject_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static ContactResolutionResult.disambiguation(with:)(unint64_t a1)
{
  void *ObjCClassFromMetadata;
  Class isa;
  id v3;
  objc_super v4;

  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_12_39();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    OUTLINED_FUNCTION_12_39();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  OUTLINED_FUNCTION_12_39();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4.receiver = ObjCClassFromMetadata;
  v4.super_class = (Class)&OBJC_METACLASS___ContactResolutionResult;
  v3 = objc_msgSendSuper2(&v4, sel_disambiguationWithObjectsToDisambiguate_, isa);

  OUTLINED_FUNCTION_24_19();
}

id static ContactResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___ContactResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_confirmationRequiredWithObjectToConfirm_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static ContactResolutionResult.success(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static ContactResolutionResult.disambiguation(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static ContactResolutionResult.confirmationRequired(with:)()
{
  specialized fatalError(_:file:line:)();
}

id ContactResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = OUTLINED_FUNCTION_7_37();
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v5 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, v2, a2);

  return v5;
}

void ContactResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for ContactResolutionResult();
  objc_msgSendSuper2(&v6, sel_initWithJSONDictionary_forIntent_, v3, a2);
  OUTLINED_FUNCTION_26_0();
  v5 = v2;

  if (v5)
  OUTLINED_FUNCTION_24_19();
}

uint64_t type metadata accessor for ContactResolutionResult()
{
  return objc_opt_self();
}

id ContactResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ContactResolutionResult);
}

char *keypath_get_selector_givenName()
{
  return sel_givenName;
}

void sub_21FED3D0C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_givenName, a2);
}

void sub_21FED3D28(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setGivenName_);
}

void sub_21FED3D44(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_nickName, a2);
}

void sub_21FED3D60(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setNickName_);
}

void sub_21FED3D7C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_middleName, a2);
}

void sub_21FED3D98(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setMiddleName_);
}

char *keypath_get_selector_familyName()
{
  return sel_familyName;
}

void sub_21FED3DC0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_familyName, a2);
}

void sub_21FED3DDC(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setFamilyName_);
}

char *keypath_get_selector_namePrefix()
{
  return sel_namePrefix;
}

void sub_21FED3E04(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_namePrefix, a2);
}

void sub_21FED3E20(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setNamePrefix_);
}

char *keypath_get_selector_nameSuffix()
{
  return sel_nameSuffix;
}

void sub_21FED3E48(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_nameSuffix, a2);
}

void sub_21FED3E64(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setNameSuffix_);
}

void sub_21FED3E80(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_fullName, a2);
}

void sub_21FED3E9C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setFullName_);
}

void sub_21FED3EB8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_phoneNumber, a2);
}

void sub_21FED3ED4(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setPhoneNumber_);
}

void sub_21FED3EF0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_emailAddress, a2);
}

void sub_21FED3F0C(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setEmailAddress_);
}

uint64_t method lookup function for ContactResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static ContactResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactResolutionResult.disambiguation(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static ContactResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

void ContactRelation.__allocating_init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

uint64_t sub_21FED3F8C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void ContactRelation.init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

void *sub_21FED4024()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  objc_super v5;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ContactRelation();
  objc_msgSendSuper2(&v5, sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

uint64_t type metadata accessor for ContactRelation()
{
  return objc_opt_self();
}

uint64_t ContactRelation.__allocating_init(coder:)(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithCoder_, a1);
  OUTLINED_FUNCTION_26_0();
  return v1;
}

void *ContactRelation.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for ContactRelation();
  OUTLINED_FUNCTION_8_31((uint64_t)v8.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v8);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

id ContactRelation.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ContactRelation);
}

id static ContactRelationResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___ContactRelationResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_successWithResolvedObject_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static ContactRelationResolutionResult.disambiguation(with:)(unint64_t a1)
{
  void *ObjCClassFromMetadata;
  Class isa;
  id v3;
  objc_super v4;

  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_12_39();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    OUTLINED_FUNCTION_12_39();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  OUTLINED_FUNCTION_12_39();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4.receiver = ObjCClassFromMetadata;
  v4.super_class = (Class)&OBJC_METACLASS___ContactRelationResolutionResult;
  v3 = objc_msgSendSuper2(&v4, sel_disambiguationWithObjectsToDisambiguate_, isa);

  OUTLINED_FUNCTION_24_19();
}

id static ContactRelationResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___ContactRelationResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_confirmationRequiredWithObjectToConfirm_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static ContactRelationResolutionResult.success(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static ContactRelationResolutionResult.disambiguation(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static ContactRelationResolutionResult.confirmationRequired(with:)()
{
  specialized fatalError(_:file:line:)();
}

id ContactRelationResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = OUTLINED_FUNCTION_7_37();
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v5 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, v2, a2);

  return v5;
}

void ContactRelationResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for ContactRelationResolutionResult();
  objc_msgSendSuper2(&v6, sel_initWithJSONDictionary_forIntent_, v3, a2);
  OUTLINED_FUNCTION_26_0();
  v5 = v2;

  if (v5)
  OUTLINED_FUNCTION_24_19();
}

uint64_t type metadata accessor for ContactRelationResolutionResult()
{
  return objc_opt_self();
}

id ContactRelationResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for ContactRelationResolutionResult);
}

char *keypath_get_selector_relatedFullName()
{
  return sel_relatedFullName;
}

void sub_21FED4668(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_relatedFullName, a2);
}

void sub_21FED4684(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setRelatedFullName_);
}

char *keypath_get_selector_relationship()
{
  return sel_relationship;
}

void sub_21FED46AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  key path getter for GetContactIntent.firstName : GetContactIntent(a1, (SEL *)&selRef_relationship, a2);
}

void sub_21FED46C8(_QWORD *a1, void **a2, uint64_t a3, uint64_t a4)
{
  key path setter for ModifyContactAttributeIntent.modifyNickName : ModifyContactAttributeIntent(a1, a2, a3, a4, (SEL *)&selRef_setRelationship_);
}

uint64_t method lookup function for ContactRelationResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static ContactRelationResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static ContactRelationResolutionResult.disambiguation(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static ContactRelationResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t key path getter for AgeDateTime.dateComponents : AgeDateTime@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, sel_dateComponents);
  if (v3)
  {
    v4 = v3;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = type metadata accessor for DateComponents();
  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

void key path setter for AgeDateTime.dateComponents : AgeDateTime(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DateComponents?(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for DateComponents();
  isa = 0;
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v8) != 1)
  {
    isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  objc_msgSend(v7, sel_setDateComponents_, isa);

}

void AgeDateTime.__allocating_init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

uint64_t sub_21FED4884()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

void AgeDateTime.init(identifier:display:pronunciationHint:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_11_36();
  if (v0)
  {
    MEMORY[0x2207D7CB8]();
    OUTLINED_FUNCTION_7_39();
  }
  OUTLINED_FUNCTION_10_38();
}

void *sub_21FED491C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  objc_super v5;

  OUTLINED_FUNCTION_9_34();
  if (v3)
    OUTLINED_FUNCTION_4_39();
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AgeDateTime();
  objc_msgSendSuper2(&v5, sel_initWithIdentifier_displayString_pronunciationHint_, v0, v2, 0);
  OUTLINED_FUNCTION_26_0();

  return v1;
}

uint64_t type metadata accessor for AgeDateTime()
{
  return objc_opt_self();
}

uint64_t AgeDateTime.__allocating_init(coder:)(uint64_t a1)
{
  uint64_t v1;

  objc_msgSend(OUTLINED_FUNCTION_7_37(), sel_initWithCoder_, a1);
  OUTLINED_FUNCTION_26_0();
  return v1;
}

void *AgeDateTime.init(coder:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for AgeDateTime();
  OUTLINED_FUNCTION_8_31((uint64_t)v8.super_class, sel_initWithCoder_, v1, v2, v3, v4, v5, v6, v8);
  OUTLINED_FUNCTION_26_0();
  return v0;
}

id AgeDateTime.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for AgeDateTime);
}

id static AgeDateTimeResolutionResult.success(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___AgeDateTimeResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_successWithResolvedObject_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static AgeDateTimeResolutionResult.disambiguation(with:)(unint64_t a1)
{
  void *ObjCClassFromMetadata;
  Class isa;
  id v3;
  objc_super v4;

  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_12_39();
    swift_bridgeObjectRetain();
    _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    OUTLINED_FUNCTION_12_39();
  }
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  OUTLINED_FUNCTION_12_39();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v4.receiver = ObjCClassFromMetadata;
  v4.super_class = (Class)&OBJC_METACLASS___AgeDateTimeResolutionResult;
  v3 = objc_msgSendSuper2(&v4, sel_disambiguationWithObjectsToDisambiguate_, isa);

  OUTLINED_FUNCTION_24_19();
}

id static AgeDateTimeResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v8.receiver = (id)OUTLINED_FUNCTION_8_32();
  v8.super_class = (Class)&OBJC_METACLASS___AgeDateTimeResolutionResult;
  v6 = OUTLINED_FUNCTION_8_31((uint64_t)v8.receiver, sel_confirmationRequiredWithObjectToConfirm_, v0, v1, v2, v3, v4, v5, v8);
  return OUTLINED_FUNCTION_0_49(v6);
}

void static AgeDateTimeResolutionResult.success(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static AgeDateTimeResolutionResult.disambiguation(with:)()
{
  specialized fatalError(_:file:line:)();
}

void static AgeDateTimeResolutionResult.confirmationRequired(with:)()
{
  specialized fatalError(_:file:line:)();
}

id AgeDateTimeResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  void *v2;
  id v4;
  id v5;

  v4 = OUTLINED_FUNCTION_7_37();
  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v5 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_, v2, a2);

  return v5;
}

void AgeDateTimeResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v5;
  objc_super v6;

  Dictionary._bridgeToObjectiveC()();
  OUTLINED_FUNCTION_3_15();
  v6.receiver = v2;
  v6.super_class = (Class)type metadata accessor for AgeDateTimeResolutionResult();
  objc_msgSendSuper2(&v6, sel_initWithJSONDictionary_forIntent_, v3, a2);
  OUTLINED_FUNCTION_26_0();
  v5 = v2;

  if (v5)
  OUTLINED_FUNCTION_24_19();
}

uint64_t type metadata accessor for AgeDateTimeResolutionResult()
{
  return objc_opt_self();
}

id AgeDateTimeResolutionResult.__deallocating_deinit()
{
  return GetContactIntent.__deallocating_deinit(type metadata accessor for AgeDateTimeResolutionResult);
}

char *keypath_get_selector_dateComponents()
{
  return sel_dateComponents;
}

char *keypath_get_selector_qualifier()
{
  return sel_qualifier;
}

id sub_21FED4F74@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_qualifier);
  *a2 = result;
  return result;
}

id sub_21FED4FA4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setQualifier_, *a1);
}

uint64_t method lookup function for AgeDateTimeResolutionResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static AgeDateTimeResolutionResult.success(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of static AgeDateTimeResolutionResult.disambiguation(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of static AgeDateTimeResolutionResult.confirmationRequired(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t outlined init with copy of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t CharacterSet.init(charactersIn:)()
{
  return MEMORY[0x24BDCB630]();
}

uint64_t static CharacterSet.decimalDigits.getter()
{
  return MEMORY[0x24BDCB648]();
}

uint64_t static CharacterSet.urlPathAllowed.getter()
{
  return MEMORY[0x24BDCB660]();
}

uint64_t CharacterSet.inverted.getter()
{
  return MEMORY[0x24BDCB720]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x24BDCB750]();
}

uint64_t URLQueryItem.name.getter()
{
  return MEMORY[0x24BDCB960]();
}

uint64_t URLQueryItem.value.getter()
{
  return MEMORY[0x24BDCB980]();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return MEMORY[0x24BDCB988]();
}

uint64_t URLComponents.queryItems.getter()
{
  return MEMORY[0x24BDCBA58]();
}

uint64_t URLComponents.init(string:)()
{
  return MEMORY[0x24BDCBB30]();
}

uint64_t type metadata accessor for URLComponents()
{
  return MEMORY[0x24BDCBB78]();
}

uint64_t DateComponents.yearForWeekOfYear.setter()
{
  return MEMORY[0x24BDCBC90]();
}

uint64_t static DateComponents.startOfToday.getter()
{
  return MEMORY[0x24BE91B90]();
}

NSDateComponents __swiftcall DateComponents._bridgeToObjectiveC()()
{
  return (NSDateComponents)MEMORY[0x24BDCBCA0]();
}

uint64_t static DateComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCBCC0]();
}

uint64_t DateComponents.day.getter()
{
  return MEMORY[0x24BDCBCC8]();
}

uint64_t DateComponents.day.setter()
{
  return MEMORY[0x24BDCBCE0]();
}

uint64_t DateComponents.date.getter()
{
  return MEMORY[0x24BDCBD00]();
}

uint64_t DateComponents.year.getter()
{
  return MEMORY[0x24BDCBD18]();
}

uint64_t DateComponents.year.setter()
{
  return MEMORY[0x24BDCBD28]();
}

uint64_t DateComponents.month.getter()
{
  return MEMORY[0x24BDCBD38]();
}

uint64_t DateComponents.month.setter()
{
  return MEMORY[0x24BDCBD48]();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return MEMORY[0x24BDCBDA8]();
}

uint64_t DateComponents.timeZone.setter()
{
  return MEMORY[0x24BDCBDD8]();
}

uint64_t type metadata accessor for DateComponents()
{
  return MEMORY[0x24BDCBDE0]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t PersonNameComponents.givenName.getter()
{
  return MEMORY[0x24BDCCB20]();
}

uint64_t PersonNameComponents.givenName.setter()
{
  return MEMORY[0x24BDCCB28]();
}

uint64_t PersonNameComponents.familyName.getter()
{
  return MEMORY[0x24BDCCB30]();
}

uint64_t PersonNameComponents.familyName.setter()
{
  return MEMORY[0x24BDCCB38]();
}

uint64_t PersonNameComponents.middleName.setter()
{
  return MEMORY[0x24BDCCB48]();
}

uint64_t PersonNameComponents.namePrefix.setter()
{
  return MEMORY[0x24BDCCB68]();
}

uint64_t PersonNameComponents.nameSuffix.setter()
{
  return MEMORY[0x24BDCCB78]();
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  objc_class *v0;
  void *v1;
  NSPersonNameComponents result;

  v0 = (objc_class *)MEMORY[0x24BDCCBB0]();
  result._private = v1;
  result.super.isa = v0;
  return result;
}

uint64_t PersonNameComponents.nickname.getter()
{
  return MEMORY[0x24BDCCBD8]();
}

uint64_t PersonNameComponents.init()()
{
  return MEMORY[0x24BDCCC00]();
}

uint64_t type metadata accessor for PersonNameComponents()
{
  return MEMORY[0x24BDCCC10]();
}

uint64_t PersonNameComponents.init(_:)()
{
  return MEMORY[0x24BDCCC40]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t FloatingPointFormatStyle.init(locale:)()
{
  return MEMORY[0x24BDCD420]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x24BDCE330]();
}

uint64_t static Date.startOfToday.getter()
{
  return MEMORY[0x24BE91B98]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x24BDCE5E8]();
}

uint64_t static Date.< infix(_:_:)()
{
  return MEMORY[0x24BDCE5F0]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x24BDCE780]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x24BDCE880]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x24BDCE9B0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t Locale.init(identifier:)()
{
  return MEMORY[0x24BDCEB18]();
}

uint64_t Locale.identifier.getter()
{
  return MEMORY[0x24BDCEB20]();
}

uint64_t Locale.LanguageCode.identifier.getter()
{
  return MEMORY[0x24BDCEB50]();
}

uint64_t type metadata accessor for Locale.LanguageCode()
{
  return MEMORY[0x24BDCEB60]();
}

NSLocale __swiftcall Locale._bridgeToObjectiveC()()
{
  return (NSLocale)MEMORY[0x24BDCEC90]();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return MEMORY[0x24BDCECA0]();
}

uint64_t static Locale.current.getter()
{
  return MEMORY[0x24BDCED58]();
}

uint64_t Locale.Language.languageCode.getter()
{
  return MEMORY[0x24BDCEDE0]();
}

uint64_t type metadata accessor for Locale.Language()
{
  return MEMORY[0x24BDCEE28]();
}

uint64_t Locale.language.getter()
{
  return MEMORY[0x24BDCEE60]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t Calendar.dateComponents(in:from:)()
{
  return MEMORY[0x24BDCF030]();
}

uint64_t static Calendar.gregorianCurrent.getter()
{
  return MEMORY[0x24BE91BA0]();
}

uint64_t static Calendar.autoupdatingCurrent.getter()
{
  return MEMORY[0x24BDCF0D0]();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return MEMORY[0x24BDCF160]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x24BDCF1B0]();
}

uint64_t Calendar.timeZone.getter()
{
  return MEMORY[0x24BDCF1C8]();
}

uint64_t static Calendar.Component.== infix(_:_:)()
{
  return MEMORY[0x24BDCF210]();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return MEMORY[0x24BDCF290]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x24BDCF2D8]();
}

uint64_t static TimeZone.autoupdatingCurrent.getter()
{
  return MEMORY[0x24BDCF4E0]();
}

uint64_t static TimeZone.current.getter()
{
  return MEMORY[0x24BDCF500]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x24BDCF510]();
}

uint64_t NeedsValueFlowStrategyAsync.makeRepromptOnEmptyParse(resolveRecord:)()
{
  return MEMORY[0x24BE95F50]();
}

uint64_t NeedsValueFlowStrategyAsync.makeRepromptOnLowConfidence(resolveRecord:)()
{
  return MEMORY[0x24BE95F60]();
}

uint64_t static CommonGuardFlowUtils.makeGuardFlow(withGuards:)()
{
  return MEMORY[0x24BE95F80]();
}

uint64_t HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)()
{
  return MEMORY[0x24BE95FD0]();
}

uint64_t HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)()
{
  return MEMORY[0x24BE95FF0]();
}

uint64_t HandleIntentFlowStrategyAsync.authenticationPolicy.getter()
{
  return MEMORY[0x24BE96000]();
}

uint64_t HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)()
{
  return MEMORY[0x24BE96008]();
}

uint64_t HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)()
{
  return MEMORY[0x24BE96018]();
}

uint64_t HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)()
{
  return MEMORY[0x24BE96028]();
}

uint64_t HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)()
{
  return MEMORY[0x24BE96038]();
}

uint64_t SimpleOutputFlowAsync.init(outputPublisher:outputGenerator:)()
{
  return MEMORY[0x24BE960B8]();
}

uint64_t type metadata accessor for SimpleOutputFlowAsync()
{
  return MEMORY[0x24BE960C8]();
}

uint64_t ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:)()
{
  return MEMORY[0x24BE96110]();
}

uint64_t ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:)()
{
  return MEMORY[0x24BE96120]();
}

uint64_t ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:)()
{
  return MEMORY[0x24BE96130]();
}

uint64_t ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:)()
{
  return MEMORY[0x24BE96140]();
}

uint64_t ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:)()
{
  return MEMORY[0x24BE96150]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)()
{
  return MEMORY[0x24BE96200]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)()
{
  return MEMORY[0x24BE96210]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)()
{
  return MEMORY[0x24BE96220]();
}

uint64_t ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)()
{
  return MEMORY[0x24BE96230]();
}

uint64_t UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)()
{
  return MEMORY[0x24BE96290]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:)()
{
  return MEMORY[0x24BE96490]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.authenticationPolicy.getter()
{
  return MEMORY[0x24BE96498]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)()
{
  return MEMORY[0x24BE964A0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)()
{
  return MEMORY[0x24BE964B0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)()
{
  return MEMORY[0x24BE964C0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)()
{
  return MEMORY[0x24BE964D0]();
}

uint64_t NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)()
{
  return MEMORY[0x24BE964D8]();
}

uint64_t NoOutputHandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)()
{
  return MEMORY[0x24BE96540]();
}

uint64_t RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)()
{
  return MEMORY[0x24BE96738]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:)()
{
  return MEMORY[0x24BE96778]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:)()
{
  return MEMORY[0x24BE96788]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)()
{
  return MEMORY[0x24BE967C0]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:)()
{
  return MEMORY[0x24BE967D0]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:)()
{
  return MEMORY[0x24BE967E0]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:)()
{
  return MEMORY[0x24BE967F0]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:)()
{
  return MEMORY[0x24BE96800]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:)()
{
  return MEMORY[0x24BE96810]();
}

uint64_t UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:)()
{
  return MEMORY[0x24BE96820]();
}

uint64_t type metadata accessor for GuardFlow()
{
  return MEMORY[0x24BE96928]();
}

uint64_t GuardFlowResult.description.getter()
{
  return MEMORY[0x24BE96938]();
}

uint64_t static GuardFlowResult.== infix(_:_:)()
{
  return MEMORY[0x24BE96940]();
}

uint64_t static CommonFlowGuard.disallowInSharingMode.getter()
{
  return MEMORY[0x24BE96A68]();
}

uint64_t static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter()
{
  return MEMORY[0x24BE96A80]();
}

uint64_t static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter()
{
  return MEMORY[0x24BE96A88]();
}

uint64_t type metadata accessor for CommonFlowGuard()
{
  return MEMORY[0x24BE96A90]();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsValueFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96B88]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedFlowProducer<A, B>(unsupportedValueFlowProducer:unsetRelationshipStrategy:_:)()
{
  return MEMORY[0x24BE96B98]();
}

uint64_t static RCHChildFlowFactoryHelper.makeHandleIntentFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96BA8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeAppResolutionFlowProducer<A, B>(app:)()
{
  return MEMORY[0x24BE96BB8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeContinueInAppFlowWithDialogProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96BD8]();
}

uint64_t static RCHChildFlowFactoryHelper.makeNeedsDisambiguationFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96C00]();
}

uint64_t static RCHChildFlowFactoryHelper.makeConditionalConfirmIntentFlowProducer<A>(strategy:_:)()
{
  return MEMORY[0x24BE96C18]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndCancelFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96C30]();
}

uint64_t static RCHChildFlowFactoryHelper.makeUnsupportedValueAndPromptFlowProducer<A>(strategy:)()
{
  return MEMORY[0x24BE96C40]();
}

uint64_t RCHChildFlowProducersAsync.needsValueFlowProducer.setter()
{
  return MEMORY[0x24BE96C68]();
}

uint64_t RCHChildFlowProducersAsync.handleIntentFlowProducer.setter()
{
  return MEMORY[0x24BE96C70]();
}

uint64_t RCHChildFlowProducersAsync.appResolutionFlowProducer.setter()
{
  return MEMORY[0x24BE96C78]();
}

uint64_t RCHChildFlowProducersAsync.confirmIntentFlowProducer.setter()
{
  return MEMORY[0x24BE96C80]();
}

uint64_t RCHChildFlowProducersAsync.continueInAppFlowProducer.setter()
{
  return MEMORY[0x24BE96C88]();
}

uint64_t RCHChildFlowProducersAsync.unsupportedValueFlowProducer.setter()
{
  return MEMORY[0x24BE96C90]();
}

uint64_t RCHChildFlowProducersAsync.needsDisambiguationFlowProducer.setter()
{
  return MEMORY[0x24BE96CA0]();
}

uint64_t RCHChildFlowProducersAsync.init()()
{
  return MEMORY[0x24BE96CB8]();
}

uint64_t RCHChildFlowFactory.init(producers:)()
{
  return MEMORY[0x24BE96CD0]();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return MEMORY[0x24BE96E78]();
}

uint64_t Flow.deferToExecuteAsync(_:)()
{
  return MEMORY[0x24BE96E98]();
}

uint64_t Flow.flexibleExecutionSupport.getter()
{
  return MEMORY[0x24BE96EA0]();
}

uint64_t Flow.onAsync(input:)()
{
  return MEMORY[0x24BE96EC0]();
}

uint64_t Flow<>.exitValue.getter()
{
  return MEMORY[0x24BE96ED0]();
}

uint64_t static SiriKitEventSender.current.getter()
{
  return MEMORY[0x24BE96FC0]();
}

uint64_t dispatch thunk of SiriKitEventSending.send(_:)()
{
  return MEMORY[0x24BE96FE8]();
}

uint64_t SiriKitIntentHandler.init<A>(app:intentHandler:intent:)()
{
  return MEMORY[0x24BE97000]();
}

uint64_t type metadata accessor for SiriKitIntentHandler()
{
  return MEMORY[0x24BE97008]();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.build()()
{
  return MEMORY[0x24BE97038]();
}

uint64_t dispatch thunk of SiriKitAceViewBuilder.addButton(label:command:)()
{
  return MEMORY[0x24BE97040]();
}

uint64_t SiriKitAceViewBuilder.__allocating_init()()
{
  return MEMORY[0x24BE97050]();
}

uint64_t type metadata accessor for SiriKitAceViewBuilder()
{
  return MEMORY[0x24BE97058]();
}

uint64_t static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)()
{
  return MEMORY[0x24BE97240]();
}

uint64_t static SiriKitIntentExecutionBehavior.standard()()
{
  return MEMORY[0x24BE97248]();
}

uint64_t type metadata accessor for SiriKitIntentExecutionBehavior()
{
  return MEMORY[0x24BE97250]();
}

uint64_t static SiriKitEvent.uufrReady()()
{
  return MEMORY[0x24BE97390]();
}

uint64_t type metadata accessor for SiriKitEvent()
{
  return MEMORY[0x24BE97398]();
}

uint64_t static AceService.currentAsync.getter()
{
  return MEMORY[0x24BE973E0]();
}

uint64_t dispatch thunk of DeviceState.isEyesFree.getter()
{
  return MEMORY[0x24BE97538]();
}

uint64_t dispatch thunk of DeviceState.isXRDevice.getter()
{
  return MEMORY[0x24BE97548]();
}

uint64_t dispatch thunk of DeviceState.siriLocale.getter()
{
  return MEMORY[0x24BE97550]();
}

uint64_t dispatch thunk of DeviceState.inputOrigin.getter()
{
  return MEMORY[0x24BE97558]();
}

uint64_t dispatch thunk of DeviceState.isCarDNDMode.getter()
{
  return MEMORY[0x24BE97560]();
}

uint64_t dispatch thunk of DeviceState.interactionType.getter()
{
  return MEMORY[0x24BE97580]();
}

uint64_t dispatch thunk of DeviceState.isAuthenticated(for:)()
{
  return MEMORY[0x24BE97588]();
}

uint64_t dispatch thunk of DeviceState.isLockedWithPasscode.getter()
{
  return MEMORY[0x24BE975A0]();
}

uint64_t dispatch thunk of DeviceState.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x24BE975A8]();
}

uint64_t dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter()
{
  return MEMORY[0x24BE975B0]();
}

uint64_t dispatch thunk of DeviceState.isMac.getter()
{
  return MEMORY[0x24BE975D0]();
}

uint64_t dispatch thunk of DeviceState.isPad.getter()
{
  return MEMORY[0x24BE975D8]();
}

uint64_t dispatch thunk of DeviceState.isPod.getter()
{
  return MEMORY[0x24BE975E0]();
}

uint64_t dispatch thunk of DeviceState.isPhone.getter()
{
  return MEMORY[0x24BE975E8]();
}

uint64_t dispatch thunk of DeviceState.isWatch.getter()
{
  return MEMORY[0x24BE975F0]();
}

uint64_t dispatch thunk of DeviceState.isAppleTV.getter()
{
  return MEMORY[0x24BE975F8]();
}

uint64_t dispatch thunk of DeviceState.isCarPlay.getter()
{
  return MEMORY[0x24BE97600]();
}

uint64_t dispatch thunk of DeviceState.isHomePod.getter()
{
  return MEMORY[0x24BE97608]();
}

uint64_t DeviceState.userAssignedDeviceName.getter()
{
  return MEMORY[0x24BE97610]();
}

uint64_t DeviceState.asInvocationContext.getter()
{
  return MEMORY[0x24BE97670]();
}

uint64_t DeviceState.isVox.getter()
{
  return MEMORY[0x24BE97698]();
}

uint64_t static DialogPhase.completion.getter()
{
  return MEMORY[0x24BE976A8]();
}

uint64_t static DialogPhase.confirmation.getter()
{
  return MEMORY[0x24BE976B8]();
}

uint64_t static DialogPhase.clarification.getter()
{
  return MEMORY[0x24BE976C0]();
}

uint64_t type metadata accessor for DialogPhase()
{
  return MEMORY[0x24BE97700]();
}

uint64_t DisplayHint.displayValue.getter()
{
  return MEMORY[0x24BE97718]();
}

uint64_t DisplayHint.init(idValue:displayValue:)()
{
  return MEMORY[0x24BE97720]();
}

uint64_t DisplayHint.idValue.getter()
{
  return MEMORY[0x24BE97728]();
}

uint64_t type metadata accessor for DisplayHint()
{
  return MEMORY[0x24BE97730]();
}

uint64_t static EmptyOutput.instance.getter()
{
  return MEMORY[0x24BE97740]();
}

uint64_t type metadata accessor for EmptyOutput()
{
  return MEMORY[0x24BE97748]();
}

uint64_t type metadata accessor for ResponseType()
{
  return MEMORY[0x24BE97968]();
}

uint64_t static CasinoFactory.makeReferentialAbstractCommand(originalCommand:)()
{
  return MEMORY[0x24BE979E8]();
}

uint64_t SemanticValue.label.getter()
{
  return MEMORY[0x24BE97A50]();
}

uint64_t SemanticValue.init(string:label:)()
{
  return MEMORY[0x24BE97A68]();
}

uint64_t SemanticValue.string.getter()
{
  return MEMORY[0x24BE97A70]();
}

uint64_t type metadata accessor for SemanticValue()
{
  return MEMORY[0x24BE97A98]();
}

uint64_t static ActionForInput.cancel()()
{
  return MEMORY[0x24BE97AA8]();
}

uint64_t static ActionForInput.handle()()
{
  return MEMORY[0x24BE97AB0]();
}

uint64_t static ActionForInput.ignore()()
{
  return MEMORY[0x24BE97AB8]();
}

uint64_t RCHFlowFactory.makeRCHFlowWithResolvedApp(_:intent:)()
{
  return MEMORY[0x24BE97C18]();
}

uint64_t RCHFlowFactory.init(strategy:childFlowFactory:)()
{
  return MEMORY[0x24BE97C20]();
}

uint64_t TemplatingText.init(text:speakableTextOverride:)()
{
  return MEMORY[0x24BE97C68]();
}

uint64_t TemplatingText.text.getter()
{
  return MEMORY[0x24BE97C70]();
}

uint64_t type metadata accessor for TemplatingText()
{
  return MEMORY[0x24BE97C78]();
}

uint64_t static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CA0]();
}

uint64_t static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CB0]();
}

uint64_t static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CB8]();
}

uint64_t static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)()
{
  return MEMORY[0x24BE97CE8]();
}

uint64_t static ExecuteResponse.ongoing<A>(next:childCompletion:)()
{
  return MEMORY[0x24BE97D08]();
}

uint64_t static ExecuteResponse.complete(next:)()
{
  return MEMORY[0x24BE97D48]();
}

uint64_t static ExecuteResponse.complete()()
{
  return MEMORY[0x24BE97D58]();
}

uint64_t NLContextUpdate.rrEntities.setter()
{
  return MEMORY[0x24BE97DA0]();
}

uint64_t NLContextUpdate.displayHints.setter()
{
  return MEMORY[0x24BE97DA8]();
}

uint64_t NLContextUpdate.currentDomainName.setter()
{
  return MEMORY[0x24BE97DB8]();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return MEMORY[0x24BE97DC8]();
}

uint64_t NLContextUpdate.weightedPromptStrict.setter()
{
  return MEMORY[0x24BE97DE0]();
}

uint64_t NLContextUpdate.applicationContextObjects.setter()
{
  return MEMORY[0x24BE97DE8]();
}

uint64_t NLContextUpdate.dictationPromptAbortValues.setter()
{
  return MEMORY[0x24BE97DF8]();
}

uint64_t NLContextUpdate.dictationPromptTargetNodes.setter()
{
  return MEMORY[0x24BE97E00]();
}

uint64_t NLContextUpdate.weightedPromptTargetDomain.setter()
{
  return MEMORY[0x24BE97E08]();
}

uint64_t NLContextUpdate.dictationPromptTargetDomain.setter()
{
  return MEMORY[0x24BE97E10]();
}

uint64_t NLContextUpdate.weightedPromptResponseOptions.setter()
{
  return MEMORY[0x24BE97E20]();
}

uint64_t NLContextUpdate.weightedPromptResponseTargets.setter()
{
  return MEMORY[0x24BE97E30]();
}

uint64_t NLContextUpdate.nlInput.setter()
{
  return MEMORY[0x24BE97E48]();
}

uint64_t NLContextUpdate.init()()
{
  return MEMORY[0x24BE97E50]();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return MEMORY[0x24BE97E58]();
}

uint64_t static PaginationStyle.noPagination()()
{
  return MEMORY[0x24BE97E78]();
}

uint64_t type metadata accessor for PaginationStyle()
{
  return MEMORY[0x24BE97E80]();
}

uint64_t ResponseFactory.init()()
{
  return MEMORY[0x24BE97F28]();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return MEMORY[0x24BE97F30]();
}

uint64_t static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)()
{
  return MEMORY[0x24BE97F78]();
}

uint64_t TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)()
{
  return MEMORY[0x24BE97FA8]();
}

uint64_t TemplatingResult.templateIdentifier.getter()
{
  return MEMORY[0x24BE97FB0]();
}

uint64_t TemplatingResult.behaviorAfterSpeaking.getter()
{
  return MEMORY[0x24BE97FB8]();
}

uint64_t TemplatingResult.sections.getter()
{
  return MEMORY[0x24BE97FD8]();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return MEMORY[0x24BE97FE0]();
}

uint64_t RelationshipLabel.asUnboundedSemanticValue.getter()
{
  return MEMORY[0x24BE980D0]();
}

uint64_t type metadata accessor for RelationshipLabel()
{
  return MEMORY[0x24BE980F0]();
}

uint64_t TemplatingSection.init(id:content:caption:spokenOnly:)()
{
  return MEMORY[0x24BE98170]();
}

uint64_t TemplatingSection.content.getter()
{
  return MEMORY[0x24BE98180]();
}

uint64_t type metadata accessor for TemplatingSection()
{
  return MEMORY[0x24BE98188]();
}

uint64_t IntentPromptAnswer.init(answeredValue:updatedIntent:)()
{
  return MEMORY[0x24BE981B8]();
}

uint64_t type metadata accessor for IntentPromptAnswer()
{
  return MEMORY[0x24BE981C0]();
}

uint64_t static UnlockDevicePolicy.requiringDeviceUnlock.getter()
{
  return MEMORY[0x24BE98308]();
}

uint64_t type metadata accessor for UnlockDevicePolicy()
{
  return MEMORY[0x24BE98320]();
}

uint64_t ConfirmIntentAnswer.init(confirmationResponse:intent:)()
{
  return MEMORY[0x24BE98388]();
}

uint64_t ParameterIdentifier.name.getter()
{
  return MEMORY[0x24BE983D0]();
}

uint64_t type metadata accessor for ParameterIdentifier()
{
  return MEMORY[0x24BE983D8]();
}

uint64_t type metadata accessor for ConfirmationResponse()
{
  return MEMORY[0x24BE98408]();
}

uint64_t static DisambiguationResult.chosenItem(_:)()
{
  return MEMORY[0x24BE984A0]();
}

uint64_t RCHFlowStrategyAsync.makeErrorResponse(error:)()
{
  return MEMORY[0x24BE984F0]();
}

uint64_t RCHFlowStrategyAsync.makeParameterMetadata(intent:)()
{
  return MEMORY[0x24BE98500]();
}

uint64_t type metadata accessor for BehaviorAfterSpeaking()
{
  return MEMORY[0x24BE98578]();
}

uint64_t AceServiceInvokerAsync.submit<A>(_:)()
{
  return MEMORY[0x24BE98640]();
}

uint64_t IntentResolutionRecord.intentResponse.getter()
{
  return MEMORY[0x24BE98698]();
}

uint64_t IntentResolutionRecord.intent.getter()
{
  return MEMORY[0x24BE986B0]();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return MEMORY[0x24BE986D0]();
}

uint64_t PaginatedItemContainer.init(items:paginationStyle:)()
{
  return MEMORY[0x24BE986E0]();
}

uint64_t PaginatedItemContainer.items.getter()
{
  return MEMORY[0x24BE986E8]();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)()
{
  return MEMORY[0x24BE98740]();
}

uint64_t dispatch thunk of MachineUtteranceBuilder.build()()
{
  return MEMORY[0x24BE98750]();
}

uint64_t MachineUtteranceBuilder.init()()
{
  return MEMORY[0x24BE98760]();
}

uint64_t type metadata accessor for MachineUtteranceBuilder()
{
  return MEMORY[0x24BE98768]();
}

uint64_t static UnsetRelationshipPerson.from(personNode:)()
{
  return MEMORY[0x24BE987A8]();
}

uint64_t UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)()
{
  return MEMORY[0x24BE987B0]();
}

uint64_t type metadata accessor for UnsetRelationshipPerson()
{
  return MEMORY[0x24BE987B8]();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return MEMORY[0x24BE98808]();
}

uint64_t OutputGenerationManifest.responseMode.setter()
{
  return MEMORY[0x24BE98820]();
}

uint64_t OutputGenerationManifest.responseType.setter()
{
  return MEMORY[0x24BE98830]();
}

uint64_t OutputGenerationManifest.responseViewId.setter()
{
  return MEMORY[0x24BE98848]();
}

uint64_t OutputGenerationManifest.canUseServerTTS.setter()
{
  return MEMORY[0x24BE98858]();
}

uint64_t OutputGenerationManifest.nlContextUpdate.setter()
{
  return MEMORY[0x24BE98868]();
}

uint64_t OutputGenerationManifest.listenAfterSpeaking.setter()
{
  return MEMORY[0x24BE98898]();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return MEMORY[0x24BE988E0]();
}

uint64_t ParameterResolutionRecord.intent.getter()
{
  return MEMORY[0x24BE98950]();
}

uint64_t ParameterResolutionRecord.result.getter()
{
  return MEMORY[0x24BE98958]();
}

uint64_t ParameterResolutionRecord.parameter.getter()
{
  return MEMORY[0x24BE98960]();
}

uint64_t type metadata accessor for ParameterResolutionRecord()
{
  return MEMORY[0x24BE98968]();
}

uint64_t OrdinalDisplayHintsBuilder.init(referenceNode:)()
{
  return MEMORY[0x24BE989A8]();
}

uint64_t OrdinalDisplayHintsBuilder.build(for:)()
{
  return MEMORY[0x24BE989B0]();
}

uint64_t type metadata accessor for OrdinalDisplayHintsBuilder()
{
  return MEMORY[0x24BE989B8]();
}

uint64_t type metadata accessor for WindowedPaginationParameters()
{
  return MEMORY[0x24BE98B28]();
}

uint64_t BasicDisambiguationItemContainer.__allocating_init(_:_:)()
{
  return MEMORY[0x24BE98C88]();
}

uint64_t BasicDisambiguationItemContainer.init(_:_:)()
{
  return MEMORY[0x24BE98C90]();
}

uint64_t ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)()
{
  return MEMORY[0x24BE98CA8]();
}

uint64_t ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)()
{
  return MEMORY[0x24BE98CB8]();
}

uint64_t Input.description.getter()
{
  return MEMORY[0x24BE98DB0]();
}

uint64_t Input.parse.getter()
{
  return MEMORY[0x24BE98DC0]();
}

uint64_t type metadata accessor for Input()
{
  return MEMORY[0x24BE98DD0]();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return MEMORY[0x24BE98E30]();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return MEMORY[0x24BE98E38]();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return MEMORY[0x24BE98E40]();
}

uint64_t type metadata accessor for Parse()
{
  return MEMORY[0x24BE98EA8]();
}

uint64_t static Device.current.getter()
{
  return MEMORY[0x24BE98EE0]();
}

uint64_t USOParse.debugDescription.getter()
{
  return MEMORY[0x24BE99030]();
}

uint64_t USOParse.userParse.getter()
{
  return MEMORY[0x24BE99040]();
}

uint64_t type metadata accessor for USOParse()
{
  return MEMORY[0x24BE99050]();
}

uint64_t AceOutput.init(commands:flowActivity:nlContextUpdate:)()
{
  return MEMORY[0x24BE99070]();
}

uint64_t AceOutput.init(commands:flowActivity:)()
{
  return MEMORY[0x24BE99078]();
}

uint64_t AceOutput.commands.getter()
{
  return MEMORY[0x24BE99080]();
}

uint64_t type metadata accessor for AceOutput()
{
  return MEMORY[0x24BE99090]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t Siri_Nlu_External_UsoGraph.identifiers.getter()
{
  return MEMORY[0x24BE9C290]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x24BE9C2B8]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return MEMORY[0x24BE9C3E8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return MEMORY[0x24BE9C450]();
}

uint64_t Siri_Nlu_External_SystemOffered.offeredAct.setter()
{
  return MEMORY[0x24BE9C6D0]();
}

uint64_t Siri_Nlu_External_SystemOffered.init()()
{
  return MEMORY[0x24BE9C6D8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemOffered()
{
  return MEMORY[0x24BE9C6E0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return MEMORY[0x24BE9C710]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return MEMORY[0x24BE9C720]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasRejected.getter()
{
  return MEMORY[0x24BE9C728]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return MEMORY[0x24BE9C740]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return MEMORY[0x24BE9C768]();
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.setter()
{
  return MEMORY[0x24BE9C770]();
}

uint64_t Siri_Nlu_External_UserDialogAct.wantedToProceed.setter()
{
  return MEMORY[0x24BE9C7A0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.init()()
{
  return MEMORY[0x24BE9C820]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x24BE9C828]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemPrompted()
{
  return MEMORY[0x24BE9CAF0]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return MEMORY[0x24BE9CB10]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x24BE9CB28]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.gaveOptions.setter()
{
  return MEMORY[0x24BE9CCD0]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.offered.setter()
{
  return MEMORY[0x24BE9CD40]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.prompted.setter()
{
  return MEMORY[0x24BE9CD58]();
}

uint64_t Siri_Nlu_External_SystemDialogAct.init()()
{
  return MEMORY[0x24BE9CD68]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return MEMORY[0x24BE9CD70]();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.choices.setter()
{
  return MEMORY[0x24BE9CF00]();
}

uint64_t Siri_Nlu_External_SystemGaveOptions.init()()
{
  return MEMORY[0x24BE9CF08]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemGaveOptions()
{
  return MEMORY[0x24BE9CF10]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserWantedToProceed()
{
  return MEMORY[0x24BE9D0F0]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter()
{
  return MEMORY[0x24BE9D0F8]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.value.getter()
{
  return MEMORY[0x24BE9D100]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.namespace.getter()
{
  return MEMORY[0x24BE9D108]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier()
{
  return MEMORY[0x24BE9D110]();
}

uint64_t static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)()
{
  return MEMORY[0x24BE9E008]();
}

uint64_t static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)()
{
  return MEMORY[0x24BE9E028]();
}

uint64_t NonTerminalOntologyNode.init(name:multicardinal:childNodes:)()
{
  return MEMORY[0x24BE9EAF8]();
}

uint64_t type metadata accessor for NonTerminalOntologyNode()
{
  return MEMORY[0x24BE9EB10]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter()
{
  return MEMORY[0x24BE9EB40]();
}

uint64_t dispatch thunk of UsoEntity_commonContact_ContactAttribute.definedValue.getter()
{
  return MEMORY[0x24BE9ED10]();
}

uint64_t type metadata accessor for UsoEntity_commonContact_ContactAttribute.DefinedValues()
{
  return MEMORY[0x24BE9ED20]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)()
{
  return MEMORY[0x24BE9ED38]();
}

uint64_t DomainOntologyNode.init(name:childNodes:isInEventTree:)()
{
  return MEMORY[0x24BE9EE58]();
}

uint64_t type metadata accessor for DomainOntologyNode()
{
  return MEMORY[0x24BE9EE60]();
}

uint64_t static PersonOntologyNode.personSelfReferenceNode.getter()
{
  return MEMORY[0x24BE9EE88]();
}

uint64_t PersonOntologyNode.PersonNamePrefix.rawValue.getter()
{
  return MEMORY[0x24BE9EE90]();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePrefix()
{
  return MEMORY[0x24BE9EE98]();
}

uint64_t PersonOntologyNode.PersonNamePostfix.rawValue.getter()
{
  return MEMORY[0x24BE9EEA8]();
}

uint64_t type metadata accessor for PersonOntologyNode.PersonNamePostfix()
{
  return MEMORY[0x24BE9EEB0]();
}

uint64_t PersonOntologyNode.init(name:multicardinal:)()
{
  return MEMORY[0x24BE9EEE8]();
}

uint64_t type metadata accessor for PersonOntologyNode()
{
  return MEMORY[0x24BE9EEF0]();
}

uint64_t TerminalOntologyNode.init(name:multicardinal:)()
{
  return MEMORY[0x24BE9EF18]();
}

uint64_t TerminalOntologyNode.name.getter()
{
  return MEMORY[0x24BE9EF20]();
}

uint64_t dispatch thunk of IntentNode.ontologyNodeName.getter()
{
  return MEMORY[0x24BE9F728]();
}

uint64_t dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)()
{
  return MEMORY[0x24BE9F730]();
}

uint64_t dispatch thunk of CodeGenBase.usoIdentifiers.getter()
{
  return MEMORY[0x24BE9F750]();
}

uint64_t CodeGenBase.entity.getter()
{
  return MEMORY[0x24BE9F768]();
}

uint64_t UsoIdentifier.appBundleSemantic.getter()
{
  return MEMORY[0x24BE9F950]();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:)()
{
  return MEMORY[0x24BE9F988]();
}

uint64_t UsoIdentifier.value.getter()
{
  return MEMORY[0x24BE9F990]();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return MEMORY[0x24BE9F998]();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return MEMORY[0x24BE9F9A0]();
}

uint64_t NLIntentWrapper.traversableOntologyNode.getter()
{
  return MEMORY[0x24BE9FAB0]();
}

uint64_t NLIntentWrapper.description.getter()
{
  return MEMORY[0x24BE9FAB8]();
}

uint64_t NLIntentWrapper.traversableIntentNode.getter()
{
  return MEMORY[0x24BE9FAC0]();
}

uint64_t TerminalElement.DateTimeValue.startDate.getter()
{
  return MEMORY[0x24BE9FB78]();
}

uint64_t TerminalElement.DateTimeValue.interval.getter()
{
  return MEMORY[0x24BE9FBB0]();
}

uint64_t type metadata accessor for TerminalElement.DateTimeValue()
{
  return MEMORY[0x24BE9FBC0]();
}

uint64_t TerminalElement.OriginalValue.isFresh.getter()
{
  return MEMORY[0x24BE9FBF0]();
}

uint64_t type metadata accessor for TerminalElement.OriginalValue()
{
  return MEMORY[0x24BE9FBF8]();
}

uint64_t TerminalElement.originalValue.getter()
{
  return MEMORY[0x24BE9FC30]();
}

uint64_t TerminalElement.DateTimePeriod.period.getter()
{
  return MEMORY[0x24BE9FC38]();
}

uint64_t type metadata accessor for TerminalElement.DateTimePeriod()
{
  return MEMORY[0x24BE9FC40]();
}

uint64_t TerminalElement.Date.dayOfMonth.getter()
{
  return MEMORY[0x24BE9FC78]();
}

uint64_t TerminalElement.Date.dayOfWeekOrdinalValue.getter()
{
  return MEMORY[0x24BE9FC80]();
}

uint64_t TerminalElement.Date.year.getter()
{
  return MEMORY[0x24BE9FC88]();
}

uint64_t TerminalElement.Date.month.getter()
{
  return MEMORY[0x24BE9FC90]();
}

uint64_t TerminalElement.Date.periods.getter()
{
  return MEMORY[0x24BE9FC98]();
}

uint64_t TerminalElement.Date.dayOfWeek.getter()
{
  return MEMORY[0x24BE9FCA0]();
}

uint64_t type metadata accessor for TerminalElement.Date()
{
  return MEMORY[0x24BE9FCA8]();
}

uint64_t type metadata accessor for TerminalElement.Period()
{
  return MEMORY[0x24BE9FD98]();
}

uint64_t TerminalElement.Interval.period.getter()
{
  return MEMORY[0x24BE9FDD8]();
}

uint64_t TerminalElement.Interval.quantity.getter()
{
  return MEMORY[0x24BE9FDE0]();
}

uint64_t TerminalElement.Interval.qualifier.getter()
{
  return MEMORY[0x24BE9FDE8]();
}

uint64_t type metadata accessor for TerminalElement.Interval()
{
  return MEMORY[0x24BE9FDF0]();
}

uint64_t type metadata accessor for TerminalElement.DayOfWeek()
{
  return MEMORY[0x24BE9FE00]();
}

uint64_t static TerminalElement.Qualifier.== infix(_:_:)()
{
  return MEMORY[0x24BE9FE10]();
}

uint64_t type metadata accessor for TerminalElement.Qualifier()
{
  return MEMORY[0x24BE9FE28]();
}

uint64_t type metadata accessor for TerminalElement()
{
  return MEMORY[0x24BE9FE40]();
}

uint64_t static UsoGraphBuilder.buildGraphWithOptions(taskBuilders:options:)()
{
  return MEMORY[0x24BE9FE58]();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return MEMORY[0x24BE9FE70]();
}

uint64_t PersonIntentNode.init(intentNode:ontologyNode:)()
{
  return MEMORY[0x24BE9FE88]();
}

uint64_t type metadata accessor for PersonIntentNode()
{
  return MEMORY[0x24BE9FEA0]();
}

uint64_t dispatch thunk of CodeGenExpression.operatorAsString.getter()
{
  return MEMORY[0x24BE9FF08]();
}

uint64_t dispatch thunk of CodeGenExpression.operand.getter()
{
  return MEMORY[0x24BE9FF10]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter()
{
  return MEMORY[0x24BE9FF28]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter()
{
  return MEMORY[0x24BE9FF30]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return MEMORY[0x24BE9FF60]();
}

uint64_t type metadata accessor for UsoBuilderOptions()
{
  return MEMORY[0x24BE9FF78]();
}

uint64_t TerminalIntentNode.elements.getter()
{
  return MEMORY[0x24BE9FFA0]();
}

uint64_t type metadata accessor for TerminalIntentNode()
{
  return MEMORY[0x24BE9FFB0]();
}

uint64_t IdentifierAppBundle.rawValue.getter()
{
  return MEMORY[0x24BEA0048]();
}

uint64_t type metadata accessor for IdentifierAppBundle()
{
  return MEMORY[0x24BEA0058]();
}

uint64_t dispatch thunk of UsoEntity_common_Age.referenceDateTime.getter()
{
  return MEMORY[0x24BEA00D0]();
}

uint64_t IntentNodeTraversable.intentNode(forOntologyNode:)()
{
  return MEMORY[0x24BEA0148]();
}

uint64_t IntentNodeTraversable.intentNode<A>(forOntologyNode:)()
{
  return MEMORY[0x24BEA0150]();
}

uint64_t IntentNodeTraversable.value<A>(forNode:)()
{
  return MEMORY[0x24BEA0168]();
}

uint64_t IntentNodeTraversable.values<A>(forNode:)()
{
  return MEMORY[0x24BEA0170]();
}

uint64_t NonTerminalIntentNode.ontologyNodeName.getter()
{
  return MEMORY[0x24BEA0180]();
}

uint64_t NonTerminalIntentNode.childNodes.getter()
{
  return MEMORY[0x24BEA0188]();
}

uint64_t type metadata accessor for NonTerminalIntentNode()
{
  return MEMORY[0x24BEA01A8]();
}

uint64_t UsoEntity_common_Date.toDate()()
{
  return MEMORY[0x24BE930A0]();
}

uint64_t dispatch thunk of UsoEntity_common_Date.name.getter()
{
  return MEMORY[0x24BEA0228]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.attributes.getter()
{
  return MEMORY[0x24BEA0458]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.definedValue.getter()
{
  return MEMORY[0x24BEA0460]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.phoneticName.getter()
{
  return MEMORY[0x24BEA0468]();
}

uint64_t type metadata accessor for UsoEntity_common_Person.DefinedValues()
{
  return MEMORY[0x24BEA0478]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.associatedDate.getter()
{
  return MEMORY[0x24BEA0498]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.structuredName.getter()
{
  return MEMORY[0x24BEA04A0]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.associatedOrganization.getter()
{
  return MEMORY[0x24BEA04A8]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.phoneticStructuredName.getter()
{
  return MEMORY[0x24BEA04B0]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.identifyingRelationship.getter()
{
  return MEMORY[0x24BEA04B8]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.specifyingContactAddress.getter()
{
  return MEMORY[0x24BEA04C0]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.structuredNameAsExpression.getter()
{
  return MEMORY[0x24BEA04C8]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.age.getter()
{
  return MEMORY[0x24BEA04D0]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.name.getter()
{
  return MEMORY[0x24BEA04D8]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.birthdate.getter()
{
  return MEMORY[0x24BEA04E0]();
}

uint64_t type metadata accessor for UsoEntity_common_Person()
{
  return MEMORY[0x24BEA04E8]();
}

uint64_t PrimitiveStringOperators.init(rawValue:)()
{
  return MEMORY[0x24BEA0520]();
}

uint64_t type metadata accessor for PrimitiveStringOperators()
{
  return MEMORY[0x24BEA0538]();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return MEMORY[0x24BEA0690]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)()
{
  return MEMORY[0x24BEA06B0]();
}

uint64_t dispatch thunk of UsoEntity_common_DateTime.date.getter()
{
  return MEMORY[0x24BEA0710]();
}

uint64_t PersonIntentNodeContaining.middleName.getter()
{
  return MEMORY[0x24BEA0900]();
}

uint64_t PersonIntentNodeContaining.namePrefix.getter()
{
  return MEMORY[0x24BEA0908]();
}

uint64_t PersonIntentNodeContaining.namePostfix.getter()
{
  return MEMORY[0x24BEA0910]();
}

uint64_t PersonIntentNodeContaining.relationship.getter()
{
  return MEMORY[0x24BEA0918]();
}

uint64_t PersonIntentNodeContaining.company.getter()
{
  return MEMORY[0x24BEA0928]();
}

uint64_t PersonIntentNodeContaining.fullName.getter()
{
  return MEMORY[0x24BEA0930]();
}

uint64_t PersonIntentNodeContaining.lastName.getter()
{
  return MEMORY[0x24BEA0938]();
}

uint64_t PersonIntentNodeContaining.nickName.getter()
{
  return MEMORY[0x24BEA0940]();
}

uint64_t PersonIntentNodeContaining.firstName.getter()
{
  return MEMORY[0x24BEA0948]();
}

uint64_t static UsoEntity_CodeGenConverter.convert(entity:)()
{
  return MEMORY[0x24BEA0980]();
}

uint64_t static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)()
{
  return MEMORY[0x24BEA0990]();
}

uint64_t type metadata accessor for UsoTask_read_common_Person()
{
  return MEMORY[0x24BEA0AE0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return MEMORY[0x24BEA0B28]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonName.nickName.getter()
{
  return MEMORY[0x24BEA0BA8]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonName.nickNameAsExpression.getter()
{
  return MEMORY[0x24BEA0BB8]();
}

uint64_t dispatch thunk of UsoEntity_common_Quantifier.definedValue.getter()
{
  return MEMORY[0x24BEA0C18]();
}

uint64_t type metadata accessor for UsoEntity_common_Quantifier.DefinedValues()
{
  return MEMORY[0x24BEA0C60]();
}

uint64_t type metadata accessor for UsoTask_noVerb_uso_NoEntity()
{
  return MEMORY[0x24BEA0CF8]();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneNumber.label.getter()
{
  return MEMORY[0x24BEA0EB8]();
}

uint64_t dispatch thunk of UsoEntity_common_PhoneNumber.value.getter()
{
  return MEMORY[0x24BEA0EC0]();
}

uint64_t type metadata accessor for UsoEntity_common_PhoneNumber()
{
  return MEMORY[0x24BEA0EC8]();
}

uint64_t type metadata accessor for UsoTask_create_common_Person()
{
  return MEMORY[0x24BEA0F20]();
}

uint64_t type metadata accessor for UsoTask_delete_common_Person()
{
  return MEMORY[0x24BEA0F28]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Person()
{
  return MEMORY[0x24BEA0F38]();
}

uint64_t type metadata accessor for UsoTask_update_common_Person()
{
  return MEMORY[0x24BEA0FA8]();
}

uint64_t dispatch thunk of UsoEntity_common_EmailAddress.label.getter()
{
  return MEMORY[0x24BEA1088]();
}

uint64_t dispatch thunk of UsoEntity_common_EmailAddress.value.getter()
{
  return MEMORY[0x24BEA1090]();
}

uint64_t type metadata accessor for UsoEntity_common_EmailAddress()
{
  return MEMORY[0x24BEA1098]();
}

uint64_t dispatch thunk of UsoEntity_common_Organization.name.getter()
{
  return MEMORY[0x24BEA12B0]();
}

uint64_t type metadata accessor for UsoTask_request_common_Person()
{
  return MEMORY[0x24BEA13E8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setStructuredName(value:)()
{
  return MEMORY[0x24BEA14B0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationship(value:)()
{
  return MEMORY[0x24BEA14C8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setSpecifyingContactAddress(value:)()
{
  return MEMORY[0x24BEA14D0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.name.getter()
{
  return MEMORY[0x24BEA14D8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.setName(value:)()
{
  return MEMORY[0x24BEA14E0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_Person.__allocating_init()()
{
  return MEMORY[0x24BEA1500]();
}

uint64_t UsoEntityBuilder_common_Person.init()()
{
  return MEMORY[0x24BEA1508]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_Person()
{
  return MEMORY[0x24BEA1510]();
}

uint64_t dispatch thunk of UsoEntity_common_PostalAddress.label.getter()
{
  return MEMORY[0x24BEA17C0]();
}

uint64_t type metadata accessor for UsoEntity_common_PostalAddress()
{
  return MEMORY[0x24BEA17E0]();
}

uint64_t dispatch thunk of UsoEntity_common_ContactAddress.label.getter()
{
  return MEMORY[0x24BEA1B58]();
}

uint64_t type metadata accessor for UsoEntity_common_ContactAddress()
{
  return MEMORY[0x24BEA1B68]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Person()
{
  return MEMORY[0x24BEA1CA8]();
}

uint64_t static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)()
{
  return MEMORY[0x24BEA1CD8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter()
{
  return MEMORY[0x24BEA2048]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter()
{
  return MEMORY[0x24BEA2050]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter()
{
  return MEMORY[0x24BEA2060]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter()
{
  return MEMORY[0x24BEA2068]();
}

uint64_t type metadata accessor for UsoTask_setIdentity_common_Person()
{
  return MEMORY[0x24BEA22C8]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_Reference.setReference(value:)()
{
  return MEMORY[0x24BEA22F8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePrefix(value:)()
{
  return MEMORY[0x24BEA2390]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNamePostfix(value:)()
{
  return MEMORY[0x24BEA2398]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setNickName(value:)()
{
  return MEMORY[0x24BEA23A0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setGivenName(value:)()
{
  return MEMORY[0x24BEA23A8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setFamilyName(value:)()
{
  return MEMORY[0x24BEA23B0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PersonName.setMiddleName(value:)()
{
  return MEMORY[0x24BEA23B8]();
}

uint64_t UsoEntityBuilder_common_PersonName.init()()
{
  return MEMORY[0x24BEA23D0]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PersonName()
{
  return MEMORY[0x24BEA23D8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setLabel(value:)()
{
  return MEMORY[0x24BEA25D8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PhoneNumber.setValue(value:)()
{
  return MEMORY[0x24BEA25E0]();
}

uint64_t UsoEntityBuilder_common_PhoneNumber.init()()
{
  return MEMORY[0x24BEA25F8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PhoneNumber()
{
  return MEMORY[0x24BEA2600]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.fromPerson.getter()
{
  return MEMORY[0x24BEA2670]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.relationshipType.getter()
{
  return MEMORY[0x24BEA2678]();
}

uint64_t dispatch thunk of UsoEntity_common_PersonRelationship.relationshipTypeAsExpression.getter()
{
  return MEMORY[0x24BEA2680]();
}

uint64_t dispatch thunk of UsoTaskBuilder_noVerb_common_Person.__allocating_init()()
{
  return MEMORY[0x24BEA2688]();
}

uint64_t type metadata accessor for UsoTaskBuilder_noVerb_common_Person()
{
  return MEMORY[0x24BEA2698]();
}

uint64_t UsoTaskBuilder_update_common_Person.init()()
{
  return MEMORY[0x24BEA26D0]();
}

uint64_t type metadata accessor for UsoTaskBuilder_update_common_Person()
{
  return MEMORY[0x24BEA26D8]();
}

uint64_t type metadata accessor for UsoTask_update_common_Communication()
{
  return MEMORY[0x24BEA2790]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setLabel(value:)()
{
  return MEMORY[0x24BEA27B8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_EmailAddress.setValue(value:)()
{
  return MEMORY[0x24BEA27C0]();
}

uint64_t UsoEntityBuilder_common_EmailAddress.init()()
{
  return MEMORY[0x24BEA27D8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_EmailAddress()
{
  return MEMORY[0x24BEA27E0]();
}

uint64_t UsoTaskBuilder_request_common_Person.init()()
{
  return MEMORY[0x24BEA2998]();
}

uint64_t type metadata accessor for UsoTaskBuilder_request_common_Person()
{
  return MEMORY[0x24BEA29A0]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Person()
{
  return MEMORY[0x24BEA29E8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setPostalCode(value:)()
{
  return MEMORY[0x24BEA2B78]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCountry(value:)()
{
  return MEMORY[0x24BEA2B80]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setProvince(value:)()
{
  return MEMORY[0x24BEA2B88]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setCity(value:)()
{
  return MEMORY[0x24BEA2B90]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setLabel(value:)()
{
  return MEMORY[0x24BEA2B98]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setValue(value:)()
{
  return MEMORY[0x24BEA2BA0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_PostalAddress.setStreet(value:)()
{
  return MEMORY[0x24BEA2BA8]();
}

uint64_t UsoEntityBuilder_common_PostalAddress.init()()
{
  return MEMORY[0x24BEA2BB8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PostalAddress()
{
  return MEMORY[0x24BEA2BC0]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_GeographicArea.setName(value:)()
{
  return MEMORY[0x24BEA2D88]();
}

uint64_t UsoEntityBuilder_common_GeographicArea.init()()
{
  return MEMORY[0x24BEA2D98]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_GeographicArea()
{
  return MEMORY[0x24BEA2DA0]();
}

uint64_t UsoTaskBuilder_summarise_common_Person.init()()
{
  return MEMORY[0x24BEA2E10]();
}

uint64_t type metadata accessor for UsoTaskBuilder_summarise_common_Person()
{
  return MEMORY[0x24BEA2E18]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceSelect.setSelect(value:)()
{
  return MEMORY[0x24BEA2FD8]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setReference(value:)()
{
  return MEMORY[0x24BEA2FE8]();
}

uint64_t dispatch thunk of Uso_VerbTemplateBuilder_ReferenceTarget.setTarget(value:)()
{
  return MEMORY[0x24BEA2FF0]();
}

uint64_t UsoEntityBuilder_common_PersonRelationship.init()()
{
  return MEMORY[0x24BEA31B8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_PersonRelationship()
{
  return MEMORY[0x24BEA31C0]();
}

uint64_t NLIntent.domainNode.getter()
{
  return MEMORY[0x24BEA3670]();
}

uint64_t type metadata accessor for NLIntent()
{
  return MEMORY[0x24BEA3710]();
}

uint64_t dispatch thunk of UsoValue.getAsPrimitiveValueString()()
{
  return MEMORY[0x24BEA3728]();
}

uint64_t UsoEntity.debugString.getter()
{
  return MEMORY[0x24BEA5508]();
}

uint64_t UsoEntity.attributes.getter()
{
  return MEMORY[0x24BEA3800]();
}

uint64_t UsoEntity.usoIdentifiers.getter()
{
  return MEMORY[0x24BEA3810]();
}

uint64_t type metadata accessor for UsoEntity()
{
  return MEMORY[0x24BEA3820]();
}

uint64_t dispatch thunk of InferenceError.log()()
{
  return MEMORY[0x24BE93280]();
}

uint64_t type metadata accessor for InferenceError()
{
  return MEMORY[0x24BE93288]();
}

uint64_t ContactQuery.middleName.setter()
{
  return MEMORY[0x24BE93410]();
}

uint64_t ContactQuery.namePrefix.setter()
{
  return MEMORY[0x24BE93420]();
}

uint64_t ContactQuery.nameSuffix.setter()
{
  return MEMORY[0x24BE93430]();
}

uint64_t ContactQuery.relationship.setter()
{
  return MEMORY[0x24BE93440]();
}

uint64_t ContactQuery.ontologySource.setter()
{
  return MEMORY[0x24BE93448]();
}

uint64_t ContactQuery.organizationName.setter()
{
  return MEMORY[0x24BE93450]();
}

uint64_t ContactQuery.previousFamilyName.setter()
{
  return MEMORY[0x24BE93458]();
}

uint64_t ContactQuery.isMe.setter()
{
  return MEMORY[0x24BE93478]();
}

uint64_t ContactQuery.handle.setter()
{
  return MEMORY[0x24BE93480]();
}

uint64_t ContactQuery.fullName.setter()
{
  return MEMORY[0x24BE93490]();
}

uint64_t ContactQuery.nickname.setter()
{
  return MEMORY[0x24BE934A0]();
}

uint64_t ContactQuery.init()()
{
  return MEMORY[0x24BE934B8]();
}

uint64_t type metadata accessor for ContactQuery()
{
  return MEMORY[0x24BE934C0]();
}

uint64_t type metadata accessor for ContactHandle.HandleType()
{
  return MEMORY[0x24BE93590]();
}

uint64_t ContactHandle.init(id:type:label:value:isSuggested:)()
{
  return MEMORY[0x24BE935B8]();
}

uint64_t ContactHandle.type.getter()
{
  return MEMORY[0x24BE935C8]();
}

uint64_t ContactHandle.label.getter()
{
  return MEMORY[0x24BE935D0]();
}

uint64_t ContactHandle.value.getter()
{
  return MEMORY[0x24BE935D8]();
}

uint64_t type metadata accessor for ContactHandle()
{
  return MEMORY[0x24BE935E0]();
}

uint64_t ContactResolver.AppCandidate.init(bundleId:type:)()
{
  return MEMORY[0x24BE936B8]();
}

uint64_t type metadata accessor for ContactResolver.AppCandidateType()
{
  return MEMORY[0x24BE936C8]();
}

uint64_t static ContactResolver.refreshSharedCache()()
{
  return MEMORY[0x24BE936D8]();
}

uint64_t dispatch thunk of ContactResolver.makeRecommendations(queries:config:)()
{
  return MEMORY[0x24BE936E0]();
}

uint64_t ContactResolver.init()()
{
  return MEMORY[0x24BE936F0]();
}

uint64_t type metadata accessor for ContactResolver()
{
  return MEMORY[0x24BE936F8]();
}

uint64_t type metadata accessor for RecommenderType()
{
  return MEMORY[0x24BE937B8]();
}

uint64_t DateTimeResolver.makeRecommendation(value:context:spec:)()
{
  return MEMORY[0x24BE937E8]();
}

uint64_t DateTimeResolver.init()()
{
  return MEMORY[0x24BE937F0]();
}

uint64_t type metadata accessor for DateTimeResolver()
{
  return MEMORY[0x24BE937F8]();
}

uint64_t ContactHandleQuery.init(type:label:value:)()
{
  return MEMORY[0x24BE93868]();
}

uint64_t type metadata accessor for ContactHandleQuery()
{
  return MEMORY[0x24BE93870]();
}

uint64_t type metadata accessor for ContactOntologySource()
{
  return MEMORY[0x24BE938C8]();
}

uint64_t ContactResolverConfig.init(intentId:intentTypeName:locale:logRunTimeData:processNLv3SpeechAlternatives:bundleIds:domainsToSearchForHistory:searchSuggestedContacts:handleTypePreference:recommender:customGenerator:)()
{
  return MEMORY[0x24BE938D8]();
}

uint64_t type metadata accessor for ContactResolverConfig()
{
  return MEMORY[0x24BE938F0]();
}

uint64_t static ContactResolverDomain.all.getter()
{
  return MEMORY[0x24BE93900]();
}

uint64_t type metadata accessor for ContactResolverDomain()
{
  return MEMORY[0x24BE93908]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy()
{
  return MEMORY[0x24BE93978]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.ExpandToType()
{
  return MEMORY[0x24BE93998]();
}

uint64_t DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)()
{
  return MEMORY[0x24BE939A0]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec()
{
  return MEMORY[0x24BE939B8]();
}

uint64_t type metadata accessor for SearchSuggestedContacts()
{
  return MEMORY[0x24BE939E0]();
}

uint64_t ContactRelationshipQuery.init(label:fromContact:)()
{
  return MEMORY[0x24BE939E8]();
}

uint64_t type metadata accessor for ContactRelationshipQuery()
{
  return MEMORY[0x24BE939F0]();
}

uint64_t type metadata accessor for DateTimeResolutionContext.Hemisphere()
{
  return MEMORY[0x24BE93A20]();
}

uint64_t DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)()
{
  return MEMORY[0x24BE93A38]();
}

uint64_t type metadata accessor for DateTimeResolutionContext()
{
  return MEMORY[0x24BE93A40]();
}

uint64_t static ContactHandleTypePreference.preferPhone.getter()
{
  return MEMORY[0x24BE93A80]();
}

uint64_t type metadata accessor for ContactHandleTypePreference()
{
  return MEMORY[0x24BE93A90]();
}

uint64_t Contact.familyName.getter()
{
  return MEMORY[0x24BE93BA0]();
}

uint64_t Contact.familyName.setter()
{
  return MEMORY[0x24BE93BA8]();
}

uint64_t Contact.middleName.getter()
{
  return MEMORY[0x24BE93BB0]();
}

uint64_t Contact.middleName.setter()
{
  return MEMORY[0x24BE93BB8]();
}

uint64_t Contact.namePrefix.getter()
{
  return MEMORY[0x24BE93BC0]();
}

uint64_t Contact.namePrefix.setter()
{
  return MEMORY[0x24BE93BC8]();
}

uint64_t Contact.nameSuffix.getter()
{
  return MEMORY[0x24BE93BD0]();
}

uint64_t Contact.nameSuffix.setter()
{
  return MEMORY[0x24BE93BD8]();
}

uint64_t Contact.LabeledValue.init(id:label:value:)()
{
  return MEMORY[0x24BE93BE8]();
}

uint64_t Contact.LabeledValue.label.getter()
{
  return MEMORY[0x24BE93BF0]();
}

uint64_t Contact.contactRelations.getter()
{
  return MEMORY[0x24BE93C10]();
}

uint64_t Contact.contactRelations.setter()
{
  return MEMORY[0x24BE93C18]();
}

uint64_t Contact.organizationName.getter()
{
  return MEMORY[0x24BE93C20]();
}

uint64_t Contact.organizationName.setter()
{
  return MEMORY[0x24BE93C28]();
}

uint64_t Contact.previousFamilyName.getter()
{
  return MEMORY[0x24BE93C40]();
}

uint64_t Contact.id.getter()
{
  return MEMORY[0x24BE93C58]();
}

uint64_t Contact.id.setter()
{
  return MEMORY[0x24BE93C60]();
}

uint64_t Contact.isMe.getter()
{
  return MEMORY[0x24BE93C68]();
}

uint64_t Contact.handles.modify()
{
  return MEMORY[0x24BE93C80]();
}

uint64_t Contact.handles.getter()
{
  return MEMORY[0x24BE93C88]();
}

uint64_t Contact.nickname.getter()
{
  return MEMORY[0x24BE93C98]();
}

uint64_t Contact.nickname.setter()
{
  return MEMORY[0x24BE93CA0]();
}

uint64_t Contact.givenName.getter()
{
  return MEMORY[0x24BE93CA8]();
}

uint64_t Contact.givenName.setter()
{
  return MEMORY[0x24BE93CB0]();
}

uint64_t Contact.init()()
{
  return MEMORY[0x24BE93CB8]();
}

uint64_t DateTime.init(withDate:time:)()
{
  return MEMORY[0x24BE93D80]();
}

uint64_t DateTime.Time.init(withHour:)()
{
  return MEMORY[0x24BE93FB0]();
}

uint64_t type metadata accessor for DateTime.Time()
{
  return MEMORY[0x24BE93FB8]();
}

uint64_t type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange()
{
  return MEMORY[0x24BE94110]();
}

uint64_t DateTime.toINDateComponentsRange(calendar:timeZone:)()
{
  return MEMORY[0x24BE941E8]();
}

uint64_t type metadata accessor for DateTime()
{
  return MEMORY[0x24BE942A8]();
}

uint64_t InputOrigin.rawValue.getter()
{
  return MEMORY[0x24BEA8A40]();
}

uint64_t type metadata accessor for InputOrigin()
{
  return MEMORY[0x24BEA8A48]();
}

uint64_t Transformer.init(transform:)()
{
  return MEMORY[0x24BEA8A80]();
}

uint64_t Transformer.transform.getter()
{
  return MEMORY[0x24BEA8A88]();
}

uint64_t static ResponseMode.voiceForward.getter()
{
  return MEMORY[0x24BEA8AC0]();
}

uint64_t type metadata accessor for ResponseMode()
{
  return MEMORY[0x24BEA8AE8]();
}

uint64_t InteractionType.rawValue.getter()
{
  return MEMORY[0x24BEA8C40]();
}

uint64_t type metadata accessor for InteractionType()
{
  return MEMORY[0x24BEA8C48]();
}

uint64_t type metadata accessor for TransformationError()
{
  return MEMORY[0x24BEA8DC8]();
}

uint64_t dispatch thunk of DialogDateFormatter.Builder.withOmitYear(_:)()
{
  return MEMORY[0x24BE92220]();
}

uint64_t dispatch thunk of DialogDateFormatter.Builder.build()()
{
  return MEMORY[0x24BE92228]();
}

uint64_t DialogDateFormatter.Builder.init()()
{
  return MEMORY[0x24BE92230]();
}

uint64_t type metadata accessor for DialogDateFormatter.Builder()
{
  return MEMORY[0x24BE92238]();
}

uint64_t dispatch thunk of DialogLocationValue.Builder.withAddress(_:)()
{
  return MEMORY[0x24BE92258]();
}

uint64_t dispatch thunk of DialogLocationValue.Builder.build()()
{
  return MEMORY[0x24BE92260]();
}

uint64_t DialogLocationValue.Builder.init()()
{
  return MEMORY[0x24BE92268]();
}

uint64_t type metadata accessor for DialogLocationValue.Builder()
{
  return MEMORY[0x24BE92270]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withCountry(print:speak:)()
{
  return MEMORY[0x24BE92278]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withLocality(print:speak:)()
{
  return MEMORY[0x24BE92288]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withPostCode(print:speak:)()
{
  return MEMORY[0x24BE92298]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withCountryCode(print:speak:)()
{
  return MEMORY[0x24BE922A8]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withThoroughfare(print:speak:)()
{
  return MEMORY[0x24BE922B8]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withAdministrativeArea(print:speak:)()
{
  return MEMORY[0x24BE922D8]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withSubAdministrativeArea(print:speak:)()
{
  return MEMORY[0x24BE922E8]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withAdministrativeAreaCode(print:speak:)()
{
  return MEMORY[0x24BE922F8]();
}

uint64_t dispatch thunk of DialogLocationAddress.Builder.withName(print:speak:)()
{
  return MEMORY[0x24BE92310]();
}

uint64_t DialogLocationAddress.Builder.init()()
{
  return MEMORY[0x24BE92320]();
}

uint64_t type metadata accessor for DialogLocationAddress.Builder()
{
  return MEMORY[0x24BE92328]();
}

uint64_t dispatch thunk of DialogLocationAddress.__allocating_init(builder:)()
{
  return MEMORY[0x24BE92330]();
}

uint64_t type metadata accessor for DialogLocationAddress()
{
  return MEMORY[0x24BE92338]();
}

uint64_t dispatch thunk of DialogPerson.mockGlobals.setter()
{
  return MEMORY[0x24BE92448]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withCompany(print:speak:)()
{
  return MEMORY[0x24BE924A0]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withCompany(_:)()
{
  return MEMORY[0x24BE924A8]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withPronoun(_:)()
{
  return MEMORY[0x24BE924B0]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withNickname(_:)()
{
  return MEMORY[0x24BE924D0]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withGivenName(_:)()
{
  return MEMORY[0x24BE924D8]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withFamilyName(_:)()
{
  return MEMORY[0x24BE924E0]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withMiddleName(_:)()
{
  return MEMORY[0x24BE924E8]();
}

uint64_t dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)()
{
  return MEMORY[0x24BE92500]();
}

uint64_t dispatch thunk of DialogPerson.Builder.build()()
{
  return MEMORY[0x24BE92510]();
}

uint64_t DialogPerson.Builder.init()()
{
  return MEMORY[0x24BE92518]();
}

uint64_t type metadata accessor for DialogPerson.Builder()
{
  return MEMORY[0x24BE92520]();
}

uint64_t dispatch thunk of DialogPerson.__allocating_init(builder:)()
{
  return MEMORY[0x24BE92538]();
}

uint64_t DialogPerson.company.getter()
{
  return MEMORY[0x24BE92548]();
}

uint64_t dispatch thunk of DialogPerson.fullName.getter()
{
  return MEMORY[0x24BE92560]();
}

uint64_t DialogPerson.nickname.getter()
{
  return MEMORY[0x24BE92568]();
}

uint64_t type metadata accessor for DialogPerson()
{
  return MEMORY[0x24BE92588]();
}

uint64_t dispatch thunk of DialogPronoun.Builder.withInitialPronoun(_:)()
{
  return MEMORY[0x24BE925F0]();
}

uint64_t dispatch thunk of DialogPronoun.Builder.build()()
{
  return MEMORY[0x24BE925F8]();
}

uint64_t DialogPronoun.Builder.init()()
{
  return MEMORY[0x24BE92600]();
}

uint64_t type metadata accessor for DialogPronoun.Builder()
{
  return MEMORY[0x24BE92608]();
}

uint64_t dispatch thunk of DialogCalendar.isYesterday.getter()
{
  return MEMORY[0x24BE92610]();
}

uint64_t dispatch thunk of DialogCalendar.mockGlobals.setter()
{
  return MEMORY[0x24BE92618]();
}

uint64_t dispatch thunk of DialogCalendar.withinPastWeek.getter()
{
  return MEMORY[0x24BE92620]();
}

uint64_t dispatch thunk of DialogCalendar.dateDescriptive.getter()
{
  return MEMORY[0x24BE92628]();
}

uint64_t dispatch thunk of DialogCalendar.Builder.withDateFormatter(_:)()
{
  return MEMORY[0x24BE92648]();
}

uint64_t dispatch thunk of DialogCalendar.Builder.build()()
{
  return MEMORY[0x24BE92658]();
}

uint64_t dispatch thunk of DialogCalendar.Builder.withSecs(_:)()
{
  return MEMORY[0x24BE92668]();
}

uint64_t DialogCalendar.Builder.init()()
{
  return MEMORY[0x24BE92670]();
}

uint64_t type metadata accessor for DialogCalendar.Builder()
{
  return MEMORY[0x24BE92678]();
}

uint64_t dispatch thunk of DialogCalendar.__allocating_init(builder:)()
{
  return MEMORY[0x24BE92680]();
}

uint64_t DialogCalendar.init(builder:)()
{
  return MEMORY[0x24BE92688]();
}

uint64_t type metadata accessor for DialogCalendar()
{
  return MEMORY[0x24BE92690]();
}

uint64_t dispatch thunk of DialogDuration.mockGlobals.setter()
{
  return MEMORY[0x24BE926E8]();
}

uint64_t dispatch thunk of DialogDuration.valueInDays.getter()
{
  return MEMORY[0x24BE926F0]();
}

uint64_t dispatch thunk of DialogDuration.valueInWeeks.getter()
{
  return MEMORY[0x24BE926F8]();
}

uint64_t dispatch thunk of DialogDuration.valueInYears.getter()
{
  return MEMORY[0x24BE92700]();
}

uint64_t dispatch thunk of DialogDuration.valueInMonths.getter()
{
  return MEMORY[0x24BE92708]();
}

uint64_t dispatch thunk of DialogDuration.days.getter()
{
  return MEMORY[0x24BE92718]();
}

uint64_t dispatch thunk of DialogDuration.weeks.getter()
{
  return MEMORY[0x24BE92720]();
}

uint64_t dispatch thunk of DialogDuration.years.getter()
{
  return MEMORY[0x24BE92728]();
}

uint64_t dispatch thunk of DialogDuration.months.getter()
{
  return MEMORY[0x24BE92730]();
}

uint64_t dispatch thunk of DialogDuration.Builder.withSecs(_:)()
{
  return MEMORY[0x24BE92740]();
}

uint64_t DialogDuration.Builder.init()()
{
  return MEMORY[0x24BE92748]();
}

uint64_t type metadata accessor for DialogDuration.Builder()
{
  return MEMORY[0x24BE92750]();
}

uint64_t dispatch thunk of DialogDuration.__allocating_init(builder:)()
{
  return MEMORY[0x24BE92758]();
}

uint64_t type metadata accessor for DialogDuration()
{
  return MEMORY[0x24BE92770]();
}

uint64_t dispatch thunk of DialogLocation.Builder.withValues(_:)()
{
  return MEMORY[0x24BE92790]();
}

uint64_t DialogLocation.Builder.init()()
{
  return MEMORY[0x24BE92798]();
}

uint64_t type metadata accessor for DialogLocation.Builder()
{
  return MEMORY[0x24BE927A0]();
}

uint64_t dispatch thunk of DialogLocation.__allocating_init(builder:)()
{
  return MEMORY[0x24BE927A8]();
}

uint64_t type metadata accessor for DialogLocation()
{
  return MEMORY[0x24BE927B0]();
}

uint64_t CATGlobals.__allocating_init(device:)()
{
  return MEMORY[0x24BE927F0]();
}

uint64_t CATGlobals.__allocating_init()()
{
  return MEMORY[0x24BE92840]();
}

uint64_t type metadata accessor for CATGlobals()
{
  return MEMORY[0x24BE92848]();
}

uint64_t CATWrapper.init(templateDir:options:globals:)()
{
  return MEMORY[0x24BE92860]();
}

uint64_t dispatch thunk of CATWrapper.execute(catId:parameters:)()
{
  return MEMORY[0x24BE92880]();
}

uint64_t CATWrapper.__allocating_init(options:globals:)()
{
  return MEMORY[0x24BE92888]();
}

uint64_t CATWrapper.deinit()
{
  return MEMORY[0x24BE92898]();
}

uint64_t PhonemeData.asNameComponents(locale:)()
{
  return MEMORY[0x24BE92960]();
}

uint64_t type metadata accessor for PhonemeData()
{
  return MEMORY[0x24BE92970]();
}

uint64_t SpeakableString.init(print:speak:)()
{
  return MEMORY[0x24BE929A8]();
}

uint64_t SpeakableString.print.getter()
{
  return MEMORY[0x24BE929B0]();
}

uint64_t type metadata accessor for SpeakableString()
{
  return MEMORY[0x24BE929C8]();
}

uint64_t CATWrapperSimple.init(templateDir:options:globals:)()
{
  return MEMORY[0x24BE929F0]();
}

uint64_t CATWrapperSimple.init(useResponseMode:options:)()
{
  return MEMORY[0x24BE92A00]();
}

uint64_t CATWrapperSimple.__allocating_init(options:globals:)()
{
  return MEMORY[0x24BE92A10]();
}

uint64_t CATWrapperSimple.deinit()
{
  return MEMORY[0x24BE92A28]();
}

uint64_t static PhonemeDataParser.parse(from:)()
{
  return MEMORY[0x24BE94380]();
}

{
  return MEMORY[0x24BE91BA8]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withMultiUserState(_:)()
{
  return MEMORY[0x24BE92A40]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withUserAssignedDeviceName(print:speak:)()
{
  return MEMORY[0x24BE92A48]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withSiriLocale(_:)()
{
  return MEMORY[0x24BE92A50]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withDeviceName(print:speak:)()
{
  return MEMORY[0x24BE92A58]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsWatch(_:)()
{
  return MEMORY[0x24BE92A68]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsCarDnD(_:)()
{
  return MEMORY[0x24BE92A70]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsAppleTV(_:)()
{
  return MEMORY[0x24BE92A78]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsCarPlay(_:)()
{
  return MEMORY[0x24BE92A80]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsHomePod(_:)()
{
  return MEMORY[0x24BE92A88]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsEyesFree(_:)()
{
  return MEMORY[0x24BE92A90]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withInputOrigin(print:speak:)()
{
  return MEMORY[0x24BE92A98]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withInteractionType(print:speak:)()
{
  return MEMORY[0x24BE92AA0]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsLockedWithPasscode(_:)()
{
  return MEMORY[0x24BE92AB0]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsTextToSpeechEnabled(_:)()
{
  return MEMORY[0x24BE92AB8]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsVoiceTriggerEnabled(_:)()
{
  return MEMORY[0x24BE92AC0]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.build()()
{
  return MEMORY[0x24BE92AC8]();
}

uint64_t dispatch thunk of SirikitDeviceState.Builder.withIsMac(_:)()
{
  return MEMORY[0x24BE92AD0]();
}

uint64_t SirikitDeviceState.Builder.init()()
{
  return MEMORY[0x24BE92AE0]();
}

uint64_t type metadata accessor for SirikitDeviceState.Builder()
{
  return MEMORY[0x24BE92AE8]();
}

uint64_t type metadata accessor for SirikitDeviceState()
{
  return MEMORY[0x24BE92B00]();
}

uint64_t dispatch thunk of LabelExecutionResult.subscript.getter()
{
  return MEMORY[0x24BE92B10]();
}

uint64_t CATType.toDictionary.getter()
{
  return MEMORY[0x24BE92B78]();
}

uint64_t static CATOption.defaultMode.getter()
{
  return MEMORY[0x24BE92BF8]();
}

uint64_t type metadata accessor for CATOption()
{
  return MEMORY[0x24BE92C20]();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return MEMORY[0x24BE90B88]();
}

uint64_t type metadata accessor for App()
{
  return MEMORY[0x24BE90BB8]();
}

uint64_t ContactResolutionPatternGenerator.generateDetailedDisambiguationContactNames(contacts:contactPickerDirectInvocationID:contactSelectionDirectInvocationID:windowedPaginationParameters:)()
{
  return MEMORY[0x24BE94478]();
}

uint64_t ContactResolutionPatternGenerator.init(appBundleId:globals:deviceState:)()
{
  return MEMORY[0x24BE94498]();
}

uint64_t type metadata accessor for ContactResolutionPatternGenerator()
{
  return MEMORY[0x24BE944E8]();
}

uint64_t ContactResolutionSnippetGenerator.generateDetailedDisambiguationContactNames(contacts:directInvocationID:outputGenerationManifest:)()
{
  return MEMORY[0x24BE94508]();
}

uint64_t ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)()
{
  return MEMORY[0x24BE94520]();
}

uint64_t type metadata accessor for ContactResolutionSnippetGenerator()
{
  return MEMORY[0x24BE94540]();
}

uint64_t type metadata accessor for ContactsSnippetFlowState()
{
  return MEMORY[0x24BE91BC8]();
}

uint64_t type metadata accessor for ContactsLabelCATContainer.LabelType()
{
  return MEMORY[0x24BE91C18]();
}

uint64_t static ContactsLabelCATContainer.empty.getter()
{
  return MEMORY[0x24BE91C40]();
}

uint64_t ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)()
{
  return MEMORY[0x24BE91C48]();
}

uint64_t type metadata accessor for ContactsLabelCATContainer()
{
  return MEMORY[0x24BE91C58]();
}

uint64_t ContactsSnippetPluginModel.responseViewID.getter()
{
  return MEMORY[0x24BE91C78]();
}

uint64_t type metadata accessor for ContactsSnippetPluginModel()
{
  return MEMORY[0x24BE91C90]();
}

uint64_t CodableContact.init(wrappedValue:)()
{
  return MEMORY[0x24BE91D48]();
}

uint64_t CodableContact.wrappedValue.getter()
{
  return MEMORY[0x24BE91D50]();
}

uint64_t GetContactSnippetModel.init(contact:directInvocationsModel:flowState:labelCATs:)()
{
  return MEMORY[0x24BE91DA8]();
}

uint64_t type metadata accessor for GetContactSnippetModel()
{
  return MEMORY[0x24BE91DC0]();
}

uint64_t type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute.AttributeType()
{
  return MEMORY[0x24BE91E28]();
}

uint64_t GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)()
{
  return MEMORY[0x24BE91E48]();
}

uint64_t type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute()
{
  return MEMORY[0x24BE91E60]();
}

uint64_t GetContactAttributeSnippetModel.init(attributes:contact:flowState:directInvocationsModel:labelCATs:)()
{
  return MEMORY[0x24BE91E78]();
}

uint64_t type metadata accessor for GetContactAttributeSnippetModel()
{
  return MEMORY[0x24BE91EB0]();
}

uint64_t GetContactDirectInvocationsModel.init(contactCardPunchout:sendEmailPunchouts:sendMessagePunchouts:navigationPunchouts:)()
{
  return MEMORY[0x24BE91ED0]();
}

uint64_t type metadata accessor for GetContactDirectInvocationsModel()
{
  return MEMORY[0x24BE91EE8]();
}

uint64_t ModifyContactAttributeSnippetModel.init(attributeToModify:modificationType:contact:flowState:labelCATs:meCardPunchout:targetPunchout:)()
{
  return MEMORY[0x24BE91EF8]();
}

uint64_t type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify()
{
  return MEMORY[0x24BE91F18]();
}

uint64_t type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType()
{
  return MEMORY[0x24BE91F58]();
}

uint64_t type metadata accessor for ModifyContactAttributeSnippetModel()
{
  return MEMORY[0x24BE91F88]();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return MEMORY[0x24BE5BA20]();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return MEMORY[0x24BE5BA38]();
}

uint64_t ReferenceResolutionClient.__allocating_init()()
{
  return MEMORY[0x24BEA54A8]();
}

uint64_t type metadata accessor for ReferenceResolutionClient()
{
  return MEMORY[0x24BEA54B0]();
}

uint64_t dispatch thunk of RRReferenceResolverProtocol.resolve(reference:)()
{
  return MEMORY[0x24BEA54F8]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:_:_:)()
{
  return MEMORY[0x24BEE76F8]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x24BEE7700]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x24BEE7718]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x24BEE7758]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t RRCandidate.entity.getter()
{
  return MEMORY[0x24BEA5578]();
}

uint64_t type metadata accessor for RRCandidate()
{
  return MEMORY[0x24BEA5580]();
}

uint64_t GroupIdentifier.init(id:seq:)()
{
  return MEMORY[0x24BEA5668]();
}

uint64_t type metadata accessor for GroupIdentifier()
{
  return MEMORY[0x24BEA5680]();
}

uint64_t type metadata accessor for RRQuery()
{
  return MEMORY[0x24BEA59D8]();
}

uint64_t RREntity.appBundleId.getter()
{
  return MEMORY[0x24BEA59F0]();
}

uint64_t RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)()
{
  return MEMORY[0x24BEA5A38]();
}

uint64_t RREntity.id.getter()
{
  return MEMORY[0x24BEA5A40]();
}

uint64_t RREntity.usoEntity.getter()
{
  return MEMORY[0x24BEA5A68]();
}

uint64_t type metadata accessor for RREntity()
{
  return MEMORY[0x24BEA5A70]();
}

uint64_t type metadata accessor for RRResult()
{
  return MEMORY[0x24BEA5AD0]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t static DispatchQoS.userInteractive.getter()
{
  return MEMORY[0x24BEE54D8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t BinaryFloatingPoint.formatted<A>(_:)()
{
  return MEMORY[0x24BDCF7F0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x24BEE0270]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x24BEE75F0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A08]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE0A20]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.toSpeakableString.getter()
{
  return MEMORY[0x24BE92C48]();
}

uint64_t String.debugDescription.getter()
{
  return MEMORY[0x24BEE0A78]();
}

uint64_t String.sanitizeCNLabel.getter()
{
  return MEMORY[0x24BE91FB8]();
}

uint64_t static String.EMPTY.getter()
{
  return MEMORY[0x24BE91FC8]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE0B80]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE0BB0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t Sequence.first(where:)()
{
  return MEMORY[0x24BEE0E98]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x24BEE1308]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC08]();
}

uint64_t static Bool._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFC20]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)()
{
  return MEMORY[0x24BE99120]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t CNLabeledValue<>.formattedString.getter()
{
  return MEMORY[0x24BE91FE0]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x24BEE7940]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x24BEE7948]();
}

uint64_t SAClientBoundCommand.data.getter()
{
  return MEMORY[0x24BE91FE8]();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01F0](BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01F8](integerLiteral);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t CNContact.isBirthdayToday.getter()
{
  return MEMORY[0x24BE92000]();
}

uint64_t CNContact.formattedFullName.getter()
{
  return MEMORY[0x24BE92008]();
}

uint64_t CNContact.givenNamePronunciationString.getter()
{
  return MEMORY[0x24BE92040]();
}

uint64_t CNContact.familyNamePronunciationString.getter()
{
  return MEMORY[0x24BE92048]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x24BEE79A0]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x24BEE1C58]();
}

uint64_t Optional<A>.emptyToNil.getter()
{
  return MEMORY[0x24BE92050]();
}

uint64_t Optional<A>.isNilOrEmpty.getter()
{
  return MEMORY[0x24BE92058]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = MEMORY[0x24BEE1D60]();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t Substring.init(_:)()
{
  return MEMORY[0x24BEE1E58]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.components(separatedBy:)()
{
  return MEMORY[0x24BDD04B8]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x24BDD04C8]();
}

uint64_t StringProtocol.capitalized(with:)()
{
  return MEMORY[0x24BDD04E8]();
}

uint64_t StringProtocol.capitalized.getter()
{
  return MEMORY[0x24BDD04F0]();
}

uint64_t StringProtocol.rangeOfCharacter(from:options:range:)()
{
  return MEMORY[0x24BDD0518]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t StringProtocol.addingPercentEncoding(withAllowedCharacters:)()
{
  return MEMORY[0x24BDD0570]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x24BDD0600]();
}

uint64_t StringProtocol.substring(to:)()
{
  return MEMORY[0x24BDD0650]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x24BEE2090]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x24BEE23A8]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x24BEE2E58](isUnique, capacity);
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x24BEE2E70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32E8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3438]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _diagnoseUnexpectedEnumCase<A>(type:)()
{
  return MEMORY[0x24BEE3A28]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x24BEE3D50]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t Result<>.firstPrint.getter()
{
  return MEMORY[0x24BE92C58]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

uint64_t INTypedObjectWithCustomObject()
{
  return MEMORY[0x24BDD9B00]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x24BEE4BF0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x24BEE4C70]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x24BEE4C88]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

